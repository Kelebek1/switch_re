#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("ARM", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 2);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);

	add_segm_ex(0X80300000,0X80307000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80300000,"appservice");
	SegClass (0X80300000,"DATA");
	SegDefReg(0x80300000,"T",0x0);
	SegDefReg(0x80300000,"DS",0x1);
	set_segm_type(0X80300000,3);
	add_segm_ex(0X80307000,0X80500000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80307000,"ukn_seg");
	SegClass (0X80307000,"ukn_seg");
	SegDefReg(0x80307000,"T",0x0);
	SegDefReg(0x80307000,"DS",0x1);
	add_segm_ex(0X80500000,0X80539000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80500000,".text");
	SegClass (0X80500000,"TEXT");
	SegDefReg(0x80500000,"T",0x0);
	SegDefReg(0x80500000,"DS",0x1);
	add_segm_ex(0X80539000,0X80547000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80539000,".data");
	SegClass (0X80539000,"CONST");
	SegDefReg(0x80539000,"T",0x0);
	SegDefReg(0x80539000,"DS",0x1);
	set_segm_type(0X80539000,3);
	add_segm_ex(0X80547000,0X8054700C,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80547000,"uncachedData");
	SegClass (0X80547000,"uncachedData");
	SegDefReg(0x80547000,"T",0x0);
	SegDefReg(0x80547000,"DS",0x1);
	add_segm_ex(0X8054700C,0X80548000,0,1,1,5,ADDSEG_NOSREG);
	SegRename(0X8054700C,"ROM");
	SegClass (0X8054700C,"CODE");
	SegDefReg(0x8054700C,"T",0x0);
	SegDefReg(0x8054700C,"DS",0x1);
	set_segm_type(0X8054700C,2);
	add_segm_ex(0X80548000,0X80576DB8,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80548000,"dramSharedApp");
	SegClass (0X80548000,"dramSharedApp");
	SegDefReg(0x80548000,"T",0x0);
	SegDefReg(0x80548000,"DS",0x1);
	add_segm_ex(0X80578000,0X8077C000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80578000,"prebss");
	SegClass (0X80578000,"BSS");
	SegDefReg(0x80578000,"T",0x0);
	SegDefReg(0x80578000,"DS",0x1);
	set_segm_type(0X80578000,9);
	add_segm_ex(0X8077C000,0X807B5834,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X8077C000,".bss");
	SegClass (0X8077C000,"BSS");
	SegDefReg(0x8077C000,"T",0x0);
	SegDefReg(0x8077C000,"DS",0x1);
	set_segm_type(0X8077C000,9);
	add_segm_ex(0X807B6000,0X80800000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X807B6000,"heap");
	SegClass (0X807B6000,"heap");
	SegDefReg(0x807B6000,"T",0x0);
	SegDefReg(0x807B6000,"DS",0x1);
	set_inf_attr(INF_LOW_OFF, 0x702EF700);
	set_inf_attr(INF_HIGH_OFF, 0x8073437C);
}

static Enums_0(id) {

	id = add_enum(-1,"nn::audio::CommandType",0x1100000);
	add_enum_member(id,"PcmInt16DataSourceCommandVersion1",	0X1,	-1);
	add_enum_member(id,"PcmInt16DataSourceCommandVersion2",	0X2,	-1);
	add_enum_member(id,"FloatDataSourceCommandVersion1",	0X3,	-1);
	add_enum_member(id,"FloatDataSourceCommandVersion2",	0X4,	-1);
	add_enum_member(id,"AdpcmDataSourceCommandVersion1",	0X5,	-1);
	add_enum_member(id,"AdpcmDataSourceCommandVersion2",	0X6,	-1);
	add_enum_member(id,"Volume",	0X7,	-1);
	add_enum_member(id,"VolumeRamp",	0X8,	-1);
	add_enum_member(id,"BiquadFilter",	0X9,	-1);
	add_enum_member(id,"Mix",	0XA,	-1);
	add_enum_member(id,"MixRamp",	0XB,	-1);
	add_enum_member(id,"MixRampGrouped",	0XC,	-1);
	add_enum_member(id,"DepopPrepare",	0XD,	-1);
	add_enum_member(id,"DepopForMixBuffers",	0XE,	-1);
	add_enum_member(id,"Delay",	0XF,	-1);
	add_enum_member(id,"Upsample",	0X10,	-1);
	add_enum_member(id,"DownMix6chTo2ch",	0X11,	-1);
	add_enum_member(id,"Aux",	0X12,	-1);
	add_enum_member(id,"DeviceSink",	0X13,	-1);
	add_enum_member(id,"CircularBufferSink",	0X14,	-1);
	add_enum_member(id,"Reverb",	0X15,	-1);
	add_enum_member(id,"I3dl2Reverb",	0X16,	-1);
	add_enum_member(id,"Performance",	0X17,	-1);
	add_enum_member(id,"ClearMixBuffer",	0X18,	-1);
	add_enum_member(id,"CopyMixBuffer",	0X19,	-1);
	add_enum_member(id,"LightLimiterV1",	0X1A,	-1);
	add_enum_member(id,"LightLimiterV2",	0X1B,	-1);
	add_enum_member(id,"MultiTapBiquadFilter",	0X1C,	-1);
	add_enum_member(id,"Capture",	0X1D,	-1);
	add_enum_member(id,"Compressor",	0X1E,	-1);
	id = add_enum(-1,"nn::audio::PerformanceDetailType",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"nn::audio::PerformanceEntryType",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"Stop",	0X2,	0x2);
	id = add_enum(-1,"VoiceType::SrcQuality",0x1100000);
	add_enum_member(id,"SrcQuality_Medium",	0,	-1);
	add_enum_member(id,"SrcQuality_High",	0X1,	-1);
	add_enum_member(id,"SrcQuality_Low",	0X2,	-1);
	id = add_enum(-1,"nn::audio::SampleFormat",0x1100000);
	add_enum_member(id,"PcmInt8",	0X1,	-1);
	add_enum_member(id,"PcmInt16",	0X2,	-1);
	add_enum_member(id,"PcmInt24",	0X3,	-1);
	add_enum_member(id,"PcmInt32",	0X4,	-1);
	add_enum_member(id,"PcmFloat",	0X5,	-1);
	add_enum_member(id,"Adpcm",	0X6,	-1);
	id = add_enum(-1,"EffectState",0x1100000);
	add_enum_member(id,"Invalid",	0,	-1);
	add_enum_member(id,"New",	0X1,	-1);
	add_enum_member(id,"Enabled",	0X2,	-1);
	add_enum_member(id,"Disabled",	0X3,	-1);
	id = add_enum(-1,"SessionType",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"adsp_app_msg",0x1100000);
	add_enum_member(id,"OS_LOAD_COMPLETE",	0,	-1);
	add_enum_member(id,"RUN_ADSP_APP",	0X1,	-1);
	add_enum_member(id,"ADSP_APP_INIT",	0X2,	-1);
	add_enum_member(id,"ADSP_APP_START",	0X3,	-1);
	add_enum_member(id,"ADSP_APP_START_STATUS",	0X4,	-1);
	add_enum_member(id,"ADSP_APP_COMPLETE_STATUS",	0X5,	-1);
	id = add_enum(-1,"comp_eve_elem_type_t",0x1100000);
	add_enum_member(id,"IS_SEMAPHORE",	0,	-1);
	add_enum_member(id,"IS_EVENT",	0X1,	-1);
	add_enum_member(id,"IS_C_EVENT",	0X2,	-1);
	id = add_enum(-1,"sched_policy",0x1100000);
	add_enum_member(id,"SCHED_OTHER",	0,	-1);
	add_enum_member(id,"SCHED_RR",	0,	-1);
	add_enum_member(id,"SCHED_FIFO",	0X1,	-1);
	add_enum_member(id,"SCHED_EDF",	0X2,	-1);
	id = add_enum(-1,"$2ACB2F16C07EDC6EF91A32839C59B658",0x1100000);
	add_enum_member(id,"INVALID",	0,	-1);
	add_enum_member(id,"VALID",	0X1,	-1);
	id = add_enum(-1,"$5C9FD532B40CB77241DBDD5010075635",0x1100000);
	add_enum_member(id,"SHORT",	0,	-1);
	add_enum_member(id,"EXTENDED",	0X1,	-1);
	id = add_enum(-1,"thread_state",0x1100000);
	add_enum_member(id,"THREAD_SUSPENDED",	0,	-1);
	add_enum_member(id,"THREAD_READY",	0X1,	-1);
	add_enum_member(id,"THREAD_RUNNING",	0X2,	-1);
	add_enum_member(id,"THREAD_BLOCKED",	0X3,	-1);
	add_enum_member(id,"THREAD_SLEEPING",	0X4,	-1);
	add_enum_member(id,"THREAD_DEATH",	0X5,	-1);
	id = add_enum(-1,"adsp_mbx_direction",0x1100000);
	add_enum_member(id,"ADSP_MBX_SEND",	0,	-1);
	add_enum_member(id,"ADSP_MBX_RCV",	0X1,	-1);
	id = add_enum(-1,"handler_return",0x1100000);
	add_enum_member(id,"INT_NO_RESCHEDULE",	0,	-1);
	add_enum_member(id,"INT_RESCHEDULE",	0X1,	-1);
	id = add_enum(-1,"ParameterState",0x1100000);
	add_enum_member(id,"Initialised",	0,	-1);
	add_enum_member(id,"Updating",	0X1,	-1);
	add_enum_member(id,"Updated",	0X2,	-1);
	id = add_enum(-1,"vector_trigger_type",0x1100000);
	add_enum_member(id,"LEVEL_TRIGGER",	0,	-1);
	add_enum_member(id,"EDGE_TRIGGER",	0X1,	-1);
	id = add_enum(-1,"tegra_chipid",0x1100000);
	add_enum_member(id,"TEGRA_CHIPID_UNKNOWN",	0,	-1);
	add_enum_member(id,"TEGRA_CHIPID_TEGRA18",	0X18,	-1);
	add_enum_member(id,"TEGRA_CHIPID_TEGRA19",	0X19,	-1);
	add_enum_member(id,"TEGRA_CHIPID_TEGRA21",	0X21,	-1);
	id = add_enum(-1,"OPUS_REQUEST",0x1100000);
	add_enum_member(id,"OPUS_SET_APPLICATION_REQUEST",	0XFA0,	-1);
	add_enum_member(id,"OPUS_GET_APPLICATION_REQUEST",	0XFA1,	-1);
	add_enum_member(id,"OPUS_SET_BITRATE_REQUEST",	0XFA2,	-1);
	add_enum_member(id,"OPUS_GET_BITRATE_REQUEST",	0XFA3,	-1);
	add_enum_member(id,"OPUS_SET_MAX_BANDWIDTH_REQUEST",	0XFA4,	-1);
	add_enum_member(id,"OPUS_GET_MAX_BANDWIDTH_REQUEST",	0XFA5,	-1);
	add_enum_member(id,"OPUS_SET_VBR_REQUEST",	0XFA6,	-1);
	add_enum_member(id,"OPUS_GET_VBR_REQUEST",	0XFA7,	-1);
	add_enum_member(id,"OPUS_SET_BANDWIDTH_REQUEST",	0XFA8,	-1);
	add_enum_member(id,"OPUS_GET_BANDWIDTH_REQUEST",	0XFA9,	-1);
	add_enum_member(id,"OPUS_SET_COMPLEXITY_REQUEST",	0XFAA,	-1);
	add_enum_member(id,"OPUS_GET_COMPLEXITY_REQUEST",	0XFAB,	-1);
	add_enum_member(id,"OPUS_SET_INBAND_FEC_REQUEST",	0XFAC,	-1);
	add_enum_member(id,"OPUS_GET_INBAND_FEC_REQUEST",	0XFAD,	-1);
	add_enum_member(id,"OPUS_SET_PACKET_LOSS_PERC_REQUEST",	0XFAE,	-1);
	add_enum_member(id,"OPUS_GET_PACKET_LOSS_PERC_REQUEST",	0XFAF,	-1);
	add_enum_member(id,"OPUS_SET_DTX_REQUEST",	0XFB0,	-1);
	add_enum_member(id,"OPUS_GET_DTX_REQUEST",	0XFB1,	-1);
	add_enum_member(id,"OPUS_SET_VBR_CONSTRAINT_REQUEST",	0XFB4,	-1);
	add_enum_member(id,"OPUS_GET_VBR_CONSTRAINT_REQUEST",	0XFB5,	-1);
	add_enum_member(id,"OPUS_SET_FORCE_CHANNELS_REQUEST",	0XFB6,	-1);
	add_enum_member(id,"OPUS_GET_FORCE_CHANNELS_REQUEST",	0XFB7,	-1);
	add_enum_member(id,"OPUS_SET_SIGNAL_REQUEST",	0XFB8,	-1);
	add_enum_member(id,"OPUS_GET_SIGNAL_REQUEST",	0XFB9,	-1);
	add_enum_member(id,"OPUS_GET_LOOKAHEAD_REQUEST",	0XFBB,	-1);
	add_enum_member(id,"OPUS_RESET_STATE",	0XFBC,	-1);
	add_enum_member(id,"OPUS_GET_SAMPLE_RATE_REQUEST",	0XFBD,	-1);
	add_enum_member(id,"OPUS_GET_FINAL_RANGE_REQUEST",	0XFBF,	-1);
	add_enum_member(id,"OPUS_GET_PITCH_REQUEST",	0XFC1,	-1);
	add_enum_member(id,"OPUS_SET_GAIN_REQUEST",	0XFC2,	-1);
	add_enum_member(id,"OPUS_SET_LSB_DEPTH_REQUEST",	0XFC4,	-1);
	add_enum_member(id,"OPUS_GET_LSB_DEPTH_REQUEST",	0XFC5,	-1);
	add_enum_member(id,"OPUS_GET_LAST_PACKET_DURATION_REQUEST",	0XFC7,	-1);
	add_enum_member(id,"OPUS_SET_EXPERT_FRAME_DURATION_REQUEST",	0XFC8,	-1);
	add_enum_member(id,"OPUS_GET_EXPERT_FRAME_DURATION_REQUEST",	0XFC9,	-1);
	add_enum_member(id,"OPUS_SET_PREDICTION_DISABLED_REQUEST",	0XFCA,	-1);
	add_enum_member(id,"OPUS_GET_PREDICTION_DISABLED_REQUEST",	0XFCB,	-1);
	add_enum_member(id,"OPUS_GET_GAIN_REQUEST",	0XFCD,	-1);
	add_enum_member(id,"OPUS_SET_PHASE_INVERSION_DISABLED_REQUEST",	0XFCE,	-1);
	add_enum_member(id,"OPUS_GET_PHASE_INVERSION_DISABLED_REQUEST",	0XFCF,	-1);
	add_enum_member(id,"OPUS_GET_IN_DTX_REQUEST",	0XFD1,	-1);
	add_enum_member(id,"OPUS_MULTISTREAM_GET_ENCODER_STATE_REQUEST",	0X1400,	-1);
	add_enum_member(id,"OPUS_MULTISTREAM_GET_DECODER_STATE_REQUEST",	0X1402,	-1);
	id = add_enum(-1,"RenderMessage",0x1100000);
	add_enum_member(id,"MapUnmap_Map",	0X1,	-1);
	add_enum_member(id,"MapUnmap_MapResponse",	0X2,	-1);
	add_enum_member(id,"MapUnmap_Unmap",	0X3,	-1);
	add_enum_member(id,"MapUnmap_UnmapResponse",	0X4,	-1);
	add_enum_member(id,"MapUnmap_InvalidateCache",	0X5,	-1);
	add_enum_member(id,"MapUnmap_InvalidateCacheResponse",	0X6,	-1);
	add_enum_member(id,"MapUnmap_Shutdown",	0X7,	-1);
	add_enum_member(id,"MapUnmap_ShutdownResponse",	0X8,	-1);
	add_enum_member(id,"InitializeOK",	0X16,	-1);
	add_enum_member(id,"RenderResponse",	0X20,	-1);
	id = add_enum(-1,"OpusMessage",0x1100000);
	add_enum_member(id,"Start",	0X1,	-1);
	add_enum_member(id,"Shutdown",	0X2,	-1);
	add_enum_member(id,"StartOK",	0XB,	-1);
	add_enum_member(id,"ShutdownOK",	0XC,	-1);
	add_enum_member(id,"GetWorkBufferSize",	0X15,	-1);
	add_enum_member(id,"InitializeDecodeObject",	0X16,	-1);
	add_enum_member(id,"ShutdownDecodeObject",	0X17,	-1);
	add_enum_member(id,"DecodeInterleaved",	0X18,	-1);
	add_enum_member(id,"UnmapMemory",	0X1A,	-1);
	add_enum_member(id,"GetWorkBufferSizeForMultiStream",	0X1B,	-1);
	add_enum_member(id,"InitializeMultiStreamDecodeObject",	0X1C,	-1);
	add_enum_member(id,"ShutdownMultiStreamDecodeObject",	0X1D,	-1);
	add_enum_member(id,"DecodeInterleavedForMultiStream",	0X1E,	-1);
	add_enum_member(id,"GetWorkBufferSizeOK",	0X29,	-1);
	add_enum_member(id,"InitializeDecodeObjectOK",	0X2A,	-1);
	add_enum_member(id,"ShutdownDecodeObjectOK",	0X2B,	-1);
	add_enum_member(id,"DecodeInterleavedOK",	0X2C,	-1);
	add_enum_member(id,"MapMemoryOK",	0X2D,	-1);
	add_enum_member(id,"UnmapMemoryOK",	0X2E,	-1);
	add_enum_member(id,"GetWorkBufferSizeForMultiStreamOK",	0X2F,	-1);
	add_enum_member(id,"InitializeMultiStreamDecodeObjectOK",	0X30,	-1);
	add_enum_member(id,"ShutdownMultiStreamDecodeObjectOK",	0X31,	-1);
	add_enum_member(id,"DecodeInterleavedForMultiStreamOK",	0X32,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("float32x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("int32x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("int8x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("float32x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("nn::audio::dsp::Command");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "u8");
	SetType(get_member_id(id, 0x6), "s16");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "u32");
	SetType(get_member_id(id, 0x10), "char[16]");
	id = get_struc_id("__n64");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("__n128");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint8x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("int16x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("int32x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("uint16x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("uint32x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("int8x16_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("int16x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("int64x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint8x16_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint16x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint32x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint64x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("poly8x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("poly16x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("poly16x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("poly8x16_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("float64x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("poly128_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("float32x2x2_t");
	SetType(get_member_id(id, 0x0), "float32x2_t[2]");
	id = get_struc_id("nn::os::ThreadType");
	SetType(get_member_id(id, 0x0), "__int64");
	SetType(get_member_id(id, 0x8), "__int64");
	SetType(get_member_id(id, 0x10), "__int64");
	SetType(get_member_id(id, 0x18), "char[32]");
	SetType(get_member_id(id, 0x38), "uint32_t");
	SetType(get_member_id(id, 0x3C), "char");
	SetType(get_member_id(id, 0x3E), "__int16");
	SetType(get_member_id(id, 0x40), "uint32_t");
	SetType(get_member_id(id, 0x48), "uint64_t");
	SetType(get_member_id(id, 0x50), "uint64_t");
	SetType(get_member_id(id, 0x58), "uint64_t");
	SetType(get_member_id(id, 0x60), "uint64_t");
	SetType(get_member_id(id, 0x68), "uint64_t");
	SetType(get_member_id(id, 0x70), "__int64");
	SetType(get_member_id(id, 0x78), "__int64");
	SetType(get_member_id(id, 0x80), "__int64");
	SetType(get_member_id(id, 0x88), "char[256]");
	SetType(get_member_id(id, 0x188), "char[32]");
	SetType(get_member_id(id, 0x1A8), "const char *");
	SetType(get_member_id(id, 0x1AC), "nn::os::detail::InternalCriticalSection");
	SetType(get_member_id(id, 0x1B0), "nn::os::detail::InternalConditionVariable");
	SetType(get_member_id(id, 0x1B4), "nn::svc::Handle");
	id = get_struc_id("nn::os::detail::InternalCriticalSection");
	SetType(get_member_id(id, 0x0), "u32");
	id = get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon");
	SetType(get_member_id(id, 0x0), "uint32_t");
	id = get_struc_id("nn::os::detail::InternalConditionVariable");
	SetType(get_member_id(id, 0x0), "u32");
	id = get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon");
	SetType(get_member_id(id, 0x0), "uint32_t");
	id = get_struc_id("nn::os::detail::InternalCriticalSectionStorage");
	SetType(get_member_id(id, 0x0), "nn::os::detail::InternalCriticalSection");
	id = get_struc_id("nn::os::ConditionVariableType");
	SetType(get_member_id(id, 0x0), "char");
	SetType(get_member_id(id, 0x4), "int");
	id = get_struc_id("nn::os::EventType");
	SetType(get_member_id(id, 0x0), "nn::os::EventType *");
	SetType(get_member_id(id, 0x4), "nn::os::EventType *");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0x9), "bool");
	SetType(get_member_id(id, 0xA), "bool");
	SetType(get_member_id(id, 0xB), "bool");
	SetType(get_member_id(id, 0xC), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "nn::os::detail::InternalCriticalSectionImplByHorizon");
	SetType(get_member_id(id, 0x18), "nn::os::detail::InternalConditionVariableImplByHorizon");
	id = get_struc_id("nn::os::detail::InterProcessEventType");
	SetType(get_member_id(id, 0x0), "nn::os::EventType *");
	SetType(get_member_id(id, 0x4), "nn::os::EventType *");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0x9), "bool");
	SetType(get_member_id(id, 0xA), "bool");
	SetType(get_member_id(id, 0xB), "bool");
	SetType(get_member_id(id, 0xC), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "nn::os::detail::InternalCriticalSectionImplByHorizon");
	SetType(get_member_id(id, 0x18), "nn::os::detail::InternalConditionVariableImplByHorizon");
	id = get_struc_id("nn::os::SystemEventType::u");
	SetType(get_member_id(id, 0x0), "nn::os::EventType");
	SetType(get_member_id(id, 0x1), "nn::os::detail::InterProcessEventType");
	id = get_struc_id("nn::sf::NativeHandle");
	SetType(get_member_id(id, 0x0), "nn::svc::Handle");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "bool");
	id = get_struc_id("nn::audio::ICommand");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "nn::audio::CommandType");
	SetType(get_member_id(id, 0x6), "s16");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "u32");
	id = get_struc_id("nn::audio::CircularBufferSinkCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s16[6]");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "s32");
	SetType(get_member_id(id, 0x2C), "s32");
	SetType(get_member_id(id, 0x30), "char[4]");
	id = get_struc_id("nn::audio::dsp::CommandListProcessor");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "u32");
	SetType(get_member_id(id, 0x10), "u32");
	SetType(get_member_id(id, 0x14), "u32");
	SetType(get_member_id(id, 0x18), "u32");
	SetType(get_member_id(id, 0x1C), "void *");
	SetType(get_member_id(id, 0x20), "u32");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "u64");
	SetType(get_member_id(id, 0x30), "u64");
	SetType(get_member_id(id, 0x38), "u64");
	id = get_struc_id("MixDevice");
	SetType(get_member_id(id, 0x0), "HardwareDevice *");
	SetType(get_member_id(id, 0x4), "char[256]");
	SetType(get_member_id(id, 0x104), "s32");
	id = get_struc_id("nn::audio::LightLimiterV1Command");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "s16[6]");
	SetType(get_member_id(id, 0x1C), "s16[6]");
	SetType(get_member_id(id, 0x28), "nn::audio::LightLimiterParameter");
	SetType(get_member_id(id, 0x6C), "u32");
	SetType(get_member_id(id, 0x70), "u32");
	SetType(get_member_id(id, 0x74), "bool");
	id = get_struc_id("nn::audio::LightLimiterParameter");
	SetType(get_member_id(id, 0x0), "s8[6]");
	SetType(get_member_id(id, 0x6), "s8[6]");
	SetType(get_member_id(id, 0xC), "s16");
	SetType(get_member_id(id, 0xE), "s16");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "f32");
	SetType(get_member_id(id, 0x28), "f32");
	SetType(get_member_id(id, 0x2C), "f32");
	SetType(get_member_id(id, 0x30), "f32");
	SetType(get_member_id(id, 0x34), "f32");
	SetType(get_member_id(id, 0x38), "s32");
	SetType(get_member_id(id, 0x3C), "s32");
	SetType(get_member_id(id, 0x40), "s8");
	SetType(get_member_id(id, 0x41), "bool");
	SetType(get_member_id(id, 0x42), "bool");
	SetType(get_member_id(id, 0x43), "char[1]");
	id = get_struc_id("nn::audio::LightLimiterState");
	SetType(get_member_id(id, 0x0), "f32 *");
	SetType(get_member_id(id, 0x4), "f32 *");
	SetType(get_member_id(id, 0x8), "f32 *");
	SetType(get_member_id(id, 0xC), "s32 *");
	SetType(get_member_id(id, 0x10), "char[32]");
	id = get_struc_id("nn::audio::LightLimiterStatisticsInternal");
	SetType(get_member_id(id, 0x0), "f32[6]");
	SetType(get_member_id(id, 0x18), "f32[6]");
	id = get_struc_id("nn::audio::PerformanceCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "nn::audio::PerformanceEntryType");
	SetType(get_member_id(id, 0x18), "nn::audio::server::PerformanceEntryAddresses");
	id = get_struc_id("nn::audio::server::PerformanceEntryAddresses");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "u32");
	id = get_struc_id("nn::audio::CopyMixBufferCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	id = get_struc_id("nn::audio::DownMix6chTo2chCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16[6]");
	SetType(get_member_id(id, 0x20), "s16[6]");
	SetType(get_member_id(id, 0x2C), "s32[4]");
	SetType(get_member_id(id, 0x3C), "char[4]");
	id = get_struc_id("nn::audio::MixRampCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	SetType(get_member_id(id, 0x13), "u8");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	id = get_struc_id("nn::audio::server::VoiceState");
	SetType(get_member_id(id, 0x0), "s64");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "bool[4]");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32[4]");
	SetType(get_member_id(id, 0x28), "s32");
	SetType(get_member_id(id, 0x2C), "char[4]");
	SetType(get_member_id(id, 0x30), "nn::codec::AdpcmContext");
	SetType(get_member_id(id, 0x36), "char[2]");
	SetType(get_member_id(id, 0x38), "s16[16]");
	SetType(get_member_id(id, 0x58), "char[8]");
	SetType(get_member_id(id, 0x60), "s64[2]");
	SetType(get_member_id(id, 0x70), "char[16]");
	SetType(get_member_id(id, 0x80), "s32[24]");
	SetType(get_member_id(id, 0xE0), "u32");
	SetType(get_member_id(id, 0xE4), "bool");
	SetType(get_member_id(id, 0xE5), "bool");
	SetType(get_member_id(id, 0xE8), "s32");
	SetType(get_member_id(id, 0xEC), "char[20]");
	id = get_struc_id("nn::codec::AdpcmContext");
	SetType(get_member_id(id, 0x0), "u16");
	SetType(get_member_id(id, 0x2), "u16");
	SetType(get_member_id(id, 0x4), "u16");
	id = get_struc_id("nn::audio::dsp::DecodeFromWaveBuffersArgs");
	SetType(get_member_id(id, 0x0), "nn::audio::SampleFormat");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "nn::audio::VoiceState *");
	SetType(get_member_id(id, 0xC), "nn::audio::WaveBuffer *");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "VoiceType::SrcQuality");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	SetType(get_member_id(id, 0x28), "s32");
	SetType(get_member_id(id, 0x2C), "u32");
	SetType(get_member_id(id, 0x30), "bool");
	SetType(get_member_id(id, 0x31), "bool");
	id = get_struc_id("nn::audio::WaveBuffer");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "u32");
	SetType(get_member_id(id, 0x10), "bool");
	SetType(get_member_id(id, 0x11), "bool");
	SetType(get_member_id(id, 0x14), "u32");
	SetType(get_member_id(id, 0x18), "u32");
	id = get_struc_id("nn::audio::DataSourcePcmInt16V1Command");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "VoiceType::SrcQuality");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "u16");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	SetType(get_member_id(id, 0x28), "nn::audio::WaveBuffer[4]");
	SetType(get_member_id(id, 0x98), "u32");
	id = get_struc_id("nn::audio::server::WaveBuffer");
	SetType(get_member_id(id, 0x0), "nn::audio::server::AddressInfo");
	SetType(get_member_id(id, 0x18), "nn::audio::server::AddressInfo");
	SetType(get_member_id(id, 0x30), "s32");
	SetType(get_member_id(id, 0x34), "s32");
	SetType(get_member_id(id, 0x38), "bool");
	SetType(get_member_id(id, 0x39), "bool");
	SetType(get_member_id(id, 0x3A), "bool");
	SetType(get_member_id(id, 0x3C), "s32");
	SetType(get_member_id(id, 0x40), "s32");
	SetType(get_member_id(id, 0x44), "s32");
	id = get_struc_id("nn::audio::server::AddressInfo");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "u64");
	SetType(get_member_id(id, 0x10), "nn::audio::server::MemoryPoolInfo *");
	SetType(get_member_id(id, 0x14), "u32");
	id = get_struc_id("nn::audio::VoiceState");
	SetType(get_member_id(id, 0x0), "s64");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "bool[4]");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32[4]");
	SetType(get_member_id(id, 0x28), "s32");
	SetType(get_member_id(id, 0x2C), "char[4]");
	SetType(get_member_id(id, 0x30), "nn::codec::AdpcmContext");
	SetType(get_member_id(id, 0x36), "char[2]");
	SetType(get_member_id(id, 0x38), "s16[16]");
	SetType(get_member_id(id, 0x58), "char[8]");
	SetType(get_member_id(id, 0x60), "s64[2]");
	SetType(get_member_id(id, 0x70), "char[16]");
	SetType(get_member_id(id, 0x80), "s32[24]");
	SetType(get_member_id(id, 0xE0), "u32");
	SetType(get_member_id(id, 0xE4), "bool");
	SetType(get_member_id(id, 0xE5), "bool");
	SetType(get_member_id(id, 0xE6), "char[4]");
	SetType(get_member_id(id, 0xEC), "s32");
	SetType(get_member_id(id, 0xF0), "char[16]");
	id = get_struc_id("nn::audio::WaveBufferVersion2");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "u32");
	SetType(get_member_id(id, 0x10), "u32");
	SetType(get_member_id(id, 0x14), "u32");
	SetType(get_member_id(id, 0x18), "u32");
	SetType(get_member_id(id, 0x1C), "u32");
	SetType(get_member_id(id, 0x20), "u32");
	SetType(get_member_id(id, 0x24), "bool");
	SetType(get_member_id(id, 0x25), "bool");
	id = get_struc_id("nn::audio::dsp::DecodeArg");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s16 *");
	SetType(get_member_id(id, 0x18), "nn::codec::AdpcmContext *");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	id = get_struc_id("nn::audio::PcmFloatDataSourceCommandVersion2");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "VoiceType::SrcQuality");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "u16");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	SetType(get_member_id(id, 0x28), "nn::audio::WaveBufferVersion2[4]");
	SetType(get_member_id(id, 0xC8), "u32");
	SetType(get_member_id(id, 0xCC), "char[4]");
	id = get_struc_id("nn::audio::AdpcmDataSourceCommandVersion2");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "VoiceType::SrcQuality");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "u16");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	SetType(get_member_id(id, 0x28), "nn::audio::WaveBufferVersion2[4]");
	SetType(get_member_id(id, 0xC8), "u32");
	SetType(get_member_id(id, 0xCC), "u32");
	id = get_struc_id("nn::audio::AdpcmDataSourceCommandVersion1");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "VoiceType::SrcQuality");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "u16");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "nn::audio::WaveBuffer[4]");
	SetType(get_member_id(id, 0x90), "u32");
	SetType(get_member_id(id, 0x94), "u32");
	id = get_struc_id("nn::audio::VolumeCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	SetType(get_member_id(id, 0x13), "u8");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	SetType(get_member_id(id, 0x18), "s32");
	id = get_struc_id("nn::audio::VolumeRampCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	SetType(get_member_id(id, 0x13), "u8");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	id = get_struc_id("nn::audio::BiquadFilterParameter");
	SetType(get_member_id(id, 0x0), "bool");
	SetType(get_member_id(id, 0x2), "s16[3]");
	SetType(get_member_id(id, 0x8), "s16[2]");
	id = get_struc_id("nn::audio::BiquadFilterCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	SetType(get_member_id(id, 0x18), "s16[3]");
	SetType(get_member_id(id, 0x1E), "s16[2]");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "bool");
	SetType(get_member_id(id, 0x29), "bool");
	SetType(get_member_id(id, 0x2A), "char[2]");
	id = get_struc_id("nn::audio::BiquadFilterState");
	SetType(get_member_id(id, 0x0), "f32");
	SetType(get_member_id(id, 0x4), "f32");
	SetType(get_member_id(id, 0x8), "f32");
	SetType(get_member_id(id, 0xC), "f32");
	id = get_struc_id("nn::audio::MultiTapBiquadFilterCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	SetType(get_member_id(id, 0x18), "char[2]");
	SetType(get_member_id(id, 0x1A), "s16[3]");
	SetType(get_member_id(id, 0x20), "s16[3]");
	SetType(get_member_id(id, 0x26), "s16[2]");
	SetType(get_member_id(id, 0x2A), "s16[2]");
	SetType(get_member_id(id, 0x30), "u32");
	SetType(get_member_id(id, 0x34), "u32");
	SetType(get_member_id(id, 0x38), "bool");
	SetType(get_member_id(id, 0x39), "bool");
	SetType(get_member_id(id, 0x3A), "u8");
	id = get_struc_id("nn::audio::MixCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	SetType(get_member_id(id, 0x13), "u8");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	SetType(get_member_id(id, 0x18), "s32");
	id = get_struc_id("nn::audio::DepopPrepareCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16[24]");
	SetType(get_member_id(id, 0x44), "u32");
	SetType(get_member_id(id, 0x48), "s32");
	SetType(get_member_id(id, 0x4C), "u32");
	id = get_struc_id("nn::audio::DelayState");
	SetType(get_member_id(id, 0x0), "char[32]");
	SetType(get_member_id(id, 0x20), "nn::audio::DelayLine[6]");
	SetType(get_member_id(id, 0xB0), "s32");
	SetType(get_member_id(id, 0xB4), "s32");
	SetType(get_member_id(id, 0xB8), "s32");
	SetType(get_member_id(id, 0xBC), "s32");
	SetType(get_member_id(id, 0xC0), "s32");
	SetType(get_member_id(id, 0xC4), "s32[6]");
	SetType(get_member_id(id, 0xDC), "char[120]");
	id = get_struc_id("nn::audio::DelayParameter");
	SetType(get_member_id(id, 0x0), "s8[6]");
	SetType(get_member_id(id, 0x6), "s8[6]");
	SetType(get_member_id(id, 0xC), "s16");
	SetType(get_member_id(id, 0xE), "s16");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	SetType(get_member_id(id, 0x28), "s32");
	SetType(get_member_id(id, 0x2C), "s32");
	SetType(get_member_id(id, 0x30), "s32");
	SetType(get_member_id(id, 0x34), "ParameterState");
	id = get_struc_id("nn::audio::DelayLine");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	id = get_struc_id("nn::audio::CommandListHeader");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	id = get_struc_id("nn::audio::dsp::CommandBuffer");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "bool");
	SetType(get_member_id(id, 0x18), "s64");
	SetType(get_member_id(id, 0x20), "s32");
	id = get_struc_id("nn::audio::dsp::Buffer");
	SetType(get_member_id(id, 0x0), "nn::audio::dsp::CommandBuffer[2]");
	SetType(get_member_id(id, 0x50), "nn::audio::dsp::MapUnmapBuffer");
	id = get_struc_id("nn::audio::dsp::MapUnmapBuffer");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	id = get_struc_id("nn::audio::DelayCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16[6]");
	SetType(get_member_id(id, 0x20), "s16[6]");
	SetType(get_member_id(id, 0x2C), "nn::audio::DelayParameter");
	SetType(get_member_id(id, 0x64), "u32");
	SetType(get_member_id(id, 0x68), "u32");
	SetType(get_member_id(id, 0x6C), "bool");
	SetType(get_member_id(id, 0x6D), "char[3]");
	id = get_struc_id("nn::audio::DeviceSinkCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "char[256]");
	SetType(get_member_id(id, 0x114), "s32");
	SetType(get_member_id(id, 0x118), "u32");
	SetType(get_member_id(id, 0x11C), "s32");
	SetType(get_member_id(id, 0x120), "s16[6]");
	SetType(get_member_id(id, 0x12C), "char[4]");
	id = get_struc_id("MixDevice::vtbl");
	SetType(get_member_id(id, 0x0), "char[28]");
	SetType(get_member_id(id, 0x1C), "s32 (__cdecl *)(MixDevice *)");
	SetType(get_member_id(id, 0x20), "void *(__cdecl *)(MixDevice *)");
	id = get_struc_id("HardwareDevice");
	SetType(get_member_id(id, 0x0), "AudioRenderSession *");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s16[2048]");
	id = get_struc_id("SomeDevice");
	SetType(get_member_id(id, 0x0), "struct SomeDevice::vtbl *");
	SetType(get_member_id(id, 0x4), "s32");
	id = get_struc_id("SomeDevice::vtbl");
	SetType(get_member_id(id, 0x0), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x4), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x8), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0xC), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x10), "char[32]");
	SetType(get_member_id(id, 0x30), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x34), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x38), "char[4]");
	SetType(get_member_id(id, 0x3C), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x40), "void *(__cdecl *)(SomeDevice *)");
	id = get_struc_id("SessionRegistry");
	SetType(get_member_id(id, 0x0), "char[4]");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "char[3]");
	SetType(get_member_id(id, 0x8), "char[184]");
	SetType(get_member_id(id, 0xC0), "char[6][24576]");
	SetType(get_member_id(id, 0x240C0), "s32");
	SetType(get_member_id(id, 0x240C4), "s32");
	SetType(get_member_id(id, 0x240C8), "timer_t");
	SetType(get_member_id(id, 0x240F0), "char[12]");
	SetType(get_member_id(id, 0x240FC), "semaphore_t");
	SetType(get_member_id(id, 0x24124), "semaphore_t *[3]");
	SetType(get_member_id(id, 0x24130), "char[4]");
	SetType(get_member_id(id, 0x24134), "s32");
	SetType(get_member_id(id, 0x24138), "s32[8]");
	SetType(get_member_id(id, 0x24158), "semaphore_t");
	SetType(get_member_id(id, 0x24180), "char[8]");
	SetType(get_member_id(id, 0x24188), "gMixData *");
	SetType(get_member_id(id, 0x2418C), "char[24]");
	SetType(get_member_id(id, 0x241A4), "adsp_mbx_t");
	SetType(get_member_id(id, 0x24224), "char[4]");
	SetType(get_member_id(id, 0x24228), "UnkSessionStruct");
	SetType(get_member_id(id, 0x24244), "UnkSessionStruct");
	SetType(get_member_id(id, 0x24260), "AudioRenderSession[6]");
	SetType(get_member_id(id, 0x245C0), "AudioOutSession[12]");
	SetType(get_member_id(id, 0x24FE0), "char[1080]");
	SetType(get_member_id(id, 0x25418), "NearVoiceSession[2]");
	SetType(get_member_id(id, 0x25638), "GameRecordSession[4]");
	SetType(get_member_id(id, 0x25A78), "char[2][144]");
	SetType(get_member_id(id, 0x25B98), "char[144]");
	SetType(get_member_id(id, 0x25C28), "s32");
	SetType(get_member_id(id, 0x25C2C), "s32");
	id = get_struc_id("AudioRenderSession");
	SetType(get_member_id(id, 0x0), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "u32");
	SetType(get_member_id(id, 0x2C), "s32");
	SetType(get_member_id(id, 0x30), "s32");
	SetType(get_member_id(id, 0x34), "s32");
	SetType(get_member_id(id, 0x38), "s32");
	SetType(get_member_id(id, 0x3C), "s32");
	SetType(get_member_id(id, 0x40), "s32");
	SetType(get_member_id(id, 0x44), "s32");
	SetType(get_member_id(id, 0x48), "s32");
	SetType(get_member_id(id, 0x4C), "s32");
	SetType(get_member_id(id, 0x50), "char[4]");
	SetType(get_member_id(id, 0x54), "UnkSessionStruct");
	SetType(get_member_id(id, 0x70), "UnkSessionStruct");
	SetType(get_member_id(id, 0x8C), "MixRender *");
	id = get_struc_id("AudioOutSession");
	SetType(get_member_id(id, 0x0), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "u32");
	SetType(get_member_id(id, 0x2C), "s32");
	SetType(get_member_id(id, 0x30), "s32");
	SetType(get_member_id(id, 0x34), "s32");
	SetType(get_member_id(id, 0x38), "s32");
	SetType(get_member_id(id, 0x3C), "s32");
	SetType(get_member_id(id, 0x40), "s32");
	SetType(get_member_id(id, 0x44), "s32");
	SetType(get_member_id(id, 0x48), "s32");
	SetType(get_member_id(id, 0x4C), "s32");
	SetType(get_member_id(id, 0x50), "bool");
	SetType(get_member_id(id, 0x54), "UnkSessionStruct");
	SetType(get_member_id(id, 0x70), "UnkSessionStruct");
	SetType(get_member_id(id, 0x8C), "MixOut *");
	SetType(get_member_id(id, 0x90), "SessionStruct[4]");
	SetType(get_member_id(id, 0xD0), "s32");
	SetType(get_member_id(id, 0xD4), "s32");
	id = get_struc_id("NearVoiceSession");
	SetType(get_member_id(id, 0x0), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "u32");
	SetType(get_member_id(id, 0x2C), "s32");
	SetType(get_member_id(id, 0x30), "s32");
	SetType(get_member_id(id, 0x34), "s32");
	SetType(get_member_id(id, 0x38), "s32");
	SetType(get_member_id(id, 0x3C), "s32");
	SetType(get_member_id(id, 0x40), "s32");
	SetType(get_member_id(id, 0x44), "s32");
	SetType(get_member_id(id, 0x48), "s32");
	SetType(get_member_id(id, 0x4C), "s32");
	SetType(get_member_id(id, 0x50), "bool");
	SetType(get_member_id(id, 0x54), "UnkSessionStruct");
	SetType(get_member_id(id, 0x70), "UnkSessionStruct");
	SetType(get_member_id(id, 0x8C), "MixNearVoice *");
	SetType(get_member_id(id, 0x90), "NearVoiceGameRecordUnkStruct");
	SetType(get_member_id(id, 0xC8), "char[72]");
	id = get_struc_id("GameRecordSession");
	SetType(get_member_id(id, 0x0), "char[272]");
	id = get_struc_id("AudioRenderSession::vftable1");
	SetType(get_member_id(id, 0x0), "s16 *(__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x4), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x8), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0xC), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x10), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x14), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x18), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x1C), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x20), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x24), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x28), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x2C), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x30), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x34), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x38), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x3C), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x40), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x44), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x48), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x4C), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x50), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x54), "s32 (__fastcall *)(AudioRenderSession *, s32, s32, s32, s32, s32, s32, s32)");
	SetType(get_member_id(id, 0x58), "s32 (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x5C), "bool (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x60), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x64), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x68), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x6C), "void (__fastcall *)(AudioRenderSession *)");
	id = get_struc_id("UnkSessionStruct");
	SetType(get_member_id(id, 0x0), "struct UnkSessionStruct::vtable *");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	id = get_struc_id("nn::audio::UpsampleCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "u32");
	SetType(get_member_id(id, 0x18), "u32");
	SetType(get_member_id(id, 0x1C), "u32");
	SetType(get_member_id(id, 0x20), "u32");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "u32");
	SetType(get_member_id(id, 0x2C), "nn::audio::UpsamplerInfo *");
	id = get_struc_id("nn::audio::UpsamplerInfo");
	SetType(get_member_id(id, 0x0), "nn::audio::UpsamplerState[6]");
	SetType(get_member_id(id, 0x240), "u64");
	SetType(get_member_id(id, 0x248), "u64");
	SetType(get_member_id(id, 0x250), "u32");
	SetType(get_member_id(id, 0x254), "s32");
	SetType(get_member_id(id, 0x258), "bool");
	SetType(get_member_id(id, 0x259), "s8[6]");
	SetType(get_member_id(id, 0x25F), "char[33]");
	id = get_struc_id("nn::audio::UpsamplerState");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32[20]");
	SetType(get_member_id(id, 0x54), "s16");
	SetType(get_member_id(id, 0x56), "s16");
	SetType(get_member_id(id, 0x58), "s16");
	SetType(get_member_id(id, 0x5A), "u8");
	SetType(get_member_id(id, 0x5B), "u8");
	SetType(get_member_id(id, 0x5C), "u8");
	SetType(get_member_id(id, 0x5D), "u8");
	SetType(get_member_id(id, 0x5E), "char[2]");
	id = get_struc_id("app_complete_status_message");
	SetType(get_member_id(id, 0x0), "msgq_message_t");
	SetType(get_member_id(id, 0x1), "app_complete_status_data");
	SetType(get_member_id(id, 0x2), "app_static_app_data");
	id = get_struc_id("msgq_message_t");
	SetType(get_member_id(id, 0x0), "int32_t");
	SetType(get_member_id(id, 0x4), "int32_t[1]");
	id = get_struc_id("app_complete_status_data");
	SetType(get_member_id(id, 0x0), "adsp_os_message_header");
	SetType(get_member_id(id, 0x8), "uint64_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "int32_t");
	id = get_struc_id("adsp_os_message_header");
	SetType(get_member_id(id, 0x0), "int32_t[1]");
	SetType(get_member_id(id, 0x4), "uint32_t");
	id = get_struc_id("app_static_app_data");
	SetType(get_member_id(id, 0x0), "adsp_os_message_header");
	SetType(get_member_id(id, 0x8), "adsp_shared_app");
	id = get_struc_id("adsp_shared_app");
	SetType(get_member_id(id, 0x0), "unsigned __int8[128]");
	SetType(get_member_id(id, 0x80), "app_mem_size");
	SetType(get_member_id(id, 0xA8), "int32_t");
	SetType(get_member_id(id, 0xAC), "int32_t");
	SetType(get_member_id(id, 0xB0), "int32_t");
	SetType(get_member_id(id, 0xB4), "int32_t");
	SetType(get_member_id(id, 0xB8), "int32_t");
	SetType(get_member_id(id, 0xBC), "unsigned __int8[16]");
	id = get_struc_id("app_mem_size");
	SetType(get_member_id(id, 0x0), "uint64_t");
	SetType(get_member_id(id, 0x8), "uint64_t");
	SetType(get_member_id(id, 0x10), "uint64_t");
	SetType(get_member_id(id, 0x18), "uint64_t");
	SetType(get_member_id(id, 0x20), "uint64_t");
	id = get_struc_id("app_loader_message");
	SetType(get_member_id(id, 0x0), "msgq_message_t");
	SetType(get_member_id(id, 0x1), "app_loader_data");
	id = get_struc_id("app_loader_data");
	SetType(get_member_id(id, 0x0), "int32_t[1]");
	SetType(get_member_id(id, 0x4), "run_app_instance_data");
	id = get_struc_id("run_app_instance_data");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint64_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "uint32_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "uint32_t");
	SetType(get_member_id(id, 0x20), "uint32_t");
	SetType(get_member_id(id, 0x24), "uint32_t");
	SetType(get_member_id(id, 0x28), "uint32_t");
	SetType(get_member_id(id, 0x2C), "app_mem_size");
	SetType(get_member_id(id, 0x54), "adsp_app_args_t");
	SetType(get_member_id(id, 0x258), "uint32_t");
	SetType(get_member_id(id, 0x25C), "uint32_t");
	id = get_struc_id("adsp_app_args_t");
	SetType(get_member_id(id, 0x0), "int32_t");
	SetType(get_member_id(id, 0x4), "int32_t[128]");
	id = get_struc_id("semaphore_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "wait_queue_t");
	SetType(get_member_id(id, 0x18), "child_queue_t");
	id = get_struc_id("wait_queue_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0xC), "int");
	id = get_struc_id("list_node");
	SetType(get_member_id(id, 0x0), "list_node *");
	SetType(get_member_id(id, 0x4), "list_node *");
	id = get_struc_id("child_queue_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0xC), "int");
	id = get_struc_id("some_sporadic_work");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x8), "semaphore_t *");
	SetType(get_member_id(id, 0x20), "uint64_t");
	SetType(get_member_id(id, 0x30), "thread_t *");
	SetType(get_member_id(id, 0x34), "timer_t *");
	SetType(get_member_id(id, 0x40), "bool");
	SetType(get_member_id(id, 0x41), "bool");
	id = get_struc_id("comp_event_elem_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "event_t *");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "comp_eve_elem_type_t");
	SetType(get_member_id(id, 0x10), "list_node");
	id = get_struc_id("comp_event_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0xC), "event_t");
	SetType(get_member_id(id, 0x38), "comp_event_elem_t *");
	id = get_struc_id("event_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x8), "uint");
	SetType(get_member_id(id, 0xC), "wait_queue_t");
	SetType(get_member_id(id, 0x1C), "child_queue_t");
	id = get_struc_id("sync_object_t");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "comp_eve_elem_type_t");
	id = get_struc_id("ce_thread_args_t");
	SetType(get_member_id(id, 0x0), "unsigned __int8 *");
	SetType(get_member_id(id, 0x4), "int32_t");
	SetType(get_member_id(id, 0x8), "sync_object_t *");
	id = get_struc_id("mutex_t");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "thread_t *");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "wait_queue_t");
	id = get_struc_id("sched_arg_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x8), "uint64_t");
	SetType(get_member_id(id, 0x10), "uint64_t");
	SetType(get_member_id(id, 0x18), "sched_policy");
	id = get_struc_id("timer_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0x10), "lk_bigtime_t");
	SetType(get_member_id(id, 0x18), "lk_bigtime_t");
	SetType(get_member_id(id, 0x24), "void *");
	id = get_struc_id("thread_stats");
	SetType(get_member_id(id, 0x0), "lk_bigtime_t");
	SetType(get_member_id(id, 0x8), "lk_bigtime_t");
	SetType(get_member_id(id, 0x10), "lk_bigtime_t");
	SetType(get_member_id(id, 0x18), "lk_bigtime_t");
	SetType(get_member_id(id, 0x20), "lk_bigtime_t");
	SetType(get_member_id(id, 0x28), "lk_bigtime_t");
	SetType(get_member_id(id, 0x30), "lk_bigtime_t");
	SetType(get_member_id(id, 0x38), "int");
	SetType(get_member_id(id, 0x3C), "int");
	SetType(get_member_id(id, 0x40), "int");
	SetType(get_member_id(id, 0x44), "int");
	SetType(get_member_id(id, 0x48), "int");
	SetType(get_member_id(id, 0x4C), "int");
	SetType(get_member_id(id, 0x50), "int");
	SetType(get_member_id(id, 0x54), "int");
	SetType(get_member_id(id, 0x58), "int");
	SetType(get_member_id(id, 0x5C), "int");
	SetType(get_member_id(id, 0x60), "int");
	SetType(get_member_id(id, 0x64), "int");
	id = get_struc_id("uint8x16_t_0");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("pmu_events_t");
	id = get_struc_id("test_cmd_args");
	SetType(get_member_id(id, 0x0), "int");
	id = get_struc_id("line_read_struct");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "unsigned __int8 *");
	SetType(get_member_id(id, 0xC), "size_t");
	id = get_struc_id("va_list");
	SetType(get_member_id(id, 0x0), "void *");
	id = get_struc_id("_output_args");
	SetType(get_member_id(id, 0x0), "unsigned __int8 *");
	SetType(get_member_id(id, 0x4), "size_t");
	SetType(get_member_id(id, 0x8), "size_t");
	id = get_struc_id("adsp_shared_mem");
	SetType(get_member_id(id, 0x0), "adsp_app_shared_msg_pool");
	id = get_struc_id("adsp_app_shared_msg_pool");
	SetType(get_member_id(id, 0x0), "app_loader_msgq");
	SetType(get_member_id(id, 0x1000), "app_loader_msgq");
	id = get_struc_id("app_loader_msgq");
	SetType(get_member_id(id, 0x0), "msgq_t");
	SetType(get_member_id(id, 0x1), "app_pool_thing");
	id = get_struc_id("msgq_t");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	id = get_struc_id("$78A6DB0EEAF2F7AED7EA0C7FB7CC5BA8");
	id = get_struc_id("adsp_os_args");
	SetType(get_member_id(id, 0x0), "int32_t");
	SetType(get_member_id(id, 0x4), "unsigned __int8[4028]");
	SetType(get_member_id(id, 0xFC0), "uint64_t");
	SetType(get_member_id(id, 0xFC4), "_BYTE[4]");
	SetType(get_member_id(id, 0xFC8), "uint32_t");
	SetType(get_member_id(id, 0xFCC), "uint32_t");
	SetType(get_member_id(id, 0xFD0), "unsigned __int8[120]");
	id = get_struc_id("mbox_t");
	SetType(get_member_id(id, 0x0), "int32_t[16]");
	SetType(get_member_id(id, 0x44), "int16_t");
	SetType(get_member_id(id, 0x48), "semaphore_t");
	SetType(get_member_id(id, 0x70), "semaphore_t *");
	SetType(get_member_id(id, 0x74), "adsp_mbx_handler_t");
	SetType(get_member_id(id, 0x78), "adsp_mbx_handler_t");
	SetType(get_member_id(id, 0x7C), "void *");
	id = get_struc_id("int_handler_struct");
	SetType(get_member_id(id, 0x0), "int_handler");
	SetType(get_member_id(id, 0x4), "void *");
	id = get_struc_id("int_gic_data");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "bool");
	SetType(get_member_id(id, 0xD), "bool");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "uint32_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "uint32_t");
	SetType(get_member_id(id, 0x20), "uint32_t");
	SetType(get_member_id(id, 0x24), "uint32_t");
	id = get_struc_id("cmd");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0x4), "const unsigned __int8 *");
	SetType(get_member_id(id, 0x8), "const console_cmd");
	id = get_struc_id("cbuf_t");
	SetType(get_member_id(id, 0x0), "uint");
	SetType(get_member_id(id, 0x4), "uint");
	SetType(get_member_id(id, 0x8), "uint");
	SetType(get_member_id(id, 0xC), "unsigned __int8 *");
	SetType(get_member_id(id, 0x10), "event_t");
	id = get_struc_id("adsp_mbx_t");
	SetType(get_member_id(id, 0x0), "int32_t[16]");
	SetType(get_member_id(id, 0x44), "int16_t");
	SetType(get_member_id(id, 0x48), "semaphore_t");
	SetType(get_member_id(id, 0x70), "semaphore_t *");
	SetType(get_member_id(id, 0x74), "adsp_mbx_handler_t");
	SetType(get_member_id(id, 0x78), "adsp_mbx_handler_t");
	SetType(get_member_id(id, 0x7C), "void *");
	id = get_struc_id("cmd_block");
	SetType(get_member_id(id, 0x4), "size_t");
	SetType(get_member_id(id, 0x8), "const cmd *");
	id = get_struc_id("adsp_hw_mbx_t");
	SetType(get_member_id(id, 0x0), "int32_t[1024]");
	SetType(get_member_id(id, 0x1000), "int16_t");
	SetType(get_member_id(id, 0x1002), "int16_t");
	SetType(get_member_id(id, 0x1004), "int16_t");
	SetType(get_member_id(id, 0x1006), "int16_t");
	SetType(get_member_id(id, 0x1008), "int16_t");
	SetType(get_member_id(id, 0x100C), "uint32_t");
	SetType(get_member_id(id, 0x1010), "uint32_t");
	SetType(get_member_id(id, 0x1018), "int32_t");
	SetType(get_member_id(id, 0x101C), "semaphore_t");
	SetType(get_member_id(id, 0x1044), "wait_queue_t");
	id = get_struc_id("mailbox_attributes");
	id = get_struc_id("outer_cache_fns");
	SetType(get_member_id(id, 0x0), "void (*)(void)");
	SetType(get_member_id(id, 0x4), "void (__fastcall *)(paddr_t, size_t)");
	SetType(get_member_id(id, 0x8), "void (*)(void)");
	SetType(get_member_id(id, 0xC), "void (__fastcall *)(paddr_t, size_t)");
	SetType(get_member_id(id, 0x10), "void (*)(void)");
	SetType(get_member_id(id, 0x14), "void (__fastcall *)(paddr_t, size_t)");
	SetType(get_member_id(id, 0x18), "void (*)(void)");
	SetType(get_member_id(id, 0x1C), "void (*)(void)");
	SetType(get_member_id(id, 0x20), "void (*)(void)");
	id = get_struc_id("private_struct");
	SetType(get_member_id(id, 0x0), "msgq_t *");
	SetType(get_member_id(id, 0x4), "msgq_t *");
	SetType(get_member_id(id, 0x8), "mbox_t");
	id = get_struc_id("app_descriptor");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "size_t");
	id = get_struc_id("some_rt_args");
	SetType(get_member_id(id, 0x0), "int32_t");
	SetType(get_member_id(id, 0x4), "int32_t");
	SetType(get_member_id(id, 0x8), "test_entry_params");
	SetType(get_member_id(id, 0x38), "uint64_t");
	SetType(get_member_id(id, 0x78), "bool");
	SetType(get_member_id(id, 0x7C), "event_t *");
	SetType(get_member_id(id, 0x80), "timer_t");
	id = get_struc_id("test_entry_params");
	SetType(get_member_id(id, 0x0), "int32_t");
	SetType(get_member_id(id, 0x4), "int32_t");
	SetType(get_member_id(id, 0x8), "int32_t");
	SetType(get_member_id(id, 0x10), "sched_arg_t");
	id = get_struc_id("test_case");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "test_entry_params *");
	id = get_struc_id("test_suite");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "test_case *");
	id = get_struc_id("thread_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0xC), "list_node");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "thread_state");
	SetType(get_member_id(id, 0x1C), "int");
	SetType(get_member_id(id, 0x20), "int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "wait_queue *");
	SetType(get_member_id(id, 0x2C), "status_t");
	SetType(get_member_id(id, 0x30), "arch_thread");
	SetType(get_member_id(id, 0x38), "void *");
	SetType(get_member_id(id, 0x3C), "size_t");
	SetType(get_member_id(id, 0x44), "void *");
	SetType(get_member_id(id, 0x48), "int");
	SetType(get_member_id(id, 0x4C), "wait_queue");
	SetType(get_member_id(id, 0x5C), "unsigned __int8[32]");
	SetType(get_member_id(id, 0x7C), "sched_policy");
	SetType(get_member_id(id, 0x80), "sched_edf_t");
	SetType(get_member_id(id, 0xE8), "uint64_t");
	id = get_struc_id("arch_thread");
	SetType(get_member_id(id, 0x0), "vaddr_t");
	SetType(get_member_id(id, 0x4), "fpctx_t *");
	id = get_struc_id("wait_queue");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0xC), "int");
	id = get_struc_id("sched_edf_t");
	SetType(get_member_id(id, 0x0), "uint64_t");
	SetType(get_member_id(id, 0x8), "uint64_t");
	SetType(get_member_id(id, 0x10), "uint64_t");
	SetType(get_member_id(id, 0x18), "uint64_t");
	SetType(get_member_id(id, 0x20), "bool");
	SetType(get_member_id(id, 0x21), "bool");
	SetType(get_member_id(id, 0x22), "bool");
	SetType(get_member_id(id, 0x23), "bool");
	SetType(get_member_id(id, 0x24), "bool");
	SetType(get_member_id(id, 0x28), "uint32_t");
	SetType(get_member_id(id, 0x30), "uint64_t");
	SetType(get_member_id(id, 0x38), "timer_t");
	SetType(get_member_id(id, 0x60), "btree_t");
	id = get_struc_id("btree_t");
	id = get_struc_id("FILE_0");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "int (__fastcall *)(void *, int)");
	SetType(get_member_id(id, 0x8), "int (__fastcall *)(void *, const unsigned __int8 *)");
	SetType(get_member_id(id, 0xC), "int (__fastcall *)(void *)");
	SetType(get_member_id(id, 0x10), "int (__fastcall *)(void *, const unsigned __int8 *, va_list)");
	id = get_struc_id("heap");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "size_t");
	SetType(get_member_id(id, 0x8), "size_t");
	SetType(get_member_id(id, 0xC), "size_t");
	SetType(get_member_id(id, 0x10), "mutex_t");
	SetType(get_member_id(id, 0x2C), "list_node");
	SetType(get_member_id(id, 0x34), "list_node");
	id = get_struc_id("adsp_app_descriptor");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0xC), "adsp_app_mem_t");
	SetType(get_member_id(id, 0x28), "app_mem_size");
	SetType(get_member_id(id, 0x50), "const adsp_app_args_t *");
	SetType(get_member_id(id, 0x54), "unsigned int");
	SetType(get_member_id(id, 0x58), "size_t");
	SetType(get_member_id(id, 0x5C), "const void *");
	SetType(get_member_id(id, 0x60), "const uint64_t");
	id = get_struc_id("adsp_app_mem_t");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "void *");
	SetType(get_member_id(id, 0x18), "uint32_t");
	id = get_struc_id("nn::audio::ReverbCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16[6]");
	SetType(get_member_id(id, 0x20), "s16[6]");
	SetType(get_member_id(id, 0x2C), "nn::audio::ReverbParameter");
	SetType(get_member_id(id, 0x70), "u32");
	SetType(get_member_id(id, 0x74), "u32");
	SetType(get_member_id(id, 0x78), "bool");
	SetType(get_member_id(id, 0x79), "bool");
	SetType(get_member_id(id, 0x7A), "char[6]");
	id = get_struc_id("nn::audio::ReverbParameter");
	SetType(get_member_id(id, 0x0), "s8[6]");
	SetType(get_member_id(id, 0x6), "s8[6]");
	SetType(get_member_id(id, 0xC), "s16");
	SetType(get_member_id(id, 0xE), "s16");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	SetType(get_member_id(id, 0x28), "s32");
	SetType(get_member_id(id, 0x2C), "s32");
	SetType(get_member_id(id, 0x30), "s32");
	SetType(get_member_id(id, 0x34), "s32");
	SetType(get_member_id(id, 0x38), "s32");
	SetType(get_member_id(id, 0x3C), "s32");
	SetType(get_member_id(id, 0x40), "u8");
	id = get_struc_id("nn::audio::ReverbState");
	SetType(get_member_id(id, 0x0), "nn::audio::DelayLine");
	SetType(get_member_id(id, 0x18), "nn::audio::DelayLine");
	SetType(get_member_id(id, 0x30), "s32[10]");
	SetType(get_member_id(id, 0x58), "s32[10]");
	SetType(get_member_id(id, 0x80), "s32");
	SetType(get_member_id(id, 0x84), "nn::audio::DelayLine[4]");
	SetType(get_member_id(id, 0xE4), "nn::audio::DelayLine[4]");
	SetType(get_member_id(id, 0x144), "s32[4]");
	SetType(get_member_id(id, 0x154), "s32[4]");
	SetType(get_member_id(id, 0x164), "s32[4]");
	SetType(get_member_id(id, 0x174), "char[204]");
	id = get_struc_id("nn::audio::AuxCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	SetType(get_member_id(id, 0x18), "u32");
	SetType(get_member_id(id, 0x1C), "u32");
	SetType(get_member_id(id, 0x20), "u32");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "u32");
	SetType(get_member_id(id, 0x2C), "u32");
	SetType(get_member_id(id, 0x30), "u32");
	SetType(get_member_id(id, 0x34), "bool");
	id = get_struc_id("nn::audio::AuxInfoDsp");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "char[48]");
	id = get_struc_id("nn::audio::CaptureCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "s16");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	SetType(get_member_id(id, 0x28), "s32");
	SetType(get_member_id(id, 0x2C), "bool");
	id = get_struc_id("nn::audio::AuxBufferInfo");
	SetType(get_member_id(id, 0x0), "nn::audio::AuxInfoDsp");
	SetType(get_member_id(id, 0x40), "nn::audio::AuxInfoDsp");
	id = get_struc_id("nn::audio::I3dl2ReverbParameter");
	SetType(get_member_id(id, 0x0), "s8[6]");
	SetType(get_member_id(id, 0x6), "s8[6]");
	SetType(get_member_id(id, 0xC), "u16");
	SetType(get_member_id(id, 0xE), "u16");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "f32");
	SetType(get_member_id(id, 0x1C), "f32");
	SetType(get_member_id(id, 0x20), "f32");
	SetType(get_member_id(id, 0x24), "f32");
	SetType(get_member_id(id, 0x28), "f32");
	SetType(get_member_id(id, 0x2C), "f32");
	SetType(get_member_id(id, 0x30), "f32");
	SetType(get_member_id(id, 0x34), "f32");
	SetType(get_member_id(id, 0x38), "f32");
	SetType(get_member_id(id, 0x3C), "f32");
	SetType(get_member_id(id, 0x40), "f32");
	SetType(get_member_id(id, 0x44), "f32");
	SetType(get_member_id(id, 0x48), "ParameterState");
	SetType(get_member_id(id, 0x49), "char[3]");
	id = get_struc_id("nn::audio::I3dl2ReverbCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16[6]");
	SetType(get_member_id(id, 0x20), "s16[6]");
	SetType(get_member_id(id, 0x2C), "nn::audio::I3dl2ReverbParameter");
	SetType(get_member_id(id, 0x78), "u32");
	SetType(get_member_id(id, 0x7C), "u32");
	SetType(get_member_id(id, 0x80), "bool");
	id = get_struc_id("nn::audio::I3dl2ReverbState");
	SetType(get_member_id(id, 0x0), "f32");
	SetType(get_member_id(id, 0x4), "f32");
	SetType(get_member_id(id, 0x8), "f32");
	SetType(get_member_id(id, 0xC), "nn::audio::I3dl2DelayLine");
	SetType(get_member_id(id, 0x28), "s32[20]");
	SetType(get_member_id(id, 0x78), "f32");
	SetType(get_member_id(id, 0x7C), "f32");
	SetType(get_member_id(id, 0x80), "s32");
	SetType(get_member_id(id, 0x84), "nn::audio::I3dl2DelayLine[4]");
	SetType(get_member_id(id, 0xF4), "nn::audio::I3dl2DelayLine[4]");
	SetType(get_member_id(id, 0x164), "nn::audio::I3dl2DelayLine[4]");
	SetType(get_member_id(id, 0x1D4), "f32");
	SetType(get_member_id(id, 0x1D8), "nn::audio::I3dl2DelayLine");
	SetType(get_member_id(id, 0x1F4), "f32[4][3]");
	SetType(get_member_id(id, 0x224), "f32[4]");
	SetType(get_member_id(id, 0x234), "f32");
	SetType(get_member_id(id, 0x238), "char[328]");
	id = get_struc_id("nn::audio::I3dl2DelayLine");
	SetType(get_member_id(id, 0x0), "f32 *");
	SetType(get_member_id(id, 0x4), "f32 *");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "f32 *");
	SetType(get_member_id(id, 0x10), "f32 *");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "f32");
	id = get_struc_id("SessionBase");
	SetType(get_member_id(id, 0x0), "struct SessionBase::vtable *");
	SetType(get_member_id(id, 0x4), "char[12]");
	id = get_struc_id("gMixData");
	SetType(get_member_id(id, 0x0), "MessageQueue");
	SetType(get_member_id(id, 0x800), "MessageQueue");
	SetType(get_member_id(id, 0x1000), "MixRender[6]");
	SetType(get_member_id(id, 0x2B060), "MixOut[12]");
	SetType(get_member_id(id, 0x2B180), "char[2][24]");
	SetType(get_member_id(id, 0x2B1B0), "char[3][24]");
	SetType(get_member_id(id, 0x2B1F8), "MixNearVoice[2]");
	SetType(get_member_id(id, 0x2B238), "char[4][32]");
	SetType(get_member_id(id, 0x2B2B8), "char[2304]");
	SetType(get_member_id(id, 0x2BBB8), "char[16]");
	SetType(get_member_id(id, 0x2BBC8), "char[6144]");
	SetType(get_member_id(id, 0x2D3C8), "char[16]");
	SetType(get_member_id(id, 0x2D3D8), "char[6400]");
	SetType(get_member_id(id, 0x2ECD8), "char[16]");
	SetType(get_member_id(id, 0x2ECE8), "u32[5]");
	SetType(get_member_id(id, 0x2ECFC), "char[4]");
	SetType(get_member_id(id, 0x2ED00), "char[184]");
	id = get_struc_id("MessageQueue");
	SetType(get_member_id(id, 0x0), "msgq_t");
	SetType(get_member_id(id, 0x10), "char[2032]");
	id = get_struc_id("fpctx_t");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint64_t[32]");
	SetType(get_member_id(id, 0x108), "uint32_t");
	SetType(get_member_id(id, 0x10C), "bool");
	id = get_struc_id("app_pool_thing");
	SetType(get_member_id(id, 0x0), "int32_t[3]");
	SetType(get_member_id(id, 0xC), "int32_t[1021]");
	id = get_struc_id("adsp_os_info");
	SetType(get_member_id(id, 0x0), "unsigned __int8[32]");
	SetType(get_member_id(id, 0x20), "unsigned __int8[128]");
	id = get_struc_id("exception_context");
	SetType(get_member_id(id, 0x0), "arm_fault_frame_shared");
	SetType(get_member_id(id, 0x44), "arm_mode_regs_shared");
	SetType(get_member_id(id, 0x74), "uint32_t");
	SetType(get_member_id(id, 0x78), "uint32_t[32]");
	SetType(get_member_id(id, 0xF8), "uint32_t");
	id = get_struc_id("arm_fault_frame_shared");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "uint32_t[13]");
	SetType(get_member_id(id, 0x40), "uint32_t");
	id = get_struc_id("arm_mode_regs_shared");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "uint32_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "uint32_t");
	SetType(get_member_id(id, 0x20), "uint32_t");
	SetType(get_member_id(id, 0x24), "uint32_t");
	SetType(get_member_id(id, 0x28), "uint32_t");
	SetType(get_member_id(id, 0x2C), "uint32_t");
	id = get_struc_id("interrupt_profile_stat");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint64_t");
	id = get_struc_id("gMixRender");
	SetType(get_member_id(id, 0x0), "char[24576]");
	SetType(get_member_id(id, 0x6000), "char[4112]");
	id = get_struc_id("gMixOut");
	SetType(get_member_id(id, 0x0), "char[24]");
	id = get_struc_id("MixRender");
	SetType(get_member_id(id, 0x0), "char[24576]");
	SetType(get_member_id(id, 0x6000), "char[4096]");
	SetType(get_member_id(id, 0x7000), "s32");
	SetType(get_member_id(id, 0x7004), "char[4]");
	SetType(get_member_id(id, 0x7008), "s32");
	SetType(get_member_id(id, 0x700C), "s32");
	id = get_struc_id("MixOut");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "char[4]");
	SetType(get_member_id(id, 0x10), "s64");
	id = get_struc_id("SessionStruct");
	SetType(get_member_id(id, 0x0), "char[4]");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "s32");
	id = get_struc_id("NearVoice");
	SetType(get_member_id(id, 0x0), "char[32]");
	id = get_struc_id("MixNearVoice");
	SetType(get_member_id(id, 0x0), "char[8]");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "char[12]");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	id = get_struc_id("NearVoiceGameRecordUnkStruct");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "u32");
	SetType(get_member_id(id, 0x10), "u32");
	SetType(get_member_id(id, 0x14), "u32");
	SetType(get_member_id(id, 0x18), "u32");
	SetType(get_member_id(id, 0x1C), "u32");
	SetType(get_member_id(id, 0x20), "u32");
	SetType(get_member_id(id, 0x24), "u32");
	SetType(get_member_id(id, 0x28), "u32");
	SetType(get_member_id(id, 0x2C), "u32");
	SetType(get_member_id(id, 0x30), "u32");
	SetType(get_member_id(id, 0x34), "bool");
	SetType(get_member_id(id, 0x35), "bool");
	SetType(get_member_id(id, 0x36), "char[2]");
	id = get_struc_id("nn::audio::PcmInt16DataSourceCommandVersion1");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "VoiceType::SrcQuality");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x14), "s16");
	SetType(get_member_id(id, 0x16), "u16");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "s32");
	SetType(get_member_id(id, 0x28), "nn::audio::WaveBuffer[4]");
	SetType(get_member_id(id, 0x98), "u32");
	id = get_struc_id("nn::audio::DepopForMixBuffersCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "u32");
	id = get_struc_id("nn::audio::MixRampGroupedCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	SetType(get_member_id(id, 0x13), "u8");
	SetType(get_member_id(id, 0x14), "s32");
	SetType(get_member_id(id, 0x18), "s16[24]");
	SetType(get_member_id(id, 0x48), "s16[24]");
	SetType(get_member_id(id, 0x78), "s32[24]");
	SetType(get_member_id(id, 0xD8), "s32[24]");
	SetType(get_member_id(id, 0x138), "u32");
	id = get_struc_id("HardwareOpusSharedMemory");
	SetType(get_member_id(id, 0x0), "char[3968]");
	SetType(get_member_id(id, 0xF80), "u32[16]");
	SetType(get_member_id(id, 0xFC0), "u32[16]");
	id = get_struc_id("OpusMailbox");
	SetType(get_member_id(id, 0x0), "u16");
	SetType(get_member_id(id, 0x4), "adsp_mbx_t");
	SetType(get_member_id(id, 0x84), "bool");
	SetType(get_member_id(id, 0x88), "u32");
	id = get_struc_id("OpusMainStruct");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "thread_t *");
	SetType(get_member_id(id, 0x8), "bool");
	id = get_struc_id("HardwareOpusUnkStruct");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "bool");
	SetType(get_member_id(id, 0x8), "struct HardwareOpusUnkStruct *");
	SetType(get_member_id(id, 0xC), "OpusDecoder *");
	SetType(get_member_id(id, 0x10), "u32");
	SetType(get_member_id(id, 0x14), "OpusDecoder");
	id = get_struc_id("OpusCustomMode");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0x10), "s16[4]");
	SetType(get_member_id(id, 0x18), "const s16 *");
	SetType(get_member_id(id, 0x1C), "int");
	SetType(get_member_id(id, 0x20), "int");
	SetType(get_member_id(id, 0x24), "int");
	SetType(get_member_id(id, 0x28), "int");
	SetType(get_member_id(id, 0x2C), "const u8 *");
	SetType(get_member_id(id, 0x30), "const s16 *");
	SetType(get_member_id(id, 0x34), "const s16 *");
	SetType(get_member_id(id, 0x38), "mdct_lookup");
	SetType(get_member_id(id, 0x54), "PulseCache");
	id = get_struc_id("mdct_lookup");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "const void *[4]");
	SetType(get_member_id(id, 0x18), "const void *");
	id = get_struc_id("PulseCache");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "s16 *");
	SetType(get_member_id(id, 0x8), "u8 *");
	SetType(get_member_id(id, 0xC), "u8 *");
	id = get_struc_id("OpusDecoder");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "silk_DecControlStruct");
	SetType(get_member_id(id, 0x28), "s32");
	SetType(get_member_id(id, 0x2C), "s32");
	SetType(get_member_id(id, 0x30), "s32");
	SetType(get_member_id(id, 0x34), "s32");
	SetType(get_member_id(id, 0x38), "s32");
	SetType(get_member_id(id, 0x3C), "s32");
	SetType(get_member_id(id, 0x40), "s32");
	SetType(get_member_id(id, 0x44), "s32");
	SetType(get_member_id(id, 0x48), "s32");
	SetType(get_member_id(id, 0x4C), "s32");
	SetType(get_member_id(id, 0x50), "char[8544]");
	SetType(get_member_id(id, 0x21B0), "char[17860]");
	id = get_struc_id("silk_DecControlStruct");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "s32");
	id = get_struc_id("OpusDecodeObject");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "bool");
	SetType(get_member_id(id, 0x8), "struct OpusDecodeObject *");
	SetType(get_member_id(id, 0xC), "OpusDecoder *");
	SetType(get_member_id(id, 0x10), "u32");
	SetType(get_member_id(id, 0x14), "OpusDecoder");
	id = get_struc_id("ChannelLayout");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "u8[256]");
	id = get_struc_id("OpusMultiStreamDecodeObject");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "bool");
	SetType(get_member_id(id, 0x8), "struct OpusMultiStreamDecodeObject *");
	SetType(get_member_id(id, 0xC), "OpusMSDecoder *");
	SetType(get_member_id(id, 0x10), "u32");
	SetType(get_member_id(id, 0x14), "OpusMSDecoder");
	id = get_struc_id("OpusMSDecoder");
	SetType(get_member_id(id, 0x0), "ChannelLayout");
	SetType(get_member_id(id, 0x10C), "OpusDecoder");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"float32x4_t",1);
	id = add_struc(-1,"int32x4_t",1);
	id = add_struc(-1,"int8x8_t",1);
	id = add_struc(-1,"float32x2_t",1);
	id = add_struc(-1,"nn::audio::dsp::Command",0);
	id = add_struc(-1,"__n64",1);
	id = add_struc(-1,"__n128",1);
	id = add_struc(-1,"uint8x8_t",1);
	id = add_struc(-1,"int16x4_t",1);
	id = add_struc(-1,"int32x2_t",1);
	id = add_struc(-1,"uint16x4_t",1);
	id = add_struc(-1,"uint32x2_t",1);
	id = add_struc(-1,"int8x16_t",1);
	id = add_struc(-1,"int16x8_t",1);
	id = add_struc(-1,"int64x2_t",1);
	id = add_struc(-1,"uint8x16_t",1);
	id = add_struc(-1,"uint16x8_t",1);
	id = add_struc(-1,"uint32x4_t",1);
	id = add_struc(-1,"uint64x2_t",1);
	id = add_struc(-1,"poly8x8_t",1);
	id = add_struc(-1,"poly16x4_t",1);
	id = add_struc(-1,"poly16x8_t",1);
	id = add_struc(-1,"poly8x16_t",1);
	id = add_struc(-1,"float64x2_t",1);
	id = add_struc(-1,"poly128_t",1);
	id = add_struc(-1,"float32x2x2_t",0);
	id = add_struc(-1,"nn::os::ThreadType",0);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSection",0);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSectionImplByHorizon",0);
	id = add_struc(-1,"nn::os::detail::InternalConditionVariable",0);
	id = add_struc(-1,"nn::os::detail::InternalConditionVariableImplByHorizon",0);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSectionStorage",0);
	id = add_struc(-1,"nn::os::ConditionVariableType",0);
	id = add_struc(-1,"nn::os::EventType",0);
	id = add_struc(-1,"nn::os::detail::InterProcessEventType",0);
	id = add_struc(-1,"nn::os::SystemEventType::u",1);
	id = add_struc(-1,"nn::sf::NativeHandle",0);
	id = add_struc(-1,"nn::audio::ICommand",0);
	id = add_struc(-1,"nn::audio::CircularBufferSinkCommand",0);
	id = add_struc(-1,"nn::audio::dsp::CommandListProcessor",0);
	id = add_struc(-1,"MixDevice",0);
	id = add_struc(-1,"nn::audio::LightLimiterV1Command",0);
	id = add_struc(-1,"nn::audio::LightLimiterParameter",0);
	id = add_struc(-1,"nn::audio::LightLimiterState",0);
	id = add_struc(-1,"nn::audio::LightLimiterStatisticsInternal",0);
	id = add_struc(-1,"nn::audio::PerformanceCommand",0);
	id = add_struc(-1,"nn::audio::server::PerformanceEntryAddresses",0);
	id = add_struc(-1,"nn::audio::CopyMixBufferCommand",0);
	id = add_struc(-1,"nn::audio::DownMix6chTo2chCommand",0);
	id = add_struc(-1,"nn::audio::MixRampCommand",0);
	id = add_struc(-1,"nn::audio::server::VoiceState",0);
	id = add_struc(-1,"nn::codec::AdpcmContext",0);
	id = add_struc(-1,"nn::audio::dsp::DecodeFromWaveBuffersArgs",0);
	id = add_struc(-1,"nn::audio::WaveBuffer",0);
	id = add_struc(-1,"nn::audio::DataSourcePcmInt16V1Command",0);
	id = add_struc(-1,"nn::audio::server::WaveBuffer",0);
	id = add_struc(-1,"nn::audio::server::AddressInfo",0);
	id = add_struc(-1,"nn::audio::VoiceState",0);
	id = add_struc(-1,"nn::audio::WaveBufferVersion2",0);
	id = add_struc(-1,"nn::audio::dsp::DecodeArg",0);
	id = add_struc(-1,"nn::audio::PcmFloatDataSourceCommandVersion2",0);
	id = add_struc(-1,"nn::audio::AdpcmDataSourceCommandVersion2",0);
	id = add_struc(-1,"nn::audio::AdpcmDataSourceCommandVersion1",0);
	id = add_struc(-1,"nn::audio::VolumeCommand",0);
	id = add_struc(-1,"nn::audio::VolumeRampCommand",0);
	id = add_struc(-1,"nn::audio::BiquadFilterParameter",0);
	id = add_struc(-1,"nn::audio::BiquadFilterCommand",0);
	id = add_struc(-1,"nn::audio::BiquadFilterState",0);
	id = add_struc(-1,"nn::audio::MultiTapBiquadFilterCommand",0);
	id = add_struc(-1,"nn::audio::MixCommand",0);
	id = add_struc(-1,"nn::audio::DepopPrepareCommand",0);
	id = add_struc(-1,"nn::audio::DelayState",0);
	id = add_struc(-1,"nn::audio::DelayParameter",0);
	id = add_struc(-1,"nn::audio::DelayLine",0);
	id = add_struc(-1,"nn::audio::CommandListHeader",0);
	id = add_struc(-1,"nn::audio::dsp::CommandBuffer",0);
	id = add_struc(-1,"nn::audio::dsp::Buffer",0);
	id = add_struc(-1,"nn::audio::dsp::MapUnmapBuffer",0);
	id = add_struc(-1,"nn::audio::DelayCommand",0);
	id = add_struc(-1,"nn::audio::DeviceSinkCommand",0);
	id = add_struc(-1,"MixDevice::vtbl",0);
	id = add_struc(-1,"HardwareDevice",0);
	id = add_struc(-1,"SomeDevice",0);
	id = add_struc(-1,"SomeDevice::vtbl",0);
	id = add_struc(-1,"SessionRegistry",0);
	id = add_struc(-1,"AudioRenderSession",0);
	id = add_struc(-1,"AudioOutSession",0);
	id = add_struc(-1,"NearVoiceSession",0);
	id = add_struc(-1,"GameRecordSession",0);
	id = add_struc(-1,"AudioRenderSession::vftable1",0);
	id = add_struc(-1,"UnkSessionStruct",0);
	id = add_struc(-1,"nn::audio::UpsampleCommand",0);
	id = add_struc(-1,"nn::audio::UpsamplerInfo",0);
	id = add_struc(-1,"nn::audio::UpsamplerState",0);
	id = add_struc(-1,"app_complete_status_message",1);
	id = add_struc(-1,"msgq_message_t",0);
	id = add_struc(-1,"app_complete_status_data",0);
	id = add_struc(-1,"adsp_os_message_header",0);
	id = add_struc(-1,"app_static_app_data",0);
	id = add_struc(-1,"adsp_shared_app",0);
	id = add_struc(-1,"app_mem_size",0);
	id = add_struc(-1,"app_loader_message",1);
	id = add_struc(-1,"app_loader_data",0);
	id = add_struc(-1,"run_app_instance_data",0);
	id = add_struc(-1,"adsp_app_args_t",0);
	id = add_struc(-1,"semaphore_t",0);
	id = add_struc(-1,"wait_queue_t",0);
	id = add_struc(-1,"list_node",0);
	id = add_struc(-1,"child_queue_t",0);
	id = add_struc(-1,"some_sporadic_work",0);
	id = add_struc(-1,"comp_event_elem_t",0);
	id = add_struc(-1,"comp_event_t",0);
	id = add_struc(-1,"event_t",0);
	id = add_struc(-1,"sync_object_t",0);
	id = add_struc(-1,"ce_thread_args_t",0);
	id = add_struc(-1,"mutex_t",0);
	id = add_struc(-1,"sched_arg_t",0);
	id = add_struc(-1,"timer_t",0);
	id = add_struc(-1,"thread_stats",0);
	id = add_struc(-1,"uint8x16_t_0",1);
	id = add_struc(-1,"pmu_events_t",0);
	id = add_struc(-1,"test_cmd_args",0);
	id = add_struc(-1,"line_read_struct",0);
	id = add_struc(-1,"va_list",0);
	id = add_struc(-1,"_output_args",0);
	id = add_struc(-1,"adsp_shared_mem",0);
	id = add_struc(-1,"adsp_app_shared_msg_pool",0);
	id = add_struc(-1,"app_loader_msgq",1);
	id = add_struc(-1,"msgq_t",0);
	id = add_struc(-1,"$78A6DB0EEAF2F7AED7EA0C7FB7CC5BA8",0);
	id = add_struc(-1,"adsp_os_args",0);
	id = add_struc(-1,"mbox_t",0);
	id = add_struc(-1,"int_handler_struct",0);
	id = add_struc(-1,"int_gic_data",0);
	id = add_struc(-1,"cmd",0);
	id = add_struc(-1,"cbuf_t",0);
	id = add_struc(-1,"adsp_mbx_t",0);
	id = add_struc(-1,"cmd_block",0);
	id = add_struc(-1,"adsp_hw_mbx_t",0);
	id = add_struc(-1,"mailbox_attributes",0);
	id = add_struc(-1,"outer_cache_fns",0);
	id = add_struc(-1,"private_struct",0);
	id = add_struc(-1,"app_descriptor",0);
	id = add_struc(-1,"some_rt_args",0);
	id = add_struc(-1,"test_entry_params",0);
	id = add_struc(-1,"test_case",0);
	id = add_struc(-1,"test_suite",0);
	id = add_struc(-1,"thread_t",0);
	id = add_struc(-1,"arch_thread",0);
	id = add_struc(-1,"wait_queue",0);
	id = add_struc(-1,"sched_edf_t",0);
	id = add_struc(-1,"btree_t",0);
	id = add_struc(-1,"FILE_0",0);
	id = add_struc(-1,"heap",0);
	id = add_struc(-1,"adsp_app_descriptor",0);
	id = add_struc(-1,"adsp_app_mem_t",0);
	id = add_struc(-1,"nn::audio::ReverbCommand",0);
	id = add_struc(-1,"nn::audio::ReverbParameter",0);
	id = add_struc(-1,"nn::audio::ReverbState",0);
	id = add_struc(-1,"nn::audio::AuxCommand",0);
	id = add_struc(-1,"nn::audio::AuxInfoDsp",0);
	id = add_struc(-1,"nn::audio::CaptureCommand",0);
	id = add_struc(-1,"nn::audio::AuxBufferInfo",0);
	id = add_struc(-1,"nn::audio::I3dl2ReverbParameter",0);
	id = add_struc(-1,"nn::audio::I3dl2ReverbCommand",0);
	id = add_struc(-1,"nn::audio::I3dl2ReverbState",0);
	id = add_struc(-1,"nn::audio::I3dl2DelayLine",0);
	id = add_struc(-1,"SessionBase",0);
	id = add_struc(-1,"gMixData",0);
	id = add_struc(-1,"MessageQueue",0);
	id = add_struc(-1,"fpctx_t",0);
	id = add_struc(-1,"app_pool_thing",0);
	id = add_struc(-1,"adsp_os_info",0);
	id = add_struc(-1,"exception_context",0);
	id = add_struc(-1,"arm_fault_frame_shared",0);
	id = add_struc(-1,"arm_mode_regs_shared",0);
	id = add_struc(-1,"interrupt_profile_stat",0);
	id = add_struc(-1,"gMixRender",0);
	id = add_struc(-1,"gMixOut",0);
	id = add_struc(-1,"MixRender",0);
	id = add_struc(-1,"MixOut",0);
	id = add_struc(-1,"SessionStruct",0);
	id = add_struc(-1,"NearVoice",0);
	id = add_struc(-1,"MixNearVoice",0);
	id = add_struc(-1,"NearVoiceGameRecordUnkStruct",0);
	id = add_struc(-1,"nn::audio::PcmInt16DataSourceCommandVersion1",0);
	id = add_struc(-1,"nn::audio::DepopForMixBuffersCommand",0);
	id = add_struc(-1,"nn::audio::MixRampGroupedCommand",0);
	id = add_struc(-1,"HardwareOpusSharedMemory",0);
	id = add_struc(-1,"OpusMailbox",0);
	id = add_struc(-1,"OpusMainStruct",0);
	id = add_struc(-1,"HardwareOpusUnkStruct",0);
	id = add_struc(-1,"OpusCustomMode",0);
	id = add_struc(-1,"mdct_lookup",0);
	id = add_struc(-1,"PulseCache",0);
	id = add_struc(-1,"OpusDecoder",0);
	id = add_struc(-1,"silk_DecControlStruct",0);
	id = add_struc(-1,"OpusDecodeObject",0);
	id = add_struc(-1,"ChannelLayout",0);
	id = add_struc(-1,"OpusMultiStreamDecodeObject",0);
	id = add_struc(-1,"OpusMSDecoder",0);
	
	id = get_struc_id("float32x4_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("int32x4_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("int8x8_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"a1",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::dsp::Command");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"type",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"size",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"estimatedProcessTime",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nodeId",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	16);
	set_struc_align(id,2);
	
	id = get_struc_id("__n64");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("__n128");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint8x8_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("int16x4_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("int32x2_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("uint16x4_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("uint32x2_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("int8x16_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("int16x8_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("int64x2_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint8x16_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint16x8_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint32x4_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint64x2_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("poly8x8_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("poly16x4_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("poly16x8_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("poly8x16_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("float64x2_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("poly128_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("float32x2_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("float32x2x2_t");
	mid = add_struc_member(id,"val",	0,	0x60000400,	get_struc_id("float32x2_t"),	16);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSection");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InternalConditionVariable");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::ThreadType");
	mid = add_struc_member(id,"field_8",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_10",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_18",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_20",	0X18,	0x000400,	-1,	32);
	mid = add_struc_member(id,"thread_status",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_41",	0X3C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_42",	0X3E,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"thread_prio_shift",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread_stack_base_addr",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"thread_stack_base_addr_mirror",	0X50,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"thread_stack_size",	0X58,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"thread_param",	0X60,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"thread_func",	0X68,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_70",	0X70,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_78",	0X78,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_80",	0X80,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_88",	0X88,	0x000400,	-1,	256);
	mid = add_struc_member(id,"thread_name",	0X188,	0x000400,	-1,	32);
	mid = add_struc_member(id,"thread_name_addr",	0X1A8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"crit",	0X1AC,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSection"),	4);
	mid = add_struc_member(id,"condvar",	0X1B0,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariable"),	4);
	mid = add_struc_member(id,"thread_handle",	0X1B4,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSectionStorage");
	mid = add_struc_member(id,"storage",	0,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSection"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::ConditionVariableType");
	mid = add_struc_member(id,"field_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"internal_impl",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::EventType");
	mid = add_struc_member(id,"field_0",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"field_8",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"is_signalled",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initially_signaled",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"should_autoclear",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initialized",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"signal_counter",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signal_counter_2",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"crit",	0X14,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon"),	4);
	mid = add_struc_member(id,"condvar",	0X18,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InterProcessEventType");
	mid = add_struc_member(id,"field_0",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"field_8",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk2",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initially_signaled",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"should_autoclear",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk3",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"readable_handle",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writable_handle",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"crit",	0X14,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon"),	4);
	mid = add_struc_member(id,"condvar",	0X18,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::SystemEventType::u");
	mid = add_struc_member(id,"event",	0,	0x60000400,	get_struc_id("nn::os::EventType"),	28);
	mid = add_struc_member(id,"ipe",	0,	0x60000400,	get_struc_id("nn::os::detail::InterProcessEventType"),	28);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::sf::NativeHandle");
	mid = add_struc_member(id,"handle",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"managed",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_05",	0X5,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::ICommand");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"type",	0X5,	0x8800400,	get_enum("nn::audio::CommandType"),	1);
	mid = add_struc_member(id,"size",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"estimatedProcessTime",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nodeId",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CircularBufferSinkCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"input",	0X18,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"address",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pos",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk30",	0X30,	0x000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::dsp::CommandListProcessor");
	mid = add_struc_member(id,"workBufferHeader",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"workBufferCommands",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"workBufferCommandsSize",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"maxProcessTime",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"commandCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"targetSampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mixBuffers",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"bufferCount",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"processedCommandCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startTime",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"currentProcessTime",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"endTime",	0X38,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("MixDevice");
	mid = add_struc_member(id,"hardwareDevice",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"name",	0X4,	0x000400,	-1,	256);
	mid = add_struc_member(id,"sessionId",	0X104,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::LightLimiterParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"channelCountMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"channelCount",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lookAheadTimeMax",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"attackTime",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"releaseTime",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lookAheadTime",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"attackCoeff",	0X24,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"releaseCoeff",	0X28,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"limitThreshold",	0X2C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"inputGain",	0X30,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"outputGain",	0X34,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lookAheadSamplesMin",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lookAheadSamplesMax",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"statisticsEnabled",	0X41,	0x000400,	-1,	1);
	mid = add_struc_member(id,"statisticsResetRequired",	0X42,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk43",	0X43,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::LightLimiterV1Command");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"inputOffsets",	0X10,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputOffsets",	0X1C,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"param",	0X28,	0x60000400,	get_struc_id("nn::audio::LightLimiterParameter"),	68);
	mid = add_struc_member(id,"dspStateBuffer",	0X6C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspWorkBuffer",	0X70,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X74,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::LightLimiterState");
	mid = add_struc_member(id,"detectorAverage",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"compressionGain",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lookAheadSampleBuffers",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lookAheadSampleOffsets",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk20",	0X10,	0x000400,	-1,	32);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::LightLimiterStatisticsInternal");
	mid = add_struc_member(id,"channelMaxSample",	0,	0x80000400,	-1,	24);
	mid = add_struc_member(id,"channelCompressionGainMin",	0X18,	0x80000400,	-1,	24);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::server::PerformanceEntryAddresses");
	mid = add_struc_member(id,"translatedAddr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"entryStartTimeOffset",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"headerEntryCountOffset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"entryProcessingTimeOffset",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::PerformanceCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"type",	0X14,	0x28800400,	get_enum("nn::audio::PerformanceEntryType"),	4);
	mid = add_struc_member(id,"performanceEntryAddress",	0X18,	0x60000400,	get_struc_id("nn::audio::server::PerformanceEntryAddresses"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CopyMixBufferCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DownMix6chTo2chCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"downMixCoeff",	0X2C,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"unk3C",	0X3C,	0x000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::MixRampCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"prevVolume",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"currentVolume",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lastSamplePtr",	0X20,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::codec::AdpcmContext");
	mid = add_struc_member(id,"header",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"yn1",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"yn2",	0X4,	0x10000400,	-1,	2);
	set_struc_align(id,1);
	
	id = get_struc_id("nn::audio::server::VoiceState");
	mid = add_struc_member(id,"playedSampleCount",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"offset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferIndex",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferValid",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferConsumed",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleHistory",	0X18,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"fraction",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk2C",	0X2C,	0x000400,	-1,	4);
	mid = add_struc_member(id,"adpcmContext",	0X30,	0x60000400,	get_struc_id("nn::codec::AdpcmContext"),	6);
	mid = add_struc_member(id,"pad36",	0X36,	0x000400,	-1,	2);
	mid = add_struc_member(id,"adpcmCoeff",	0X38,	0x10000400,	-1,	32);
	mid = add_struc_member(id,"unk58",	0X58,	0x000400,	-1,	8);
	mid = add_struc_member(id,"biquadState",	0X60,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"unk70",	0X70,	0x000400,	-1,	16);
	mid = add_struc_member(id,"previousSamples",	0X80,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"externalContextSize",	0XE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"externalContextUsed",	0XE4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"voiceDropped",	0XE5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"loopCount",	0XE8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_EC",	0XEC,	0x000400,	-1,	20);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::dsp::DecodeFromWaveBuffersArgs");
	mid = add_struc_member(id,"sampleFormat",	0,	0x8800400,	get_enum("nn::audio::SampleFormat"),	1);
	mid = add_struc_member(id,"output",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"voiceState",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"waveBuffer",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"channel",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"srcQuality",	0X18,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sourceSampleRate",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"targetSampleRate",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataAddress",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IsVoicePlayedSampleCountResetAtLoopPointSupported",	0X30,	0x000400,	-1,	1);
	mid = add_struc_member(id,"IsVoicePitchAndSrcSkippedSupported",	0X31,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::WaveBuffer");
	mid = add_struc_member(id,"dspBuffer",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startOffset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"endOffset",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loop",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"streamEnded",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"dspContext",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"contextSize",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DataSourcePcmInt16V1Command");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelIndex",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X28,	0x60000400,	get_struc_id("nn::audio::WaveBuffer"),	112);
	mid = add_struc_member(id,"dspVoiceState",	0X98,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::server::AddressInfo");
	mid = add_struc_member(id,"cpuAddress",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"size",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"memoryPoolInfo",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dspAddress",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::server::WaveBuffer");
	mid = add_struc_member(id,"bufferAddress",	0,	0x60000400,	get_struc_id("nn::audio::server::AddressInfo"),	24);
	mid = add_struc_member(id,"contextAddress",	0X18,	0x60000400,	get_struc_id("nn::audio::server::AddressInfo"),	24);
	mid = add_struc_member(id,"startOffset",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"endOffset",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loop",	0X38,	0x000400,	-1,	1);
	mid = add_struc_member(id,"streamEnded",	0X39,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sentToDSP",	0X3A,	0x000400,	-1,	1);
	mid = add_struc_member(id,"loopStartOffset",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopEndOffset",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopCount",	0X44,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::VoiceState");
	mid = add_struc_member(id,"playedSampleCount",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"offset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferIndex",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferValid",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferConsumed",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleHistory",	0X18,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"fraction",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk2C",	0X2C,	0x000400,	-1,	4);
	mid = add_struc_member(id,"adpcmContext",	0X30,	0x60000400,	get_struc_id("nn::codec::AdpcmContext"),	6);
	mid = add_struc_member(id,"pad36",	0X36,	0x000400,	-1,	2);
	mid = add_struc_member(id,"adpcmCoeff",	0X38,	0x10000400,	-1,	32);
	mid = add_struc_member(id,"unk58",	0X58,	0x000400,	-1,	8);
	mid = add_struc_member(id,"biquadState",	0X60,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"unk70",	0X70,	0x000400,	-1,	16);
	mid = add_struc_member(id,"previousSamples",	0X80,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"externalContextSize",	0XE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"externalContextUsed",	0XE4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"voiceDropped",	0XE5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_E8",	0XE6,	0x000400,	-1,	4);
	mid = add_struc_member(id,"loopCount",	0XEC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_F0",	0XF0,	0x000400,	-1,	16);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::dsp::DecodeArg");
	mid = add_struc_member(id,"dspBuffer",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startOffset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"endOffset",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"coefficients",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"adpcmContext",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"channel",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"offset",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"samplesToRead",	0X24,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::WaveBufferVersion2");
	mid = add_struc_member(id,"dspBuffer",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspContext",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"contextSize",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startOffset",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"endOffset",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopStartOffset",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopEndOffset",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopCount",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loop",	0X24,	0x000400,	-1,	1);
	mid = add_struc_member(id,"streamEnded",	0X25,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::PcmFloatDataSourceCommandVersion2");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad11",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelIndex",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X28,	0x60000400,	get_struc_id("nn::audio::WaveBufferVersion2"),	160);
	mid = add_struc_member(id,"dspVoiceState",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"padCC",	0XCC,	0x000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AdpcmDataSourceCommandVersion2");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad11",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelIndex",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X28,	0x60000400,	get_struc_id("nn::audio::WaveBufferVersion2"),	160);
	mid = add_struc_member(id,"dspVoiceState",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspDataAddress",	0XCC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AdpcmDataSourceCommandVersion1");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad11",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X20,	0x60000400,	get_struc_id("nn::audio::WaveBuffer"),	112);
	mid = add_struc_member(id,"dspVoiceState",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspDataAddress",	0X94,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::VolumeCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"volume",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::VolumeRampCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"prevVolume",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"currentVolume",	0X1C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::BiquadFilterParameter");
	mid = add_struc_member(id,"enabled",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"feedForward",	0X2,	0x10000400,	-1,	6);
	mid = add_struc_member(id,"feedBack",	0X8,	0x10000400,	-1,	4);
	set_struc_align(id,1);
	
	id = get_struc_id("nn::audio::BiquadFilterCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"feedForward",	0X18,	0x10000400,	-1,	6);
	mid = add_struc_member(id,"feedBack",	0X1E,	0x10000400,	-1,	4);
	mid = add_struc_member(id,"dspState",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"needsInit",	0X28,	0x000400,	-1,	1);
	mid = add_struc_member(id,"useFloatProcessing",	0X29,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad2A",	0X2A,	0x000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::BiquadFilterState");
	mid = add_struc_member(id,"_s0",	0,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"_s1",	0X4,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"_s2",	0X8,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"_s3",	0XC,	0x80000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::MultiTapBiquadFilterCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"unk18",	0X18,	0x000400,	-1,	2);
	mid = add_struc_member(id,"biquad1b",	0X1A,	0x10000400,	-1,	6);
	mid = add_struc_member(id,"biquad2b",	0X20,	0x10000400,	-1,	6);
	mid = add_struc_member(id,"biquad1a",	0X26,	0x10000400,	-1,	4);
	mid = add_struc_member(id,"biquad2a",	0X2A,	0x10000400,	-1,	4);
	mid = add_struc_member(id,"dspState1",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspState2",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"biquad1Disabled",	0X38,	0x000400,	-1,	1);
	mid = add_struc_member(id,"biquad2Disabled",	0X39,	0x000400,	-1,	1);
	mid = add_struc_member(id,"filterTapCount",	0X3A,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::MixCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"input",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"output",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"volume",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DepopPrepareCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"mixBufferIndexes",	0X14,	0x10000400,	-1,	48);
	mid = add_struc_member(id,"dspResultState",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferCount",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspDepopBuffer",	0X4C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DelayLine");
	mid = add_struc_member(id,"sampleCountMax",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferStart",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferEnd",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferCurrent",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decayRate",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DelayState");
	mid = add_struc_member(id,"unk000",	0,	0x000400,	-1,	32);
	mid = add_struc_member(id,"delayLines",	0X20,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	144);
	mid = add_struc_member(id,"feedbackGain",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"delayFeedbackGain",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassCrossGain",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassGain",	0XBC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassFeedbackGain",	0XC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassZ",	0XC4,	0x20000400,	-1,	24);
	mid = add_struc_member(id,"unk0C8",	0XDC,	0x000400,	-1,	120);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CommandListHeader");
	mid = add_struc_member(id,"bufferPos",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"commandCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"translatedSamplesBuffer",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferCount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleRate",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::dsp::CommandBuffer");
	mid = add_struc_member(id,"listHeader",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"commandBufferSize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timeLimit",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"remainingCommandCount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"resetBuffers",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"resourceUserId",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"renderTimeTaken",	0X20,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::dsp::MapUnmapBuffer");
	mid = add_struc_member(id,"addr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::dsp::Buffer");
	mid = add_struc_member(id,"cmdBuffer",	0,	0x60000400,	get_struc_id("nn::audio::dsp::CommandBuffer"),	80);
	mid = add_struc_member(id,"mapUnmapBuffer",	0X50,	0x60000400,	get_struc_id("nn::audio::dsp::MapUnmapBuffer"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::DelayParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"numChannelsMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"numChannels",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"delayTimeMax",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"delayTime",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inGain",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"feedbackGain",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wetGain",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dryGain",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelSpread",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassAmount",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X34,	0x8800400,	get_enum("ParameterState"),	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DelayCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"param",	0X2C,	0x60000400,	get_struc_id("nn::audio::DelayParameter"),	56);
	mid = add_struc_member(id,"dspStateBuffer",	0X64,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspWorkBuffer",	0X68,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X6C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad6D",	0X6D,	0x000400,	-1,	3);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DeviceSinkCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"name",	0X14,	0x000400,	-1,	256);
	mid = add_struc_member(id,"sessionId",	0X114,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspSampleBuffer",	0X118,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inputCount",	0X11C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X120,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"unk12C",	0X12C,	0x000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("MixDevice::vtbl");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	28);
	mid = add_struc_member(id,"ChannelCount",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetBuffers",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("HardwareDevice");
	mid = add_struc_member(id,"renderSession",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"state",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ringBufferBase",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ringBufferSize",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hardwareReadPosition",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ringBufferPos",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hardwareQueuedBytes",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleBuffer",	0X20,	0x10000400,	-1,	4096);
	set_struc_align(id,2);
	
	id = get_struc_id("SomeDevice");
	mid = add_struc_member(id,"__vftable",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_04",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("SomeDevice::vtbl");
	mid = add_struc_member(id,"GetRingBuffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_04",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetRingBufferSize",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	32);
	mid = add_struc_member(id,"unk_30",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_34",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk38",	0X38,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk_3C",	0X3C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_40",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("UnkSessionStruct");
	mid = add_struc_member(id,"__vftable",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_04",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("AudioRenderSession");
	mid = add_struc_member(id,"__vftable1",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"refCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__vftable2",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ringBufferBase",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataOffset2",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"totalBuffersByteSize",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_34",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writePosition",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_40",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_44",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_48",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"suspended",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk50",	0X50,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk_54",	0X54,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"unk_70",	0X70,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"mixRender",	0X8C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("SessionStruct");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	4);
	mid = add_struc_member(id,"addr1",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"addr2",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("AudioOutSession");
	mid = add_struc_member(id,"__vftable1",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"refCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__vftable2",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dataOffset",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataOffset2",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"totalBuffersByteSize",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writePosition",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_40",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_44",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_48",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"suspended",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flushBuffers",	0X50,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_54",	0X54,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"unk_70",	0X70,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"mixOut",	0X8C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"subStruct",	0X90,	0x60000400,	get_struc_id("SessionStruct"),	64);
	mid = add_struc_member(id,"subStructCount",	0XD0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_D4",	0XD4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("NearVoiceGameRecordUnkStruct");
	mid = add_struc_member(id,"audioBuffer0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"audioBuffer1",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"audioBuffer1_2",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataSizeBytes",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"frameCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataSizeBytes2",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readAddress",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferOffset",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"remainingBufferSize",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"numFramesRemaining",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sizeBytesTotal",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"frameSize",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"isNew",	0X34,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_35",	0X35,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad",	0X36,	0x000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("NearVoiceSession");
	mid = add_struc_member(id,"__vftable1",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"refCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__vftable2",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dataOffset",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataOffset2",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"totalBuffersByteSize",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writePosition",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_40",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_44",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_48",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"suspended",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flushBuffers",	0X50,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_54",	0X54,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"unk_70",	0X70,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"mixNearVoice",	0X8C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_90",	0X90,	0x60000400,	get_struc_id("NearVoiceGameRecordUnkStruct"),	56);
	mid = add_struc_member(id,"unkC8",	0XC8,	0x000400,	-1,	72);
	set_struc_align(id,2);
	
	id = get_struc_id("GameRecordSession");
	mid = add_struc_member(id,"unk000",	0,	0x000400,	-1,	272);
	
	id = get_struc_id("list_node");
	mid = add_struc_member(id,"prev",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"next",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("wait_queue_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"list",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"count",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("child_queue_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"list",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"count",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("semaphore_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait",	0X8,	0x60000400,	get_struc_id("wait_queue_t"),	16);
	mid = add_struc_member(id,"child",	0X18,	0x60000400,	get_struc_id("child_queue_t"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("timer_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"node",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"scheduled_time",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"periodic_time",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"callback",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"arg",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,3);
	
	id = get_struc_id("adsp_mbx_t");
	mid = add_struc_member(id,"rcv_buffer",	0,	0x20000400,	-1,	64);
	mid = add_struc_member(id,"rcv_rd_idx",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"rcv_wr_idx",	0X41,	0x000400,	-1,	1);
	mid = add_struc_member(id,"count",	0X42,	0x000400,	-1,	1);
	mid = add_struc_member(id,"mbx_id",	0X44,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"err_code",	0X46,	0x000400,	-1,	1);
	mid = add_struc_member(id,"s",	0X48,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"rcv_sem",	0X70,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"err_handler",	0X74,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"msg_handler",	0X78,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"context",	0X7C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("SessionRegistry");
	mid = add_struc_member(id,"unk00000",	0,	0x000400,	-1,	4);
	mid = add_struc_member(id,"stopFlag",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk00005",	0X5,	0x000400,	-1,	3);
	mid = add_struc_member(id,"unk00008",	0X8,	0x000400,	-1,	184);
	mid = add_struc_member(id,"unk000C0",	0XC0,	0x000400,	-1,	147456);
	mid = add_struc_member(id,"unk_240C0",	0X240C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_240C4",	0X240C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timr_240C8",	0X240C8,	0x60000400,	get_struc_id("timer_t"),	40);
	mid = add_struc_member(id,"unk240F0",	0X240F0,	0x000400,	-1,	12);
	mid = add_struc_member(id,"sink_semaphore",	0X240FC,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"sessionSemaphores",	0X24124,	0x25500400,	0XFFFFFFFF,	12,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk24130",	0X24130,	0x000400,	-1,	4);
	mid = add_struc_member(id,"gMixMsgSize",	0X24134,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"gMixMsgData",	0X24138,	0x20000400,	-1,	32);
	mid = add_struc_member(id,"process_semaphore",	0X24158,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"unk24180",	0X24180,	0x000400,	-1,	8);
	mid = add_struc_member(id,"mixData",	0X24188,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk2418C",	0X2418C,	0x000400,	-1,	24);
	mid = add_struc_member(id,"mailbox",	0X241A4,	0x60000400,	get_struc_id("adsp_mbx_t"),	128);
	mid = add_struc_member(id,"unk24224",	0X24224,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk_24228",	0X24228,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"unk_24244",	0X24244,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"renderSessions",	0X24260,	0x60000400,	get_struc_id("AudioRenderSession"),	864);
	mid = add_struc_member(id,"audioOutSessions",	0X245C0,	0x60000400,	get_struc_id("AudioOutSession"),	2592);
	mid = add_struc_member(id,"unk24FE0",	0X24FE0,	0x000400,	-1,	1080);
	mid = add_struc_member(id,"nearVoiceSessions",	0X25418,	0x60000400,	get_struc_id("NearVoiceSession"),	544);
	mid = add_struc_member(id,"gameRecordSession",	0X25638,	0x60000400,	get_struc_id("GameRecordSession"),	1088);
	mid = add_struc_member(id,"sessionType7",	0X25A78,	0x000400,	-1,	288);
	mid = add_struc_member(id,"sessionType8",	0X25B98,	0x000400,	-1,	144);
	mid = add_struc_member(id,"unk_sessionType",	0X25C28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_25C2C",	0X25C2C,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("AudioRenderSession::vftable1");
	mid = add_struc_member(id,"GetRingBuffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetBufferDeviceAddress",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetRingBufferSize",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetReadPosition",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetWritePosition",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk14",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SetSamplesProcessed",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetSharedBufferPosition",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SetSharedBufferPosition",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SetWritePosition",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"AppendBuffer",	0X28,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetBuffersProcessed",	0X2C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk30",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk34",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"FlushBuffers",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Suspend",	0X3C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Resume",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk44",	0X44,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk48",	0X48,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk4C",	0X4C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"AttachWorkBuffer",	0X50,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Open",	0X54,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Close",	0X58,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk5C",	0X5C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"PrepareSamples",	0X60,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk64",	0X64,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetSampleCount",	0X68,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SetReadPosition",	0X6C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::UpsampleCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"dspSamplesBuffer",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspUnkBuffer",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferCount",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"targetSampleCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"targetSampleRate",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspUpsamplerInfo",	0X2C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::UpsamplerState");
	mid = add_struc_member(id,"ratio",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"history",	0X4,	0x20000400,	-1,	80);
	mid = add_struc_member(id,"unk_54",	0X54,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"historyOutputIndex",	0X56,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"historyInputIndex",	0X58,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"historyStartIndex",	0X5A,	0x000400,	-1,	1);
	mid = add_struc_member(id,"historyEndIndex",	0X5B,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_5C",	0X5C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sampleIndex",	0X5D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad5E",	0X5E,	0x000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::UpsamplerInfo");
	mid = add_struc_member(id,"states",	0,	0x60000400,	get_struc_id("nn::audio::UpsamplerState"),	576);
	mid = add_struc_member(id,"manager",	0X240,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"samplesPos",	0X248,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"sampleCount",	0X250,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inputCount",	0X254,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X258,	0x000400,	-1,	1);
	mid = add_struc_member(id,"inputs",	0X259,	0x000400,	-1,	6);
	mid = add_struc_member(id,"unk25F",	0X25F,	0x000400,	-1,	33);
	set_struc_align(id,3);
	
	id = get_struc_id("msgq_message_t");
	mid = add_struc_member(id,"size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"payload",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_os_message_header");
	mid = add_struc_member(id,"header",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"message",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("app_complete_status_data");
	mid = add_struc_member(id,"header",	0,	0x60000400,	get_struc_id("adsp_os_message_header"),	8);
	mid = add_struc_member(id,"host_ref",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"adsp_ref",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"status",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("app_mem_size");
	mid = add_struc_member(id,"dram",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_shared",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_shared_wc",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_x",	0X20,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("adsp_shared_app");
	mid = add_struc_member(id,"name",	0,	0x000400,	-1,	128);
	mid = add_struc_member(id,"mem_size",	0X80,	0x60000400,	get_struc_id("app_mem_size"),	40);
	mid = add_struc_member(id,"mod_ptr",	0XA8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_data_ptr",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"shared_data_ptr",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"shared_wc_data_ptr",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"version",	0XBC,	0x000400,	-1,	16);
	set_struc_align(id,2);
	
	id = get_struc_id("app_static_app_data");
	mid = add_struc_member(id,"header",	0,	0x60000400,	get_struc_id("adsp_os_message_header"),	8);
	mid = add_struc_member(id,"shared_app",	0X8,	0x60000400,	get_struc_id("adsp_shared_app"),	204);
	set_struc_align(id,2);
	
	id = get_struc_id("app_complete_status_message");
	mid = add_struc_member(id,"msgq_msg",	0,	0x60000400,	get_struc_id("msgq_message_t"),	8);
	mid = add_struc_member(id,"complete_status_data",	0,	0x60000400,	get_struc_id("app_complete_status_data"),	24);
	mid = add_struc_member(id,"static_app_data",	0,	0x60000400,	get_struc_id("app_static_app_data"),	212);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_app_args_t");
	mid = add_struc_member(id,"argc",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"argv",	0X4,	0x20000400,	-1,	512);
	set_struc_align(id,2);
	
	id = get_struc_id("run_app_instance_data");
	mid = add_struc_member(id,"adsp_mod_ptr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"host_ref",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"adsp_ref",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_data_ptr",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_shared_ptr",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_shared_wc_ptr",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_ptr",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_flag",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_x_ptr",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_x_flag",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mem_size",	0X2C,	0x60000400,	get_struc_id("app_mem_size"),	40);
	mid = add_struc_member(id,"app_args",	0X54,	0x60000400,	get_struc_id("adsp_app_args_t"),	516);
	mid = add_struc_member(id,"stack_size",	0X258,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"message",	0X25C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("app_loader_data");
	mid = add_struc_member(id,"header",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"app_init",	0X4,	0x60000400,	get_struc_id("run_app_instance_data"),	608);
	set_struc_align(id,2);
	
	id = get_struc_id("app_loader_message");
	mid = add_struc_member(id,"msgq_msg",	0,	0x60000400,	get_struc_id("msgq_message_t"),	8);
	mid = add_struc_member(id,"data",	0,	0x60000400,	get_struc_id("app_loader_data"),	612);
	set_struc_align(id,2);
	
	id = get_struc_id("some_sporadic_work");
	mid = add_struc_member(id,"id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"blocked_once",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sem",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"period_count",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"deadlines_missed",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pending_work",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pending_work_peak",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"period",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inactive_count",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_t",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"some_timer",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"work_load",	0X38,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"periodic",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"regenerate",	0X41,	0x000400,	-1,	1);
	mid = add_struc_member(id,"min_period",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"max_period",	0X50,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("comp_event_elem_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"e",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"parent",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"parent_type",	0XC,	0x28800400,	get_enum("comp_eve_elem_type_t"),	4);
	mid = add_struc_member(id,"child_queue_node",	0X10,	0x60000400,	get_struc_id("list_node"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("event_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signalled",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"flags",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait",	0XC,	0x60000400,	get_struc_id("wait_queue_t"),	16);
	mid = add_struc_member(id,"child",	0X1C,	0x60000400,	get_struc_id("child_queue_t"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("comp_event_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait_and",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"e",	0XC,	0x60000400,	get_struc_id("event_t"),	44);
	mid = add_struc_member(id,"parents",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("sync_object_t");
	mid = add_struc_member(id,"object",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"type",	0X4,	0x28800400,	get_enum("comp_eve_elem_type_t"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("ce_thread_args_t");
	mid = add_struc_member(id,"my_name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"loop_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"object",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("thread_stats");
	mid = add_struc_member(id,"idle_time",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"last_idle_timestamp",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time_preempt",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time_wake_one",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time_block",	0X20,	0x30000400,	-1,	8);
	return id;
}

static Structures_1(id) {
        auto mid;

	mid = add_struc_member(id,"timer_time",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"timer_set_time",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"reschedules",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"context_switches",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"preempts",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wake_ones",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"blocks",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"yields",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"interrupts",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timer_ints",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timer_sets",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timers",	0X5C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"budget_exceeds",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl_miss",	0X64,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("uint8x16_t_0");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("pmu_events_t");
	mid = add_struc_member(id,"events",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"overflow",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"count",	0XC,	0x000400,	-1,	6);
	
	id = get_struc_id("test_cmd_args");
	mid = add_struc_member(id,"argc",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"argv",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("line_read_struct");
	mid = add_struc_member(id,"string",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pos",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buffer",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"buflen",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("va_list");
	mid = add_struc_member(id,"__ap",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_output_args");
	mid = add_struc_member(id,"outstr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"len",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pos",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("msgq_t");
	mid = add_struc_member(id,"size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"write_index",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_index",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"queue",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("app_pool_thing");
	mid = add_struc_member(id,"header",	0,	0x20000400,	-1,	12);
	mid = add_struc_member(id,"queue",	0XC,	0x20000400,	-1,	4084);
	set_struc_align(id,2);
	
	id = get_struc_id("app_loader_msgq");
	mid = add_struc_member(id,"msgq",	0,	0x60000400,	get_struc_id("msgq_t"),	16);
	mid = add_struc_member(id,"_anon_0",	0,	0x60000400,	get_struc_id("app_pool_thing"),	4096);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_app_shared_msg_pool");
	mid = add_struc_member(id,"app_loader_recv_message",	0,	0x60000400,	get_struc_id("app_loader_msgq"),	4096);
	mid = add_struc_member(id,"app_loader_send_message",	0X1000,	0x60000400,	get_struc_id("app_loader_msgq"),	4096);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_os_args");
	mid = add_struc_member(id,"timer_prescalar",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"logger",	0X4,	0x000400,	-1,	4028);
	mid = add_struc_member(id,"adsp_freq_hz",	0XFC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"gap4008",	0XFC4,	0x000400,	-1,	4);
	mid = add_struc_member(id,"dynamic_app_support",	0XFC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"chip_id",	0XFCC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0XFD0,	0x000400,	-1,	120);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_os_info");
	mid = add_struc_member(id,"version",	0,	0x000400,	-1,	32);
	mid = add_struc_member(id,"reserved",	0X20,	0x000400,	-1,	128);
	
	id = get_struc_id("arm_fault_frame_shared");
	mid = add_struc_member(id,"_spsr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"usp",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ulr",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"r",	0XC,	0x20000400,	-1,	52);
	mid = add_struc_member(id,"_pc",	0X40,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("arm_mode_regs_shared");
	mid = add_struc_member(id,"fiq_r13",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fiq_r14",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"irq_r13",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"irq_r14",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"svc_r13",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"svc_r14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"abt_r13",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"abt_r14",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"und_r13",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"und_r14",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sys_r13",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sys_r14",	0X2C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("exception_context");
	mid = add_struc_member(id,"frame",	0,	0x60000400,	get_struc_id("arm_fault_frame_shared"),	68);
	mid = add_struc_member(id,"regs",	0X44,	0x60000400,	get_struc_id("arm_mode_regs_shared"),	48);
	mid = add_struc_member(id,"stack_addr",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"stack_dump",	0X78,	0x20000400,	-1,	128);
	mid = add_struc_member(id,"exception_reason",	0XF8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_shared_mem");
	mid = add_struc_member(id,"app_shared_msg_pool",	0,	0x60000400,	get_struc_id("adsp_app_shared_msg_pool"),	8192);
	mid = add_struc_member(id,"os_args",	0X2000,	0x60000400,	get_struc_id("adsp_os_args"),	4168);
	mid = add_struc_member(id,"os_info",	0X3048,	0x60000400,	get_struc_id("adsp_os_info"),	160);
	mid = add_struc_member(id,"exception_context",	0X30E8,	0x60000400,	get_struc_id("exception_context"),	252);
	set_struc_align(id,3);
	
	id = get_struc_id("$78A6DB0EEAF2F7AED7EA0C7FB7CC5BA8");
	mid = add_struc_member(id,"header",	0,	0x20000400,	-1,	12);
	mid = add_struc_member(id,"queue",	0XC,	0x20000400,	-1,	32756);
	set_struc_align(id,2);
	
	id = get_struc_id("int_handler_struct");
	mid = add_struc_member(id,"handler",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"arg",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("int_gic_data");
	mid = add_struc_member(id,"name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dist_base",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cpuintf_base",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cnf_dist",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"cnf_intf",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"irq",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fiq",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"irq_start",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nr_irqs",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"it_line_no",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cpu_id",	0X24,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("cmd");
	mid = add_struc_member(id,"cmd_str",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"help_str",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"cmd_callback",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("cbuf_t");
	mid = add_struc_member(id,"head",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tail",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"len_pow2",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buf",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"event",	0X10,	0x60000400,	get_struc_id("event_t"),	44);
	set_struc_align(id,2);
	
	id = get_struc_id("cmd_block");
	mid = add_struc_member(id,"next",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"list",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_hw_mbx_t");
	mid = add_struc_member(id,"buffer",	0,	0x20000400,	-1,	4096);
	mid = add_struc_member(id,"rd_idx",	0X1000,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"wr_idx",	0X1002,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"err_code",	0X1004,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"busy",	0X1006,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"count",	0X1008,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"send_mbx",	0X100C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rcv_mbx",	0X1010,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"empty_irq",	0X1014,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"full_irq",	0X1016,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"last_msg",	0X1018,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"s",	0X101C,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"buffer_complete",	0X1044,	0x60000400,	get_struc_id("wait_queue_t"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("mailbox_attributes");
	mid = add_struc_member(id,"owner",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flags",	0X4,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("outer_cache_fns");
	mid = add_struc_member(id,"flush_all",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flush_range",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"clean_all",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"clean_range",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"inv_all",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"inv_range",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"disable",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"enable",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"sync",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("mbox_t");
	mid = add_struc_member(id,"rcv_buffer",	0,	0x20000400,	-1,	64);
	mid = add_struc_member(id,"rcv_rd_idx",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"rcv_wr_idx",	0X41,	0x000400,	-1,	1);
	mid = add_struc_member(id,"count",	0X42,	0x000400,	-1,	1);
	mid = add_struc_member(id,"mbx_id",	0X44,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"err_code",	0X46,	0x000400,	-1,	1);
	mid = add_struc_member(id,"s",	0X48,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"rcv_sem",	0X70,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"err_handler",	0X74,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"msg_handler",	0X78,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"context",	0X7C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("private_struct");
	mid = add_struc_member(id,"recv_msgq",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"send_msgq",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mbox",	0X8,	0x60000400,	get_struc_id("mbox_t"),	128);
	set_struc_align(id,2);
	
	id = get_struc_id("app_descriptor");
	mid = add_struc_member(id,"name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"init",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"entry",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flags",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"stack_size",	0X10,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("sched_arg_t");
	mid = add_struc_member(id,"priority",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"exec_cycle",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"policy",	0X18,	0x28800400,	get_enum("sched_policy"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("test_entry_params");
	mid = add_struc_member(id,"exec_mode",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"load",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sched_args",	0X10,	0x60000400,	get_struc_id("sched_arg_t"),	32);
	set_struc_align(id,3);
	
	id = get_struc_id("some_rt_args");
	mid = add_struc_member(id,"id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"period_count_limit",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"params",	0X8,	0x60000400,	get_struc_id("test_entry_params"),	48);
	mid = add_struc_member(id,"dl_divisor",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"period_count",	0X40,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"processed_count",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"deadlines_missed",	0X50,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"pending_work_a",	0X58,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"pending_work_a_peak",	0X60,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"pending_work_b",	0X68,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"pending_work_b_peak",	0X70,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"stop_test",	0X78,	0x000400,	-1,	1);
	mid = add_struc_member(id,"e",	0X7C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"some_timer",	0X80,	0x60000400,	get_struc_id("timer_t"),	40);
	set_struc_align(id,3);
	
	id = get_struc_id("test_case");
	mid = add_struc_member(id,"n_entries",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"duration",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"iterations",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"params",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("test_suite");
	mid = add_struc_member(id,"ncases",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cases",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("arch_thread");
	mid = add_struc_member(id,"_sp",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fpctx",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("wait_queue");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"list",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"count",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("btree_t");
	mid = add_struc_member(id,"left",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"right",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("sched_edf_t");
	mid = add_struc_member(id,"exec_cycle",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"abs_exec_cycle",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"abs_dl",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl_new",	0X20,	0x000400,	-1,	1);
	mid = add_struc_member(id,"budget_exceeds",	0X21,	0x000400,	-1,	1);
	mid = add_struc_member(id,"refill",	0X22,	0x000400,	-1,	1);
	mid = add_struc_member(id,"dl_miss",	0X23,	0x000400,	-1,	1);
	mid = add_struc_member(id,"no_more_budget",	0X24,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bdgt_exceeds_cnt",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cur_start",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl_timer",	0X38,	0x60000400,	get_struc_id("timer_t"),	40);
	mid = add_struc_member(id,"btree",	0X60,	0x60000400,	get_struc_id("btree_t"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("thread_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread_list_node",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"queue_node",	0XC,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"priority",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X18,	0x28800400,	get_enum("thread_state"),	4);
	mid = add_struc_member(id,"saved_critical_section_count",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"remaining_quantum",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"blocking_wait_queue",	0X28,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"wait_queue_block_ret",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"arch",	0X30,	0x60000400,	get_struc_id("arch_thread"),	8);
	mid = add_struc_member(id,"stack",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"stack_size",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"entry",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"arg",	0X44,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"retcode",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"retcode_wait_queue",	0X4C,	0x60000400,	get_struc_id("wait_queue"),	16);
	mid = add_struc_member(id,"name",	0X5C,	0x000400,	-1,	32);
	mid = add_struc_member(id,"sched_pol",	0X7C,	0x28800400,	get_enum("sched_policy"),	4);
	mid = add_struc_member(id,"sched_edf",	0X80,	0x60000400,	get_struc_id("sched_edf_t"),	104);
	mid = add_struc_member(id,"running_cycles",	0XE8,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("FILE_0");
	mid = add_struc_member(id,"ctx",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"fputc",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"fputs",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"fgetc",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"vfprintf",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("mutex_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"holder",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"count",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait",	0XC,	0x60000400,	get_struc_id("wait_queue_t"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("heap");
	mid = add_struc_member(id,"base",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"len",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"remaining",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"low_watermark",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lock",	0X10,	0x60000400,	get_struc_id("mutex_t"),	28);
	mid = add_struc_member(id,"free_list",	0X2C,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"delayed_free_list",	0X34,	0x60000400,	get_struc_id("list_node"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_app_mem_t");
	mid = add_struc_member(id,"dram",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"shared",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"shared_wc",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"aram",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"aram_flag",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_x",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"aram_x_flag",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_app_descriptor");
	mid = add_struc_member(id,"name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"init",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"entry",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mem",	0XC,	0x60000400,	get_struc_id("adsp_app_mem_t"),	28);
	mid = add_struc_member(id,"mem_size",	0X28,	0x60000400,	get_struc_id("app_mem_size"),	40);
	mid = add_struc_member(id,"args",	0X50,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flags",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"stack_size",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"handle",	0X5C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"host_ref",	0X60,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::ReverbParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"channelCountMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"channelCount",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"earlyMode",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"earlyGain",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"preDelay",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lateMode",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lateGain",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decayTime",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"highFreqDecayRatio",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"colouration",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"baseGain",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"outGain",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dryGain",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"usage",	0X40,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::ReverbCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"parameter",	0X2C,	0x60000400,	get_struc_id("nn::audio::ReverbParameter"),	68);
	mid = add_struc_member(id,"state",	0X70,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"workBuffer",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X78,	0x000400,	-1,	1);
	mid = add_struc_member(id,"longSizePreDelaySupported",	0X79,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk7A",	0X7A,	0x000400,	-1,	6);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::ReverbState");
	mid = add_struc_member(id,"preDelayLine",	0,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	24);
	mid = add_struc_member(id,"centerDelayLine",	0X18,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	24);
	mid = add_struc_member(id,"earlyDelayTimes",	0X30,	0x20000400,	-1,	40);
	mid = add_struc_member(id,"earlyGains",	0X58,	0x20000400,	-1,	40);
	mid = add_struc_member(id,"preDelayTime",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decayDelayLines",	0X84,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	96);
	mid = add_struc_member(id,"fdnDelayLines",	0XE4,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	96);
	mid = add_struc_member(id,"hfDecayGain",	0X144,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"hfDecayPrevGain",	0X154,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"previousFeedbackOutput",	0X164,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"unk170",	0X174,	0x000400,	-1,	204);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AuxCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"input",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"output",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sendBufferInfo",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"returnBufferInfo",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sendBufferInfoBase",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"returnBufferInfoBase",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"countMax",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writeOffset",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"updateCount",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X34,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CaptureCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"input",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"output",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sendBufferInfo",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sendBufferInfoBase",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"countMax",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writeOffset",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"updateCount",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X2C,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AuxInfoDsp");
	mid = add_struc_member(id,"readOffset",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writeOffset",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lostSampleCount",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"totalSampleCount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	48);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AuxBufferInfo");
	mid = add_struc_member(id,"cpuInfo",	0,	0x60000400,	get_struc_id("nn::audio::AuxInfoDsp"),	64);
	mid = add_struc_member(id,"dspInfo",	0X40,	0x60000400,	get_struc_id("nn::audio::AuxInfoDsp"),	64);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::I3dl2ReverbParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"channelCountMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"channelCount",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"sampleRate",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"roomHFGain",	0X18,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"referenceHF",	0X1C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbDecayTime",	0X20,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbHFDecayRatio",	0X24,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"roomGain",	0X28,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"reflectionGain",	0X2C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"reverbGain",	0X30,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbDiffusion",	0X34,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"reflectionDelay",	0X38,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbDelayTime",	0X3C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbDensity",	0X40,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"dryGain",	0X44,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X48,	0x8800400,	get_enum("ParameterState"),	1);
	mid = add_struc_member(id,"unk49",	0X49,	0x000400,	-1,	3);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::I3dl2ReverbCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"parameter",	0X2C,	0x60000400,	get_struc_id("nn::audio::I3dl2ReverbParameter"),	76);
	mid = add_struc_member(id,"state",	0X78,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"workBuffer",	0X7C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X80,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::I3dl2DelayLine");
	mid = add_struc_member(id,"bufferStart",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"bufferEnd",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"maxDelay",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"input",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"output",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"delay",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wetGain",	0X18,	0x80000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::I3dl2ReverbState");
	mid = add_struc_member(id,"lowpass_0",	0,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lowpass_1",	0X4,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lowpass_2",	0X8,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"earlyDelayLine",	0XC,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	28);
	mid = add_struc_member(id,"earlyTapSteps",	0X28,	0x20000400,	-1,	80);
	mid = add_struc_member(id,"earlyGain",	0X78,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateGain",	0X7C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"earlyToLateTaps",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fdnDelayLine",	0X84,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	112);
	mid = add_struc_member(id,"decayDelayLine0",	0XF4,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	112);
	mid = add_struc_member(id,"decayDelayLine1",	0X164,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	112);
	mid = add_struc_member(id,"lastReverbEcho",	0X1D4,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"centerDelayLine",	0X1D8,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	28);
	mid = add_struc_member(id,"lpfCoefficients",	0X1F4,	0x80000400,	-1,	48);
	mid = add_struc_member(id,"shelfFilter",	0X224,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"dryGain",	0X234,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk238",	0X238,	0x000400,	-1,	328);
	set_struc_align(id,2);
	
	id = get_struc_id("SessionBase");
	mid = add_struc_member(id,"__vftable",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk04",	0X4,	0x000400,	-1,	12);
	set_struc_align(id,2);
	
	id = get_struc_id("MessageQueue");
	mid = add_struc_member(id,"msgq",	0,	0x60000400,	get_struc_id("msgq_t"),	16);
	mid = add_struc_member(id,"messages",	0X10,	0x000400,	-1,	2032);
	set_struc_align(id,2);
	
	id = get_struc_id("MixRender");
	mid = add_struc_member(id,"unk0000",	0,	0x000400,	-1,	24576);
	mid = add_struc_member(id,"unk6000",	0X6000,	0x000400,	-1,	4096);
	mid = add_struc_member(id,"readPosition",	0X7000,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk7004",	0X7004,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk_7008",	0X7008,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_700C",	0X700C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("MixOut");
	mid = add_struc_member(id,"subStructIndex",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"subStructIndex2",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk0C",	0XC,	0x000400,	-1,	4);
	mid = add_struc_member(id,"playedSampleCount",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("MixNearVoice");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"writePosition",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk0C",	0XC,	0x000400,	-1,	12);
	mid = add_struc_member(id,"readPosition",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_1C",	0X1C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("gMixData");
	mid = add_struc_member(id,"adspMsgQ",	0,	0x60000400,	get_struc_id("MessageQueue"),	2048);
	mid = add_struc_member(id,"firmwareMsgQ",	0X800,	0x60000400,	get_struc_id("MessageQueue"),	2048);
	mid = add_struc_member(id,"mixRender",	0X1000,	0x60000400,	get_struc_id("MixRender"),	172128);
	mid = add_struc_member(id,"mixOut",	0X2B060,	0x60000400,	get_struc_id("MixOut"),	288);
	mid = add_struc_member(id,"unk2B180",	0X2B180,	0x000400,	-1,	48);
	mid = add_struc_member(id,"unk2B1B0",	0X2B1B0,	0x000400,	-1,	72);
	mid = add_struc_member(id,"nearVoices",	0X2B1F8,	0x60000400,	get_struc_id("MixNearVoice"),	64);
	mid = add_struc_member(id,"unk2B238",	0X2B238,	0x000400,	-1,	128);
	mid = add_struc_member(id,"unk2B2B8",	0X2B2B8,	0x000400,	-1,	2304);
	mid = add_struc_member(id,"unk2BBB8",	0X2BBB8,	0x000400,	-1,	16);
	mid = add_struc_member(id,"unk2BBC8",	0X2BBC8,	0x000400,	-1,	6144);
	mid = add_struc_member(id,"unk2D3C8",	0X2D3C8,	0x000400,	-1,	16);
	mid = add_struc_member(id,"unk2D3D8",	0X2D3D8,	0x000400,	-1,	6400);
	mid = add_struc_member(id,"unk2ECD8",	0X2ECD8,	0x000400,	-1,	16);
	mid = add_struc_member(id,"unk_2ECE8",	0X2ECE8,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"unk2ECFC",	0X2ECFC,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk2ED00",	0X2ED00,	0x000400,	-1,	184);
	set_struc_align(id,3);
	
	id = get_struc_id("fpctx_t");
	mid = add_struc_member(id,"_fpexc",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dregs",	0X8,	0x20000400,	-1,	128);
	mid = add_struc_member(id,"_fpscr",	0X108,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"valid",	0X10C,	0x000400,	-1,	1);
	set_struc_align(id,3);
	
	id = get_struc_id("interrupt_profile_stat");
	mid = add_struc_member(id,"vector",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cycle_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"us_time",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timestamp",	0X10,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("gMixRender");
	mid = add_struc_member(id,"unk0000",	0,	0x000400,	-1,	24576);
	mid = add_struc_member(id,"unk6000",	0X6000,	0x000400,	-1,	4112);
	
	id = get_struc_id("gMixOut");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	24);
	
	id = get_struc_id("NearVoice");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	32);
	
	id = get_struc_id("nn::audio::PcmInt16DataSourceCommandVersion1");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad11",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelIndex",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X28,	0x60000400,	get_struc_id("nn::audio::WaveBuffer"),	112);
	mid = add_struc_member(id,"dspVoiceState",	0X98,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DepopForMixBuffersCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"input",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decay",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"depopBuffer",	0X20,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::MixRampGroupedCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bufferCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inputIndexes",	0X18,	0x10000400,	-1,	48);
	mid = add_struc_member(id,"outputIndexes",	0X48,	0x10000400,	-1,	48);
	mid = add_struc_member(id,"prevVolumes",	0X78,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"currVolumes",	0XD8,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"lastSampleAddr",	0X138,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("HardwareOpusSharedMemory");
	mid = add_struc_member(id,"unk0000",	0,	0x000400,	-1,	3968);
	mid = add_struc_member(id,"dspSendData",	0XF80,	0x20000400,	-1,	64);
	mid = add_struc_member(id,"dspReturnData",	0XFC0,	0x20000400,	-1,	64);
	set_struc_align(id,2);
	
	id = get_struc_id("OpusMailbox");
	mid = add_struc_member(id,"id",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"mbx",	0X4,	0x60000400,	get_struc_id("adsp_mbx_t"),	128);
	mid = add_struc_member(id,"unk_84",	0X84,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_88",	0X88,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("OpusMainStruct");
	mid = add_struc_member(id,"stackSize",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"isRunning",	0X8,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("silk_DecControlStruct");
	mid = add_struc_member(id,"nChannelsAPI",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nChannelsInternal",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"API_sampleRate",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"internalSampleRate",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"payloadSize_ms",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"prevPitchLag",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("OpusDecoder");
	mid = add_struc_member(id,"celt_dec_offset",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"silk_dec_offset",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channels",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Fs",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DecControl",	0X10,	0x60000400,	get_struc_id("silk_DecControlStruct"),	24);
	mid = add_struc_member(id,"decode_gain",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"arch",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"stream_channels",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bandwidth",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mode",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"prev_mode",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"frame_size",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"prev_redundancy",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"last_packet_duration",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rangeFinal",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"silkDecoder",	0X50,	0x000400,	-1,	8544);
	mid = add_struc_member(id,"celtDecoder",	0X21B0,	0x000400,	-1,	17860);
	set_struc_align(id,2);
	
	id = get_struc_id("HardwareOpusUnkStruct");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_04",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_05",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_08",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"opusDecoderPtr",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"opusDecoder",	0X14,	0x60000400,	get_struc_id("OpusDecoder"),	26484);
	set_struc_align(id,2);
	
	id = get_struc_id("mdct_lookup");
	mid = add_struc_member(id,"n",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"maxshift",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"kfft",	0X8,	0x25500400,	0XFFFFFFFF,	16,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"trig",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("PulseCache");
	mid = add_struc_member(id,"size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"index",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"bits",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"caps",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("OpusCustomMode");
	mid = add_struc_member(id,"Fs",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"overlap",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nbEBands",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"effEBands",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"preemph",	0X10,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"eBands",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"maxLM",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nbShortMdcts",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"shortMdctSize",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nbAllocVectors",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"allocVectors",	0X2C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"logN",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"window",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mdct",	0X38,	0x60000400,	get_struc_id("mdct_lookup"),	28);
	mid = add_struc_member(id,"cache",	0X54,	0x60000400,	get_struc_id("PulseCache"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("OpusDecodeObject");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"initialised",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_05",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"self",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"decoder",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"finalRange",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"opusDecoder",	0X14,	0x60000400,	get_struc_id("OpusDecoder"),	26484);
	set_struc_align(id,2);
	
	id = get_struc_id("ChannelLayout");
	mid = add_struc_member(id,"nb_channels",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nb_streams",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nb_coupled_streams",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mapping",	0XC,	0x000400,	-1,	256);
	set_struc_align(id,2);
	
	id = get_struc_id("OpusMSDecoder");
	mid = add_struc_member(id,"layout",	0,	0x60000400,	get_struc_id("ChannelLayout"),	268);
	mid = add_struc_member(id,"decoder",	0X10C,	0x60000400,	get_struc_id("OpusDecoder"),	26484);
	set_struc_align(id,2);
	
	id = get_struc_id("OpusMultiStreamDecodeObject");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"initialised",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_05",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"self",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"decoder",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"finalRange",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"opusDecoder",	0X14,	0x60000400,	get_struc_id("OpusMSDecoder"),	26752);
	set_struc_align(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
	id = Structures_1(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	MakeStruct	(0X80300000,	"adsp_shared_mem");
	make_array	(0X80300000,	0);
	set_name	(0X80300000,	"size");
	create_byte	(0X803031E4);
	make_array	(0X803031E4,	0X3E1C);
	update_extra_cmt		(0X80500000,	E_PREV + 0,	"; File Name   : F:\\Switch\\firmware_13.2.1.bin");
	update_extra_cmt		(0X80500000,	E_PREV + 1,	"; Format      : Binary file");
	update_extra_cmt		(0X80500000,	E_PREV + 2,	"; Base Address: 0000h Range: 0000h - 76DB8h Loaded length: 76DB8h");
	create_insn	(0X80500000);
	set_name	(0X80500000,	"start");
	create_insn	(0X80500004);
	set_name	(0X80500004,	"arm_undefined");
	create_insn	(0X80500008);
	set_name	(0X80500008,	"arm_syscall");
	create_insn	(0X8050000C);
	set_name	(0X8050000C,	"arm_prefetch_abort");
	create_insn	(0X80500010);
	set_name	(0X80500010,	"arm_data_abort");
	create_insn	(0X80500014);
	set_name	(0X80500014,	"arm_reserved");
	create_insn	(0X80500018);
	set_name	(0X80500018,	"j_arm_irq");
	create_insn	(0X8050001C);
	set_name	(0X8050001C,	"j_arm_fiq");
	create_insn	(0X80500020);
	set_name	(0X80500020,	"platform_reset");
	create_insn	(x=0X80500024);
	op_hex		(x,	1);
	create_insn	(x=0X80500028);
	op_hex		(x,	1);
	create_insn	(x=0X8050002C);
	op_hex		(x,	1);
	create_insn	(x=0X80500038);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500054);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500060);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500074);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8050007C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500084);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8050008C);
	create_insn	(x=0X80500090);
	op_hex		(x,	1);
	create_insn	(x=0X80500094);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500098);
	op_hex		(x,	1);
	create_insn	(x=0X805000A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805000A4);
	op_hex		(x,	1);
	create_insn	(x=0X805000B0);
	op_hex		(x,	1);
	create_insn	(x=0X805000BC);
	op_hex		(x,	1);
	create_insn	(x=0X805000C8);
	op_hex		(x,	1);
	create_insn	(x=0X805000D4);
	op_hex		(x,	1);
	create_insn	(x=0X805000E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805000F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805000F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805000FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500118);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050011C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500134);
	create_dword	(x=0X80500138);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8050013C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500140);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500144);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500148);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8050014C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500154);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80500158);
	create_insn	(x=0X8050015E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500164);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500170);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500174);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500178);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050017C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500182);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500186);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500192);
	create_insn	(x=0X80500198);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050019E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805001CC);
	create_insn	(x=0X805001D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805001FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500206);
	create_insn	(x=0X8050020C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500212);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050021E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500222);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500226);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050022A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500230);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500234);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500240);
	create_insn	(x=0X80500246);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050024C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500258);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050025C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500260);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500264);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050026A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050026E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050027A);
	create_insn	(x=0X80500280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500286);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500292);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500296);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050029A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050029E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805002B4);
	create_insn	(x=0X805002BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805002EE);
	create_insn	(x=0X805002F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805002FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500306);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050030A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050030E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500312);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500318);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050031C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500328);
	create_insn	(x=0X8050032E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500334);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500340);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500344);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500348);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050034C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500352);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500356);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500362);
	create_insn	(x=0X8050036E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500372);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500376);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050037A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500380);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500384);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500390);
	create_insn	(0X80500398);
	create_insn	(x=0X805003A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805003C6);
	create_insn	(x=0X805003D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805003F4);
	create_insn	(x=0X80500400);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500404);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500408);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050040C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500412);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500416);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500422);
	create_insn	(x=0X8050042E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500432);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500436);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050043A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500444);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500450);
	create_insn	(x=0X8050045C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500460);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500464);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500468);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050046E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500472);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050047E);
	create_insn	(x=0X8050048A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050048E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500492);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500496);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050049C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805004AC);
	create_insn	(x=0X805004B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805004DA);
	create_insn	(x=0X805004E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805004FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500508);
	create_insn	(x=0X80500514);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500518);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050051C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500520);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500526);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050052A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500536);
	create_insn	(x=0X80500542);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500546);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050054A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050054E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500554);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500558);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500564);
	create_insn	(x=0X80500570);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500574);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500578);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050057C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500582);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500586);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500592);
	create_insn	(x=0X8050059E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805005C0);
	create_insn	(x=0X805005CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805005E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805005F0);
	set_name	(0X805005F0,	"pure_virtual");
	create_insn	(x=0X805005FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500600);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500608);
	create_insn	(0X8050060C);
	create_insn	(0X80500610);
	set_name	(0X80500610,	"operator_delete");
	create_insn	(x=0X80500614);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500624);
	set_name	(0X80500624,	"SessionRegistry_Init");
	create_insn	(x=0X80500628);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050062C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500630);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500646,	"int",	0);
	create_insn	(x=0X8050064E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050065A,	"int",	0);
	create_insn	(0X8050066C);
	set_name	(0X8050066C,	"nullsub_10");
	create_insn	(0X8050066E);
	set_name	(0X8050066E,	"ShutdownSessionRegistry");
	create_insn	(x=0X80500672);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500682);
	create_insn	(x=0X80500688);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500698);
	create_insn	(x=0X805006A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805006B0);
	create_insn	(x=0X805006B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805006C6);
	create_insn	(x=0X805006CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805006DE);
	create_insn	(x=0X805006E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805006F4);
	set_name	(0X805006F4,	"SessionRegistry::SetSemaphore_Wrap");
	set_cmt	(0X805006F8,	"semaphore",	0);
	set_cmt	(0X805006FA,	"sessionType",	0);
	create_insn	(x=0X805006FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500704,	"registry",	0);
	create_insn	(0X8050070C);
	set_cmt	(0X80500710,	"numSamples",	0);
	set_cmt	(0X80500712,	"sessionType",	0);
	create_insn	(x=0X80500714);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050071C,	"registry",	0);
	create_insn	(0X80500724);
	set_name	(0X80500724,	"nullsub_17");
	create_insn	(0X80500726);
	set_name	(0X80500726,	"HardwareDevice_Open");
	set_cmt	(0X80500732,	"sessionType",	0);
	set_cmt	(0X80500734,	"hardwareDevice",	0);
	create_insn	(x=0X80500736);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050073E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500742);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500744);
	op_stkvar	(x,	1);
	set_cmt	(0X80500746,	"sessionRegistry",	0);
	create_insn	(x=0X80500748);
	op_stkvar	(x,	1);
	set_cmt	(0X8050074C,	"a5",	0);
	create_insn	(x=0X8050074C);
	op_stkvar	(x,	1);
	set_cmt	(0X80500750,	"sessionId",	0);
	set_cmt	(0X80500752,	"a7",	0);
	create_insn	(x=0X80500752);
	op_stkvar	(x,	1);
	create_insn	(0X80500760);
	set_name	(0X80500760,	"CloseAudioSession");
	create_insn	(x=0X80500766);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500776);
	create_insn	(x=0X8050077E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050078E);
	create_insn	(x=0X80500796);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805007A6);
	create_insn	(x=0X805007B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805007BA);
	op_stkvar	(x,	1);
	create_insn	(0X805007C8);
	create_insn	(x=0X805007D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805007DC);
	op_stkvar	(x,	1);
	create_insn	(0X805007EA);
	create_insn	(x=0X805007F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805007FE);
	create_insn	(0X80500800);
	set_cmt	(0X80500804,	"samples",	0);
	set_cmt	(0X80500806,	"a2",	0);
	create_insn	(x=0X80500808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500810,	"a1",	0);
	create_insn	(0X80500818);
	create_insn	(x=0X80500820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500830);
	set_name	(0X80500830,	"gMix_Main");
	create_insn	(x=0X80500836);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500844);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050084C,	"sessionRegistry",	0);
	create_insn	(0X8050085A);
	set_name	(0X8050085A,	"SetupSessionRegistry");
	create_insn	(x=0X80500864);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050086C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500874);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500880);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050088C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500896);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805008C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805008DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050096E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050097C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805009B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805009EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805009F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500A08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500A1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500A46);
	set_name	(0X80500A46,	"ADSP_SendDataFromGMix");
	set_cmt	(0X80500A5A,	"msgq",	0);
	set_cmt	(0X80500A6C,	"msgq",	0);
	set_cmt	(0X80500A6E,	"message",	0);
	set_cmt	(0X80500A7C,	"data",	0);
	set_cmt	(0X80500A82,	"mbx",	0);
	set_cmt	(0X80500A84,	"block",	0);
	set_cmt	(0X80500A86,	"timeout",	0);
	set_cmt	(0X80500A8E,	"mbx",	0);
	create_insn	(0X80500A9E);
	create_insn	(0X80500AA4);
	create_insn	(0X80500ABC);
	set_cmt	(0X80500AC6,	"period",	0);
	set_cmt	(0X80500AD2,	"arg",	0);
	create_insn	(x=0X80500AD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500ADA,	"timer",	0);
	set_cmt	(0X80500ADC,	"callback",	0);
	create_insn	(x=0X80500ADC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500B02);
	set_cmt	(0X80500B1C,	"timer",	0);
	create_insn	(0X80500B24);
	set_name	(0X80500B24,	"gMix_MainLoop");
	create_insn	(x=0X80500B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500B3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500B4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500B56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500B5A);
	op_stkvar	(x,	1);
	set_cmt	(0X80500B5C,	"objects",	0);
	set_cmt	(0X80500B5E,	"count",	0);
	set_cmt	(0X80500B60,	"signaled_object",	0);
	set_cmt	(0X80500B62,	"timeout",	0);
	set_cmt	(0X80500B66,	"wait_and",	0);
	create_insn	(x=0X80500B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500B76);
	op_stkvar	(x,	1);
	set_cmt	(0X80500B80,	"sessionRegistry",	0);
	set_cmt	(0X80500B88,	"registry",	0);
	create_insn	(0X80500B88);
	create_insn	(0X80500B90);
	set_name	(0X80500B90,	"gMix_ProcessMessage");
	create_insn	(x=0X80500BA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500BEC,	"msgq",	0);
	set_cmt	(0X80500BEE,	"message",	0);
	set_cmt	(0X80500BF8,	"a2",	0);
	set_cmt	(0X80500BFA,	"switch 19 cases",	0);
	set_cmt	(0X80500C00,	"switch jump",	0);
	set_cmt	(0X80500C04,	"jump table for switch statement",	0);
	create_byte	(0X80500C04);
	set_name	(0X80500C04,	"jpt_80500C00");
	create_byte	(0X80500C05);
	create_byte	(0X80500C06);
	create_byte	(0X80500C07);
	create_byte	(0X80500C08);
	create_byte	(0X80500C09);
	create_byte	(0X80500C0A);
	create_byte	(0X80500C0B);
	create_byte	(0X80500C0C);
	create_byte	(0X80500C0D);
	create_byte	(0X80500C0E);
	create_byte	(0X80500C0F);
	create_byte	(0X80500C10);
	create_byte	(0X80500C11);
	create_byte	(0X80500C12);
	create_byte	(0X80500C13);
	create_byte	(0X80500C14);
	create_byte	(0X80500C15);
	create_byte	(0X80500C16);
	set_cmt	(0X80500C18,	"jumptable 80500C00 case 0",	1);
	create_insn	(0X80500C18);
	create_insn	(0X80500C1E);
	set_cmt	(0X80500C30,	"jumptable 80500C00 case 14",	1);
	create_insn	(0X80500C30);
	set_cmt	(0X80500C34,	"sessionRegistry",	0);
	set_cmt	(0X80500C50,	"jumptable 80500C00 case 16",	1);
	create_insn	(0X80500C50);
	set_cmt	(0X80500C54,	"sessionRegistry",	0);
	set_cmt	(0X80500C60,	"jumptable 80500C00 case 4",	1);
	create_insn	(0X80500C60);
	set_cmt	(0X80500C64,	"registry",	0);
	set_cmt	(0X80500C6C,	"jumptable 80500C00 case 11",	1);
	create_insn	(0X80500C6C);
	set_cmt	(0X80500C70,	"sessionRegistry",	0);
	set_cmt	(0X80500C80,	"jumptable 80500C00 case 2",	1);
	create_insn	(0X80500C80);
	set_cmt	(0X80500C8E,	"jumptable 80500C00 case 3",	1);
	create_insn	(0X80500C8E);
	create_insn	(x=0X80500C9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500CA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500CB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500CBA,	"jumptable 80500C00 case 7",	1);
	create_insn	(0X80500CBA);
	set_cmt	(0X80500CC2,	"sessionRegistry",	0);
	set_cmt	(0X80500CC4,	"sessionId",	0);
	create_insn	(x=0X80500CD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500CDA);
	op_stkvar	(x,	1);
	set_cmt	(0X80500CE2,	"jumptable 80500C00 case 9",	1);
	create_insn	(0X80500CE2);
	set_cmt	(0X80500CE6,	"sessionRegistry",	0);
	set_cmt	(0X80500CF2,	"jumptable 80500C00 case 12",	1);
	create_insn	(0X80500CF2);
	set_cmt	(0X80500CF6,	"sessionRegistry",	0);
	set_cmt	(0X80500D06,	"jumptable 80500C00 case 15",	1);
	create_insn	(0X80500D06);
	set_cmt	(0X80500D0A,	"sessionRegistry",	0);
	set_cmt	(0X80500D16,	"jumptable 80500C00 case 1",	1);
	create_insn	(0X80500D16);
	set_cmt	(0X80500D24,	"jumptable 80500C00 case 5",	1);
	create_insn	(0X80500D24);
	set_cmt	(0X80500D2C,	"this",	0);
	set_cmt	(0X80500D36,	"jumptable 80500C00 case 6",	1);
	create_insn	(0X80500D36);
	set_cmt	(0X80500D3E,	"jumptable 80500C00 case 8",	1);
	create_insn	(0X80500D3E);
	set_cmt	(0X80500D42,	"sessionRegistry",	0);
	set_cmt	(0X80500D4E,	"jumptable 80500C00 case 10",	1);
	create_insn	(0X80500D4E);
	set_cmt	(0X80500D52,	"sessionRegistry",	0);
	set_cmt	(0X80500D60,	"jumptable 80500C00 case 13",	1);
	create_insn	(0X80500D60);
	set_cmt	(0X80500D64,	"sessionRegistry",	0);
	set_cmt	(0X80500D76,	"jumptable 80500C00 case 17",	1);
	create_insn	(0X80500D76);
	set_cmt	(0X80500D7A,	"sessionRegistry",	0);
	set_cmt	(0X80500D88,	"jumptable 80500C00 case 18",	1);
	create_insn	(0X80500D88);
	set_cmt	(0X80500D8C,	"sessionRegistry",	0);
	create_insn	(x=0X80500D9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500DA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500DAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500DB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500DC2,	"jumptable 80500C00 default case",	1);
	create_insn	(0X80500DC2);
	set_name	(0X80500DC2,	"def_80500C00");
	create_insn	(x=0X80500DC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500DD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500DDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500DE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500DE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500DEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500DF8);
	set_name	(0X80500DF8,	"gMix_InitialiseSessionRegistry");
	create_insn	(x=0X80500E30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500E60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500EA4,	"timer",	0);
	set_cmt	(0X80500EAE,	"value",	0);
	set_cmt	(0X80500EB0,	"sem",	0);
	set_cmt	(0X80500EBA,	"size",	0);
	set_cmt	(0X80500EC2,	"msgq",	0);
	set_cmt	(0X80500ED0,	"value",	0);
	set_cmt	(0X80500ED2,	"sem",	0);
	set_cmt	(0X80500EDE,	"size",	0);
	set_cmt	(0X80500EE4,	"msgq",	0);
	create_insn	(x=0X80500EF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500EF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500EFC,	"mbx_id",	0);
	create_insn	(x=0X80500EFC);
	op_stkvar	(x,	1);
	set_cmt	(0X80500F00,	"err_handler",	0);
	create_insn	(x=0X80500F00);
	op_stkvar	(x,	1);
	set_cmt	(0X80500F08,	"mbx",	0);
	set_cmt	(0X80500F0C,	"name",	0);
	set_cmt	(0X80500F0E,	"sem",	0);
	create_insn	(x=0X80500F10);
	op_stkvar	(x,	1);
	set_cmt	(0X80500F14,	"context",	0);
	create_insn	(x=0X80500F14);
	op_stkvar	(x,	1);
	set_cmt	(0X80500F24,	"volume",	0);
	set_cmt	(0X80500F2E,	"this",	0);
	set_cmt	(0X80500F32,	"a3",	0);
	create_insn	(x=0X80500F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F38);
	op_stkvar	(x,	1);
	set_cmt	(0X80500F44,	"volume",	0);
	set_cmt	(0X80500F46,	"this",	0);
	set_cmt	(0X80500F4A,	"a3",	0);
	create_insn	(x=0X80500F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500FAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500FAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501020);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050104C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050106C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050106E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050107A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805010E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805010F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805010FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501102);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501108);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050111C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050111E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501124);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501126);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050112C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501138);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501146);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501158);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501190);
	op_stkvar	(x,	1);
	set_cmt	(0X80501198,	"result",	0);
	set_cmt	(0X805011BC,	"a2",	0);
	set_cmt	(0X805011C8,	"vaddr",	0);
	set_cmt	(0X805011CA,	"paddr",	0);
	set_cmt	(0X805011CC,	"size",	0);
	set_cmt	(0X805011D0,	"flags",	0);
	create_insn	(x=0X805011D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805011E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805011F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501204);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501208);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050120A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050120C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501214);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501216);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050121C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050121E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501220);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050122E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501230);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050123C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501240);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501244);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501258);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501296);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501330);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050133E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501348);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501350);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501356);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050136C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501370);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501372);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501374);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050137C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050137E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501384);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501386);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501388);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501396);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501398);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050141A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050141C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501430);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501498);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805014BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805014CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501500);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501506);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050151E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501570);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501572);
	op_stkvar	(x,	1);
	create_insn	(x=0X805015BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501604);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501608);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501618);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501624);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050162C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501660);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501664);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050166A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501682);
	op_stkvar	(x,	1);
	create_insn	(x=0X805016DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805016DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501706);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501766);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050176A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050177A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501786);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050178E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501794);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050179E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805017A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805017A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805017A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805017CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050180C);
	op_hex		(x,	1);
	create_insn	(x=0X80501824);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501876);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501880);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050188E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050189C);
	op_stkvar	(x,	1);
	set_cmt	(0X80501942,	"result",	0);
	set_cmt	(0X80501944,	"a2",	0);
	set_cmt	(0X8050194C,	"vaddr",	0);
	set_cmt	(0X8050194E,	"paddr",	0);
	set_cmt	(0X80501950,	"size",	0);
	set_cmt	(0X80501954,	"flags",	0);
	create_insn	(x=0X8050195C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501962);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050196A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050196C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501978);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501980);
	op_stkvar	(x,	1);
	create_insn	(x=0X805019C8);
	op_hex		(x,	1);
	create_insn	(x=0X80501A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501A3A);
	op_stkvar	(x,	1);
	set_cmt	(0X80501A3C,	"message",	0);
	create_insn	(x=0X80501A3C);
	op_stkvar	(x,	1);
	set_cmt	(0X80501A3E,	"msgq",	0);
	create_insn	(0X80501A54);
	create_insn	(x=0X80501A58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501A5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501A60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501A64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501A6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501A70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501A7A);
	set_name	(0X80501A7A,	"SessionRegistryMailboxHandler");
	create_insn	(0X80501AA6);
	create_insn	(x=0X80501AB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501ACA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501AD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501B02);
	set_name	(0X80501B02,	"SessionRegistry_Shutdown");
	set_cmt	(0X80501B20,	"timer",	0);
	set_cmt	(0X80501B2A,	"mbx",	0);
	set_cmt	(0X80501B36,	"sem",	0);
	set_cmt	(0X80501B42,	"sem",	0);
	create_insn	(0X80501B4A);
	create_insn	(0X80501B56);
	set_cmt	(0X80501B5E,	"_DWORD *",	0);
	create_insn	(x=0X80501B68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501B82);
	create_insn	(x=0X80501B88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501B90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501B9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501BA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501BAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501BBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501BC6);
	set_name	(0X80501BC6,	"SessionRegistry::SetSemaphore");
	create_insn	(0X80501BE0);
	create_insn	(0X80501BF4);
	create_insn	(0X80501BFA);
	set_cmt	(0X80501C06,	"sessionType",	0);
	set_cmt	(0X80501C08,	"sessionId",	0);
	create_insn	(x=0X80501C12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501C1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501C28);
	op_stkvar	(x,	1);
	create_insn	(0X80501C38);
	set_name	(0X80501C38,	"GetSession");
	set_cmt	(0X80501C3E,	"switch 8 cases",	0);
	set_cmt	(0X80501C46,	"switch jump",	0);
	set_cmt	(0X80501C4A,	"jump table for switch statement",	0);
	create_byte	(0X80501C4A);
	set_name	(0X80501C4A,	"jpt_80501C46");
	create_byte	(0X80501C4B);
	create_byte	(0X80501C4C);
	create_byte	(0X80501C4D);
	create_byte	(0X80501C4E);
	create_byte	(0X80501C4F);
	create_byte	(0X80501C50);
	create_byte	(0X80501C51);
	set_cmt	(0X80501C52,	"jumptable 80501C46 case 1",	1);
	create_insn	(0X80501C52);
	set_cmt	(0X80501C68,	"jumptable 80501C46 case 6",	1);
	create_insn	(0X80501C68);
	set_cmt	(0X80501C7E,	"jumptable 80501C46 case 2",	1);
	create_insn	(0X80501C7E);
	set_cmt	(0X80501C92,	"jumptable 80501C46 case 5",	1);
	create_insn	(0X80501C92);
	set_cmt	(0X80501CA8,	"jumptable 80501C46 case 8",	1);
	create_insn	(0X80501CA8);
	set_cmt	(0X80501CB2,	"jumptable 80501C46 case 7",	1);
	create_insn	(0X80501CB2);
	set_cmt	(0X80501CC6,	"jumptable 80501C46 default case, cases 3,4",	1);
	create_insn	(0X80501CC6);
	set_name	(0X80501CC6,	"def_80501C46");
	create_insn	(x=0X80501CCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501CCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501CD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501CD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501CDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501CDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501CE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501CEE);
	create_insn	(x=0X80501CF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501CF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501CFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501CFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501D04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501D16);
	create_insn	(x=0X80501D1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501D2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501D3E);
	create_insn	(x=0X80501D42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501D54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501D66);
	create_insn	(x=0X80501D6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D72);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501D8E);
	set_name	(0X80501D8E,	"SessionRegistry_CloseSession");
	create_insn	(0X80501D9C);
	create_insn	(0X80501DAC);
	create_insn	(0X80501DBC);
	create_insn	(x=0X80501DC8);
	op_stkvar	(x,	1);
	create_insn	(0X80501DD2);
	create_insn	(x=0X80501DDE);
	op_stkvar	(x,	1);
	create_insn	(0X80501DE8);
	set_cmt	(0X80501DF0,	"_DWORD *",	0);
	create_insn	(0X80501DFA);
	create_insn	(0X80501E06);
	set_cmt	(0X80501E12,	"sessionType",	0);
	set_cmt	(0X80501E14,	"sessionId",	0);
	create_insn	(x=0X80501E1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E34);
	op_stkvar	(x,	1);
	create_insn	(0X80501E44);
	create_insn	(0X80501E58);
	set_name	(0X80501E58,	"RegisterCloseTimeoutHandler");
	create_insn	(x=0X80501E5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80501E6E,	"a2",	0);
	create_insn	(x=0X80501E7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501E98);
	set_name	(0X80501E98,	"nullsub_14");
	create_insn	(0X80501E9A);
	create_insn	(0X80501EA4);
	set_name	(0X80501EA4,	"nullsub_15");
	create_insn	(0X80501EA6);
	create_insn	(0X80501EB0);
	create_insn	(x=0X80501EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501F1A);
	op_stkvar	(x,	1);
	create_insn	(0X80501F66);
	create_insn	(0X80501F68);
	create_insn	(x=0X80501F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501F76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501FB4);
	op_stkvar	(x,	1);
	create_insn	(0X80502018);
	set_name	(0X80502018,	"Write_2ChSamples");
	create_insn	(x=0X8050201A);
	op_stkvar	(x,	1);
	create_insn	(0X805020B4);
	set_name	(0X805020B4,	"ProcessOutDevice");
	create_insn	(x=0X805020CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805020D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805020D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805020EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805020F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805020FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502108);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502116);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050211A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502126);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502136);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050213E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502144);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502154);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050215C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502164);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502168);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050216A);
	op_stkvar	(x,	1);
	set_cmt	(0X80502182,	"a1",	0);
	create_insn	(x=0X80502196);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021E0);
	op_stkvar	(x,	1);
	set_cmt	(0X805021EE,	"sessionType",	0);
	set_cmt	(0X805021F0,	"session",	0);
	set_cmt	(0X805021F4,	"registry",	0);
	create_insn	(x=0X805021F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502216);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502224);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502242);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050227C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050227E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502282);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050228C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050228E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502290);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502294);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502298);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022C0);
	op_stkvar	(x,	1);
	set_cmt	(0X805022DC,	"sessionType",	0);
	set_cmt	(0X805022E2,	"registry",	0);
	set_cmt	(0X805022E4,	"session",	0);
	create_insn	(x=0X805022E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502308);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502316);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502334);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050236E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502370);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502374);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050237E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502380);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502382);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502386);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050238A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502394);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502396);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050239E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050241C);
	op_stkvar	(x,	1);
	create_insn	(0X8050242A);
	create_insn	(x=0X80502436);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050243C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502454);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502466);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050246A,	"a2",	0);
	create_insn	(x=0X8050246E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80502472,	"a3",	0);
	set_cmt	(0X8050247A,	"a1",	0);
	create_insn	(0X8050248A);
	create_insn	(x=0X80502490);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502494);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502498);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050249C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805024A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805024A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X805024B4);
	create_float	(0X805024B8);
	create_insn	(0X805024BC);
	set_name	(0X805024BC,	"NearVoiceGameRecordSession::IsActive");
	set_cmt	(0X805024CE,	"int",	0);
	create_insn	(x=0X805024D4);
	op_hex		(x,	1);
	create_insn	(0X805024DA);
	create_insn	(0X805024E0);
	create_insn	(0X805024EC);
	create_insn	(0X80502536);
	create_insn	(0X80502546);
	create_insn	(0X8050255C);
	create_insn	(0X80502566);
	create_insn	(0X80502598);
	create_insn	(0X805025A8);
	create_insn	(0X805025BE);
	create_insn	(0X805025F8);
	create_insn	(0X80502604);
	create_insn	(0X8050261E);
	set_name	(0X8050261E,	"ReadSamples2");
	create_insn	(x=0X8050262C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502632);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502642);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502644);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502646);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502648);
	op_stkvar	(x,	1);
	set_cmt	(0X80502654,	"int",	0);
	create_insn	(x=0X80502666);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502672);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050268C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050268E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502692);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050269C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805026AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805026B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805026BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805026C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502700);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502708);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502714);
	op_stkvar	(x,	1);
	create_insn	(0X80502720);
	create_insn	(x=0X8050272A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502758);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050275C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502764);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050276A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502772);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502774);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502778);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050277A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050279E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027AA);
	op_stkvar	(x,	1);
	create_insn	(0X805027C0);
	set_name	(0X805027C0,	"ReadSamples");
	create_insn	(x=0X805027D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027E0);
	op_stkvar	(x,	1);
	set_cmt	(0X805027EC,	"int",	0);
	create_insn	(x=0X80502800);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502810);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050281A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050282A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502844);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502870);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502872);
	op_stkvar	(x,	1);
	create_insn	(0X8050289C);
	create_insn	(x=0X805028CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502902);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502904);
	op_stkvar	(x,	1);
	create_insn	(0X80502918);
	set_name	(0X80502918,	"WriteSamples");
	create_insn	(x=0X80502938);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050293E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502940);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050294E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502964);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050296E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502972);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502974);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502976);
	op_stkvar	(x,	1);
	set_cmt	(0X80502994,	"int",	0);
	set_cmt	(0X80502996,	"int",	0);
	create_insn	(x=0X805029AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A4C);
	op_stkvar	(x,	1);
	create_insn	(0X80502A58);
	create_insn	(x=0X80502A96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B38);
	op_stkvar	(x,	1);
	create_insn	(0X80502B5C);
	create_insn	(x=0X80502B76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80502C8E,	"a2",	0);
	create_insn	(x=0X80502C92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80502C96,	"a3",	0);
	set_cmt	(0X80502C9E,	"a1",	0);
	create_insn	(0X80502CAE);
	set_cmt	(0X80502CE8,	"a1",	0);
	set_cmt	(0X80502CF4,	"a2",	0);
	set_cmt	(0X80502CFA,	"a3",	0);
	set_cmt	(0X80502D04,	"a2",	0);
	set_cmt	(0X80502D12,	"a1",	0);
	set_cmt	(0X80502D16,	"a3",	0);
	create_insn	(0X80502D22);
	set_cmt	(0X80502D26,	"a2",	0);
	set_cmt	(0X80502D28,	"a3",	0);
	create_insn	(0X80502D50);
	set_name	(0X80502D50,	"Maybe_RecordSamples");
	create_insn	(x=0X80502D7E);
	op_stkvar	(x,	1);
	set_cmt	(0X80502DB4,	"int",	0);
	create_insn	(x=0X80502DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502DF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80502DFA,	"a2",	0);
	create_insn	(x=0X80502DFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80502E02,	"a3",	0);
	set_cmt	(0X80502E0A,	"a1",	0);
	create_insn	(0X80502E1A);
	create_insn	(0X80502E5C);
	create_insn	(0X80502EDA);
	set_name	(0X80502EDA,	"gMix_SinkSamples");
	create_insn	(x=0X80502EFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502EFE);
	op_stkvar	(x,	1);
	create_insn	(0X80502F1C);
	create_insn	(0X80502F32);
	set_cmt	(0X80502F3C,	"registry",	0);
	set_cmt	(0X80502F3E,	"sessionType",	0);
	set_cmt	(0X80502F40,	"numSamples",	0);
	create_insn	(x=0X80502F48);
	op_stkvar	(x,	1);
	create_insn	(0X80502F6E);
	create_insn	(x=0X80502F80);
	op_stkvar	(x,	1);
	create_insn	(0X80502FC8);
	create_insn	(x=0X80502FD4);
	op_stkvar	(x,	1);
	create_insn	(0X80502FD8);
	set_cmt	(0X80502FE4,	"sessionId",	0);
	create_insn	(x=0X80502FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503002);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050300A);
	op_stkvar	(x,	1);
	set_cmt	(0X80503020,	"int",	0);
	set_cmt	(0X80503028,	"int",	0);
	set_cmt	(0X8050303A,	"a1",	0);
	set_cmt	(0X8050303C,	"a2",	0);
	set_cmt	(0X8050303E,	"samples",	0);
	create_insn	(x=0X8050304E);
	op_stkvar	(x,	1);
	create_insn	(0X80503054);
	create_insn	(0X805030A8);
	create_insn	(0X805030AE);
	create_insn	(x=0X805030B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805030C0);
	op_stkvar	(x,	1);
	create_insn	(0X805030D0);
	set_name	(0X805030D0,	"SessionBase::Close");
	create_insn	(0X805030EC);
	create_insn	(x=0X805030F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805030F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805030FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805030FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503108);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503114);
	set_name	(0X80503114,	"SessionBase::PrepareSamples");
	create_insn	(x=0X8050311E);
	op_hex		(x,	1);
	create_insn	(0X80503130);
	set_cmt	(0X80503144,	"addr",	0);
	create_insn	(x=0X80503144);
	op_hex		(x,	1);
	create_insn	(x=0X80503148);
	op_hex		(x,	1);
	set_cmt	(0X80503150,	"len",	0);
	create_insn	(x=0X80503150);
	op_hex		(x,	1);
	create_insn	(0X8050315C);
	create_insn	(x=0X80503162);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503166);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050316A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050316E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503174);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503178);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503184);
	set_name	(0X80503184,	"SessionBase::Unk4C");
	create_insn	(0X80503188);
	set_name	(0X80503188,	"SessionBase::Unk44");
	set_cmt	(0X8050318C,	"_DWORD *",	0);
	create_insn	(0X80503194);
	set_name	(0X80503194,	"SessionBase::Unk48");
	set_cmt	(0X80503198,	"_DWORD *",	0);
	create_insn	(0X805031A0);
	set_name	(0X805031A0,	"SessionBase::Suspend");
	create_insn	(0X805031A8);
	set_name	(0X805031A8,	"SessionBase::Resume");
	create_insn	(0X805031BC);
	create_insn	(x=0X805031C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805031C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805031CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805031CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805031D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805031D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805031E4);
	set_name	(0X805031E4,	"SessionBase::GetRingBuffer");
	create_insn	(0X805031E8);
	set_name	(0X805031E8,	"SessionBase::Unk04");
	create_insn	(0X805031EC);
	set_name	(0X805031EC,	"SessionBase::GetRingBufferSize");
	create_insn	(0X805031F0);
	set_name	(0X805031F0,	"SessionBase::GetReadPosition");
	create_insn	(0X805031F4);
	set_name	(0X805031F4,	"SessionBase::GetWritePosition");
	create_insn	(0X805031F8);
	set_name	(0X805031F8,	"SessionBase::Unk14");
	create_insn	(0X805031FE);
	set_name	(0X805031FE,	"SessionBase::SetSamplesProcessed");
	create_insn	(x=0X80503204);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050320A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503216);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050321A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050321E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503222);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050322C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503238);
	set_name	(0X80503238,	"SessionBase::GetSharedBufferPosition");
	create_insn	(x=0X80503244);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503248);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050324C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503250);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503256);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050325A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503266);
	set_name	(0X80503266,	"SessionBase::SetSharedBufferPosition");
	create_insn	(x=0X8050326C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503272);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050327E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503282);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503286);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050328A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503290);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503294);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805032A0);
	set_name	(0X805032A0,	"SessionBase::AppendBuffer");
	create_insn	(x=0X805032AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805032CE);
	set_name	(0X805032CE,	"SessionBase::GetBuffersProcessed");
	create_insn	(x=0X805032DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805032F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805032FC);
	set_name	(0X805032FC,	"SessionBase::AttachWorkBuffer");
	create_insn	(x=0X80503302);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503308);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503314);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503318);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050331C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503320);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503326);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050332A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503336);
	set_name	(0X80503336,	"SessionBase::Open");
	create_insn	(x=0X80503342);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503346);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050334A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050334E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503354);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503358);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503364);
	set_name	(0X80503364,	"SessionBase::Unk5C");
	create_insn	(x=0X8050336C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503376);
	set_name	(0X80503376,	"SessionBase::Unk68");
	create_insn	(0X8050337A);
	set_name	(0X8050337A,	"AudioRenderSession::Open");
	create_insn	(x=0X80503396);
	op_stkvar	(x,	1);
	create_insn	(x=0X805033B6);
	op_stkvar	(x,	1);
	set_cmt	(0X805033BE,	"int",	0);
	set_cmt	(0X805033C2,	"int",	0);
	set_cmt	(0X805033D0,	"this",	0);
	set_cmt	(0X805033D4,	"volume",	0);
	set_cmt	(0X805033D8,	"a3",	0);
	set_cmt	(0X805033DE,	"this",	0);
	set_cmt	(0X805033E2,	"volume",	0);
	set_cmt	(0X805033E6,	"a3",	0);
	create_insn	(0X805033FA);
	create_insn	(x=0X80503400);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503404);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503408);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050340C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503412);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503416);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503422);
	set_name	(0X80503422,	"AudioRenderSession::Unk30");
	create_insn	(0X8050342A);
	set_name	(0X8050342A,	"AudioRenderSession::Unk34");
	create_insn	(0X80503432);
	set_name	(0X80503432,	"AudioRenderSession::GetBufferDeviceAddress");
	create_insn	(x=0X8050343E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503442);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503446);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050344A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503450);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503454);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503462);
	set_name	(0X80503462,	"AudioRenderSession::SetWritePosition");
	create_insn	(0X80503464);
	set_name	(0X80503464,	"AudioRenderSession::FlushBuffers");
	create_insn	(x=0X80503470);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503474);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503478);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050347C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503482);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503486);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503494);
	set_name	(0X80503494,	"AudioRenderSession::Unk64");
	create_insn	(0X805034BA);
	set_name	(0X805034BA,	"AudioRenderSession::SetReadPosition");
	create_insn	(0X805034D0);
	set_name	(0X805034D0,	"AudioOutSession::Open");
	create_insn	(x=0X805034E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805034F2);
	op_stkvar	(x,	1);
	set_cmt	(0X8050352C,	"int",	0);
	set_cmt	(0X8050352E,	"int",	0);
	set_cmt	(0X8050353A,	"this",	0);
	set_cmt	(0X8050353E,	"volume",	0);
	set_cmt	(0X80503542,	"a3",	0);
	set_cmt	(0X80503548,	"this",	0);
	set_cmt	(0X8050354C,	"volume",	0);
	set_cmt	(0X80503550,	"a3",	0);
	create_insn	(0X8050357C);
	create_insn	(x=0X80503582);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503586);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050358A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050358E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503594);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503598);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805035A4);
	set_name	(0X805035A4,	"AudioOutSession::Close");
	set_cmt	(0X805035AA,	"a2",	0);
	set_cmt	(0X805035B2,	"readPosition",	0);
	set_cmt	(0X805035B4,	"this",	0);
	set_cmt	(0X805035C0,	"this",	0);
	create_insn	(0X805035C0);
	create_insn	(0X805035C8);
	set_name	(0X805035C8,	"AudioOutSession::SetReadPosition");
	set_cmt	(0X805035E8,	"a2",	0);
	set_cmt	(0X805035EA,	"result",	0);
	create_insn	(0X80503610);
	create_insn	(x=0X80503618);
	op_hex		(x,	1);
	set_cmt	(0X8050361C,	"int",	0);
	set_cmt	(0X80503638,	"int",	0);
	set_cmt	(0X8050365E,	"a2",	0);
	set_cmt	(0X80503662,	"result",	0);
	create_insn	(x=0X8050367C);
	op_hex		(x,	1);
	set_cmt	(0X80503680,	"int",	0);
	set_cmt	(0X80503698,	"int",	0);
	create_insn	(0X805036C4);
	set_name	(0X805036C4,	"AudioOutSession::FlushBuffers");
	create_insn	(0X805036CE);
	set_name	(0X805036CE,	"AudioOutSession::AppendBuffer");
	create_insn	(x=0X805036DC);
	op_stkvar	(x,	1);
	set_cmt	(0X805036E2,	"unsigned int",	0);
	set_cmt	(0X805036E4,	"unsigned int",	0);
	create_insn	(x=0X805036EE);
	op_stkvar	(x,	1);
	set_cmt	(0X805036FA,	"vaddr",	0);
	set_cmt	(0X805036FE,	"flags",	0);
	set_cmt	(0X8050370A,	"paddr",	0);
	set_cmt	(0X8050370C,	"size",	0);
	create_insn	(x=0X80503718);
	op_hex		(x,	1);
	set_cmt	(0X8050373E,	"int",	0);
	set_cmt	(0X80503748,	"int",	0);
	create_insn	(0X80503764);
	create_insn	(x=0X80503768);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050376C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503770);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503774);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050377A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050377E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050378A);
	set_name	(0X8050378A,	"AudioOutSession::Unk30");
	create_insn	(0X80503792);
	set_name	(0X80503792,	"AudioOutSession::Unk34");
	create_insn	(0X8050379A);
	set_name	(0X8050379A,	"AudioOutSession::GetBufferDeviceAddress");
	create_insn	(x=0X805037A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805037CA);
	set_name	(0X805037CA,	"AudioOutSession::SetWritePosition");
	create_insn	(x=0X805037D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805037EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805037FA);
	set_name	(0X805037FA,	"AudioOutSession::ShouldAdvance_Maybe");
	create_insn	(0X80503806);
	create_insn	(0X80503812);
	set_name	(0X80503812,	"AudioOutSession::Unk64");
	create_insn	(0X8050382A);
	set_name	(0X8050382A,	"NearVoiceGameRecordSession::Open");
	create_insn	(x=0X8050384A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503850);
	op_stkvar	(x,	1);
	set_cmt	(0X80503880,	"int",	0);
	set_cmt	(0X80503884,	"int",	0);
	set_cmt	(0X8050388E,	"this",	0);
	set_cmt	(0X80503892,	"volume",	0);
	set_cmt	(0X80503896,	"a3",	0);
	set_cmt	(0X8050389C,	"this",	0);
	set_cmt	(0X805038A0,	"volume",	0);
	set_cmt	(0X805038A4,	"a3",	0);
	create_insn	(0X805038D4);
	create_insn	(x=0X805038D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805038DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805038E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805038E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805038E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805038EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805038EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805038FA);
	create_insn	(x=0X805038FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503902);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503906);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050390A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503910);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503914);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503920);
	set_name	(0X80503920,	"NearVoiceGameRecordSession::Close");
	set_cmt	(0X8050392E,	"unsigned int",	0);
	set_cmt	(0X80503930,	"int",	0);
	create_insn	(0X8050393C);
	set_cmt	(0X80503954,	"this",	0);
	create_insn	(0X80503968);
	set_name	(0X80503968,	"NearVoiceGameRecordSession::SetWritePosition");
	set_cmt	(0X80503978,	"a1",	0);
	create_insn	(0X8050398E);
	set_cmt	(0X805039A2,	"a2",	0);
	set_cmt	(0X805039A6,	"result",	0);
	create_insn	(x=0X805039BE);
	op_hex		(x,	1);
	set_cmt	(0X805039C2,	"int",	0);
	set_cmt	(0X805039D8,	"int",	0);
	create_insn	(0X805039EA);
	create_insn	(0X805039F8);
	set_name	(0X805039F8,	"NearVoiceGameRecordSession::SetSharedBufferPosition");
	create_insn	(0X80503A00);
	set_name	(0X80503A00,	"NearVoiceGameRecordSession::AppendBuffer");
	create_insn	(x=0X80503A0E);
	op_stkvar	(x,	1);
	set_cmt	(0X80503A14,	"unsigned int",	0);
	set_cmt	(0X80503A16,	"unsigned int",	0);
	create_insn	(x=0X80503A20);
	op_stkvar	(x,	1);
	set_cmt	(0X80503A2C,	"vaddr",	0);
	set_cmt	(0X80503A30,	"size",	0);
	set_cmt	(0X80503A34,	"paddr",	0);
	set_cmt	(0X80503A36,	"flags",	0);
	create_insn	(x=0X80503A42);
	op_hex		(x,	1);
	set_cmt	(0X80503A68,	"int",	0);
	set_cmt	(0X80503A72,	"int",	0);
	create_insn	(0X80503A8E);
	create_insn	(x=0X80503A92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503A96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503A9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503A9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503AA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503AA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503AB4);
	set_name	(0X80503AB4,	"NearVoiceGameRecordSession::Unk30");
	create_insn	(0X80503AC4);
	set_name	(0X80503AC4,	"NearVoiceGameRecordSession::Unk34");
	create_insn	(0X80503AD4);
	set_name	(0X80503AD4,	"NearVoiceGameRecordSession::AttachWorkbuffer");
	set_cmt	(0X80503AE2,	"vaddr",	0);
	set_cmt	(0X80503AE4,	"flags",	0);
	set_cmt	(0X80503AF0,	"addr",	0);
	set_cmt	(0X80503AF2,	"len",	0);
	set_cmt	(0X80503AF8,	"size",	0);
	create_insn	(x=0X80503AF8);
	op_stkvar	(x,	1);
	set_cmt	(0X80503AFA,	"vaddr",	0);
	set_cmt	(0X80503AFC,	"paddr",	0);
	set_cmt	(0X80503AFE,	"flags",	0);
	create_insn	(x=0X80503B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503B18);
	op_stkvar	(x,	1);
	create_insn	(0X80503B34);
	set_name	(0X80503B34,	"NearVoiceGameRecordSession::GetSharedBufferPosition");
	create_insn	(0X80503B3C);
	set_name	(0X80503B3C,	"NearVoiceGameRecordSession::GetRingBuffer");
	create_insn	(0X80503B4C);
	set_name	(0X80503B4C,	"NearVoiceGameRecordSession::GetBufferDeviceAddress");
	create_insn	(x=0X80503B58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503B5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503B60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503B64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503B6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503B6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503B7C);
	set_name	(0X80503B7C,	"NearVoiceGameRecordSession::Unk10");
	create_insn	(0X80503B8C);
	set_name	(0X80503B8C,	"NearVoiceGameRecordSession::FlushBuffers");
	create_insn	(x=0X80503B98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503B9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503BA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503BA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503BAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503BAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503BBC);
	set_name	(0X80503BBC,	"NearVoiceGameRecordSession::PrepareSamples");
	create_insn	(0X80503BCE);
	create_insn	(0X80503BD4);
	set_name	(0X80503BD4,	"NearVoiceGameRecordSession::Unk64");
	create_insn	(0X80503BEC);
	set_name	(0X80503BEC,	"NearVoiceGameRecordSession::Unk68");
	create_insn	(0X80503BFC);
	set_name	(0X80503BFC,	"NearVoiceGameRecordSession::SetReadPosition");
	create_insn	(x=0X80503C08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503C0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503C10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503C14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503C1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503C1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503C30);
	create_insn	(x=0X80503C3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80503C60,	"int",	0);
	set_cmt	(0X80503C6E,	"int",	0);
	set_cmt	(0X80503C76,	"_DWORD *",	0);
	set_cmt	(0X80503C7A,	"int",	0);
	set_cmt	(0X80503C7E,	"unsigned int",	0);
	set_cmt	(0X80503C84,	"_DWORD *",	0);
	set_cmt	(0X80503C88,	"int",	0);
	set_cmt	(0X80503C8C,	"unsigned int",	0);
	create_insn	(0X80503CB0);
	create_insn	(0X80503CC0);
	create_insn	(x=0X80503CCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503CD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503CE0);
	create_insn	(x=0X80503CF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503CF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503D0C);
	create_insn	(0X80503D20);
	create_insn	(x=0X80503D2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503D50);
	create_insn	(0X80503D6C);
	create_insn	(x=0X80503D78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503D8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503DA0);
	create_insn	(x=0X80503DAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80503DD0,	"int",	0);
	set_cmt	(0X80503DDE,	"int",	0);
	set_cmt	(0X80503DE6,	"_DWORD *",	0);
	set_cmt	(0X80503DEA,	"int",	0);
	set_cmt	(0X80503DEE,	"unsigned int",	0);
	set_cmt	(0X80503DF4,	"_DWORD *",	0);
	set_cmt	(0X80503DF8,	"int",	0);
	set_cmt	(0X80503DFC,	"unsigned int",	0);
	create_insn	(0X80503E20);
	create_insn	(0X80503E30);
	create_insn	(x=0X80503E3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503E44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503E50);
	create_insn	(x=0X80503E60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503E66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503E7C);
	create_insn	(x=0X80503E88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503E8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503E90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503E94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503E9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503E9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503EAC);
	create_insn	(x=0X80503EB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503EBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503EC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503ECA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503ECE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80503EDC);
	create_insn	(0X80503F02);
	create_insn	(0X80503F18);
	set_cmt	(0X80503F68,	"_DWORD *",	0);
	set_cmt	(0X80503F6C,	"int",	0);
	set_cmt	(0X80503F70,	"unsigned int",	0);
	set_cmt	(0X80503F82,	"_DWORD *",	0);
	set_cmt	(0X80503F86,	"int",	0);
	set_cmt	(0X80503F8A,	"unsigned int",	0);
	create_insn	(0X80503F9C);
	create_insn	(0X80503FB2);
	create_insn	(0X80503FBA);
	create_insn	(0X80503FD6);
	create_insn	(x=0X80503FE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503FE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503FEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503FEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503FF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80503FF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504006);
	create_insn	(x=0X80504012);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504016);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050401A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050401E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504024);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504028);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504036);
	create_insn	(0X8050405C);
	create_insn	(x=0X80504068);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050406C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504070);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504074);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050407A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050407E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050408C);
	set_cmt	(0X8050409C,	"s64",	0);
	set_cmt	(0X805040A0,	"s64",	0);
	set_cmt	(0X805040A8,	"unsigned int",	0);
	create_insn	(0X805040D8);
	set_name	(0X805040D8,	"UnkSessionStruct_MaybeGetVolume");
	create_insn	(0X805040DC);
	create_insn	(0X80504100);
	set_cmt	(0X80504104,	"int",	0);
	set_cmt	(0X8050410A,	"int",	0);
	set_cmt	(0X8050411A,	"int",	0);
	set_cmt	(0X80504122,	"int",	0);
	create_insn	(x=0X80504128);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504130,	"int",	0);
	set_cmt	(0X80504138,	"int",	0);
	set_cmt	(0X8050413E,	"int",	0);
	create_insn	(0X8050414E);
	set_cmt	(0X80504152,	"int",	0);
	set_cmt	(0X80504154,	"int",	0);
	create_insn	(x=0X8050415A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050416A,	"int",	0);
	set_cmt	(0X80504170,	"int",	0);
	create_insn	(0X8050419C);
	create_insn	(0X805041BE);
	set_name	(0X805041BE,	"NearVoiceGameRecord_UnkStruct_Initialise");
	create_insn	(x=0X805041C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805041D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805041DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805041DE);
	op_stkvar	(x,	1);
	set_cmt	(0X805041E6,	"int",	0);
	set_cmt	(0X805041F4,	"int",	0);
	set_cmt	(0X80504202,	"this",	0);
	create_insn	(0X80504214);
	create_insn	(x=0X80504218);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050421C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504220);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504224);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504228);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050422A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050422E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050423A);
	create_insn	(x=0X8050423E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504242);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504246);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050424A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504250);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504254);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504260);
	set_name	(0X80504260,	"PrepareNewBuffer");
	create_insn	(x=0X80504296);
	op_hex		(x,	1);
	set_cmt	(0X805042B0,	"int",	0);
	set_cmt	(0X805042C2,	"int",	0);
	set_cmt	(0X805042D6,	"addr",	0);
	set_cmt	(0X805042D8,	"len",	0);
	create_insn	(0X805042E6);
	create_insn	(x=0X805042EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805042EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805042F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805042F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805042FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805042FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504300);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050430C);
	create_insn	(x=0X80504310);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504314);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504318);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050431C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504320);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504322);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504326);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504332);
	create_insn	(x=0X80504336);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050433A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050433E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504342);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504348);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050434C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504358);
	create_insn	(0X80504380);
	set_name	(0X80504380,	"nullsub_11");
	create_insn	(0X80504382);
	set_name	(0X80504382,	"SetPosition");
	set_cmt	(0X8050439C,	"int",	0);
	set_cmt	(0X805043A0,	"int",	0);
	create_insn	(0X805043C2);
	create_insn	(0X805043CC);
	create_insn	(x=0X805043D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805043D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805043DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805043DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805043E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805043E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805043F4);
	create_insn	(x=0X80504420);
	op_hex		(x,	1);
	create_insn	(0X8050443A);
	create_insn	(0X8050444C);
	create_insn	(0X80504452);
	set_cmt	(0X80504466,	"int",	0);
	set_cmt	(0X80504474,	"int",	0);
	set_cmt	(0X80504488,	"addr",	0);
	set_cmt	(0X8050448A,	"len",	0);
	create_insn	(0X80504496);
	create_insn	(0X805044A0);
	set_cmt	(0X805044AA,	"a1",	0);
	create_insn	(0X805044BC);
	set_name	(0X805044BC,	"AudioRender_Init");
	create_insn	(x=0X805044C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805044C4,	"a1",	0);
	set_cmt	(0X805044C6,	"a0",	0);
	create_insn	(x=0X805044C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805044CA,	"a2",	0);
	create_insn	(x=0X805044D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805044D4,	"a1",	0);
	set_cmt	(0X805044D6,	"a0",	0);
	create_insn	(x=0X805044D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805044DA,	"a2",	0);
	create_insn	(0X805044E4);
	set_name	(0X805044E4,	"AudioRender_Main");
	create_insn	(x=0X805044FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504502,	"stack_size",	0);
	create_insn	(x=0X80504502);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504504);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050450A,	"arg",	0);
	create_insn	(x=0X8050450E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504512,	"func",	0);
	create_insn	(x=0X80504512);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504516,	"prio",	0);
	create_insn	(x=0X80504518);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504520);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504532);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504544);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504548,	"unsigned int",	0);
	create_insn	(x=0X8050454A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050454E,	"int",	0);
	set_cmt	(0X80504554,	"int",	0);
	set_cmt	(0X80504556,	"unsigned int",	0);
	create_insn	(x=0X80504566);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050456A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050456E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050458C);
	op_stkvar	(x,	1);
	set_cmt	(0X80504596,	"a2",	0);
	set_cmt	(0X805045AA,	"a3",	0);
	set_cmt	(0X805045AE,	"this",	0);
	create_insn	(x=0X805045AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805045C0);
	op_stkvar	(x,	1);
	set_cmt	(0X805045C4,	"int",	0);
	set_cmt	(0X805045CC,	"int",	0);
	set_cmt	(0X805045D4,	"int",	0);
	create_insn	(0X805045D4);
	set_cmt	(0X805045DC,	"index",	0);
	set_cmt	(0X805045F0,	"a1",	0);
	create_insn	(0X805045F0);
	create_insn	(x=0X805045F8);
	op_stkvar	(x,	1);
	create_insn	(0X805045FC);
	set_cmt	(0X80504608,	"int",	0);
	set_cmt	(0X80504610,	"index",	0);
	set_cmt	(0X80504626,	"int",	0);
	create_insn	(0X80504626);
	set_cmt	(0X8050462E,	"a1",	0);
	create_insn	(x=0X80504634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050463C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504640,	"this",	0);
	set_cmt	(0X80504646,	"a2",	0);
	set_cmt	(0X8050464C,	"index",	0);
	set_cmt	(0X8050464E,	"a2",	0);
	set_cmt	(0X80504658,	"index",	0);
	create_insn	(x=0X80504666);
	op_stkvar	(x,	1);
	set_cmt	(0X80504668,	"int",	0);
	set_cmt	(0X8050466A,	"int",	0);
	set_cmt	(0X80504688,	"unsigned int",	0);
	set_cmt	(0X8050468A,	"s64",	0);
	set_cmt	(0X80504692,	"s64",	0);
	set_cmt	(0X80504694,	"s64",	0);
	set_cmt	(0X80504698,	"unsigned int",	0);
	set_cmt	(0X8050469A,	"unsigned int",	0);
	set_cmt	(0X805046A4,	"a2",	0);
	set_cmt	(0X805046B2,	"a3",	0);
	set_cmt	(0X805046B6,	"this",	0);
	create_insn	(x=0X805046B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805046C2);
	op_stkvar	(x,	1);
	set_cmt	(0X805046C6,	"int",	0);
	set_cmt	(0X805046CE,	"int",	0);
	create_insn	(0X805046D6);
	create_insn	(x=0X805046D8);
	op_stkvar	(x,	1);
	set_cmt	(0X805046DA,	"a1",	0);
	set_cmt	(0X805046E2,	"int",	0);
	create_insn	(0X805046E2);
	set_cmt	(0X805046EA,	"a1",	0);
	set_cmt	(0X805046F4,	"int",	0);
	create_insn	(x=0X8050470E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050472A);
	op_stkvar	(x,	1);
	set_cmt	(0X8050472C,	"a2",	0);
	set_cmt	(0X8050472E,	"this",	0);
	set_cmt	(0X80504734,	"index",	0);
	set_cmt	(0X80504736,	"a2",	0);
	set_cmt	(0X8050473C,	"index",	0);
	create_insn	(x=0X8050474A);
	op_stkvar	(x,	1);
	set_cmt	(0X8050474C,	"int",	0);
	set_cmt	(0X8050474E,	"int",	0);
	set_cmt	(0X8050476C,	"unsigned int",	0);
	set_cmt	(0X8050476E,	"s64",	0);
	set_cmt	(0X80504776,	"s64",	0);
	set_cmt	(0X80504778,	"s64",	0);
	set_cmt	(0X8050477A,	"unsigned int",	0);
	set_cmt	(0X8050477C,	"unsigned int",	0);
	set_cmt	(0X8050478A,	"int",	0);
	set_cmt	(0X8050478C,	"unsigned int",	0);
	create_insn	(0X80504794);
	create_insn	(x=0X80504798);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050479C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805047A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805047A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805047AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805047AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805047B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805047B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805047BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805047C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805047C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805047CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805047CE);
	op_stkvar	(x,	1);
	create_insn	(0X805047DE);
	create_insn	(x=0X805047E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805047E6,	"retcode",	0);
	create_insn	(x=0X805047E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805047EC,	"timeout",	0);
	set_cmt	(0X805047F0,	"t",	0);
	create_insn	(x=0X805047F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805047FA,	"unsigned int",	0);
	create_insn	(x=0X805047FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504800,	"int",	0);
	create_insn	(0X80504818);
	set_name	(0X80504818,	"AudioRender_MemoryMapUnmapThreadFunc");
	create_insn	(x=0X80504822);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504828);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504838,	"switch 7 cases",	0);
	set_cmt	(0X8050483E,	"switch jump",	0);
	set_cmt	(0X80504842,	"jump table for switch statement",	0);
	create_byte	(0X80504842);
	set_name	(0X80504842,	"jpt_8050483E");
	create_byte	(0X80504843);
	create_byte	(0X80504844);
	create_byte	(0X80504845);
	create_byte	(0X80504846);
	create_byte	(0X80504847);
	create_byte	(0X80504848);
	set_cmt	(0X8050484A,	"jumptable 8050483E case 5",	1);
	create_insn	(0X8050484A);
	set_cmt	(0X80504852,	"int",	0);
	set_cmt	(0X80504854,	"unsigned int",	0);
	set_cmt	(0X8050485C,	"jumptable 8050483E case 1",	1);
	create_insn	(0X8050485C);
	set_cmt	(0X80504872,	"vaddr",	0);
	set_cmt	(0X80504874,	"paddr",	0);
	set_cmt	(0X80504876,	"size",	0);
	set_cmt	(0X80504878,	"flags",	0);
	set_cmt	(0X80504886,	"int",	0);
	set_cmt	(0X80504888,	"unsigned int",	0);
	set_cmt	(0X80504890,	"jumptable 8050483E default case, cases 2,4,6",	1);
	create_insn	(0X80504890);
	set_name	(0X80504890,	"def_8050483E");
	create_insn	(x=0X80504892);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504896);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050489A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050489E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805048A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805048A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805048A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805048B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805048B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805048B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805048BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805048C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805048C8);
	op_stkvar	(x,	1);
	set_cmt	(0X805048D2,	"jumptable 8050483E case 3",	1);
	create_insn	(0X805048D2);
	set_cmt	(0X805048D6,	"int",	0);
	set_cmt	(0X805048D8,	"unsigned int",	0);
	set_cmt	(0X805048EC,	"result",	0);
	set_cmt	(0X805048EE,	"a2",	0);
	set_cmt	(0X805048FA,	"int",	0);
	set_cmt	(0X805048FC,	"unsigned int",	0);
	set_cmt	(0X80504904,	"jumptable 8050483E case 7",	1);
	create_insn	(x=0X80504904);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504908,	"unsigned int",	0);
	create_insn	(x=0X8050490A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050490E,	"int",	0);
	create_insn	(0X80504924);
	set_name	(0X80504924,	"InitializeDevice");
	create_insn	(x=0X8050493E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504946);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504952);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050495C,	"sem",	0);
	set_cmt	(0X8050495E,	"value",	0);
	create_insn	(x=0X8050496E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504998);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050499E);
	op_stkvar	(x,	1);
	create_insn	(0X80504A00);
	create_insn	(0X80504A0A);
	create_insn	(x=0X80504A10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504A6C);
	set_name	(0X80504A6C,	"gMix_ResetBuffers");
	create_insn	(x=0X80504A70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504A8C);
	create_insn	(0X80504AAC);
	set_name	(0X80504AAC,	"MixDevice::GetSampleRate");
	create_insn	(0X80504AB2);
	set_name	(0X80504AB2,	"MixDevice::GetChannelCount");
	create_insn	(0X80504AB8);
	create_insn	(x=0X80504AC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504B1C);
	set_name	(0X80504B1C,	"MixDevice::GetBuffer");
	create_insn	(0X80504B22);
	create_insn	(x=0X80504B26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504B50);
	create_insn	(0X80504B54);
	set_cmt	(0X80504B84,	"result",	0);
	set_cmt	(0X80504B86,	"char *",	0);
	set_cmt	(0X80504B88,	"int",	0);
	set_cmt	(0X80504B8E,	"result",	0);
	set_cmt	(0X80504B90,	"char *",	0);
	set_cmt	(0X80504B96,	"int",	0);
	create_insn	(0X80504B9E);
	set_cmt	(0X80504BAC,	"int",	0);
	set_cmt	(0X80504BAE,	"result",	0);
	set_cmt	(0X80504BB0,	"char *",	0);
	create_insn	(0X80504BCA);
	set_name	(0X80504BCA,	"gMix_CheckDeviceState2");
	create_insn	(x=0X80504BD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504BD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504BFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504C0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504C1E);
	create_insn	(x=0X80504C22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504C44);
	set_name	(0X80504C44,	"gMix_IsSuspended");
	create_insn	(x=0X80504C4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504C88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504C8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504C98);
	create_insn	(x=0X80504C9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504CBE);
	set_name	(0X80504CBE,	"gMix_IsInitialised");
	create_insn	(x=0X80504CC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504D02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504D12);
	create_insn	(x=0X80504D16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504D38);
	set_name	(0X80504D38,	"gMix_ResumeIfInititialised");
	create_insn	(x=0X80504D3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504D82);
	create_insn	(0X80504D92);
	create_insn	(x=0X80504D96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504DA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504DB8);
	create_insn	(x=0X80504DBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504DDE);
	create_insn	(x=0X80504DE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504E28);
	create_insn	(0X80504E38);
	create_insn	(x=0X80504E3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504E4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504E5E);
	create_insn	(x=0X80504E62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504E84);
	set_name	(0X80504E84,	"gMix_SuspendIfRunning");
	create_insn	(x=0X80504E8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504EA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504ECE);
	create_insn	(0X80504EDE);
	create_insn	(x=0X80504EE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504EE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504EEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504EEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504EF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504EF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504F04);
	create_insn	(x=0X80504F08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504F2A);
	set_name	(0X80504F2A,	"gMix_ResumeIfSuspended");
	create_insn	(x=0X80504F30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504F74);
	create_insn	(0X80504F84);
	create_insn	(x=0X80504F88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504F9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504FAA);
	create_insn	(x=0X80504FAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504FB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504FB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504FBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504FC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504FC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504FD0);
	set_name	(0X80504FD0,	"MixDevice_WaitForSamplesFree");
	create_insn	(x=0X80504FDA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504FE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504FE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504FF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505070);
	create_insn	(0X8050507A);
	create_insn	(x=0X8050507E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505082);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505086);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050508A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050508E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505090);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505094);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805050A0);
	create_insn	(x=0X805050A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805050C6);
	set_name	(0X805050C6,	"MixDevice_ClearSampleBuffer");
	create_insn	(x=0X805050CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805050EE);
	set_name	(0X805050EE,	"MixDevice_SinkSamples");
	create_insn	(x=0X805050F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050512C,	"result",	0);
	set_cmt	(0X8050512E,	"char *",	0);
	set_cmt	(0X80505130,	"int",	0);
	set_cmt	(0X80505136,	"result",	0);
	set_cmt	(0X80505138,	"char *",	0);
	set_cmt	(0X8050513E,	"int",	0);
	create_insn	(0X80505146);
	set_cmt	(0X80505154,	"int",	0);
	set_cmt	(0X80505156,	"result",	0);
	set_cmt	(0X80505158,	"char *",	0);
	create_insn	(0X80505172);
	set_name	(0X80505172,	"InitializeDevices");
	create_insn	(x=0X8050517A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050517E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505182);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505186);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050518A,	"device",	0);
	set_cmt	(0X8050518C,	"name",	0);
	set_cmt	(0X8050518E,	"sessionId",	0);
	set_cmt	(0X80505194,	"device",	0);
	set_cmt	(0X80505198,	"name",	0);
	set_cmt	(0X8050519A,	"sessionId",	0);
	set_cmt	(0X805051A0,	"device",	0);
	set_cmt	(0X805051A4,	"name",	0);
	set_cmt	(0X805051A6,	"sessionId",	0);
	set_cmt	(0X805051AC,	"device",	0);
	set_cmt	(0X805051B0,	"name",	0);
	set_cmt	(0X805051B2,	"sessionId",	0);
	set_cmt	(0X805051B8,	"device",	0);
	set_cmt	(0X805051BC,	"name",	0);
	set_cmt	(0X805051BE,	"sessionId",	0);
	set_cmt	(0X805051C4,	"device",	0);
	set_cmt	(0X805051C8,	"name",	0);
	set_cmt	(0X805051CA,	"sessionId",	0);
	create_insn	(0X805051D2);
	set_name	(0X805051D2,	"ShutdownAllMixDevices");
	create_insn	(x=0X805051DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505214);
	op_plain_offset	(x,	1,	0X807A7F20);
	op_plain_offset	(x,	129,	0X807A7F20);
	create_insn	(x=0X80505240);
	op_plain_offset	(x,	1,	0X807A7F20);
	op_plain_offset	(x,	129,	0X807A7F20);
	create_insn	(x=0X8050526C);
	op_plain_offset	(x,	1,	0X807A7F20);
	op_plain_offset	(x,	129,	0X807A7F20);
	create_insn	(x=0X80505298);
	op_plain_offset	(x,	1,	0X807A7F20);
	op_plain_offset	(x,	129,	0X807A7F20);
	create_insn	(x=0X805052C4);
	op_plain_offset	(x,	1,	0X807A7F20);
	op_plain_offset	(x,	129,	0X807A7F20);
	create_insn	(0X805052F8);
	create_insn	(0X80505304);
	set_name	(0X80505304,	"GetMixDeviceBySessionId");
	create_insn	(x=0X80505308);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505310);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050532C);
	create_insn	(x=0X80505336);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050533A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505342);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505354);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505368);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050537E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505380);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505390);
	op_stkvar	(x,	1);
	set_cmt	(0X80505396,	"unsigned int",	0);
	create_insn	(0X80505396);
	set_cmt	(0X8050539A,	"unsigned int",	0);
	create_insn	(x=0X805053E0);
	op_hex		(x,	1);
	create_insn	(0X80505402);
	create_insn	(0X80505418);
	create_insn	(x=0X80505422);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050542C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050542E);
	op_stkvar	(x,	1);
	set_cmt	(0X8050546A,	"int",	0);
	set_cmt	(0X8050546E,	"unsigned int",	0);
	create_insn	(x=0X80505480);
	op_stkvar	(x,	1);
	create_insn	(0X8050548A);
	create_insn	(x=0X8050548E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505492);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505496);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050549A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050549E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805054A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805054B0);
	create_insn	(x=0X805054B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805054C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805054D6);
	create_insn	(x=0X805054DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805054EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805054FC);
	create_insn	(x=0X80505500);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505504);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505508);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050550C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505512);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505516);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505522);
	set_name	(0X80505522,	"ReadAuxBufferDsp");
	create_insn	(x=0X8050552C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505536);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505548);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505572);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505580);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505584);
	op_stkvar	(x,	1);
	set_cmt	(0X8050558A,	"unsigned int",	0);
	create_insn	(0X8050558A);
	set_cmt	(0X8050558E,	"unsigned int",	0);
	create_insn	(x=0X805055D4);
	op_hex		(x,	1);
	create_insn	(0X805055F6);
	create_insn	(0X8050560C);
	create_insn	(x=0X80505616);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050561A);
	op_stkvar	(x,	1);
	set_cmt	(0X8050561E,	"unsigned int",	0);
	set_cmt	(0X80505620,	"unsigned int",	0);
	set_cmt	(0X80505628,	"int",	0);
	set_cmt	(0X8050562A,	"unsigned int",	0);
	create_insn	(x=0X80505630);
	op_stkvar	(x,	1);
	create_insn	(0X8050563A);
	create_insn	(x=0X8050563E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505642);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505646);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050564A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050564E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505650);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505654);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505660);
	create_insn	(x=0X80505664);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050566C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505670);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505674);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505676);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050567A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505686);
	create_insn	(x=0X8050568A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050568E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505692);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505696);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050569A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050569C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805056AC);
	create_insn	(x=0X805056B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805056D2);
	set_name	(0X805056D2,	"Capture_WriteAuxBufferDsp");
	create_insn	(x=0X805056DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805056E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805056F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505728);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505736);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050573A);
	op_stkvar	(x,	1);
	set_cmt	(0X80505740,	"unsigned int",	0);
	create_insn	(0X80505740);
	set_cmt	(0X80505748,	"unsigned int",	0);
	set_cmt	(0X8050574C,	"unsigned int",	0);
	set_cmt	(0X8050575E,	"int",	0);
	create_insn	(x=0X8050579E);
	op_hex		(x,	1);
	create_insn	(x=0X805057C2);
	op_stkvar	(x,	1);
	set_cmt	(0X805057CC,	"int",	0);
	create_insn	(x=0X805057CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805057CE);
	op_stkvar	(x,	1);
	set_cmt	(0X80505808,	"unsigned int",	0);
	create_insn	(x=0X80505820);
	op_stkvar	(x,	1);
	create_insn	(0X8050582E);
	create_insn	(x=0X80505832);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505836);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050583A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050583E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505842);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505844);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505848);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505854);
	create_insn	(x=0X80505858);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050585C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505860);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505864);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050586A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050586E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050587A);
	create_insn	(x=0X8050587E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505882);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505886);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050588A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050588E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505890);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505894);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805058A0);
	create_insn	(x=0X805058A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805058A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805058AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805058B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805058B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805058BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805058C6);
	set_name	(0X805058C6,	"Aux_WriteAuxBufferDsp");
	create_insn	(x=0X805058D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805058D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805058E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505918);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050592A);
	op_stkvar	(x,	1);
	set_cmt	(0X80505930,	"unsigned int",	0);
	create_insn	(0X80505930);
	set_cmt	(0X80505938,	"unsigned int",	0);
	set_cmt	(0X8050593C,	"unsigned int",	0);
	set_cmt	(0X8050594E,	"int",	0);
	create_insn	(x=0X8050598E);
	op_hex		(x,	1);
	create_insn	(x=0X805059B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805059B6);
	op_stkvar	(x,	1);
	set_cmt	(0X805059BA,	"unsigned int",	0);
	set_cmt	(0X805059BC,	"unsigned int",	0);
	set_cmt	(0X805059C4,	"int",	0);
	set_cmt	(0X805059C6,	"unsigned int",	0);
	create_insn	(x=0X805059CC);
	op_stkvar	(x,	1);
	create_insn	(0X805059DA);
	create_insn	(x=0X805059DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805059F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505A00);
	create_insn	(x=0X80505A04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505A16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505A26);
	create_insn	(x=0X80505A2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505A3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505A4C);
	create_insn	(x=0X80505A50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505A72);
	set_name	(0X80505A72,	"ResetAuxBufferDsp");
	create_insn	(x=0X80505A90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505AA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505AA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505AB4);
	set_name	(0X80505AB4,	"Axfx2AllPassTick");
	create_insn	(0X80505B68);
	set_name	(0X80505B68,	"ApplyBiquadFilterInt");
	create_insn	(x=0X80505B7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B9E);
	op_stkvar	(x,	1);
	create_insn	(0X80505BEC);
	create_float	(0X80505BF8);
	create_insn	(0X80505BFC);
	set_name	(0X80505BFC,	"ApplyBiquadFilterFloat");
	create_insn	(x=0X80505C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505C86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505CAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505CDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505CFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505DCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505ED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505EDA);
	op_hex		(x,	1);
	create_float	(0X80505EE8);
	create_float	(0X80505EEC);
	create_insn	(0X80505EF0);
	create_insn	(x=0X80505EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505EFC);
	op_hex		(x,	1);
	create_insn	(x=0X80505F12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F2A);
	op_hex		(x,	1);
	create_insn	(x=0X80505F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FB6);
	op_hex		(x,	1);
	create_insn	(x=0X80505FBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506010);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050601A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050602C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506082);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506084);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050608A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805060DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805060E6);
	op_stkvar	(x,	1);
	create_float	(0X80506108);
	create_insn	(0X8050610C);
	set_name	(0X8050610C,	"ApplyBiquadFilterFloat2");
	create_insn	(x=0X80506166);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506182);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506190);
	op_stkvar	(x,	1);
	create_insn	(x=0X805061E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805061EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050623A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506242);
	op_stkvar	(x,	1);
	create_insn	(x=0X805062A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805062CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805062D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805062F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506322);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506350);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506358);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506362);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050636C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506372);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506378);
	op_stkvar	(x,	1);
	create_insn	(x=0X805063F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805063F8);
	op_hex		(x,	1);
	create_insn	(x=0X80506426);
	op_hex		(x,	1);
	create_insn	(0X8050642E);
	create_insn	(x=0X80506456);
	op_hex		(x,	1);
	create_insn	(x=0X80506460);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506466);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050646C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506480);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506490);
	op_stkvar	(x,	1);
	create_insn	(x=0X805064B8);
	op_hex		(x,	1);
	create_insn	(x=0X805064DC);
	op_stkvar	(x,	1);
	create_float	(0X805064FC);
	create_float	(0X80506500);
	create_insn	(0X80506504);
	set_name	(0X80506504,	"ApplyDoubleBiquadFilterFloat");
	create_insn	(x=0X80506522);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506556);
	op_stkvar	(x,	1);
	create_insn	(x=0X805065B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805065D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050662C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506630);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506658);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506668);
	op_stkvar	(x,	1);
	create_insn	(x=0X805066FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506708);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506728);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050672A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506778);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050678C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805067AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805067BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805067F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506814);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050683C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506848);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506850);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050685C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506868);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506874);
	op_stkvar	(x,	1);
	create_insn	(x=0X805068B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805068BC);
	op_stkvar	(x,	1);
	create_float	(0X80506918);
	create_float	(0X8050691C);
	create_insn	(0X80506920);
	create_insn	(x=0X80506940);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506948);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506950);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506960);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506AC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B14);
	op_hex		(x,	1);
	create_insn	(x=0X80506B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B46);
	op_hex		(x,	1);
	create_insn	(x=0X80506B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BEC);
	op_hex		(x,	1);
	create_insn	(x=0X80506BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D66);
	op_hex		(x,	1);
	create_insn	(x=0X80506D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E22);
	op_hex		(x,	1);
	create_insn	(x=0X80506E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F62);
	op_stkvar	(x,	1);
	create_insn	(0X80506F84);
	set_name	(0X80506F84,	"CommandListProcessor::Setup");
	create_insn	(x=0X80506FBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80506FC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80506FC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80506FCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80506FD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80506FD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80506FE2);
	set_name	(0X80506FE2,	"CommandListProcessor::SetProcessTimeMax");
	create_insn	(0X80506FE8);
	set_name	(0X80506FE8,	"CommandListProcessor::Process");
	create_insn	(x=0X80506FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507000);
	op_stkvar	(x,	1);
	set_cmt	(0X80507018,	"unsigned int",	0);
	set_cmt	(0X8050701A,	"s64",	0);
	set_cmt	(0X80507026,	"s64",	0);
	set_cmt	(0X80507028,	"unsigned int",	0);
	set_cmt	(0X8050702A,	"s64",	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	set_cmt	(0X8050702C,	"unsigned int",	0);
	create_insn	(0X8050704E);
	create_insn	(x=0X8050705A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80507060);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80507074);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050707C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050707E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507086);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507088);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050708E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507094);
	op_stkvar	(x,	1);
	set_cmt	(0X8050709A,	"unsigned int",	0);
	set_cmt	(0X8050709C,	"int",	0);
	create_insn	(x=0X8050709C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805070A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805070EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805070EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805070F6);
	op_stkvar	(x,	1);
	set_cmt	(0X805070F8,	"a4",	0);
	set_cmt	(0X80507112,	"switch 29 cases",	0);
	set_cmt	(0X8050711C,	"switch jump",	0);
	set_cmt	(0X80507120,	"jump table for switch statement",	0);
	create_word	(0X80507120);
	set_name	(0X80507120,	"jpt_8050711C");
	create_word	(0X80507122);
	create_word	(0X80507124);
	create_word	(0X80507126);
	create_word	(0X80507128);
	create_word	(0X8050712A);
	create_word	(0X8050712C);
	create_word	(0X8050712E);
	create_word	(0X80507130);
	create_word	(0X80507132);
	create_word	(0X80507134);
	create_word	(0X80507136);
	create_word	(0X80507138);
	create_word	(0X8050713A);
	create_word	(0X8050713C);
	create_word	(0X8050713E);
	create_word	(0X80507140);
	create_word	(0X80507142);
	create_word	(0X80507144);
	create_word	(0X80507146);
	create_word	(0X80507148);
	create_word	(0X8050714A);
	create_word	(0X8050714C);
	create_word	(0X8050714E);
	create_word	(0X80507150);
	create_word	(0X80507152);
	create_word	(0X80507154);
	create_word	(0X80507156);
	create_word	(0X80507158);
	set_cmt	(0X8050715A,	"jumptable 8050711C case 1",	1);
	create_insn	(0X8050715A);
	create_insn	(x=0X80507172);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050717C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507188);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050718E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507192);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507196);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507198);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050719A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507202);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507204);
	op_hex		(x,	1);
	create_insn	(x=0X8050720A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050720C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507210);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507214);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507218);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050721A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050721C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507228);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507230);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507234);
	op_hex		(x,	1);
	create_insn	(x=0X8050723A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507240);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507242);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050724E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507254);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050725A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507260);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507264);
	op_hex		(x,	1);
	create_insn	(x=0X8050726E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507270);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507272);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050727A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507284);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050728C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050728E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507294);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050729A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072AA);
	op_hex		(x,	1);
	create_insn	(x=0X805072B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072D4);
	op_stkvar	(x,	1);
	set_cmt	(0X805072DA,	"jumptable 8050711C case 28",	1);
	create_insn	(0X805072DA);
	create_insn	(x=0X805072F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050731C);
	op_stkvar	(x,	1);
	create_insn	(0X8050733E);
	set_cmt	(0X8050735E,	"jumptable 8050711C case 17",	1);
	create_insn	(0X8050735E);
	create_insn	(x=0X80507376);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507408);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507410);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507422);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050742A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050743C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507442);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050745C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050746A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050746E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507470);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507476);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507478);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050747E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507480);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507486);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050748C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050748E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507494);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507496);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050749C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507512);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507514);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050751A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507542);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050755A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507576);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507580);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507588);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507592);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050759C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075B4);
	op_stkvar	(x,	1);
	set_cmt	(0X805075BA,	"jumptable 8050711C case 15",	1);
	create_insn	(0X805075BA);
	set_cmt	(0X805075D2,	"workBuffer",	0);
	create_insn	(x=0X805075D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050760C);
	op_stkvar	(x,	1);
	set_cmt	(0X8050764E,	"param",	0);
	set_cmt	(0X80507650,	"state",	0);
	set_cmt	(0X8050765A,	"jumptable 8050711C case 5",	1);
	create_insn	(0X8050765A);
	create_insn	(x=0X80507672);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507682);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507684);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507688);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050768A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507692);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076F8);
	op_hex		(x,	1);
	create_insn	(x=0X80507702);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507704);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050770C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507712);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050771C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507726);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050772E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507732);
	op_hex		(x,	1);
	create_insn	(x=0X80507738);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050773A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050773C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507746);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507752);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050775C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050775E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507764);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507768);
	op_hex		(x,	1);
	create_insn	(x=0X80507772);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507774);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507776);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050777E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507788);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507790);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507792);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507798);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050779E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077AE);
	op_hex		(x,	1);
	create_insn	(x=0X805077B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507800);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507804);
	op_hex		(x,	1);
	create_insn	(x=0X80507808);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050780C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507810);
	op_stkvar	(x,	1);
	set_cmt	(0X80507816,	"jumptable 8050711C case 12",	1);
	create_insn	(0X80507816);
	create_insn	(x=0X80507844);
	op_stkvar	(x,	1);
	set_cmt	(0X80507850,	"jumptable 8050711C case 13",	1);
	create_insn	(0X80507850);
	create_insn	(0X80507874);
	set_cmt	(0X80507898,	"jumptable 8050711C case 2",	1);
	create_insn	(0X80507898);
	create_insn	(x=0X805078B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078BA);
	op_stkvar	(x,	1);
	set_cmt	(0X805078C0,	"jumptable 8050711C case 3",	1);
	create_insn	(0X805078C0);
	create_insn	(x=0X805078D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507900);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507906);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050790C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507912);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507918);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050791E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507920);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507922);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507924);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507926);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507934);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050793A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507940);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507946);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507954);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507958);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050795C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507968);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050796A);
	op_hex		(x,	1);
	create_insn	(x=0X80507970);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507972);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507976);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050797A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050797E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507980);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507982);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050798E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507996);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050799A);
	op_hex		(x,	1);
	create_insn	(x=0X805079A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079CA);
	op_hex		(x,	1);
	create_insn	(x=0X805079D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A10);
	op_hex		(x,	1);
	create_insn	(x=0X80507A1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A22);
	op_stkvar	(x,	1);
	set_cmt	(0X80507A2C,	"int",	0);
	create_insn	(x=0X80507A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A6C);
	op_hex		(x,	1);
	create_insn	(x=0X80507A70);
	op_stkvar	(x,	1);
	set_cmt	(0X80507A74,	"int",	0);
	create_insn	(x=0X80507A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A7C);
	op_stkvar	(x,	1);
	set_cmt	(0X80507A7E,	"args",	0);
	create_insn	(x=0X80507A7E);
	op_stkvar	(x,	1);
	set_cmt	(0X80507A88,	"jumptable 8050711C case 4",	1);
	create_insn	(0X80507A88);
	create_insn	(x=0X80507AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507ACE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507ADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AEC);
	op_stkvar	(x,	1);
	set_cmt	(0X80507AF2,	"jumptable 8050711C case 8",	1);
	create_insn	(0X80507AF2);
	create_insn	(x=0X80507B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B26);
	op_stkvar	(x,	1);
	set_cmt	(0X80507B36,	"int",	0);
	set_cmt	(0X80507B3A,	"int",	0);
	set_cmt	(0X80507B40,	"int",	0);
	set_cmt	(0X80507B46,	"ramp",	0);
	set_cmt	(0X80507B4C,	"inBuffer",	0);
	set_cmt	(0X80507B50,	"gain",	0);
	set_cmt	(0X80507B52,	"sampleCount",	0);
	create_insn	(x=0X80507B52);
	op_stkvar	(x,	1);
	set_cmt	(0X80507B56,	"outBuffer",	0);
	set_cmt	(0X80507B62,	"jumptable 8050711C case 10",	1);
	create_insn	(0X80507B62);
	create_insn	(x=0X80507B7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B96);
	op_stkvar	(x,	1);
	set_cmt	(0X80507B9C,	"sampleCount",	0);
	set_cmt	(0X80507BA0,	"volume",	0);
	set_cmt	(0X80507BA6,	"precision",	0);
	create_insn	(x=0X80507BA6);
	op_stkvar	(x,	1);
	set_cmt	(0X80507BAC,	"output",	0);
	set_cmt	(0X80507BB0,	"input",	0);
	set_cmt	(0X80507BBC,	"jumptable 8050711C case 16",	1);
	create_insn	(0X80507BBC);
	create_insn	(x=0X80507BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BF4);
	op_stkvar	(x,	1);
	create_insn	(0X80507BFA);
	create_insn	(x=0X80507C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C18);
	op_stkvar	(x,	1);
	set_cmt	(0X80507C22,	"state",	0);
	create_insn	(x=0X80507C22);
	op_stkvar	(x,	1);
	set_cmt	(0X80507C28,	"output",	0);
	set_cmt	(0X80507C2C,	"sampleCount",	0);
	set_cmt	(0X80507C2E,	"input",	0);
	set_cmt	(0X80507C32,	"targetSampleCount",	0);
	set_cmt	(0X80507C3A,	"jumptable 8050711C case 25",	1);
	create_insn	(0X80507C3A);
	create_insn	(x=0X80507C52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C78);
	op_stkvar	(x,	1);
	set_cmt	(0X80507C88,	"a1",	0);
	set_cmt	(0X80507C8C,	"a2",	0);
	set_cmt	(0X80507C90,	"a3",	0);
	set_cmt	(0X80507C9A,	"jumptable 8050711C case 26",	1);
	create_insn	(0X80507C9A);
	set_cmt	(0X80507CB2,	"buffer",	0);
	create_insn	(x=0X80507CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507CBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507CC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507CEC);
	op_stkvar	(x,	1);
	set_cmt	(0X80507D2E,	"param",	0);
	set_cmt	(0X80507D30,	"state",	0);
	set_cmt	(0X80507D3A,	"jumptable 8050711C case 6",	1);
	create_insn	(0X80507D3A);
	create_insn	(x=0X80507D52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D5C);
	op_stkvar	(x,	1);
	set_cmt	(0X80507D64,	"int",	0);
	create_insn	(x=0X80507D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D9C);
	op_hex		(x,	1);
	create_insn	(x=0X80507DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507DA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507DA8);
	op_stkvar	(x,	1);
	set_cmt	(0X80507DAC,	"int",	0);
	create_insn	(x=0X80507DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507DB4);
	op_stkvar	(x,	1);
	set_cmt	(0X80507DB6,	"args",	0);
	create_insn	(x=0X80507DB6);
	op_stkvar	(x,	1);
	set_cmt	(0X80507DC0,	"jumptable 8050711C case 7",	1);
	create_insn	(0X80507DC0);
	create_insn	(x=0X80507DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507DF4);
	op_stkvar	(x,	1);
	set_cmt	(0X80507DFA,	"sampleCount",	0);
	set_cmt	(0X80507DFE,	"volume",	0);
	set_cmt	(0X80507E04,	"precision",	0);
	create_insn	(x=0X80507E04);
	op_stkvar	(x,	1);
	set_cmt	(0X80507E0A,	"output",	0);
	set_cmt	(0X80507E0E,	"input",	0);
	set_cmt	(0X80507E1A,	"jumptable 8050711C case 9",	1);
	create_insn	(0X80507E1A);
	create_insn	(x=0X80507E32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507E4E);
	op_stkvar	(x,	1);
	set_cmt	(0X80507E84,	"a",	0);
	set_cmt	(0X80507E90,	"state",	0);
	create_insn	(x=0X80507E90);
	op_stkvar	(x,	1);
	set_cmt	(0X80507E94,	"output",	0);
	set_cmt	(0X80507E96,	"input",	0);
	set_cmt	(0X80507E98,	"b",	0);
	set_cmt	(0X80507EA2,	"jumptable 8050711C case 11",	1);
	create_insn	(0X80507EA2);
	create_insn	(x=0X80507EBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507ED6);
	op_stkvar	(x,	1);
	set_cmt	(0X80507EE6,	"int",	0);
	set_cmt	(0X80507EEA,	"int",	0);
	set_cmt	(0X80507EF0,	"int",	0);
	create_insn	(x=0X80507F02);
	op_stkvar	(x,	1);
	set_cmt	(0X80507F18,	"jumptable 8050711C case 14",	1);
	create_insn	(0X80507F18);
	create_insn	(x=0X80507F24);
	op_stkvar	(x,	1);
	create_insn	(0X80507F40);
	create_insn	(x=0X80507F50);
	op_stkvar	(x,	1);
	set_cmt	(0X80507F6A,	"jumptable 8050711C case 18",	1);
	create_insn	(0X80507F6A);
	create_insn	(x=0X80507F82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F9E);
	op_stkvar	(x,	1);
	set_cmt	(0X80507FA2,	"sampleCount",	0);
	set_cmt	(0X80507FAE,	"a3",	0);
	set_cmt	(0X80507FB6,	"OutAuxBuffer",	0);
	set_cmt	(0X80507FC0,	"a4",	0);
	set_cmt	(0X80507FC8,	"bufferAddress",	0);
	create_insn	(x=0X80507FD0);
	op_stkvar	(x,	1);
	set_cmt	(0X80507FD6,	"countMax",	0);
	create_insn	(x=0X80507FD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507FDA);
	op_stkvar	(x,	1);
	set_cmt	(0X80507FE0,	"bufferAddress",	0);
	create_insn	(x=0X80507FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507FF8);
	op_stkvar	(x,	1);
	set_cmt	(0X80508016,	"jumptable 8050711C case 19",	1);
	create_insn	(0X80508016);
	set_cmt	(0X80508044,	"device",	0);
	set_cmt	(0X8050804C,	"int",	0);
	create_insn	(x=0X80508064);
	op_stkvar	(x,	1);
	set_cmt	(0X805080CA,	"jumptable 8050711C case 21",	1);
	create_insn	(0X805080CA);
	create_insn	(x=0X805080DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805080EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805080F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805080F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805080FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050812A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050813C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050816E);
	op_stkvar	(x,	1);
	set_cmt	(0X80508170,	"param",	0);
	set_cmt	(0X80508172,	"state",	0);
	set_cmt	(0X80508178,	"longSizePreDelaySupported",	0);
	set_cmt	(0X8050817A,	"workBuffer",	0);
	create_insn	(x=0X8050817A);
	op_stkvar	(x,	1);
	set_cmt	(0X80508182,	"jumptable 8050711C case 22",	1);
	create_insn	(0X80508182);
	create_insn	(x=0X805081A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805081A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805081AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805081D4);
	op_stkvar	(x,	1);
	set_cmt	(0X80508220,	"jumptable 8050711C case 23",	1);
	create_insn	(0X80508220);
	set_cmt	(0X80508252,	"unsigned int",	0);
	set_cmt	(0X80508254,	"s64",	0);
	set_cmt	(0X8050825C,	"s64",	0);
	set_cmt	(0X8050825E,	"unsigned int",	0);
	set_cmt	(0X80508260,	"s64",	0);
	set_cmt	(0X80508262,	"unsigned int",	0);
	create_insn	(x=0X80508268);
	op_stkvar	(x,	1);
	set_cmt	(0X80508278,	"jumptable 8050711C case 20",	1);
	create_insn	(0X80508278);
	create_insn	(x=0X8050829A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805082AA);
	op_stkvar	(x,	1);
	create_insn	(0X805082B2);
	create_insn	(x=0X805082D8);
	op_stkvar	(x,	1);
	set_cmt	(0X805082FE,	"jumptable 8050711C case 24",	1);
	create_insn	(0X805082FE);
	create_insn	(x=0X80508312);
	op_stkvar	(x,	1);
	set_cmt	(0X80508326,	"jumptable 8050711C case 29",	1);
	create_insn	(0X80508326);
	set_cmt	(0X80508332,	"a2",	0);
	create_insn	(x=0X8050833E);
	op_stkvar	(x,	1);
	set_cmt	(0X80508348,	"a3",	0);
	create_insn	(x=0X80508356);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050836A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050836E);
	op_stkvar	(x,	1);
	set_cmt	(0X80508380,	"jumptable 8050711C case 27",	1);
	create_insn	(0X80508380);
	set_cmt	(0X80508398,	"buffer",	0);
	create_insn	(x=0X8050839E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805083A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805083A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805083D2);
	op_stkvar	(x,	1);
	set_cmt	(0X80508414,	"param",	0);
	set_cmt	(0X80508416,	"state",	0);
	create_insn	(0X8050841E);
	create_insn	(x=0X80508420);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508440);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508458);
	op_stkvar	(x,	1);
	set_cmt	(0X80508468,	"int",	0);
	set_cmt	(0X8050847E,	"int",	0);
	set_cmt	(0X80508484,	"int",	0);
	create_insn	(x=0X80508494);
	op_stkvar	(x,	1);
	create_insn	(0X805084A0);
	create_insn	(x=0X805084A8);
	op_stkvar	(x,	1);
	set_cmt	(0X805084BA,	"unsigned int",	0);
	set_cmt	(0X805084BC,	"s64",	0);
	set_cmt	(0X805084C4,	"s64",	0);
	set_cmt	(0X805084C6,	"unsigned int",	0);
	set_cmt	(0X805084C8,	"s64",	0);
	set_cmt	(0X805084CA,	"unsigned int",	0);
	create_insn	(x=0X805084D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805084DC);
	op_stkvar	(x,	1);
	create_insn	(0X805084EC);
	set_cmt	(0X805084F8,	"OutAuxBuffer",	0);
	create_insn	(0X805084F8);
	create_insn	(0X80508502);
	create_insn	(x=0X80508510);
	op_stkvar	(x,	1);
	set_cmt	(0X80508520,	"biquad1State",	0);
	create_insn	(x=0X80508520);
	op_stkvar	(x,	1);
	set_cmt	(0X80508524,	"output",	0);
	set_cmt	(0X80508526,	"biquad2a",	0);
	create_insn	(x=0X80508526);
	op_stkvar	(x,	1);
	set_cmt	(0X8050852A,	"biquad1a",	0);
	set_cmt	(0X8050852E,	"input",	0);
	set_cmt	(0X80508530,	"sampleCount",	0);
	create_insn	(x=0X80508530);
	op_stkvar	(x,	1);
	set_cmt	(0X80508532,	"biquad1b",	0);
	set_cmt	(0X8050853E,	"param",	0);
	create_insn	(0X8050853E);
	set_cmt	(0X80508540,	"state",	0);
	create_insn	(x=0X80508546);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050854E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508552);
	op_stkvar	(x,	1);
	set_cmt	(0X8050856A,	"int",	0);
	create_insn	(0X8050856A);
	set_cmt	(0X8050856C,	"int",	0);
	create_insn	(x=0X80508572);
	op_stkvar	(x,	1);
	set_cmt	(0X80508578,	"params",	0);
	create_insn	(0X80508578);
	set_cmt	(0X8050857A,	"state",	0);
	create_insn	(x=0X80508582);
	op_stkvar	(x,	1);
	set_cmt	(0X80508586,	"inputs",	0);
	create_insn	(x=0X80508586);
	op_stkvar	(x,	1);
	set_cmt	(0X80508588,	"outputs",	0);
	create_insn	(x=0X80508588);
	op_stkvar	(x,	1);
	set_cmt	(0X80508590,	"params",	0);
	set_cmt	(0X80508592,	"state",	0);
	set_cmt	(0X80508594,	"enabled",	0);
	set_cmt	(0X8050859E,	"param",	0);
	create_insn	(0X8050859E);
	set_cmt	(0X805085A0,	"state",	0);
	set_cmt	(0X805085A2,	"doReset",	0);
	create_insn	(x=0X805085A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085B4);
	op_stkvar	(x,	1);
	set_cmt	(0X805085CC,	"int",	0);
	create_insn	(0X805085CC);
	set_cmt	(0X805085CE,	"int",	0);
	create_insn	(x=0X805085D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085FE);
	op_stkvar	(x,	1);
	set_cmt	(0X80508600,	"b",	0);
	set_cmt	(0X80508608,	"a",	0);
	set_cmt	(0X8050860E,	"state",	0);
	create_insn	(x=0X8050860E);
	op_stkvar	(x,	1);
	set_cmt	(0X80508612,	"output",	0);
	set_cmt	(0X80508614,	"input",	0);
	set_cmt	(0X8050861E,	"state",	0);
	create_insn	(x=0X8050861E);
	op_stkvar	(x,	1);
	set_cmt	(0X80508622,	"output",	0);
	set_cmt	(0X80508624,	"input",	0);
	set_cmt	(0X80508626,	"b",	0);
	create_insn	(0X80508630);
	set_cmt	(0X80508636,	"OutAuxBuffer",	0);
	create_insn	(x=0X80508642);
	op_stkvar	(x,	1);
	set_cmt	(0X80508644,	"a2",	0);
	set_cmt	(0X80508648,	"a3",	0);
	set_cmt	(0X8050864A,	"a1",	0);
	create_insn	(0X80508654);
	set_cmt	(0X80508664,	"unsigned int",	0);
	set_cmt	(0X80508666,	"s64",	0);
	set_cmt	(0X80508672,	"s64",	0);
	set_cmt	(0X80508674,	"unsigned int",	0);
	set_cmt	(0X80508676,	"s64",	0);
	set_cmt	(0X80508678,	"unsigned int",	0);
	create_insn	(x=0X80508686);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050868A);
	op_stkvar	(x,	1);
	create_insn	(0X80508696);
	create_insn	(x=0X8050869A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050869E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805086BC);
	create_insn	(x=0X805086C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805086E4);
	create_insn	(x=0X805086E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805086FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508700);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050870C);
	create_insn	(x=0X80508710);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508714);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508718);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050871C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508720);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508722);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508726);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508734);
	create_insn	(x=0X80508738);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050873C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508740);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508744);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508748);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050874A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050874E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508750);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050875C);
	create_insn	(x=0X80508760);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508768);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050876C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508770);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508772);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508776);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508778);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508784);
	create_insn	(x=0X80508788);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050878C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508790);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508794);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508798);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050879A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050879E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805087A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805087AC);
	create_insn	(x=0X805087B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805087C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805087C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805087D4);
	create_insn	(x=0X805087D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805087EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805087EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805087F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805087FC);
	create_insn	(x=0X80508800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508804);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050880C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508810);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508812);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508816);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508818);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508824);
	create_insn	(x=0X80508828);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050882C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508830);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508834);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508838);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050883A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050883E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508840);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050884C);
	create_insn	(x=0X80508850);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508854);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508858);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050885C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508860);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508862);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508866);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508874);
	create_insn	(x=0X80508878);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050887C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508880);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508884);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508888);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050888A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050888E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508890);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050889C);
	create_insn	(x=0X805088A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805088B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805088B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805088C4);
	create_insn	(x=0X805088C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805088DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805088E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805088EC);
	create_insn	(x=0X805088F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805088FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508900);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508902);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508906);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508908);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508914);
	create_insn	(x=0X80508918);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050891C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508920);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508924);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508928);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050892A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050892E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508930);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050893C);
	create_insn	(x=0X80508940);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508944);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508948);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050894C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508950);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508952);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508956);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508958);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508964);
	create_insn	(x=0X80508968);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050896C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508970);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508974);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508978);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050897A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050897E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508980);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050898C);
	create_insn	(x=0X80508990);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508994);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508998);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050899C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805089B4);
	create_insn	(x=0X805089B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805089DC);
	create_insn	(x=0X805089E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508A04);
	create_insn	(x=0X80508A08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508A2C);
	create_insn	(x=0X80508A30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508A54);
	create_insn	(x=0X80508A58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508A7C);
	create_insn	(x=0X80508A80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508AA4);
	create_insn	(x=0X80508AA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508ABA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80508ACC,	"jumptable 8050711C default case",	1);
	create_insn	(0X80508ACC);
	set_name	(0X80508ACC,	"def_8050711C");
	create_insn	(x=0X80508ACE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508ADA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508ADE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B26);
	op_stkvar	(x,	1);
	create_insn	(0X80508B30);
	create_insn	(x=0X80508B34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508B58);
	create_insn	(x=0X80508B5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508B80);
	create_insn	(x=0X80508B84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508BA8);
	create_insn	(x=0X80508BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508BBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508BC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508BD0);
	create_insn	(x=0X80508BD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508BF8);
	set_name	(0X80508BF8,	"GetCommandCount");
	create_insn	(0X80508BFC);
	set_name	(0X80508BFC,	"CommandListProcessor::GetSampleCount");
	create_insn	(0X80508C00);
	set_name	(0X80508C00,	"CommandListProcessor::GetTargetSampleRate");
	create_insn	(0X80508C04);
	set_name	(0X80508C04,	"CommandListProcessor::GetMixBuffers");
	create_insn	(0X80508C08);
	set_name	(0X80508C08,	"CommandListProcessor::GetBufferCount");
	create_insn	(0X80508C0C);
	set_name	(0X80508C0C,	"CommandListProcessor::GetProcessedCommandCount");
	create_insn	(0X80508C10);
	set_name	(0X80508C10,	"CommandListProcessor::GetRemainCommandCount");
	create_insn	(0X80508C18);
	set_name	(0X80508C18,	"DecodeFromWaveBuffers");
	create_insn	(x=0X80508C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C3E);
	op_stkvar	(x,	1);
	set_cmt	(0X80508C6A,	"int",	0);
	create_insn	(x=0X80508CB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80508CEA,	"int",	0);
	create_insn	(x=0X80508CEA);
	op_stkvar	(x,	1);
	set_cmt	(0X80508CEC,	"int",	0);
	create_insn	(x=0X80508CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D4A);
	op_stkvar	(x,	1);
	create_insn	(0X80508D4E);
	create_insn	(x=0X80508D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DF2);
	op_stkvar	(x,	1);
	create_insn	(0X80508E12);
	create_insn	(x=0X80508E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E46);
	op_stkvar	(x,	1);
	create_insn	(0X80508E4E);
	set_cmt	(0X80508E56,	"a2",	0);
	set_cmt	(0X80508E5C,	"a1",	0);
	set_cmt	(0X80508E5E,	"a3",	0);
	create_insn	(x=0X80508E64);
	op_stkvar	(x,	1);
	create_insn	(0X80508E6A);
	create_insn	(x=0X80508E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E70);
	op_stkvar	(x,	1);
	create_insn	(0X80508E78);
	create_insn	(x=0X80508E82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E86);
	op_stkvar	(x,	1);
	create_insn	(0X80508E8E);
	create_insn	(x=0X80508E90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508EB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508EC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508ED2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508F14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508F28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508F80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FB0);
	op_stkvar	(x,	1);
	create_insn	(0X80508FCE);
	create_insn	(x=0X80508FD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FDC);
	op_stkvar	(x,	1);
	create_insn	(0X80508FE2);
	create_insn	(x=0X80508FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509006);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509008);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050900A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509012);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509016);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509018);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509020);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509024);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509026);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050902C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050904C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509056);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050905A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050905C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050906C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050906E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509078);
	op_hex		(x,	1);
	set_cmt	(0X80509082,	"samplesRemaining",	0);
	create_insn	(x=0X80509082);
	op_stkvar	(x,	1);
	set_cmt	(0X80509086,	"fraction",	0);
	create_insn	(x=0X80509086);
	op_stkvar	(x,	1);
	set_cmt	(0X80509088,	"output",	0);
	create_insn	(x=0X80509088);
	op_stkvar	(x,	1);
	set_cmt	(0X8050908A,	"sampleRateRatio",	0);
	create_insn	(x=0X8050908A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050908C);
	op_stkvar	(x,	1);
	set_cmt	(0X8050908E,	"sampleHistory",	0);
	create_insn	(x=0X805090AC);
	op_stkvar	(x,	1);
	create_insn	(0X805090B2);
	create_insn	(x=0X805090B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805090D4);
	op_hex		(x,	1);
	create_insn	(x=0X805090D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805090E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509102);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509116);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050911C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509122);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050913C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509142);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050914A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509154);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509158);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050915E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509162);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509168);
	op_stkvar	(x,	1);
	create_insn	(0X8050916C);
	create_insn	(x=0X80509170);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050917C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050917E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509190);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509194);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509198);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050919C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805091B4);
	create_insn	(x=0X805091B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091C2);
	op_stkvar	(x,	1);
	create_insn	(0X805091D8);
	create_insn	(x=0X805091DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805091FE);
	create_insn	(x=0X80509202);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509206);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050920A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050920E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509212);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509214);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509218);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050921A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509226);
	create_insn	(x=0X8050922C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509230);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509234);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509238);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050923C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050923E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509242);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050924E);
	create_insn	(x=0X80509254);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509258);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050925C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509260);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509264);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509266);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050926A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509276);
	create_insn	(x=0X8050927C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509284);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509288);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050928C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050928E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509292);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050929E);
	create_insn	(x=0X805092A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805092C6);
	create_insn	(x=0X805092CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805092EE);
	create_insn	(x=0X805092F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509300);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509304);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509306);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050930A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509316);
	create_insn	(x=0X8050931C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509320);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509324);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509328);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050932C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050932E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509332);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050933E);
	create_insn	(x=0X80509344);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509348);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050934C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509350);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509354);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509356);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050935A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509366);
	create_insn	(x=0X8050936C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509370);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509374);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509378);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050937C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050937E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509382);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050938E);
	create_insn	(x=0X80509394);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509398);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050939C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805093A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805093A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805093AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805093B6);
	create_insn	(x=0X805093BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805093C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805093C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805093C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805093CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805093D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805093DE);
	create_insn	(0X80509446);
	create_insn	(0X805094A4);
	create_insn	(0X805094C2);
	create_insn	(0X805094E6);
	create_insn	(0X80509514);
	create_insn	(0X80509540);
	create_insn	(0X805095A8);
	create_insn	(0X80509606);
	set_name	(0X80509606,	"ApplyDepopMix");
	create_insn	(0X80509678);
	create_insn	(0X805096A2);
	create_insn	(0X80509706);
	create_insn	(0X80509730);
	create_insn	(x=0X8050973C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_oword	(0X805097D0);
	create_float	(0X805097E0);
	create_dword	(0X805097E4);
	create_dword	(0X805097E8);
	create_dword	(0X805097EC);
	create_insn	(0X805097F0);
	create_insn	(x=0X805097FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509806);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509826);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050982A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050983E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509840);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050989C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805098A2);
	op_stkvar	(x,	1);
	create_insn	(0X805098AC);
	create_oword	(0X80509910);
	create_float	(0X80509920);
	create_insn	(0X80509924);
	set_name	(0X80509924,	"DecodePcm16");
	create_insn	(0X80509942);
	set_cmt	(0X80509944,	"a1",	0);
	create_insn	(0X8050994E);
	set_cmt	(0X80509978,	"a2",	0);
	set_cmt	(0X8050997C,	"a3",	0);
	create_insn	(0X8050998C);
	create_insn	(0X805099C2);
	create_insn	(x=0X805099C6);
	op_hex		(x,	1);
	create_insn	(0X80509A16);
	create_insn	(x=0X80509A1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509A1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509A22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509A26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509A2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509A2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509A30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509A40);
	set_name	(0X80509A40,	"DecodePcmFloat");
	create_insn	(0X80509A6E);
	create_insn	(x=0X80509A9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509AEC);
	create_insn	(x=0X80509AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509B02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509B2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509B38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509BA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509BA6);
	op_stkvar	(x,	1);
	create_insn	(0X80509BB8);
	create_insn	(0X80509C0E);
	create_insn	(0X80509C5C);
	create_insn	(x=0X80509C60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509C64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509C68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509C6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509C72);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509C76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_oword	(0X80509C90);
	create_float	(0X80509CA0);
	create_insn	(0X80509CA4);
	set_name	(0X80509CA4,	"DecodeAdpcm");
	create_insn	(0X80509CFC);
	create_insn	(x=0X80509D42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509D46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509D4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509D64);
	op_hex		(x,	1);
	create_insn	(x=0X80509D6C);
	op_hex		(x,	1);
	create_insn	(x=0X80509D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509D8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509F2A);
	op_stkvar	(x,	1);
	create_insn	(0X80509F6C);
	create_insn	(x=0X80509F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509F7E);
	op_hex		(x,	1);
	create_insn	(x=0X80509F82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509F9C);
	op_hex		(x,	1);
	create_insn	(x=0X80509FE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509FF0);
	op_stkvar	(x,	1);
	create_insn	(0X80509FFA);
	set_name	(0X80509FFA,	"ApplyDelayEffect6ch");
	create_insn	(x=0X8050A006);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A01C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A020);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A022);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A026);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A02A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A02E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A032);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A036);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A03C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A042);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A048);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A04E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A050);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A054);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A058);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A05C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A060);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A064);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A068);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A06C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A070);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A074);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A078);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A07C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A080);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A084);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A088);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A08E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A092);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A094);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A096);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A0FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A116);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A11A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A128);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A12E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A130);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A13E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A144);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A14E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A150);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A152);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A156);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A160);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A168);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A16E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A178);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A17E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A184);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A188);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A18E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A198);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A19A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A202);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A20C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A216);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A220);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A226);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A236);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A244);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A250);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A256);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A262);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A26E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A27A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A28C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A294);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A310);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A31A);
	op_stkvar	(x,	1);
	create_insn	(0X8050A324);
	set_name	(0X8050A324,	"nn::audio::InitializeDelayEffect");
	create_insn	(x=0X8050A40E);
	op_hex		(x,	1);
	create_insn	(0X8050A448);
	set_name	(0X8050A448,	"nn::audio::SetDelayEffectParameter");
	create_insn	(x=0X8050A478);
	op_hex		(x,	1);
	create_insn	(0X8050A4B0);
	set_name	(0X8050A4B0,	"ApplyDelayEffect");
	create_insn	(x=0X8050A4CA);
	op_hex		(x,	1);
	create_insn	(x=0X8050A4D2);
	op_stkvar	(x,	1);
	set_cmt	(0X8050A4DA,	"switch 6 cases",	0);
	set_cmt	(0X8050A4E6,	"switch jump",	0);
	set_cmt	(0X8050A4EA,	"jump table for switch statement",	0);
	create_word	(0X8050A4EA);
	set_name	(0X8050A4EA,	"jpt_8050A4E6");
	create_word	(0X8050A4EC);
	create_word	(0X8050A4EE);
	create_word	(0X8050A4F0);
	create_word	(0X8050A4F2);
	create_word	(0X8050A4F4);
	set_cmt	(0X8050A4F6,	"jumptable 8050A4E6 case 1",	1);
	create_insn	(0X8050A4F6);
	create_insn	(x=0X8050A506);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A50C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A510);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A516);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A51A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A520);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A522);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A52A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A530);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A536);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A55E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A576);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A582);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A588);
	op_stkvar	(x,	1);
	create_insn	(0X8050A5B6);
	set_cmt	(0X8050A5BA,	"a2",	0);
	set_cmt	(0X8050A5BC,	"a1",	0);
	set_cmt	(0X8050A5C2,	"a3",	0);
	set_cmt	(0X8050A5D2,	"jumptable 8050A4E6 case 4",	1);
	create_insn	(0X8050A5D2);
	create_insn	(x=0X8050A5DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A600);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A604);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A60A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A610);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A616);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A61E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A620);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A62A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A636);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A63A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A642);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A64A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A656);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A65A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A666);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A668);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A672);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A684);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A68E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A694);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A696);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A69A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A69C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A6DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A6E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A6EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A6FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A70A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A716);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A74A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A754);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A756);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A758);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A75E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A760);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A762);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A778);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A77A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A796);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A81A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A828);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A82A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A830);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A83A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A842);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A852);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A85C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A882);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A88C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A88E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A890);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A892);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A898);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A89E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A900);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A904);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A906);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A908);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A90A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A90C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A90E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A910);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A912);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A914);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A916);
	op_stkvar	(x,	1);
	set_cmt	(0X8050A918,	"state",	0);
	create_insn	(x=0X8050A918);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A91A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A91C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A91E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A920);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A922);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A924);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A928);
	op_stkvar	(x,	1);
	set_cmt	(0X8050A932,	"jumptable 8050A4E6 case 2",	1);
	create_insn	(0X8050A932);
	create_insn	(x=0X8050A93C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A942);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A944);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A950);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A954);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A95A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A960);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A966);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A96E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A97A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A984);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A988);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A994);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA38);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA88);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AADC);
	op_stkvar	(x,	1);
	set_cmt	(0X8050AADE,	"param",	0);
	create_insn	(x=0X8050AADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAE0);
	op_stkvar	(x,	1);
	set_cmt	(0X8050AAEA,	"jumptable 8050A4E6 case 6",	1);
	create_insn	(0X8050AAEA);
	set_cmt	(0X8050AAEC,	"outputBuffers",	0);
	set_cmt	(0X8050AAEE,	"sampleCount",	0);
	create_insn	(x=0X8050AAEE);
	op_stkvar	(x,	1);
	set_cmt	(0X8050AAFE,	"jumptable 8050A4E6 default case, cases 3,5",	1);
	create_insn	(0X8050AAFE);
	set_name	(0X8050AAFE,	"def_8050A4E6");
	set_cmt	(0X8050AB02,	"a2",	0);
	set_cmt	(0X8050AB04,	"a1",	0);
	set_cmt	(0X8050AB0A,	"a3",	0);
	create_insn	(0X8050AB1A);
	create_insn	(x=0X8050AB1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050AB22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050AB26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050AB2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050AB30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050AB34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050ABFA);
	set_name	(0X8050ABFA,	"nn::audio::InitializeLightLimiterEffect");
	create_insn	(x=0X8050AC6C);
	op_hex		(x,	1);
	create_insn	(0X8050AC92);
	create_insn	(0X8050ACDC);
	set_name	(0X8050ACDC,	"nn::audio::UpdateLightLimiterEffectParameter");
	create_insn	(0X8050ACE0);
	set_name	(0X8050ACE0,	"nn::audio::ApplyLightLimiterEffect");
	create_insn	(x=0X8050AD00);
	op_hex		(x,	1);
	create_insn	(x=0X8050AD08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD12);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD32);
	op_hex		(x,	1);
	set_cmt	(0X8050AD6C,	"switch 6 cases",	0);
	create_insn	(x=0X8050AD78);
	op_stkvar	(x,	1);
	set_cmt	(0X8050AD7A,	"switch jump",	0);
	set_cmt	(0X8050AD7E,	"jump table for switch statement",	0);
	create_word	(0X8050AD7E);
	set_name	(0X8050AD7E,	"jpt_8050AD7A");
	create_word	(0X8050AD80);
	create_word	(0X8050AD82);
	create_word	(0X8050AD84);
	create_word	(0X8050AD86);
	create_word	(0X8050AD88);
	set_cmt	(0X8050AD8A,	"jumptable 8050AD7A case 1",	1);
	create_insn	(0X8050AD8A);
	create_insn	(0X8050AEDA);
	set_cmt	(0X8050AEDE,	"a2",	0);
	set_cmt	(0X8050AEE2,	"a1",	0);
	set_cmt	(0X8050AEE8,	"a3",	0);
	set_cmt	(0X8050AF06,	"jumptable 8050AD7A case 4",	1);
	create_insn	(0X8050AF06);
	create_insn	(x=0X8050AF0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050AF10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AF16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X8050B088);
	create_float	(0X8050B08C);
	create_double	(0X8050B090);
	create_double	(0X8050B098);
	set_cmt	(0X8050B0A0,	"jumptable 8050AD7A case 2",	1);
	create_insn	(0X8050B0A0);
	create_insn	(x=0X8050B0A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B194);
	op_stkvar	(x,	1);
	set_cmt	(0X8050B1F4,	"jumptable 8050AD7A case 6",	1);
	create_insn	(0X8050B1F4);
	create_insn	(x=0X8050B204);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B208);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B20A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B210);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050B21A);
	create_insn	(x=0X8050B432);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B442);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B458);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B46A);
	op_stkvar	(x,	1);
	set_cmt	(0X8050B47A,	"jumptable 8050AD7A default case, cases 3,5",	1);
	create_insn	(0X8050B47A);
	set_name	(0X8050B47A,	"def_8050AD7A");
	set_cmt	(0X8050B484,	"a2",	0);
	set_cmt	(0X8050B488,	"a1",	0);
	set_cmt	(0X8050B48E,	"a3",	0);
	create_insn	(0X8050B4A0);
	create_insn	(0X8050B5A0);
	create_insn	(x=0X8050B5A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B5A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B5AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B5B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B5B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B5BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_oword	(0X8050B5D0);
	create_oword	(0X8050B5E0);
	create_double	(0X8050B5F0);
	create_double	(0X8050B5F8);
	create_float	(0X8050B600);
	create_float	(0X8050B604);
	create_insn	(0X8050B608);
	set_name	(0X8050B608,	"nn::audio::InitializeReverbEffect");
	set_cmt	(0X8050B830,	"state",	0);
	set_cmt	(0X8050B83A,	"param",	0);
	create_insn	(0X8050B8CA);
	set_name	(0X8050B8CA,	"nn::audio::UpdateReverbEffectParameter");
	create_insn	(x=0X8050B8D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B8E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B8E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B8EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B8F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BB66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BB6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BB76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BBA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050BBC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050BBC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050BBCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BBE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050BC94);
	op_stkvar	(x,	1);
	create_insn	(0X8050BCA2);
	create_insn	(x=0X8050BCC2);
	op_hex		(x,	1);
	create_insn	(0X8050BCD8);
	create_insn	(0X8050BCDC);
	create_insn	(x=0X8050BD4C);
	op_hex		(x,	1);
	create_insn	(0X8050BD7C);
	create_insn	(x=0X8050BD9E);
	op_hex		(x,	1);
	create_insn	(0X8050BDB0);
	create_insn	(0X8050BE34);
	create_insn	(0X8050BE4E);
	create_insn	(0X8050BE60);
	create_insn	(x=0X8050BE7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BEB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BEBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BEC2);
	op_plain_offset	(x,	1,	0X807B0364);
	op_plain_offset	(x,	129,	0X807B0364);
	create_insn	(x=0X8050BED8);
	op_hex		(x,	1);
	create_insn	(0X8050BF0A);
	create_insn	(0X8050BF1A);
	create_insn	(0X8050BF26);
	create_insn	(0X8050BF3E);
	create_insn	(0X8050BF4E);
	create_insn	(0X8050BF5E);
	create_insn	(0X8050BF6E);
	create_insn	(0X8050BF7A);
	create_insn	(0X8050BF88);
	create_insn	(0X8050BF92);
	create_insn	(0X8050BF9C);
	create_insn	(0X8050BFA6);
	create_insn	(0X8050BFB0);
	create_insn	(0X8050BFB8);
	create_insn	(x=0X8050C04A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C052);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C076);
	op_hex		(x,	1);
	create_insn	(0X8050C088);
	create_insn	(x=0X8050C110);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C120);
	op_stkvar	(x,	1);
	create_insn	(0X8050C128);
	create_insn	(0X8050C138);
	create_insn	(x=0X8050C152);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050C18E);
	create_insn	(0X8050C196);
	create_insn	(x=0X8050C1B8);
	op_hex		(x,	1);
	create_insn	(0X8050C1C4);
	create_insn	(x=0X8050C200);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C208);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C20C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C232);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C240);
	op_plain_offset	(x,	1,	0X807B0364);
	op_plain_offset	(x,	129,	0X807B0364);
	create_insn	(0X8050C244);
	create_insn	(x=0X8050C248);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C24C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C250);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C254);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C25A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C260);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050C26C);
	set_name	(0X8050C26C,	"ApplyReverbEffect");
	create_insn	(x=0X8050C286);
	op_hex		(x,	1);
	create_insn	(x=0X8050C2A4);
	op_stkvar	(x,	1);
	set_cmt	(0X8050C2AE,	"switch 6 cases",	0);
	create_insn	(x=0X8050C2BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C2BE);
	op_stkvar	(x,	1);
	set_cmt	(0X8050C2C2,	"switch jump",	0);
	set_cmt	(0X8050C2C6,	"jump table for switch statement",	0);
	create_word	(0X8050C2C6);
	set_name	(0X8050C2C6,	"jpt_8050C2C2");
	create_word	(0X8050C2C8);
	create_word	(0X8050C2CA);
	create_word	(0X8050C2CC);
	create_word	(0X8050C2CE);
	create_word	(0X8050C2D0);
	set_cmt	(0X8050C2D2,	"jumptable 8050C2C2 case 1",	1);
	create_insn	(0X8050C2D2);
	create_insn	(x=0X8050C2DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C2EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C2F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C302);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C308);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C30E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C314);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C31A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C320);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C326);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C32C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C332);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C334);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C33A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C342);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C34E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C35E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C36E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C37E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C390);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C3A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C3B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C3C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C3D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C3EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C3F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C408);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C410);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C414);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C41C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C420);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C424);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C428);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C430);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C432);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C446);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C46E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C4A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C4AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C4E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C4EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C518);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C51A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C57A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C57C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C5FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C604);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C606);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C60C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C612);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C614);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C61A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C61E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C624);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C626);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C628);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C62A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C630);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C632);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C638);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C63C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C640);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C642);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C658);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C65E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C660);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C666);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C66C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C66E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C674);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C67A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C686);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C68C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C700);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C706);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C70C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C724);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C72A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C742);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C744);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C74A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C74C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C750);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C758);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C75E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C764);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C766);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C770);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C774);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C78E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C794);
	op_stkvar	(x,	1);
	create_insn	(0X8050C7A4);
	set_cmt	(0X8050C7A8,	"a2",	0);
	set_cmt	(0X8050C7AA,	"a1",	0);
	set_cmt	(0X8050C7B0,	"a3",	0);
	set_cmt	(0X8050C7C6,	"jumptable 8050C2C2 case 4",	1);
	create_insn	(0X8050C7C6);
	create_insn	(x=0X8050C7D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C800);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C802);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C80E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C812);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C818);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C81E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C824);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C82A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C830);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C83C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C83E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C840);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C84C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C852);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C85C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C862);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C86E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C892);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C894);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C8BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C8D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C8E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C8F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C906);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C916);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C928);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C93C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C942);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C950);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C954);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C958);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C95C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C960);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C976);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C97A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C97E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C982);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C98A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C98C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C99A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB00);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB34);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB66);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC58);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC80);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD20);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD80);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD8A);
	op_stkvar	(x,	1);
	set_cmt	(0X8050CD98,	"jumptable 8050C2C2 case 2",	1);
	create_insn	(0X8050CD98);
	create_insn	(x=0X8050CDA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CECE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF88);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D02E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D048);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D062);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D064);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D102);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D108);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D10A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D110);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D112);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D114);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D120);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D122);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D128);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D12A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D140);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D146);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D148);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D14E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D150);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D156);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D162);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D168);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D184);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D18E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D20C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D20E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D224);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D228);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D22A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D232);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D234);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D238);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D240);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D244);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D24A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D250);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D258);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D25C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D26C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D27A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D28A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D298);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D29C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2B8);
	op_stkvar	(x,	1);
	set_cmt	(0X8050D2C6,	"jumptable 8050C2C2 case 6",	1);
	create_insn	(0X8050D2C6);
	create_insn	(x=0X8050D2D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D300);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D304);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D30C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D310);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D316);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D31C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D322);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D328);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D32E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D334);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D33A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D340);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D34A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D34E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D352);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D384);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D39A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D408);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D42E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D444);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D450);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D454);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D458);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D45C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D48E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D502);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D504);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D518);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D524);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D536);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D544);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D55A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D564);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D58E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D590);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D606);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D60C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D60E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D610);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D612);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D614);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D622);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D624);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D63E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D640);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D644);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D662);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D664);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D668);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D66A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D674);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D688);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D68E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D722);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D72E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D754);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D756);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D778);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D77A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D780);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D782);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D784);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D792);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D79E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D80A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D83C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D85A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D866);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D86C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D88A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D896);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D8C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D8D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D8DC);
	op_stkvar	(x,	1);
	set_cmt	(0X8050D8EA,	"jumptable 8050C2C2 default case, cases 3,5",	1);
	create_insn	(0X8050D8EA);
	set_name	(0X8050D8EA,	"def_8050C2C2");
	set_cmt	(0X8050D8EE,	"a2",	0);
	set_cmt	(0X8050D8F0,	"a1",	0);
	set_cmt	(0X8050D8F6,	"a3",	0);
	create_insn	(0X8050D908);
	create_insn	(x=0X8050D90C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D910);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D914);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D918);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D91C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D91E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D922);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050D92E);
	create_insn	(x=0X8050D932);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D936);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D93A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D93E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D942);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D944);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D948);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050D954);
	create_insn	(x=0X8050D958);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D95C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D960);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D964);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D968);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D96A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050D96E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050D97A);
	create_insn	(0X8050DA9E);
	set_name	(0X8050DA9E,	"DivQfQf");
	create_insn	(x=0X8050DAD2);
	op_hex		(x,	1);
	create_insn	(x=0X8050DAF2);
	op_hex		(x,	1);
	create_insn	(0X8050DB06);
	create_insn	(0X8050DB5E);
	create_insn	(x=0X8050DB64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DB68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DB6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DB70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DB76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DB7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050DBB8);
	set_name	(0X8050DBB8,	"nn::audio::detail::ApplyI3dl2ReverbEffect1ch");
	create_insn	(x=0X8050DBCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC48);
	op_stkvar	(x,	1);
	create_float	(0X8050DC4C);
	create_float	(0X8050DC50);
	create_float	(0X8050DC54);
	create_float	(0X8050DC58);
	create_float	(0X8050DC5C);
	create_float	(0X8050DC60);
	create_float	(0X8050DC64);
	create_float	(0X8050DC68);
	create_float	(0X8050DC6C);
	create_float	(0X8050DC70);
	create_float	(0X8050DC74);
	create_float	(0X8050DC78);
	create_float	(0X8050DC7C);
	create_float	(0X8050DC80);
	create_float	(0X8050DC84);
	create_float	(0X8050DC88);
	create_float	(0X8050DC8C);
	create_float	(0X8050DC90);
	create_float	(0X8050DC94);
	create_float	(0X8050DC98);
	create_float	(0X8050DC9C);
	create_float	(0X8050DCA0);
	create_float	(0X8050DCA4);
	create_insn	(x=0X8050DCA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DD08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E010);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E042);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E0D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E0D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E0DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E0E2);
	op_stkvar	(x,	1);
	create_insn	(0X8050E1DC);
	create_float	(0X8050E1EC);
	create_insn	(0X8050E1F0);
	set_name	(0X8050E1F0,	"nn::audio::detail::ApplyI3dl2ReverbEffect2ch");
	create_insn	(x=0X8050E222);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E22E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E232);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E238);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E23A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E260);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E264);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E268);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E26E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E274);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E27A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E280);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E282);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E302);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E308);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E30E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E314);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E31A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E31C);
	op_stkvar	(x,	1);
	create_float	(0X8050E320);
	create_float	(0X8050E324);
	create_float	(0X8050E328);
	create_float	(0X8050E32C);
	create_float	(0X8050E330);
	create_float	(0X8050E334);
	create_float	(0X8050E338);
	create_float	(0X8050E33C);
	create_float	(0X8050E340);
	create_insn	(x=0X8050E344);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E346);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E35A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E368);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E376);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E384);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E396);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E3A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E3BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E3CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E3DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E3F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E402);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E414);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E426);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E438);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E44A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E49C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E504);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E53E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E564);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E596);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E5F4);
	op_stkvar	(x,	1);
	set_cmt	(0X8050E6CE,	"fdnDecayLine",	0);
	set_cmt	(0X8050E6D6,	"sample",	0);
	set_cmt	(0X8050E6E2,	"sample",	0);
	create_insn	(x=0X8050E6E6);
	op_stkvar	(x,	1);
	set_cmt	(0X8050E6EA,	"fdnDecayLine",	0);
	set_cmt	(0X8050E6F0,	"sample",	0);
	create_insn	(x=0X8050E6F4);
	op_stkvar	(x,	1);
	set_cmt	(0X8050E6F8,	"fdnDecayLine",	0);
	create_insn	(x=0X8050E702);
	op_stkvar	(x,	1);
	set_cmt	(0X8050E704,	"fdnDecayLine",	0);
	set_cmt	(0X8050E70A,	"sample",	0);
	create_insn	(x=0X8050E712);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E7A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E7A8);
	op_stkvar	(x,	1);
	create_float	(0X8050E7C8);
	create_float	(0X8050E7CC);
	create_float	(0X8050E7D0);
	create_float	(0X8050E7D4);
	create_float	(0X8050E7D8);
	create_float	(0X8050E7DC);
	create_float	(0X8050E7E0);
	create_float	(0X8050E7E4);
	create_float	(0X8050E7E8);
	create_float	(0X8050E7EC);
	create_float	(0X8050E7F0);
	create_float	(0X8050E7F4);
	create_float	(0X8050E7F8);
	create_float	(0X8050E7FC);
	create_float	(0X8050E800);
	create_insn	(0X8050E804);
	set_name	(0X8050E804,	"nn::audio::detail::ApplyI3dl2ReverbEffect4ch");
	create_insn	(x=0X8050E816);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E828);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E834);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E840);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E85E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E862);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E864);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E86A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E874);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E886);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E88A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E890);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E896);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E904);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E90A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E910);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E916);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E91C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E922);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E928);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E92A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E930);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E938);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E93E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E940);
	op_stkvar	(x,	1);
	create_float	(0X8050E944);
	create_float	(0X8050E948);
	create_float	(0X8050E94C);
	create_float	(0X8050E950);
	create_float	(0X8050E954);
	create_float	(0X8050E958);
	create_float	(0X8050E95C);
	create_float	(0X8050E960);
	create_insn	(x=0X8050E964);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E980);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E992);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E9A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E9AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E9D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E9F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA86);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EACE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EAEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EB3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EB60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EB9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EBFE);
	op_stkvar	(x,	1);
	set_cmt	(0X8050EC4E,	"fdnDecayLine",	0);
	create_insn	(x=0X8050EC4E);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ECEC,	"decayLine1",	0);
	create_insn	(x=0X8050ECEC);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ED00,	"sample",	0);
	set_cmt	(0X8050ED0A,	"decayLine1",	0);
	create_insn	(x=0X8050ED0A);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ED0E,	"sample",	0);
	set_cmt	(0X8050ED12,	"fdnDecayLine",	0);
	create_insn	(x=0X8050ED12);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ED1A,	"decayLine1",	0);
	create_insn	(x=0X8050ED1A);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ED1E,	"sample",	0);
	set_cmt	(0X8050ED22,	"fdnDecayLine",	0);
	create_insn	(x=0X8050ED22);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ED2A,	"decayLine1",	0);
	create_insn	(x=0X8050ED2A);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ED2E,	"sample",	0);
	set_cmt	(0X8050ED32,	"fdnDecayLine",	0);
	create_insn	(x=0X8050ED32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED38);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE88);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE96);
	op_stkvar	(x,	1);
	create_float	(0X8050EEAC);
	create_float	(0X8050EEB0);
	create_float	(0X8050EEB4);
	create_float	(0X8050EEB8);
	create_float	(0X8050EEBC);
	create_float	(0X8050EEC0);
	create_float	(0X8050EEC4);
	create_float	(0X8050EEC8);
	create_float	(0X8050EECC);
	create_float	(0X8050EED0);
	create_float	(0X8050EED4);
	create_float	(0X8050EED8);
	create_float	(0X8050EEDC);
	create_float	(0X8050EEE0);
	create_float	(0X8050EEE4);
	create_float	(0X8050EEE8);
	create_insn	(0X8050EEEC);
	set_name	(0X8050EEEC,	"nn::audio::detail::ApplyI3dl2ReverbEffect6ch");
	create_insn	(x=0X8050EEFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF34);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF48);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF66);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF86);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F004);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F00A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F010);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F018);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F01E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F020);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F022);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F026);
	op_stkvar	(x,	1);
	create_float	(0X8050F02C);
	create_float	(0X8050F030);
	create_float	(0X8050F034);
	create_float	(0X8050F038);
	create_float	(0X8050F03C);
	create_float	(0X8050F040);
	create_float	(0X8050F044);
	create_float	(0X8050F048);
	create_float	(0X8050F04C);
	create_float	(0X8050F050);
	create_float	(0X8050F054);
	create_float	(0X8050F058);
	create_float	(0X8050F05C);
	create_float	(0X8050F060);
	create_float	(0X8050F064);
	create_float	(0X8050F068);
	create_float	(0X8050F06C);
	create_float	(0X8050F070);
	create_float	(0X8050F074);
	create_float	(0X8050F078);
	create_float	(0X8050F07C);
	create_float	(0X8050F080);
	create_float	(0X8050F084);
	create_float	(0X8050F088);
	create_insn	(x=0X8050F08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F0A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F0C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F0E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F10A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F11C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F12E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F140);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F152);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F164);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F176);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F188);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F1C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F1E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F22E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F25C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F27E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F29C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F2BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F2D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F336);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F3F6,	"fdnDecayLine",	0);
	create_insn	(x=0X8050F3F6);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F490,	"decayLine1",	0);
	create_insn	(x=0X8050F490);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F4A4,	"sample",	0);
	set_cmt	(0X8050F4AE,	"decayLine1",	0);
	create_insn	(x=0X8050F4AE);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F4B2,	"sample",	0);
	set_cmt	(0X8050F4B6,	"fdnDecayLine",	0);
	create_insn	(x=0X8050F4B6);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F4BE,	"decayLine1",	0);
	create_insn	(x=0X8050F4BE);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F4C2,	"sample",	0);
	set_cmt	(0X8050F4C6,	"fdnDecayLine",	0);
	create_insn	(x=0X8050F4C6);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F4CE,	"decayLine1",	0);
	create_insn	(x=0X8050F4CE);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F4D2,	"sample",	0);
	set_cmt	(0X8050F4D6,	"fdnDecayLine",	0);
	create_insn	(x=0X8050F4D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F4DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F52E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F530);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F580);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F582);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F5CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F620);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F62A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F678);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F6B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F6FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F70A);
	op_stkvar	(x,	1);
	create_insn	(0X8050F720);
	set_name	(0X8050F720,	"nn::audio::InitializeI3dl2ReverbEffect");
	create_insn	(x=0X8050F736);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F74C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050F760);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F76A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F76C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050F774);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F776);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050F786);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F78C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F7A8);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F7B8,	"int",	0);
	set_cmt	(0X8050F7BA,	"int",	0);
	set_cmt	(0X8050F80A,	"int",	0);
	set_cmt	(0X8050F810,	"int",	0);
	create_insn	(x=0X8050F834);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F84E);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F86C,	"int",	0);
	set_cmt	(0X8050F872,	"int",	0);
	create_insn	(x=0X8050F896);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F8B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F8C4);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F8DC,	"int",	0);
	set_cmt	(0X8050F8E8,	"int",	0);
	set_cmt	(0X8050F920,	"int",	0);
	set_cmt	(0X8050F92C,	"int",	0);
	set_cmt	(0X8050F948,	"param",	0);
	create_insn	(x=0X8050F948);
	op_stkvar	(x,	1);
	set_cmt	(0X8050F94A,	"state",	0);
	set_cmt	(0X8050F94C,	"doReset",	0);
	create_float	(0X8050F960);
	create_insn	(0X8050F964);
	set_name	(0X8050F964,	"nn::audio::UpdateI3dl2ReverbEffectParameter");
	create_insn	(0X8050F9E4);
	create_insn	(x=0X8050FA02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050FA8C);
	create_insn	(x=0X8050FAAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FAF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FAFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FB2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FB32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FB38);
	op_stkvar	(x,	1);
	create_insn	(0X8050FB50);
	create_insn	(0X8050FB62);
	create_insn	(x=0X8050FB80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FC54);
	op_stkvar	(x,	1);
	create_insn	(0X8050FC66);
	create_insn	(0X8050FC72);
	create_insn	(0X8050FC7A);
	create_insn	(0X8050FC8E);
	create_insn	(0X8050FC9A);
	create_float	(0X8050FCA8);
	create_float	(0X8050FCAC);
	create_float	(0X8050FCB0);
	create_float	(0X8050FCB4);
	create_float	(0X8050FCB8);
	create_float	(0X8050FCBC);
	create_float	(0X8050FCC0);
	create_insn	(0X8050FCC4);
	create_insn	(x=0X8050FCF6);
	op_hex		(x,	1);
	create_insn	(x=0X8050FD26);
	op_hex		(x,	1);
	create_insn	(0X8050FD82);
	create_insn	(0X8050FDA6);
	create_insn	(x=0X8050FDD2);
	op_hex		(x,	1);
	create_insn	(0X8050FDDE);
	create_insn	(0X8050FE2C);
	create_insn	(x=0X8050FE54);
	op_hex		(x,	1);
	create_insn	(0X8050FE60);
	create_insn	(x=0X8050FEAE);
	op_hex		(x,	1);
	create_insn	(0X8050FEBA);
	create_insn	(x=0X8050FF08);
	op_hex		(x,	1);
	create_insn	(0X8050FF14);
	create_insn	(x=0X8050FF62);
	op_hex		(x,	1);
	create_insn	(0X8050FF6E);
	create_insn	(x=0X8050FFBC);
	op_hex		(x,	1);
	create_insn	(0X8050FFC8);
	create_insn	(0X8050FFD6);
	create_insn	(x=0X80510022);
	op_hex		(x,	1);
	create_insn	(0X8051002E);
	create_insn	(0X8051003C);
	create_insn	(x=0X80510082);
	op_hex		(x,	1);
	create_insn	(0X8051008E);
	create_insn	(0X8051009E);
	create_insn	(x=0X805100BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805100C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805100F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805100F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510178);
	op_stkvar	(x,	1);
	create_insn	(0X80510192);
	create_insn	(x=0X805101DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805101EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805101F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805101FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80510248);
	set_cmt	(0X8051024C,	"int",	0);
	set_cmt	(0X8051025A,	"int",	0);
	create_insn	(x=0X80510266);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051026A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051026E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051037A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510418);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X80510464);
	create_float	(0X80510468);
	create_float	(0X8051046C);
	create_float	(0X80510470);
	create_float	(0X80510474);
	create_float	(0X80510478);
	create_float	(0X8051047C);
	create_float	(0X80510480);
	create_float	(0X80510484);
	create_float	(0X80510488);
	create_float	(0X8051048C);
	create_float	(0X80510490);
	create_insn	(x=0X80510494);
	op_stkvar	(x,	1);
	create_insn	(x=0X805105AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805105B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805105CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051062A);
	create_insn	(0X8051063A);
	create_insn	(0X8051064A);
	create_insn	(0X8051065A);
	create_insn	(0X80510666);
	create_insn	(0X80510684);
	create_insn	(0X8051068A);
	create_insn	(x=0X8051068E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510692);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510696);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	create_insn	(x=0X8051069A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805106A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805106A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X805106B0);
	create_float	(0X805106B4);
	create_insn	(0X805106B8);
	set_name	(0X805106B8,	"ApplyI3dl2ReverbEffect");
	create_insn	(x=0X805106CE);
	op_hex		(x,	1);
	set_cmt	(0X805106D6,	"sampleCount",	0);
	create_insn	(x=0X805106D6);
	op_stkvar	(x,	1);
	set_cmt	(0X805106DC,	"switch 6 cases",	0);
	set_cmt	(0X805106E2,	"switch jump",	0);
	set_cmt	(0X805106E6,	"jump table for switch statement",	0);
	create_byte	(0X805106E6);
	set_name	(0X805106E6,	"jpt_805106E2");
	create_byte	(0X805106E7);
	create_byte	(0X805106E8);
	create_byte	(0X805106E9);
	create_byte	(0X805106EA);
	create_byte	(0X805106EB);
	set_cmt	(0X805106EC,	"jumptable 805106E2 case 1",	1);
	create_insn	(0X805106EC);
	set_cmt	(0X805106EE,	"inputs",	0);
	set_cmt	(0X805106F0,	"outputs",	0);
	create_insn	(0X805106FE);
	set_cmt	(0X80510702,	"a2",	0);
	set_cmt	(0X80510704,	"a1",	0);
	set_cmt	(0X8051070A,	"a3",	0);
	set_cmt	(0X8051071A,	"jumptable 805106E2 case 4",	1);
	create_insn	(0X8051071A);
	set_cmt	(0X8051072C,	"jumptable 805106E2 case 2",	1);
	create_insn	(0X8051072C);
	set_cmt	(0X8051072E,	"inputs",	0);
	set_cmt	(0X80510730,	"outputs",	0);
	set_cmt	(0X8051073E,	"jumptable 805106E2 case 6",	1);
	create_insn	(0X8051073E);
	set_cmt	(0X80510740,	"inputs",	0);
	set_cmt	(0X80510742,	"outputs",	0);
	set_cmt	(0X80510750,	"jumptable 805106E2 default case, cases 3,5",	1);
	create_insn	(0X80510750);
	set_name	(0X80510750,	"def_805106E2");
	set_cmt	(0X80510754,	"a2",	0);
	set_cmt	(0X80510756,	"a1",	0);
	set_cmt	(0X8051075C,	"a3",	0);
	create_insn	(0X8051076C);
	create_insn	(x=0X80510770);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510774);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510778);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051077C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510782);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510786);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80510794);
	create_insn	(0X805108EE);
	create_insn	(x=0X80510900);
	op_hex		(x,	1);
	create_insn	(0X80510944);
	create_insn	(0X8051095C);
	create_insn	(0X80510972);
	create_insn	(x=0X80510986);
	op_hex		(x,	1);
	create_insn	(0X805109CA);
	create_insn	(x=0X805109DC);
	op_hex		(x,	1);
	create_insn	(0X80510A22);
	create_insn	(0X80510A3A);
	create_insn	(0X80510A50);
	create_insn	(x=0X80510A64);
	op_hex		(x,	1);
	create_insn	(0X80510AAA);
	create_insn	(0X80510ADA);
	create_insn	(0X80510B12);
	create_insn	(0X80510B48);
	create_insn	(0X80510B7C);
	create_insn	(0X80510BAE);
	create_insn	(0X80510BDE);
	create_insn	(0X80510C16);
	create_insn	(0X80510C50);
	create_insn	(0X80510C8A);
	create_insn	(0X80510CB2);
	create_insn	(x=0X80510CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510CDA);
	op_hex		(x,	1);
	create_insn	(x=0X80510CE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510CFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510D0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510D2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510D8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510DC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510DC4);
	op_stkvar	(x,	1);
	create_insn	(0X80510DCC);
	create_insn	(0X80510DFE);
	create_insn	(0X80510E26);
	create_oword	(0X80510E60);
	create_insn	(0X80510E70);
	create_insn	(0X80510E92);
	create_insn	(0X80510EC6);
	create_insn	(0X80510EE8);
	create_insn	(0X80510F20);
	create_insn	(x=0X80510F4E);
	op_hex		(x,	1);
	create_insn	(x=0X80510F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510F5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511032);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511034);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511036);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511038);
	op_stkvar	(x,	1);
	create_insn	(0X80511042);
	create_oword	(0X80511080);
	create_insn	(0X80511090);
	create_insn	(x=0X80511098);
	op_stkvar	(x,	1);
	create_insn	(x=0X805110C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805110CC);
	op_hex		(x,	1);
	create_insn	(x=0X805110E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80511126);
	create_insn	(0X8051112E);
	create_oword	(0X80511170);
	create_oword	(0X80511180);
	create_insn	(0X80511190);
	create_insn	(x=0X80511194);
	op_stkvar	(x,	1);
	create_insn	(0X805111DA);
	create_insn	(0X805111FC);
	create_insn	(0X8051123A);
	create_insn	(x=0X8051123E);
	op_stkvar	(x,	1);
	create_insn	(0X8051129E);
	create_insn	(0X805112C0);
	create_insn	(0X80511310);
	create_insn	(0X8051134A);
	create_insn	(0X80511372);
	create_insn	(x=0X80511398);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051139A);
	op_hex		(x,	1);
	create_insn	(x=0X805113A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805113A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805113BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805113C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805113CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805113E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805113EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051142C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511440);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051144A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511458);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511482);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511484);
	op_stkvar	(x,	1);
	create_insn	(0X8051148C);
	create_insn	(0X805114BE);
	create_insn	(0X805114E6);
	create_oword	(0X80511520);
	create_insn	(0X80511530);
	create_insn	(0X80511552);
	create_insn	(0X80511586);
	create_insn	(0X805115A8);
	create_insn	(0X805115E0);
	create_insn	(x=0X8051160E);
	op_hex		(x,	1);
	create_insn	(x=0X80511616);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051161C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051161E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511628);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051162C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051162E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511660);
	op_stkvar	(x,	1);
	create_insn	(x=0X805116A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805116F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805116F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805116F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805116F8);
	op_stkvar	(x,	1);
	create_insn	(0X80511702);
	create_oword	(0X80511740);
	create_insn	(0X80511750);
	create_insn	(x=0X80511758);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051178C);
	op_hex		(x,	1);
	create_insn	(x=0X805117A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805117E6);
	create_insn	(0X805117EE);
	create_oword	(0X80511830);
	create_oword	(0X80511840);
	create_insn	(0X80511850);
	create_insn	(x=0X80511854);
	op_stkvar	(x,	1);
	create_insn	(0X8051189A);
	create_insn	(0X805118BC);
	create_insn	(0X805118FA);
	create_insn	(x=0X805118FE);
	op_stkvar	(x,	1);
	create_insn	(0X8051195E);
	create_insn	(0X80511980);
	create_insn	(0X805119D0);
	set_name	(0X805119D0,	"ApplyMix");
	create_insn	(x=0X805119DA);
	op_stkvar	(x,	1);
	create_insn	(0X80511A18);
	create_insn	(0X80511A4A);
	create_insn	(0X80511A72);
	create_insn	(0X80511A9A);
	create_insn	(x=0X80511AC0);
	op_hex		(x,	1);
	create_insn	(x=0X80511AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511ACE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80511AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511AF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511B12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511BAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511BAC);
	op_stkvar	(x,	1);
	create_insn	(0X80511BB6);
	create_insn	(x=0X80511BDC);
	op_hex		(x,	1);
	create_insn	(x=0X80511BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511BEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80511BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511C9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511CCA);
	op_stkvar	(x,	1);
	create_insn	(0X80511CD2);
	create_insn	(0X80511D06);
	create_insn	(0X80511D38);
	create_insn	(0X80511D62);
	create_insn	(0X80511D8C);
	create_insn	(0X80511DBE);
	create_oword	(0X80511E00);
	create_oword	(0X80511E10);
	create_insn	(0X80511E20);
	create_insn	(0X80511E46);
	create_insn	(0X80511E6A);
	create_insn	(0X80511E94);
	create_insn	(0X80511EC0);
	set_name	(0X80511EC0,	"nn::audio::dsp::ApplyMixRamp");
	create_insn	(x=0X80511EC8);
	op_stkvar	(x,	1);
	create_insn	(0X80511F32);
	create_insn	(0X80511F8E);
	create_insn	(0X80511FF6);
	create_insn	(0X8051205E);
	create_insn	(x=0X80512088);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512094);
	op_hex		(x,	1);
	create_insn	(x=0X805120A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805120EC);
	create_insn	(x=0X80512114);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512120);
	op_hex		(x,	1);
	create_insn	(x=0X80512134);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051217C);
	create_insn	(0X80512184);
	create_insn	(0X805121AE);
	create_insn	(0X805121D8);
	create_insn	(0X80512200);
	create_insn	(0X80512228);
	create_insn	(0X8051225E);
	create_insn	(0X80512294);
	create_insn	(0X805122DC);
	create_insn	(0X80512324);
	create_insn	(0X80512360);
	create_oword	(0X805123A0);
	create_oword	(0X805123B0);
	create_oword	(0X805123C0);
	create_insn	(x=0X805123D0);
	op_stkvar	(x,	1);
	create_insn	(0X8051240C);
	create_float	(0X80512418);
	create_insn	(x=0X8051241C);
	op_stkvar	(x,	1);
	create_float	(0X805124A4);
	create_insn	(x=0X805124A8);
	op_stkvar	(x,	1);
	create_insn	(0X805124EA);
	create_insn	(0X80512564);
	create_float	(0X80512570);
	create_insn	(0X80512574);
	set_name	(0X80512574,	"Resample_NormalQuality");
	create_insn	(x=0X80512586);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051258A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051258E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512596);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512598);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051259C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805125A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805125AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805125B6);
	op_hex		(x,	1);
	create_insn	(x=0X805125BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805125C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512606);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512628);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051262E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805126C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805126DC);
	op_stkvar	(x,	1);
	create_insn	(0X805126EE);
	set_name	(0X805126EE,	"Resample_LowQuality");
	create_insn	(x=0X805126F2);
	op_stkvar	(x,	1);
	create_insn	(0X8051272C);
	set_name	(0X8051272C,	"Resample_HighQuality");
	create_insn	(x=0X8051273C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051273E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512742);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051274C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512750);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512754);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051275C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051276C);
	op_hex		(x,	1);
	create_insn	(x=0X80512770);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512800);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051281A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512822);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051282C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051283E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805128E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805128E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805128EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805128FE);
	op_stkvar	(x,	1);
	create_insn	(0X80512910);
	set_name	(0X80512910,	"Resample");
	create_insn	(x=0X8051291A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051292A,	"sampleCount",	0);
	create_insn	(x=0X8051292A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051293A,	"sampleCount",	0);
	create_insn	(x=0X8051293A);
	op_stkvar	(x,	1);
	create_insn	(0X80512948);
	create_insn	(0X8051297C);
	create_insn	(x=0X80512982);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512986);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051298A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051298E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512992);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512994);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512998);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805129A4);
	create_insn	(0X805129D0);
	set_name	(0X805129D0,	"SrcProcessFrame");
	create_insn	(x=0X805129DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805129E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805129E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512A06);
	op_stkvar	(x,	1);
	create_insn	(0X80512A0E);
	create_insn	(x=0X80512A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512A5C);
	op_stkvar	(x,	1);
	create_insn	(0X80512A60);
	create_insn	(x=0X80512A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512A92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512A9E);
	op_stkvar	(x,	1);
	create_insn	(0X80512AD8);
	create_insn	(x=0X80512AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512B02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512B08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512B12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512B46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512BA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512BAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512BDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512BE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512BF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512C4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512C54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512C82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512C90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512C96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512C9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512CBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512CC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512D16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512D1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512D46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512D52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512D58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512D60);
	op_stkvar	(x,	1);
	create_insn	(0X80512D8A);
	create_insn	(x=0X80512DB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512DC6);
	op_stkvar	(x,	1);
	create_insn	(0X80512DCA);
	create_insn	(x=0X80512DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512DFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512E06);
	op_stkvar	(x,	1);
	create_insn	(0X80512E40);
	create_insn	(x=0X80512E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512E68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512E6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80512EA2);
	create_insn	(x=0X80512EAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512EC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512ECE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512ED4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512F08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512F0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512F36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512F66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512F6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512F96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512FA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512FAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512FB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512FD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512FD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513004);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513032);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513038);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513040);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513062);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051306E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513074);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051307C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051307E);
	op_stkvar	(x,	1);
	create_insn	(0X805130A6);
	create_insn	(x=0X805130CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805130E2);
	op_stkvar	(x,	1);
	create_insn	(0X805130E6);
	create_insn	(x=0X805130F2);
	op_stkvar	(x,	1);
	set_cmt	(0X805130FC,	"jumptable 8051310E default case",	1);
	create_insn	(x=0X805130FC);
	op_stkvar	(x,	1);
	set_name	(0X805130FC,	"def_8051310E");
	set_cmt	(0X8051310A,	"switch 6 cases",	0);
	set_cmt	(0X8051310E,	"switch jump",	0);
	set_cmt	(0X80513112,	"jump table for switch statement",	0);
	create_word	(0X80513112);
	set_name	(0X80513112,	"jpt_8051310E");
	create_word	(0X80513114);
	create_word	(0X80513116);
	create_word	(0X80513118);
	create_word	(0X8051311A);
	create_word	(0X8051311C);
	set_cmt	(0X8051311E,	"jumptable 8051310E case 0",	1);
	create_insn	(x=0X8051311E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513128);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051312A);
	op_stkvar	(x,	1);
	set_cmt	(0X80513164,	"jumptable 8051310E case 4",	1);
	create_insn	(0X80513164);
	create_insn	(x=0X80513170);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513174);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051318E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513194);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051319E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805131C0);
	op_stkvar	(x,	1);
	set_cmt	(0X805131D0,	"jumptable 8051310E case 2",	1);
	create_insn	(0X805131D0);
	create_insn	(x=0X805131DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805131E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805131FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513200);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051320A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051322C);
	op_stkvar	(x,	1);
	set_cmt	(0X8051323C,	"jumptable 8051310E case 3",	1);
	create_insn	(0X8051323C);
	create_insn	(x=0X80513248);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051324C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513266);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051326C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513276);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513298);
	op_stkvar	(x,	1);
	set_cmt	(0X805132A8,	"jumptable 8051310E case 1",	1);
	create_insn	(0X805132A8);
	create_insn	(x=0X805132B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805132B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805132D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805132D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805132E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513304);
	op_stkvar	(x,	1);
	set_cmt	(0X80513314,	"jumptable 8051310E case 5",	1);
	create_insn	(0X80513314);
	create_insn	(x=0X80513320);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513324);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051333E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513344);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051334C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051336E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051337E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513386);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805133E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805133E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805133EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513410);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051341E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513424);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051342C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051344A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513452);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805134AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805134B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805134BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805134DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805134E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805134EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805134F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513520);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513528);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513582);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513588);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513590);
	op_stkvar	(x,	1);
	create_insn	(x=0X805135B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805135BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805135C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805135CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805135F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805135FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513658);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051365E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513666);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513688);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513694);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051369A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805136A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805136CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805136D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051372E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513734);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051373C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051375E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051376A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513770);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513778);
	op_stkvar	(x,	1);
	create_insn	(0X805137A2);
	create_insn	(0X805137AA);
	create_insn	(x=0X805137B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805137B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805137B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805137BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805137C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805137C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80513E40);
	set_name	(0X80513E40,	"ApplyUniformGain");
	create_insn	(x=0X80513E4A);
	op_stkvar	(x,	1);
	create_insn	(0X80513E80);
	create_insn	(0X80513EAA);
	create_insn	(0X80513ED2);
	create_insn	(0X80513EFA);
	create_insn	(x=0X80513F20);
	op_hex		(x,	1);
	create_insn	(x=0X80513F28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513FD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514002);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514004);
	op_stkvar	(x,	1);
	create_insn	(0X8051400E);
	create_insn	(x=0X80514034);
	op_hex		(x,	1);
	create_insn	(x=0X8051403C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514042);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514044);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051405C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051405E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051406C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514072);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514080);
	op_stkvar	(x,	1);
	create_insn	(x=0X805140CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805140DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805140E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805140F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051411A);
	op_stkvar	(x,	1);
	create_insn	(0X80514122);
	create_insn	(0X80514150);
	create_oword	(0X80514190);
	create_oword	(0X805141A0);
	create_insn	(0X80514230);
	set_name	(0X80514230,	"ApplyLinearEnvelopeGain");
	create_insn	(x=0X80514238);
	op_stkvar	(x,	1);
	create_insn	(0X80514288);
	create_insn	(0X805142CA);
	create_insn	(0X80514318);
	create_insn	(0X80514366);
	create_insn	(x=0X8051438C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514398);
	op_hex		(x,	1);
	create_insn	(x=0X805143AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805143E2);
	create_insn	(x=0X80514406);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514412);
	op_hex		(x,	1);
	create_insn	(x=0X80514426);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051445C);
	create_insn	(0X80514490);
	create_oword	(0X805144D0);
	create_oword	(0X805144E0);
	create_oword	(0X805144F0);
	set_cmt	(0X80514634,	"error_handler",	0);
	create_insn	(0X80514634);
	set_name	(0X80514634,	"Mailbox::Open");
	create_insn	(0X8051463E);
	set_name	(0X8051463E,	"Mailbox::Close");
	create_insn	(0X80514648);
	set_name	(0X80514648,	"Mailbox::Send");
	create_insn	(0X8051465C);
	create_insn	(x=0X80514662);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514666);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051466A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051466E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514674);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514678);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80514684);
	set_name	(0X80514684,	"Mailbox::Receive_Wrap");
	create_insn	(0X8051468E);
	set_name	(0X8051468E,	"nullsub_13");
	create_insn	(0X80514690);
	set_name	(0X80514690,	"nullsub_12");
	create_insn	(0X80514692);
	set_name	(0X80514692,	"mbox_open");
	create_insn	(x=0X805146A6);
	op_stkvar	(x,	1);
	set_cmt	(0X805146AA,	"mbx_id",	0);
	create_insn	(x=0X805146AA);
	op_stkvar	(x,	1);
	set_cmt	(0X805146AE,	"name",	0);
	set_cmt	(0X805146B0,	"sem",	0);
	set_cmt	(0X805146B2,	"err_handler",	0);
	create_insn	(x=0X805146B2);
	op_stkvar	(x,	1);
	set_cmt	(0X805146B6,	"context",	0);
	create_insn	(x=0X805146B6);
	op_stkvar	(x,	1);
	set_cmt	(0X805146B8,	"mbx",	0);
	create_insn	(x=0X805146D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805146DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805146E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805146E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805146E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805146EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805146EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805146FA);
	create_insn	(x=0X805146FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514702);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514706);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051470A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051470E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514710);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514714);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80514720);
	create_insn	(x=0X80514724);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051472C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514730);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514734);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514736);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051473A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80514746);
	create_insn	(x=0X8051474A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051474E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514752);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514756);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051475A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051475C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514760);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051476C);
	set_name	(0X8051476C,	"mbox_close");
	create_insn	(x=0X80514784);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514788);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051478C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514790);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514796);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051479A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805147A6);
	set_name	(0X805147A6,	"mbx_send");
	set_cmt	(0X805147AE,	"block",	0);
	set_cmt	(0X805147B0,	"timeout",	0);
	set_cmt	(0X805147B8,	"mbx",	0);
	create_insn	(0X805147CA);
	create_insn	(0X805147CC);
	set_name	(0X805147CC,	"Mailbox::Receive");
	create_insn	(x=0X805147D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805147E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805147EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805147F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805147F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805147FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514804);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80514810);
	set_name	(0X80514810,	"FlushDataCache");
	create_insn	(0X8051481A);
	set_name	(0X8051481A,	"InvalidateCache");
	create_insn	(0X80514824);
	set_name	(0X80514824,	"OpusDecoder_Init");
	create_insn	(0X80514828);
	set_name	(0X80514828,	"OpusDecoder_Main");
	set_cmt	(0X80514842,	"a1",	0);
	create_insn	(0X8051484E);
	create_insn	(x=0X80514852);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514856);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051485A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051485E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514862);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514864);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80514874);
	set_name	(0X80514874,	"__cpu_early_init");
	create_insn	(x=0X8051487C);
	op_hex		(x,	1);
	create_insn	(x=0X80514880);
	op_hex		(x,	1);
	create_insn	(x=0X80514888);
	op_hex		(x,	1);
	create_insn	(x=0X8051488C);
	op_hex		(x,	1);
	create_insn	(x=0X805148AC);
	op_hex		(x,	1);
	create_insn	(x=0X805148BC);
	op_hex		(x,	1);
	create_insn	(x=0X805148C4);
	op_hex		(x,	1);
	create_insn	(x=0X805148C8);
	op_hex		(x,	1);
	create_insn	(x=0X805148CC);
	op_hex		(x,	1);
	create_insn	(x=0X805148D0);
	op_hex		(x,	1);
	create_insn	(x=0X805148D4);
	op_hex		(x,	1);
	create_insn	(x=0X805148DC);
	op_hex		(x,	1);
	create_insn	(x=0X805148EC);
	op_hex		(x,	1);
	create_insn	(x=0X805148FC);
	op_hex		(x,	1);
	create_insn	(0X80514908);
	create_dword	(0X8051490C);
	create_insn	(0X80514910);
	set_name	(0X80514910,	"cpu_suspend");
	create_insn	(x=0X80514914);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051491C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514924);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514940);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80514940,	"cpu_resume");
	create_insn	(x=0X8051494C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514954);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051496C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514970);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514974);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80514978);
	set_name	(0X80514978,	"Debug_Error1");
	set_cmt	(0X80514980,	"unsigned int *",	0);
	create_insn	(0X80514990);
	create_insn	(x=0X80514998);
	op_hex		(x,	1);
	create_insn	(x=0X805149A0);
	op_hex		(x,	1);
	create_insn	(x=0X805149A8);
	op_hex		(x,	1);
	create_insn	(x=0X805149B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805149B6);
	op_plain_offset	(x,	1,	0X80306180);
	op_plain_offset	(x,	129,	0X80306180);
	create_insn	(x=0X805149C2);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805149C6);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805149CA);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805149EA);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805149EC);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805149EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805149F6);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805149FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805149FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A06);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A16);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514A1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A1C);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A1E);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A20);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A26);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514A38);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A3C);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A40);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A44);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A48);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A4C);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A50);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A54);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A58);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A5C);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A60);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A64);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A66);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514A6C);
	op_hex		(x,	1);
	create_insn	(x=0X80514A7C);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514A82);
	op_hex		(x,	1);
	create_insn	(x=0X80514A86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A98);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514A9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514A9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514A9E);
	op_hex		(x,	1);
	create_insn	(x=0X80514AA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514AB4);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514AB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514AB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514ABA);
	op_hex		(x,	1);
	create_insn	(x=0X80514ABE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514ACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514AD0);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514AD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514AD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514AD6);
	op_hex		(x,	1);
	create_insn	(x=0X80514ADA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514AEC);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514AF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514AF2);
	op_hex		(x,	1);
	create_insn	(x=0X80514AF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514B02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514B08);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80514B0A);
	op_hex		(x,	1);
	set_cmt	(0X80514B0E,	"switch 15 cases",	0);
	set_cmt	(0X80514B14,	"switch jump",	0);
	set_cmt	(0X80514B18,	"jump table for switch statement",	0);
	create_byte	(0X80514B18);
	set_name	(0X80514B18,	"jpt_80514B14");
	create_byte	(0X80514B19);
	create_byte	(0X80514B1A);
	create_byte	(0X80514B1B);
	create_byte	(0X80514B1C);
	create_byte	(0X80514B1D);
	create_byte	(0X80514B1E);
	create_byte	(0X80514B1F);
	create_byte	(0X80514B20);
	create_byte	(0X80514B21);
	create_byte	(0X80514B22);
	create_byte	(0X80514B23);
	create_byte	(0X80514B24);
	create_byte	(0X80514B25);
	create_byte	(0X80514B26);
	set_cmt	(0X80514B28,	"jumptable 80514B14 case 17",	1);
	create_insn	(x=0X80514B28);
	op_stkvar	(x,	1);
	set_cmt	(0X80514B2C,	"jumptable 80514B14 case 18",	1);
	create_insn	(x=0X80514B2C);
	op_stkvar	(x,	1);
	set_cmt	(0X80514B30,	"jumptable 80514B14 case 19",	1);
	create_insn	(x=0X80514B30);
	op_stkvar	(x,	1);
	set_cmt	(0X80514B34,	"jumptable 80514B14 case 27",	1);
	create_insn	(x=0X80514B34);
	op_stkvar	(x,	1);
	set_cmt	(0X80514B38,	"jumptable 80514B14 case 31",	1);
	create_insn	(x=0X80514B38);
	op_stkvar	(x,	1);
	set_cmt	(0X80514B3C,	"jumptable 80514B14 default case, cases 20-26,28-30",	1);
	create_insn	(0X80514B3C);
	set_name	(0X80514B3C,	"def_80514B14");
	create_insn	(x=0X80514B3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514B46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80514B6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80514B70);
	create_dword	(0X80514B74);
	create_dword	(x=0X80514B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80514B7C);
	create_dword	(x=0X80514B80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80514B84);
	create_dword	(x=0X80514B88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514B8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514B90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514B94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514B9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514BA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514BA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514BA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80514BAC);
	set_name	(0X80514BAC,	"platform_mmu_map_pages");
	create_insn	(x=0X80514BAE);
	op_hex		(x,	1);
	create_insn	(x=0X80514BB2);
	op_hex		(x,	1);
	create_insn	(x=0X80514BB8);
	op_hex		(x,	1);
	create_insn	(x=0X80514BBC);
	op_hex		(x,	1);
	set_cmt	(0X80514BC4,	"vaddr",	0);
	set_cmt	(0X80514BC6,	"paddr",	0);
	set_cmt	(0X80514BC8,	"flags",	0);
	create_insn	(0X80514BD4);
	create_insn	(0X80514BD6);
	set_name	(0X80514BD6,	"platform_mmu_unmap_pages");
	create_insn	(x=0X80514BD8);
	op_hex		(x,	1);
	create_insn	(x=0X80514BDC);
	op_hex		(x,	1);
	create_insn	(x=0X80514BE0);
	op_hex		(x,	1);
	create_insn	(x=0X80514BE4);
	op_hex		(x,	1);
	create_insn	(0X80514BF8);
	create_insn	(0X80514BFA);
	set_name	(0X80514BFA,	"platform_mmu_unmap_sections");
	set_cmt	(0X80514C0E,	"vaddr",	0);
	create_insn	(0X80514C1A);
	create_insn	(0X80514C1C);
	create_insn	(x=0X80514C32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80514C44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80514C48);
	set_cmt	(0X80514C50,	"interval_ms",	0);
	create_dword	(0X80514C5C);
	create_insn	(x=0X80514C60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80514C60,	"platform_init_outer");
	create_insn	(x=0X80514C64);
	op_hex		(x,	1);
	create_insn	(x=0X80514C6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514C6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514C70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514C74);
	op_plain_offset	(x,	1,	0X81102108);
	op_plain_offset	(x,	129,	0X81102108);
	create_insn	(x=0X80514C76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514C7E);
	op_plain_offset	(x,	1,	0X81102F60);
	op_plain_offset	(x,	129,	0X81102F60);
	create_insn	(x=0X80514C80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514C84);
	op_hex		(x,	1);
	create_insn	(x=0X80514C88);
	op_hex		(x,	1);
	create_dword	(x=0X80514C94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514C98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514C9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514CA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514CA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80514CA8);
	create_dword	(x=0X80514CAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80514CB0);
	set_name	(0X80514CB0,	"dummy_idle_threadFunc");
	create_insn	(0X80514CB8);
	set_cmt	(0X80514CBA,	"interval_ms",	0);
	create_insn	(0X80514CCC);
	set_name	(0X80514CCC,	"adsp_send_os_load_complete");
	set_cmt	(0X80514CCE,	"block",	0);
	set_cmt	(0X80514CD0,	"data",	0);
	set_cmt	(0X80514CD2,	"timeout",	0);
	set_cmt	(0X80514CD6,	"mbx",	0);
	create_insn	(x=0X80514CDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514CE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514CEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514CEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514CF0);
	op_stkvar	(x,	1);
	create_insn	(0X80514CF8);
	create_dword	(0X80514CFC);
	create_dword	(x=0X80514D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514D04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514D08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514D0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80514D10);
	set_name	(0X80514D10,	"platform_os_suspend");
	create_insn	(x=0X80514D12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514D36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514D40);
	op_plain_offset	(x,	1,	0X807B5774);
	op_plain_offset	(x,	129,	0X807B5774);
	create_insn	(x=0X80514D46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514D50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80514D56,	"msg",	0);
	create_dword	(x=0X80514D6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514D70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514D74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X80514D74,	"a1");
	create_dword	(x=0X80514D78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80514D7C);
	set_name	(0X80514D7C,	"host_cpu_comThreadFunc");
	create_insn	(x=0X80514D7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514D82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80514D8E,	"fmt",	0);
	create_insn	(x=0X80514D8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514D96);
	op_stkvar	(x,	1);
	create_dword	(x=0X80514DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514DAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80514DB0);
	set_name	(0X80514DB0,	"nullsub_2");
	create_insn	(0X80514DB4);
	set_name	(0X80514DB4,	"platform_early_init");
	create_insn	(x=0X80514DC0);
	op_hex		(x,	1);
	create_insn	(x=0X80514DC4);
	op_hex		(x,	1);
	create_insn	(x=0X80514DC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514DDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514DE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514DFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80514DFC,	"mbx_id",	0);
	create_dword	(x=0X80514E14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514E1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80514E24);
	set_name	(0X80514E24,	"platform_remap_mappings");
	create_insn	(x=0X80514E30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514E9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514ECE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514ED4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514EF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80514F4A,	"unsigned int",	0);
	create_insn	(0X80514F56);
	set_cmt	(0X80514F74,	"vaddr",	0);
	set_cmt	(0X80514F7A,	"unsigned int",	0);
	create_dword	(0X80514FA0);
	create_dword	(0X80514FA4);
	create_dword	(x=0X80514FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80514FB0);
	create_dword	(x=0X80514FB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80514FB8);
	create_dword	(x=0X80514FBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80514FF4);
	create_dword	(x=0X80514FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80514FFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515000);
	create_dword	(x=0X80515004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515008);
	create_dword	(x=0X8051500C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515014);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051501C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515020);
	create_dword	(x=0X80515024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051502C);
	create_dword	(0X80515030);
	create_dword	(0X80515034);
	create_insn	(0X80515038);
	set_name	(0X80515038,	"platform_init");
	create_insn	(x=0X8051503E);
	op_stkvar	(x,	1);
	set_cmt	(0X8051504A,	"type",	0);
	set_cmt	(0X8051504C,	"vector",	0);
	create_insn	(x=0X80515054);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515064);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051506E,	"func",	0);
	create_insn	(x=0X8051506E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515070,	"arg",	0);
	set_cmt	(0X80515072,	"prio",	0);
	set_cmt	(0X80515074,	"stack_size",	0);
	create_insn	(x=0X80515074);
	op_stkvar	(x,	1);
	set_cmt	(0X80515076,	"name",	0);
	set_cmt	(0X80515080,	"sem",	0);
	set_cmt	(0X80515082,	"mbx",	0);
	set_cmt	(0X80515084,	"err_handler",	0);
	create_insn	(x=0X80515084);
	op_stkvar	(x,	1);
	set_cmt	(0X80515086,	"mbx_id",	0);
	create_insn	(x=0X80515086);
	op_stkvar	(x,	1);
	set_cmt	(0X8051508A,	"msg_handler",	0);
	create_insn	(x=0X8051508A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051508C,	"context",	0);
	create_insn	(x=0X8051508C);
	op_stkvar	(x,	1);
	set_cmt	(0X8051508E,	"name",	0);
	set_cmt	(0X805150AC,	"stack_size",	0);
	create_insn	(x=0X805150AC);
	op_stkvar	(x,	1);
	set_cmt	(0X805150AE,	"arg",	0);
	set_cmt	(0X805150B0,	"name",	0);
	set_cmt	(0X805150B2,	"prio",	0);
	set_cmt	(0X805150B4,	"func",	0);
	create_insn	(x=0X805150B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805150BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805150C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805150C8,	"stack_size",	0);
	create_insn	(x=0X805150C8);
	op_stkvar	(x,	1);
	set_cmt	(0X805150CA,	"arg",	0);
	create_insn	(x=0X805150CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805150CE,	"prio",	0);
	set_cmt	(0X805150D0,	"func",	0);
	create_insn	(x=0X805150D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805150D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805150DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805150F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515104);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X80515108,	"func");
	create_dword	(0X8051510C);
	create_dword	(0X80515110);
	create_dword	(0X80515114);
	create_dword	(x=0X80515118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051511C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515124);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051512C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515134);
	create_dword	(x=0X80515138);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051513C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051513C,	"vector_to_gic");
	create_insn	(x=0X8051513E);
	op_plain_offset	(x,	1,	0XA46A70);
	op_plain_offset	(x,	129,	0XA46A70);
	create_insn	(x=0X80515144);
	op_plain_offset	(x,	1,	0XA46A70);
	op_plain_offset	(x,	129,	0XA46A70);
	create_insn	(x=0X8051514C);
	op_plain_offset	(x,	1,	0XA46A70);
	op_plain_offset	(x,	129,	0XA46A70);
	create_insn	(x=0X80515152);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515154);
	op_plain_offset	(x,	1,	0XA46A70);
	op_plain_offset	(x,	129,	0XA46A70);
	create_insn	(0X80515162);
	create_insn	(0X8051516C);
	create_dword	(x=0X80515170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515174);
	set_name	(0X80515174,	"handler");
	create_insn	(x=0X80515192);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805151A2);
	create_insn	(0X805151AE);
	create_dword	(0X805151B4);
	create_dword	(x=0X805151B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805151BC);
	create_insn	(0X805151C0);
	set_name	(0X805151C0,	"handle_fiq");
	create_insn	(x=0X805151E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805151F0);
	create_insn	(0X805151FA);
	create_dword	(0X80515200);
	create_dword	(x=0X80515204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515208);
	create_insn	(0X8051520C);
	set_name	(0X8051520C,	"mask_interrupt");
	create_insn	(x=0X80515232);
	op_hex		(x,	1);
	create_insn	(0X80515246);
	create_insn	(0X8051524C);
	set_name	(0X8051524C,	"unmask_interrupt");
	create_insn	(x=0X80515272);
	op_hex		(x,	1);
	create_insn	(0X80515286);
	create_insn	(0X8051528C);
	set_name	(0X8051528C,	"set_int_trigger_type");
	create_insn	(x=0X80515292);
	op_hex		(x,	1);
	create_insn	(x=0X805152AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805152CC);
	create_insn	(x=0X805152E2);
	op_hex		(x,	1);
	create_insn	(0X80515306);
	create_insn	(0X80515310);
	create_dword	(x=0X80515328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051532C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051533C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051533E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515344);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051534C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515350);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515354);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515358);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051535C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051536C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051536E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515374);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051537C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515380);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515384);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515388);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051538C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051538C,	"platform_irq");
	create_insn	(x=0X80515390);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515398);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051539C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805153A0);
	set_name	(0X805153A0,	"platform_fiq");
	create_insn	(x=0X805153A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805153B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805153BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805153C0);
	set_name	(0X805153C0,	"register_int_handler");
	create_insn	(x=0X805153CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515418);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051541C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515420);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515424);
	create_dword	(0X80515428);
	create_insn	(0X8051542C);
	create_insn	(x=0X80515436);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515442);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515464);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515474);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515478);
	create_dword	(x=0X8051547C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515480);
	create_insn	(0X80515484);
	set_name	(0X80515484,	"set_as_fiq");
	create_insn	(x=0X805154B4);
	op_hex		(x,	1);
	create_insn	(0X805154C8);
	create_insn	(0X805154D0);
	set_name	(0X805154D0,	"enable_int_dist");
	create_insn	(x=0X805154F6);
	op_hex		(x,	1);
	create_insn	(x=0X80515508);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515532);
	op_hex		(x,	1);
	create_insn	(0X8051554C);
	create_insn	(x=0X80515570);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515584);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515588);
	set_name	(0X80515588,	"enable_cpuintf");
	create_dword	(0X805155A8);
	create_insn	(0X805155AC);
	create_insn	(0X805155CE);
	create_insn	(0X805155D6);
	create_insn	(0X805155E4);
	set_name	(0X805155E4,	"platform_init_interrupts");
	create_insn	(x=0X805155E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805155E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805155FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515608);
	create_insn	(x=0X80515612);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515632);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051563C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515644);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051564C);
	create_dword	(x=0X80515650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515654);
	set_name	(0X80515654,	"platform_deinit_interrupts");
	create_insn	(x=0X80515656);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051567C);
	create_insn	(x=0X8051567E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051568C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051568E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805156AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805156B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805156B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805156B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156BC);
	op_hex		(x,	1);
	create_dword	(x=0X805156C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805156C8);
	create_insn	(x=0X805156D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156F6);
	op_plain_offset	(x,	1,	0XC00604);
	op_plain_offset	(x,	129,	0XC00604);
	create_insn	(x=0X805156F8);
	op_hex		(x,	1);
	create_insn	(x=0X805156FC);
	op_plain_offset	(x,	1,	0XC00604);
	op_plain_offset	(x,	129,	0XC00604);
	create_dword	(x=0X80515700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515704);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051570C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515710);
	set_name	(0X80515710,	"platform_set_oneshot_timer_hi_res");
	create_insn	(x=0X8051571E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515724);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515746);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051575C);
	op_plain_offset	(x,	1,	0X81100604);
	op_plain_offset	(x,	129,	0X81100604);
	create_insn	(x=0X8051575E);
	op_hex		(x,	1);
	create_insn	(x=0X80515762);
	op_plain_offset	(x,	1,	0X81100604);
	op_plain_offset	(x,	129,	0X81100604);
	create_dword	(x=0X80515768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051576C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515774);
	create_dword	(x=0X80515778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051577C);
	set_name	(0X8051577C,	"platform_set_wdt_timer");
	create_insn	(x=0X8051577E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051578C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515792);
	op_hex		(x,	1);
	create_insn	(x=0X80515798);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805157A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805157B0);
	op_hex		(x,	1);
	create_dword	(x=0X805157C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805157D4);
	set_name	(0X805157D4,	"__platform_init_timer");
	create_insn	(x=0X805157D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805157DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805157DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805157E0);
	op_hex		(x,	1);
	create_insn	(x=0X805157EA);
	op_hex		(x,	1);
	create_insn	(x=0X805157F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805157F6);
	op_hex		(x,	1);
	create_insn	(x=0X80515808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515812,	"interval_ms",	0);
	create_insn	(x=0X8051581A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051581E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515824);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515826);
	op_plain_offset	(x,	1,	0X81100204);
	op_plain_offset	(x,	129,	0X81100204);
	create_insn	(x=0X8051582C);
	op_hex		(x,	1);
	create_insn	(x=0X80515832);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515836);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051583C);
	op_hex		(x,	1);
	create_dword	(x=0X8051584C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515850);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515854);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515858);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051585C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515860);
	create_dword	(x=0X80515864);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515868);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051586C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80515870);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80515870,	"platform_disable_wdt_timer");
	create_insn	(x=0X8051587E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515888);
	op_plain_offset	(x,	1,	0XC00634);
	op_plain_offset	(x,	129,	0XC00634);
	create_insn	(x=0X8051588C);
	op_hex		(x,	1);
	create_insn	(x=0X80515890);
	op_plain_offset	(x,	1,	0XC00634);
	op_plain_offset	(x,	129,	0XC00634);
	create_insn	(x=0X80515896);
	op_plain_offset	(x,	1,	0XC00634);
	op_plain_offset	(x,	129,	0XC00634);
	create_insn	(x=0X8051589A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805158A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805158AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805158B0);
	create_dword	(0X805158B4);
	create_insn	(0X805158B8);
	set_name	(0X805158B8,	"current_time");
	create_insn	(x=0X805158BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051591E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515934);
	create_dword	(0X80515938);
	create_insn	(0X8051593C);
	set_name	(0X8051593C,	"current_time_hires");
	create_insn	(x=0X80515940);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805159A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805159B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805159BC);
	create_insn	(0X805159C0);
	set_name	(0X805159C0,	"us_handler");
	create_insn	(x=0X805159C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805159C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805159CC);
	op_hex		(x,	1);
	create_insn	(x=0X805159D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805159DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805159EE);
	create_dword	(x=0X805159F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805159F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805159FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515A00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515A04);
	set_name	(0X80515A04,	"os_timer_tick");
	create_insn	(x=0X80515A06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515A3A);
	create_dword	(x=0X80515A40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515A44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515A48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515A4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80515A50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515A9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515AB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515AB4);
	op_plain_offset	(x,	1,	0XC00210);
	op_plain_offset	(x,	129,	0XC00210);
	create_insn	(x=0X80515AB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AC6);
	op_hex		(x,	1);
	create_dword	(x=0X80515AE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515AE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515AE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515AEC);
	create_dword	(x=0X80515AF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515AF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515AF8);
	set_name	(0X80515AF8,	"platform_init_timer");
	create_insn	(x=0X80515AFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515B04,	"int",	0);
	create_dword	(0X80515B10);
	create_dword	(x=0X80515B14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515B18);
	set_name	(0X80515B18,	"platform_halt_timer");
	create_insn	(x=0X80515B1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515B22);
	op_hex		(x,	1);
	create_insn	(x=0X80515B34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515B3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515B40);
	create_dword	(x=0X80515B44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515B48);
	set_name	(0X80515B48,	"timer_cb");
	set_cmt	(0X80515B54,	"int",	0);
	create_insn	(0X80515B60);
	set_name	(0X80515B60,	"read_global_counter");
	create_insn	(x=0X80515B62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515B70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515B9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515BA0);
	set_name	(0X80515BA0,	"msg_handler");
	create_insn	(0X80515BB4);
	create_dword	(0X80515BC0);
	create_insn	(0X80515BC4);
	set_name	(0X80515BC4,	"platform_init_debug");
	create_insn	(x=0X80515BCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515BCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515BE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515BE8,	"sem",	0);
	set_cmt	(0X80515BEA,	"err_handler",	0);
	create_insn	(x=0X80515BEA);
	op_stkvar	(x,	1);
	set_cmt	(0X80515BEC,	"mbx_id",	0);
	create_insn	(x=0X80515BEC);
	op_stkvar	(x,	1);
	set_cmt	(0X80515BF0,	"context",	0);
	create_insn	(x=0X80515BF0);
	op_stkvar	(x,	1);
	set_cmt	(0X80515BF2,	"msg_handler",	0);
	create_insn	(x=0X80515BF2);
	op_stkvar	(x,	1);
	set_cmt	(0X80515BF4,	"mbx",	0);
	set_cmt	(0X80515BF6,	"name",	0);
	create_insn	(x=0X80515C06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515C1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515C20);
	create_dword	(x=0X80515C24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515C28);
	create_dword	(0X80515C2C);
	create_dword	(0X80515C30);
	create_dword	(x=0X80515C34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515C38);
	create_insn	(0X80515C3C);
	create_insn	(x=0X80515C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80515C44,	"dram_log_putc");
	create_insn	(x=0X80515C46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515C88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515C8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515C90);
	create_insn	(0X80515C94);
	set_name	(0X80515C94,	"platform_dputc");
	create_insn	(x=0X80515C9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515CA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515CB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515CD6);
	create_insn	(0X80515CE4);
	create_dword	(x=0X80515CFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515D04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80515D08,	"block",	0);
	create_insn	(0X80515D08);
	set_name	(0X80515D08,	"platform_dgetc");
	create_insn	(x=0X80515D0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515D12,	"cbuf",	0);
	create_insn	(x=0X80515D12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515D14,	"c",	0);
	create_insn	(0X80515D1A);
	create_dword	(x=0X80515D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515D24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515D28);
	set_name	(0X80515D28,	"platform_init_uart");
	create_insn	(x=0X80515D2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515D32,	"result",	0);
	create_insn	(x=0X80515D34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515D3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515D4C);
	create_dword	(x=0X80515D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515D54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515D58);
	set_name	(0X80515D58,	"nullsub_5");
	create_insn	(x=0X80515D5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515D64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515D74,	"result",	0);
	set_cmt	(0X80515D76,	"char *",	0);
	set_cmt	(0X80515D7E,	"int",	0);
	create_insn	(0X80515D7E);
	set_cmt	(0X80515D84,	"result",	0);
	set_cmt	(0X80515D86,	"char *",	0);
	set_cmt	(0X80515D88,	"int",	0);
	create_dword	(x=0X80515DB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515DB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515DB8);
	create_insn	(x=0X80515DC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515DD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515DDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515E14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515E1C);
	create_insn	(x=0X80515E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515E2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515E3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515E42);
	op_stkvar	(x,	1);
	create_insn	(0X80515E54);
	create_insn	(0X80515E64);
	create_insn	(x=0X80515E70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515E78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80515E7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515E84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515E88);
	create_insn	(0X80515E98);
	create_insn	(x=0X80515EEC);
	op_hex		(x,	1);
	create_insn	(x=0X80515F20);
	op_hex		(x,	1);
	create_insn	(x=0X80515F24);
	op_hex		(x,	1);
	create_insn	(x=0X80515F28);
	op_hex		(x,	1);
	create_insn	(x=0X80515F30);
	op_hex		(x,	1);
	create_insn	(0X80515F36);
	create_insn	(x=0X80515F3C);
	op_hex		(x,	1);
	create_insn	(x=0X80515F40);
	op_hex		(x,	1);
	create_insn	(x=0X80515F44);
	op_hex		(x,	1);
	create_insn	(x=0X80515F4C);
	op_hex		(x,	1);
	create_insn	(0X80515F52);
	create_insn	(x=0X80515F56);
	op_hex		(x,	1);
	create_insn	(x=0X80515F5C);
	op_hex		(x,	1);
	create_insn	(x=0X80515F66);
	op_hex		(x,	1);
	create_insn	(x=0X80515F6E);
	op_hex		(x,	1);
	create_insn	(x=0X80515F7A);
	op_hex		(x,	1);
	create_insn	(x=0X80515F8A);
	op_hex		(x,	1);
	set_cmt	(0X80515FA4,	"type",	0);
	set_cmt	(0X80515FA6,	"vector",	0);
	create_insn	(x=0X80515FB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515FBC);
	create_dword	(0X80515FC4);
	create_dword	(0X80515FC8);
	create_dword	(0X80515FCC);
	create_dword	(0X80515FD0);
	create_dword	(x=0X80515FD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515FD8);
	create_insn	(x=0X80515FF0);
	op_hex		(x,	1);
	create_insn	(0X8051600A);
	create_insn	(0X80516018);
	create_insn	(0X8051601E);
	create_insn	(0X80516024);
	create_insn	(0X80516028);
	create_insn	(x=0X80516032);
	op_hex		(x,	1);
	create_insn	(0X80516040);
	create_insn	(0X80516046);
	create_insn	(0X8051604C);
	create_insn	(x=0X80516052);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80516072);
	create_dword	(x=0X80516078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051607C);
	create_insn	(x=0X8051608A);
	op_hex		(x,	1);
	create_insn	(x=0X805160A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805160B0);
	create_insn	(0X805160B6);
	create_dword	(x=0X805160BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805160C0);
	create_insn	(x=0X805160C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805160D2);
	op_hex		(x,	1);
	create_insn	(x=0X80516104);
	op_hex		(x,	1);
	create_insn	(x=0X80516118);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051612A);
	op_hex		(x,	1);
	create_insn	(0X8051615A);
	create_dword	(x=0X80516160);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80516164);
	create_insn	(0X805161C4);
	create_insn	(0X805161CA);
	create_dword	(0X805161D0);
	create_dword	(0X805161D4);
	create_dword	(0X805161D8);
	create_insn	(0X805161DC);
	create_insn	(0X80516204);
	create_insn	(0X8051620A);
	create_insn	(0X8051620E);
	create_insn	(0X80516214);
	set_cmt	(0X80516216,	"flags",	0);
	set_cmt	(0X80516218,	"switch 4 cases",	0);
	set_cmt	(0X8051621C,	"switch jump",	0);
	set_cmt	(0X80516220,	"jump table for switch statement",	0);
	create_byte	(0X80516220);
	set_name	(0X80516220,	"jpt_8051621C");
	create_byte	(0X80516221);
	create_byte	(0X80516222);
	create_byte	(0X80516223);
	set_cmt	(0X80516224,	"jumptable 8051621C case 2",	1);
	create_insn	(0X80516224);
	set_cmt	(0X8051622A,	"jumptable 8051621C case 3",	1);
	create_insn	(0X8051622A);
	set_cmt	(0X80516230,	"jumptable 8051621C default case",	1);
	create_insn	(0X80516230);
	set_name	(0X80516230,	"def_8051621C");
	set_cmt	(0X8051623C,	"jumptable 8051621C case 0",	1);
	create_insn	(0X8051623C);
	set_cmt	(0X80516242,	"jumptable 8051621C case 1",	1);
	create_insn	(0X80516242);
	set_cmt	(0X80516246,	"paddr",	0);
	set_cmt	(0X80516248,	"size",	0);
	create_dword	(0X80516254);
	create_insn	(0X80516258);
	set_name	(0X80516258,	"platform_init_aram");
	create_insn	(x=0X8051625A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516260);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516268);
	op_hex		(x,	1);
	create_insn	(x=0X8051626E);
	op_plain_offset	(x,	1,	0X702EF000);
	op_plain_offset	(x,	129,	0X702EF000);
	create_insn	(x=0X80516270);
	op_hex		(x,	1);
	create_insn	(x=0X80516274);
	op_plain_offset	(x,	1,	0X702EF000);
	op_plain_offset	(x,	129,	0X702EF000);
	set_cmt	(0X8051627A,	"a2",	0);
	create_insn	(x=0X8051627A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051627E,	"fmt",	0);
	set_cmt	(0X8051628C,	"a2",	0);
	create_insn	(x=0X8051628C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516290);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051629E,	"a2",	0);
	create_insn	(x=0X8051629E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805162A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805162B0,	"fmt",	0);
	set_cmt	(0X805162B2,	"int",	0);
	create_dword	(x=0X805162C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805162C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805162C8);
	create_dword	(x=0X805162CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805162D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805162D4);
	create_insn	(x=0X805162D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X805162D8,	"scheduler_cb");
	create_insn	(x=0X805162EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80516300);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516304);
	create_insn	(x=0X80516308);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80516308,	"dfs_receive");
	set_cmt	(0X8051631E,	"fmt",	0);
	set_cmt	(0X80516328,	"data",	0);
	create_insn	(0X80516328);
	set_cmt	(0X8051632A,	"block",	0);
	set_cmt	(0X8051632C,	"mbx",	0);
	set_cmt	(0X8051632E,	"timeout",	0);
	create_insn	(x=0X80516336);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80516340);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516344);
	create_dword	(0X80516348);
	create_dword	(x=0X8051634C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80516350);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80516350,	"adsp_dfs_init");
	set_cmt	(0X80516352,	"sem",	0);
	create_insn	(x=0X80516358);
	op_stkvar	(x,	1);
	set_cmt	(0X80516360,	"mbx",	0);
	set_cmt	(0X80516362,	"msg_handler",	0);
	create_insn	(x=0X80516362);
	op_stkvar	(x,	1);
	set_cmt	(0X80516364,	"mbx_id",	0);
	set_cmt	(0X80516366,	"err_handler",	0);
	create_insn	(x=0X80516366);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516368);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051636A,	"context",	0);
	create_insn	(x=0X8051636A);
	op_stkvar	(x,	1);
	set_cmt	(0X80516370,	"a3",	0);
	set_cmt	(0X80516388,	"fmt",	0);
	create_insn	(0X80516388);
	create_dword	(x=0X80516394);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516398);
	create_dword	(x=0X8051639C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805163A0);
	create_insn	(0X805163A4);
	set_name	(0X805163A4,	"get_cur_adsp_freq");
	create_dword	(0X805163AC);
	create_insn	(x=0X805163B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X805163B0,	"set_cur_adsp_freq");
	create_dword	(x=0X805163BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805163C0);
	create_insn	(0X805163C4);
	set_name	(0X805163C4,	"adsp_hw_rdy_mbx_handler");
	create_insn	(x=0X805163C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805163F4);
	create_insn	(x=0X80516458);
	op_hex		(x,	1);
	create_insn	(0X80516462);
	create_dword	(x=0X80516490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516494);
	create_dword	(0X80516498);
	create_insn	(0X8051649C);
	set_name	(0X8051649C,	"adsp_hw_full_mbx_handler");
	create_insn	(x=0X805164A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805164E8);
	op_hex		(x,	1);
	create_insn	(0X805164F2);
	create_insn	(x=0X80516506);
	op_hex		(x,	1);
	create_insn	(0X8051652E);
	create_insn	(0X80516540);
	create_insn	(0X80516548);
	create_insn	(0X8051654E);
	create_dword	(x=0X80516570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516574);
	create_dword	(0X80516578);
	create_insn	(0X8051657C);
	set_name	(0X8051657C,	"get_next_mbx_id");
	set_cmt	(0X80516582,	"a3",	0);
	create_insn	(0X8051658E);
	set_cmt	(0X80516596,	"fmt",	0);
	set_cmt	(0X80516598,	"a2",	0);
	create_insn	(0X805165A4);
	create_insn	(x=0X805165AA);
	op_hex		(x,	1);
	create_insn	(0X805165BE);
	create_insn	(0X805165D6);
	create_insn	(x=0X805165DA);
	op_hex		(x,	1);
	create_insn	(0X805165E6);
	create_dword	(0X80516600);
	create_dword	(0X80516604);
	create_dword	(0X80516608);
	create_dword	(0X8051660C);
	create_dword	(0X80516610);
	create_insn	(0X80516614);
	set_name	(0X80516614,	"put_mbx_id");
	create_insn	(x=0X8051661A);
	op_hex		(x,	1);
	create_dword	(0X80516630);
	create_insn	(0X80516634);
	set_name	(0X80516634,	"adsp_sw_mbx_init");
	create_dword	(0X8051665C);
	create_dword	(0X80516660);
	create_dword	(0X80516664);
	create_insn	(0X80516668);
	set_name	(0X80516668,	"mbx_open");
	create_insn	(x=0X80516672);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516676);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051667A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805166D0);
	op_stkvar	(x,	1);
	create_insn	(0X805166E0);
	set_cmt	(0X805166F4,	"sem",	0);
	set_cmt	(0X805166F8,	"value",	0);
	create_dword	(x=0X80516710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516714);
	create_dword	(0X80516718);
	create_insn	(0X8051671C);
	set_name	(0X8051671C,	"mbx_close");
	create_insn	(x=0X80516720);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516740);
	op_hex		(x,	1);
	create_insn	(0X8051675E);
	create_dword	(x=0X80516788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051678C);
	create_dword	(0X80516790);
	create_insn	(0X80516794);
	set_name	(0X80516794,	"mbx_attr");
	create_insn	(x=0X8051679C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805167B2);
	create_insn	(x=0X805167E0);
	op_hex		(x,	1);
	create_insn	(x=0X805167F2);
	op_hex		(x,	1);
	create_insn	(x=0X805167F8);
	op_hex		(x,	1);
	create_insn	(x=0X80516804);
	op_hex		(x,	1);
	create_insn	(x=0X8051680A);
	op_hex		(x,	1);
	create_insn	(x=0X8051681A);
	op_hex		(x,	1);
	create_insn	(x=0X80516820);
	op_hex		(x,	1);
	create_insn	(x=0X8051682C);
	op_hex		(x,	1);
	create_insn	(x=0X80516832);
	op_hex		(x,	1);
	create_dword	(x=0X8051684C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516850);
	create_dword	(0X80516854);
	create_insn	(0X80516858);
	set_name	(0X80516858,	"mbx_recv_msg");
	create_insn	(x=0X80516864);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516872);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051688C);
	create_insn	(0X8051689A);
	create_insn	(0X805168A4);
	create_insn	(0X805168B4);
	create_insn	(x=0X805168CC);
	op_hex		(x,	1);
	create_insn	(0X805168E6);
	create_dword	(x=0X805168F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805168FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80516900);
	create_insn	(x=0X80516908);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80516908,	"mbx_clear_err_code");
	create_insn	(x=0X8051691C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051692C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80516930);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516942);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80516950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80516954);
	create_insn	(0X8051695E);
	create_insn	(x=0X80516966);
	op_hex		(x,	1);
	create_insn	(0X8051696E);
	create_insn	(x=0X80516972);
	op_hex		(x,	1);
	create_insn	(0X8051697C);
	create_insn	(0X80516986);
	create_insn	(0X80516990);
	set_name	(0X80516990,	"adsp_hw_mbx_send");
	create_insn	(0X805169A6);
	create_insn	(x=0X805169B8);
	op_hex		(x,	1);
	create_insn	(x=0X805169C4);
	op_plain_offset	(x,	1,	0X807B4688);
	op_plain_offset	(x,	129,	0X807B4688);
	create_insn	(x=0X805169CC);
	op_plain_offset	(x,	1,	0X807B4688);
	op_plain_offset	(x,	129,	0X807B4688);
	create_insn	(x=0X805169CE);
	op_plain_offset	(x,	1,	0X807B4688);
	op_plain_offset	(x,	129,	0X807B4688);
	create_insn	(x=0X805169D0);
	op_plain_offset	(x,	1,	0X807B4688);
	op_plain_offset	(x,	129,	0X807B4688);
	create_insn	(x=0X805169D6);
	op_plain_offset	(x,	1,	0X807B4688);
	op_plain_offset	(x,	129,	0X807B4688);
	create_insn	(x=0X805169E4);
	op_plain_offset	(x,	1,	0X807B4688);
	op_plain_offset	(x,	129,	0X807B4688);
	create_insn	(x=0X805169E6);
	op_plain_offset	(x,	1,	0X807B4688);
	op_plain_offset	(x,	129,	0X807B4688);
	create_insn	(x=0X805169EA);
	op_plain_offset	(x,	1,	0X807B4688);
	op_plain_offset	(x,	129,	0X807B4688);
	create_insn	(0X805169EE);
	create_dword	(x=0X805169F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805169F8);
	create_dword	(x=0X805169FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80516A00);
	set_name	(0X80516A00,	"mbx_send_msg");
	create_insn	(x=0X80516A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516A1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80516A34);
	create_insn	(0X80516A42);
	create_insn	(0X80516A4C);
	set_cmt	(0X80516A50,	"mbx_id",	0);
	set_cmt	(0X80516A54,	"data",	0);
	set_cmt	(0X80516A58,	"block",	0);
	set_cmt	(0X80516A5A,	"timeout",	0);
	create_dword	(x=0X80516A70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516A74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80516A78);
	set_name	(0X80516A78,	"adsp_hw_mbx_init");
	set_cmt	(0X80516A8A,	"value",	0);
	set_cmt	(0X80516A9C,	"sem",	0);
	create_insn	(x=0X80516AB2);
	op_plain_offset	(x,	1,	0XCB4688);
	op_plain_offset	(x,	129,	0XCB4688);
	create_insn	(x=0X80516AB6);
	op_plain_offset	(x,	1,	0XCB4688);
	op_plain_offset	(x,	129,	0XCB4688);
	create_insn	(x=0X80516ABA);
	op_plain_offset	(x,	1,	0XCB4688);
	op_plain_offset	(x,	129,	0XCB4688);
	create_insn	(x=0X80516ABE);
	op_plain_offset	(x,	1,	0XCB4688);
	op_plain_offset	(x,	129,	0XCB4688);
	create_insn	(0X80516AC2);
	create_insn	(x=0X80516AD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516AE4,	"wait",	0);
	set_cmt	(0X80516AF0,	"type",	0);
	set_cmt	(0X80516AF8,	"vector",	0);
	create_insn	(x=0X80516B04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516B0A,	"vector",	0);
	set_cmt	(0X80516B0C,	"type",	0);
	create_insn	(x=0X80516B16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X80516B20);
	create_dword	(0X80516B24);
	create_dword	(0X80516B28);
	create_dword	(0X80516B2C);
	create_dword	(x=0X80516B30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516B34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516B38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80516B3C);
	set_name	(0X80516B3C,	"wait_for_mbx_send_complete");
	create_insn	(x=0X80516B3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516B4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516B5E,	"a3",	0);
	set_cmt	(0X80516B60,	"a2",	0);
	create_insn	(x=0X80516B62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516B6A,	"a2",	0);
	set_cmt	(0X80516B6C,	"fmt",	0);
	set_cmt	(0X80516B6E,	"a3",	0);
	set_cmt	(0X80516B76,	"a2",	0);
	create_insn	(x=0X80516B78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516B7E,	"a3",	0);
	set_cmt	(0X80516B88,	"fmt",	0);
	set_cmt	(0X80516B8A,	"a2",	0);
	set_cmt	(0X80516B90,	"a3",	0);
	create_insn	(x=0X80516BA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516BA6,	"a2",	0);
	set_cmt	(0X80516BA8,	"a3",	0);
	create_insn	(x=0X80516BC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516BCA,	"fmt",	0);
	set_cmt	(0X80516BD0,	"a3",	0);
	create_insn	(0X80516BDA);
	create_dword	(x=0X80516BE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516BEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516BF0);
	create_dword	(x=0X80516BF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516BF8);
	create_dword	(x=0X80516BFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516C00);
	create_dword	(x=0X80516C04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516C08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516C0C);
	create_insn	(x=0X80516C10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80516C10,	"adsp_arm_hello_world");
	create_dword	(x=0X80516C18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80516C1C);
	set_name	(0X80516C1C,	"enter_wfi");
	create_dword	(0X80516C40);
	create_dword	(0X80516C44);
	create_insn	(0X80516C48);
	set_name	(0X80516C48,	"arm_context_switch");
	create_insn	(x=0X80516C68);
	op_stkvar	(x,	1);
	create_insn	(0X80516C88);
	set_name	(0X80516C88,	"arm_save_mode_regs");
	create_insn	(x=0X80516C8C);
	op_hex		(x,	1);
	create_insn	(x=0X80516C90);
	op_hex		(x,	1);
	create_insn	(x=0X80516CA0);
	op_hex		(x,	1);
	create_insn	(x=0X80516CB0);
	op_hex		(x,	1);
	create_insn	(x=0X80516CC0);
	op_hex		(x,	1);
	create_insn	(x=0X80516CD0);
	op_hex		(x,	1);
	create_insn	(x=0X80516CE0);
	op_hex		(x,	1);
	create_insn	(0X80516CF8);
	set_name	(0X80516CF8,	"arch_disable_cache");
	create_insn	(x=0X80516D08);
	op_hex		(x,	1);
	create_insn	(x=0X80516D14);
	op_hex		(x,	1);
	create_insn	(x=0X80516D1C);
	op_hex		(x,	1);
	create_insn	(0X80516D2C);
	create_insn	(x=0X80516D30);
	op_hex		(x,	1);
	create_insn	(x=0X80516D3C);
	op_hex		(x,	1);
	create_insn	(0X80516D54);
	set_name	(0X80516D54,	"arch_enable_cache");
	create_insn	(x=0X80516D68);
	op_hex		(x,	1);
	create_insn	(x=0X80516D70);
	op_hex		(x,	1);
	create_insn	(x=0X80516D7C);
	op_hex		(x,	1);
	create_insn	(x=0X80516D8C);
	op_hex		(x,	1);
	create_insn	(x=0X80516D94);
	op_hex		(x,	1);
	create_insn	(x=0X80516DA8);
	op_hex		(x,	1);
	create_insn	(0X80516DB8);
	set_name	(0X80516DB8,	"flush_invalidate_cache_v7_0");
	create_insn	(x=0X80516DBC);
	op_hex		(x,	1);
	create_insn	(x=0X80516DD4);
	op_hex		(x,	1);
	create_insn	(x=0X80516DEC);
	op_hex		(x,	1);
	create_insn	(0X80516E44);
	set_name	(0X80516E44,	"flush_invalidate_cache_v7");
	create_insn	(x=0X80516E48);
	op_hex		(x,	1);
	create_insn	(x=0X80516E60);
	op_hex		(x,	1);
	create_insn	(x=0X80516E78);
	op_hex		(x,	1);
	create_insn	(0X80516ED0);
	set_name	(0X80516ED0,	"invalidate_cache_v7");
	create_insn	(x=0X80516ED4);
	op_hex		(x,	1);
	create_insn	(x=0X80516EEC);
	op_hex		(x,	1);
	create_insn	(x=0X80516F04);
	op_hex		(x,	1);
	create_insn	(0X80516F5C);
	set_name	(0X80516F5C,	"arch_clean_cache_range");
	create_insn	(x=0X80516F60);
	op_hex		(x,	1);
	create_insn	(0X80516F7C);
	create_insn	(0X80516F98);
	set_name	(0X80516F98,	"arch_clean_invalidate_cache_range");
	create_insn	(x=0X80516F9C);
	op_hex		(x,	1);
	create_insn	(0X80516FB8);
	create_insn	(0X80516FC8);
	create_insn	(0X80516FD4);
	set_name	(0X80516FD4,	"arch_invalidate_cache_range");
	create_insn	(x=0X80516FD8);
	op_hex		(x,	1);
	create_insn	(0X80516FF8);
	set_name	(0X80516FF8,	"arch_sync_cache_range");
	create_dword	(0X8051700C);
	create_dword	(0X80517010);
	create_insn	(0X80517014);
	set_name	(0X80517014,	"arch_idle");
	create_insn	(0X8051701C);
	set_name	(0X8051701C,	"arm_read_cr1");
	create_insn	(0X80517024);
	set_name	(0X80517024,	"arm_write_cr1");
	create_insn	(0X8051702C);
	set_name	(0X8051702C,	"arm_read_cr1_aux");
	create_insn	(0X80517034);
	set_name	(0X80517034,	"arm_write_cr1_aux");
	create_insn	(0X8051703C);
	set_name	(0X8051703C,	"arm_write_ttbr");
	create_insn	(0X80517044);
	set_name	(0X80517044,	"arm_write_ttbcr");
	create_insn	(0X8051704C);
	set_name	(0X8051704C,	"arm_write_dacr");
	create_insn	(0X80517054);
	set_name	(0X80517054,	"arm_invalidate_tlb");
	create_insn	(0X8051706C);
	set_name	(0X8051706C,	"arm_invalidate_tlb_byaddr");
	create_insn	(0X8051708C);
	create_insn	(0X80517094);
	set_name	(0X80517094,	"Stop_UnhandledAbort");
	create_insn	(x=0X805170B0);
	op_hex		(x,	1);
	create_insn	(0X805170D8);
	set_name	(0X805170D8,	"Stop_UnhandledSyscall");
	create_insn	(x=0X805170F0);
	op_hex		(x,	1);
	create_insn	(0X80517118);
	set_name	(0X80517118,	"Stop_PrefetchAbort");
	create_insn	(x=0X80517134);
	op_hex		(x,	1);
	create_insn	(0X8051715C);
	set_name	(0X8051715C,	"Stop_DataAbort");
	create_insn	(x=0X80517178);
	op_hex		(x,	1);
	create_insn	(0X805171A0);
	set_name	(0X805171A0,	"arm_reserved_");
	create_insn	(0X805171A4);
	set_name	(0X805171A4,	"arm_irq");
	create_insn	(x=0X805171C0);
	op_hex		(x,	1);
	create_insn	(x=0X805171CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805171E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80517210);
	set_name	(0X80517210,	"arm_fiq");
	create_insn	(x=0X8051722C);
	op_hex		(x,	1);
	create_dword	(x=0X80517254);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80517290);
	create_dword	(x=0X80517294);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517298);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517298,	"l2x0_cache_sync");
	create_dword	(x=0X805172A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805172A8);
	set_name	(0X805172A8,	"l2x0_flush_all");
	create_insn	(x=0X805172AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805172B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805172C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805172CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805172D0);
	set_name	(0X805172D0,	"l2x0_clean_all");
	create_insn	(x=0X805172D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805172DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805172F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805172F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805172F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X805172F8,	"l2x0_clean_range");
	create_insn	(x=0X80517306);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517308);
	op_hex		(x,	1);
	create_insn	(0X8051731C);
	create_dword	(x=0X80517320);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517324);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517328);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517328,	"l2x0_enable");
	create_dword	(x=0X80517334);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517338);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517338,	"l2x0_disable");
	create_insn	(x=0X80517340);
	op_hex		(x,	1);
	create_dword	(x=0X80517350);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517354);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517354,	"l2x0_inv_all");
	create_insn	(x=0X8051736A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517370);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517388);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051738C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517394);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517394,	"l2x0_flush_range");
	create_insn	(x=0X805173A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805173A4);
	op_hex		(x,	1);
	create_insn	(0X805173B8);
	create_dword	(x=0X805173BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805173C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805173C4);
	op_hex		(x,	1);
	set_name	(0X805173C4,	"l2x0_inv_range");
	create_insn	(x=0X805173CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805173D0);
	op_hex		(x,	1);
	create_insn	(x=0X805173E0);
	op_hex		(x,	1);
	create_insn	(0X805173F8);
	create_dword	(x=0X805173FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517400);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517402);
	op_hex		(x,	1);
	create_insn	(x=0X80517406);
	op_hex		(x,	1);
	create_dword	(x=0X8051741C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517420);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517430);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517434);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517434,	"l2x0_reset_events");
	create_dword	(x=0X80517444);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517448);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517448,	"l2x0_stop_events");
	create_insn	(x=0X80517452);
	op_hex		(x,	1);
	create_dword	(x=0X8051745C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517462);
	create_insn	(x=0X80517478);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517478,	"l2x0_set_base");
	create_dword	(x=0X80517480);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517484);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517484,	"l2x0_init");
	create_insn	(x=0X80517498);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051749E);
	create_insn	(x=0X805174A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805174AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805174AE);
	op_hex		(x,	1);
	create_insn	(x=0X805174D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805174D6);
	create_insn	(x=0X805174E0);
	op_hex		(x,	1);
	create_insn	(x=0X805174E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805174F0);
	create_insn	(x=0X805174FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517506);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051750C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517514);
	op_hex		(x,	1);
	create_insn	(x=0X80517548);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051754C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051754E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517550);
	op_plain_offset	(x,	1,	0XCB5774);
	op_plain_offset	(x,	129,	0XCB5774);
	create_insn	(x=0X80517554);
	op_plain_offset	(x,	1,	0XCB5774);
	op_plain_offset	(x,	129,	0XCB5774);
	create_insn	(x=0X80517558);
	op_plain_offset	(x,	1,	0XCB5774);
	op_plain_offset	(x,	129,	0XCB5774);
	create_insn	(x=0X8051755A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051755E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517560);
	op_plain_offset	(x,	1,	0XCB5774);
	op_plain_offset	(x,	129,	0XCB5774);
	create_insn	(x=0X80517562);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517564);
	op_plain_offset	(x,	1,	0XCB5774);
	op_plain_offset	(x,	129,	0XCB5774);
	create_insn	(x=0X80517566);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517568);
	op_plain_offset	(x,	1,	0XCB5774);
	op_plain_offset	(x,	129,	0XCB5774);
	create_insn	(x=0X8051756A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051756C);
	op_plain_offset	(x,	1,	0XCB5774);
	op_plain_offset	(x,	129,	0XCB5774);
	create_insn	(x=0X8051756E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517570);
	op_plain_offset	(x,	1,	0XCB5774);
	op_plain_offset	(x,	129,	0XCB5774);
	create_insn	(x=0X80517584);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517586);
	op_stkvar	(x,	1);
	create_dword	(x=0X80517598);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051759C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805175AC);
	create_dword	(x=0X805175B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805175B4);
	create_dword	(x=0X805175B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805175D0);
	create_dword	(0X805175D4);
	create_dword	(x=0X805175D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805175F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805175F4);
	set_name	(0X805175F4,	"FlushRange");
	create_insn	(x=0X805175FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80517608,	"int",	0);
	set_cmt	(0X8051760A,	"unsigned int",	0);
	create_insn	(x=0X80517610);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517612);
	op_plain_offset	(x,	1,	0X807B5774);
	op_plain_offset	(x,	129,	0X807B5774);
	create_dword	(x=0X80517628);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051762C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517630);
	set_name	(0X80517630,	"CleanCacheRange");
	create_insn	(x=0X80517636);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80517644,	"addr",	0);
	set_cmt	(0X80517646,	"len",	0);
	create_insn	(x=0X8051764C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051764E);
	op_plain_offset	(x,	1,	0X807B5774);
	op_plain_offset	(x,	129,	0X807B5774);
	create_dword	(x=0X80517664);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517668);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051766C);
	set_name	(0X8051766C,	"cache_inv_range");
	create_insn	(x=0X80517672);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517688);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051768A);
	op_plain_offset	(x,	1,	0X807B5774);
	op_plain_offset	(x,	129,	0X807B5774);
	create_dword	(x=0X805176A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805176A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805176A8);
	set_name	(0X805176A8,	"CleanAndInvalidateCache");
	create_insn	(x=0X805176AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805176B8,	"int",	0);
	set_cmt	(0X805176BA,	"unsigned int",	0);
	create_insn	(x=0X805176C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805176D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805176DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805176E0);
	set_name	(0X805176E0,	"CleanCache");
	create_insn	(x=0X805176E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805176F0,	"addr",	0);
	set_cmt	(0X805176F2,	"len",	0);
	create_insn	(x=0X805176FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805176FC);
	op_plain_offset	(x,	1,	0X807B5774);
	op_plain_offset	(x,	129,	0X807B5774);
	create_dword	(x=0X80517710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517714);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517718);
	create_insn	(x=0X8051771A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517732);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517734);
	op_plain_offset	(x,	1,	0X807B5774);
	op_plain_offset	(x,	129,	0X807B5774);
	create_dword	(x=0X80517748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051774C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517750);
	create_insn	(x=0X80517752);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517766);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517768);
	op_plain_offset	(x,	1,	0X807B5774);
	op_plain_offset	(x,	129,	0X807B5774);
	create_dword	(x=0X8051777C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517784);
	create_insn	(x=0X80517786);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517794);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517796);
	op_plain_offset	(x,	1,	0X807B5774);
	op_plain_offset	(x,	129,	0X807B5774);
	create_dword	(x=0X805177B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805177B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805177B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X805177B8,	"exception_die");
	create_insn	(x=0X805177CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805177DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805177DC);
	op_plain_offset	(x,	1,	0X806180);
	op_plain_offset	(x,	129,	0X806180);
	create_insn	(x=0X805177E8);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805177EC);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805177F0);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051780E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517810);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517812);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517814);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051781C);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517822);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517824);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051782C);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517834);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051783C);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051783E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517840);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517842);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517844);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517846);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051784C);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517854);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051785A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051785C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051785E);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517860);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517862);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517864);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517866);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051786A);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051786C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051786E);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517870);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517872);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517874);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517876);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517878);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051787A);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051787C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051787E);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517880);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517882);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517884);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517886);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517888);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051788A);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051788C);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051788E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517890);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517892);
	op_hex		(x,	1);
	create_insn	(x=0X805178A2);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805178A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805178A8);
	op_hex		(x,	1);
	create_insn	(x=0X805178AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805178AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178BE);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805178C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805178C4);
	op_hex		(x,	1);
	create_insn	(x=0X805178C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805178CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178DA);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805178DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805178E0);
	op_hex		(x,	1);
	create_insn	(x=0X805178E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805178E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178F6);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805178F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805178FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805178FC);
	op_hex		(x,	1);
	create_insn	(x=0X80517900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517902);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051790C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517912);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517914);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517916);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517918);
	op_hex		(x,	1);
	create_insn	(x=0X8051791C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051791E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517928);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051792E);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80517930);
	op_hex		(x,	1);
	set_cmt	(0X80517934,	"switch 15 cases",	0);
	set_cmt	(0X8051793A,	"switch jump",	0);
	set_cmt	(0X8051793E,	"jump table for switch statement",	0);
	create_byte	(0X8051793E);
	set_name	(0X8051793E,	"jpt_8051793A");
	create_byte	(0X8051793F);
	create_byte	(0X80517940);
	create_byte	(0X80517941);
	create_byte	(0X80517942);
	create_byte	(0X80517943);
	create_byte	(0X80517944);
	create_byte	(0X80517945);
	create_byte	(0X80517946);
	create_byte	(0X80517947);
	create_byte	(0X80517948);
	create_byte	(0X80517949);
	create_byte	(0X8051794A);
	create_byte	(0X8051794B);
	create_byte	(0X8051794C);
	set_cmt	(0X8051794E,	"jumptable 8051793A case 17",	1);
	create_insn	(x=0X8051794E);
	op_stkvar	(x,	1);
	set_cmt	(0X80517952,	"jumptable 8051793A case 18",	1);
	create_insn	(x=0X80517952);
	op_stkvar	(x,	1);
	set_cmt	(0X80517956,	"jumptable 8051793A case 19",	1);
	create_insn	(x=0X80517956);
	op_stkvar	(x,	1);
	set_cmt	(0X8051795A,	"jumptable 8051793A case 27",	1);
	create_insn	(x=0X8051795A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051795E,	"jumptable 8051793A case 31",	1);
	create_insn	(x=0X8051795E);
	op_stkvar	(x,	1);
	set_cmt	(0X80517962,	"jumptable 8051793A default case, cases 20-26,28-30",	1);
	create_insn	(0X80517962);
	set_name	(0X80517962,	"def_8051793A");
	create_insn	(x=0X80517964);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051796E);
	create_insn	(x=0X80517970);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517994);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051799C);
	create_dword	(x=0X805179A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805179A4);
	create_dword	(x=0X805179A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805179B0);
	create_dword	(x=0X805179B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805179B8);
	create_dword	(x=0X805179BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805179DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805179E0);
	create_insn	(0X805179EE);
	create_dword	(0X805179F4);
	create_insn	(x=0X805179F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X805179F8,	"ExitKernelUnhandledSyscall");
	create_dword	(x=0X80517A18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517A1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517A1C,	"ExitKernelWithUnhandledAbort");
	create_insn	(x=0X80517A22);
	op_plain_offset	(x,	1,	0XCB184C);
	op_plain_offset	(x,	129,	0XCB184C);
	create_dword	(x=0X80517A3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517A40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517A40,	"ExitKerneDataAbort");
	create_insn	(x=0X80517A46);
	op_plain_offset	(x,	1,	0XCB184C);
	op_plain_offset	(x,	129,	0XCB184C);
	create_dword	(x=0X80517A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517A64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517A64,	"ExitKernelPrefetchAbort");
	create_insn	(x=0X80517A6A);
	op_plain_offset	(x,	1,	0XCB184C);
	op_plain_offset	(x,	129,	0XCB184C);
	create_dword	(x=0X80517A84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517A88);
	create_insn	(x=0X80517A8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517A9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517AAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517AB0);
	set_name	(0X80517AB0,	"arm_mmu_unmap_section");
	create_insn	(x=0X80517AB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517AC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517AD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517AD8);
	set_name	(0X80517AD8,	"arm_mmu_map_kpage");
	create_insn	(x=0X80517ADA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517AEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517AFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517B00);
	set_name	(0X80517B00,	"arm_mmu_desc_unmap_page");
	create_insn	(x=0X80517B02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517B14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517B24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517B28);
	create_insn	(0X80517B2C);
	create_insn	(0X80517B3C);
	set_name	(0X80517B3C,	"arm_mmu_map_mem");
	create_insn	(x=0X80517B40);
	op_hex		(x,	1);
	create_insn	(x=0X80517B44);
	op_hex		(x,	1);
	create_insn	(x=0X80517B4C);
	op_hex		(x,	1);
	create_insn	(x=0X80517B50);
	op_hex		(x,	1);
	create_insn	(x=0X80517B54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80517B6C,	"paddr",	0);
	set_cmt	(0X80517B6E,	"vaddr",	0);
	set_cmt	(0X80517B70,	"flags",	0);
	set_cmt	(0X80517B76,	"unsigned int",	0);
	create_insn	(0X80517B82);
	create_dword	(x=0X80517B90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517B94);
	set_name	(0X80517B94,	"arm_mmu_unmap_mem");
	create_insn	(x=0X80517B98);
	op_hex		(x,	1);
	create_insn	(x=0X80517B9E);
	op_hex		(x,	1);
	create_insn	(x=0X80517BA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80517BC2,	"unsigned int",	0);
	create_insn	(0X80517BCA);
	create_dword	(x=0X80517BD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517BDC);
	create_insn	(x=0X80517BF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517BF4,	"arm_mmu_desc_alloc_pgtbl");
	create_insn	(0X80517C1A);
	create_dword	(x=0X80517C20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80517C24);
	create_insn	(x=0X80517C28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517C30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517C34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517C3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517C40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517C48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517C4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517C4C,	"arm_mmu_desc_map_page");
	create_insn	(x=0X80517C6A);
	op_hex		(x,	1);
	create_insn	(x=0X80517C76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517C7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517C7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517C7E);
	op_stkvar	(x,	1);
	create_insn	(0X80517C86);
	create_insn	(x=0X80517C8C);
	op_hex		(x,	1);
	set_cmt	(0X80517C90,	"int",	0);
	create_insn	(x=0X80517C90);
	op_hex		(x,	1);
	create_insn	(x=0X80517C9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517CA6);
	op_hex		(x,	1);
	create_insn	(x=0X80517CB0);
	op_hex		(x,	1);
	create_insn	(x=0X80517CB8);
	op_hex		(x,	1);
	create_insn	(x=0X80517CC8);
	op_hex		(x,	1);
	create_insn	(x=0X80517CD4);
	op_hex		(x,	1);
	create_insn	(x=0X80517CDE);
	op_hex		(x,	1);
	create_insn	(x=0X80517CE4);
	op_hex		(x,	1);
	create_insn	(x=0X80517CEA);
	op_hex		(x,	1);
	create_insn	(x=0X80517CF4);
	op_hex		(x,	1);
	create_insn	(x=0X80517CFA);
	op_hex		(x,	1);
	create_insn	(0X80517D06);
	create_insn	(0X80517D0A);
	create_insn	(0X80517D0E);
	create_insn	(0X80517D14);
	create_insn	(0X80517D18);
	create_insn	(0X80517D1C);
	create_insn	(0X80517D22);
	create_insn	(x=0X80517D24);
	op_hex		(x,	1);
	create_insn	(x=0X80517D28);
	op_hex		(x,	1);
	create_insn	(x=0X80517D2C);
	op_hex		(x,	1);
	create_dword	(x=0X80517D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80517D4C);
	create_dword	(x=0X80517D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517D54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80517D5C);
	create_dword	(x=0X80517D60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517D64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517D7A);
	op_hex		(x,	1);
	create_insn	(x=0X80517D86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517D8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517D8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517D8E);
	op_stkvar	(x,	1);
	create_insn	(0X80517D96);
	create_insn	(x=0X80517D9C);
	op_hex		(x,	1);
	create_insn	(x=0X80517DA0);
	op_hex		(x,	1);
	create_insn	(x=0X80517DAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517DAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517DB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517DB2);
	op_stkvar	(x,	1);
	create_insn	(0X80517DBC);
	create_dword	(x=0X80517DCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80517DD0);
	create_dword	(x=0X80517DD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517DD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517DDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517DE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517DE4);
	op_hex		(x,	1);
	create_insn	(x=0X80517DE8);
	op_hex		(x,	1);
	create_insn	(x=0X80517DF0);
	op_hex		(x,	1);
	create_insn	(x=0X80517DF4);
	op_hex		(x,	1);
	create_insn	(x=0X80517E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517E3C);
	op_hex		(x,	1);
	set_cmt	(0X80517E58,	"a2",	0);
	create_insn	(x=0X80517E6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517E7A);
	op_stkvar	(x,	1);
	set_cmt	(0X80517E7E,	"a3",	0);
	create_insn	(x=0X80517E82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517E90);
	op_hex		(x,	1);
	create_insn	(x=0X80517E98);
	op_hex		(x,	1);
	set_cmt	(0X80517EAA,	"a2",	0);
	create_insn	(x=0X80517EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80517EDA);
	op_stkvar	(x,	1);
	set_cmt	(0X80517EDE,	"a3",	0);
	create_insn	(x=0X80517EF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517EFC);
	op_stkvar	(x,	1);
	set_cmt	(0X80517F00,	"a3",	0);
	create_insn	(x=0X80517F04);
	op_stkvar	(x,	1);
	create_insn	(0X80517F12);
	set_cmt	(0X80517F26,	"a2",	0);
	create_insn	(x=0X80517F3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517F4A);
	op_stkvar	(x,	1);
	set_cmt	(0X80517F4E,	"a3",	0);
	create_insn	(x=0X80517F52);
	op_stkvar	(x,	1);
	create_insn	(0X80517F64);
	create_insn	(0X80517F6E);
	create_dword	(0X80517F74);
	create_dword	(0X80517F78);
	create_dword	(x=0X80517F7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80517F80);
	create_dword	(x=0X80517F84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517F88);
	create_insn	(x=0X80517F8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517F9E);
	op_hex		(x,	1);
	create_insn	(x=0X80517FAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517FAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517FB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517FB2);
	op_stkvar	(x,	1);
	create_insn	(0X80517FBC);
	create_insn	(x=0X80517FBE);
	op_hex		(x,	1);
	create_dword	(x=0X80517FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80517FDC);
	create_dword	(x=0X80517FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517FE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517FEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80517FEC,	"arm_mmu_desc_unmap_section");
	create_insn	(x=0X80518002);
	op_hex		(x,	1);
	create_insn	(x=0X8051800E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518012);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518014);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518016);
	op_stkvar	(x,	1);
	create_insn	(0X80518020);
	create_dword	(x=0X80518034);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518038);
	create_dword	(x=0X8051803C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518044);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518048);
	create_insn	(x=0X8051804E);
	op_hex		(x,	1);
	create_insn	(x=0X80518052);
	op_hex		(x,	1);
	create_insn	(x=0X8051805E);
	op_hex		(x,	1);
	create_insn	(x=0X80518066);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518080);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805180A0);
	op_hex		(x,	1);
	create_dword	(x=0X805180A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805180AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805180B0);
	create_insn	(0X805180B4);
	create_insn	(x=0X805180B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805180C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805180D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805180D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805180D8);
	create_insn	(x=0X805180E6);
	op_hex		(x,	1);
	create_dword	(0X80518100);
	create_insn	(0X80518104);
	set_name	(0X80518104,	"arch_context_switch");
	create_insn	(0X8051810C);
	create_insn	(0X80518138);
	create_insn	(x=0X80518154);
	op_hex		(x,	1);
	create_insn	(0X80518164);
	create_insn	(x=0X80518168);
	op_hex		(x,	1);
	create_insn	(0X80518172);
	create_insn	(x=0X80518176);
	op_hex		(x,	1);
	create_insn	(0X80518180);
	create_insn	(x=0X80518184);
	op_hex		(x,	1);
	create_insn	(0X80518190);
	set_name	(0X80518190,	"arch_early_init");
	create_insn	(x=0X8051819C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805181A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805181C8);
	op_hex		(x,	1);
	create_insn	(x=0X805181D4);
	op_hex		(x,	1);
	create_insn	(x=0X805181E0);
	op_hex		(x,	1);
	create_insn	(x=0X805181E4);
	op_hex		(x,	1);
	create_dword	(x=0X805181F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805181FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518200);
	set_name	(0X80518200,	"nullsub_6");
	create_insn	(0X80518204);
	create_insn	(x=0X80518208);
	op_hex		(x,	1);
	create_insn	(0X8051821C);
	set_name	(0X8051821C,	"arch_vfp_save");
	set_cmt	(0X8051822C,	"result",	0);
	create_insn	(x=0X8051822C);
	op_hex		(x,	1);
	set_cmt	(0X80518234,	"_QWORD *",	0);
	create_insn	(0X80518248);
	set_name	(0X80518248,	"arch_vfp_restore");
	set_cmt	(0X80518258,	"result",	0);
	create_insn	(x=0X80518258);
	op_hex		(x,	1);
	set_cmt	(0X80518260,	"int",	0);
	set_cmt	(0X80518268,	"result",	0);
	create_insn	(0X80518274);
	set_name	(0X80518274,	"arch_cycle_count64");
	create_insn	(x=0X805182A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805182B0);
	op_hex		(x,	1);
	create_dword	(x=0X805182DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805182E0);
	set_name	(0X805182E0,	"lk_init_level_0");
	create_insn	(x=0X805182E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805182EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805182F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051832A);
	create_insn	(0X80518330);
	create_insn	(0X80518334);
	create_insn	(0X80518342);
	create_dword	(x=0X8051834C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518350);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518354);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518358);
	set_name	(0X80518358,	"bootstrap2");
	create_insn	(x=0X8051835A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051836A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051837A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051838A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518394);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805183A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805183B6,	"int",	0);
	create_dword	(x=0X805183C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805183C4);
	create_dword	(x=0X805183C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805183CC);
	create_dword	(x=0X805183D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805183D4);
	create_dword	(x=0X805183D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805183DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805183E0);
	create_dword	(x=0X805183E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805183E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X805183E8,	"lk_main");
	create_insn	(x=0X805183F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051841C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051841E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051842A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80518442);
	create_insn	(x=0X80518462);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051846C,	"func",	0);
	set_cmt	(0X8051846E,	"arg",	0);
	set_cmt	(0X80518470,	"stack_size",	0);
	create_insn	(x=0X80518470);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518472);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518474,	"prio",	0);
	set_cmt	(0X80518480,	"thread_t *",	0);
	create_dword	(x=0X8051848C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518494);
	create_dword	(x=0X80518498);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051849C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805184A0);
	create_dword	(x=0X805184A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805184A8);
	create_dword	(0X805184AC);
	create_dword	(0X805184B0);
	create_dword	(0X805184B4);
	create_dword	(0X805184B8);
	create_dword	(x=0X805184BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805184C0);
	create_dword	(x=0X805184C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805184C8);
	create_insn	(0X805184D4);
	set_name	(0X805184D4,	"apps_init");
	create_insn	(x=0X805184D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805184D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805184DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805184EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518500,	"a3",	0);
	set_cmt	(0X80518506,	"a2",	0);
	create_insn	(x=0X80518514);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051851A,	"arg",	0);
	set_cmt	(0X8051851C,	"func",	0);
	set_cmt	(0X8051851E,	"prio",	0);
	set_cmt	(0X80518520,	"stack_size",	0);
	create_insn	(x=0X80518520);
	op_stkvar	(x,	1);
	set_cmt	(0X80518522,	"name",	0);
	set_cmt	(0X80518530,	"thread_t *",	0);
	create_insn	(0X8051853A);
	create_dword	(x=0X80518540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518544);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518548);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051854C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518550);
	create_insn	(0X80518554);
	set_name	(0X80518554,	"app_thread_entry");
	create_insn	(0X80518560);
	set_name	(0X80518560,	"queue_adsp_app");
	create_insn	(x=0X80518568);
	op_stkvar	(x,	1);
	set_cmt	(0X80518578,	"src",	0);
	set_cmt	(0X8051857C,	"s",	0);
	set_cmt	(0X8051857E,	"dst",	0);
	create_insn	(x=0X8051857E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518580);
	op_stkvar	(x,	1);
	set_cmt	(0X80518586,	"a1",	0);
	create_insn	(x=0X80518586);
	op_stkvar	(x,	1);
	set_cmt	(0X80518588,	"a2",	0);
	set_cmt	(0X8051858A,	"a3",	0);
	create_insn	(x=0X80518592);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518594);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518598);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051859C);
	op_stkvar	(x,	1);
	set_cmt	(0X805185A0,	"message",	0);
	create_insn	(x=0X805185A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805185A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805185A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805185A6,	"msgq",	0);
	create_insn	(x=0X805185A6);
	op_plain_offset	(x,	1,	0X807B186C);
	op_plain_offset	(x,	129,	0X807B186C);
	create_insn	(x=0X805185AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805185B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805185BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805185BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805185C0);
	op_stkvar	(x,	1);
	create_insn	(0X805185CA);
	create_dword	(x=0X805185D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805185D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805185D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805185DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805185E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805185E4);
	set_name	(0X805185E4,	"queue_adsp_app_status");
	create_insn	(x=0X805185EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805185FA);
	op_stkvar	(x,	1);
	set_cmt	(0X805185FC,	"message",	0);
	create_insn	(x=0X805185FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805185FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518600);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518602);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518604);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518606);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518608);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051860C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051860E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518610,	"msgq",	0);
	create_insn	(x=0X80518610);
	op_plain_offset	(x,	1,	0X807B186C);
	op_plain_offset	(x,	129,	0X807B186C);
	create_insn	(x=0X80518618);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518622);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518626);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518628);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051862A);
	op_stkvar	(x,	1);
	create_insn	(0X80518634);
	create_dword	(x=0X80518638);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	create_dword	(x=0X8051863C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518644);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8051864C,	"block",	0);
	create_insn	(0X8051864C);
	set_name	(0X8051864C,	"notify_message_to_host");
	set_cmt	(0X80518650,	"timeout",	0);
	set_cmt	(0X80518652,	"data",	0);
	set_cmt	(0X80518656,	"mbx",	0);
	create_insn	(x=0X80518656);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518662);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518666);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051866A);
	op_stkvar	(x,	1);
	create_insn	(0X80518674);
	create_dword	(x=0X80518678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051867C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518684);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518688);
	set_name	(0X80518688,	"delete_app_instance");
	set_cmt	(0X80518692,	"int",	0);
	set_cmt	(0X80518696,	"unsigned int",	0);
	set_cmt	(0X8051869C,	"result",	0);
	set_cmt	(0X8051869E,	"a2",	0);
	set_cmt	(0X805186A4,	"int",	0);
	set_cmt	(0X805186A8,	"unsigned int",	0);
	set_cmt	(0X805186AE,	"result",	0);
	set_cmt	(0X805186B0,	"a2",	0);
	set_cmt	(0X805186B6,	"int",	0);
	set_cmt	(0X805186BA,	"unsigned int",	0);
	set_cmt	(0X805186C0,	"result",	0);
	set_cmt	(0X805186C2,	"a2",	0);
	set_cmt	(0X805186CC,	"int",	0);
	set_cmt	(0X805186D0,	"unsigned int",	0);
	set_cmt	(0X805186D6,	"result",	0);
	set_cmt	(0X805186D8,	"a2",	0);
	create_insn	(0X805186E8);
	create_insn	(0X805186EC);
	set_name	(0X805186EC,	"create_and_init_app");
	create_insn	(x=0X805186FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80518706);
	set_cmt	(0X80518710,	"result",	0);
	set_cmt	(0X80518712,	"char *",	0);
	set_cmt	(0X80518714,	"int",	0);
	set_cmt	(0X8051871C,	"result",	0);
	set_cmt	(0X80518724,	"char *",	0);
	set_cmt	(0X80518728,	"int",	0);
	set_cmt	(0X80518736,	"vaddr",	0);
	set_cmt	(0X80518752,	"paddr",	0);
	set_cmt	(0X80518754,	"size",	0);
	set_cmt	(0X80518756,	"flags",	0);
	set_cmt	(0X8051875C,	"vaddr",	0);
	set_cmt	(0X80518760,	"paddr",	0);
	set_cmt	(0X80518762,	"size",	0);
	set_cmt	(0X80518764,	"flags",	0);
	set_cmt	(0X8051876A,	"vaddr",	0);
	set_cmt	(0X8051876E,	"paddr",	0);
	set_cmt	(0X80518770,	"size",	0);
	set_cmt	(0X80518772,	"flags",	0);
	set_cmt	(0X8051877C,	"vaddr",	0);
	set_cmt	(0X80518780,	"paddr",	0);
	set_cmt	(0X80518782,	"size",	0);
	set_cmt	(0X80518784,	"flags",	0);
	set_cmt	(0X8051878A,	"int",	0);
	set_cmt	(0X8051878C,	"result",	0);
	set_cmt	(0X80518790,	"char *",	0);
	set_cmt	(0X805187B8,	"result",	0);
	create_insn	(0X805187C2);
	create_insn	(0X805187C4);
	create_dword	(x=0X805187C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805187CC);
	set_name	(0X805187CC,	"start_adsp_app");
	set_cmt	(0X805187D8,	"prio",	0);
	set_cmt	(0X805187DA,	"stack_size",	0);
	create_insn	(x=0X805187DA);
	op_stkvar	(x,	1);
	set_cmt	(0X805187DC,	"func",	0);
	set_cmt	(0X805187DE,	"name",	0);
	set_cmt	(0X805187E0,	"arg",	0);
	set_cmt	(0X805187EA,	"a2",	0);
	create_insn	(x=0X805187EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805187F2,	"result",	0);
	create_insn	(0X805187FE);
	set_cmt	(0X80518802,	"thread_t *",	0);
	create_dword	(x=0X80518810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518814);
	set_name	(0X80518814,	"app_thread_receive");
	create_insn	(x=0X8051881A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051881E,	"stack_size",	0);
	create_insn	(x=0X80518828);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518830);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518832);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518834);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518846);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051884A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051884C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051884E);
	op_stkvar	(x,	1);
	set_cmt	(0X80518858,	"msgq",	0);
	create_insn	(0X80518858);
	set_cmt	(0X8051885C,	"message",	0);
	create_insn	(x=0X8051885C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518864);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051886A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051886C);
	op_stkvar	(x,	1);
	set_cmt	(0X8051887A,	"data",	0);
	create_insn	(x=0X8051887A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051887C,	"stack_sz",	0);
	create_insn	(x=0X8051887C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518886);
	op_stkvar	(x,	1);
	set_cmt	(0X8051888A,	"data",	0);
	create_insn	(x=0X8051888A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051888C,	"stack_sz",	0);
	create_insn	(x=0X8051888C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051889E);
	op_stkvar	(x,	1);
	set_cmt	(0X805188A0,	"stack_sz",	0);
	create_insn	(x=0X805188A0);
	op_stkvar	(x,	1);
	set_cmt	(0X805188A2,	"app",	0);
	set_cmt	(0X805188A4,	"arg",	0);
	create_insn	(x=0X805188A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805188AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805188B4);
	set_cmt	(0X805188BA,	"int",	0);
	create_insn	(x=0X805188BA);
	op_stkvar	(x,	1);
	set_cmt	(0X805188BC,	"status",	0);
	create_insn	(x=0X805188BC);
	op_stkvar	(x,	1);
	set_cmt	(0X805188BE,	"app",	0);
	set_cmt	(0X805188C0,	"host_ref",	0);
	set_cmt	(0X805188C2,	"msg",	0);
	set_cmt	(0X805188C8,	"msg",	0);
	create_dword	(x=0X805188D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805188D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805188D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805188DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805188E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805188E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805188E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805188EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X805188F0,	"status",	0);
	create_insn	(0X805188F0);
	set_cmt	(0X80518900,	"result",	0);
	set_cmt	(0X80518908,	"host_ref",	0);
	set_cmt	(0X8051890A,	"msg",	0);
	set_cmt	(0X80518910,	"app",	0);
	set_cmt	(0X80518916,	"msg",	0);
	set_cmt	(0X80518924,	"stack_size",	0);
	create_insn	(0X80518924);
	set_name	(0X80518924,	"adsp_static_apps_init");
	create_insn	(x=0X80518926);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518928);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518936,	"app",	0);
	set_cmt	(0X80518956,	"priority",	0);
	set_cmt	(0X8051895C,	"app",	0);
	set_cmt	(0X8051895E,	"stack_sz",	0);
	set_cmt	(0X80518960,	"arg",	0);
	create_insn	(0X80518968);
	create_insn	(x=0X80518972);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518974);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518976,	"a3",	0);
	set_cmt	(0X80518982,	"app",	0);
	create_insn	(0X80518982);
	create_dword	(x=0X8051898C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518994);
	create_dword	(x=0X80518998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051899C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805189A0);
	set_name	(0X805189A0,	"adsp_app_module_init");
	create_insn	(x=0X805189A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805189A6,	"sem",	0);
	create_insn	(x=0X805189A8);
	op_stkvar	(x,	1);
	set_cmt	(0X805189AC,	"mbx_id",	0);
	set_cmt	(0X805189B0,	"mbx",	0);
	set_cmt	(0X805189B4,	"err_handler",	0);
	create_insn	(x=0X805189B4);
	op_stkvar	(x,	1);
	set_cmt	(0X805189B6,	"msg_handler",	0);
	create_insn	(x=0X805189B6);
	op_stkvar	(x,	1);
	set_cmt	(0X805189B8,	"context",	0);
	create_insn	(x=0X805189B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805189BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805189E4,	"msgq",	0);
	set_cmt	(0X805189E6,	"size",	0);
	create_insn	(x=0X805189EA);
	op_plain_offset	(x,	1,	0X807B186C);
	op_plain_offset	(x,	129,	0X807B186C);
	set_cmt	(0X805189F2,	"msgq",	0);
	create_insn	(x=0X805189F2);
	op_plain_offset	(x,	1,	0X807B186C);
	op_plain_offset	(x,	129,	0X807B186C);
	set_cmt	(0X805189F4,	"size",	0);
	create_insn	(x=0X80518A00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518A02,	"stack_size",	0);
	create_insn	(x=0X80518A02);
	op_stkvar	(x,	1);
	set_cmt	(0X80518A04,	"arg",	0);
	set_cmt	(0X80518A06,	"func",	0);
	set_cmt	(0X80518A08,	"prio",	0);
	create_insn	(x=0X80518A12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80518A16);
	set_cmt	(0X80518A1E,	"thread_t *",	0);
	create_insn	(x=0X80518A24);
	op_plain_offset	(x,	1,	0X80306000);
	op_plain_offset	(x,	129,	0X80306000);
	set_cmt	(0X80518A28,	"vaddr",	0);
	set_cmt	(0X80518A2A,	"size",	0);
	set_cmt	(0X80518A2E,	"flags",	0);
	set_cmt	(0X80518A30,	"paddr",	0);
	create_insn	(x=0X80518A38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518A3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80518A44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518A48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518A4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518A50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518A54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518A58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518A5C);
	set_name	(0X80518A5C,	"vaddr");
	create_dword	(x=0X80518A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518A64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518A68);
	set_name	(0X80518A68,	"shell_entry");
	create_insn	(0X80518A6C);
	set_name	(0X80518A6C,	"shell_init");
	create_insn	(0X80518A70);
	set_name	(0X80518A70,	"arm_get_vfp_fpexc");
	create_insn	(0X80518A78);
	set_name	(0X80518A78,	"arm_set_vfp_fpexc");
	create_insn	(0X80518A80);
	set_name	(0X80518A80,	"arm_get_vfp_fpscr");
	create_insn	(0X80518A88);
	set_name	(0X80518A88,	"arm_set_vfp_fpscr");
	create_insn	(0X80518A90);
	set_name	(0X80518A90,	"arm_save_vfp_dregs");
	create_insn	(x=0X80518A98);
	op_hex		(x,	1);
	create_insn	(0X80518AA8);
	set_name	(0X80518AA8,	"arm_restore_vfp_dregs");
	create_insn	(x=0X80518AB0);
	op_hex		(x,	1);
	set_name	(0X80518AC1,	"cmd_threadload");
	create_insn	(x=0X80518AC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518AD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518AD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518ADE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518AE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80518AEE);
	create_dword	(x=0X80518B04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518B08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518B0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518B10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518B14);
	set_name	(0X80518B14,	"threadload");
	set_cmt	(0X80518B68,	"s64",	0);
	set_cmt	(0X80518B6C,	"s64",	0);
	set_cmt	(0X80518B78,	"int",	0);
	set_cmt	(0X80518B82,	"unsigned int",	0);
	set_cmt	(0X80518B86,	"unsigned int",	0);
	create_insn	(x=0X80518B8C);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518B92);
	op_plain_offset	(x,	1,	0X807B18F8);
	op_plain_offset	(x,	129,	0X807B18F8);
	create_insn	(x=0X80518B94);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	set_cmt	(0X80518B9A,	"fmt",	0);
	create_insn	(x=0X80518B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518B9E);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518BA2);
	op_plain_offset	(x,	1,	0X807B18F8);
	op_plain_offset	(x,	129,	0X807B18F8);
	create_insn	(x=0X80518BA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518BA8);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518BAC);
	op_plain_offset	(x,	1,	0X807B18F8);
	op_plain_offset	(x,	129,	0X807B18F8);
	create_insn	(x=0X80518BB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518BB4);
	op_plain_offset	(x,	1,	0X807B18F8);
	op_plain_offset	(x,	129,	0X807B18F8);
	set_cmt	(0X80518BBC,	"a1",	0);
	set_cmt	(0X80518BBE,	"a2",	0);
	set_cmt	(0X80518BC0,	"a3",	0);
	create_insn	(0X80518BD2);
	create_dword	(x=0X80518BD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518BD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518BDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518BE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518BE4);
	create_dword	(x=0X80518BE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518BEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518BF0);
	set_name	(0X80518BF0,	"cmd_threadstats");
	create_insn	(x=0X80518BF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518BF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518BFA,	"a3",	0);
	create_insn	(x=0X80518BFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518C0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518C0E,	"a3",	0);
	create_insn	(x=0X80518C14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518C1A,	"a2",	0);
	create_insn	(x=0X80518C1A);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518C1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518C22,	"a2",	0);
	create_insn	(x=0X80518C22);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518C24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518C2A,	"a2",	0);
	create_insn	(x=0X80518C2A);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518C2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518C32,	"a2",	0);
	create_insn	(x=0X80518C32);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518C34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518C3A,	"a2",	0);
	create_insn	(x=0X80518C3A);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518C3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518C42,	"a2",	0);
	create_insn	(x=0X80518C42);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80518C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518C4A,	"a2",	0);
	create_insn	(x=0X80518C4A);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	set_cmt	(0X80518C4C,	"fmt",	0);
	set_cmt	(0X80518C52,	"a2",	0);
	create_insn	(x=0X80518C52);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	set_cmt	(0X80518C54,	"fmt",	0);
	set_cmt	(0X80518C5A,	"fmt",	0);
	set_cmt	(0X80518C5C,	"a2",	0);
	create_insn	(x=0X80518C5C);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_dword	(x=0X80518C68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518C94);
	set_name	(0X80518C94,	"cmd_threads");
	create_insn	(x=0X80518C96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80518CA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518CA8);
	set_name	(0X80518CA8,	"event_init");
	create_dword	(0X80518CD0);
	create_dword	(0X80518CD4);
	create_insn	(0X80518CD8);
	create_insn	(x=0X80518CEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518CEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518CF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518CF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518CFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518D0A,	"wait",	0);
	set_cmt	(0X80518D10,	"reschedule",	0);
	set_cmt	(0X80518D1A,	"child",	0);
	create_insn	(x=0X80518D22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X80518D34);
	create_dword	(x=0X80518D38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518D3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518D40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518D44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518D48);
	set_name	(0X80518D48,	"event_wait_timeout");
	create_insn	(x=0X80518D5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518D5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518D60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518D62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518D6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518D80);
	op_hex		(x,	1);
	create_insn	(0X80518D8C);
	create_dword	(0X80518DA4);
	create_dword	(x=0X80518DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518DAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518DB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518DB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518DB8);
	set_name	(0X80518DB8,	"event_is_signaled");
	create_insn	(0X80518DBC);
	set_name	(0X80518DBC,	"event_trywait");
	create_insn	(x=0X80518DCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518DD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518DDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518DF4);
	op_hex		(x,	1);
	create_insn	(0X80518E00);
	create_dword	(0X80518E14);
	create_dword	(x=0X80518E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518E1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518E20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518E24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518E28);
	set_name	(0X80518E28,	"event_signal");
	create_insn	(x=0X80518E3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518E40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518E42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518E4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518E60,	"wait",	0);
	set_cmt	(0X80518E64,	"wait_queue_error",	0);
	create_insn	(x=0X80518E64);
	op_hex		(x,	1);
	create_insn	(0X80518E7C);
	set_cmt	(0X80518E7E,	"reschedule",	0);
	set_cmt	(0X80518E86,	"child",	0);
	set_cmt	(0X80518E8A,	"parent",	0);
	set_cmt	(0X80518E8C,	"reschedule",	0);
	set_cmt	(0X80518E8E,	"all",	0);
	create_dword	(0X80518EA4);
	create_dword	(x=0X80518EA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518EAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518EB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518EB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518EB8);
	set_name	(0X80518EB8,	"event_unsignal");
	create_insn	(x=0X80518ECA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518ECE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518ED0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518ED2);
	op_stkvar	(x,	1);
	create_insn	(0X80518EDA);
	create_dword	(0X80518EE4);
	create_dword	(x=0X80518EE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518EEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518EF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80518EF4,	"child",	0);
	create_insn	(0X80518EF4);
	set_name	(0X80518EF4,	"event_add_child");
	set_cmt	(0X80518EFA,	"child",	0);
	create_insn	(0X80518EFA);
	set_name	(0X80518EFA,	"event_del_child");
	create_insn	(0X80518F00);
	set_name	(0X80518F00,	"kernel_init");
	create_insn	(x=0X80518F02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518F0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80518F1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518F20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518F24);
	set_name	(0X80518F24,	"mutex_init");
	create_dword	(0X80518F40);
	create_dword	(0X80518F44);
	create_insn	(0X80518FDC);
	set_name	(0X80518FDC,	"mutex_acquire_timeout");
	create_insn	(x=0X80518FEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518FF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518FF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518FFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519010);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519012);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051901C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80519052);
	create_dword	(0X80519064);
	create_dword	(x=0X80519068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051906C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519074);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051907C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519080);
	set_name	(0X80519080,	"__mutex_release");
	create_insn	(x=0X80519092);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519096);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519098);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051909A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805190A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805190C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805190C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805190C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805190C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805190CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805190D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X80519104);
	create_dword	(x=0X80519108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051910C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519110);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519114);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051911C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519138);
	set_name	(0X80519138,	"insert_timer_in_queue");
	create_insn	(x=0X8051913A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051913C);
	op_plain_offset	(x,	1,	0XCB19A0);
	op_plain_offset	(x,	129,	0XCB19A0);
	create_insn	(0X8051916C);
	create_insn	(0X80519170);
	create_dword	(x=0X80519180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519184);
	set_name	(0X80519184,	"timer_tick");
	create_insn	(x=0X80519192);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051919A);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X805191A2);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X805191EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805191F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805191F6);
	op_plain_offset	(x,	1,	0X807B19A0);
	op_plain_offset	(x,	129,	0X807B19A0);
	create_insn	(x=0X80519224);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051922A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051922C);
	op_stkvar	(x,	1);
	create_insn	(0X80519234);
	create_insn	(x=0X8051923A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519248);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X8051924C);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X80519252);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519264);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051927A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051929E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805192A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805192A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805192A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805192B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805192B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805192C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805192C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805192CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805192CC);
	op_stkvar	(x,	1);
	create_insn	(0X805192D4);
	set_cmt	(0X805192E2,	"timer",	0);
	create_insn	(0X805192F2);
	create_dword	(0X805192FC);
	create_dword	(x=0X80519300);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519304);
	create_dword	(x=0X80519308);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051930C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519310);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519314);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519318);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051931C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519320);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519324);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519328);
	create_insn	(0X8051932C);
	set_name	(0X8051932C,	"timer_set");
	create_insn	(x=0X80519346);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051934A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051934C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051934E);
	op_stkvar	(x,	1);
	create_insn	(0X80519356);
	create_insn	(x=0X80519364);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051936C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519376);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051937C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519396);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805193A4,	"timer",	0);
	create_insn	(x=0X805193AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805193AC);
	op_plain_offset	(x,	1,	0XCB19A0);
	op_plain_offset	(x,	129,	0XCB19A0);
	create_insn	(x=0X805193BA);
	create_dword	(0X805193D8);
	create_dword	(x=0X805193DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805193E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805193E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805193E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805193EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805193F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805193F4);
	create_insn	(0X805193F8);
	set_name	(0X805193F8,	"timer_initialize");
	create_dword	(0X8051940C);
	create_insn	(0X80519454);
	set_name	(0X80519454,	"timer_set_oneshot");
	set_cmt	(0X80519458,	"arg",	0);
	create_insn	(x=0X80519458);
	op_stkvar	(x,	1);
	set_cmt	(0X8051945E,	"delay",	0);
	set_cmt	(0X80519460,	"period",	0);
	set_cmt	(0X80519462,	"callback",	0);
	create_insn	(0X8051946C);
	set_name	(0X8051946C,	"timer_set_periodic");
	set_cmt	(0X80519474,	"delay",	0);
	set_cmt	(0X80519476,	"arg",	0);
	create_insn	(x=0X80519476);
	op_stkvar	(x,	1);
	set_cmt	(0X80519478,	"period",	0);
	set_cmt	(0X8051947A,	"callback",	0);
	create_insn	(0X80519484);
	set_name	(0X80519484,	"timer_cancel");
	create_insn	(x=0X80519496);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051949A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051949C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051949E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805194A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805194B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805194B6);
	op_plain_offset	(x,	1,	0XCB19A0);
	op_plain_offset	(x,	129,	0XCB19A0);
	create_insn	(0X805194C4);
	create_insn	(x=0X805194D8);
	op_plain_offset	(x,	1,	0XCB19A0);
	op_plain_offset	(x,	129,	0XCB19A0);
	create_insn	(0X805194EA);
	create_insn	(0X80519520);
	create_dword	(0X80519530);
	create_dword	(x=0X80519534);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519538);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051953C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519544);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519548);
	create_insn	(x=0X8051954C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051954E);
	op_plain_offset	(x,	1,	0XCB19A0);
	op_plain_offset	(x,	129,	0XCB19A0);
	create_dword	(x=0X80519554);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519558);
	set_name	(0X80519558,	"sem_init");
	create_dword	(0X80519580);
	create_dword	(0X80519584);
	create_insn	(0X80519588);
	set_name	(0X80519588,	"sem_destroy");
	create_insn	(x=0X8051958C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051959C,	"wait",	0);
	set_cmt	(0X805195A2,	"reschedule",	0);
	set_cmt	(0X805195A8,	"child",	0);
	create_insn	(x=0X805195B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805195C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805195C4);
	set_name	(0X805195C4,	"__sem_post");
	set_cmt	(0X805195C8,	"reschedule",	0);
	create_insn	(x=0X805195CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805195F0,	"child",	0);
	create_insn	(0X805195F0);
	set_cmt	(0X805195F4,	"parent",	0);
	set_cmt	(0X805195F6,	"all",	0);
	create_insn	(0X8051960A);
	create_dword	(x=0X8051960C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519610);
	create_insn	(x=0X80519612);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80519644);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80519648);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80519648,	"sem_trywait");
	create_insn	(x=0X80519664);
	op_plain_offset	(x,	1,	0XFFFFFFFD);
	op_plain_offset	(x,	129,	0XFFFFFFFD);
	create_dword	(x=0X80519674);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519678);
	set_name	(0X80519678,	"sem_timedwait");
	create_insn	(x=0X8051967C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805196B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805196BC);
	set_name	(0X805196BC,	"semaphore_is_signaled");
	set_cmt	(0X805196C8,	"child",	0);
	create_insn	(0X805196C8);
	set_name	(0X805196C8,	"sem_add_child");
	set_cmt	(0X805196CE,	"child",	0);
	create_insn	(0X805196CE);
	set_name	(0X805196CE,	"sem_del_child");
	create_insn	(0X805196D4);
	set_name	(0X805196D4,	"list_delete");
	create_insn	(0X80519714);
	create_insn	(x=0X80519736);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051973A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80519742);
	set_cmt	(0X80519744,	"s64",	0);
	set_cmt	(0X80519748,	"s64",	0);
	set_cmt	(0X8051974A,	"unsigned int",	0);
	set_cmt	(0X8051974E,	"unsigned int",	0);
	create_insn	(x=0X80519760);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80519768);
	create_insn	(x=0X8051976C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80519780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519784);
	create_dword	(x=0X80519788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051978C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519790);
	set_name	(0X80519790,	"insert_in_run_queue_tail");
	create_insn	(x=0X805197A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197AA);
	op_stkvar	(x,	1);
	create_insn	(0X805197B0);
	create_insn	(x=0X805197BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197C2);
	op_stkvar	(x,	1);
	create_insn	(0X805197CA);
	create_insn	(x=0X805197D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805197E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805197FA);
	op_stkvar	(x,	1);
	set_cmt	(0X80519800,	"int",	0);
	create_insn	(0X80519800);
	set_cmt	(0X8051981C,	"result",	0);
	set_cmt	(0X8051981E,	"int",	0);
	create_dword	(0X80519834);
	create_dword	(x=0X80519838);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051983C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519840);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519844);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051984C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519850);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519854);
	create_dword	(0X80519858);
	create_insn	(0X8051985C);
	set_name	(0X8051985C,	"insert_in_run_queue_head");
	create_insn	(x=0X8051986E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519872);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519874);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519876);
	op_stkvar	(x,	1);
	create_insn	(0X8051987C);
	create_insn	(x=0X80519886);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051988A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051988C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051988E);
	op_stkvar	(x,	1);
	create_insn	(0X80519896);
	create_insn	(x=0X805198A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805198A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805198AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805198AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805198B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805198BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805198C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805198C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805198C6);
	op_stkvar	(x,	1);
	set_cmt	(0X805198CC,	"int",	0);
	create_insn	(0X805198CC);
	set_cmt	(0X805198E2,	"result",	0);
	set_cmt	(0X805198E4,	"int",	0);
	create_dword	(0X805198FC);
	create_dword	(x=0X80519900);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519904);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519908);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051990C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519910);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519914);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519918);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051991C);
	create_dword	(0X80519920);
	create_insn	(0X80519924);
	set_name	(0X80519924,	"ready_q_or_tree_insertion");
	create_insn	(0X8051994A);
	set_cmt	(0X8051994C,	"a2",	0);
	set_cmt	(0X8051994E,	"now_c",	0);
	create_insn	(x=0X8051994E);
	op_stkvar	(x,	1);
	set_cmt	(0X80519952,	"now",	0);
	set_cmt	(0X80519954,	"t",	0);
	set_cmt	(0X80519956,	"now",	0);
	create_insn	(0X80519960);
	create_insn	(0X80519978);
	create_insn	(0X80519986);
	create_insn	(0X80519992);
	create_dword	(0X80519998);
	create_insn	(0X8051999C);
	set_name	(0X8051999C,	"thread_sleep_handler");
	create_insn	(x=0X805199AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805199B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805199B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805199B4);
	op_stkvar	(x,	1);
	create_insn	(0X805199BC);
	create_insn	(x=0X805199C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805199CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805199CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805199CE);
	op_stkvar	(x,	1);
	create_insn	(0X805199D8);
	create_dword	(0X805199EC);
	create_dword	(x=0X805199F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805199F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805199F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805199FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519A00);
	set_name	(0X80519A00,	"thread_create_etc");
	create_insn	(x=0X80519A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519A0E);
	op_stkvar	(x,	1);
	create_insn	(0X80519A24);
	set_cmt	(0X80519A34,	"src",	0);
	set_cmt	(0X80519A36,	"s",	0);
	set_cmt	(0X80519A38,	"dst",	0);
	set_cmt	(0X80519A40,	"count",	0);
	set_cmt	(0X80519A42,	"size",	0);
	create_insn	(x=0X80519A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519A52);
	op_hex		(x,	1);
	create_insn	(x=0X80519A64);
	op_stkvar	(x,	1);
	create_insn	(0X80519A6A);
	create_insn	(x=0X80519A6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519A76);
	op_stkvar	(x,	1);
	set_cmt	(0X80519AA0,	"timer",	0);
	create_insn	(x=0X80519AC8);
	op_hex		(x,	1);
	create_insn	(0X80519AE6);
	create_insn	(x=0X80519AF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519B00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519B04);
	op_plain_offset	(x,	1,	0XCB1C00);
	op_plain_offset	(x,	129,	0XCB1C00);
	create_insn	(x=0X80519B0C);
	op_plain_offset	(x,	1,	0XCB1C00);
	op_plain_offset	(x,	129,	0XCB1C00);
	create_insn	(x=0X80519B0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X80519B20);
	create_dword	(0X80519B24);
	create_dword	(0X80519B28);
	create_dword	(x=0X80519B2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519B30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519B34);
	create_insn	(x=0X80519B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519B5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519B62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519B64);
	op_stkvar	(x,	1);
	create_insn	(0X80519B70);
	set_name	(0X80519B70,	"thread_create");
	create_insn	(x=0X80519B74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519B82);
	op_plain_offset	(x,	1,	0XCB19A8);
	op_plain_offset	(x,	129,	0XCB19A8);
	create_insn	(x=0X80519B92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519B9C);
	op_stkvar	(x,	1);
	create_dword	(x=0X80519BA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519BAC);
	set_name	(0X80519BAC,	"thread_resched");
	create_insn	(x=0X80519BB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519BD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519BEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519BF0);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(x=0X80519BF4);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(x=0X80519BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519BFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C1C);
	op_stkvar	(x,	1);
	create_insn	(0X80519C24);
	create_insn	(x=0X80519C28);
	op_stkvar	(x,	1);
	create_insn	(0X80519C38);
	create_insn	(x=0X80519C4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C52);
	op_stkvar	(x,	1);
	create_insn	(0X80519C5A);
	set_cmt	(0X80519C78,	"tree",	0);
	create_insn	(x=0X80519C88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C90);
	op_stkvar	(x,	1);
	create_insn	(0X80519C98);
	set_cmt	(0X80519CAC,	"item",	0);
	create_insn	(0X80519CAC);
	create_insn	(x=0X80519CAE);
	op_stkvar	(x,	1);
	set_cmt	(0X80519CB4,	"int",	0);
	create_insn	(x=0X80519CB4);
	op_stkvar	(x,	1);
	set_cmt	(0X80519CC8,	"result",	0);
	set_cmt	(0X80519CCA,	"int",	0);
	create_insn	(x=0X80519CEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519CEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519CF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519CF2);
	op_stkvar	(x,	1);
	create_insn	(0X80519CFA);
	create_insn	(0X80519D0E);
	create_insn	(x=0X80519D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519D4C);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(x=0X80519D50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519D56);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(x=0X80519D5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519D7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519D9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519D9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519DA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519DA2);
	op_stkvar	(x,	1);
	create_insn	(0X80519DAA);
	create_insn	(x=0X80519DB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519DBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519DBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519DBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519DC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80519DCE,	"timer",	0);
	set_cmt	(0X80519DD0,	"period",	0);
	set_cmt	(0X80519DD2,	"callback",	0);
	set_cmt	(0X80519DD4,	"arg",	0);
	create_dword	(x=0X80519DDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519DE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519DE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519DE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519DEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519DF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519DF8);
	create_dword	(x=0X80519DFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519E00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519E04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519E08);
	create_dword	(0X80519E0C);
	create_dword	(x=0X80519E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519E14);
	create_dword	(x=0X80519E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519E1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519E20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519E24);
	create_dword	(0X80519E28);
	create_insn	(0X80519E2C);
	set_cmt	(0X80519E30,	"timer",	0);
	create_insn	(x=0X80519E36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519E70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519E8C);
	op_stkvar	(x,	1);
	set_cmt	(0X80519E8E,	"oldthread",	0);
	set_cmt	(0X80519E98,	"newthread",	0);
	create_dword	(0X80519EAC);
	create_dword	(x=0X80519EB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519EB4);
	create_dword	(0X80519EB8);
	create_insn	(x=0X80519EBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80519EBC,	"thread_yield");
	create_insn	(x=0X80519ED2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519ED6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519ED8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519EDA);
	op_stkvar	(x,	1);
	create_insn	(0X80519EE2);
	create_insn	(x=0X80519EEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519EF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519EF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519EFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519F0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519F14);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(x=0X80519F18);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(0X80519F36);
	set_cmt	(0X80519F46,	"t",	0);
	set_cmt	(0X80519F48,	"a2",	0);
	set_cmt	(0X80519F5A,	"now_c",	0);
	create_insn	(x=0X80519F5A);
	op_stkvar	(x,	1);
	set_cmt	(0X80519F5E,	"now",	0);
	set_cmt	(0X80519F60,	"now",	0);
	create_dword	(x=0X80519F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519F8C);
	create_dword	(x=0X80519F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519F94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519F98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519F9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519FA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519FA8);
	create_insn	(0X80519FAC);
	set_name	(0X80519FAC,	"thread_resume");
	create_insn	(x=0X80519FBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519FC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519FC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519FC6);
	op_stkvar	(x,	1);
	create_insn	(0X80519FCE);
	create_insn	(x=0X80519FD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519FDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519FDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519FEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051A00E);
	create_insn	(0X8051A018);
	create_dword	(0X8051A040);
	create_dword	(x=0X8051A044);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A04C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A054);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A058);
	create_insn	(x=0X8051A05C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051A05C,	"thread_preempt");
	create_insn	(x=0X8051A072);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A076);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A078);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A07A);
	op_stkvar	(x,	1);
	create_insn	(0X8051A082);
	create_insn	(x=0X8051A08C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A090);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A092);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A094);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A09E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A0AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A0B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A0B8);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X8051A0BC);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(0X8051A0C4);
	create_insn	(0X8051A0E6);
	create_insn	(0X8051A0EC);
	set_cmt	(0X8051A0FC,	"now",	0);
	set_cmt	(0X8051A0FE,	"now_c",	0);
	create_insn	(x=0X8051A0FE);
	op_stkvar	(x,	1);
	set_cmt	(0X8051A102,	"now",	0);
	set_cmt	(0X8051A104,	"t",	0);
	create_insn	(x=0X8051A128);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A154);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A158);
	create_dword	(x=0X8051A15C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A160);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A164);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A16C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A174);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A178);
	create_insn	(x=0X8051A17C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051A17C,	"thread_set_sched_policy");
	create_insn	(x=0X8051A192);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A196);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A198);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A19A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A1A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051A1C4,	"timer",	0);
	create_insn	(0X8051A1DA);
	set_cmt	(0X8051A210,	"timer",	0);
	create_insn	(0X8051A22A);
	create_dword	(x=0X8051A234);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A238);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A23C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A240);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A244);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A248);
	create_insn	(x=0X8051A24C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051A24C,	"thread_block");
	create_insn	(x=0X8051A260);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A264);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A266);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A268);
	op_stkvar	(x,	1);
	create_insn	(0X8051A270);
	create_insn	(x=0X8051A27A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A27E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A282);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A28C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A29A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A29C);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(x=0X8051A2A0);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(x=0X8051A2B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A2DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A2E0);
	create_dword	(x=0X8051A2E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A2E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A2EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A2F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A2F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A2F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A2FC);
	set_name	(0X8051A2FC,	"thread_sleep");
	create_insn	(x=0X8051A300);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A314);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A318);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A31A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A31C);
	op_stkvar	(x,	1);
	create_insn	(0X8051A324);
	create_insn	(x=0X8051A32E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A332);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A334);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A336);
	op_stkvar	(x,	1);
	create_insn	(0X8051A340);
	create_insn	(x=0X8051A346);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051A34E,	"timer",	0);
	create_insn	(x=0X8051A34E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A354);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051A362,	"callback",	0);
	create_insn	(x=0X8051A362);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051A364,	"timer",	0);
	create_insn	(x=0X8051A364);
	op_stkvar	(x,	1);
	set_cmt	(0X8051A366,	"delay",	0);
	set_cmt	(0X8051A368,	"arg",	0);
	create_insn	(x=0X8051A378);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A388);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A38C);
	create_dword	(x=0X8051A390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A394);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A398);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A39C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A3A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A3A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A3A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8051A3A8,	"callback");
	create_insn	(x=0X8051A3AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051A3AC,	"tls_get");
	create_dword	(x=0X8051A3B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051A3BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051A3BC,	"tls_set");
	create_dword	(x=0X8051A3CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A3D0);
	set_name	(0X8051A3D0,	"thread_init_early");
	create_insn	(x=0X8051A3D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A3EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A3EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A3F4);
	op_plain_offset	(x,	1,	0XCB1C00);
	op_plain_offset	(x,	129,	0XCB1C00);
	create_insn	(x=0X8051A400);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051A402,	"s",	0);
	set_cmt	(0X8051A404,	"dst",	0);
	create_insn	(x=0X8051A404);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A40E);
	op_plain_offset	(x,	1,	0XCB1C00);
	op_plain_offset	(x,	129,	0XCB1C00);
	create_insn	(x=0X8051A410);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A414);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A418);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A41A);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A41E);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A420);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A426);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A428);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A42C);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A430);
	op_plain_offset	(x,	1,	0XCB1C08);
	op_plain_offset	(x,	129,	0XCB1C08);
	create_insn	(x=0X8051A436);
	op_plain_offset	(x,	1,	0XCB1C00);
	op_plain_offset	(x,	129,	0XCB1C00);
	create_insn	(x=0X8051A438);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A44C);
	create_dword	(x=0X8051A450);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A454);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A458);
	create_dword	(x=0X8051A45C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A460);
	create_dword	(x=0X8051A464);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A468);
	set_cmt	(0X8051A46C,	"timer",	0);
	create_insn	(0X8051A46C);
	set_name	(0X8051A46C,	"thread_init");
	create_dword	(0X8051A474);
	create_insn	(x=0X8051A478);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051A478,	"thread_set_name");
	set_cmt	(0X8051A47A,	"src",	0);
	set_cmt	(0X8051A47C,	"s",	0);
	set_cmt	(0X8051A480,	"dst",	0);
	create_dword	(x=0X8051A488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A48C);
	set_name	(0X8051A48C,	"thread_set_priority");
	create_insn	(0X8051A498);
	create_insn	(x=0X8051A49A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A4A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051A4A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051A4A8,	"thread_get_priority");
	create_dword	(x=0X8051A4B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A4B4);
	set_name	(0X8051A4B4,	"thread_become_idle");
	create_insn	(x=0X8051A4B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A4E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A4E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A4E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A4EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A4F0);
	set_name	(0X8051A4F0,	"dump_thread");
	create_insn	(x=0X8051A4FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A504);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A50A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A50C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A516);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A526);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A528);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A530);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A538);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A544);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A550);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A55A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A560);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A566);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A574);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A578);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A57C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A584);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A58C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A590);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A594);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A598);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A59C);
	set_name	(0X8051A59C,	"dump_all_threads");
	create_insn	(x=0X8051A59E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A5AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A5AE);
	op_plain_offset	(x,	1,	0X807B1C00);
	op_plain_offset	(x,	129,	0X807B1C00);
	set_cmt	(0X8051A5BA,	"t",	0);
	create_insn	(0X8051A5C6);
	create_dword	(x=0X8051A5D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A5D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051A5DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A5E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A5E4);
	set_name	(0X8051A5E4,	"dump_run_threads");
	create_insn	(x=0X8051A5E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A5F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A5F8);
	op_plain_offset	(x,	1,	0X807B1C00);
	op_plain_offset	(x,	129,	0X807B1C00);
	set_cmt	(0X8051A60C,	"t",	0);
	create_insn	(0X8051A618);
	create_insn	(x=0X8051A61A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A62C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A634);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A638);
	set_name	(0X8051A638,	"thread_get_cycle_count");
	create_insn	(x=0X8051A63A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A64C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A64E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A66E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A67A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A684);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A68C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A690);
	set_name	(0X8051A690,	"wait_queue_init");
	create_dword	(0X8051A6A0);
	create_insn	(0X8051A6A4);
	set_name	(0X8051A6A4,	"wait_queue_block");
	create_insn	(x=0X8051A6BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A6CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A6EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A6FE);
	op_stkvar	(x,	1);
	create_insn	(0X8051A706);
	set_cmt	(0X8051A73C,	"timer",	0);
	create_insn	(x=0X8051A73C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A742);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051A744,	"_DWORD *",	0);
	create_insn	(x=0X8051A744);
	op_stkvar	(x,	1);
	set_cmt	(0X8051A746,	"unsigned int",	0);
	set_cmt	(0X8051A748,	"int",	0);
	set_cmt	(0X8051A74A,	"int",	0);
	set_cmt	(0X8051A758,	"timer",	0);
	create_insn	(x=0X8051A758);
	op_stkvar	(x,	1);
	create_insn	(0X8051A764);
	create_dword	(0X8051A76C);
	create_dword	(x=0X8051A770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A774);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A77C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A784);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A78C);
	create_insn	(0X8051A790);
	set_name	(0X8051A790,	"thread_join");
	create_insn	(x=0X8051A7A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A7A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A7AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A7AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A7B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051A7D8);
	create_insn	(0X8051A7F8);
	create_insn	(x=0X8051A804);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A80A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A80C);
	op_stkvar	(x,	1);
	create_insn	(0X8051A816);
	create_insn	(x=0X8051A820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A824);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A826);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A828);
	op_stkvar	(x,	1);
	create_insn	(0X8051A830);
	create_insn	(x=0X8051A838);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A83C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A83E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A840);
	op_stkvar	(x,	1);
	create_insn	(0X8051A848);
	create_insn	(x=0X8051A854);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A858);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A85A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A85C);
	op_stkvar	(x,	1);
	create_insn	(0X8051A864);
	set_cmt	(0X8051A86A,	"item",	0);
	create_insn	(x=0X8051A89C);
	op_hex		(x,	1);
	create_dword	(0X8051A8B0);
	create_dword	(x=0X8051A8B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A8B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A8BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A8C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A8C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A8C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A8CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A8D0);
	set_name	(0X8051A8D0,	"wait_queue_wake_one");
	create_insn	(x=0X8051A8E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A8EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A8EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A8F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A904);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A908);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A90A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A90C);
	op_stkvar	(x,	1);
	create_insn	(0X8051A916);
	create_insn	(x=0X8051A91A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A91E);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	create_insn	(x=0X8051A922);
	op_plain_offset	(x,	1,	0XCB57A8);
	op_plain_offset	(x,	129,	0XCB57A8);
	set_cmt	(0X8051A92E,	"item",	0);
	create_insn	(0X8051A92E);
	create_insn	(x=0X8051A94C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A950);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A952);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A954);
	op_stkvar	(x,	1);
	create_insn	(0X8051A95C);
	create_insn	(x=0X8051A96A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X8051A9A4);
	create_dword	(x=0X8051A9A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A9AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A9B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A9B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A9B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A9BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A9C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A9C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A9C8);
	set_name	(0X8051A9C8,	"wait_queue_wake_all");
	create_insn	(x=0X8051A9E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A9E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A9E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A9EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A9F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A9FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA06);
	op_stkvar	(x,	1);
	create_insn	(0X8051AA10);
	create_insn	(x=0X8051AA18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA4A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051AA52,	"item",	0);
	create_insn	(0X8051AA52);
	create_insn	(x=0X8051AA54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AA5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AA76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA7E);
	op_stkvar	(x,	1);
	create_insn	(0X8051AA86);
	create_insn	(0X8051AA9E);
	create_dword	(0X8051AAB0);
	create_dword	(x=0X8051AAB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AAB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AABC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AAC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AAC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AAC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AACC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AAD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051AAD4);
	set_name	(0X8051AAD4,	"thread_detach");
	create_insn	(x=0X8051AAE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AAEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AAEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AAEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AAF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051AB06,	"reschedule",	0);
	set_cmt	(0X8051AB08,	"wait",	0);
	set_cmt	(0X8051AB0C,	"wait_queue_error",	0);
	create_insn	(x=0X8051AB1C);
	op_hex		(x,	1);
	set_cmt	(0X8051AB2C,	"retcode",	0);
	set_cmt	(0X8051AB2E,	"t",	0);
	set_cmt	(0X8051AB30,	"timeout",	0);
	create_insn	(x=0X8051AB3C);
	op_hex		(x,	1);
	create_dword	(0X8051AB54);
	create_dword	(x=0X8051AB58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AB5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AB60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AB64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051AB68);
	set_name	(0X8051AB68,	"thread_detach_and_resume");
	set_cmt	(0X8051AB74,	"thread_t *",	0);
	create_insn	(0X8051AB7E);
	create_insn	(x=0X8051AB80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AB80,	"thread_exit");
	create_insn	(x=0X8051AB94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AB98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AB9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AB9C);
	op_stkvar	(x,	1);
	create_insn	(0X8051ABA4);
	create_insn	(x=0X8051ABAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ABB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ABB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ABB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051ABC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ABE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051ABF0,	"s64",	0);
	set_cmt	(0X8051ABF2,	"unsigned int",	0);
	set_cmt	(0X8051ABF4,	"s64",	0);
	set_cmt	(0X8051AC0C,	"reschedule",	0);
	create_insn	(x=0X8051AC0C);
	op_hex		(x,	1);
	set_cmt	(0X8051AC12,	"item",	0);
	set_cmt	(0X8051AC24,	"ptr",	0);
	set_cmt	(0X8051AC34,	"ptr",	0);
	set_cmt	(0X8051AC3C,	"ptr",	0);
	set_cmt	(0X8051AC4A,	"wait",	0);
	create_insn	(0X8051AC4A);
	set_cmt	(0X8051AC4E,	"wait_queue_error",	0);
	create_insn	(x=0X8051AC5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051AC64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AC68);
	create_dword	(x=0X8051AC6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AC70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AC74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AC78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AC7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AC80);
	create_dword	(x=0X8051AC84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AC88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051AC8C);
	set_name	(0X8051AC8C,	"wait_queue_destroy");
	create_insn	(x=0X8051AC9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051ACAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACC2);
	op_stkvar	(x,	1);
	set_cmt	(0X8051ACCC,	"wait_queue_error",	0);
	create_insn	(0X8051ACCC);
	create_dword	(0X8051ACDC);
	create_dword	(x=0X8051ACE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ACE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ACE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ACEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ACF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051ACF4);
	set_name	(0X8051ACF4,	"thread_unblock_from_wait_queue");
	create_insn	(x=0X8051ACFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD10);
	op_stkvar	(x,	1);
	create_insn	(0X8051AD18);
	create_insn	(x=0X8051AD24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD2C);
	op_stkvar	(x,	1);
	create_insn	(0X8051AD36);
	create_insn	(x=0X8051AD44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD4C);
	op_stkvar	(x,	1);
	create_insn	(0X8051AD54);
	create_insn	(x=0X8051AD60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD68);
	op_stkvar	(x,	1);
	create_insn	(0X8051AD70);
	set_cmt	(0X8051AD72,	"item",	0);
	create_insn	(x=0X8051AD7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AD86);
	op_stkvar	(x,	1);
	create_insn	(0X8051AD8E);
	create_insn	(0X8051AD94);
	create_dword	(x=0X8051ADBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ADC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ADC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ADC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051ADCC);
	create_dword	(x=0X8051ADD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ADD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051ADD8);
	create_dword	(x=0X8051ADDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ADE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051ADE4);
	set_name	(0X8051ADE4,	"wait_queue_timeout_handler");
	create_insn	(x=0X8051ADF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ADF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ADFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ADFC);
	op_stkvar	(x,	1);
	set_cmt	(0X8051AE06,	"t",	0);
	create_insn	(0X8051AE06);
	set_cmt	(0X8051AE08,	"wait_queue_error",	0);
	create_dword	(0X8051AE18);
	create_dword	(x=0X8051AE1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AE20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AE24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE28,	"get_current_thread_handle");
	create_dword	(x=0X8051AE30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE34,	"get_current_thread");
	create_dword	(x=0X8051AE3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE40,	"get_preempt_time");
	create_dword	(x=0X8051AE48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE4C,	"get_wake_one_time");
	create_dword	(x=0X8051AE54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE58,	"get_preempts");
	create_insn	(x=0X8051AE5A);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_dword	(x=0X8051AE60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE64,	"get_wake_ones");
	create_insn	(x=0X8051AE66);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_dword	(x=0X8051AE6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE70,	"get_block_time");
	create_dword	(x=0X8051AE78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE7C,	"get_blocks");
	create_insn	(x=0X8051AE7E);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_dword	(x=0X8051AE84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE88,	"get_timer_ints");
	create_insn	(x=0X8051AE8A);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_dword	(x=0X8051AE90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AE94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AE94,	"get_timers_time");
	create_dword	(x=0X8051AE9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AEA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AEA0,	"get_timer_sets");
	create_insn	(x=0X8051AEA2);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_dword	(x=0X8051AEA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AEAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AEAC,	"get_timer_set_time");
	create_dword	(x=0X8051AEB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051AEB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051AEB8,	"clear_thread_stats");
	create_insn	(x=0X8051AEC8);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X8051AECA);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X8051AED0);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X8051AED2);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_insn	(x=0X8051AED8);
	op_plain_offset	(x,	1,	0X807B57A8);
	op_plain_offset	(x,	129,	0X807B57A8);
	create_dword	(x=0X8051AEE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051AEE4);
	set_name	(0X8051AEE4,	"ert_tot_budget");
	set_cmt	(0X8051AEEE,	"head",	0);
	create_insn	(0X8051AF0C);
	create_insn	(0X8051AF12);
	set_name	(0X8051AF12,	"longest_dl_thread");
	create_insn	(0X8051AF20);
	create_insn	(0X8051AF22);
	set_name	(0X8051AF22,	"insert_in_tree");
	create_insn	(0X8051AF34);
	create_insn	(0X8051AF4E);
	create_insn	(0X8051AF54);
	create_insn	(0X8051AF62);
	create_insn	(0X8051AF64);
	set_name	(0X8051AF64,	"remove_edf_thread_from_ert");
	create_insn	(x=0X8051AF70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF7A);
	op_stkvar	(x,	1);
	create_insn	(0X8051AF92);
	create_insn	(x=0X8051AFA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AFA4);
	op_stkvar	(x,	1);
	create_insn	(0X8051AFAE);
	create_insn	(0X8051AFBC);
	create_insn	(0X8051AFC2);
	create_insn	(0X8051AFD8);
	create_insn	(0X8051AFE6);
	create_insn	(0X8051AFEC);
	create_insn	(x=0X8051AFEE);
	op_stkvar	(x,	1);
	create_insn	(0X8051B006);
	create_insn	(0X8051B014);
	create_insn	(0X8051B01A);
	create_insn	(0X8051B024);
	create_dword	(x=0X8051B034);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B038);
	create_insn	(0X8051B07C);
	set_name	(0X8051B07C,	"update_ert");
	create_insn	(0X8051B0B4);
	create_insn	(0X8051B0BE);
	create_insn	(0X8051B0C4);
	set_name	(0X8051B0C4,	"get_extra_budget");
	create_insn	(0X8051B0E0);
	set_cmt	(0X8051B0F0,	"s64",	0);
	set_cmt	(0X8051B10A,	"s64",	0);
	set_cmt	(0X8051B10C,	"unsigned int",	0);
	create_insn	(0X8051B134);
	create_dword	(0X8051B140);
	create_dword	(0X8051B144);
	create_insn	(0X8051B148);
	set_name	(0X8051B148,	"insert_in_ert");
	create_dword	(0X8051B1A8);
	create_insn	(0X8051B1AC);
	set_name	(0X8051B1AC,	"remove_edf_thread");
	set_cmt	(0X8051B1B4,	"t",	0);
	set_cmt	(0X8051B1BE,	"head",	0);
	create_insn	(0X8051B1C8);
	create_dword	(0X8051B1E8);
	create_insn	(0X8051B214);
	set_name	(0X8051B214,	"update_dl_param");
	create_insn	(x=0X8051B21A);
	op_stkvar	(x,	1);
	create_insn	(0X8051B272);
	create_insn	(x=0X8051B276);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051B28C,	"head",	0);
	create_dword	(0X8051B2B8);
	create_dword	(x=0X8051B2BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B2C0);
	set_name	(0X8051B2C0,	"thread_set_dl");
	create_insn	(x=0X8051B2CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051B2EC);
	set_cmt	(0X8051B2F4,	"s64",	0);
	set_cmt	(0X8051B2F6,	"s64",	0);
	create_insn	(0X8051B30A);
	create_dword	(x=0X8051B324);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B328);
	set_name	(0X8051B328,	"admission_test");
	create_insn	(x=0X8051B330);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B352);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B35A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B370);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B376);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B37C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051B386);
	create_dword	(x=0X8051B3A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B3A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B3A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B3AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B3B0);
	set_name	(0X8051B3B0,	"child_queue_init");
	create_dword	(0X8051B3C0);
	create_insn	(0X8051B3C4);
	set_name	(0X8051B3C4,	"child_queue_add_tail");
	create_insn	(0X8051B3DE);
	set_name	(0X8051B3DE,	"child_queue_remove");
	create_insn	(0X8051B3F8);
	set_name	(0X8051B3F8,	"child_queue_signal");
	create_insn	(0X8051B406);
	set_cmt	(0X8051B42E,	"c",	0);
	set_cmt	(0X8051B438,	"signaled_object",	0);
	create_insn	(x=0X8051B438);
	op_stkvar	(x,	1);
	create_insn	(0X8051B460);
	set_cmt	(0X8051B47A,	"e",	0);
	set_cmt	(0X8051B480,	"reschedule",	0);
	create_insn	(0X8051B48A);
	set_cmt	(0X8051B492,	"reschedule",	0);
	create_insn	(0X8051B492);
	set_name	(0X8051B492,	"child_queue_destroy");
	set_cmt	(0X8051B496,	"all",	0);
	set_cmt	(0X8051B498,	"parent",	0);
	create_insn	(0X8051B4A6);
	set_name	(0X8051B4A6,	"comp_event_usignal");
	set_cmt	(0X8051B4AC,	"e",	0);
	set_cmt	(0X8051B4BE,	"c",	0);
	create_insn	(0X8051B4CA);
	create_insn	(0X8051B4CC);
	set_name	(0X8051B4CC,	"comp_event_init");
	create_insn	(x=0X8051B4D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051B4EA,	"char",	0);
	set_cmt	(0X8051B4EC,	"result",	0);
	set_cmt	(0X8051B4EE,	"int",	0);
	create_insn	(x=0X8051B502);
	op_stkvar	(x,	1);
	set_cmt	(0X8051B536,	"s",	0);
	create_insn	(0X8051B536);
	set_cmt	(0X8051B538,	"child_queue_node",	0);
	set_cmt	(0X8051B540,	"e",	0);
	create_insn	(0X8051B540);
	set_cmt	(0X8051B542,	"child_queue_node",	0);
	create_insn	(0X8051B54C);
	set_cmt	(0X8051B55E,	"child",	0);
	set_cmt	(0X8051B560,	"child_queue_node",	0);
	create_insn	(0X8051B56A);
	create_insn	(0X8051B596);
	create_dword	(x=0X8051B5A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B5AC);
	create_dword	(0X8051B5B0);
	create_insn	(0X8051B5B4);
	set_name	(0X8051B5B4,	"comp_event_destroy");
	create_insn	(x=0X8051B5BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B5D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051B5EC,	"s",	0);
	create_insn	(0X8051B5EC);
	set_cmt	(0X8051B5F0,	"child_queue_node",	0);
	set_cmt	(0X8051B5F8,	"e",	0);
	create_insn	(0X8051B5F8);
	set_cmt	(0X8051B5FC,	"child_queue_node",	0);
	create_insn	(0X8051B604);
	set_cmt	(0X8051B614,	"child_queue_node",	0);
	set_cmt	(0X8051B616,	"child",	0);
	create_insn	(0X8051B638);
	create_dword	(x=0X8051B64C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B650);
	set_name	(0X8051B650,	"comp_event_del_parent_event");
	set_cmt	(0X8051B654,	"e",	0);
	set_cmt	(0X8051B656,	"child_queue_node",	0);
	create_insn	(0X8051B664);
	set_name	(0X8051B664,	"comp_event_find_signaled_object");
	set_cmt	(0X8051B67C,	"s",	0);
	set_cmt	(0X8051B688,	"signaled_object",	0);
	create_insn	(0X8051B690);
	create_insn	(0X8051B696);
	create_insn	(0X8051B6A4);
	create_insn	(0X8051B6AE);
	create_insn	(0X8051B6B2);
	create_insn	(0X8051B6B8);
	set_name	(0X8051B6B8,	"comp_event_grab_signaled_object");
	create_insn	(0X8051B6D4);
	create_insn	(0X8051B6E0);
	set_cmt	(0X8051B6EE,	"c",	0);
	set_cmt	(0X8051B6F0,	"signaled_object",	0);
	set_cmt	(0X8051B6FA,	"e",	0);
	create_insn	(0X8051B718);
	set_cmt	(0X8051B720,	"e",	0);
	create_insn	(0X8051B720);
	create_insn	(0X8051B738);
	set_name	(0X8051B738,	"comp_event_wait_timeout");
	create_insn	(x=0X8051B742);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051B750,	"c",	0);
	set_cmt	(0X8051B752,	"signaled_object",	0);
	create_insn	(0X8051B760);
	create_insn	(0X8051B770);
	set_cmt	(0X8051B778,	"c",	0);
	set_cmt	(0X8051B782,	"e",	0);
	set_cmt	(0X8051B784,	"timeout",	0);
	set_cmt	(0X8051B78C,	"c",	0);
	set_cmt	(0X8051B78E,	"signaled_object",	0);
	create_dword	(x=0X8051B7B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B7BC);
	set_name	(0X8051B7BC,	"wait_on_multiple");
	create_insn	(x=0X8051B7CC);
	op_stkvar	(x,	1);
	set_cmt	(0X8051B7D0,	"parents",	0);
	create_insn	(x=0X8051B7D0);
	op_stkvar	(x,	1);
	set_cmt	(0X8051B7D2,	"objects",	0);
	set_cmt	(0X8051B7D4,	"c",	0);
	create_insn	(x=0X8051B7D4);
	op_stkvar	(x,	1);
	set_cmt	(0X8051B7D6,	"wait_and",	0);
	create_insn	(x=0X8051B7D6);
	op_stkvar	(x,	1);
	set_cmt	(0X8051B7D8,	"count",	0);
	set_cmt	(0X8051B7DE,	"signaled_object",	0);
	set_cmt	(0X8051B7E0,	"timeout",	0);
	set_cmt	(0X8051B7E2,	"c",	0);
	create_insn	(x=0X8051B7E2);
	op_stkvar	(x,	1);
	set_cmt	(0X8051B7EA,	"c",	0);
	create_insn	(x=0X8051B7EA);
	op_stkvar	(x,	1);
	create_insn	(0X8051B7F4);
	create_insn	(0X8051B7FC);
	set_name	(0X8051B7FC,	"cbuf_initialize_etc");
	create_insn	(x=0X8051B808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B80C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B80E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B810);
	op_stkvar	(x,	1);
	create_insn	(0X8051B816);
	create_insn	(x=0X8051B81C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B822);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B824);
	op_stkvar	(x,	1);
	create_insn	(0X8051B82C);
	set_cmt	(0X8051B82E,	"char",	0);
	create_insn	(x=0X8051B836);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B83A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B83C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B83E);
	op_stkvar	(x,	1);
	create_insn	(0X8051B844);
	set_cmt	(0X8051B852,	"int",	0);
	set_cmt	(0X8051B856,	"result",	0);
	create_dword	(x=0X8051B864);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B868);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B86C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B870);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B874);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B878);
	set_name	(0X8051B878,	"cbuf_initialize");
	set_cmt	(0X8051B884,	"len",	0);
	set_cmt	(0X8051B886,	"buf",	0);
	set_cmt	(0X8051B888,	"cbuf",	0);
	create_insn	(0X8051B892);
	set_name	(0X8051B892,	"cbuf_space_avail");
	create_insn	(0X8051BAA8);
	create_insn	(x=0X8051BAB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BABC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BABE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BAC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BAC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051BAD6,	"cbuf",	0);
	set_cmt	(0X8051BAFC,	"e",	0);
	set_cmt	(0X8051BB00,	"reschedule",	0);
	create_dword	(x=0X8051BB18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BB1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BB20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BB24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051BB28);
	set_name	(0X8051BB28,	"cbuf_read_char");
	create_insn	(x=0X8051BB36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BB3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BB3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BB3E);
	op_stkvar	(x,	1);
	create_insn	(0X8051BB44);
	create_insn	(x=0X8051BB4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BB4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BB50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BB52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BB5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051BB6A,	"e",	0);
	set_cmt	(0X8051BB6E,	"timeout",	0);
	create_insn	(x=0X8051BB7E);
	op_plain_offset	(x,	1,	0X807B06D0);
	op_plain_offset	(x,	129,	0X807B06D0);
	create_insn	(x=0X8051BB86);
	op_plain_offset	(x,	1,	0X807B06D0);
	op_plain_offset	(x,	129,	0X807B06D0);
	create_insn	(x=0X8051BB88);
	op_plain_offset	(x,	1,	0X807B06D0);
	op_plain_offset	(x,	129,	0X807B06D0);
	create_insn	(x=0X8051BB96);
	op_plain_offset	(x,	1,	0X807B06D0);
	op_plain_offset	(x,	129,	0X807B06D0);
	set_cmt	(0X8051BB9C,	"e",	0);
	create_insn	(0X8051BBA6);
	create_insn	(0X8051BBAA);
	create_dword	(x=0X8051BBBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BBC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BBC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BBC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BBCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051BBD6);
	set_name	(0X8051BBD6,	"nullsub_3");
	create_insn	(0X8051BBD8);
	set_name	(0X8051BBD8,	"nullsub_7");
	create_insn	(0X8051BC24);
	set_name	(0X8051BC24,	"cmd_echo");
	create_insn	(x=0X8051BC2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051BC34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051BC38);
	set_name	(0X8051BC38,	"cmd_history");
	create_insn	(x=0X8051BC3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BC42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BC44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BC4A);
	op_hex		(x,	1);
	set_cmt	(0X8051BC4E,	"a3",	0);
	set_cmt	(0X8051BC52,	"a2",	0);
	set_cmt	(0X8051BC58,	"fmt",	0);
	create_insn	(x=0X8051BC58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BC64);
	op_hex		(x,	1);
	create_dword	(x=0X8051BC70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BC74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BC78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BC7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051BC80);
	set_name	(0X8051BC80,	"cmd_test");
	set_cmt	(0X8051BC88,	"a2",	0);
	set_cmt	(0X8051BC8A,	"a3",	0);
	create_insn	(x=0X8051BC8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051BC9E,	"a2",	0);
	create_insn	(x=0X8051BCA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BCA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BCAA);
	op_stkvar	(x,	1);
	set_cmt	(0X8051BCAC,	"a3",	0);
	create_insn	(0X8051BCBA);
	create_dword	(x=0X8051BCC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BCC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051BCC8);
	set_name	(0X8051BCC8,	"cmd_help");
	create_insn	(x=0X8051BCCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BCD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051BCE8,	"a3",	0);
	create_insn	(x=0X8051BCEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051BCEE,	"a2",	0);
	create_insn	(0X8051BCF8);
	create_insn	(0X8051BCFC);
	create_dword	(x=0X8051BD00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BD04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051BD08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8051BD0D,	"read_debug_line");
	create_insn	(0X8051BF10);
	set_name	(0X8051BF10,	"match_command");
	create_insn	(x=0X8051BF16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051BF2A,	"cs",	0);
	set_cmt	(0X8051BF2C,	"ct",	0);
	create_insn	(0X8051BF3A);
	create_insn	(0X8051BF3E);
	create_dword	(x=0X8051BF48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051BF4C);
	set_name	(0X8051BF4C,	"command_loop");
	create_insn	(x=0X8051BF52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BF58);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BF5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BF84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BF88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051BF8A,	"fp",	0);
	create_insn	(x=0X8051BF8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BF90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BF92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BF94);
	op_stkvar	(x,	1);
	create_insn	(0X8051BFAC);
	create_insn	(x=0X8051BFB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BFB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BFBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BFC0);
	op_stkvar	(x,	1);
	set_cmt	(0X8051BFC2,	"switch 9 cases",	0);
	set_cmt	(0X8051BFCE,	"switch jump",	0);
	set_cmt	(0X8051BFD2,	"jump table for switch statement",	0);
	create_byte	(0X8051BFD2);
	set_name	(0X8051BFD2,	"jpt_8051BFCE");
	create_byte	(0X8051BFD3);
	create_byte	(0X8051BFD4);
	create_byte	(0X8051BFD5);
	create_byte	(0X8051BFD6);
	create_byte	(0X8051BFD7);
	create_byte	(0X8051BFD8);
	create_byte	(0X8051BFD9);
	create_byte	(0X8051BFDA);
	set_cmt	(0X8051BFDC,	"jumptable 8051BFCE case 2",	1);
	create_insn	(0X8051BFDC);
	set_cmt	(0X8051BFE2,	"jumptable 8051BFCE default case",	1);
	create_insn	(0X8051BFE2);
	set_name	(0X8051BFE2,	"def_8051BFCE");
	set_cmt	(0X8051BFE8,	"c",	0);
	create_insn	(0X8051BFF6);
	set_cmt	(0X8051C004,	"jumptable 8051BFCE case 3",	1);
	create_insn	(0X8051C004);
	set_cmt	(0X8051C014,	"c",	0);
	create_insn	(0X8051C014);
	set_cmt	(0X8051C022,	"jumptable 8051BFCE case 4",	1);
	create_insn	(0X8051C022);
	create_insn	(x=0X8051C028);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C02A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C02C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C02E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C034);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051C038);
	create_insn	(0X8051C042);
	create_insn	(0X8051C04C);
	set_cmt	(0X8051C05C,	"jumptable 8051BFCE case 5",	1);
	create_insn	(0X8051C05C);
	set_cmt	(0X8051C05E,	"c",	0);
	create_insn	(0X8051C07A);
	set_cmt	(0X8051C086,	"jumptable 8051BFCE case 6",	1);
	create_insn	(0X8051C086);
	create_insn	(x=0X8051C08E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C090);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C092);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C094);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C096);
	op_stkvar	(x,	1);
	create_insn	(0X8051C0A0);
	set_cmt	(0X8051C0B4,	"jumptable 8051BFCE case 7",	1);
	create_insn	(0X8051C0B4);
	create_insn	(0X8051C0BC);
	set_cmt	(0X8051C0E0,	"jumptable 8051BFCE case 8",	1);
	create_insn	(0X8051C0E0);
	create_insn	(x=0X8051C0E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C0EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C0EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C0EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C0F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051C0F8);
	set_cmt	(0X8051C10C,	"jumptable 8051BFCE case 9",	1);
	create_insn	(0X8051C10C);
	set_cmt	(0X8051C130,	"c",	0);
	create_insn	(0X8051C130);
	set_cmt	(0X8051C140,	"jumptable 8051BFCE case 10",	1);
	create_insn	(0X8051C140);
	create_insn	(x=0X8051C148);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C14A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C14C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C14E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C154);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C158);
	op_stkvar	(x,	1);
	create_insn	(0X8051C162);
	set_cmt	(0X8051C176,	"num",	0);
	set_cmt	(0X8051C182,	"num",	0);
	set_cmt	(0X8051C192,	"ct",	0);
	create_insn	(x=0X8051C192);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C194,	"cs",	0);
	set_cmt	(0X8051C19C,	"cs",	0);
	set_cmt	(0X8051C19E,	"ct",	0);
	create_insn	(x=0X8051C19E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C1B0,	"cs",	0);
	create_insn	(0X8051C1B0);
	create_insn	(x=0X8051C1B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C1BA,	"cs",	0);
	create_insn	(x=0X8051C1BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051C1CA);
	set_cmt	(0X8051C1E4,	"command",	0);
	create_insn	(x=0X8051C1EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C1F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C208);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C20C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C214);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C218);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C21C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C220);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C224);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C228);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C22C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C230);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051C234);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C238);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C23A,	"timeout",	0);
	set_cmt	(0X8051C23E,	"m",	0);
	create_insn	(x=0X8051C244);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C256);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C262);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C266);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C268,	"reschedule",	0);
	set_cmt	(0X8051C26A,	"m",	0);
	create_insn	(0X8051C27A);
	create_insn	(x=0X8051C280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C282);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C294);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C298);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C29C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C2A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C2A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C2F0);
	set_name	(0X8051C2F0,	"console_start");
	create_insn	(x=0X8051C2F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C2FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C308,	"get_line_cookie",	0);
	set_cmt	(0X8051C30A,	"get_line",	0);
	set_cmt	(0X8051C30C,	"showprompt",	0);
	set_cmt	(0X8051C30E,	"locked",	0);
	create_insn	(x=0X8051C318);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C32C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C330);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C334);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C350);
	set_name	(0X8051C350,	"console_register_commands");
	create_insn	(x=0X8051C35A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C35E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C360);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C362);
	op_stkvar	(x,	1);
	create_insn	(0X8051C36A);
	create_insn	(x=0X8051C372);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C376);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C378);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C37A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C384);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C394);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C398);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C39C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C3A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C3A4);
	set_name	(0X8051C3A4,	"console_init");
	set_cmt	(0X8051C3A6,	"size",	0);
	set_cmt	(0X8051C3A8,	"count",	0);
	create_insn	(x=0X8051C3AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C3AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C3B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C3BE,	"block",	0);
	set_cmt	(0X8051C3C8,	"size",	0);
	create_insn	(0X8051C3C8);
	set_cmt	(0X8051C3CC,	"count",	0);
	create_insn	(x=0X8051C3D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C3D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C3E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C3E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C3E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C3EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C3F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C3F4);
	set_name	(0X8051C3F4,	"__debug_stdio_fgetc");
	set_cmt	(0X8051C3F6,	"wait",	0);
	set_cmt	(0X8051C3F8,	"c",	0);
	create_insn	(x=0X8051C3F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C404);
	op_stkvar	(x,	1);
	set_cmt	(0X8051C40E,	"result",	0);
	create_insn	(0X8051C40E);
	set_name	(0X8051C40E,	"__debug_stdio_fputc");
	create_insn	(0X8051C478);
	set_name	(0X8051C478,	"halt");
	create_insn	(x=0X8051C47A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C48C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C490);
	set_name	(0X8051C490,	"_dputs");
	set_cmt	(0X8051C494,	"result",	0);
	create_insn	(0X8051C4A0);
	set_cmt	(0X8051C4A2,	"str",	0);
	create_insn	(0X8051C4A2);
	set_name	(0X8051C4A2,	"__debug_stdio_fputs");
	create_insn	(0X8051C4A8);
	set_name	(0X8051C4A8,	"_dprintf");
	create_insn	(x=0X8051C4AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C4BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C4BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C4C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C4C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C4E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051C4E4);
	create_insn	(0X8051C4E8);
	set_name	(0X8051C4E8,	"_dvprintf");
	create_insn	(x=0X8051C4EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C504);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C514);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051C518);
	create_insn	(0X8051C51C);
	set_name	(0X8051C51C,	"Debug_Error2");
	create_insn	(x=0X8051C520);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C528);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C52E,	"ap",	0);
	set_cmt	(0X8051C530,	"fmt",	0);
	create_insn	(x=0X8051C532);
	op_stkvar	(x,	1);
	create_dword	(x=0X8051C53C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8051C540,	"fmt",	0);
	create_insn	(0X8051C540);
	set_name	(0X8051C540,	"__debug_stdio_vfprintf");
	set_cmt	(0X8051C542,	"ap",	0);
	create_insn	(0X8051C548);
	set_name	(0X8051C548,	"hexdump");
	set_cmt	(0X8051C558,	"a2",	0);
	create_insn	(x=0X8051C55A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C564,	"fmt",	0);
	create_insn	(x=0X8051C564);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C566);
	op_stkvar	(x,	1);
	set_cmt	(0X8051C568,	"a3",	0);
	set_cmt	(0X8051C57A,	"a2",	0);
	create_insn	(x=0X8051C57C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C584,	"fmt",	0);
	create_insn	(0X8051C584);
	set_cmt	(0X8051C590,	"fmt",	0);
	create_insn	(0X8051C59A);
	create_dword	(x=0X8051C5A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C5A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C5A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051C5AC);
	create_dword	(0X8051C5B0);
	create_insn	(0X8051C5F8);
	set_cmt	(0X8051C60C,	"m",	0);
	create_insn	(0X8051C60C);
	set_cmt	(0X8051C60E,	"timeout",	0);
	create_dword	(0X8051C618);
	create_insn	(0X8051C61C);
	create_insn	(x=0X8051C628);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C62C);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C62E);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C632);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C638);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C650);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C654);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C656);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C658);
	op_stkvar	(x,	1);
	create_insn	(0X8051C660);
	create_insn	(0X8051C66E);
	create_insn	(x=0X8051C672);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C678);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C67C);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	set_cmt	(0X8051C6B0,	"reschedule",	0);
	set_cmt	(0X8051C6B2,	"m",	0);
	create_dword	(x=0X8051C6C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C6C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C6C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C6CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051C6D0);
	create_insn	(0X8051C6D4);
	create_insn	(x=0X8051C6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C6DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C6DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C6E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C6F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C6F6);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C70E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C724);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C72A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C72E);
	op_stkvar	(x,	1);
	create_insn	(0X8051C732);
	create_dword	(x=0X8051C738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C73C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C740);
	create_insn	(x=0X8051C746);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C74A,	"cs",	0);
	create_insn	(0X8051C74A);
	create_insn	(x=0X8051C74C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C756);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C76A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C774);
	op_plain_offset	(x,	1,	0X807B1D44);
	op_plain_offset	(x,	129,	0X807B1D44);
	create_insn	(x=0X8051C778);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C78C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C794);
	op_plain_offset	(x,	1,	0X807B1D4C);
	op_plain_offset	(x,	129,	0X807B1D4C);
	create_insn	(x=0X8051C79E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051C7AA,	"reschedule",	0);
	create_insn	(0X8051C7AA);
	set_cmt	(0X8051C7AC,	"m",	0);
	create_insn	(x=0X8051C7AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C7B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051C7C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C7E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C7EC);
	create_insn	(x=0X8051C7F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C7FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C7FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C800);
	op_stkvar	(x,	1);
	create_insn	(0X8051C808);
	create_dword	(x=0X8051C810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C814);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C818);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051C81C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051C81C,	"miniheap_alloc");
	create_insn	(x=0X8051C82E);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C848);
	op_hex		(x,	1);
	create_insn	(x=0X8051C85A);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C872);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C876);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C878);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C87A);
	op_stkvar	(x,	1);
	create_insn	(0X8051C882);
	create_insn	(x=0X8051C8B8);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C8C0);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C8C6);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C8D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C8D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C8DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C8DC);
	op_stkvar	(x,	1);
	create_insn	(0X8051C8E6);
	create_insn	(0X8051C8F0);
	create_insn	(x=0X8051C906);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C90C);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C910);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051C918);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C91A);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(0X8051C91E);
	create_insn	(0X8051C922);
	set_cmt	(0X8051C924,	"m",	0);
	set_cmt	(0X8051C926,	"reschedule",	0);
	create_insn	(0X8051C930);
	create_dword	(x=0X8051C938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051C93C);
	create_dword	(x=0X8051C940);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C944);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C948);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C94C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051C950);
	create_dword	(0X8051C954);
	create_insn	(0X8051C958);
	create_insn	(x=0X8051C96C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C970);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C972);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C974);
	op_stkvar	(x,	1);
	create_insn	(0X8051C97E);
	create_insn	(0X8051C990);
	create_dword	(0X8051C994);
	create_dword	(x=0X8051C998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C99C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C9A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C9A4);
	set_name	(0X8051C9A4,	"heap_delayed_free");
	create_insn	(x=0X8051C9B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C9BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C9BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C9BE);
	op_stkvar	(x,	1);
	create_insn	(0X8051C9C8);
	create_insn	(x=0X8051C9D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C9DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C9E0);
	op_plain_offset	(x,	1,	0X807B1D18);
	op_plain_offset	(x,	129,	0X807B1D18);
	create_insn	(x=0X8051C9EA);
	op_plain_offset	(x,	1,	0X807B1D18);
	op_plain_offset	(x,	129,	0X807B1D18);
	create_insn	(x=0X8051C9EE);
	op_plain_offset	(x,	1,	0X807B1D18);
	op_plain_offset	(x,	129,	0X807B1D18);
	create_insn	(x=0X8051C9F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X8051CA00);
	create_dword	(x=0X8051CA04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CA08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CA0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CA10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CA14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051CA78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051CA78,	"heap_init");
	create_insn	(x=0X8051CA7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051CA84,	"m",	0);
	create_insn	(x=0X8051CA8C);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051CA8E);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051CA90);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051CA9E);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051CAA0);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051CAA6);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_insn	(x=0X8051CAA8);
	op_plain_offset	(x,	1,	0XCB1D18);
	op_plain_offset	(x,	129,	0XCB1D18);
	create_dword	(x=0X8051CAB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051CABC);
	create_dword	(x=0X8051CAC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051CAD0);
	set_name	(0X8051CAD0,	"memmove");
	create_insn	(x=0X8051CAF8);
	op_hex		(x,	1);
	create_insn	(x=0X8051CB00);
	op_hex		(x,	1);
	create_insn	(0X8051CB74);
	create_insn	(0X8051CBB0);
	create_insn	(0X8051CBDC);
	set_name	(0X8051CBDC,	"memset");
	create_insn	(x=0X8051CBF0);
	op_hex		(x,	1);
	create_insn	(x=0X8051CBFC);
	op_hex		(x,	1);
	create_insn	(0X8051CC48);
	create_insn	(0X8051CC70);
	create_insn	(0X8051CC7E);
	create_insn	(0X8051CC8C);
	create_insn	(0X8051CC9C);
	create_insn	(0X8051CCC8);
	create_insn	(0X8051CCD2);
	create_insn	(0X8051CCE6);
	create_insn	(0X8051CCFA);
	create_insn	(0X8051CCFE);
	set_name	(0X8051CCFE,	"atoi");
	create_insn	(0X8051CD02);
	create_insn	(0X8051CD12);
	create_insn	(0X8051CD36);
	create_insn	(0X8051CD52);
	set_name	(0X8051CD52,	"atoui");
	create_insn	(0X8051CDE2);
	set_name	(0X8051CDE2,	"isspace");
	create_insn	(0X8051CDEA);
	create_insn	(0X8051CE0C);
	create_insn	(x=0X8051CE18);
	op_hex		(x,	1);
	create_insn	(0X8051CE44);
	create_insn	(x=0X8051CE4C);
	op_hex		(x,	1);
	create_insn	(0X8051CE5C);
	create_insn	(0X8051CEA6);
	create_insn	(0X8051CEE4);
	create_insn	(x=0X8051CEEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CEF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CEF6);
	op_hex		(x,	1);
	create_insn	(0X8051CF0E);
	set_cmt	(0X8051CF24,	"s64",	0);
	set_cmt	(0X8051CF26,	"unsigned int",	0);
	set_cmt	(0X8051CF28,	"s64",	0);
	set_cmt	(0X8051CF2A,	"unsigned int",	0);
	set_cmt	(0X8051CF32,	"s64",	0);
	set_cmt	(0X8051CF34,	"unsigned int",	0);
	set_cmt	(0X8051CF36,	"s64",	0);
	set_cmt	(0X8051CF38,	"unsigned int",	0);
	create_insn	(0X8051CF4C);
	create_insn	(x=0X8051CF5C);
	op_hex		(x,	1);
	create_insn	(x=0X8051CF66);
	op_hex		(x,	1);
	create_insn	(0X8051CF74);
	create_insn	(0X8051CF7C);
	create_insn	(x=0X8051CF92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CFE8);
	op_hex		(x,	1);
	create_insn	(0X8051CFF0);
	create_insn	(x=0X8051CFFA);
	op_hex		(x,	1);
	create_insn	(0X8051D000);
	create_insn	(0X8051D00E);
	create_insn	(0X8051D01A);
	create_insn	(0X8051D032);
	create_insn	(0X8051D03E);
	create_insn	(x=0X8051D050);
	op_hex		(x,	1);
	create_insn	(0X8051D056);
	create_insn	(x=0X8051D062);
	op_hex		(x,	1);
	create_insn	(0X8051D068);
	create_insn	(x=0X8051D070);
	op_hex		(x,	1);
	create_insn	(x=0X8051D07C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D080);
	op_stkvar	(x,	1);
	create_insn	(0X8051D094);
	create_insn	(x=0X8051D098);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D09E);
	op_stkvar	(x,	1);
	create_insn	(0X8051D0B2);
	create_insn	(x=0X8051D0B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D0BC);
	op_hex		(x,	1);
	create_insn	(x=0X8051D0CA);
	op_hex		(x,	1);
	create_insn	(x=0X8051D0D0);
	op_hex		(x,	1);
	create_insn	(0X8051D0D6);
	create_insn	(x=0X8051D0DA);
	op_hex		(x,	1);
	create_insn	(x=0X8051D0DE);
	op_hex		(x,	1);
	create_insn	(0X8051D0E4);
	create_insn	(x=0X8051D0E8);
	op_hex		(x,	1);
	create_insn	(x=0X8051D0EC);
	op_hex		(x,	1);
	create_insn	(x=0X8051D0F2);
	op_hex		(x,	1);
	create_insn	(0X8051D0F8);
	create_insn	(0X8051D110);
	create_insn	(0X8051D11E);
	create_insn	(0X8051D12C);
	create_insn	(x=0X8051D134);
	op_hex		(x,	1);
	create_insn	(0X8051D142);
	create_insn	(x=0X8051D14C);
	op_hex		(x,	1);
	create_insn	(0X8051D152);
	create_insn	(0X8051D16A);
	create_insn	(0X8051D178);
	create_insn	(0X8051D186);
	create_insn	(x=0X8051D18E);
	op_hex		(x,	1);
	create_insn	(0X8051D19C);
	create_insn	(x=0X8051D1A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D1AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D1AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D1AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D1B8);
	op_hex		(x,	1);
	create_insn	(x=0X8051D1BE);
	op_hex		(x,	1);
	create_insn	(0X8051D1DA);
	create_insn	(0X8051D1E8);
	create_insn	(0X8051D1F6);
	create_insn	(x=0X8051D1FE);
	op_hex		(x,	1);
	create_insn	(0X8051D20C);
	create_insn	(x=0X8051D216);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D218);
	op_hex		(x,	1);
	create_insn	(x=0X8051D21C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D224);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D230);
	op_hex		(x,	1);
	create_insn	(x=0X8051D236);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D23A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D260);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D262);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D274);
	op_hex		(x,	1);
	create_insn	(x=0X8051D278);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D282);
	op_stkvar	(x,	1);
	create_insn	(0X8051D298);
	create_insn	(0X8051D2B0);
	create_insn	(0X8051D2BC);
	create_insn	(0X8051D2C4);
	create_insn	(0X8051D2C8);
	create_insn	(x=0X8051D2CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D2DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D2E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D2EE);
	op_stkvar	(x,	1);
	create_insn	(0X8051D2FC);
	create_insn	(0X8051D300);
	create_insn	(x=0X8051D320);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D324);
	op_stkvar	(x,	1);
	create_insn	(0X8051D33A);
	create_insn	(x=0X8051D33E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D342);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D350);
	op_hex		(x,	1);
	create_insn	(x=0X8051D358);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D35C);
	op_stkvar	(x,	1);
	create_dword	(x=0X8051D370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D374);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D37C);
	create_insn	(x=0X8051D384);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D386);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D39C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D3AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D3AE);
	op_stkvar	(x,	1);
	create_insn	(0X8051D3D2);
	create_insn	(0X8051D3D6);
	create_insn	(0X8051D3E0);
	create_insn	(x=0X8051D3E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D3EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D3F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D3F6);
	op_stkvar	(x,	1);
	create_dword	(0X8051D408);
	create_insn	(0X8051D40C);
	set_name	(0X8051D40C,	"snprintf");
	create_insn	(x=0X8051D410);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D416);
	op_stkvar	(x,	1);
	create_insn	(0X8051D426);
	create_insn	(0X8051D43A);
	create_insn	(x=0X8051D43E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D444);
	op_stkvar	(x,	1);
	create_insn	(0X8051D454);
	set_name	(0X8051D454,	"malloc");
	create_insn	(0X8051D45A);
	create_insn	(0X8051D464);
	set_name	(0X8051D464,	"calloc");
	create_insn	(0X8051D482);
	create_insn	(0X8051D494);
	set_cmt	(0X8051D49C,	"char *",	0);
	set_cmt	(0X8051D49E,	"int",	0);
	create_insn	(0X8051D4AE);
	set_name	(0X8051D4AE,	"free");
	create_insn	(0X8051D4B2);
	create_insn	(x=0X8051D4B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D4BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051D4C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051D4D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D4D4);
	create_dword	(0X8051D4D8);
	create_insn	(0X8051D4DC);
	create_insn	(x=0X8051D4EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X8051D4F2);
	create_insn	(0X8051D4F4);
	create_insn	(0X8051D4F8);
	set_name	(0X8051D4F8,	"fputs");
	create_insn	(0X8051D508);
	set_cmt	(0X8051D50A,	"fp",	0);
	create_insn	(x=0X8051D50A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D516);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051D520);
	create_dword	(x=0X8051D524);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D528);
	create_insn	(x=0X8051D534);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051D53C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D540);
	create_insn	(0X8051D54A);
	create_insn	(x=0X8051D54E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D554);
	op_stkvar	(x,	1);
	create_insn	(0X8051D564);
	set_name	(0X8051D564,	"printf");
	create_insn	(x=0X8051D568);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D56E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D570);
	op_stkvar	(x,	1);
	create_dword	(x=0X8051D580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D584);
	create_insn	(0X8051D588);
	create_insn	(0X8051D58C);
	create_insn	(0X8051D590);
	set_name	(0X8051D590,	"nullsub_8");
	create_insn	(0X8051D592);
	create_insn	(0X8051D598);
	create_insn	(0X8051D5B0);
	create_insn	(0X8051D5B4);
	create_insn	(x=0X8051D5C4);
	op_hex		(x,	1);
	create_insn	(0X8051D5CC);
	create_insn	(0X8051D5CE);
	create_insn	(0X8051D5D2);
	create_insn	(0X8051D5EC);
	create_insn	(0X8051D600);
	create_insn	(0X8051D604);
	set_name	(0X8051D604,	"strcmp");
	create_insn	(x=0X8051D60E);
	op_hex		(x,	1);
	create_insn	(0X8051D61E);
	set_name	(0X8051D61E,	"j_strcmp");
	create_insn	(0X8051D622);
	create_insn	(0X8051D630);
	set_cmt	(0X8051D644,	"char *",	0);
	set_cmt	(0X8051D646,	"int",	0);
	create_insn	(x=0X8051D650);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D652);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051D660);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D664);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D668);
	create_insn	(0X8051D682);
	create_insn	(0X8051D69C);
	create_insn	(0X8051D6A8);
	set_name	(0X8051D6A8,	"strlcpy");
	create_insn	(0X8051D6B2);
	create_insn	(0X8051D6BC);
	create_insn	(0X8051D6D6);
	create_insn	(0X8051D6E0);
	create_insn	(0X8051D6E4);
	create_insn	(0X8051D708);
	create_insn	(0X8051D70A);
	set_name	(0X8051D70A,	"strncpy");
	create_insn	(0X8051D71E);
	set_name	(0X8051D71E,	"strncmp");
	create_insn	(x=0X8051D72C);
	op_hex		(x,	1);
	create_insn	(0X8051D73A);
	create_insn	(0X8051D740);
	create_insn	(0X8051D77A);
	create_insn	(0X8051D784);
	create_insn	(0X8051D794);
	create_insn	(0X8051D79E);
	create_insn	(0X8051D7BA);
	create_insn	(0X8051D7BE);
	create_insn	(0X8051D7D8);
	create_insn	(0X8051D7DC);
	create_insn	(0X8051D7F4);
	create_insn	(0X8051D7F8);
	create_insn	(0X8051D834);
	create_insn	(0X8051D83A);
	create_insn	(0X8051D83E);
	create_insn	(x=0X8051D846);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051D862);
	create_insn	(0X8051D87E);
	create_dword	(x=0X8051D884);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D888);
	set_cmt	(0X8051D89C,	"char *",	0);
	set_cmt	(0X8051D8A6,	"result",	0);
	set_cmt	(0X8051D8A8,	"int",	0);
	create_insn	(0X8051D8B8);
	set_name	(0X8051D8B8,	"msgq_init");
	create_insn	(x=0X8051D8C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051D8D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D8DC);
	set_name	(0X8051D8DC,	"msgq_queue_message");
	set_cmt	(0X8051D8FC,	"result",	0);
	create_insn	(0X8051D916);
	set_cmt	(0X8051D92C,	"char *",	0);
	set_cmt	(0X8051D92E,	"int",	0);
	create_insn	(0X8051D940);
	set_cmt	(0X8051D944,	"char *",	0);
	set_cmt	(0X8051D946,	"int",	0);
	set_cmt	(0X8051D950,	"result",	0);
	set_cmt	(0X8051D952,	"char *",	0);
	set_cmt	(0X8051D956,	"int",	0);
	create_insn	(0X8051D96E);
	create_insn	(0X8051D976);
	set_name	(0X8051D976,	"msgq_dequeue_message");
	create_insn	(0X8051D990);
	set_cmt	(0X8051D996,	"char *",	0);
	create_insn	(0X8051D9AE);
	create_insn	(0X8051D9BE);
	set_cmt	(0X8051D9D8,	"result",	0);
	set_cmt	(0X8051D9DA,	"int",	0);
	create_insn	(0X8051D9EC);
	set_cmt	(0X8051D9F0,	"result",	0);
	set_cmt	(0X8051D9F2,	"int",	0);
	set_cmt	(0X8051D9FC,	"result",	0);
	set_cmt	(0X8051DA00,	"char *",	0);
	set_cmt	(0X8051DA04,	"int",	0);
	create_insn	(0X8051DA1C);
	set_cmt	(0X8051DA28,	"int",	0);
	create_insn	(0X8051DA28);
	set_name	(0X8051DA28,	"Maybe_FixedPointDivide");
	create_insn	(0X8051DA30);
	create_insn	(0X8051DA34);
	create_insn	(0X8051DA38);
	create_insn	(0X8051DA3C);
	create_insn	(0X8051DA40);
	create_insn	(0X8051DA44);
	create_insn	(0X8051DA4C);
	create_insn	(0X8051DA50);
	create_insn	(0X8051DA54);
	set_name	(0X8051DA54,	"SomeKindaDivide");
	create_insn	(0X8051DA58);
	create_insn	(0X8051DA64);
	create_insn	(0X8051DA80);
	create_insn	(0X8051DA8E);
	create_dword	(0X8051DA90);
	create_insn	(0X8051DAC6);
	create_insn	(0X8051DAD0);
	create_insn	(0X8051DAD4);
	create_insn	(0X8051DADC);
	create_insn	(0X8051DAE8);
	create_insn	(0X8051DAF4);
	create_insn	(0X8051DB0C);
	create_insn	(0X8051DB18);
	create_insn	(0X8051DB24);
	create_insn	(0X8051DB30);
	create_insn	(0X8051DB3C);
	create_insn	(0X8051DB48);
	create_insn	(0X8051DB54);
	create_insn	(0X8051DB60);
	create_insn	(0X8051DB6C);
	create_insn	(0X8051DB78);
	create_insn	(0X8051DB84);
	create_insn	(0X8051DB90);
	create_insn	(0X8051DB9C);
	create_insn	(0X8051DBA8);
	create_insn	(0X8051DBB4);
	create_insn	(0X8051DBC0);
	create_insn	(0X8051DBCC);
	create_insn	(0X8051DBD8);
	create_insn	(0X8051DBE4);
	create_insn	(0X8051DBF0);
	create_insn	(0X8051DBFC);
	create_insn	(0X8051DC08);
	create_insn	(0X8051DC10);
	create_insn	(0X8051DC14);
	create_dword	(0X8051DC20);
	create_insn	(x=0X8051DC24);
	op_hex		(x,	1);
	create_insn	(0X8051DC28);
	create_insn	(0X8051DC48);
	create_insn	(0X8051DC58);
	set_name	(0X8051DC58,	"nullsub_1");
	create_insn	(0X8051DC5C);
	set_name	(0X8051DC5C,	"nullsub_4");
	create_insn	(0X8051DC60);
	set_name	(0X8051DC60,	"modulo2");
	create_insn	(x=0X8051DC70);
	op_stkvar	(x,	1);
	create_insn	(0X8051DC7C);
	set_name	(0X8051DC7C,	"j_memcpy");
	create_insn	(0X8051DC80);
	set_name	(0X8051DC80,	"modulo");
	create_insn	(x=0X8051DC90);
	op_stkvar	(x,	1);
	create_insn	(0X8051DC9C);
	set_name	(0X8051DC9C,	"Divide64");
	create_insn	(x=0X8051DCA4);
	op_stkvar	(x,	1);
	set_cmt	(0X8051DCA8,	"unsigned int *",	0);
	create_insn	(x=0X8051DCA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DCB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DCB4);
	op_stkvar	(x,	1);
	create_insn	(0X8051DCC0);
	create_insn	(0X8051DD04);
	create_insn	(x=0X8051DD24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051DD38);
	create_insn	(0X8051DD7C);
	create_insn	(0X8051DEC4);
	create_insn	(0X8051DED0);
	create_insn	(0X8051DEDC);
	create_insn	(0X8051DEE4);
	create_insn	(x=0X8051DEEC);
	op_stkvar	(x,	1);
	create_insn	(0X8051DF38);
	create_insn	(0X8051DF64);
	create_insn	(0X8051DFA0);
	create_insn	(0X8051DFEC);
	set_cmt	(0X8051DFF8,	"unsigned int",	0);
	set_cmt	(0X8051E000,	"unsigned int",	0);
	create_insn	(0X8051E018);
	create_insn	(0X8051E03C);
	create_insn	(0X8051E064);
	create_insn	(0X8051E06C);
	create_insn	(0X8051E09C);
	create_insn	(0X8051E0B4);
	set_cmt	(0X8051E0C0,	"unsigned int",	0);
	set_cmt	(0X8051E0C8,	"unsigned int",	0);
	set_cmt	(0X8051E0D4,	"int",	0);
	set_cmt	(0X8051E0D8,	"int",	0);
	create_insn	(0X8051E0F8);
	create_insn	(0X8051E0FC);
	create_insn	(0X8051E12C);
	create_insn	(0X8051E158);
	create_insn	(x=0X8051E1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E1D8);
	op_hex		(x,	1);
	create_insn	(0X8051E200);
	create_insn	(x=0X8051E204);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E212);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E218);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E21C);
	op_plain_offset	(x,	1,	0X807B1DE8);
	op_plain_offset	(x,	129,	0X807B1DE8);
	create_insn	(x=0X8051E21E);
	op_plain_offset	(x,	1,	0X807B1DE8);
	op_plain_offset	(x,	129,	0X807B1DE8);
	create_insn	(0X8051E222);
	create_insn	(x=0X8051E226);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E22C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E230);
	op_plain_offset	(x,	1,	0X807B1D58);
	op_plain_offset	(x,	129,	0X807B1D58);
	create_insn	(x=0X8051E236);
	op_plain_offset	(x,	1,	0X807B1D58);
	op_plain_offset	(x,	129,	0X807B1D58);
	set_cmt	(0X8051E23A,	"int",	0);
	create_insn	(x=0X8051E23A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051E248);
	set_name	(0X8051E248,	"OpusDecoder_Initialise");
	create_insn	(x=0X8051E262);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E268);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E27A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E27C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E28A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E290);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E294);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E298);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E29C,	"a3",	0);
	create_insn	(x=0X8051E2A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E2A8,	"a2",	0);
	create_insn	(x=0X8051E2A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E2AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E2AE,	"int",	0);
	set_cmt	(0X8051E2B2,	"a1",	0);
	set_cmt	(0X8051E2B4,	"int",	0);
	create_insn	(x=0X8051E2C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E2C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E2CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E2D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E2D4,	"a3",	0);
	create_insn	(x=0X8051E2DC);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E2E6,	"func",	0);
	create_insn	(x=0X8051E2E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E2EE,	"arg",	0);
	set_cmt	(0X8051E2F0,	"prio",	0);
	set_cmt	(0X8051E2F4,	"stack_size",	0);
	create_insn	(x=0X8051E2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E2F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E308);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E30C,	"a2",	0);
	create_insn	(x=0X8051E30C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E30E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E312,	"int",	0);
	set_cmt	(0X8051E316,	"a1",	0);
	set_cmt	(0X8051E318,	"int",	0);
	create_insn	(x=0X8051E31A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E32A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E330);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E334);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E336);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E338,	"a2",	0);
	create_insn	(x=0X8051E338);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E33A,	"a1",	0);
	set_cmt	(0X8051E33C,	"int",	0);
	set_cmt	(0X8051E340,	"int",	0);
	create_insn	(x=0X8051E350);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E366);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E384);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E390,	"thread_t *",	0);
	create_insn	(x=0X8051E3A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E3B4,	"a3",	0);
	create_insn	(x=0X8051E3BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E3E0,	"a3",	0);
	create_insn	(x=0X8051E3F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E3F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_4(void) {
        auto x;
#define id x

	create_insn	(x=0X8051E400);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E404);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E40C,	"a2",	0);
	set_cmt	(0X8051E40E,	"a3",	0);
	create_insn	(x=0X8051E41A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E41E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E422);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E426);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E42A);
	op_stkvar	(x,	1);
	create_insn	(0X8051E438);
	create_insn	(x=0X8051E43C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E444);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E448);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E44C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E44E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E452);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051E460);
	set_name	(0X8051E460,	"OpusMessageDispatcher");
	create_insn	(x=0X8051E46A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E46E,	"a2",	0);
	create_insn	(x=0X8051E46E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E470);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E474,	"int",	0);
	set_cmt	(0X8051E478,	"a1",	0);
	set_cmt	(0X8051E47A,	"int",	0);
	create_insn	(x=0X8051E47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E490);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E494);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E498);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E49C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E4A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051E4A8);
	set_cmt	(0X8051E4B2,	"a1",	0);
	set_cmt	(0X8051E4B4,	"a2",	0);
	set_cmt	(0X8051E4B6,	"int",	0);
	set_cmt	(0X8051E4BA,	"int",	0);
	create_insn	(x=0X8051E4CC);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E4F4,	"switch 29 cases",	0);
	set_cmt	(0X8051E4FC,	"switch jump",	0);
	set_cmt	(0X8051E500,	"jump table for switch statement",	0);
	create_word	(0X8051E500);
	set_name	(0X8051E500,	"jpt_8051E4FC");
	create_word	(0X8051E502);
	create_word	(0X8051E504);
	create_word	(0X8051E506);
	create_word	(0X8051E508);
	create_word	(0X8051E50A);
	create_word	(0X8051E50C);
	create_word	(0X8051E50E);
	create_word	(0X8051E510);
	create_word	(0X8051E512);
	create_word	(0X8051E514);
	create_word	(0X8051E516);
	create_word	(0X8051E518);
	create_word	(0X8051E51A);
	create_word	(0X8051E51C);
	create_word	(0X8051E51E);
	create_word	(0X8051E520);
	create_word	(0X8051E522);
	create_word	(0X8051E524);
	create_word	(0X8051E526);
	create_word	(0X8051E528);
	create_word	(0X8051E52A);
	create_word	(0X8051E52C);
	create_word	(0X8051E52E);
	create_word	(0X8051E530);
	create_word	(0X8051E532);
	create_word	(0X8051E534);
	create_word	(0X8051E536);
	create_word	(0X8051E538);
	set_cmt	(0X8051E53A,	"jumptable 8051E4FC case 25",	1);
	create_insn	(0X8051E53A);
	set_cmt	(0X8051E552,	"jumptable 8051E4FC case 21",	1);
	create_insn	(0X8051E552);
	set_cmt	(0X8051E554,	"a2",	0);
	create_insn	(x=0X8051E554);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E556);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E558,	"a1",	0);
	set_cmt	(0X8051E55A,	"int",	0);
	set_cmt	(0X8051E55E,	"int",	0);
	create_insn	(x=0X8051E570);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E58C,	"jumptable 8051E4FC case 23",	1);
	create_insn	(0X8051E58C);
	set_cmt	(0X8051E5A2,	"int",	0);
	set_cmt	(0X8051E5A4,	"unsigned int",	0);
	set_cmt	(0X8051E5AA,	"unsigned int",	0);
	set_cmt	(0X8051E5AC,	"unsigned int",	0);
	set_cmt	(0X8051E5BA,	"jumptable 8051E4FC case 22",	1);
	create_insn	(0X8051E5BA);
	set_cmt	(0X8051E5F0,	"addr",	0);
	set_cmt	(0X8051E5F2,	"len",	0);
	set_cmt	(0X8051E622,	"jumptable 8051E4FC case 27",	1);
	create_insn	(0X8051E622);
	set_cmt	(0X8051E654,	"jumptable 8051E4FC case 28",	1);
	create_insn	(0X8051E654);
	set_cmt	(0X8051E6AE,	"addr",	0);
	set_cmt	(0X8051E6B0,	"len",	0);
	create_insn	(x=0X8051E6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E6CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E6D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E6D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E6D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E6EA,	"jumptable 8051E4FC case 24",	1);
	create_insn	(0X8051E6EA);
	set_cmt	(0X8051E6F8,	"unsigned int",	0);
	create_insn	(x=0X8051E6FA);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E6FC,	"s64",	0);
	set_cmt	(0X8051E70C,	"s64",	0);
	set_cmt	(0X8051E70E,	"unsigned int",	0);
	set_cmt	(0X8051E710,	"s64",	0);
	set_cmt	(0X8051E712,	"unsigned int",	0);
	set_cmt	(0X8051E728,	"addr",	0);
	set_cmt	(0X8051E72A,	"len",	0);
	create_insn	(x=0X8051E740);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E744);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E756,	"this",	0);
	create_insn	(x=0X8051E764);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E768);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E77C);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E792,	"jumptable 8051E4FC case 30",	1);
	create_insn	(0X8051E792);
	set_cmt	(0X8051E7A0,	"unsigned int",	0);
	create_insn	(x=0X8051E7A2);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E7A4,	"s64",	0);
	set_cmt	(0X8051E7B4,	"s64",	0);
	set_cmt	(0X8051E7B6,	"unsigned int",	0);
	set_cmt	(0X8051E7B8,	"s64",	0);
	set_cmt	(0X8051E7BA,	"unsigned int",	0);
	set_cmt	(0X8051E7D0,	"addr",	0);
	set_cmt	(0X8051E7D2,	"len",	0);
	create_insn	(x=0X8051E7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E80A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E810);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E81E);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E832,	"jumptable 8051E4FC default case, cases 3-20",	1);
	create_insn	(x=0X8051E832);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X8051E832,	"def_8051E4FC");
	create_insn	(x=0X8051E836);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E83A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E83E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E842,	"a3",	0);
	set_cmt	(0X8051E84C,	"jumptable 8051E4FC case 29",	1);
	create_insn	(0X8051E84C);
	set_cmt	(0X8051E862,	"int",	0);
	set_cmt	(0X8051E864,	"unsigned int",	0);
	set_cmt	(0X8051E86A,	"unsigned int",	0);
	set_cmt	(0X8051E86C,	"unsigned int",	0);
	set_cmt	(0X8051E880,	"jumptable 8051E4FC case 26",	1);
	create_insn	(0X8051E880);
	set_cmt	(0X8051E884,	"unsigned int",	0);
	set_cmt	(0X8051E888,	"unsigned int",	0);
	create_insn	(0X8051E896);
	create_insn	(x=0X8051E898);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E8AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E8B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E8B8,	"s64",	0);
	set_cmt	(0X8051E8C0,	"unsigned int",	0);
	create_insn	(x=0X8051E8C2);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E8CE,	"s64",	0);
	set_cmt	(0X8051E8D0,	"unsigned int",	0);
	set_cmt	(0X8051E8D2,	"s64",	0);
	set_cmt	(0X8051E8D4,	"unsigned int",	0);
	create_insn	(x=0X8051E8E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051E8F2);
	create_insn	(x=0X8051E908);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E910);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E914,	"s64",	0);
	set_cmt	(0X8051E91C,	"unsigned int",	0);
	create_insn	(x=0X8051E91E);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E92A,	"s64",	0);
	set_cmt	(0X8051E92C,	"unsigned int",	0);
	set_cmt	(0X8051E92E,	"s64",	0);
	set_cmt	(0X8051E930,	"unsigned int",	0);
	create_insn	(x=0X8051E942);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E958);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E960);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E966);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E970);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051E978,	"a2",	0);
	set_cmt	(0X8051E97A,	"a3",	0);
	create_insn	(x=0X8051E984);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E988);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E98C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E990);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E994);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E998);
	op_stkvar	(x,	1);
	set_cmt	(0X8051E9A0,	"jumptable 8051E4FC case 2",	1);
	create_insn	(0X8051E9A0);
	create_insn	(0X8051E9A6);
	create_insn	(x=0X8051E9AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E9BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E9C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051E9CC);
	create_insn	(x=0X8051E9D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E9E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E9E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051E9F4);
	create_insn	(x=0X8051E9F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E9FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051EA32,	"a2",	0);
	set_cmt	(0X8051EA34,	"a3",	0);
	create_insn	(x=0X8051EA36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA54);
	op_stkvar	(x,	1);
	create_insn	(0X8051EA5C);
	create_insn	(x=0X8051EA60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA72);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA76);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EA82);
	create_insn	(x=0X8051EA86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EA9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EA9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EAA8);
	create_insn	(x=0X8051EAAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EAB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EAB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EAB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EABE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EAC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EAC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EACE);
	create_insn	(x=0X8051EAD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EAD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EADA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EADE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EAE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EAE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EAE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EAEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EAF4);
	create_insn	(x=0X8051EAF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EAFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EB0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EB10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EB1C);
	create_insn	(x=0X8051EB20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EB32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EB38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EB44);
	create_insn	(x=0X8051EB48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EB5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EB60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EB6C);
	create_insn	(x=0X8051EB70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB80);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EB82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB86);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EB88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EB92);
	create_insn	(x=0X8051EB96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EB9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EBA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EBA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EBA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EBAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EBAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EBBA);
	set_name	(0X8051EBBA,	"ShutdownOpusDecoder");
	set_cmt	(0X8051EBCA,	"t",	0);
	set_cmt	(0X8051EBD0,	"retcode",	0);
	create_insn	(x=0X8051EBD0);
	op_stkvar	(x,	1);
	set_cmt	(0X8051EBD2,	"timeout",	0);
	create_insn	(x=0X8051EBDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EBE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EBE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EBE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EBEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EBF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051EC10,	"unsigned int",	0);
	set_cmt	(0X8051EC12,	"unsigned int",	0);
	create_insn	(0X8051EC2C);
	set_name	(0X8051EC2C,	"InitAndGetOpusMainStruct");
	create_insn	(x=0X8051EC30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EC40);
	create_insn	(x=0X8051EC46);
	op_plain_offset	(x,	1,	0X807B1DE8);
	op_plain_offset	(x,	129,	0X807B1DE8);
	set_cmt	(0X8051EC4C,	"int",	0);
	create_insn	(x=0X8051EC4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EC60);
	set_name	(0X8051EC60,	"OpusDecodeObject::GetRequiredWorkSize");
	create_insn	(0X8051EC76);
	set_name	(0X8051EC76,	"OpusDecodeObject_Init");
	create_insn	(0X8051EC94);
	create_insn	(0X8051EC9C);
	set_name	(0X8051EC9C,	"OpusDecodeObject_InitDecoder");
	create_insn	(0X8051ECD8);
	create_insn	(0X8051ECDE);
	set_name	(0X8051ECDE,	"OpusDecodeObject_Reset");
	create_insn	(0X8051ED02);
	set_name	(0X8051ED02,	"OpusDecodeObject_Decode");
	create_insn	(x=0X8051ED20);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051ED24);
	op_stkvar	(x,	1);
	set_cmt	(0X8051ED3A,	"this",	0);
	set_cmt	(0X8051ED3C,	"a2",	0);
	create_insn	(0X8051ED4C);
	create_insn	(0X8051ED58);
	create_insn	(x=0X8051ED5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ED62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ED66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ED6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ED6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051ED70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ED74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051ED80);
	set_name	(0X8051ED80,	"OpusDecodeObject_ResetDecoderState");
	set_cmt	(0X8051ED84,	"this",	0);
	set_cmt	(0X8051ED86,	"a2",	0);
	create_insn	(0X8051ED90);
	set_name	(0X8051ED90,	"OpusMultiStreamDecodeObject::GetRequiredWorkSize");
	create_insn	(0X8051EDB6);
	set_name	(0X8051EDB6,	"OpusMultiStreamDecodeObject_Init");
	create_insn	(0X8051EDD4);
	create_insn	(0X8051EDDC);
	set_name	(0X8051EDDC,	"OpusMultiStreamDecodeObject_InitDecoder");
	create_insn	(0X8051EDF2);
	create_insn	(x=0X8051EDFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EE04);
	op_stkvar	(x,	1);
	create_insn	(0X8051EE12);
	create_insn	(0X8051EE2C);
	set_name	(0X8051EE2C,	"OpusMultiStreamDecodeObject_Reset");
	create_insn	(0X8051EE50);
	set_name	(0X8051EE50,	"OpusMultiStreamDecodeObject_Decode");
	create_insn	(x=0X8051EE6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EE72);
	op_stkvar	(x,	1);
	create_insn	(0X8051EE9A);
	create_insn	(0X8051EEA6);
	create_insn	(x=0X8051EEAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EEB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EEB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EEB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EEBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EEBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EEC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EECE);
	set_name	(0X8051EECE,	"OpusMultiStreamDecodeObject_ResetDecoderState");
	create_insn	(0X8051EEE0);
	create_insn	(x=0X8051EEE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EEEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EEF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EEFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EF12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051EF1A,	"a2",	0);
	create_insn	(0X8051EF2C);
	create_insn	(x=0X8051EF3C);
	op_stkvar	(x,	1);
	create_insn	(0X8051EF4C);
	set_name	(0X8051EF4C,	"MapMemory");
	set_cmt	(0X8051EF52,	"flags",	0);
	create_insn	(x=0X8051EF52);
	op_hex		(x,	1);
	set_cmt	(0X8051EF56,	"paddr",	0);
	set_cmt	(0X8051EF58,	"size",	0);
	set_cmt	(0X8051EF60,	"addr",	0);
	set_cmt	(0X8051EF62,	"len",	0);
	create_insn	(0X8051EF6A);
	set_name	(0X8051EF6A,	"Opus_UnmapMemory");
	set_cmt	(0X8051EF76,	"result",	0);
	set_cmt	(0X8051EF78,	"a2",	0);
	create_insn	(0X8051EF80);
	set_name	(0X8051EF80,	"open_opus_mailbox");
	create_insn	(0X8051EF96);
	set_cmt	(0X8051EF9C,	"mbx_id",	0);
	set_cmt	(0X8051EF9E,	"name",	0);
	set_cmt	(0X8051EFA0,	"sem",	0);
	set_cmt	(0X8051EFA2,	"err_handler",	0);
	create_insn	(x=0X8051EFA2);
	op_stkvar	(x,	1);
	set_cmt	(0X8051EFA6,	"mbx",	0);
	set_cmt	(0X8051EFA8,	"context",	0);
	create_insn	(x=0X8051EFA8);
	op_stkvar	(x,	1);
	create_insn	(0X8051EFC0);
	create_insn	(0X8051EFDA);
	set_name	(0X8051EFDA,	"close_opus_mbx");
	set_cmt	(0X8051EFE6,	"mbx",	0);
	create_insn	(0X8051EFF4);
	set_name	(0X8051EFF4,	"mailbox_SendData");
	set_cmt	(0X8051F002,	"mbx",	0);
	set_cmt	(0X8051F004,	"block",	0);
	set_cmt	(0X8051F006,	"timeout",	0);
	create_insn	(0X8051F01A);
	create_insn	(x=0X8051F020);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F024);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F028);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F02C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F032);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F036);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051F042);
	set_name	(0X8051F042,	"mailbox_receive");
	create_insn	(0X8051F060);
	set_name	(0X8051F060,	"mailbox_checkerror");
	set_cmt	(0X8051F06E,	"mbx",	0);
	create_insn	(0X8051F078);
	set_name	(0X8051F078,	"opus_decoder_alloc_get_size");
	create_insn	(0X8051F07E);
	set_name	(0X8051F07E,	"opus_decoder_get_size");
	create_insn	(x=0X8051F08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F09A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F09E);
	op_hex		(x,	1);
	create_insn	(x=0X8051F0A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F0AA);
	op_stkvar	(x,	1);
	create_insn	(0X8051F0B8);
	set_name	(0X8051F0B8,	"opus_decoder_init");
	create_insn	(0X8051F0E6);
	create_insn	(0X8051F108);
	create_insn	(x=0X8051F112);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F124);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F128);
	op_hex		(x,	1);
	create_insn	(x=0X8051F12C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F134);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F14C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F15A);
	op_hex		(x,	1);
	create_insn	(x=0X8051F16A);
	op_stkvar	(x,	1);
	create_insn	(0X8051F198);
	create_insn	(0X8051F1C8);
	set_name	(0X8051F1C8,	"opus_decoder_create");
	create_insn	(0X8051F1F2);
	create_insn	(x=0X8051F216);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F244);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F248);
	op_hex		(x,	1);
	create_insn	(x=0X8051F24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F254);
	op_stkvar	(x,	1);
	create_insn	(0X8051F280);
	set_name	(0X8051F280,	"opus_decode_native");
	create_insn	(x=0X8051F28A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F294);
	op_stkvar	(x,	1);
	set_cmt	(0X8051F2BA,	"int",	0);
	set_cmt	(0X8051F2BE,	"int",	0);
	create_insn	(0X8051F2D4);
	create_insn	(x=0X8051F2EE);
	op_stkvar	(x,	1);
	create_insn	(0X8051F318);
	create_insn	(x=0X8051F320);
	op_hex		(x,	1);
	create_insn	(x=0X8051F32C);
	op_hex		(x,	1);
	create_insn	(x=0X8051F336);
	op_stkvar	(x,	1);
	create_insn	(0X8051F34C);
	create_insn	(x=0X8051F35C);
	op_stkvar	(x,	1);
	create_insn	(0X8051F360);
	create_insn	(x=0X8051F368);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F374);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F376);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F378);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F380);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F384);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F38A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F38E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F390);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F3A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F3B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F3BA);
	op_stkvar	(x,	1);
	set_cmt	(0X8051F3E2,	"int",	0);
	set_cmt	(0X8051F3E6,	"int",	0);
	create_insn	(x=0X8051F3FE);
	op_stkvar	(x,	1);
	create_insn	(0X8051F424);
	create_insn	(x=0X8051F430);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F448);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F458);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F460);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F474);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F47A);
	op_stkvar	(x,	1);
	create_insn	(0X8051F49A);
	create_insn	(x=0X8051F4AC);
	op_stkvar	(x,	1);
	set_cmt	(0X8051F4B8,	"int",	0);
	set_cmt	(0X8051F4BC,	"int",	0);
	create_insn	(0X8051F4CA);
	create_insn	(x=0X8051F4DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F4EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F4EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F50E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F510);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F51A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F526);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F53C);
	op_stkvar	(x,	1);
	create_insn	(0X8051F55C);
	create_insn	(x=0X8051F568);
	op_stkvar	(x,	1);
	create_insn	(0X8051F580);
	set_name	(0X8051F580,	"opus_decode_frame");
	create_insn	(x=0X8051F590);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F594);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F598);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F5AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F5C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F5CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051F600);
	create_insn	(x=0X8051F602);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F606);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F610);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F612);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F624);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F632);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F638);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F63C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F642);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F646);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F64A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F652);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F672);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F67E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F694);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F6AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F6AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F6CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F6D2);
	op_stkvar	(x,	1);
	create_insn	(0X8051F6D6);
	create_insn	(x=0X8051F6DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F6E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F6F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F71C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051F72E);
	create_insn	(x=0X8051F730);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F748);
	op_hex		(x,	1);
	create_insn	(x=0X8051F774);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F778);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F780);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F794);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7D4);
	op_stkvar	(x,	1);
	create_insn	(0X8051F7D8);
	create_insn	(x=0X8051F7DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F7EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051F7FA);
	create_insn	(x=0X8051F800);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F804);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F808);
	op_stkvar	(x,	1);
	create_insn	(0X8051F810);
	create_insn	(x=0X8051F816);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F81A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F81C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F822);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F824);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F832);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F834);
	op_hex		(x,	1);
	create_insn	(x=0X8051F850);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F85E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F872);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F880);
	op_stkvar	(x,	1);
	create_insn	(0X8051F88E);
	create_insn	(x=0X8051F892);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F89E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8C6);
	op_hex		(x,	1);
	create_insn	(x=0X8051F8CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F8FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F900);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F914);
	op_stkvar	(x,	1);
	set_cmt	(0X8051F91A,	"int",	0);
	set_cmt	(0X8051F91E,	"int",	0);
	create_insn	(x=0X8051F932);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F93A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F96A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F972);
	op_stkvar	(x,	1);
	create_insn	(0X8051F98A);
	create_insn	(x=0X8051F98C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F98E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F99C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F99E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F9A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F9A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F9AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F9C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F9C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F9D4);
	op_hex		(x,	1);
	create_insn	(0X8051FA04);
	create_insn	(x=0X8051FA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA14);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA1E);
	op_stkvar	(x,	1);
	create_insn	(0X8051FA22);
	create_insn	(x=0X8051FA24);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA38);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FA7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FA82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FA9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FABA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAC2);
	op_stkvar	(x,	1);
	create_insn	(0X8051FAC6);
	create_insn	(x=0X8051FAC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FADA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FAEE);
	op_stkvar	(x,	1);
	create_insn	(0X8051FAF2);
	create_insn	(x=0X8051FAF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB12);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FB42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB66);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB80);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB8E);
	op_stkvar	(x,	1);
	create_insn	(0X8051FB92);
	create_insn	(x=0X8051FB98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FB9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FBA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FBA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FBA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FBA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FBAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FBC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FBCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051FBD8);
	create_insn	(x=0X8051FBEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FBF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FBF8);
	op_hex		(x,	1);
	create_insn	(x=0X8051FBFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC24);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC4A);
	op_stkvar	(x,	1);
	create_insn	(0X8051FC50);
	create_insn	(x=0X8051FC54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC56);
	op_hex		(x,	1);
	create_insn	(x=0X8051FC5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FC9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCF8);
	op_hex		(x,	1);
	create_insn	(x=0X8051FD34);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD66);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FDEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE48);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE66);
	op_stkvar	(x,	1);
	set_cmt	(0X8051FE68,	"int",	0);
	set_cmt	(0X8051FE6A,	"int",	0);
	create_insn	(x=0X8051FE72);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE88);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FE9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FEA6);
	op_stkvar	(x,	1);
	set_cmt	(0X8051FEA8,	"int",	0);
	set_cmt	(0X8051FEAA,	"int",	0);
	create_insn	(x=0X8051FEB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FEB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FEBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FEC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FECE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FED6);
	op_stkvar	(x,	1);
	set_cmt	(0X8051FEDC,	"int",	0);
	set_cmt	(0X8051FEDE,	"int",	0);
	create_insn	(x=0X8051FEE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FEE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FEF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FEFA);
	op_hex		(x,	1);
	create_insn	(x=0X8051FF06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF12);
	op_hex		(x,	1);
	create_insn	(x=0X8051FF1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF2A);
	op_hex		(x,	1);
	create_insn	(x=0X8051FF2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FF82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FFAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FFD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FFDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052005C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520062);
	op_stkvar	(x,	1);
	create_insn	(0X80520072);
	create_insn	(x=0X8052007C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052007E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052008A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805200CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805200CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805200D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805200F0);
	op_stkvar	(x,	1);
	set_cmt	(0X80520102,	"int",	0);
	set_cmt	(0X80520108,	"int",	0);
	set_cmt	(0X8052010A,	"int",	0);
	create_insn	(x=0X80520112);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520114);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520116);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520124);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520126);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052012A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052012E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80520132);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520136);
	op_stkvar	(x,	1);
	create_insn	(0X8052015C);
	create_insn	(x=0X8052016C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520172);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520178);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052017E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520186);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520188);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520198);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052019E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201BA);
	op_hex		(x,	1);
	create_insn	(x=0X805201BE);
	op_hex		(x,	1);
	create_insn	(x=0X805201CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201D8);
	op_hex		(x,	1);
	create_insn	(x=0X805201DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805201EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805201FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520206);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520208);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052020A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520212);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052021A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052021C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520224);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520242);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052024E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520264);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052026A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520270);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520276);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052027A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805202DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520352);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520354);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520360);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052037A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520380);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520386);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520392);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520398);
	op_stkvar	(x,	1);
	create_insn	(x=0X805203AE);
	op_stkvar	(x,	1);
	create_insn	(0X805203B4);
	create_insn	(x=0X805203CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805203DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520406);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520420);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520428);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052042A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052042C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052042E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520438);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052044A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520454);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520456);
	op_hex		(x,	1);
	create_insn	(x=0X8052045A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520460);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520462);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520466);
	op_hex		(x,	1);
	create_insn	(x=0X80520470);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520476);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052047C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052047E);
	op_hex		(x,	1);
	create_insn	(x=0X80520482);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520488);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052048A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80520496);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052049A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052049C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805204EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052050A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520516);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520530);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520534);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520538);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052053E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805205B6);
	op_stkvar	(x,	1);
	create_insn	(0X805205CA);
	create_insn	(x=0X805205D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805205D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805205DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805205E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805205EE);
	op_stkvar	(x,	1);
	create_insn	(0X8052062E);
	create_insn	(x=0X80520696);
	op_stkvar	(x,	1);
	create_insn	(x=0X805206B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805206BA);
	op_hex		(x,	1);
	create_insn	(x=0X80520754);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520756);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520758);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052075A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052076A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520770);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520786);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052078C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207A2);
	op_hex		(x,	1);
	create_insn	(x=0X805207A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207D0);
	op_hex		(x,	1);
	create_insn	(x=0X805207DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207E8);
	op_hex		(x,	1);
	create_insn	(x=0X805207EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805207F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805207FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520804);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520812);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520816);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520826);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520830);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520836);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520838);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052083A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520848);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520864);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520874);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520892);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052089A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052089C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052089E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520918);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052091E);
	op_stkvar	(x,	1);
	create_insn	(0X80520930);
	create_insn	(x=0X8052093C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052093E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052094A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520986);
	op_hex		(x,	1);
	create_insn	(x=0X805209AC);
	op_hex		(x,	1);
	create_oword	(0X805209D0);
	create_oword	(0X805209E0);
	create_insn	(0X805209F0);
	create_insn	(x=0X805209F6);
	op_hex		(x,	1);
	create_insn	(0X80520A0C);
	create_insn	(0X80520A1E);
	create_insn	(0X80520A28);
	create_insn	(0X80520A36);
	create_insn	(x=0X80520A4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520A58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80520A5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80520A72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520A8E);
	op_hex		(x,	1);
	create_insn	(0X80520AA4);
	create_insn	(x=0X80520AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80520ACA);
	create_insn	(0X80520ACE);
	create_insn	(0X80520AD4);
	create_insn	(0X80520ADA);
	create_insn	(x=0X80520ADE);
	op_hex		(x,	1);
	create_insn	(x=0X80520B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520B14);
	op_hex		(x,	1);
	create_insn	(x=0X80520B1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520B32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520B36);
	op_stkvar	(x,	1);
	create_float	(0X80520B74);
	create_insn	(0X80520B78);
	create_insn	(x=0X80520B84);
	op_hex		(x,	1);
	create_insn	(0X80520B98);
	create_insn	(0X80520B9E);
	create_insn	(0X80520BA2);
	create_insn	(0X80520BA6);
	create_insn	(x=0X80520BA8);
	op_hex		(x,	1);
	create_insn	(0X80520BCA);
	set_name	(0X80520BCA,	"opus_decode");
	create_insn	(x=0X80520BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520BEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80520BF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80520BFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520C10);
	op_stkvar	(x,	1);
	create_insn	(0X80520C1A);
	create_insn	(0X80520C2C);
	set_name	(0X80520C2C,	"opus_decoder_ctl");
	create_insn	(x=0X80520C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520C4A);
	op_stkvar	(x,	1);
	set_cmt	(0X80520C4C,	"switch 37 cases",	0);
	set_cmt	(0X80520C5A,	"switch jump",	0);
	set_cmt	(0X80520C5E,	"jump table for switch statement",	0);
	create_byte	(0X80520C5E);
	set_name	(0X80520C5E,	"jpt_80520C5A");
	create_byte	(0X80520C5F);
	create_byte	(0X80520C60);
	create_byte	(0X80520C61);
	create_byte	(0X80520C62);
	create_byte	(0X80520C63);
	create_byte	(0X80520C64);
	create_byte	(0X80520C65);
	create_byte	(0X80520C66);
	create_byte	(0X80520C67);
	create_byte	(0X80520C68);
	create_byte	(0X80520C69);
	create_byte	(0X80520C6A);
	create_byte	(0X80520C6B);
	create_byte	(0X80520C6C);
	create_byte	(0X80520C6D);
	create_byte	(0X80520C6E);
	create_byte	(0X80520C6F);
	create_byte	(0X80520C70);
	create_byte	(0X80520C71);
	create_byte	(0X80520C72);
	create_byte	(0X80520C73);
	create_byte	(0X80520C74);
	create_byte	(0X80520C75);
	create_byte	(0X80520C76);
	create_byte	(0X80520C77);
	create_byte	(0X80520C78);
	create_byte	(0X80520C79);
	create_byte	(0X80520C7A);
	create_byte	(0X80520C7B);
	create_byte	(0X80520C7C);
	create_byte	(0X80520C7D);
	create_byte	(0X80520C7E);
	create_byte	(0X80520C7F);
	create_byte	(0X80520C80);
	create_byte	(0X80520C81);
	create_byte	(0X80520C82);
	set_cmt	(0X80520C84,	"jumptable 80520C5A case 4009",	1);
	create_insn	(x=0X80520C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520C88);
	op_stkvar	(x,	1);
	set_cmt	(0X80520C94,	"jumptable 80520C5A case 4028",	1);
	create_insn	(0X80520C94);
	set_cmt	(0X80520CCE,	"jumptable 80520C5A case 4029",	1);
	create_insn	(x=0X80520CCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520CD2);
	op_stkvar	(x,	1);
	set_cmt	(0X80520CDC,	"jumptable 80520C5A case 4031",	1);
	create_insn	(x=0X80520CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520CE0);
	op_stkvar	(x,	1);
	set_cmt	(0X80520CEA,	"jumptable 80520C5A case 4033",	1);
	create_insn	(x=0X80520CEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520CEE);
	op_stkvar	(x,	1);
	set_cmt	(0X80520D0A,	"jumptable 80520C5A case 4034",	1);
	create_insn	(x=0X80520D0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520D10);
	op_stkvar	(x,	1);
	set_cmt	(0X80520D22,	"jumptable 80520C5A case 4039",	1);
	create_insn	(x=0X80520D22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520D26);
	op_stkvar	(x,	1);
	set_cmt	(0X80520D30,	"jumptable 80520C5A case 4045",	1);
	create_insn	(x=0X80520D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520D34);
	op_stkvar	(x,	1);
	create_insn	(0X80520D42);
	set_cmt	(0X80520D46,	"jumptable 80520C5A default case, cases 4010-4027,4030,4032,4035-4038,4040-4044",	1);
	set_name	(0X80520D46,	"def_80520C5A");
	create_insn	(0X80520D56);
	create_insn	(0X80520D5C);
	create_insn	(0X80520D66);
	create_insn	(x=0X80520D72);
	op_hex		(x,	1);
	create_insn	(x=0X80520D90);
	op_hex		(x,	1);
	create_insn	(0X80520D96);
	create_insn	(x=0X80520DA2);
	op_hex		(x,	1);
	create_insn	(0X80520DB6);
	create_insn	(0X80520DBC);
	create_insn	(0X80520DC0);
	create_insn	(0X80520DC4);
	create_insn	(x=0X80520DC6);
	op_hex		(x,	1);
	create_insn	(0X80520DE8);
	create_insn	(0X80520DEE);
	set_name	(0X80520DEE,	"opus_multistream_decoder_get_size");
	set_cmt	(0X80520E14,	"channelCount",	0);
	set_cmt	(0X80520E24,	"channelCount",	0);
	create_insn	(x=0X80520E34);
	op_hex		(x,	1);
	create_insn	(x=0X80520E38);
	op_hex		(x,	1);
	create_insn	(0X80520E50);
	create_insn	(0X80520E58);
	set_name	(0X80520E58,	"opus_multistream_decoder_init");
	create_insn	(0X80520E76);
	create_insn	(x=0X80520E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520E92);
	op_stkvar	(x,	1);
	set_cmt	(0X80520EDE,	"channelCount",	0);
	set_cmt	(0X80520EEE,	"channelCount",	0);
	create_insn	(x=0X80520EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520F0C);
	op_hex		(x,	1);
	create_insn	(x=0X80520F32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520F3A);
	op_hex		(x,	1);
	create_insn	(0X80520F5C);
	create_insn	(x=0X80520F68);
	op_hex		(x,	1);
	create_insn	(0X80520F82);
	create_insn	(0X80520F96);
	create_insn	(x=0X80520FA0);
	op_stkvar	(x,	1);
	create_insn	(0X80520FC6);
	create_insn	(x=0X80520FE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80520FEA);
	op_stkvar	(x,	1);
	set_cmt	(0X80520FEC,	"channelCount",	0);
	set_cmt	(0X80520FFC,	"channelCount",	0);
	create_insn	(x=0X80521004);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521008);
	op_hex		(x,	1);
	create_insn	(x=0X8052100E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521016);
	op_hex		(x,	1);
	create_insn	(x=0X8052102C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521034);
	op_stkvar	(x,	1);
	create_insn	(0X80521054);
	create_insn	(0X80521064);
	set_name	(0X80521064,	"opus_multistream_decode");
	create_insn	(x=0X8052106A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521076);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052107A);
	op_stkvar	(x,	1);
	create_insn	(0X80521084);
	set_name	(0X80521084,	"opus_multistream_decode_native");
	create_insn	(x=0X80521096);
	op_stkvar	(x,	1);
	set_cmt	(0X8052109E,	"channelCount",	0);
	set_cmt	(0X805210AE,	"channelCount",	0);
	create_insn	(x=0X805210C2);
	op_hex		(x,	1);
	create_insn	(x=0X805210D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805210D4);
	op_hex		(x,	1);
	create_insn	(x=0X805210D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805210E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805210F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521104);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521110);
	op_hex		(x,	1);
	create_insn	(x=0X8052111C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052112A);
	op_stkvar	(x,	1);
	set_cmt	(0X8052112C,	"channelCount",	0);
	create_insn	(x=0X80521132);
	op_stkvar	(x,	1);
	set_cmt	(0X8052113C,	"channelCount",	0);
	create_insn	(x=0X8052114C);
	op_stkvar	(x,	1);
	create_insn	(0X80521168);
	create_insn	(0X8052117A);
	create_insn	(x=0X8052117C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521184);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052118A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052118C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521190);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521196);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805211EC);
	op_stkvar	(x,	1);
	create_insn	(0X805211FE);
	create_insn	(0X8052120A);
	create_insn	(x=0X80521216);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521218);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052121C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521220);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80521228);
	op_stkvar	(x,	1);
	create_insn	(0X80521236);
	create_insn	(x=0X80521244);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052124A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052124C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521252);
	op_stkvar	(x,	1);
	create_insn	(0X80521256);
	create_insn	(x=0X8052125C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521260);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052126A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052126E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521282);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052128C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521292);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521298);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052129C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052129E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212C0);
	op_hex		(x,	1);
	create_insn	(x=0X805212CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805212FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521328);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521334);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521338);
	op_stkvar	(x,	1);
	create_insn	(0X80521350);
	create_insn	(x=0X80521354);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521358);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521368);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052136C);
	op_stkvar	(x,	1);
	create_insn	(0X80521386);
	create_insn	(0X80521398);
	create_insn	(x=0X805213A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805213AE);
	op_stkvar	(x,	1);
	create_insn	(0X805213B8);
	create_insn	(x=0X805213BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805213C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805213D2);
	create_insn	(0X805213DE);
	set_name	(0X805213DE,	"opus_copy_channel_out_short");
	create_insn	(x=0X805213E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805213F2);
	op_stkvar	(x,	1);
	create_insn	(0X80521402);
	create_insn	(x=0X8052141C);
	op_hex		(x,	1);
	create_insn	(0X80521436);
	create_insn	(0X8052146C);
	create_insn	(x=0X80521486);
	op_hex		(x,	1);
	create_insn	(0X805214A8);
	create_insn	(0X805214C8);
	create_insn	(x=0X805214CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805214DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805214DE);
	op_stkvar	(x,	1);
	create_insn	(0X805214EA);
	create_insn	(x=0X805214F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805214FC);
	op_stkvar	(x,	1);
	create_insn	(0X8052152C);
	create_insn	(x=0X80521546);
	op_hex		(x,	1);
	create_insn	(0X80521560);
	create_float	(0X80521580);
	create_insn	(0X80521584);
	set_name	(0X80521584,	"opus_multistream_decoder_ctl_va_list");
	create_insn	(x=0X80521596);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052159C);
	op_stkvar	(x,	1);
	set_cmt	(0X805215A6,	"channelCount",	0);
	set_cmt	(0X805215B8,	"channelCount",	0);
	set_cmt	(0X805215BE,	"switch 37 cases",	0);
	set_cmt	(0X805215D2,	"switch jump",	0);
	set_cmt	(0X805215D6,	"jump table for switch statement",	0);
	create_byte	(0X805215D6);
	set_name	(0X805215D6,	"jpt_805215D2");
	create_byte	(0X805215D7);
	create_byte	(0X805215D8);
	create_byte	(0X805215D9);
	create_byte	(0X805215DA);
	create_byte	(0X805215DB);
	create_byte	(0X805215DC);
	create_byte	(0X805215DD);
	create_byte	(0X805215DE);
	create_byte	(0X805215DF);
	create_byte	(0X805215E0);
	create_byte	(0X805215E1);
	create_byte	(0X805215E2);
	create_byte	(0X805215E3);
	create_byte	(0X805215E4);
	create_byte	(0X805215E5);
	create_byte	(0X805215E6);
	create_byte	(0X805215E7);
	create_byte	(0X805215E8);
	create_byte	(0X805215E9);
	create_byte	(0X805215EA);
	create_byte	(0X805215EB);
	create_byte	(0X805215EC);
	create_byte	(0X805215ED);
	create_byte	(0X805215EE);
	create_byte	(0X805215EF);
	create_byte	(0X805215F0);
	create_byte	(0X805215F1);
	create_byte	(0X805215F2);
	create_byte	(0X805215F3);
	create_byte	(0X805215F4);
	create_byte	(0X805215F5);
	create_byte	(0X805215F6);
	create_byte	(0X805215F7);
	create_byte	(0X805215F8);
	create_byte	(0X805215F9);
	create_byte	(0X805215FA);
	set_cmt	(0X805215FC,	"jumptable 805215D2 cases 4009,4029,4039,4045",	1);
	create_insn	(x=0X805215FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521600);
	op_stkvar	(x,	1);
	set_cmt	(0X80521602,	"a2",	0);
	set_cmt	(0X80521606,	"this",	0);
	set_cmt	(0X8052160E,	"jumptable 805215D2 default case",	1);
	create_insn	(0X8052160E);
	set_name	(0X8052160E,	"def_805215D2");
	create_insn	(x=0X80521618);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052161C);
	op_stkvar	(x,	1);
	set_cmt	(0X80521630,	"jumptable 805215D2 case 4028",	1);
	create_insn	(0X80521630);
	set_cmt	(0X8052163A,	"this",	0);
	set_cmt	(0X8052163C,	"a2",	0);
	create_insn	(x=0X8052165C);
	op_hex		(x,	1);
	set_cmt	(0X80521668,	"jumptable 805215D2 case 4031",	1);
	create_insn	(x=0X80521668);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052166E);
	op_stkvar	(x,	1);
	set_cmt	(0X8052168A,	"this",	0);
	set_cmt	(0X8052168C,	"a2",	0);
	create_insn	(x=0X80521690);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052169E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805216BA);
	op_hex		(x,	1);
	set_cmt	(0X805216CA,	"jumptable 805215D2 case 4034",	1);
	create_insn	(x=0X805216CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805216D4);
	op_stkvar	(x,	1);
	set_cmt	(0X805216DE,	"this",	0);
	set_cmt	(0X805216E0,	"a2",	0);
	create_insn	(x=0X80521700);
	op_hex		(x,	1);
	create_insn	(0X8052170E);
	create_insn	(x=0X80521716);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052172E);
	op_hex		(x,	1);
	create_insn	(0X8052173E);
	set_cmt	(0X80521742,	"jumptable 805215D2 cases 4010-4027,4030,4032,4033,4035-4038,4040-4044",	1);
	create_insn	(0X8052175C);
	create_insn	(0X80521784);
	create_insn	(0X8052179E);
	create_insn	(x=0X805217AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805217AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805217BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805217C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805217C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805217CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805217CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521802);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521826);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521838);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052183E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521842);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052185A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052185C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80521864);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521866);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521874);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521880);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521882);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521890);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805218FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521912);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521922);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052194E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521962);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521968);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521984);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052199A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805219E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521A92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521AFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521B6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521B86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521BAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521BDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521BF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521BF4);
	op_stkvar	(x,	1);
	create_insn	(0X80521C06);
	set_cmt	(0X80521C0A,	"int",	0);
	set_cmt	(0X80521C0C,	"result",	0);
	set_cmt	(0X80521C0E,	"char *",	0);
	create_insn	(0X80521C1C);
	create_insn	(x=0X80521C1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521C24);
	op_stkvar	(x,	1);
	set_cmt	(0X80521C36,	"result",	0);
	set_cmt	(0X80521C3A,	"char *",	0);
	set_cmt	(0X80521C3E,	"int",	0);
	create_insn	(0X80521C4C);
	create_insn	(0X80521CD0);
	set_name	(0X80521CD0,	"celt_decoder_get_size");
	create_insn	(0X80521CFA);
	set_name	(0X80521CFA,	"celt_decoder_init");
	create_insn	(0X80521D28);
	create_insn	(0X80521D88);
	create_insn	(0X80521DA0);
	create_insn	(x=0X80521DBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80521DC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80521DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521DDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521DEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80521E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521E7E);
	op_stkvar	(x,	1);
	create_insn	(0X80521E90);
	create_insn	(x=0X80521E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521ED6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80521EE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521EFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80521FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522002);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522014);
	op_stkvar	(x,	1);
	create_insn	(0X8052201A);
	create_insn	(x=0X8052201E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052202E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522034);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052203A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052204A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522082);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522088);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052208E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522090);
	op_stkvar	(x,	1);
	create_insn	(x=0X805220C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805220C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805220CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805220D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805220E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805220F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805220FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522106);
	op_hex		(x,	1);
	create_insn	(x=0X8052210A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522112);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052211C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80522130);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052213A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522142);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522148);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052214E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522154);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522168);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052216E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522178);
	op_hex		(x,	1);
	create_insn	(x=0X8052217C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052217E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522180);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522184);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522192);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522194);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805221E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052221C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052221E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522224);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522248);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052224A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522250);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522252);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522258);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052225E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522260);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522262);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052226C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522270);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522272);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522274);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522278);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052227C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522286);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052228A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052228E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522294);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805222FC);
	op_stkvar	(x,	1);
	set_cmt	(0X80522306,	"result",	0);
	set_cmt	(0X8052230A,	"int",	0);
	set_cmt	(0X8052230C,	"char *",	0);
	create_insn	(x=0X80522318);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522324);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522326);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522328);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052232C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052232E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522330);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522332);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522336);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522338);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052233A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052233E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522340);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522342);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522344);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052234A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052235A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052235E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522364);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522366);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052236A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522370);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522374);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522376);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522378);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052237C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052237E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522390);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052239A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805223A4);
	op_hex		(x,	1);
	create_insn	(x=0X805223C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805223CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522406);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052240C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052241C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522420);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522430);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052243A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052243E);
	op_stkvar	(x,	1);
	create_insn	(0X80522448);
	create_insn	(x=0X8052244A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052244C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052244E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052245E);
	op_stkvar	(x,	1);
	create_insn	(0X80522464);
	create_insn	(x=0X80522466);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052246A);
	op_stkvar	(x,	1);
	create_insn	(0X8052246E);
	create_insn	(x=0X80522482);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052248C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80522496);
	create_insn	(x=0X80522498);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052249C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805224A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805224A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805224A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805224AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805224B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805224B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805224BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805224CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052250C);
	op_stkvar	(x,	1);
	create_insn	(0X80522518);
	create_insn	(x=0X8052251C);
	op_stkvar	(x,	1);
	create_insn	(0X80522520);
	create_insn	(x=0X80522524);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522528);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052252C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522530);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522536);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052253C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80522546);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522550);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522554);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052255C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522562);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052257C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522584);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522596);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225EE);
	op_hex		(x,	1);
	create_insn	(x=0X805225F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805225F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522610);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522634);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052264C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522650);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052265A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522670);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052267E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522686);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052268E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522690);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522692);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052269E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805226A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805226A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805226A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805226AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805226B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805226B2);
	op_stkvar	(x,	1);
	create_insn	(0X805226D4);
	create_insn	(x=0X805226D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805226DA);
	op_stkvar	(x,	1);
	create_insn	(0X805226E0);
	create_insn	(x=0X805226E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805226E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805226EA);
	op_stkvar	(x,	1);
	create_insn	(0X805226FA);
	create_insn	(x=0X80522722);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052272A);
	op_stkvar	(x,	1);
	create_insn	(0X80522734);
	create_insn	(x=0X8052273C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522742);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522748);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052274E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522750);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522752);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052275E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052277E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052278E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052279A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805227A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805227AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805227AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805227B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227BE);
	op_hex		(x,	1);
	create_insn	(x=0X805227CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227D8);
	op_hex		(x,	1);
	create_insn	(x=0X805227E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805227FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522802);
	op_stkvar	(x,	1);
	create_insn	(0X8052280C);
	create_insn	(x=0X80522818);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052284C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522856);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522860);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522864);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052288A);
	op_stkvar	(x,	1);
	create_insn	(0X8052289A);
	create_insn	(0X8052289E);
	create_insn	(x=0X805228A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805228A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805228A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805228AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805228B0);
	op_stkvar	(x,	1);
	create_insn	(0X805228D2);
	create_insn	(x=0X805228D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805228DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805228EA);
	op_hex		(x,	1);
	create_insn	(x=0X805228F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805228F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805228FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522902);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522906);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522908);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80522918);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052291C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522924);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522928);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522934);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522938);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522942);
	op_stkvar	(x,	1);
	create_insn	(0X80522954);
	create_insn	(x=0X8052295A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522966);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052296A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052296C);
	op_hex		(x,	1);
	create_insn	(x=0X80522970);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052297C);
	op_hex		(x,	1);
	create_insn	(x=0X80522982);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522986);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052298E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522990);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522992);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522998);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052299A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052299E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805229EC);
	op_stkvar	(x,	1);
	set_cmt	(0X805229FA,	"result",	0);
	set_cmt	(0X805229FE,	"int",	0);
	set_cmt	(0X80522A00,	"char *",	0);
	create_insn	(x=0X80522A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80522A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80522A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A2A);
	op_hex		(x,	1);
	create_insn	(x=0X80522A36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522ACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522ACE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522ADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B44);
	op_stkvar	(x,	1);
	create_insn	(0X80522B48);
	create_insn	(x=0X80522B50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BB2);
	op_hex		(x,	1);
	create_insn	(x=0X80522BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522BFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522CAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522CDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D6C);
	op_stkvar	(x,	1);
	set_cmt	(0X80522D70,	"char *",	0);
	create_insn	(x=0X80522D70);
	op_stkvar	(x,	1);
	set_cmt	(0X80522D72,	"int",	0);
	create_insn	(x=0X80522D72);
	op_stkvar	(x,	1);
	set_cmt	(0X80522D74,	"result",	0);
	create_insn	(x=0X80522D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522D8C);
	op_stkvar	(x,	1);
	create_oword	(0X80522DA0);
	create_insn	(x=0X80522DB0);
	op_stkvar	(x,	1);
	set_cmt	(0X80522DB2,	"int",	0);
	set_cmt	(0X80522DB4,	"result",	0);
	create_insn	(x=0X80522DB4);
	op_stkvar	(x,	1);
	set_cmt	(0X80522DB6,	"char *",	0);
	set_cmt	(0X80522DBC,	"char *",	0);
	create_insn	(x=0X80522DBC);
	op_stkvar	(x,	1);
	set_cmt	(0X80522DBE,	"result",	0);
	set_cmt	(0X80522DC0,	"int",	0);
	create_insn	(x=0X80522DCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522DDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522DEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522E6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522E74);
	op_hex		(x,	1);
	create_insn	(x=0X80522E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522E96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522EC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522EE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522EEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FAE);
	op_hex		(x,	1);
	create_insn	(x=0X80522FB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80522FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523006);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523014);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052301A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523058);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523070);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052307C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523086);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052309E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230CE);
	op_hex		(x,	1);
	create_insn	(x=0X805230D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805230FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523100);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523106);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523112);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523152);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523158);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523160);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523166);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052316E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523174);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523180);
	op_stkvar	(x,	1);
	create_insn	(x=0X805231AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805231E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052320C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523210);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523216);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523218);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523226);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052322C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523232);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523238);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523248);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523250);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052326A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052326C);
	op_hex		(x,	1);
	create_insn	(x=0X8052328A);
	op_stkvar	(x,	1);
	create_insn	(0X80523296);
	create_insn	(x=0X80523298);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052329C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805232A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805232AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805232B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805232FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523312);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052334E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052335C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523362);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052336A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523378);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523382);
	op_stkvar	(x,	1);
	create_insn	(x=0X805233C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052340A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523410);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052341E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523430);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523434);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052343C);
	op_hex		(x,	1);
	create_insn	(x=0X80523446);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523452);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523470);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052347A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523480);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523482);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523488);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052349A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805234D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805234D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805234F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805234F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052350C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052351A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052353E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523548);
	op_hex		(x,	1);
	create_insn	(x=0X80523558);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052355A);
	op_stkvar	(x,	1);
	create_insn	(0X8052358C);
	create_insn	(x=0X8052358E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523592);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523596);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523598);
	op_stkvar	(x,	1);
	create_insn	(x=0X805235A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805235AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805235EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805235F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805235F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805235FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523610);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523616);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052361C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523628);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052363C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052365C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523692);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805236F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523700);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052371A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052371C);
	op_hex		(x,	1);
	create_insn	(x=0X8052373A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523748);
	op_hex		(x,	1);
	create_insn	(x=0X8052374C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052375A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052375C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523766);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052376E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523776);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523788);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052378E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523796);
	op_stkvar	(x,	1);
	create_insn	(x=0X805237AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805237B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805237B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805237B8);
	op_hex		(x,	1);
	create_insn	(x=0X805237BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805237C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805237C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805237CE);
	op_hex		(x,	1);
	create_insn	(x=0X805237D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052380C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523812);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523834);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052383C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523842);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523844);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052384E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052385A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523860);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052386A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523876);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052387C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523884);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523886);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523892);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523898);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805238F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523902);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523908);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523910);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523912);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052391E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523924);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052392C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052392E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052393A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523940);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523948);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052394A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523956);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052395C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523964);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523966);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523974);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052397E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523986);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523990);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523992);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052399A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239E0);
	op_hex		(x,	1);
	create_insn	(x=0X805239E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239EE);
	op_hex		(x,	1);
	create_insn	(x=0X805239F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805239FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A36);
	op_hex		(x,	1);
	create_insn	(x=0X80523A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A3C);
	op_hex		(x,	1);
	create_insn	(x=0X80523A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523A94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523AA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523AB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523AC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523AD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523AE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523AEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523AF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80523B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B8A);
	op_stkvar	(x,	1);
	create_insn	(0X80523B94);
	create_insn	(x=0X80523B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523B9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523C68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523CA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523CDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523D9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523DDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523E9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523EAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523EB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523EC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523ECE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523EDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523EE8);
	op_stkvar	(x,	1);
	create_insn	(0X80523EFA);
	create_insn	(x=0X80523EFE);
	op_stkvar	(x,	1);
	create_insn	(0X80523F04);
	create_insn	(x=0X80523F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523F0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523F0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523F24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523F2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523F42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523F6C);
	op_stkvar	(x,	1);
	create_insn	(0X80523FB6);
	create_insn	(0X80523FBC);
	create_insn	(x=0X80523FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523FC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523FE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80523FFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524024);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524064);
	op_stkvar	(x,	1);
	create_insn	(0X80524072);
	create_insn	(x=0X80524078);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052407C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524082);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524084);
	op_stkvar	(x,	1);
	create_insn	(x=0X805240BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805240C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805240E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805240EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805240F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524116);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052412E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524130);
	op_stkvar	(x,	1);
	set_cmt	(0X80524132,	"int",	0);
	create_insn	(x=0X80524132);
	op_stkvar	(x,	1);
	set_cmt	(0X80524134,	"char *",	0);
	set_cmt	(0X80524138,	"result",	0);
	create_insn	(x=0X80524144);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052414C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524150);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052415E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524184);
	op_stkvar	(x,	1);
	create_insn	(0X805241B2);
	create_insn	(x=0X805241B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805241B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805241BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805241BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805241BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805241C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805241E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805241EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524208);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052420E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524216);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052421A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524220);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052422A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052422E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524234);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052423E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524242);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524250);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524258);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524260);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524262);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524264);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524268);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052426C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524270);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524274);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052427C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052427E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524280);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524282);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524288);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052428A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524290);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524298);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052429A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805242F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524302);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524310);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524314);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524318);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052431A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052431C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524326);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052432A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052432E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052433E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524342);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524350);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524354);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524362);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524366);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524374);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524378);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052437E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524380);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052438A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052438E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524392);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524396);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524398);
	op_stkvar	(x,	1);
	create_insn	(0X805243C2);
	create_insn	(x=0X805243D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805243E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524406);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052441C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052441E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052445A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524472);
	op_stkvar	(x,	1);
	create_insn	(0X8052447C);
	create_insn	(x=0X80524486);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524488);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524496);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052449E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805244EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805244F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524532);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524538);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052453E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524544);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052454E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524552);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524592);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524598);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052459E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805245A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805245AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805245B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805245DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805245E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805245E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805245E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052460E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524610);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524620);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524624);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052462A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524630);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524634);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524640);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524648);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524652);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052465E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524660);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524666);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524672);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524688);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052468E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524694);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052469A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805246A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805246A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805246F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805246F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805246FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805246FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524702);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524730);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524742);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524782);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524784);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052478E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524794);
	op_hex		(x,	1);
	create_insn	(x=0X805247CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805247FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524802);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524814);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052485C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524860);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524864);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052486C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524870);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524882);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805248F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80524900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80524908,	"int",	0);
	create_insn	(x=0X80524914);
	op_stkvar	(x,	1);
	create_insn	(0X80524924);
	set_cmt	(0X80524932,	"int",	0);
	set_cmt	(0X80524936,	"int",	0);
	create_oword	(0X80524940);
	create_oword	(0X80524950);
	create_oword	(0X80524960);
	create_oword	(0X80524970);
	create_oword	(0X80524980);
	create_oword	(0X80524990);
	create_oword	(0X805249A0);
	create_oword	(0X805249B0);
	create_oword	(0X805249C0);
	create_oword	(0X805249D0);
	create_oword	(0X805249E0);
	create_oword	(0X805249F0);
	create_oword	(0X80524A00);
	create_oword	(0X80524A10);
	create_insn	(0X80524A20);
	create_insn	(x=0X80524A2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80524A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A3E);
	op_hex		(x,	1);
	create_insn	(x=0X80524A42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A4C);
	op_stkvar	(x,	1);
	set_cmt	(0X80524A50,	"int",	0);
	set_cmt	(0X80524A52,	"int",	0);
	create_insn	(x=0X80524A5A);
	op_hex		(x,	1);
	create_insn	(x=0X80524A5E);
	op_hex		(x,	1);
	create_insn	(x=0X80524A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524A9A);
	op_hex		(x,	1);
	create_insn	(x=0X80524AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524AB2);
	op_stkvar	(x,	1);
	create_insn	(0X80524AB8);
	create_insn	(x=0X80524ABA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524ACE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524ADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524B0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524B12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524B1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524B1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524B22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524C32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524C6C);
	op_stkvar	(x,	1);
	create_insn	(0X80524C74);
	create_insn	(x=0X80524C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524C8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524CBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524CC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524CF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524CF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80524D0A);
	create_insn	(x=0X80524D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80524D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D34);
	op_hex		(x,	1);
	create_insn	(x=0X80524D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E74);
	op_stkvar	(x,	1);
	set_cmt	(0X80524E84,	"char *",	0);
	set_cmt	(0X80524E88,	"int",	0);
	set_cmt	(0X80524E8A,	"result",	0);
	create_insn	(x=0X80524E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524E9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524ED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524EFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524F9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80524FFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525002);
	op_stkvar	(x,	1);
	create_insn	(0X80525010);
	create_insn	(x=0X80525012);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525016);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525018);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052501A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525020);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525022);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525028);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052502A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525034);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052503C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525040);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525048);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052504E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525050);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80525062);
	op_hex		(x,	1);
	create_insn	(0X80525088);
	set_name	(0X80525088,	"celt_decoder_ctl");
	create_insn	(x=0X8052509A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805250A0);
	op_stkvar	(x,	1);
	set_cmt	(0X805250A4,	"int",	0);
	set_cmt	(0X805250AA,	"switch 10 cases",	0);
	set_cmt	(0X805250AE,	"switch jump",	0);
	set_cmt	(0X805250B2,	"jump table for switch statement",	0);
	create_byte	(0X805250B2);
	set_name	(0X805250B2,	"jpt_805250AE");
	create_byte	(0X805250B3);
	create_byte	(0X805250B4);
	create_byte	(0X805250B5);
	create_byte	(0X805250B6);
	create_byte	(0X805250B7);
	create_byte	(0X805250B8);
	create_byte	(0X805250B9);
	create_byte	(0X805250BA);
	create_byte	(0X805250BB);
	set_cmt	(0X805250BC,	"jumptable 805250AE case 0",	1);
	create_insn	(x=0X805250BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805250C0);
	op_stkvar	(x,	1);
	set_cmt	(0X805250D4,	"jumptable 805250AE default case",	1);
	create_insn	(0X805250D4);
	set_name	(0X805250D4,	"def_805250AE");
	set_cmt	(0X805250DE,	"switch jump",	0);
	set_cmt	(0X805250E2,	"jump table for switch statement",	0);
	create_byte	(0X805250E2);
	set_name	(0X805250E2,	"jpt_805250DE");
	create_byte	(0X805250E3);
	create_byte	(0X805250E4);
	create_byte	(0X805250E5);
	create_byte	(0X805250E6);
	create_byte	(0X805250E7);
	create_byte	(0X805250E8);
	set_cmt	(0X805250EA,	"jumptable 805250DE case 4027",	1);
	create_insn	(x=0X805250EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805250EE);
	op_stkvar	(x,	1);
	set_cmt	(0X805250F8,	"int",	0);
	set_cmt	(0X805250FA,	"int",	0);
	set_cmt	(0X80525104,	"jumptable 805250AE case 1",	1);
	create_insn	(x=0X80525104);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525108);
	op_stkvar	(x,	1);
	set_cmt	(0X80525118,	"jumptable 805250AE case 3",	1);
	create_insn	(x=0X80525118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052511C);
	op_stkvar	(x,	1);
	set_cmt	(0X80525134,	"jumptable 805250AE case 5",	1);
	create_insn	(x=0X80525134);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525138);
	op_stkvar	(x,	1);
	set_cmt	(0X8052514C,	"jumptable 805250AE case 8",	1);
	create_insn	(x=0X8052514C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525150);
	op_stkvar	(x,	1);
	set_cmt	(0X8052515C,	"jumptable 805250AE case 9",	1);
	create_insn	(x=0X8052515C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525160);
	op_stkvar	(x,	1);
	set_cmt	(0X80525168,	"jumptable 805250DE case 4028",	1);
	create_insn	(0X80525168);
	set_cmt	(0X80525216,	"jumptable 805250DE case 4031",	1);
	create_insn	(x=0X80525216);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052521A);
	op_stkvar	(x,	1);
	set_cmt	(0X80525224,	"jumptable 805250DE case 4033",	1);
	create_insn	(x=0X80525224);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525228);
	op_stkvar	(x,	1);
	create_insn	(0X80525236);
	set_cmt	(0X8052523A,	"jumptable 805250AE cases 2,4,6,7\njumptable 805250DE default case, cases 4029,4030,4032",	1);
	set_name	(0X8052523A,	"def_805250DE");
	create_insn	(0X80525248);
	create_insn	(0X8052526C);
	create_insn	(x=0X8052527C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525280);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525282);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052529E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805252B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805252BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805252C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805252C4);
	op_stkvar	(x,	1);
	create_insn	(0X805252C8);
	create_insn	(x=0X805252DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052530C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525312);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052531C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052531E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525324);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052532A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525336);
	op_stkvar	(x,	1);
	create_insn	(0X80525348);
	create_insn	(0X8052534E);
	create_insn	(x=0X80525352);
	op_hex		(x,	1);
	create_insn	(x=0X80525356);
	op_stkvar	(x,	1);
	create_insn	(x=0X805253F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805253FA);
	op_hex		(x,	1);
	create_insn	(x=0X80525418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052541E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525424);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525426);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052546E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525472);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525476);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052547A);
	op_stkvar	(x,	1);
	create_insn	(0X80525488);
	create_insn	(x=0X8052548C);
	op_hex		(x,	1);
	create_insn	(x=0X80525490);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525492);
	op_stkvar	(x,	1);
	create_insn	(x=0X805254AA);
	op_stkvar	(x,	1);
	create_insn	(0X805254D8);
	create_insn	(x=0X805254E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805254EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805254F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805254FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525502);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525504);
	op_hex		(x,	1);
	create_insn	(x=0X80525510);
	op_hex		(x,	1);
	create_insn	(x=0X80525514);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525520);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525528);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052553C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525556);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052555C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052556C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052557E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525586);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052558C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805255A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805255B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805255CA);
	op_stkvar	(x,	1);
	create_insn	(0X805255CE);
	create_insn	(x=0X805255D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805255DA);
	op_hex		(x,	1);
	create_insn	(x=0X805255F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805255F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805255FE);
	op_hex		(x,	1);
	create_insn	(x=0X80525612);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525624);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052567A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052567E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525682);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052568A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052568C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525692);
	op_stkvar	(x,	1);
	create_insn	(x=0X805256AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805256B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805256B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805256BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805256C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805256C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805256CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805256F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525750);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525756);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525758);
	op_stkvar	(x,	1);
	create_insn	(0X80525762);
	create_insn	(x=0X80525766);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525768);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525772);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525778);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525780);
	op_hex		(x,	1);
	create_insn	(x=0X80525788);
	op_stkvar	(x,	1);
	create_insn	(x=0X805257A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805257C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805257CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805257D0);
	op_stkvar	(x,	1);
	create_insn	(0X805257DC);
	create_insn	(x=0X805257E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525810);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525816);
	op_stkvar	(x,	1);
	create_insn	(0X80525832);
	create_insn	(x=0X8052583A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052583C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052585A);
	op_hex		(x,	1);
	create_insn	(x=0X80525896);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052589C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805258CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805258E4);
	op_hex		(x,	1);
	create_insn	(x=0X80525910);
	op_hex		(x,	1);
	create_insn	(x=0X80525932);
	op_stkvar	(x,	1);
	create_insn	(0X8052593C);
	create_insn	(x=0X8052595A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052595C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525968);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052596C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052596E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525970);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525974);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052598E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525998);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052599A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805259FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525A06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525A16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525A26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525A28);
	op_hex		(x,	1);
	create_insn	(x=0X80525A2C);
	op_hex		(x,	1);
	create_insn	(0X80525A36);
	create_insn	(x=0X80525A3A);
	op_hex		(x,	1);
	create_insn	(0X80525A82);
	create_insn	(0X80525AE2);
	create_insn	(x=0X80525AEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80525AF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525AFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B0C);
	op_hex		(x,	1);
	create_insn	(x=0X80525B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B1E);
	op_hex		(x,	1);
	create_insn	(x=0X80525B26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525BA2);
	op_stkvar	(x,	1);
	create_insn	(0X80525BC0);
	create_insn	(x=0X80525BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525BD2);
	op_hex		(x,	1);
	create_insn	(x=0X80525BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525BF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525BFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C3E);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_5(void) {
        auto x;
#define id x

	create_insn	(x=0X80525C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525CA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525CCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525CF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525CFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D3C);
	op_hex		(x,	1);
	create_insn	(x=0X80525D40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525D78);
	op_stkvar	(x,	1);
	create_insn	(0X80525D96);
	create_insn	(0X80525DF6);
	create_insn	(x=0X80525DFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525E6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525E7A);
	op_hex		(x,	1);
	create_insn	(x=0X80525E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525EBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525EBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80525ECE);
	op_hex		(x,	1);
	create_insn	(x=0X80525EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525EFA);
	op_hex		(x,	1);
	create_insn	(x=0X80525F22);
	op_stkvar	(x,	1);
	create_insn	(0X80525F2E);
	create_insn	(x=0X80525F32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525F3C);
	op_hex		(x,	1);
	create_insn	(x=0X80525F42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525F4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525F6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525F6C);
	op_stkvar	(x,	1);
	create_insn	(0X80525F74);
	create_insn	(x=0X80525F80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80525F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525F90);
	op_hex		(x,	1);
	create_insn	(x=0X80525F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525FAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525FCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80525FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526024);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052602A);
	op_hex		(x,	1);
	create_insn	(x=0X80526042);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526050);
	op_stkvar	(x,	1);
	create_insn	(0X80526054);
	create_insn	(x=0X80526064);
	op_hex		(x,	1);
	create_insn	(x=0X80526098);
	op_stkvar	(x,	1);
	create_insn	(x=0X805260D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805260DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805260EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805260F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052610E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526114);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526130);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526134);
	op_stkvar	(x,	1);
	create_insn	(0X80526138);
	create_insn	(x=0X8052613C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052613E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526142);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052614C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526154);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052615C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052616E);
	op_stkvar	(x,	1);
	create_insn	(0X80526172);
	create_insn	(x=0X8052617C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526192);
	op_stkvar	(x,	1);
	create_insn	(0X805261AA);
	create_insn	(x=0X805261AE);
	op_hex		(x,	1);
	create_insn	(x=0X805261B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805261B4);
	op_hex		(x,	1);
	create_insn	(x=0X805261D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805261E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052620C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526216);
	op_stkvar	(x,	1);
	create_insn	(0X8052623C);
	create_insn	(x=0X8052624C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052627E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526284);
	op_hex		(x,	1);
	create_insn	(x=0X80526296);
	op_stkvar	(x,	1);
	create_insn	(x=0X805262A0);
	op_hex		(x,	1);
	create_insn	(x=0X805262E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805262EC);
	op_hex		(x,	1);
	create_insn	(0X80526322);
	create_insn	(x=0X80526326);
	op_hex		(x,	1);
	create_insn	(x=0X80526366);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052637C);
	create_insn	(x=0X8052637E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80526384);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805263C0);
	create_insn	(x=0X805263C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805263F0);
	create_insn	(0X8052641C);
	create_insn	(x=0X80526438);
	op_hex		(x,	1);
	create_insn	(0X8052644E);
	create_insn	(x=0X80526474);
	op_hex		(x,	1);
	create_insn	(0X80526486);
	create_insn	(x=0X80526498);
	op_hex		(x,	1);
	create_insn	(0X805264C0);
	set_cmt	(0X805264C6,	"int",	0);
	set_cmt	(0X805264D0,	"int",	0);
	create_insn	(0X805264DA);
	create_insn	(x=0X805264DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805264E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8052650A,	"int",	0);
	set_cmt	(0X8052650C,	"int",	0);
	create_insn	(0X80526524);
	set_cmt	(0X8052652E,	"int",	0);
	set_cmt	(0X80526532,	"int",	0);
	create_insn	(0X8052654E);
	create_insn	(0X80526574);
	create_insn	(0X80526592);
	create_insn	(x=0X805265BA);
	op_hex		(x,	1);
	create_insn	(0X805265D2);
	create_insn	(0X805265D8);
	create_insn	(0X80526614);
	create_insn	(x=0X8052663C);
	op_hex		(x,	1);
	create_insn	(0X80526656);
	create_insn	(0X80526664);
	create_insn	(0X805266A4);
	create_insn	(x=0X805266CA);
	op_hex		(x,	1);
	create_insn	(0X805266E6);
	create_insn	(0X805266EE);
	create_insn	(x=0X80526716);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052671C);
	op_stkvar	(x,	1);
	set_cmt	(0X80526728,	"int",	0);
	set_cmt	(0X8052672A,	"int",	0);
	create_insn	(0X80526734);
	create_insn	(x=0X80526736);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80526744);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8052676A,	"int",	0);
	set_cmt	(0X8052676C,	"int",	0);
	create_insn	(0X805267BC);
	create_insn	(x=0X805267EA);
	op_hex		(x,	1);
	create_insn	(0X8052680C);
	create_insn	(x=0X80526810);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80526818);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80526842,	"int",	0);
	set_cmt	(0X80526844,	"int",	0);
	create_insn	(0X80526890);
	create_insn	(x=0X805268BE);
	op_hex		(x,	1);
	create_insn	(x=0X805268DC);
	op_stkvar	(x,	1);
	create_insn	(0X805268F0);
	create_insn	(0X80526916);
	create_insn	(x=0X80526938);
	op_stkvar	(x,	1);
	create_insn	(0X8052694E);
	create_insn	(0X80526960);
	create_insn	(0X80526988);
	create_insn	(0X805269A8);
	create_insn	(0X805269E0);
	create_insn	(x=0X80526A64);
	op_hex		(x,	1);
	create_insn	(0X80526B06);
	create_insn	(0X80526B24);
	create_insn	(x=0X80526B7A);
	op_hex		(x,	1);
	create_insn	(0X80526BB0);
	create_insn	(0X80526C22);
	create_insn	(x=0X80526C3E);
	op_hex		(x,	1);
	create_insn	(0X80526CD4);
	create_insn	(0X80526D5A);
	create_insn	(0X80526D80);
	create_insn	(0X80526DEC);
	create_insn	(x=0X80526DF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526DF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80526DFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80526E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E3C);
	op_hex		(x,	1);
	create_insn	(x=0X80526E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E58);
	op_hex		(x,	1);
	create_insn	(x=0X80526E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E8E);
	op_hex		(x,	1);
	create_insn	(x=0X80526E96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526EA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526EAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526EB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526EFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526F7C);
	op_stkvar	(x,	1);
	create_insn	(0X80526FAE);
	create_insn	(x=0X80526FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526FBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526FBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526FC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526FCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526FCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80526FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527012);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527046);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052704C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527054);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527058);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052705E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527064);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527070);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527074);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527076);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527078);
	op_stkvar	(x,	1);
	create_insn	(x=0X805270B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805270C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805270C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805270DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805270EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805270FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052711E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527126);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527128);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527130);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527136);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052713A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527144);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527146);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052714E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527152);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052715C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052715E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052718A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805271BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805271C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805271CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805271D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805271DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805271DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805271EE);
	create_insn	(x=0X805271FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052722A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527232);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052723A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052723E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527244);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527248);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527250);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527254);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052725E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527264);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527266);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527268);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052726A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052726E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527292);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052729A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805272FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527310);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527312);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527318);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527324);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052733C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527340);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527346);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527348);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527352);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527358);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052735A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527388);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052738E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527394);
	op_stkvar	(x,	1);
	create_insn	(x=0X805273AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805273B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805273BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805273C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805273DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805273EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805273F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527400);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527406);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527410);
	op_stkvar	(x,	1);
	create_insn	(0X8052741C);
	create_insn	(x=0X80527422);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527424);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527438);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052749A);
	op_stkvar	(x,	1);
	create_insn	(0X805274A8);
	set_name	(0X805274A8,	"opus_custom_mode_create");
	create_insn	(x=0X805274B6);
	op_hex		(x,	1);
	create_insn	(x=0X805274C0);
	op_hex		(x,	1);
	create_insn	(x=0X805274D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805274DA);
	op_hex		(x,	1);
	create_insn	(0X805274F0);
	create_insn	(0X80527512);
	create_insn	(0X80527528);
	create_insn	(x=0X8052752C);
	op_hex		(x,	1);
	create_insn	(0X805275AC);
	create_insn	(0X805275B2);
	create_insn	(x=0X805275B6);
	op_hex		(x,	1);
	create_insn	(x=0X8052765E);
	op_stkvar	(x,	1);
	create_insn	(0X80527678);
	create_insn	(x=0X8052767C);
	op_hex		(x,	1);
	create_insn	(x=0X805276F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527710);
	op_stkvar	(x,	1);
	create_insn	(0X8052772E);
	create_insn	(x=0X80527732);
	op_hex		(x,	1);
	create_insn	(x=0X805277C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805277D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805277E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805277FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527804);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527808);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052781C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527834);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052783C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527844);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527848);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527852);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527870);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527878);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527880);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527882);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527888);
	op_stkvar	(x,	1);
	create_insn	(0X8052791A);
	create_insn	(x=0X80527926);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527934);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527936);
	op_hex		(x,	1);
	create_insn	(x=0X80527940);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527942);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527946);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527948);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052794A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527950);
	op_hex		(x,	1);
	create_insn	(x=0X80527954);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052795A);
	op_hex		(x,	1);
	create_insn	(x=0X80527962);
	op_hex		(x,	1);
	create_insn	(x=0X80527986);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805279FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A8A);
	op_hex		(x,	1);
	create_insn	(x=0X80527A92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527A9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AD2);
	op_hex		(x,	1);
	create_insn	(x=0X80527ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527AF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B5A);
	op_stkvar	(x,	1);
	create_insn	(0X80527B62);
	create_insn	(x=0X80527B6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527B7C);
	op_hex		(x,	1);
	create_insn	(0X80527B82);
	create_insn	(0X80527BA2);
	create_insn	(x=0X80527BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527BFA);
	op_hex		(x,	1);
	create_insn	(0X80527C4E);
	create_insn	(x=0X80527C5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80527C64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80527C7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527C80);
	op_hex		(x,	1);
	create_insn	(x=0X80527C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527C90);
	op_hex		(x,	1);
	create_insn	(x=0X80527C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527CA2);
	op_hex		(x,	1);
	create_insn	(x=0X80527CA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527CAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527CBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527CD4);
	op_hex		(x,	1);
	create_insn	(x=0X80527CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527D26);
	op_hex		(x,	1);
	create_insn	(x=0X80527D2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527D62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527D6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527D6E);
	op_stkvar	(x,	1);
	create_insn	(0X80527D82);
	create_insn	(0X80527D88);
	create_insn	(x=0X80527D8C);
	op_hex		(x,	1);
	create_insn	(x=0X80527D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527DAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527E2C);
	op_stkvar	(x,	1);
	create_insn	(0X80527E3C);
	create_insn	(0X80527E42);
	create_insn	(x=0X80527E46);
	op_hex		(x,	1);
	create_insn	(x=0X80527E4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527E6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527E86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527E8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527EB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527EC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527F00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527F02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527F06);
	op_stkvar	(x,	1);
	create_insn	(0X80527F18);
	create_insn	(x=0X80527F56);
	op_stkvar	(x,	1);
	create_insn	(0X80527F86);
	create_insn	(x=0X80527F96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527FCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527FEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80527FFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528006);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052800A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052800E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528020);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528022);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052802C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528038);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528046);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528058);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528064);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528074);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528080);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528088);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528096);
	op_stkvar	(x,	1);
	create_insn	(0X805280B0);
	create_insn	(x=0X80528108);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052810C);
	op_stkvar	(x,	1);
	create_insn	(0X80528114);
	create_insn	(x=0X80528118);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528122);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528124);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052812A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528130);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528134);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528138);
	op_stkvar	(x,	1);
	create_insn	(0X8052813E);
	create_insn	(x=0X80528172);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528174);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528176);
	op_hex		(x,	1);
	create_insn	(x=0X8052817A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052817C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528182);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528184);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528186);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052818A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528190);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528198);
	op_stkvar	(x,	1);
	create_insn	(x=0X805281A0);
	op_stkvar	(x,	1);
	create_insn	(0X805281D6);
	create_insn	(x=0X805281F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805281F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805281FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80528220);
	create_insn	(x=0X8052822A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052822E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528234);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052824E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528258);
	op_hex		(x,	1);
	create_insn	(x=0X80528262);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528290);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282E0);
	op_stkvar	(x,	1);
	create_insn	(0X805282E4);
	create_insn	(x=0X805282E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805282F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528314);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052831C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052832A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528366);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052836C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052839C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283B8);
	op_stkvar	(x,	1);
	create_insn	(0X805283BE);
	create_insn	(x=0X805283C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805283E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052840A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528410);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052841A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052845A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528460);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528490);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528492);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528494);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052849A);
	op_stkvar	(x,	1);
	create_insn	(0X805284A0);
	create_oword	(0X805284B0);
	create_insn	(0X805284C0);
	create_insn	(x=0X805284CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805284D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805284DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805284E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805284EA);
	op_hex		(x,	1);
	create_insn	(x=0X805284EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805284F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805284FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528506);
	op_hex		(x,	1);
	create_insn	(x=0X8052850C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052852C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052853C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052853E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528544);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052855A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528560);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528566);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052856C);
	op_hex		(x,	1);
	create_insn	(x=0X8052858C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805285B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805285BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805285C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805285E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805285EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805285F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805285FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528606);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052862C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528630);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528632);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528634);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528636);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528656);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052865C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528660);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528668);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528672);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052867C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052867E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528680);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528682);
	op_hex		(x,	1);
	create_insn	(x=0X80528686);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528688);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528690);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528696);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528698);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052869C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805286B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805286B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805286BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805286C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805286C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805286CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805286DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805286DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805286E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528728);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528736);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528738);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528744);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528746);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528754);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052875C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052875E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052877E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528780);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528788);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528796);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052879A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052879E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805287D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805287DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528804);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528808);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528834);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528854);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528862);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528874);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528880);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528888);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528890);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052889E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805288A6);
	op_stkvar	(x,	1);
	create_insn	(0X805288B6);
	create_insn	(x=0X805288BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805288C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805288C6);
	op_stkvar	(x,	1);
	create_insn	(0X805288DC);
	create_insn	(x=0X805288E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805288E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805288E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805288EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805288F2);
	op_stkvar	(x,	1);
	create_insn	(0X805288FE);
	create_insn	(x=0X80528906);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052892C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528932);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528944);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052894E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528968);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528976);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052899A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805289A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805289B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805289BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805289D4);
	op_stkvar	(x,	1);
	create_insn	(0X805289E0);
	create_insn	(x=0X805289E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528A06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528A1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528A2C);
	op_stkvar	(x,	1);
	create_insn	(0X80528A6A);
	create_insn	(x=0X80528A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528A88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528A92);
	op_stkvar	(x,	1);
	create_insn	(0X80528ABC);
	create_insn	(0X80528ADA);
	create_insn	(0X80528B2A);
	create_insn	(0X80528B74);
	create_insn	(x=0X80528B7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528B82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528B84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528B8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528B92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528B96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528B9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BA0);
	op_stkvar	(x,	1);
	create_insn	(0X80528BA8);
	create_insn	(0X80528BAE);
	create_insn	(x=0X80528BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BCC);
	op_stkvar	(x,	1);
	set_cmt	(0X80528BD6,	"int",	0);
	set_cmt	(0X80528BD8,	"int",	0);
	create_insn	(x=0X80528BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C12);
	op_hex		(x,	1);
	create_insn	(x=0X80528C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C3A);
	op_stkvar	(x,	1);
	create_insn	(0X80528C3E);
	create_insn	(x=0X80528C4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528C9A);
	op_stkvar	(x,	1);
	create_insn	(0X80528CBC);
	create_insn	(x=0X80528CCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528CCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528CDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528CEE);
	op_hex		(x,	1);
	create_insn	(x=0X80528CF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528CFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D18);
	op_hex		(x,	1);
	set_cmt	(0X80528D20,	"a3",	0);
	set_cmt	(0X80528D24,	"a2",	0);
	create_insn	(x=0X80528D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D30);
	op_stkvar	(x,	1);
	set_cmt	(0X80528D32,	"a1",	0);
	create_insn	(x=0X80528D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DD4);
	op_stkvar	(x,	1);
	create_insn	(0X80528DE0);
	create_insn	(x=0X80528DE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528DEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528DF8);
	op_stkvar	(x,	1);
	set_cmt	(0X80528DFA,	"a2",	0);
	create_insn	(x=0X80528DFA);
	op_stkvar	(x,	1);
	set_cmt	(0X80528DFC,	"a3",	0);
	set_cmt	(0X80528E00,	"a1",	0);
	create_insn	(x=0X80528E00);
	op_stkvar	(x,	1);
	set_cmt	(0X80528E08,	"a2",	0);
	create_insn	(x=0X80528E08);
	op_stkvar	(x,	1);
	set_cmt	(0X80528E0A,	"a3",	0);
	set_cmt	(0X80528E0E,	"a1",	0);
	create_insn	(x=0X80528E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E3E);
	op_stkvar	(x,	1);
	set_cmt	(0X80528E42,	"a1",	0);
	create_insn	(x=0X80528E46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E50);
	op_stkvar	(x,	1);
	set_cmt	(0X80528E52,	"a3",	0);
	create_insn	(x=0X80528E64);
	op_stkvar	(x,	1);
	set_cmt	(0X80528E6E,	"a2",	0);
	create_insn	(x=0X80528E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528ECE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528ED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528EFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528F0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528F16);
	op_stkvar	(x,	1);
	set_cmt	(0X80528F1E,	"a1",	0);
	create_insn	(x=0X80528F1E);
	op_stkvar	(x,	1);
	set_cmt	(0X80528F20,	"a3",	0);
	create_insn	(x=0X80528F20);
	op_stkvar	(x,	1);
	set_cmt	(0X80528F2A,	"a2",	0);
	create_insn	(x=0X80528F2C);
	op_stkvar	(x,	1);
	set_cmt	(0X80528F2E,	"a3",	0);
	set_cmt	(0X80528F32,	"a1",	0);
	create_insn	(x=0X80528F32);
	op_stkvar	(x,	1);
	set_cmt	(0X80528F3A,	"a2",	0);
	set_cmt	(0X80528F3C,	"a3",	0);
	set_cmt	(0X80528F40,	"a1",	0);
	create_insn	(x=0X80528F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528F46);
	op_stkvar	(x,	1);
	create_insn	(0X80528F4A);
	create_insn	(x=0X80528F52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528F5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528F62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528F86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528F88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80528FA0);
	create_insn	(x=0X80528FAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80528FFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80528FFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529006);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529008);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529014);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052901A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529020);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052902C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052902E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529030);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529038);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052903A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052903E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529056);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529064);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529066);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529076);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529082);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529086);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529088);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052908E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529090);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529092);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052909A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805290FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529106);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529118);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529130);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529156);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052915A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052917C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052917E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529180);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052918E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529196);
	op_stkvar	(x,	1);
	create_insn	(x=0X805291AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805291B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805291B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805291C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805291DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805291E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805291EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805291EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805291F8);
	create_insn	(x=0X80529202);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529206);
	op_stkvar	(x,	1);
	create_insn	(0X8052920E);
	create_insn	(x=0X80529212);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529216);
	op_stkvar	(x,	1);
	create_insn	(0X80529450);
	create_insn	(x=0X8052945C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052945E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529462);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529466);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052946C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052946E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529478);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052947A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529482);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529488);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052948E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529490);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052949A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052949C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805294A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805294AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805294BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805294BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805294D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805294D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805294E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805294FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805294FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529500);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529502);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529514);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052951A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529542);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529566);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529570);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529582);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529588);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529592);
	op_hex		(x,	1);
	create_insn	(0X8052959E);
	create_insn	(0X805295AE);
	create_insn	(0X805295B4);
	create_insn	(0X805295BC);
	create_insn	(x=0X805295DC);
	op_stkvar	(x,	1);
	create_insn	(0X80529628);
	create_insn	(0X80529630);
	create_insn	(x=0X80529640);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529646);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529650);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529660);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529676);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529698);
	op_stkvar	(x,	1);
	create_insn	(x=0X805296AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805296AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805296B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805296B8);
	op_stkvar	(x,	1);
	create_insn	(0X805296C8);
	create_insn	(x=0X805296E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529708);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052971A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052971C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052971E);
	op_stkvar	(x,	1);
	create_insn	(0X80529728);
	create_insn	(0X80529730);
	create_insn	(x=0X80529740);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052974C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529752);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529756);
	op_hex		(x,	1);
	create_insn	(x=0X8052975A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052975E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529764);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529768);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052976A);
	op_hex		(x,	1);
	create_insn	(x=0X8052976E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529772);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529778);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052977E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529786);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052978C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529792);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529798);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805297D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805297D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805297DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805297DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805297E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805297E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805297EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805297F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805297F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529806);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529808);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052980A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529816);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529818);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529822);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529826);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052983A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052984C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529852);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529864);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052986E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529876);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052987A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805298D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805298DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529966);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052996A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052996E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529970);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529974);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052998A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052998E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052999E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805299A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805299B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805299BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805299BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805299C4);
	create_insn	(x=0X805299EE);
	op_hex		(x,	1);
	create_insn	(0X80529A52);
	create_insn	(x=0X80529A5A);
	op_hex		(x,	1);
	create_insn	(x=0X80529A6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529AA0);
	op_stkvar	(x,	1);
	create_insn	(0X80529AB4);
	create_oword	(0X80529AD0);
	create_oword	(0X80529AE0);
	create_oword	(0X80529AF0);
	create_oword	(0X80529B00);
	create_oword	(0X80529B10);
	create_double	(0X80529B20);
	create_insn	(0X80529B30);
	create_insn	(x=0X80529B42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529B44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529B4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529B5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529B70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529B74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529B7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80529BA0);
	create_insn	(x=0X80529BA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BA8);
	op_hex		(x,	1);
	create_insn	(x=0X80529BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BC8);
	op_hex		(x,	1);
	create_insn	(x=0X80529BCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BE0);
	op_hex		(x,	1);
	create_insn	(x=0X80529BE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529BF2);
	op_hex		(x,	1);
	create_insn	(x=0X80529BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529CAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529CBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80529CBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529CD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529CDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529CF8);
	op_hex		(x,	1);
	create_insn	(x=0X80529D86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529D96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529DAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529DC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529DD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529ED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80529FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A002);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A014);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A020);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A02C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A036);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A044);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A056);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A06A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A07E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A080);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A094);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A09A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0EC);
	op_stkvar	(x,	1);
	create_insn	(0X8052A0F0);
	create_insn	(x=0X8052A0F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A0FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A100);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A102);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A108);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A10A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A112);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A120);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A130);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A14E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A15A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A164);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A172);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A184);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A1FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A202);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A204);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A206);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A20C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A212);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A21E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A236);
	op_stkvar	(x,	1);
	create_insn	(0X8052A24A);
	create_insn	(x=0X8052A278);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A284);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A288);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A28C);
	op_stkvar	(x,	1);
	create_insn	(0X8052A2AE);
	create_insn	(x=0X8052A2BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A2E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A2EE);
	op_stkvar	(x,	1);
	create_insn	(0X8052A316);
	create_insn	(x=0X8052A326);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A34A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A356);
	op_stkvar	(x,	1);
	create_insn	(0X8052A370);
	create_insn	(x=0X8052A380);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A3B0);
	op_stkvar	(x,	1);
	create_insn	(0X8052A3CA);
	create_insn	(x=0X8052A3DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A3FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A40A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A41A);
	op_stkvar	(x,	1);
	create_insn	(0X8052A428);
	create_insn	(x=0X8052A45A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A466);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A46A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A47E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A488);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A48A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A48E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A496);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4D2);
	op_hex		(x,	1);
	create_insn	(x=0X8052A4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A4FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A504);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A508);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A50E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A514);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A520);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A522);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A526);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A536);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A53A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A540);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A552);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A558);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A570);
	op_stkvar	(x,	1);
	set_cmt	(0X8052A57A,	"int",	0);
	set_cmt	(0X8052A582,	"int",	0);
	create_insn	(x=0X8052A588);
	op_stkvar	(x,	1);
	create_insn	(0X8052A58E);
	create_insn	(x=0X8052A590);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A596);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A5C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A5D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A5E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A5F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A5F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A5F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A600);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A602);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A620);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A62A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A62E);
	op_stkvar	(x,	1);
	create_insn	(0X8052A63C);
	create_insn	(x=0X8052A63E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A644);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A652);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A668);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A66E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A676);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A67A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A67E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A680);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A68E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A692);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A698);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A6AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A6B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A6C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A6C8);
	op_stkvar	(x,	1);
	set_cmt	(0X8052A6D2,	"int",	0);
	set_cmt	(0X8052A6DA,	"int",	0);
	create_insn	(0X8052A6E2);
	create_insn	(x=0X8052A6E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A6EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A714);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A72C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A73A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A746);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A74E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A752);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A756);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A764);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A76E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A774);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A776);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A778);
	op_stkvar	(x,	1);
	create_insn	(0X8052A782);
	create_insn	(x=0X8052A784);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A788);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A78A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A78E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A798);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A79E);
	op_stkvar	(x,	1);
	create_insn	(0X8052A7A6);
	create_insn	(x=0X8052A7A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A7F0);
	op_stkvar	(x,	1);
	set_cmt	(0X8052A7F8,	"int",	0);
	set_cmt	(0X8052A802,	"int",	0);
	create_insn	(x=0X8052A808);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A80C);
	op_stkvar	(x,	1);
	create_insn	(0X8052A818);
	create_insn	(x=0X8052A81A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052A84A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A85E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A86E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A870);
	op_hex		(x,	1);
	create_insn	(x=0X8052A8C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A8F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A922);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A930);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A934);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A938);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A93A);
	op_stkvar	(x,	1);
	create_insn	(0X8052A940);
	create_insn	(x=0X8052A96A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A988);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A9A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A9AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A9CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A9D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052A9F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AA0E);
	op_stkvar	(x,	1);
	set_cmt	(0X8052AA10,	"int",	0);
	create_insn	(x=0X8052AA1E);
	op_stkvar	(x,	1);
	create_insn	(0X8052AA48);
	create_insn	(x=0X8052AA5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AA5C);
	op_stkvar	(x,	1);
	set_cmt	(0X8052AA66,	"int",	0);
	create_insn	(x=0X8052AA78);
	op_stkvar	(x,	1);
	create_oword	(0X8052AA80);
	create_insn	(0X8052AA90);
	create_insn	(x=0X8052AA92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052AA98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052AAC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AAC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AB2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AB3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AB3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AB42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AB62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AB6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ABA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ABC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ABC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ABD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ABD4);
	op_hex		(x,	1);
	create_insn	(x=0X8052ABD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ABEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ABF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AC86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052ACA4);
	create_insn	(x=0X8052ACAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052ACB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052ACBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ACC2);
	op_hex		(x,	1);
	create_insn	(x=0X8052ACC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ACCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ACCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ACD8);
	op_hex		(x,	1);
	create_insn	(x=0X8052ACE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ACE6);
	op_hex		(x,	1);
	create_insn	(x=0X8052AD0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AD1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AD20);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AD26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AD2A);
	op_stkvar	(x,	1);
	create_insn	(0X8052AD3C);
	create_insn	(x=0X8052AD68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AD6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AD72);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AD76);
	op_stkvar	(x,	1);
	create_insn	(0X8052AD88);
	create_insn	(x=0X8052AD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ADA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ADA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ADAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ADB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ADC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ADD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AE10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AE30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AE32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AE36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AE38);
	op_stkvar	(x,	1);
	create_insn	(0X8052AE40);
	create_insn	(0X8052AEAC);
	create_insn	(x=0X8052AEB0);
	op_hex		(x,	1);
	create_insn	(x=0X8052AEC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AEF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AEFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF66);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF76);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AF7C);
	op_stkvar	(x,	1);
	create_insn	(0X8052AF84);
	create_insn	(x=0X8052AFB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AFB8);
	op_stkvar	(x,	1);
	set_cmt	(0X8052AFBE,	"int",	0);
	create_insn	(x=0X8052AFBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AFC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052AFDE);
	set_cmt	(0X8052AFE4,	"int",	0);
	create_insn	(x=0X8052AFE4);
	op_stkvar	(x,	1);
	create_insn	(0X8052AFEC);
	create_insn	(x=0X8052AFEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052AFF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052AFFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052B024);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B048);
	op_stkvar	(x,	1);
	create_insn	(0X8052B04C);
	create_insn	(x=0X8052B05E);
	op_stkvar	(x,	1);
	create_insn	(0X8052B078);
	create_insn	(x=0X8052B0A6);
	op_stkvar	(x,	1);
	create_insn	(0X8052B0C0);
	create_insn	(x=0X8052B0CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B0CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B0DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B0E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052B0E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052B104);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B132);
	op_stkvar	(x,	1);
	create_insn	(0X8052B15E);
	create_insn	(x=0X8052B174);
	op_stkvar	(x,	1);
	set_cmt	(0X8052B178,	"int",	0);
	set_cmt	(0X8052B17A,	"int",	0);
	create_insn	(x=0X8052B180);
	op_stkvar	(x,	1);
	create_insn	(0X8052B188);
	create_insn	(x=0X8052B18A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052B190);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052B1BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B1C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B1CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B1DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B1F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B204);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B208);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B20E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B21C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B222);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B226);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B234);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B236);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B240);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B248);
	op_hex		(x,	1);
	create_insn	(x=0X8052B254);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B256);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B25C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B262);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B264);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B266);
	op_hex		(x,	1);
	create_insn	(x=0X8052B26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B274);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B27A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B27E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B280);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B282);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B288);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B28A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B28E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B29C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B29E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B306);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B310);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B316);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B31E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B320);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B328);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B32A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B35E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B360);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B368);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B3F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B466);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B468);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B46A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B476);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B478);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B486);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B4F6);
	op_stkvar	(x,	1);
	create_insn	(0X8052B502);
	create_insn	(x=0X8052B504);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B508);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B542);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B544);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B54E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B550);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B556);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B55C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B55E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B56A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B576);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B582);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B58A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B58C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B590);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B594);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B596);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B598);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B626);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B628);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B62A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B630);
	op_stkvar	(x,	1);
	create_insn	(0X8052B638);
	create_insn	(0X8052B676);
	create_insn	(x=0X8052B678);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B6FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B700);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B704);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B706);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B70C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B79E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B7A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B7A4);
	op_stkvar	(x,	1);
	create_insn	(0X8052B7AA);
	create_insn	(x=0X8052B7E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B7F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B82E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B830);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B83A);
	op_stkvar	(x,	1);
	create_insn	(0X8052B878);
	create_insn	(0X8052B880);
	create_insn	(x=0X8052B88C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052B898);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B89E);
	op_hex		(x,	1);
	create_insn	(x=0X8052B8A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B8A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B8AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B8C4);
	op_hex		(x,	1);
	create_insn	(x=0X8052B8E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B8E4);
	op_stkvar	(x,	1);
	create_insn	(0X8052B922);
	create_insn	(x=0X8052B964);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B972);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B98A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B994);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B996);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B998);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B9A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052B9AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052B9BE);
	set_cmt	(0X8052B9C4,	"int",	0);
	set_cmt	(0X8052B9C6,	"int",	0);
	create_insn	(0X8052B9CE);
	create_insn	(x=0X8052B9D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052B9DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052BA20);
	create_insn	(0X8052BA40);
	create_insn	(0X8052BA7E);
	create_insn	(0X8052BA9A);
	create_insn	(0X8052BA9E);
	create_insn	(x=0X8052BAA2);
	op_hex		(x,	1);
	create_insn	(x=0X8052BAEC);
	op_hex		(x,	1);
	create_insn	(0X8052BB32);
	create_insn	(x=0X8052BB36);
	op_hex		(x,	1);
	create_insn	(0X8052BBB0);
	create_insn	(0X8052BBCE);
	create_insn	(0X8052BBDC);
	create_insn	(x=0X8052BBE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052BBE6);
	op_hex		(x,	1);
	create_insn	(0X8052BC7C);
	create_insn	(x=0X8052BC80);
	op_hex		(x,	1);
	create_insn	(0X8052BCCA);
	create_insn	(x=0X8052BCCE);
	op_hex		(x,	1);
	create_insn	(0X8052BDBA);
	create_insn	(0X8052BE60);
	set_name	(0X8052BE60,	"silk_Get_Decoder_Size");
	create_insn	(0X8052BE6A);
	set_name	(0X8052BE6A,	"silk_InitDecoder");
	create_insn	(0X8052BEB0);
	create_insn	(x=0X8052BEC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052BECC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052BED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052BEDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052BF04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052BF16);
	op_stkvar	(x,	1);
	create_insn	(0X8052BF26);
	create_insn	(0X8052BF4C);
	create_insn	(x=0X8052BF4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052BF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052BF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052BF5E);
	op_stkvar	(x,	1);
	create_insn	(0X8052BF96);
	create_insn	(0X8052BFA4);
	create_insn	(0X8052BFAA);
	create_insn	(x=0X8052BFDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052BFF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052BFFE);
	op_stkvar	(x,	1);
	set_cmt	(0X8052C02E,	"char *",	0);
	set_cmt	(0X8052C032,	"result",	0);
	set_cmt	(0X8052C034,	"int",	0);
	create_insn	(x=0X8052C03C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C046);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C04A);
	op_stkvar	(x,	1);
	create_insn	(0X8052C04E);
	create_insn	(0X8052C06E);
	create_insn	(x=0X8052C084);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C08E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C098);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C0B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C0C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C0EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C0F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C0F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C114);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052C11A);
	create_insn	(x=0X8052C12A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C142);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C160);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C168);
	op_stkvar	(x,	1);
	create_insn	(0X8052C17A);
	create_insn	(x=0X8052C17E);
	op_hex		(x,	1);
	create_insn	(0X8052C1A4);
	create_insn	(x=0X8052C1A8);
	op_hex		(x,	1);
	create_insn	(x=0X8052C1B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C1C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C1C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C1CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C1DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C1FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C1FE);
	op_stkvar	(x,	1);
	create_insn	(0X8052C212);
	create_insn	(x=0X8052C21A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C220);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C222);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C23E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C242);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C24A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C258);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C26C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C272);
	op_hex		(x,	1);
	create_insn	(x=0X8052C286);
	op_stkvar	(x,	1);
	create_insn	(0X8052C28E);
	create_insn	(x=0X8052C292);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C2A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C2AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C2AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C2B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C2CE);
	op_stkvar	(x,	1);
	create_insn	(0X8052C2DC);
	create_insn	(x=0X8052C308);
	op_stkvar	(x,	1);
	create_insn	(0X8052C328);
	create_insn	(x=0X8052C352);
	op_stkvar	(x,	1);
	create_insn	(0X8052C36C);
	create_insn	(0X8052C370);
	create_insn	(x=0X8052C38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C38E);
	op_stkvar	(x,	1);
	create_insn	(0X8052C3AC);
	create_insn	(x=0X8052C3B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C3BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C3BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C3C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C3CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C3EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C3F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C404);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C41A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C41E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C420);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C422);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C424);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C42E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C436);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C442);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C456);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C45A);
	op_stkvar	(x,	1);
	create_insn	(0X8052C460);
	create_insn	(x=0X8052C462);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C46A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C470);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C472);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C474);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C49E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C4C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C4D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C4EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C4F2);
	op_stkvar	(x,	1);
	create_insn	(0X8052C516);
	create_insn	(x=0X8052C52A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C536);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C540);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C566);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C572);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C578);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C584);
	op_stkvar	(x,	1);
	create_insn	(0X8052C58C);
	create_insn	(x=0X8052C590);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C594);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5F0);
	op_stkvar	(x,	1);
	create_insn	(0X8052C5F8);
	create_insn	(x=0X8052C5FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C5FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C602);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C606);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C60E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C62C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C634);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C646);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C662);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C666);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C66A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C66C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8052C674,	"int",	0);
	set_cmt	(0X8052C67A,	"result",	0);
	set_cmt	(0X8052C67C,	"char *",	0);
	create_insn	(x=0X8052C682);
	op_stkvar	(x,	1);
	set_cmt	(0X8052C684,	"int",	0);
	set_cmt	(0X8052C686,	"char *",	0);
	set_cmt	(0X8052C68A,	"result",	0);
	create_insn	(x=0X8052C690);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C694);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C698);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C69A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C69C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C6A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C6A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C6B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C6BE);
	op_stkvar	(x,	1);
	set_cmt	(0X8052C6C2,	"int",	0);
	set_cmt	(0X8052C6C6,	"int",	0);
	create_insn	(x=0X8052C6CC);
	op_stkvar	(x,	1);
	set_cmt	(0X8052C6CE,	"int",	0);
	create_insn	(x=0X8052C6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C6DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C6E0);
	op_hex		(x,	1);
	create_insn	(x=0X8052C6F4);
	op_hex		(x,	1);
	create_insn	(x=0X8052C70A);
	op_stkvar	(x,	1);
	set_cmt	(0X8052C722,	"int",	0);
	set_cmt	(0X8052C724,	"result",	0);
	set_cmt	(0X8052C728,	"char *",	0);
	create_insn	(x=0X8052C734);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C738);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C746);
	op_stkvar	(x,	1);
	create_insn	(0X8052C74A);
	create_insn	(x=0X8052C766);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C76E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C772);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C782);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C790);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C7C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C7C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C7C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C7D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C7DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C7EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C7F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C806);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C808);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C80A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C816);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C824);
	op_hex		(x,	1);
	create_insn	(x=0X8052C834);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C83A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C83C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C83E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C846);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C882);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C884);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C89E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C8A0);
	op_stkvar	(x,	1);
	create_insn	(0X8052C8A6);
	create_insn	(0X8052C8C0);
	create_insn	(x=0X8052C8CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C8D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052C8DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C8E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C8E6);
	op_hex		(x,	1);
	create_insn	(x=0X8052C8FE);
	op_stkvar	(x,	1);
	create_insn	(0X8052C90E);
	create_insn	(x=0X8052C922);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C928);
	op_hex		(x,	1);
	create_insn	(x=0X8052C936);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C93C);
	op_hex		(x,	1);
	create_insn	(x=0X8052C942);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C95E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C966);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C978);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C97A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C98A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052C996);
	op_stkvar	(x,	1);
	create_insn	(0X8052C9A2);
	create_insn	(x=0X8052C9AA);
	op_stkvar	(x,	1);
	set_cmt	(0X8052C9C0,	"char *",	0);
	set_cmt	(0X8052C9C4,	"int",	0);
	set_cmt	(0X8052C9C6,	"result",	0);
	set_cmt	(0X8052C9D0,	"result",	0);
	set_cmt	(0X8052C9D4,	"int",	0);
	set_cmt	(0X8052C9D6,	"char *",	0);
	create_insn	(x=0X8052C9F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CA0A);
	op_stkvar	(x,	1);
	create_insn	(0X8052CA1C);
	create_insn	(x=0X8052CA26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CA3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CA44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CA50);
	op_hex		(x,	1);
	create_insn	(x=0X8052CA64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CA6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CA82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CA88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CA98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CAA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CAC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CAC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CB0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CB12);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CB26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CB30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052CB36);
	create_insn	(0X8052CB7A);
	create_insn	(x=0X8052CB82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CB88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052CBA0);
	create_insn	(x=0X8052CBBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CBC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CBDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CBE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CC20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CC28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CC42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CC48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CC94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CC9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CCAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CCCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CCD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052CCE0);
	create_insn	(x=0X8052CCFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CD12);
	op_stkvar	(x,	1);
	create_insn	(0X8052CD42);
	create_insn	(0X8052CD5E);
	set_cmt	(0X8052CD62,	"char *",	0);
	set_cmt	(0X8052CD64,	"int",	0);
	set_cmt	(0X8052CD66,	"result",	0);
	create_insn	(x=0X8052CD6E);
	op_hex		(x,	1);
	create_insn	(x=0X8052CD7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CD7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CDC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CDF2);
	op_stkvar	(x,	1);
	set_cmt	(0X8052CDFE,	"result",	0);
	set_cmt	(0X8052CE02,	"int",	0);
	set_cmt	(0X8052CE04,	"char *",	0);
	create_insn	(x=0X8052CE04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CE48);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CE5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CEBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052CED6);
	create_insn	(0X8052CF0C);
	create_insn	(x=0X8052CF14);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CF18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CF1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CF20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CF24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CF28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CF34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CF38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CF3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052CFA4);
	create_insn	(0X8052CFCC);
	create_insn	(x=0X8052CFD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CFDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052CFE4);
	op_hex		(x,	1);
	create_insn	(x=0X8052CFF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052CFFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D000);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D012);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D018);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D01C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D024);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D028);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D02E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D030);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D038);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D03C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D07C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D086);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D08A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D092);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D094);
	op_stkvar	(x,	1);
	create_insn	(0X8052D09E);
	create_insn	(x=0X8052D0C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D0C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D0CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D0D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D0DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D0EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052D2F4);
	op_stkvar	(x,	1);
	create_insn	(0X8052D308);
	create_insn	(0X8052D344);
	create_insn	(x=0X8052D37A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D37E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D382);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D388);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D38C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D394);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D398);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D39C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D3B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D3B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D3BC);
	op_hex		(x,	1);
	create_insn	(x=0X8052D3C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D3C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D3EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D3F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052D402);
	create_insn	(x=0X8052D406);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052D580);
	create_insn	(0X8052D5A6);
	create_insn	(0X8052D600);
	create_insn	(0X8052D618);
	create_insn	(0X8052D63C);
	create_insn	(0X8052D710);
	create_insn	(0X8052D74E);
	create_insn	(0X8052D776);
	create_insn	(x=0X8052D7B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D7BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052D7C8);
	create_insn	(0X8052D7D2);
	create_insn	(x=0X8052D806);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052D80E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8052D836,	"int",	0);
	create_insn	(0X8052D860);
	create_insn	(x=0X8052D878);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052D882);
	create_insn	(0X8052D88C);
	create_insn	(0X8052D894);
	create_insn	(0X8052D8A8);
	create_insn	(x=0X8052D8BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052D8C4);
	create_insn	(x=0X8052D8D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052D8DC);
	create_insn	(x=0X8052D8E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052D8F2);
	create_insn	(x=0X8052D900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052D90A);
	create_insn	(x=0X8052D918);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8052D92A,	"int",	0);
	set_cmt	(0X8052D92C,	"int",	0);
	create_insn	(0X8052D976);
	set_cmt	(0X8052D992,	"result",	0);
	set_cmt	(0X8052D996,	"int",	0);
	set_cmt	(0X8052D998,	"char *",	0);
	create_insn	(0X8052D9D6);
	create_insn	(0X8052D9FC);
	create_insn	(0X8052DA22);
	set_cmt	(0X8052DA26,	"char *",	0);
	set_cmt	(0X8052DA28,	"int",	0);
	set_cmt	(0X8052DA2A,	"result",	0);
	set_cmt	(0X8052DA34,	"char *",	0);
	set_cmt	(0X8052DA3C,	"result",	0);
	set_cmt	(0X8052DA40,	"int",	0);
	set_cmt	(0X8052DA4E,	"char *",	0);
	set_cmt	(0X8052DA52,	"int",	0);
	set_cmt	(0X8052DA54,	"result",	0);
	create_insn	(0X8052DA64);
	create_insn	(x=0X8052DA70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052DA84);
	op_hex		(x,	1);
	create_insn	(x=0X8052DA88);
	op_stkvar	(x,	1);
	set_cmt	(0X8052DA8E,	"char *",	0);
	create_insn	(x=0X8052DA96);
	op_stkvar	(x,	1);
	set_cmt	(0X8052DA9C,	"result",	0);
	set_cmt	(0X8052DA9E,	"int",	0);
	create_insn	(x=0X8052DAAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DAB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052DABE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052DAC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DAC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DAD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DAE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DAEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DB14);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DB1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DB44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DB46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DB4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DB5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DB8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DBB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DBC4);
	op_stkvar	(x,	1);
	set_cmt	(0X8052DBCE,	"char *",	0);
	set_cmt	(0X8052DBD2,	"result",	0);
	set_cmt	(0X8052DBD4,	"int",	0);
	create_insn	(x=0X8052DBDC);
	op_stkvar	(x,	1);
	set_cmt	(0X8052DBE4,	"result",	0);
	create_insn	(x=0X8052DBE4);
	op_stkvar	(x,	1);
	set_cmt	(0X8052DBE6,	"char *",	0);
	set_cmt	(0X8052DBEA,	"int",	0);
	create_insn	(x=0X8052DBF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DBF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052DC04);
	create_insn	(x=0X8052DC0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052DC14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052DC2C);
	op_hex		(x,	1);
	set_cmt	(0X8052DC30,	"char *",	0);
	set_cmt	(0X8052DC3E,	"int",	0);
	create_insn	(x=0X8052DC42);
	op_stkvar	(x,	1);
	set_cmt	(0X8052DC48,	"result",	0);
	create_insn	(x=0X8052DC4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC58);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DC92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DD28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DEA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DEAA);
	op_stkvar	(x,	1);
	create_insn	(0X8052DEB4);
	create_insn	(x=0X8052DEC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DEC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DEC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DED2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DEEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DF36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DF4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052DFA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E094);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E09E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E0A6);
	op_stkvar	(x,	1);
	create_insn	(0X8052E0B0);
	create_insn	(x=0X8052E12A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E214);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E21C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E224);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E22E);
	op_stkvar	(x,	1);
	set_cmt	(0X8052E230,	"char *",	0);
	set_cmt	(0X8052E234,	"int",	0);
	set_cmt	(0X8052E236,	"result",	0);
	create_insn	(x=0X8052E23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E23E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E24C);
	op_stkvar	(x,	1);
	set_cmt	(0X8052E24E,	"char *",	0);
	set_cmt	(0X8052E252,	"int",	0);
	set_cmt	(0X8052E254,	"result",	0);
	create_insn	(x=0X8052E254);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E25A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E25C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052E270);
	create_insn	(x=0X8052E278);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E28A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E294);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E29A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E2BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E2C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E360);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E37E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E3AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E3B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E3B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E3C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E3CA);
	op_stkvar	(x,	1);
	create_insn	(0X8052E3E0);
	create_insn	(0X8052E62E);
	create_insn	(x=0X8052E638);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E63C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E646);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E64A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E654);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E690);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E6B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052E6F0);
	create_insn	(0X8052E700);
	create_insn	(0X8052E70C);
	create_insn	(0X8052E714);
	create_insn	(x=0X8052E728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E750);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E776);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E792);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E7B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E7BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E7CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E812);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E838);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052E872);
	create_insn	(x=0X8052E888);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E8B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052E8D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052E908);
	create_insn	(x=0X8052E918);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052E940);
	set_cmt	(0X8052E962,	"result",	0);
	set_cmt	(0X8052E964,	"char *",	0);
	set_cmt	(0X8052E966,	"int",	0);
	set_cmt	(0X8052E972,	"result",	0);
	set_cmt	(0X8052E974,	"char *",	0);
	set_cmt	(0X8052E976,	"int",	0);
	create_insn	(x=0X8052E978);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E97E);
	op_stkvar	(x,	1);
	set_cmt	(0X8052E982,	"result",	0);
	set_cmt	(0X8052E984,	"int",	0);
	create_insn	(x=0X8052E986);
	op_stkvar	(x,	1);
	set_cmt	(0X8052E988,	"char *",	0);
	create_insn	(x=0X8052E98C);
	op_stkvar	(x,	1);
	set_cmt	(0X8052E992,	"char *",	0);
	set_cmt	(0X8052E996,	"result",	0);
	set_cmt	(0X8052E998,	"int",	0);
	create_insn	(x=0X8052E99A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E99C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9A2);
	op_stkvar	(x,	1);
	set_cmt	(0X8052E9A4,	"int",	0);
	set_cmt	(0X8052E9A8,	"int",	0);
	create_insn	(x=0X8052E9AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052E9F8);
	op_hex		(x,	1);
	create_insn	(x=0X8052E9FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EA1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EA2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EA3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EA4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EAD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EADA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EAEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EAF6);
	op_hex		(x,	1);
	create_insn	(x=0X8052EAFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EB16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EB18);
	op_hex		(x,	1);
	create_insn	(x=0X8052EB34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052EC32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EC42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EC4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ECBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ECC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ECC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ECCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ECEA);
	op_hex		(x,	1);
	create_insn	(0X8052ED12);
	create_insn	(x=0X8052ED3C);
	op_stkvar	(x,	1);
	create_insn	(0X8052ED4E);
	create_insn	(x=0X8052ED52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052ED58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052ED5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052ED98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EDB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EDBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EDC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052EDCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EDE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EDE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EDF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EE3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EE44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EECE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EEF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EF2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052EF34);
	op_stkvar	(x,	1);
	create_insn	(0X8052EF90);
	create_insn	(x=0X8052EF9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052EFA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052EFC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052EFD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052F008);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052F012);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052F01C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052F024);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052F056);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052F05C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052F066);
	op_stkvar	(x,	1);
	create_insn	(0X8052F07E);
	create_insn	(x=0X8052F084);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8052F400);
	set_name	(0X8052F400,	"opus_packet_get_samples_per_frame");
	create_insn	(x=0X8052F406);
	op_hex		(x,	1);
	create_insn	(0X8052F426);
	create_insn	(0X8052F442);
	create_insn	(0X8052F464);
	create_insn	(0X8052F478);
	create_insn	(0X8052F490);
	set_name	(0X8052F490,	"opus_packet_parse_impl");
	create_insn	(x=0X8052F4A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F4B6);
	op_hex		(x,	1);
	create_insn	(0X8052F4CE);
	create_insn	(0X8052F4DC);
	create_insn	(0X8052F4F8);
	create_insn	(0X8052F506);
	create_insn	(x=0X8052F51C);
	op_hex		(x,	1);
	create_insn	(0X8052F548);
	create_insn	(x=0X8052F55E);
	op_stkvar	(x,	1);
	create_insn	(0X8052F576);
	create_insn	(0X8052F586);
	create_insn	(x=0X8052F594);
	op_hex		(x,	1);
	create_insn	(x=0X8052F59C);
	op_stkvar	(x,	1);
	create_insn	(0X8052F5B4);
	create_insn	(0X8052F5C2);
	create_insn	(0X8052F5E6);
	create_insn	(0X8052F5FE);
	create_insn	(x=0X8052F644);
	op_stkvar	(x,	1);
	create_insn	(0X8052F64A);
	create_insn	(x=0X8052F64E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F650);
	op_stkvar	(x,	1);
	create_insn	(0X8052F65C);
	set_cmt	(0X8052F676,	"int",	0);
	create_insn	(x=0X8052F680);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F684);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F690);
	op_stkvar	(x,	1);
	create_insn	(0X8052F6A0);
	create_insn	(0X8052F6C2);
	create_insn	(0X8052F6D4);
	create_insn	(0X8052F6F8);
	create_insn	(x=0X8052F726);
	op_stkvar	(x,	1);
	create_insn	(0X8052F732);
	create_insn	(x=0X8052F74A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F74E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F75A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F75E);
	op_stkvar	(x,	1);
	create_insn	(0X8052F774);
	create_insn	(0X8052F7A0);
	create_insn	(x=0X8052F7A4);
	op_stkvar	(x,	1);
	create_insn	(0X8052F7AA);
	set_cmt	(0X8052F7AC,	"int",	0);
	create_insn	(x=0X8052F7AE);
	op_stkvar	(x,	1);
	set_cmt	(0X8052F7B0,	"int",	0);
	create_insn	(x=0X8052F7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F7BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F7CE);
	op_stkvar	(x,	1);
	create_insn	(0X8052F7E0);
	create_insn	(x=0X8052F7F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F7FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F80A);
	op_hex		(x,	1);
	create_insn	(x=0X8052F81E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052F836);
	op_stkvar	(x,	1);
	create_insn	(0X8052F860);
	set_name	(0X8052F860,	"validate_layout");
	create_insn	(0X8052F87E);
	create_insn	(0X8052F892);
	create_insn	(0X8052F896);
	create_insn	(0X8052F8C4);
	create_insn	(0X8052F8F4);
	create_insn	(0X8052F982);
	create_insn	(0X8052FDB8);
	create_insn	(x=0X8052FDC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FDCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FDD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FDD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FDD6);
	op_stkvar	(x,	1);
	set_cmt	(0X8052FDDE,	"int",	0);
	create_insn	(x=0X8052FDDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FDE0);
	op_stkvar	(x,	1);
	set_cmt	(0X8052FDEA,	"int",	0);
	create_insn	(x=0X8052FDF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FDF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE28);
	op_hex		(x,	1);
	create_insn	(x=0X8052FE52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8052FE8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FE9C);
	op_stkvar	(x,	1);
	create_insn	(0X8052FEB8);
	create_insn	(x=0X8052FF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FF40);
	op_stkvar	(x,	1);
	create_insn	(0X8052FF44);
	create_insn	(x=0X8052FF56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FF5A);
	op_hex		(x,	1);
	create_insn	(x=0X8052FF5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FF6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FF76);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FF78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FF98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FF9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FFB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FFBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FFC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FFE2);
	op_hex		(x,	1);
	create_insn	(x=0X8052FFE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FFF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8052FFFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530002);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053001E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530024);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053003C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053003E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530040);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530042);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530048);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530070);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530072);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530074);
	op_stkvar	(x,	1);
	create_insn	(0X8053008C);
	create_insn	(x=0X80530096);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530098);
	op_stkvar	(x,	1);
	create_insn	(x=0X805300B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805300BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805300C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805300C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805300CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805300CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805300DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805300DC);
	op_stkvar	(x,	1);
	set_cmt	(0X805300EC,	"int",	0);
	set_cmt	(0X805300F4,	"int",	0);
	create_insn	(0X805300FE);
	create_insn	(x=0X80530100);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80530106);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80530136);
	op_stkvar	(x,	1);
	create_insn	(0X8053014A);
	create_insn	(0X80530154);
	create_insn	(x=0X805301C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805301CE);
	op_hex		(x,	1);
	create_insn	(x=0X805301DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805301E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805301EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805301F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530204);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053020A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053020C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053020E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530212);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530216);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530218);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053021A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053022A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530234);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530244);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530256);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053025E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530264);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530268);
	op_stkvar	(x,	1);
	create_insn	(0X8053028E);
	create_insn	(x=0X80530290);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530292);
	op_stkvar	(x,	1);
	create_insn	(0X8053029E);
	create_insn	(0X805302A8);
	create_insn	(x=0X80530318);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053031C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530322);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530354);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530368);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053036A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530374);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530382);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053038A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530396);
	op_stkvar	(x,	1);
	create_insn	(0X805303A2);
	create_insn	(x=0X805303D2);
	op_stkvar	(x,	1);
	create_insn	(0X805303D8);
	create_insn	(x=0X805303F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805303FE);
	op_stkvar	(x,	1);
	create_insn	(0X80530406);
	create_insn	(0X805307C6);
	create_insn	(x=0X805307E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805307E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805307EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805307EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80530802);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053080C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053080E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530814);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530818);
	op_hex		(x,	1);
	create_insn	(x=0X80530820);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530826);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053082C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053082E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530830);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530832);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053083A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530840);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053084E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530852);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530854);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530858);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053085C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053085E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530860);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530862);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530864);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053086A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053086E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530874);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530876);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530894);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053089C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053089E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805308F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530908);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530910);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530912);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053091A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530920);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053092C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053092E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530930);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530934);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530938);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053093C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053093E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530940);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530946);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053094C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053094E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530956);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530958);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053095A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053096A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530978);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053097A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053097C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530984);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530986);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530988);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053098A);
	op_stkvar	(x,	1);
	set_cmt	(0X80530996,	"int",	0);
	set_cmt	(0X805309A4,	"int",	0);
	create_insn	(x=0X805309AE);
	op_stkvar	(x,	1);
	create_insn	(0X805309B2);
	create_insn	(x=0X805309B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805309B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805309BA);
	op_stkvar	(x,	1);
	set_cmt	(0X805309C6,	"int",	0);
	create_insn	(0X805309C6);
	create_insn	(x=0X805309D8);
	op_stkvar	(x,	1);
	create_insn	(0X805309DE);
	create_insn	(x=0X805309E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805309EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80530A14);
	op_stkvar	(x,	1);
	create_insn	(0X80530A1A);
	create_insn	(x=0X80530A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80530A28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80530A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530A56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530A70);
	op_stkvar	(x,	1);
	create_insn	(0X80530A7A);
	create_insn	(x=0X80530A7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530A9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530ACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530ACE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530BAE);
	op_hex		(x,	1);
	create_insn	(x=0X80530BB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530BB4);
	op_hex		(x,	1);
	create_insn	(x=0X80530BBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530BE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C68);
	op_stkvar	(x,	1);
	create_insn	(0X80530C6E);
	create_insn	(x=0X80530C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D18);
	op_stkvar	(x,	1);
	create_insn	(0X80530D22);
	create_insn	(x=0X80530D26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D68);
	op_stkvar	(x,	1);
	create_insn	(0X80530D74);
	create_insn	(x=0X80530D7C);
	op_stkvar	(x,	1);
	create_insn	(0X80530D80);
	create_insn	(x=0X80530D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530D9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530DFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E3A);
	op_hex		(x,	1);
	create_insn	(x=0X80530E3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530E7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EAE);
	op_stkvar	(x,	1);
	create_insn	(0X80530EB2);
	create_insn	(x=0X80530EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530ECE);
	op_stkvar	(x,	1);
	create_insn	(0X80530ED8);
	create_insn	(x=0X80530EDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530EFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80530FF6);
	op_stkvar	(x,	1);
	create_insn	(0X80531004);
	create_insn	(x=0X8053100A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053100C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053100E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531012);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531016);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531024);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531028);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053102A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053102C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053102E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531034);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053103A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053103E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531042);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531044);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531058);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531062);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531068);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053106C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053106E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053107A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053107C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531080);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531088);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053108C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053108E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531092);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531098);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053109E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805310FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531102);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531104);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053110A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531110);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531112);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531116);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053111A);
	op_stkvar	(x,	1);
	create_insn	(0X80531120);
	create_insn	(x=0X80531124);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531128);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531132);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531146);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053114E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531150);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531152);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531154);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531156);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531158);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053115A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053115E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531160);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531168);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053117A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531196);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053119A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053119E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805311A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805311A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805311A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805311AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805311B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805311BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805311C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805311C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531204);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531212);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531218);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053121C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053121E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531232);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531234);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053123C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531240);
	op_stkvar	(x,	1);
	create_insn	(0X80531252);
	create_insn	(0X80531260);
	create_insn	(x=0X80531264);
	op_stkvar	(x,	1);
	create_insn	(0X8053126A);
	create_insn	(x=0X8053126E);
	op_hex		(x,	1);
	create_insn	(x=0X80531272);
	op_stkvar	(x,	1);
	create_insn	(x=0X805312BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805312C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805312CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053131C);
	op_stkvar	(x,	1);
	set_cmt	(0X8053131E,	"int",	0);
	set_cmt	(0X80531322,	"char *",	0);
	set_cmt	(0X80531324,	"result",	0);
	create_insn	(x=0X8053132C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053132E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531332);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531334);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531338);
	op_stkvar	(x,	1);
	create_insn	(0X80531342);
	create_insn	(x=0X80531346);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531352);
	op_hex		(x,	1);
	create_insn	(x=0X80531378);
	op_hex		(x,	1);
	create_insn	(x=0X80531392);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053139A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313EC);
	op_hex		(x,	1);
	create_insn	(x=0X805313F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805313F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805314D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053150A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053150E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531512);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531516);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053151A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053151C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531522);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053152E);
	op_hex		(x,	1);
	create_insn	(x=0X8053154A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531552);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531566);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053156A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531570);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053157A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531580);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531586);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531596);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531598);
	op_stkvar	(x,	1);
	create_insn	(x=0X805315A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805315AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805315B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805315B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805315B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805315BC);
	op_stkvar	(x,	1);
	create_insn	(0X805315D2);
	create_insn	(x=0X805315DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805315EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805315F0);
	op_stkvar	(x,	1);
	set_cmt	(0X805315F4,	"int",	0);
	set_cmt	(0X805315F6,	"int",	0);
	create_insn	(x=0X805315FC);
	op_stkvar	(x,	1);
	set_cmt	(0X80531604,	"char *",	0);
	create_insn	(x=0X80531604);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531606);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053160C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531610);
	op_stkvar	(x,	1);
	set_cmt	(0X8053161A,	"result",	0);
	create_insn	(x=0X8053161A);
	op_stkvar	(x,	1);
	set_cmt	(0X8053161C,	"int",	0);
	create_insn	(0X80531624);
	create_insn	(x=0X80531626);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053162C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531656);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531666);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053167C);
	op_stkvar	(x,	1);
	create_insn	(0X80531698);
	create_insn	(x=0X805316A4);
	op_stkvar	(x,	1);
	create_insn	(0X805316BC);
	create_insn	(0X805316D6);
	create_insn	(x=0X805316E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805316EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805316F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805316F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805316FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053170A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531712);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531716);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531718);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531722);
	op_hex		(x,	1);
	create_insn	(x=0X8053172E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531730);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531736);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053173C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053173E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531744);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531746);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531750);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053175A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531760);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531766);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531772);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531774);
	op_stkvar	(x,	1);
	create_insn	(x=0X805317C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805317C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805317CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805317D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805317D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805317F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805317F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531830);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531836);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531840);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531846);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531848);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053184A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531850);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053185C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531860);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531868);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531870);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053187E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531880);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053188C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531892);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053189E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805318A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805318A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805318A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805318BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531906);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531912);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531918);
	op_stkvar	(x,	1);
	create_insn	(0X8053195E);
	create_insn	(x=0X80531960);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531966);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053196C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531970);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531978);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053197A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531988);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053198A);
	op_hex		(x,	1);
	create_insn	(x=0X8053198E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531992);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531994);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053199A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805319A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805319B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805319B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805319BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805319C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805319CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805319DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805319F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805319F8);
	op_hex		(x,	1);
	create_insn	(x=0X805319FC);
	op_stkvar	(x,	1);
	create_insn	(0X80531A00);
	create_insn	(x=0X80531A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531A9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531ABA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_6(void) {
        auto x;
#define id x

	create_insn	(x=0X80531AC8);
	op_hex		(x,	1);
	create_insn	(x=0X80531AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B52);
	op_stkvar	(x,	1);
	create_insn	(0X80531B5C);
	create_insn	(x=0X80531B66);
	op_hex		(x,	1);
	create_insn	(x=0X80531B6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531BE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531BF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531BFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C02);
	op_stkvar	(x,	1);
	set_cmt	(0X80531C10,	"char *",	0);
	create_insn	(x=0X80531C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C1C);
	op_stkvar	(x,	1);
	set_cmt	(0X80531C1E,	"int",	0);
	create_insn	(x=0X80531C1E);
	op_stkvar	(x,	1);
	set_cmt	(0X80531C20,	"result",	0);
	create_insn	(x=0X80531C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531C32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531C3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C48);
	op_hex		(x,	1);
	create_insn	(x=0X80531C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C4E);
	op_stkvar	(x,	1);
	set_cmt	(0X80531C50,	"char *",	0);
	create_insn	(x=0X80531C52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531C76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531C7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531CA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531CAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531CB0);
	op_hex		(x,	1);
	create_insn	(x=0X80531CB4);
	op_stkvar	(x,	1);
	create_insn	(0X80531CB8);
	create_insn	(x=0X80531CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531CCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531CD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D22);
	op_stkvar	(x,	1);
	create_insn	(0X80531D2A);
	create_insn	(x=0X80531D34);
	op_stkvar	(x,	1);
	set_cmt	(0X80531D36,	"int",	0);
	create_insn	(x=0X80531D36);
	op_stkvar	(x,	1);
	set_cmt	(0X80531D38,	"result",	0);
	create_insn	(x=0X80531D3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531D82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531D96);
	op_hex		(x,	1);
	create_insn	(x=0X80531D9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531DA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531DA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531DBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531DC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531DCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531DE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531DEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E06);
	op_hex		(x,	1);
	create_insn	(x=0X80531E0A);
	op_stkvar	(x,	1);
	create_insn	(0X80531E0E);
	create_insn	(x=0X80531E1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531E90);
	op_stkvar	(x,	1);
	create_insn	(0X80531E98);
	set_cmt	(0X80531EA2,	"result",	0);
	create_insn	(x=0X80531EA2);
	op_stkvar	(x,	1);
	set_cmt	(0X80531EA4,	"int",	0);
	create_insn	(x=0X80531EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531EAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531EAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531EB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531EB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531EBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531ED2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531EE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531EF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531F96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531F9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80531FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80531FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532002);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532016);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053201E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053202A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053202C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532032);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532034);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532036);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532044);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532060);
	op_hex		(x,	1);
	create_insn	(x=0X80532090);
	op_stkvar	(x,	1);
	create_insn	(0X80532098);
	create_insn	(x=0X805320CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805320D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805320EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805320F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805320FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532104);
	op_hex		(x,	1);
	create_insn	(x=0X80532108);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053210C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532110);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532128);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053212E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532134);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532144);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532152);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053216E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532180);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532182);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053218C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805321A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805321B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805321B8);
	op_hex		(x,	1);
	create_insn	(x=0X805321BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805321C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805321C4);
	op_stkvar	(x,	1);
	create_insn	(0X805321CA);
	create_insn	(x=0X805321E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805321EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805321F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532200);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053220C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532210);
	op_stkvar	(x,	1);
	create_insn	(0X80532216);
	create_insn	(x=0X8053221A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053222C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053222E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532232);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532250);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053226A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532270);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532278);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053227E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532280);
	op_hex		(x,	1);
	create_insn	(x=0X80532284);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532286);
	op_stkvar	(x,	1);
	create_insn	(0X8053228C);
	create_insn	(x=0X8053229A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805322A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805322AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805322B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805322B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805322C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805322D0);
	op_stkvar	(x,	1);
	create_insn	(0X805322D6);
	create_insn	(x=0X805322EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532300);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532302);
	op_stkvar	(x,	1);
	create_insn	(0X8053230C);
	create_insn	(x=0X80532316);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532324);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053232C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053233A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053234A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053234C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053234E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532358);
	op_stkvar	(x,	1);
	create_insn	(0X805323F8);
	create_insn	(x=0X8053240C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053241E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532420);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532422);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053242C);
	op_hex		(x,	1);
	create_insn	(x=0X80532430);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532438);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053243C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053243E);
	op_stkvar	(x,	1);
	create_insn	(0X80532442);
	create_insn	(x=0X80532444);
	op_stkvar	(x,	1);
	create_insn	(0X805324DE);
	create_insn	(0X80532532);
	create_insn	(x=0X80532540);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053254E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053255E);
	op_stkvar	(x,	1);
	create_insn	(0X805325A0);
	create_insn	(0X805325A6);
	create_insn	(x=0X805325C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805325F0);
	op_stkvar	(x,	1);
	create_insn	(0X80532602);
	create_insn	(x=0X80532604);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532608);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532612);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532614);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532618);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053261C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532620);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532628);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053262C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532630);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532632);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532636);
	op_stkvar	(x,	1);
	create_insn	(0X80532654);
	create_insn	(x=0X80532664);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532694);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053269C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805326FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053270A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532714);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532718);
	op_stkvar	(x,	1);
	create_insn	(0X8053272C);
	create_insn	(x=0X8053272E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532730);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532738);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053273C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532744);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053274C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532752);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532758);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053275A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532762);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532768);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532776);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532778);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532780);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532786);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532788);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532798);
	op_stkvar	(x,	1);
	create_insn	(x=0X805327A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805327A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805327AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805327B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805327C0);
	op_stkvar	(x,	1);
	create_insn	(0X805327D8);
	create_insn	(x=0X805327DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053280E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532816);
	op_stkvar	(x,	1);
	create_insn	(0X80532828);
	create_insn	(x=0X80532836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053283C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532840);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532846);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053284A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053284C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532852);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532854);
	op_stkvar	(x,	1);
	set_cmt	(0X80532882,	"int",	0);
	create_insn	(x=0X80532886);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053289A);
	op_stkvar	(x,	1);
	set_cmt	(0X805328A8,	"int",	0);
	create_insn	(x=0X805328AE);
	op_stkvar	(x,	1);
	set_cmt	(0X805328B2,	"int",	0);
	create_insn	(0X805328B2);
	create_insn	(x=0X805328C0);
	op_stkvar	(x,	1);
	create_insn	(0X805328C6);
	create_insn	(x=0X805328CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805328D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805328FE);
	create_insn	(x=0X80532900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80532906);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053294C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80532950);
	op_hex		(x,	1);
	create_insn	(x=0X80532954);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80532968);
	op_hex		(x,	1);
	create_insn	(x=0X80532976);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532978);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532980);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053298A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053298E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532990);
	op_stkvar	(x,	1);
	create_insn	(0X8053299A);
	create_insn	(x=0X805329A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805329AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805329AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805329B6);
	op_stkvar	(x,	1);
	create_insn	(0X805329DE);
	create_insn	(x=0X805329E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805329E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532A02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532A42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532A46);
	op_stkvar	(x,	1);
	set_cmt	(0X80532A48,	"int",	0);
	set_cmt	(0X80532A52,	"int",	0);
	create_insn	(x=0X80532A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532A66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532ABA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532AC2);
	op_stkvar	(x,	1);
	create_insn	(0X80532ACC);
	create_insn	(x=0X80532AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532AF0);
	op_hex		(x,	1);
	create_insn	(x=0X80532B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532B22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532B86);
	op_stkvar	(x,	1);
	set_cmt	(0X80532B92,	"int",	0);
	set_cmt	(0X80532B96,	"int",	0);
	set_cmt	(0X80532BA2,	"int",	0);
	set_cmt	(0X80532BA4,	"int",	0);
	create_insn	(x=0X80532BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532BBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532BC6);
	op_hex		(x,	1);
	create_insn	(x=0X80532BCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532BCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532C42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532C56);
	op_stkvar	(x,	1);
	create_insn	(0X80532C6A);
	create_insn	(x=0X80532C70);
	op_stkvar	(x,	1);
	create_insn	(0X80532CA2);
	create_insn	(0X80532CB8);
	create_insn	(x=0X80532CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532CE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532CF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80532CFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80532D26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532D2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532D42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532D5E);
	op_stkvar	(x,	1);
	create_insn	(0X80532D84);
	create_insn	(x=0X80532E88);
	op_stkvar	(x,	1);
	create_insn	(0X80532EA0);
	create_insn	(x=0X80532EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532EBA);
	op_stkvar	(x,	1);
	set_cmt	(0X80532F20,	"int",	0);
	set_cmt	(0X80532F24,	"int",	0);
	set_cmt	(0X80532F30,	"int",	0);
	set_cmt	(0X80532F32,	"int",	0);
	create_insn	(x=0X80532F44);
	op_stkvar	(x,	1);
	create_insn	(0X80532F4C);
	create_insn	(x=0X80532F52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532F6E);
	op_hex		(x,	1);
	create_insn	(x=0X80532F72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80532FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533000);
	op_stkvar	(x,	1);
	create_insn	(0X80533006);
	create_insn	(0X80533012);
	create_insn	(x=0X8053303A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533040);
	op_stkvar	(x,	1);
	create_insn	(0X80533054);
	create_insn	(x=0X80533058);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053305E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533060);
	op_hex		(x,	1);
	create_insn	(x=0X80533064);
	op_stkvar	(x,	1);
	create_insn	(x=0X805330A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805330AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805330B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805330B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805330E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805330E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805330F0);
	op_stkvar	(x,	1);
	create_double	(0X80533138);
	create_insn	(0X80533140);
	create_insn	(x=0X80533150);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533160);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053316C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80533174);
	create_insn	(x=0X805331CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805331FC);
	op_stkvar	(x,	1);
	create_insn	(0X8053320C);
	create_insn	(x=0X80533214);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053321A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053329A);
	op_hex		(x,	1);
	create_insn	(0X805332BE);
	create_insn	(0X80533306);
	create_insn	(0X80533340);
	create_insn	(0X8053334E);
	create_insn	(0X805333E0);
	set_cmt	(0X805333F8,	"int",	0);
	set_cmt	(0X805333FA,	"int",	0);
	create_insn	(0X80533426);
	create_insn	(x=0X80533428);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053342E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80533486);
	create_insn	(0X805334D0);
	create_insn	(0X805334E4);
	create_insn	(0X80533510);
	create_insn	(0X8053351A);
	create_insn	(0X80533520);
	create_insn	(0X80533552);
	create_insn	(0X80533578);
	create_insn	(0X805335C2);
	create_insn	(0X805335D6);
	create_insn	(0X80533602);
	create_insn	(0X8053360C);
	create_insn	(0X80533612);
	create_insn	(0X80533650);
	create_insn	(0X8053369A);
	create_insn	(0X805336AE);
	create_insn	(0X805336DA);
	create_insn	(0X805336E4);
	create_insn	(0X805336EA);
	create_insn	(0X80533724);
	create_insn	(0X8053374A);
	create_insn	(0X80533794);
	create_insn	(0X805337A8);
	create_insn	(0X805337D4);
	create_insn	(0X805337DE);
	create_insn	(0X805337E4);
	create_insn	(0X80533828);
	create_insn	(0X8053385A);
	create_insn	(0X8053386C);
	create_insn	(0X80533884);
	create_insn	(0X80533898);
	create_insn	(0X805338D0);
	create_insn	(0X80533B5C);
	create_insn	(x=0X80533B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533B96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533BA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533BAA);
	op_stkvar	(x,	1);
	set_cmt	(0X80533BB0,	"jumptable 80533BE4 default case",	1);
	create_insn	(x=0X80533BB0);
	op_stkvar	(x,	1);
	set_name	(0X80533BB0,	"def_80533BE4");
	create_insn	(x=0X80533BB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533BBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533BCA);
	op_stkvar	(x,	1);
	create_insn	(0X80533BD0);
	create_insn	(x=0X80533BD2);
	op_stkvar	(x,	1);
	set_cmt	(0X80533BDE,	"switch 4 cases",	0);
	set_cmt	(0X80533BE4,	"switch jump",	0);
	set_cmt	(0X80533BE8,	"jump table for switch statement",	0);
	create_word	(0X80533BE8);
	set_name	(0X80533BE8,	"jpt_80533BE4");
	create_word	(0X80533BEA);
	create_word	(0X80533BEC);
	create_word	(0X80533BEE);
	set_cmt	(0X80533BF0,	"jumptable 80533BE4 case 2",	1);
	create_insn	(x=0X80533BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533BF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533BFE);
	op_stkvar	(x,	1);
	set_cmt	(0X80533D1A,	"jumptable 80533BE4 case 3",	1);
	create_insn	(x=0X80533D1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533D9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533DB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533ED6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533EF6);
	op_stkvar	(x,	1);
	set_cmt	(0X80533F02,	"jumptable 80533BE4 case 4",	1);
	create_insn	(x=0X80533F02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F64);
	op_stkvar	(x,	1);
	set_cmt	(0X80533F7E,	"jumptable 80533BE4 case 5",	1);
	create_insn	(x=0X80533F7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80533FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534004);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534008);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053400A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053400C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534018);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053401E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534022);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534038);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053403E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534046);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053404C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534050);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053405E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534060);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534062);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534078);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534084);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053408A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534090);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534094);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053409A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053409C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805340AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805340C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805340CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805340D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805340EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805340F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805340F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534110);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053411C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534122);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053413E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534142);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534144);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534146);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053414A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534162);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534168);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053416E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534178);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053417E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534186);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534192);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534198);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053419E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805341F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534204);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534214);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534236);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534244);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053425E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534296);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053429C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805342BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805342BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805342D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805342FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053430C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534312);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534318);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053431C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534320);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534330);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534334);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534340);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534344);
	op_stkvar	(x,	1);
	create_insn	(x=0X805343B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805343BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805343C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805343D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805343D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805343E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534404);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053441E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534424);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534434);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053443A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534440);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534446);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053444A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053444C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534452);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534454);
	op_stkvar	(x,	1);
	create_insn	(0X8053445E);
	create_insn	(x=0X80534464);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534468);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053446E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534476);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534478);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053448C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053449A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053449E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805344FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534500);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534506);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053450A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053451C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053451E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534528);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053452A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053453E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534544);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053454E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534550);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534556);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053456C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053456E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534570);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534576);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534584);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534590);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534596);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534598);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053459E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805345AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805345C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805345D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805345E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805345EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805345F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805345F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805345F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534602);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053460C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534616);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534618);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534620);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534642);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534644);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053464C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534652);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053465C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534662);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534664);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534694);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053469E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805346A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805346A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805346AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805346B2);
	op_stkvar	(x,	1);
	create_insn	(0X805346C0);
	create_insn	(0X8053479C);
	create_insn	(0X805347FE);
	create_insn	(0X80534802);
	create_insn	(0X8053484A);
	create_insn	(0X8053486A);
	create_insn	(x=0X805348C6);
	op_hex		(x,	1);
	create_insn	(0X80534900);
	set_cmt	(0X80534914,	"int",	0);
	set_cmt	(0X80534918,	"int",	0);
	create_insn	(x=0X8053492E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80534938);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053493E);
	op_hex		(x,	1);
	create_insn	(0X805349D0);
	create_insn	(x=0X805349DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805349E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805349FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534A02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534A06);
	op_stkvar	(x,	1);
	set_cmt	(0X80534A10,	"int",	0);
	set_cmt	(0X80534A16,	"int",	0);
	create_insn	(x=0X80534A2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80534A36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80534A3E);
	op_hex		(x,	1);
	create_insn	(x=0X80534AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534AA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534AD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80534AE0);
	op_hex		(x,	1);
	create_insn	(x=0X80534B82);
	op_stkvar	(x,	1);
	create_insn	(0X80534BA0);
	set_cmt	(0X80534BAE,	"char *",	0);
	set_cmt	(0X80534BB2,	"int",	0);
	set_cmt	(0X80534BBA,	"result",	0);
	set_cmt	(0X80534BCA,	"int",	0);
	set_cmt	(0X80534BCC,	"result",	0);
	set_cmt	(0X80534BD2,	"char *",	0);
	create_insn	(x=0X80534BDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534BE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534C22);
	op_hex		(x,	1);
	create_insn	(x=0X80534C34);
	op_stkvar	(x,	1);
	create_insn	(0X80534CCE);
	create_insn	(0X80534CFC);
	create_insn	(0X80534D04);
	create_insn	(0X80534D0A);
	create_insn	(0X80534D2A);
	create_insn	(0X80534D2E);
	create_insn	(x=0X80534D3A);
	op_hex		(x,	1);
	create_insn	(0X80534D6C);
	create_insn	(x=0X80534D78);
	op_hex		(x,	1);
	create_insn	(x=0X80534DF8);
	op_stkvar	(x,	1);
	set_cmt	(0X80534E04,	"char *",	0);
	set_cmt	(0X80534E08,	"result",	0);
	set_cmt	(0X80534E0A,	"int",	0);
	create_insn	(x=0X80534E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534EA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534EA6);
	op_stkvar	(x,	1);
	create_insn	(0X80534EAA);
	create_insn	(x=0X80534EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534EC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534EC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534FA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534FB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534FCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80534FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053500E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535020);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535032);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535036);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535048);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053504E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053505A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053506A);
	op_stkvar	(x,	1);
	set_cmt	(0X80535080,	"char *",	0);
	create_insn	(x=0X80535080);
	op_stkvar	(x,	1);
	set_cmt	(0X80535084,	"int",	0);
	create_insn	(x=0X8053508A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053508E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535090);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805350D0);
	create_insn	(x=0X805350DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805350E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805350E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805350E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805350EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805350FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80535104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80535108);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535144);
	op_stkvar	(x,	1);
	create_insn	(0X80535148);
	create_insn	(x=0X80535158);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053515A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053515E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535166);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535174);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535176);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80535188);
	op_stkvar	(x,	1);
	create_insn	(x=0X805351B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805351CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805351D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805351DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805351E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535210);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053521E);
	op_stkvar	(x,	1);
	create_insn	(0X80535222);
	create_insn	(x=0X8053522A);
	op_hex		(x,	1);
	create_insn	(x=0X80535234);
	op_hex		(x,	1);
	create_insn	(x=0X80535238);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535244);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053524C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053524E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535250);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535252);
	op_stkvar	(x,	1);
	create_insn	(x=0X805352C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805352E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053534E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535352);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535356);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053535C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535360);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535364);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053536A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053539C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805353FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053540E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535418);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535454);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053545C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535466);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053549C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805354A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805354A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805354B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805354B4);
	op_hex		(x,	1);
	create_insn	(x=0X805354C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805354C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805354CA);
	op_hex		(x,	1);
	create_insn	(x=0X805354D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805354D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535544);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053556E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805355D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805355D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805355D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805355DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805355E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805355E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805355EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053561E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053562A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053562C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535632);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535636);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053563C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535644);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535648);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053564A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053564E);
	op_stkvar	(x,	1);
	create_insn	(0X80535652);
	create_insn	(x=0X80535658);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053565A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053565C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053565E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053566E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805356B2);
	op_stkvar	(x,	1);
	set_cmt	(0X805356E8,	"int",	0);
	set_cmt	(0X805356FA,	"int",	0);
	set_cmt	(0X805356FE,	"int",	0);
	create_insn	(0X8053571E);
	create_insn	(x=0X80535734);
	op_stkvar	(x,	1);
	create_insn	(0X80535738);
	create_insn	(x=0X80535746);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053574C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053574E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535754);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053575A);
	op_hex		(x,	1);
	create_insn	(x=0X80535762);
	op_stkvar	(x,	1);
	create_insn	(x=0X805357EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805357EE);
	op_hex		(x,	1);
	create_insn	(x=0X805357F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053583C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053583E);
	op_hex		(x,	1);
	create_insn	(0X8053584E);
	create_insn	(x=0X8053588A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805358D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805358E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053590A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053592C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053594E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535970);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535992);
	op_stkvar	(x,	1);
	create_insn	(x=0X805359B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805359D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805359F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535A16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535A36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535A56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535A76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535A96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535AB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535AD6);
	op_stkvar	(x,	1);
	create_insn	(0X80535B20);
	create_insn	(x=0X80535B5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535B60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535BD2);
	op_stkvar	(x,	1);
	set_cmt	(0X80535BDC,	"int",	0);
	create_insn	(0X80535BDC);
	set_cmt	(0X80535BE8,	"int",	0);
	create_insn	(x=0X80535C0C);
	op_stkvar	(x,	1);
	set_cmt	(0X80535C0E,	"int",	0);
	create_insn	(0X80535C30);
	create_insn	(x=0X80535C40);
	op_hex		(x,	1);
	create_insn	(0X80535C6E);
	create_insn	(0X80535C84);
	create_insn	(x=0X80535C9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535CB2);
	op_stkvar	(x,	1);
	create_insn	(0X80535CB6);
	create_insn	(x=0X80535CFC);
	op_stkvar	(x,	1);
	create_insn	(0X80535D38);
	create_insn	(0X80535D48);
	create_insn	(0X80535D4C);
	create_insn	(x=0X80535D50);
	op_hex		(x,	1);
	create_insn	(x=0X80535D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535DC2);
	op_hex		(x,	1);
	create_insn	(x=0X80535DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535DF0);
	op_stkvar	(x,	1);
	create_insn	(0X80535E16);
	create_insn	(x=0X80535E2C);
	op_hex		(x,	1);
	create_insn	(0X80535E44);
	create_insn	(0X80535E68);
	create_insn	(x=0X80535E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535E76);
	op_stkvar	(x,	1);
	create_insn	(0X80535E7A);
	create_insn	(0X80535ED0);
	create_insn	(0X80535EE6);
	create_insn	(0X80535EEA);
	create_insn	(x=0X80535EEE);
	op_hex		(x,	1);
	create_insn	(x=0X80535EFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535F64);
	op_hex		(x,	1);
	create_insn	(x=0X80535F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535F7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535F94);
	op_stkvar	(x,	1);
	create_insn	(0X80535FBC);
	create_insn	(x=0X80535FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80535FCE);
	op_hex		(x,	1);
	create_insn	(0X80535FEC);
	create_insn	(0X80536010);
	create_insn	(x=0X80536030);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536056);
	op_stkvar	(x,	1);
	create_insn	(0X805360A4);
	create_insn	(x=0X805360D6);
	op_hex		(x,	1);
	create_insn	(0X80536128);
	create_insn	(0X80536148);
	create_insn	(x=0X8053616C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536170);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536176);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536196);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536198);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053619E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805361A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805361AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805361BA);
	op_hex		(x,	1);
	create_insn	(x=0X805361BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805361C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805361C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805361D0);
	op_hex		(x,	1);
	create_insn	(x=0X805361DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805361E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805361E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805361EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053620A);
	op_hex		(x,	1);
	create_insn	(x=0X8053620E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536210);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053621E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536242);
	op_stkvar	(x,	1);
	create_insn	(0X8053625E);
	create_insn	(x=0X80536262);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536286);
	op_stkvar	(x,	1);
	set_cmt	(0X805362C8,	"int",	0);
	set_cmt	(0X805362D6,	"char *",	0);
	set_cmt	(0X805362DA,	"result",	0);
	create_insn	(x=0X805362E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805362E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805362FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536314);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536324);
	op_stkvar	(x,	1);
	set_cmt	(0X8053633C,	"int",	0);
	set_cmt	(0X80536344,	"int",	0);
	create_insn	(0X8053638C);
	create_insn	(x=0X80536390);
	op_stkvar	(x,	1);
	create_insn	(x=0X805363AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805363AE);
	op_hex		(x,	1);
	create_insn	(x=0X80536414);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053641E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536462);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536472);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536476);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536490);
	op_stkvar	(x,	1);
	create_insn	(0X80536494);
	create_insn	(x=0X80536498);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053649A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805364A4);
	op_hex		(x,	1);
	create_insn	(x=0X80536528);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536574);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536576);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536578);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536586);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536588);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536590);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536596);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053659A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805365C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365D2);
	op_stkvar	(x,	1);
	set_cmt	(0X805365DE,	"char *",	0);
	set_cmt	(0X805365E0,	"int",	0);
	set_cmt	(0X805365E2,	"result",	0);
	create_insn	(x=0X805365E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805365E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805365EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805365F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805365F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8053660C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536612);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536624);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536634);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536636);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053663A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053663E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536640);
	op_stkvar	(x,	1);
	create_insn	(0X80536644);
	create_insn	(x=0X8053664C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053664E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053667E);
	op_stkvar	(x,	1);
	create_insn	(0X80536686);
	create_insn	(x=0X805366A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805366CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805366DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805366E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805366E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805366EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805366F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805366FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053670A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053670C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536712);
	op_stkvar	(x,	1);
	set_cmt	(0X80536740,	"int",	0);
	set_cmt	(0X80536744,	"int",	0);
	create_insn	(0X805367B0);
	create_insn	(x=0X805367BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805367D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805367D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805367D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805367DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805367E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805367F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053682E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053683A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053683C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80536844);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80536848);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536856);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536858);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053685E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536860);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053686C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536870);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536874);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536878);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053687C);
	op_stkvar	(x,	1);
	create_insn	(0X80536882);
	create_insn	(x=0X80536884);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536886);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536898);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053689A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053689E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805368A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805368D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805368D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805368E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805368F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805368FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536900);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053690A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536922);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053692A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053693A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536944);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536946);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053694A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053694C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536950);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536954);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053696A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536986);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053699E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805369BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805369D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A3E);
	op_stkvar	(x,	1);
	set_cmt	(0X80536A40,	"char *",	0);
	set_cmt	(0X80536A44,	"int",	0);
	create_insn	(x=0X80536A46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A4E);
	op_stkvar	(x,	1);
	set_cmt	(0X80536A54,	"result",	0);
	create_insn	(x=0X80536A6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536ACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536ACE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536ADA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536AEC);
	op_stkvar	(x,	1);
	create_insn	(0X80536AF0);
	create_insn	(x=0X80536AFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536B96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C28);
	op_stkvar	(x,	1);
	create_insn	(0X80536C38);
	create_insn	(x=0X80536C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C4E);
	op_hex		(x,	1);
	create_insn	(x=0X80536C52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536CBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536D0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536D0E);
	op_stkvar	(x,	1);
	set_cmt	(0X80536D3C,	"result",	0);
	create_insn	(x=0X80536D3C);
	op_stkvar	(x,	1);
	set_cmt	(0X80536D3E,	"char *",	0);
	set_cmt	(0X80536D42,	"int",	0);
	create_insn	(x=0X80536D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536D4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536D5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80536D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536D66);
	op_stkvar	(x,	1);
	create_insn	(0X80536D7A);
	set_cmt	(0X80536D86,	"int",	0);
	set_cmt	(0X80536D88,	"int",	0);
	create_insn	(x=0X80536DD0);
	op_stkvar	(x,	1);
	set_cmt	(0X80536DDC,	"result",	0);
	set_cmt	(0X80536DDE,	"char *",	0);
	set_cmt	(0X80536DE2,	"int",	0);
	set_cmt	(0X80536DEC,	"int",	0);
	set_cmt	(0X80536DFE,	"result",	0);
	set_cmt	(0X80536E00,	"char *",	0);
	create_insn	(0X80536E1A);
	create_insn	(0X80536E58);
	create_insn	(x=0X80536E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536E72);
	op_stkvar	(x,	1);
	create_insn	(0X80536E88);
	create_insn	(x=0X80536E8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536E92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80536E94);
	op_stkvar	(x,	1);
	set_cmt	(0X80536EA8,	"int",	0);
	set_cmt	(0X80536EAC,	"int",	0);
	create_insn	(x=0X80536EB6);
	op_stkvar	(x,	1);
	set_cmt	(0X80536EBC,	"int",	0);
	create_insn	(0X80536EE4);
	create_insn	(0X80536EE8);
	create_insn	(x=0X80536EF4);
	op_hex		(x,	1);
	set_cmt	(0X80536F0C,	"int",	0);
	set_cmt	(0X80536F24,	"int",	0);
	set_cmt	(0X80536F28,	"int",	0);
	create_insn	(0X80536F74);
	create_insn	(0X80536FCC);
	create_insn	(0X8053722A);
	create_insn	(x=0X8053723A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537242);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537246);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80537250);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80537254);
	op_stkvar	(x,	1);
	create_insn	(0X80537270);
	create_insn	(x=0X8053727A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537284);
	op_hex		(x,	1);
	create_insn	(x=0X80537296);
	op_stkvar	(x,	1);
	create_insn	(0X8053745A);
	create_insn	(0X80537464);
	create_insn	(x=0X8053746E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80537474);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80537482);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537484);
	op_hex		(x,	1);
	create_insn	(x=0X80537488);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537490);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537496);
	op_stkvar	(x,	1);
	create_insn	(x=0X805374A4);
	op_hex		(x,	1);
	create_insn	(x=0X805374A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805374B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805374B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805374BC);
	op_hex		(x,	1);
	create_insn	(x=0X805374C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805374C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805374CE);
	op_hex		(x,	1);
	create_insn	(x=0X805374D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805374E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537504);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80537520);
	create_insn	(x=0X80537532);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053755C);
	op_hex		(x,	1);
	create_insn	(x=0X80537562);
	op_stkvar	(x,	1);
	set_cmt	(0X80537564,	"int",	0);
	set_cmt	(0X80537566,	"result",	0);
	create_insn	(x=0X80537566);
	op_stkvar	(x,	1);
	set_cmt	(0X80537568,	"char *",	0);
	create_insn	(x=0X8053756C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537586);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537592);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537598);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053759C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375D2);
	op_stkvar	(x,	1);
	set_cmt	(0X805375D4,	"char *",	0);
	set_cmt	(0X805375D8,	"int",	0);
	create_insn	(x=0X805375DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805375F6);
	op_stkvar	(x,	1);
	set_cmt	(0X8053760C,	"int",	0);
	set_cmt	(0X8053760E,	"char *",	0);
	set_cmt	(0X80537612,	"result",	0);
	create_insn	(x=0X80537612);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537614);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537622);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537630);
	op_stkvar	(x,	1);
	set_cmt	(0X8053763A,	"int",	0);
	set_cmt	(0X8053763E,	"int",	0);
	create_insn	(x=0X80537664);
	op_stkvar	(x,	1);
	create_insn	(0X805376BA);
	create_insn	(x=0X805376C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805376CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805376D6);
	op_stkvar	(x,	1);
	create_insn	(0X805376DC);
	create_insn	(x=0X805376F0);
	op_stkvar	(x,	1);
	create_insn	(0X80537744);
	create_insn	(x=0X80537750);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053775A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053792A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537938);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053793A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537940);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537942);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053794C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053795E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053796A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053797C);
	op_stkvar	(x,	1);
	create_insn	(0X80537982);
	create_insn	(x=0X8053798C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053798E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805379B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805379BA);
	op_stkvar	(x,	1);
	create_insn	(0X805379CE);
	create_insn	(x=0X805379D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805379D6);
	op_stkvar	(x,	1);
	create_insn	(0X805379E0);
	create_insn	(x=0X805379E6);
	op_stkvar	(x,	1);
	set_cmt	(0X80537A00,	"result",	0);
	set_cmt	(0X80537A04,	"int",	0);
	set_cmt	(0X80537A06,	"char *",	0);
	create_insn	(x=0X80537A06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A3E);
	op_stkvar	(x,	1);
	create_insn	(0X80537A4A);
	create_insn	(x=0X80537A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537AA6);
	op_hex		(x,	1);
	create_insn	(x=0X80537AAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537B92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537C4E);
	op_stkvar	(x,	1);
	create_insn	(0X80537C52);
	create_insn	(x=0X80537C5E);
	op_stkvar	(x,	1);
	set_cmt	(0X80537C60,	"result",	0);
	create_insn	(x=0X80537C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537CBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537CC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537D2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537D46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537D62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537D7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537D96);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537DAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537E1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537E48);
	op_stkvar	(x,	1);
	set_cmt	(0X80537E4E,	"result",	0);
	create_insn	(x=0X80537E4E);
	op_stkvar	(x,	1);
	set_cmt	(0X80537E50,	"int",	0);
	set_cmt	(0X80537E52,	"char *",	0);
	create_insn	(x=0X80537E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80537E5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80537E6C);
	create_insn	(x=0X80537E74);
	op_stkvar	(x,	1);
	create_insn	(0X80538180);
	create_insn	(0X80538194);
	create_insn	(0X805381C8);
	create_insn	(0X805381CC);
	create_insn	(0X80538206);
	create_insn	(0X80538210);
	create_insn	(0X80538218);
	create_insn	(0X8053826C);
	create_insn	(x=0X80538276);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053828C);
	op_hex		(x,	1);
	create_insn	(x=0X80538290);
	op_stkvar	(x,	1);
	create_insn	(x=0X805382AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805382DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805382E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805382EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805382EE);
	op_stkvar	(x,	1);
	create_insn	(0X805382F8);
	create_insn	(x=0X805382FC);
	op_hex		(x,	1);
	create_insn	(x=0X80538300);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538322);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053833A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538340);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053834C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053834E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053836C);
	op_hex		(x,	1);
	create_insn	(0X80538398);
	create_insn	(x=0X805383A6);
	op_hex		(x,	1);
	create_insn	(x=0X805383B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805383BC);
	op_hex		(x,	1);
	create_insn	(x=0X805383E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805383E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538416);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053844A);
	op_stkvar	(x,	1);
	create_insn	(0X80538460);
	create_insn	(x=0X80538472);
	op_hex		(x,	1);
	create_insn	(x=0X80538482);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538494);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053849A);
	op_hex		(x,	1);
	create_insn	(x=0X8053849E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805384B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805384FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053850C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053850E);
	op_hex		(x,	1);
	create_insn	(x=0X80538514);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053851A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053851E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538528);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053852E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538532);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538536);
	op_hex		(x,	1);
	create_insn	(x=0X80538542);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053854E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538558);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053855A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538560);
	op_hex		(x,	1);
	create_insn	(x=0X80538564);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538568);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053856A);
	op_hex		(x,	1);
	create_insn	(x=0X8053856E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538578);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538580);
	op_stkvar	(x,	1);
	set_cmt	(0X80538582,	"int",	0);
	create_insn	(x=0X80538582);
	op_hex		(x,	1);
	create_insn	(x=0X8053858E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538592);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053859C);
	op_stkvar	(x,	1);
	set_cmt	(0X8053859E,	"int",	0);
	set_cmt	(0X805385A2,	"int",	0);
	create_insn	(x=0X805385E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805385EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805385F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805385F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805385F6);
	op_hex		(x,	1);
	create_insn	(x=0X805385FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805385FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538606);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053860C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538610);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538614);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538648);
	op_hex		(x,	1);
	create_insn	(x=0X80538650);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538664);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053866C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538676);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053867C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538680);
	op_stkvar	(x,	1);
	create_insn	(x=0X805386DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805386E8);
	op_stkvar	(x,	1);
	create_float	(0X805386FC);
	create_insn	(0X80538700);
	create_insn	(x=0X80538702);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538708);
	op_hex		(x,	1);
	create_insn	(x=0X80538718);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538722);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538728);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053872C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538734);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538744);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538746);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053875C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053875E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538774);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053877A);
	op_hex		(x,	1);
	create_insn	(x=0X80538788);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053878E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805387A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805388E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805388F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805388F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538920);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538922);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053892C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053892E);
	op_stkvar	(x,	1);
	create_insn	(0X80538938);
	create_insn	(x=0X8053893A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538940);
	op_hex		(x,	1);
	create_insn	(x=0X80538952);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538956);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053895C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538962);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538964);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053896C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053897C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8053897E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538994);
	op_stkvar	(x,	1);
	create_insn	(x=0X805389AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805389B2);
	op_hex		(x,	1);
	create_insn	(x=0X805389BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805389CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805389E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538B74);
	op_stkvar	(x,	1);
	create_insn	(0X80538B7E);
	create_insn	(x=0X80538B82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538BA6);
	op_stkvar	(x,	1);
	create_insn	(0X80538BB8);
	create_oword	(0X80538BD0);
	create_insn	(0X80538C40);
	set_cmt	(0X80538C50,	"int",	0);
	create_insn	(x=0X80538C60);
	op_stkvar	(x,	1);
	set_cmt	(0X80538C68,	"int",	0);
	set_cmt	(0X80538C72,	"int",	0);
	set_cmt	(0X80538C7A,	"int",	0);
	create_insn	(x=0X80538CA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538CA4);
	op_stkvar	(x,	1);
	set_cmt	(0X80538CB8,	"int",	0);
	set_cmt	(0X80538CC0,	"int",	0);
	set_cmt	(0X80538CE6,	"int",	0);
	set_cmt	(0X80538CEE,	"int",	0);
	create_insn	(x=0X80538CFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538D0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80538D14);
	op_stkvar	(x,	1);
	set_cmt	(0X80538D22,	"int",	0);
	set_cmt	(0X80538D26,	"int",	0);
	create_insn	(0X80538D48);
	make_array	(0X80538D4A,	0X2);
	create_insn	(0X80538D4C);
	create_insn	(x=0X80538D50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80538D50,	"j_print_error");
	create_dword	(x=0X80538D54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80538D58);
	make_array	(0X80538D5A,	0X2);
	create_insn	(0X80538D5C);
	create_insn	(0X80538D60);
	set_name	(0X80538D60,	"__arm_invalidate_tlb_byaddr_from_thumb");
	make_array	(0X80538D62,	0X2);
	create_insn	(0X80538D64);
	create_insn	(x=0X80538D68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80538D68,	"j_thread_preempt");
	create_dword	(x=0X80538D6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80538D70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80538D74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80538D78);
	set_name	(0X80538D78,	"__memset_from_thumb");
	make_array	(0X80538D7A,	0X2);
	create_insn	(0X80538D7C);
	create_dword	(0X80539000);
	create_strlit	(0X80539EC8,	0X16);
	set_name	(0X80539EC8,	"aFgetsNotImplem");
	create_strlit	(0X80539EDE,	0X24);
	set_name	(0X80539EDE,	"aDebugAssertFai");
	create_strlit	(0X80539F02,	0X6);
	set_name	(0X80539F02,	"aFgets");
	create_strlit	(0X80539F08,	0X16);
	set_name	(0X80539F08,	"aFopenNotImplem");
	create_strlit	(0X80539F1E,	0X6);
	set_name	(0X80539F1E,	"aFopen");
	create_strlit	(0X80539F24,	0X17);
	set_name	(0X80539F24,	"aFcloseNotImple");
	create_strlit	(0X80539F3B,	0X7);
	set_name	(0X80539F3B,	"aFclose");
	create_strlit	(0X80539F42,	0X16);
	set_name	(0X80539F42,	"aFreadNotImplem");
	create_strlit	(0X80539F58,	0X6);
	set_name	(0X80539F58,	"aFread");
	create_strlit	(0X80539F5E,	0X17);
	set_name	(0X80539F5E,	"aFwriteNotImple");
	create_strlit	(0X80539F75,	0X7);
	set_name	(0X80539F75,	"aFwrite");
	create_strlit	(0X80539F7C,	0X17);
	set_name	(0X80539F7C,	"aFflushNotImple");
	create_strlit	(0X80539F93,	0X7);
	set_name	(0X80539F93,	"aFflush");
	create_strlit	(0X80539F9A,	0X15);
	set_name	(0X80539F9A,	"aFeofNotImpleme");
	create_strlit	(0X80539FAF,	0X5);
	set_name	(0X80539FAF,	"aFeof");
	create_strlit	(0X80539FB4,	0X16);
	set_name	(0X80539FB4,	"aFseekNotImplem");
	create_strlit	(0X80539FCA,	0X6);
	set_name	(0X80539FCA,	"aFseek");
	create_strlit	(0X80539FD0,	0X16);
	set_name	(0X80539FD0,	"aFtellNotImplem");
	create_strlit	(0X80539FE6,	0X6);
	set_name	(0X80539FE6,	"aFtell");
	create_strlit	(0X80539FEC,	0X5);
	set_name	(0X80539FEC,	"aAtof");
	create_strlit	(0X80539FF1,	0X5);
	set_name	(0X80539FF1,	"aFabs");
	create_strlit	(0X80539FF6,	0X4);
	set_name	(0X80539FF6,	"aPow");
	create_strlit	(0X80539FFA,	0X5);
	set_name	(0X80539FFA,	"aSqrt");
	create_strlit	(0X80539FFF,	0X5);
	set_name	(0X80539FFF,	"aAtan");
	create_strlit	(0X8053A004,	0X4);
	set_name	(0X8053A004,	"aLog");
	create_strlit	(0X8053A008,	0X4);
	set_name	(0X8053A008,	"aSin");
	create_strlit	(0X8053A00C,	0X4);
	set_name	(0X8053A00C,	"aExp");
	create_strlit	(0X8053A010,	0X6);
	set_name	(0X8053A010,	"aAtan2");
	create_strlit	(0X8053A016,	0X5);
	set_name	(0X8053A016,	"aAcos");
	create_strlit	(0X8053A01B,	0X6);
	set_name	(0X8053A01B,	"aFloor");
	create_strlit	(0X8053A021,	0X5);
	set_name	(0X8053A021,	"aCeil");
	create_strlit	(0X8053A026,	0X16);
	set_name	(0X8053A026,	"aPureVirtualCal");
	create_strlit	(0X8053A03C,	0X10);
	set_name	(0X8053A03C,	"aDeleteCalled");
	create_strlit	(0X8053A04C,	0X5);
	set_name	(0X8053A04C,	"aGmix");
	create_strlit	(0X8053A051,	0XB);
	set_name	(0X8053A051,	"aInitialize");
	create_strlit	(0X8053A05C,	0X9);
	set_name	(0X8053A05C,	"a0Ret");
	create_strlit	(0X8053A065,	0XB);
	set_name	(0X8053A065,	"aGetsession");
	create_strlit	(0X8053A070,	0X1F);
	set_name	(0X8053A070,	"aPinNumaudioren");
	create_strlit	(0X8053A08F,	0X1A);
	set_name	(0X8053A08F,	"aPinNumaudioout");
	create_strlit	(0X8053A0A9,	0X21);
	set_name	(0X8053A0A9,	"aPinGmixNumnear");
	create_strlit	(0X8053A0CA,	0X22);
	set_name	(0X8053A0CA,	"aPinGmixNumgame");
	create_strlit	(0X8053A0EC,	0X2B);
	set_name	(0X8053A0EC,	"aUnknownMessage");
	create_strlit	(0X8053A117,	0XF);
	set_name	(0X8053A117,	"aProcessmessage");
	create_strlit	(0X8053A126,	0X1D);
	set_name	(0X8053A126,	"aSNotImplemente");
	create_strlit	(0X8053A143,	0X1C);
	set_name	(0X8053A143,	"aRegistercloset");
	create_strlit	(0X8053A15F,	0X11);
	set_name	(0X8053A15F,	"aProcessoutdevi");
	create_strlit	(0X8053A170,	0X32);
	set_name	(0X8053A170,	"aSamplesSizeofM");
	create_strlit	(0X8053A1A2,	0X6);
	set_name	(0X8053A1A2,	"aClose");
	create_strlit	(0X8053A1A8,	0XF);
	set_name	(0X8053A1A8,	"a0MRefcount");
	create_strlit	(0X8053A1B7,	0XF);
	set_name	(0X8053A1B7,	"aPreparesamples");
	create_strlit	(0X8053A1C6,	0X26);
	set_name	(0X8053A1C6,	"aMReadpositionS");
	create_strlit	(0X8053A1EC,	0X7);
	set_name	(0X8053A1EC,	"aResume");
	create_strlit	(0X8053A1F3,	0X10);
	set_name	(0X8053A1F3,	"a0MSuspended");
	create_strlit	(0X8053A203,	0X25);
	set_name	(0X8053A203,	"aIllegalCallToS");
	create_strlit	(0X8053A228,	0X14);
	set_name	(0X8053A228,	"aSetsamplesproc");
	create_strlit	(0X8053A23C,	0X6);
	set_name	(0X8053A23C,	"ct");
	create_strlit	(0X8053A242,	0X18);
	set_name	(0X8053A242,	"aGetsharedbuffe");
	create_strlit	(0X8053A25A,	0X29);
	set_name	(0X8053A25A,	"aIllegalCallToS_0");
	create_strlit	(0X8053A283,	0X18);
	set_name	(0X8053A283,	"aSetsharedbuffe");
	create_strlit	(0X8053A29B,	0XD);
	set_name	(0X8053A29B,	"aAppendbuffer");
	create_strlit	(0X8053A2A8,	0X14);
	set_name	(0X8053A2A8,	"aGetbuffersproc");
	create_strlit	(0X8053A2BC,	0X22);
	set_name	(0X8053A2BC,	"aIllegalCallToA");
	create_strlit	(0X8053A2DE,	0X11);
	set_name	(0X8053A2DE,	"aAttachworkbuff");
	create_strlit	(0X8053A2EF,	0X5);
	set_name	(0X8053A2EF,	"aOpen");
	create_strlit	(0X8053A2F4,	0X10);
	set_name	(0X8053A2F4,	"a0MRefcount_0");
	create_strlit	(0X8053A304,	0X17);
	set_name	(0X8053A304,	"aGetbufferdevic");
	create_strlit	(0X8053A31B,	0XD);
	set_name	(0X8053A31B,	"aFlushbuffers");
	create_strlit	(0X8053A328,	0X22);
	set_name	(0X8053A328,	"a0SizeGetchanne");
	create_strlit	(0X8053A34A,	0X11);
	set_name	(0X8053A34A,	"aSetwritepositi");
	create_strlit	(0X8053A35B,	0X19);
	set_name	(0X8053A35B,	"aSourceCcplexSo");
	create_strlit	(0X8053A374,	0X10);
	set_name	(0X8053A374,	"aSetreadpositio");
	create_strlit	(0X8053A384,	0X10);
	set_name	(0X8053A384,	"aGetreadpositio");
	create_strlit	(0X8053A394,	0X25);
	set_name	(0X8053A394,	"aSharedbufferpo");
	create_strlit	(0X8053A3B9,	0X1D);
	set_name	(0X8053A3B9,	"aBufferoffsetDa");
	create_strlit	(0X8053A3D6,	0XC);
	set_name	(0X8053A3D6,	"aSetposition");
	create_strlit	(0X8053A3E2,	0X30);
	set_name	(0X8053A3E2,	"aMCurrentbuffer");
	create_strlit	(0X8053A412,	0X11);
	set_name	(0X8053A412,	"aPreparenewbuff");
	create_strlit	(0X8053A423,	0X15);
	set_name	(0X8053A423,	"aCpuindexDspind");
	create_strlit	(0X8053A438,	0X35);
	set_name	(0X8053A438,	"aCpuindexDspind_0");
	create_strlit	(0X8053A46D,	0X30);
	set_name	(0X8053A46D,	"aSizebytestotal");
	create_dword	(0X8053A4A0);
	create_dword	(0X8053A4A4);
	create_dword	(x=0X8053A4A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8053A4A8,	"UnkSession_vtable");
	create_dword	(x=0X8053A4AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8053A4B0);
	create_dword	(0X8053A4B4);
	create_dword	(x=0X8053A4B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8053A4B8,	"SessionBase__vftable");
	create_dword	(x=0X8053A4BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8053A4C0);
	create_dword	(0X8053A4C4);
	create_dword	(x=0X8053A4C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A4FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A500);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A504);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A508);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A50C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A510);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A514);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A518);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A51C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A520);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A524);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A528);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A52C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A530);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A534);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8053A538);
	create_dword	(0X8053A53C);
	create_dword	(x=0X8053A540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8053A540,	"AudioRenderSession__vtable");
	create_dword	(x=0X8053A544);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A548);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A54C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A550);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A554);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A558);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A55C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A560);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A564);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A56C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A574);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A578);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A57C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A584);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A58C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A590);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A594);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A598);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A59C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8053A5B0);
	create_dword	(0X8053A5B4);
	create_dword	(x=0X8053A5B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8053A5B8,	"AudioOutSession__vftable");
	create_dword	(x=0X8053A5BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A5FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A600);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A604);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A608);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A60C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A610);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A614);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A61C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A620);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A624);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8053A628);
	create_dword	(0X8053A62C);
	create_dword	(x=0X8053A630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X8053A630,	"NearVoiceGameRecordSession__vftable");
	create_dword	(x=0X8053A634);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A638);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A63C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A644);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A64C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A654);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A658);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A65C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A660);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A664);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A668);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A66C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A670);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A674);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A67C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A684);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A68C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A690);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A694);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8053A69C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8053A6A0);
	create_dword	(0X8053A6A4);
	create_dword	(0X8053A6A8);
	set_name	(0X8053A6A8,	"Session__vtable4");
	create_dword	(0X8053A6AC);
	create_dword	(0X8053A6B0);
	create_dword	(0X8053A6B4);
	create_dword	(0X8053A6B8);
	create_dword	(0X8053A6BC);
	create_dword	(0X8053A6C0);
	create_dword	(0X8053A6C4);
	create_dword	(0X8053A6C8);
	create_dword	(0X8053A6CC);
	create_dword	(0X8053A6D0);
	create_dword	(0X8053A6D4);
	create_dword	(0X8053A6D8);
	create_dword	(0X8053A6DC);
	create_dword	(0X8053A6E0);
	create_dword	(0X8053A6E4);
	create_dword	(0X8053A6E8);
	create_dword	(0X8053A6EC);
	create_dword	(0X8053A6F0);
	create_dword	(0X8053A6F4);
	create_dword	(0X8053A6F8);
	create_dword	(0X8053A6FC);
	create_dword	(0X8053A700);
	create_dword	(0X8053A704);
	create_dword	(0X8053A708);
	create_dword	(0X8053A70C);
	create_dword	(0X8053A710);
	create_dword	(0X8053A714);
	create_dword	(0X8053A718);
	create_dword	(0X8053A71C);
	create_dword	(0X8053A720);
	set_name	(0X8053A720,	"Session__vtable5");
	create_dword	(0X8053A724);
	create_dword	(0X8053A728);
	create_dword	(0X8053A72C);
	create_dword	(0X8053A730);
	create_dword	(0X8053A734);
	create_dword	(0X8053A738);
	create_dword	(0X8053A73C);
	create_dword	(0X8053A740);
	create_dword	(0X8053A744);
	create_dword	(0X8053A748);
	create_dword	(0X8053A74C);
	create_dword	(0X8053A750);
	create_dword	(0X8053A754);
	create_dword	(0X8053A758);
	create_dword	(0X8053A75C);
	create_dword	(0X8053A760);
	create_dword	(0X8053A764);
	create_dword	(0X8053A768);
	create_dword	(0X8053A76C);
	create_dword	(0X8053A770);
	create_dword	(0X8053A774);
	create_dword	(0X8053A778);
	create_dword	(0X8053A77C);
	create_dword	(0X8053A780);
	create_dword	(0X8053A784);
	create_dword	(0X8053A788);
	create_dword	(0X8053A78C);
	create_dword	(0X8053A790);
	create_dword	(0X8053A794);
	create_dword	(0X8053A798);
	set_name	(0X8053A798,	"Session__vtable6");
	create_dword	(0X8053A79C);
	create_dword	(0X8053A7A0);
	create_dword	(0X8053A7A4);
	create_dword	(0X8053A7A8);
	create_dword	(0X8053A7AC);
	create_dword	(0X8053A7B0);
	create_dword	(0X8053A7B4);
	create_dword	(0X8053A7B8);
	create_dword	(0X8053A7BC);
	create_dword	(0X8053A7C0);
	create_dword	(0X8053A7C4);
	create_dword	(0X8053A7C8);
	create_dword	(0X8053A7CC);
	create_dword	(0X8053A7D0);
	create_dword	(0X8053A7D4);
	create_dword	(0X8053A7D8);
	create_dword	(0X8053A7DC);
	create_dword	(0X8053A7E0);
	create_dword	(0X8053A7E4);
	create_dword	(0X8053A7E8);
	create_dword	(0X8053A7EC);
	create_dword	(0X8053A7F0);
	create_dword	(0X8053A7F4);
	create_dword	(0X8053A7F8);
	create_dword	(0X8053A7FC);
	create_dword	(0X8053A800);
	create_dword	(0X8053A804);
	create_dword	(0X8053A808);
	make_array	(0X8053A808,	0X15);
	set_name	(0X8053A808,	"gSomeKindaVolumes");
	create_strlit	(0X8053A85C,	0XF);
	set_name	(0X8053A85C,	"aMemorymapunmap_0");
	create_strlit	(0X8053A86B,	0X64);
	set_name	(0X8053A86B,	"aDHomeTeamcityW");
	create_strlit	(0X8053A8CF,	0X5);
	set_name	(0X8053A8CF,	"aMain");
	create_strlit	(0X8053A8D4,	0X7);
	set_name	(0X8053A8D4,	"aAudio");
	create_strlit	(0X8053A8DB,	0X2D);
	set_name	(0X8053A8DB,	"aReceivedInvali");
	create_strlit	(0X8053A908,	0XE);
	set_name	(0X8053A908,	"aAudiorenderer");
	create_strlit	(0X8053A916,	0X19);
	set_name	(0X8053A916,	"aMemorymapunmap");
	create_strlit	(0X8053A92F,	0X15);
	set_name	(0X8053A92F,	"aUnknownRpcComm");
	create_strlit	(0X8053A944,	0X11);
	set_name	(0X8053A944,	"aInitializedevi");
	create_strlit	(0X8053A955,	0X1E);
	set_name	(0X8053A955,	"aSessionidNumde");
	create_strlit	(0X8053A973,	0XD);
	set_name	(0X8053A973,	"aMainaudioout");
	create_strlit	(0X8053A980,	0X11);
	set_name	(0X8053A980,	"aCheckdevicesta");
	create_strlit	(0X8053A991,	0X17);
	set_name	(0X8053A991,	"aPgmixdeviceNul");
	create_strlit	(0X8053A9A8,	0X31);
	set_name	(0X8053A9A8,	"aPgmixdeviceSta");
	create_strlit	(0X8053A9D9,	0X12);
	set_name	(0X8053A9D9,	"aUpdatedevicest");
	create_strlit	(0X8053A9EB,	0X11);
	set_name	(0X8053A9EB,	"aReadauxbufferd");
	create_strlit	(0X8053A9FC,	0X12);
	set_name	(0X8053A9FC,	"aCountCountmax");
	create_strlit	(0X8053AA0E,	0X1A);
	set_name	(0X8053AA0E,	"aPoutbufferinfo");
	create_strlit	(0X8053AA28,	0X14);
	set_name	(0X8053AA28,	"aPoutdataNullpt");
	create_strlit	(0X8053AA3C,	0X10);
	set_name	(0X8053AA3C,	"aBufferaddr0");
	create_strlit	(0X8053AA4C,	0X16);
	set_name	(0X8053AA4C,	"aPoutbufferNull");
	create_strlit	(0X8053AA62,	0X12);
	set_name	(0X8053AA62,	"aWriteauxbuffer");
	create_strlit	(0X8053AA74,	0X17);
	set_name	(0X8053AA74,	"aWritecountCoun");
	create_strlit	(0X8053AA8B,	0X11);
	set_name	(0X8053AA8B,	"aPdataNullptr");
	create_strlit	(0X8053AA9C,	0X13);
	set_name	(0X8053AA9C,	"aBufferaddress0");
	create_strlit	(0X8053AAAF,	0X14);
	set_name	(0X8053AAAF,	"aPdspinfoNullpt");
	create_strlit	(0X8053AAC3,	0X12);
	set_name	(0X8053AAC3,	"aResetauxbuffer");
	create_strlit	(0X8053AAD5,	0X19);
	set_name	(0X8053AAD5,	"aPoutauxbufferN");
	create_strlit	(0X8053AAEE,	0X6);
	set_name	(0X8053AAEE,	"aSetup");
	create_strlit	(0X8053AAF4,	0X2D);
	set_name	(0X8053AAF4,	"aCommandlistsiz");
	create_strlit	(0X8053AB21,	0X8);
	set_name	(0X8053AB21,	"aProcess");
	create_strlit	(0X8053AB29,	0X32);
	set_name	(0X8053AB29,	"aPcommandheader");
	create_strlit	(0X8053AB5B,	0X82);
	set_name	(0X8053AB5B,	"aMCommandlistsi");
	create_strlit	(0X8053ABDD,	0X75);
	set_name	(0X8053ABDD,	"aDHomeTeamcityW_0");
	create_strlit	(0X8053AC52,	0X16);
	set_name	(0X8053AC52,	"aUnknownCommand");
	create_strlit	(0X8053AC68,	0X1D);
	set_name	(0X8053AC68,	"aProcessdatasou");
	create_strlit	(0X8053AC85,	0X18);
	set_name	(0X8053AC85,	"aVerifycommandP");
	create_strlit	(0X8053AC9D,	0XF);
	set_name	(0X8053AC9D,	"aProcesscommand");
	create_strlit	(0X8053ACAC,	0X12);
	set_name	(0X8053ACAC,	"aMSamplecount0");
	create_strlit	(0X8053ACBE,	0X3B);
	set_name	(0X8053ACBE,	"aMixbuffercount");
	create_strlit	(0X8053ACF9,	0X1F);
	set_name	(0X8053ACF9,	"aProcesslightli");
	create_strlit	(0X8053AD18,	0X57);
	set_name	(0X8053AD18,	"aFiltertapcount");
	create_strlit	(0X8053AD6F,	0X16);
	set_name	(0X8053AD6F,	"aDecodefromwave");
	create_strlit	(0X8053AD85,	0X12);
	set_name	(0X8053AD85,	"aOutputNullptr");
	create_strlit	(0X8053AD97,	0X15);
	set_name	(0X8053AD97,	"aTargetsamplera");
	create_strlit	(0X8053ADAC,	0X11);
	set_name	(0X8053ADAC,	"aSamplecount0");
	create_strlit	(0X8053ADBD,	0X11);
	set_name	(0X8053ADBD,	"aStateNullptr");
	create_strlit	(0X8053ADCE,	0X16);
	set_name	(0X8053ADCE,	"aWavebufferNull");
	create_strlit	(0X8053ADE4,	0XD);
	set_name	(0X8053ADE4,	"aChannel0");
	create_strlit	(0X8053ADF1,	0X12);
	set_name	(0X8053ADF1,	"aChannelcount1");
	create_strlit	(0X8053AE03,	0XA6);
	set_name	(0X8053AE03,	"aSrcqualityVoic");
	create_strlit	(0X8053AEA9,	0XB);
	set_name	(0X8053AEA9,	"aPitch0");
	create_strlit	(0X8053AEB4,	0X15);
	set_name	(0X8053AEB4,	"aSourcesamplera");
	create_strlit	(0X8053AEC9,	0XC);
	set_name	(0X8053AEC9,	"aOffset0");
	create_strlit	(0X8053AED5,	0X6F);
	set_name	(0X8053AED5,	"aDHomeTeamcityW_1");
	create_strlit	(0X8053AF44,	0X20);
	set_name	(0X8053AF44,	"aWavebufferinde");
	create_strlit	(0X8053AF64,	0X14);
	set_name	(0X8053AF64,	"aUnsupportedFor");
	create_strlit	(0X8053AF78,	0X31);
	set_name	(0X8053AF78,	"aTmp16bPPTmp16b");
	create_strlit	(0X8053AFA9,	0X2A);
	set_name	(0X8053AFA9,	"aRemainsampleco");
	create_strlit	(0X8053AFD3,	0XC);
	set_name	(0X8053AFD3,	"aDecodepcm16");
	create_strlit	(0X8053AFDF,	0X17);
	set_name	(0X8053AFDF,	"aReqTargetchann");
	create_strlit	(0X8053AFF6,	0XF);
	set_name	(0X8053AFF6,	"aDecodepcmfloat");
	create_strlit	(0X8053B005,	0X11);
	set_name	(0X8053B005,	"aApplydelayeffe");
	create_strlit	(0X8053B016,	0X89);
	set_name	(0X8053B016,	"aPparameterNumc");
	create_strlit	(0X8053B09F,	0X18);
	set_name	(0X8053B09F,	"aApplylightlimi");
	create_strlit	(0X8053B0B7,	0X8D);
	set_name	(0X8053B0B7,	"aPparameterChan");
	create_strlit	(0X8053B144,	0X12);
	set_name	(0X8053B144,	"aApplyreverbeff");
	create_strlit	(0X8053B156,	0X79);
	set_name	(0X8053B156,	"aReverbNumchann");
	create_strlit	(0X8053B1CF,	0X36);
	set_name	(0X8053B1CF,	"aReverbEarlymod");
	create_strlit	(0X8053B205,	0X34);
	set_name	(0X8053B205,	"aReverbLatemode");
	create_strlit	(0X8053B239,	0X8);
	set_name	(0X8053B239,	"aDivqfqf");
	create_strlit	(0X8053B241,	0XD);
	set_name	(0X8053B241,	"a0Divisor");
	create_strlit	(0X8053B24E,	0X17);
	set_name	(0X8053B24E,	"aApplyi3dl2reve");
	create_strlit	(0X8053B265,	0X9);
	set_name	(0X8053B265,	"aResample");
	create_strlit	(0X8053B26E,	0X10);
	set_name	(0X8053B26E,	"aSrcprocessfram");
	create_strlit	(0X8053B27E,	0X5);
	set_name	(0X8053B27E,	"aSend");
	create_strlit	(0X8053B283,	0X23);
	set_name	(0X8053B283,	"aMessageMailbox");
	create_strlit	(0X8053B2A6,	0X11);
	set_name	(0X8053B2A6,	"aIsserverTrue");
	create_strlit	(0X8053B2B7,	0X2A);
	set_name	(0X8053B2B7,	"aIdStdNumericLi");
	create_strlit	(0X8053B2E1,	0XC);
	set_name	(0X8053B2E1,	"aResult0");
	create_strlit	(0X8053B2ED,	0X5);
	set_name	(0X8053B2ED,	"aRecv");
	create_dword	(0X8053B2F4);
	make_array	(0X8053B2F4,	0X3);
	set_name	(0X8053B2F4,	"gWaveBufferPitchBySrcQuality");
	create_dword	(0X8053B300);
	make_array	(0X8053B300,	0X14);
	set_name	(0X8053B300,	"Reverb_FdnDelayTimes");
	create_dword	(0X8053B350);
	make_array	(0X8053B350,	0X14);
	set_name	(0X8053B350,	"Reverb_DecayDelayTimes");
	create_dword	(0X8053B3A0);
	make_array	(0X8053B3A0,	0X37);
	set_name	(0X8053B3A0,	"gReverbEarlyDelayTimes");
	create_dword	(0X8053B47C);
	make_array	(0X8053B47C,	0X32);
	set_name	(0X8053B47C,	"gReverbEarlyGain");
	create_dword	(0X8053B544);
	make_array	(0X8053B544,	0X100);
	set_name	(0X8053B544,	"SinCosLUT2");
	create_dword	(0X8053B948);
	make_array	(0X8053B948,	0X100);
	set_name	(0X8053B948,	"SinCosLUT");
	create_dword	(0X8053BD4C);
	make_array	(0X8053BD4C,	0X101);
	set_name	(0X8053BD4C,	"Pow10LUT2");
	create_dword	(0X8053C150);
	make_array	(0X8053C150,	0X101);
	set_name	(0X8053C150,	"Pow10LUT");
	create_dword	(0X8053C554);
	set_name	(0X8053C554,	"gI3DL2_FdnMaxDelayLineTimesF32");
	create_dword	(0X8053C558);
	create_dword	(0X8053C55C);
	create_dword	(0X8053C560);
	create_dword	(0X8053C564);
	set_name	(0X8053C564,	"gI3DL2_Decay0MaxDelayLineTimesF32");
	create_dword	(0X8053C568);
	create_dword	(0X8053C56C);
	create_dword	(0X8053C570);
	create_dword	(0X8053C574);
	set_name	(0X8053C574,	"gI3DL2_Decay1MaxDelayLineTimesF32");
	create_dword	(0X8053C578);
	create_dword	(0X8053C57C);
	create_dword	(0X8053C580);
	create_dword	(0X8053C584);
	set_name	(0X8053C584,	"gI3DL2_MinDelayLineTimes");
	create_dword	(0X8053C588);
	create_dword	(0X8053C58C);
	create_dword	(0X8053C590);
	create_dword	(0X8053C594);
	make_array	(0X8053C594,	0X14);
	set_name	(0X8053C594,	"gI3DL2_EarlyTapTimes");
	create_word	(0X8053C5E4);
	make_array	(0X8053C5E4,	0X200);
	set_name	(0X8053C5E4,	"Resample_NormalLUT1");
	create_word	(0X8053C9E4);
	make_array	(0X8053C9E4,	0X200);
	set_name	(0X8053C9E4,	"Resample_NormalLUT2");
	create_word	(0X8053CDE4);
	make_array	(0X8053CDE4,	0X200);
	set_name	(0X8053CDE4,	"Resample_NormalLUT0");
	create_word	(0X8053D1E4);
	make_array	(0X8053D1E4,	0X400);
	set_name	(0X8053D1E4,	"Resample_HighLUT2");
	create_word	(0X8053D9E4);
	make_array	(0X8053D9E4,	0X400);
	set_name	(0X8053D9E4,	"Resample_HighLUT1");
	create_word	(0X8053E1E4);
	make_array	(0X8053E1E4,	0X400);
	set_name	(0X8053E1E4,	"Resample_HighLUT0");
	create_word	(x=0X8053E9E4);
	make_array	(x,	0XA);
	op_dec		(x,	0);
	set_name	(0X8053E9E4,	"WindowSink1");
	create_word	(x=0X8053E9F8);
	make_array	(x,	0XA);
	op_dec		(x,	0);
	set_name	(0X8053E9F8,	"WindowSink2");
	create_word	(0X8053EA0C);
	make_array	(0X8053EA0C,	0XA);
	set_name	(0X8053EA0C,	"WindowSink3");
	create_word	(x=0X8053EA20);
	make_array	(x,	0XA);
	op_dec		(x,	0);
	set_name	(0X8053EA20,	"WindowSink4");
	create_word	(x=0X8053EA34);
	make_array	(x,	0XA);
	op_dec		(x,	0);
	set_name	(0X8053EA34,	"WindowSink5");
	create_word	(0X8053EA48);
	create_word	(0X8053EA4A);
	create_strlit	(0X8053EA4C,	0XC);
	set_name	(0X8053EA4C,	"aOpusdecoder");
	create_strlit	(0X8053EA58,	0XF);
	set_name	(0X8053EA58,	"aStatusTrue");
	create_strlit	(0X8053EA67,	0X2D);
	set_name	(0X8053EA67,	"aR00x08xR10x08x_0");
	create_strlit	(0X8053EA94,	0X2D);
	set_name	(0X8053EA94,	"aR40x08xR50x08x_0");
	create_strlit	(0X8053EAC1,	0X2D);
	set_name	(0X8053EAC1,	"aR80x08xR90x08x");
	create_strlit	(0X8053EAEE,	0X2D);
	set_name	(0X8053EAEE,	"aR120x08xUsp0x0_0");
	create_strlit	(0X8053EB1B,	0XD);
	set_name	(0X8053EB1B,	"aSpsr0x08x");
	create_strlit	(0X8053EB28,	0X1C);
	set_name	(0X8053EB28,	"aCSR130x08xR140");
	create_strlit	(0X8053EB44,	0X4);
	set_name	(0X8053EB44,	"aFiq");
	create_strlit	(0X8053EB48,	0X4);
	set_name	(0X8053EB48,	"aIrq");
	create_strlit	(0X8053EB4C,	0X4);
	set_name	(0X8053EB4C,	"aSvc");
	create_strlit	(0X8053EB50,	0X4);
	set_name	(0X8053EB50,	"aUnd");
	create_strlit	(0X8053EB54,	0X4);
	set_name	(0X8053EB54,	"aSys");
	create_strlit	(0X8053EB58,	0X4);
	set_name	(0X8053EB58,	"aAbt");
	create_strlit	(0X8053EB5C,	0X1D);
	set_name	(0X8053EB5C,	"aBottomOfStackA_0");
	create_strlit	(0X8053EB79,	0X1B);
	set_name	(0X8053EB79,	"aHaltSpinningFo");
	create_strlit	(0X8053EB94,	0X1A);
	set_name	(0X8053EB94,	"aL2CacheAlready");
	create_strlit	(0X8053EBAE,	0X12);
	set_name	(0X8053EBAE,	"aL2CacheEnabled");
	create_strlit	(0X8053EBC0,	0X2A);
	set_name	(0X8053EBC0,	"aUnableToSendBo");
	create_strlit	(0X8053EBEA,	0X24);
	set_name	(0X8053EBEA,	"aPlatformTegraA");
	create_strlit	(0X8053EC0E,	0X10);
	set_name	(0X8053EC0E,	"aRetNoError");
	create_strlit	(0X8053EC1E,	0X28);
	set_name	(0X8053EC1E,	"fmt");
	create_strlit	(0X8053EC46,	0X25);
	set_name	(0X8053EC46,	"aExitingIdleWfi");
	create_strlit	(0X8053EC6B,	0X26);
	set_name	(0X8053EC6B,	"aRecvFailedForH");
	create_strlit	(0X8053EC91,	0X1F);
	set_name	(0X8053EC91,	"aOsMemoryLayout");
	create_strlit	(0X8053ECB0,	0X11);
	set_name	(0X8053ECB0,	"a15sPP");
	create_strlit	(0X8053ECC1,	0X16);
	set_name	(0X8053ECC1,	"aSharedMemorySe");
	create_strlit	(0X8053ECD7,	0X5);
	set_name	(0X8053ECD7,	"aData");
	create_strlit	(0X8053ECDC,	0XE);
	set_name	(0X8053ECDC,	"aDataUncached");
	create_strlit	(0X8053ECEA,	0X9);
	set_name	(0X8053ECEA,	"aDramApp");
	create_strlit	(0X8053ECF3,	0X10);
	set_name	(0X8053ECF3,	"aDramSharedApp");
	create_strlit	(0X8053ED03,	0X13);
	set_name	(0X8053ED03,	"aDramSharedWcAp");
	create_strlit	(0X8053ED16,	0X7);
	set_name	(0X8053ED16,	"aPrebss");
	create_strlit	(0X8053ED1D,	0X5);
	set_name	(0X8053ED1D,	"aHeap");
	create_strlit	(0X8053ED22,	0X2B);
	set_name	(0X8053ED22,	"aUnableToSetInt");
	create_strlit	(0X8053ED4D,	0XE);
	set_name	(0X8053ED4D,	"aWdtHeartbeat");
	create_strlit	(0X8053ED5B,	0XD);
	set_name	(0X8053ED5B,	"name");
	create_strlit	(0X8053ED68,	0X26);
	set_name	(0X8053ED68,	"aFailedToCreate");
	create_strlit	(0X8053ED8E,	0X12);
	set_name	(0X8053ED8E,	"aDummyIdleThrea");
	create_strlit	(0X8053EDA0,	0X2B);
	set_name	(0X8053EDA0,	"aFailedToCreate_0");
	create_strlit	(0X8053EDCB,	0X23);
	set_name	(0X8053EDCB,	"aInitializingAd");
	create_strlit	(0X8053EDEE,	0X25);
	set_name	(0X8053EDEE,	"aFailedToOpenHo");
	create_strlit	(0X8053EE13,	0X1A);
	set_name	(0X8053EE13,	"aVectorUHasNoHa");
	create_strlit	(0X8053EE2D,	0X1F);
	set_name	(0X8053EE2D,	"aSNotInInterrup");
	create_strlit	(0X8053EE4C,	0X1B);
	set_name	(0X8053EE4C,	"aSVectorOutOfRa");
	create_strlit	(0X8053EE67,	0X31);
	set_name	(0X8053EE67,	"aSTheInterruptU");
	create_strlit	(0X8053EE98,	0X20);
	set_name	(0X8053EE98,	"aSSupportsSecur");
	create_strlit	(0X8053EEB8,	0X1B);
	set_name	(0X8053EEB8,	"aSSupportsUInte");
	create_strlit	(0X8053EED3,	0X18);
	set_name	(0X8053EED3,	"aEnablingSInter");
	create_strlit	(0X8053EEEB,	0X23);
	set_name	(0X8053EEEB,	"aUnableToSetUIn");
	create_strlit	(0X8053EF0E,	0X4);
	set_name	(0X8053EF0E,	"aLic");
	create_strlit	(0X8053EF12,	0X25);
	set_name	(0X8053EF12,	"aSCounterIsUsed");
	create_strlit	(0X8053EF37,	0X4);
	set_name	(0X8053EF37,	"aTsc");
	create_strlit	(0X8053EF3B,	0X1F);
	set_name	(0X8053EF3B,	"aFailedToOpenSt");
	create_strlit	(0X8053EF5A,	0X8);
	set_name	(0X8053EF5A,	"a10lu");
	create_strlit	(0X8053EF62,	0X19);
	set_name	(0X8053EF62,	"aInitialisedDeb");
	create_strlit	(0X8053EF7B,	0X19);
	set_name	(0X8053EF7B,	"aAdmaChDResetFa");
	create_strlit	(0X8053EF94,	0X21);
	set_name	(0X8053EF94,	"aAdmaChannelDPa");
	create_strlit	(0X8053EFB5,	0X18);
	set_name	(0X8053EFB5,	"aAdmaDDisableFa");
	create_strlit	(0X8053EFCD,	0X26);
	set_name	(0X8053EFCD,	"aAdmaDAdmaif0xX");
	create_strlit	(0X8053EFF3,	0X22);
	set_name	(0X8053EFF3,	"aAdmaDAdmaif0xX_0");
	create_strlit	(0X8053F015,	0X15);
	set_name	(0X8053F015,	"aInvalidAramAli");
	create_strlit	(0X8053F02A,	0X19);
	set_name	(0X8053F02A,	"aAramEnablingAl");
	create_strlit	(0X8053F043,	0X2B);
	set_name	(0X8053F043,	"aAramAlias00xXM");
	create_strlit	(0X8053F06E,	0X2E);
	set_name	(0X8053F06E,	"aAramAlias10xXM");
	create_strlit	(0X8053F09C,	0X37);
	set_name	(0X8053F09C,	"aAramAlias20xXM");
	create_strlit	(0X8053F0D3,	0X34);
	set_name	(0X8053F0D3,	"aAramAlias30xXM");
	create_strlit	(0X8053F107,	0X1D);
	set_name	(0X8053F107,	"aSchedulerIsNot");
	create_strlit	(0X8053F124,	0X20);
	set_name	(0X8053F124,	"aFailedToSendMa");
	create_strlit	(0X8053F144,	0X9);
	set_name	(0X8053F144,	"aAdspDfs");
	create_strlit	(0X8053F14D,	0X26);
	set_name	(0X8053F14D,	"aFailedToOpenHo_0");
	create_strlit	(0X8053F173,	0X1C);
	set_name	(0X8053F173,	"aSInvalidMailbo");
	create_strlit	(0X8053F18F,	0X23);
	set_name	(0X8053F18F,	"aSMailboxIdDAlr");
	create_strlit	(0X8053F1B2,	0XD);
	set_name	(0X8053F1B2,	"aSBusyD");
	create_strlit	(0X8053F1BF,	0X17);
	set_name	(0X8053F1BF,	"aSReaderPointer");
	create_strlit	(0X8053F1D6,	0X15);
	set_name	(0X8053F1D6,	"aSBufferCountD");
	create_strlit	(0X8053F1EB,	0X19);
	set_name	(0X8053F1EB,	"aSLastMsgSent0x");
	create_strlit	(0X8053F204,	0X1F);
	set_name	(0X8053F204,	"aSNextMsgToBeSe");
	create_strlit	(0X8053F223,	0X2F);
	set_name	(0X8053F223,	"aSHwMailboxQueu");
	create_strlit	(0X8053F252,	0X29);
	set_name	(0X8053F252,	"aThisIsTheCallI");
	create_strlit	(0X8053F27B,	0X8);
	set_name	(0X8053F27B,	"aInWfi");
	create_strlit	(0X8053F283,	0XC);
	set_name	(0X8053F283,	"aExitedWfi");
	create_strlit	(0X8053F28F,	0X17);
	set_name	(0X8053F28F,	"aUnregisterIntH");
	create_strlit	(0X8053F2A6,	0X15);
	set_name	(0X8053F2A6,	"aRegisterIntHan");
	create_strlit	(0X8053F2BB,	0X1E);
	set_name	(0X8053F2BB,	"aGetInterrupted");
	create_strlit	(0X8053F2D9,	0X1A);
	set_name	(0X8053F2D9,	"aGetInterrupted_0");
	create_strlit	(0X8053F2F3,	0X17);
	set_name	(0X8053F2F3,	"aDumpHwMbxStruc");
	create_strlit	(0X8053F30A,	0X1B);
	set_name	(0X8053F30A,	"aWaitForMbxSend");
	create_strlit	(0X8053F325,	0X10);
	set_name	(0X8053F325,	"a2");
	create_strlit	(0X8053F335,	0X2B);
	set_name	(0X8053F335,	"aInvalidatingWh");
	create_strlit	(0X8053F360,	0X5);
	set_name	(0X8053F360,	"aL210");
	create_strlit	(0X8053F365,	0X5);
	set_name	(0X8053F365,	"aL220");
	create_strlit	(0X8053F36A,	0X5);
	set_name	(0X8053F36A,	"aL310");
	create_strlit	(0X8053F36F,	0X8);
	set_name	(0X8053F36F,	"aUnknown");
	create_strlit	(0X8053F377,	0X21);
	set_name	(0X8053F377,	"aL2CacheBaseAdd");
	create_strlit	(0X8053F398,	0X1E);
	set_name	(0X8053F398,	"aSCacheControll");
	create_strlit	(0X8053F3B6,	0X35);
	set_name	(0X8053F3B6,	"aDWaysCacheId0x");
	create_strlit	(0X8053F3EB,	0XD);
	set_name	(0X8053F3EB,	"aSHalting");
	create_strlit	(0X8053F3F8,	0X2C);
	set_name	(0X8053F3F8,	"aR00x08xR10x08x");
	create_strlit	(0X8053F424,	0X2C);
	set_name	(0X8053F424,	"aR40x08xR50x08x");
	create_strlit	(0X8053F450,	0X2C);
	set_name	(0X8053F450,	"aR120x08xUsp0x0");
	create_strlit	(0X8053F47C,	0X1C);
	set_name	(0X8053F47C,	"aBottomOfStackA");
	create_strlit	(0X8053F498,	0X12);
	set_name	(0X8053F498,	"aUnhandledSysca");
	create_strlit	(0X8053F4AA,	0X10);
	set_name	(0X8053F4AA,	"aUnhandledAbort");
	create_strlit	(0X8053F4BA,	0XB);
	set_name	(0X8053F4BA,	"aDataAbort");
	create_strlit	(0X8053F4C5,	0XF);
	set_name	(0X8053F4C5,	"aPrefetchAbort");
	create_strlit	(0X8053F4D4,	0X19);
	set_name	(0X8053F4D4,	"aArchArmArmMmuS");
	create_strlit	(0X8053F4ED,	0X29);
	set_name	(0X8053F4ED,	"aDescTypeMmuMem_0");
	create_strlit	(0X8053F516,	0X27);
	set_name	(0X8053F516,	"aUnableToAlloca");
	create_strlit	(0X8053F53D,	0X8);
	set_name	(0X8053F53D,	"aLevel2");
	create_strlit	(0X8053F545,	0X42);
	set_name	(0X8053F545,	"aLevel1PtRange0");
	create_strlit	(0X8053F587,	0X41);
	set_name	(0X8053F587,	"aLevel2PtRange0");
	create_strlit	(0X8053F5C8,	0X2D);
	set_name	(0X8053F5C8,	"aDescTypeMmuMem");
	create_dword	(0X8053F5F8);
	create_dword	(0X8053F5FC);
	create_dword	(0X8053F600);
	create_dword	(0X8053F604);
	create_strlit	(0X8053F608,	0X15);
	set_name	(0X8053F608,	"aTopOfBootstrap");
	create_strlit	(0X8053F61D,	0X17);
	set_name	(0X8053F61D,	"aInitializingPl");
	create_strlit	(0X8053F634,	0X15);
	set_name	(0X8053F634,	"aInitializingTa");
	create_strlit	(0X8053F649,	0X1E);
	set_name	(0X8053F649,	"aInitilizingAds");
	create_strlit	(0X8053F667,	0X15);
	set_name	(0X8053F667,	"aCallingAppsIni");
	create_strlit	(0X8053F67C,	0X1A);
	set_name	(0X8053F67C,	"aCallingStaticA");
	create_strlit	(0X8053F696,	0X15);
	set_name	(0X8053F696,	"aWelcomeToAdspO");
	create_strlit	(0X8053F6AB,	0X16);
	set_name	(0X8053F6AB,	"aCallingConstru");
	create_strlit	(0X8053F6C1,	0X13);
	set_name	(0X8053F6C1,	"aInitializingHe");
	create_strlit	(0X8053F6D4,	0X26);
	set_name	(0X8053F6D4,	"aCreatingBootst");
	create_strlit	(0X8053F6FA,	0XB);
	set_name	(0X8053F6FA,	"aBootstrap2");
	create_strlit	(0X8053F705,	0X11);
	set_name	(0X8053F705,	"aStartingAppS");
	create_strlit	(0X8053F716,	0X25);
	set_name	(0X8053F716,	"aUnableToQueueA");
	create_strlit	(0X8053F73B,	0XF);
	set_name	(0X8053F73B,	"aAppAdspAppC");
	create_strlit	(0X8053F74A,	0X2A);
	set_name	(0X8053F74A,	"aUnableToAlloca_0");
	create_strlit	(0X8053F774,	0X28);
	set_name	(0X8053F774,	"aUnableToCreate");
	create_strlit	(0X8053F79C,	0X23);
	set_name	(0X8053F79C,	"aUnableToDequeu");
	create_strlit	(0X8053F7BF,	0X17);
	set_name	(0X8053F7BF,	"aMessageNotSupp");
	create_strlit	(0X8053F7D6,	0X13);
	set_name	(0X8053F7D6,	"aSAppSFailed");
	create_strlit	(0X8053F7E9,	0X11);
	set_name	(0X8053F7E9,	"aAdspAppService");
	create_strlit	(0X8053F7FA,	0X18);
	set_name	(0X8053F7FA,	"aRunAppMailboxR");
	create_strlit	(0X8053F812,	0X23);
	set_name	(0X8053F812,	"aSErrorCreating");
	create_strlit	(0X8053F835,	0X1F);
	set_name	(0X8053F835,	"aSFailedToOpenM");
	create_strlit	(0X8053F854,	0X16);
	set_name	(0X8053F854,	"aAdspStaticApps");
	create_strlit	(0X8053F86A,	0X15);
	set_name	(0X8053F86A,	"aAdspAppModuleI");
	create_strlit	(0X8053F87F,	0X6);
	set_name	(0X8053F87F,	"aShell");
	create_strlit	(0X8053F885,	0X3B);
	set_name	(0X8053F885,	"aLoadD02dCsDInt");
	create_strlit	(0X8053F8C0,	0XF);
	set_name	(0X8053F8C0,	"aThreadStats");
	create_strlit	(0X8053F8CF,	0X18);
	set_name	(0X8053F8CF,	"aTotalIdleTimeL");
	create_strlit	(0X8053F8E7,	0X18);
	set_name	(0X8053F8E7,	"aTotalBusyTimeL");
	create_strlit	(0X8053F8FF,	0X12);
	set_name	(0X8053F8FF,	"aReschedulesD");
	create_strlit	(0X8053F911,	0X17);
	set_name	(0X8053F911,	"aContextSwitche");
	create_strlit	(0X8053F928,	0XF);
	set_name	(0X8053F928,	"aPreemptsD");
	create_strlit	(0X8053F937,	0XD);
	set_name	(0X8053F937,	"aYieldsD");
	create_strlit	(0X8053F944,	0X11);
	set_name	(0X8053F944,	"aInterruptsD");
	create_strlit	(0X8053F955,	0X17);
	set_name	(0X8053F955,	"aTimerInterrupt");
	create_strlit	(0X8053F96C,	0XD);
	set_name	(0X8053F96C,	"aTimersD");
	create_strlit	(0X8053F979,	0XE);
	set_name	(0X8053F979,	"aThreadList");
	create_strlit	(0X8053F987,	0X14);
	set_name	(0X8053F987,	"aListKernelThre");
	create_strlit	(0X8053F99B,	0XC);
	set_name	(0X8053F99B,	"aThreadstats");
	create_strlit	(0X8053F9A7,	0X18);
	set_name	(0X8053F9A7,	"aThreadLevelSta");
	create_strlit	(0X8053F9BF,	0XB);
	set_name	(0X8053F9BF,	"aThreadload");
	create_strlit	(0X8053F9CA,	0X1B);
	set_name	(0X8053F9CA,	"aToggleThreadLo");
	create_strlit	(0X8053F9E5,	0XF);
	set_name	(0X8053F9E5,	"aKernelEventC");
	create_strlit	(0X8053F9F4,	0X18);
	set_name	(0X8053F9F4,	"aEMagicEventMag");
	create_strlit	(0X8053FA0C,	0X16);
	set_name	(0X8053FA0C,	"aInitializingTh");
	create_strlit	(0X8053FA22,	0X15);
	set_name	(0X8053FA22,	"aInitializingTi");
	create_strlit	(0X8053FA37,	0XF);
	set_name	(0X8053FA37,	"aKernelMutexC");
	create_strlit	(0X8053FA46,	0X18);
	set_name	(0X8053FA46,	"aMMagicMutexMag");
	create_strlit	(0X8053FA5E,	0X5A);
	set_name	(0X8053FA5E,	"aMutexDestroyTh");
	create_strlit	(0X8053FAB8,	0X52);
	set_name	(0X8053FAB8,	"aMutexAcquireTi");
	create_strlit	(0X8053FB0A,	0X5);
	set_name	(0X8053FB0A,	"aNone");
	create_strlit	(0X8053FB0F,	0X5A);
	set_name	(0X8053FB0F,	"aMutexReleaseTh");
	create_strlit	(0X8053FB69,	0XF);
	set_name	(0X8053FB69,	"aKernelTimerC");
	create_strlit	(0X8053FB78,	0X25);
	set_name	(0X8053FB78,	"aTimerTimerMagi");
	create_strlit	(0X8053FB9D,	0X28);
	set_name	(0X8053FB9D,	"aBigTimeGtTimer");
	create_strlit	(0X8053FBC5,	0X16);
	set_name	(0X8053FBC5,	"aInCriticalSect");
	create_strlit	(0X8053FBDB,	0X1A);
	set_name	(0X8053FBDB,	"aTimerPAlreadyI");
	create_strlit	(0X8053FBF5,	0X60);
	set_name	(0X8053FBF5,	"aSchdErrInvalid");
	create_strlit	(0X8053FC55,	0X1F);
	set_name	(0X8053FC55,	"aSchdErrAdmissi");
	create_strlit	(0X8053FC74,	0X3F);
	set_name	(0X8053FC74,	"aSchdErrInvalid_0");
	create_strlit	(0X8053FCB3,	0X10);
	set_name	(0X8053FCB3,	"aKernelThreadC");
	create_strlit	(0X8053FCC3,	0X19);
	set_name	(0X8053FCC3,	"aTMagicThreadMa");
	create_strlit	(0X8053FCDC,	0X19);
	set_name	(0X8053FCDC,	"aTStateThreadRe");
	create_strlit	(0X8053FCF5,	0X1E);
	set_name	(0X8053FCF5,	"aListInListTQue");
	create_strlit	(0X8053FD13,	0X1C);
	set_name	(0X8053FD13,	"aTStateThreadSl");
	create_strlit	(0X8053FD2F,	0X16);
	set_name	(0X8053FD2F,	"aInInterruptCon");
	create_strlit	(0X8053FD45,	0X16);
	set_name	(0X8053FD45,	"aRunQueueBitmap");
	create_strlit	(0X8053FD5B,	0XA);
	set_name	(0X8053FD5B,	"aNewthread");
	create_strlit	(0X8053FD65,	0X2C);
	set_name	(0X8053FD65,	"aNewthreadSaved");
	create_strlit	(0X8053FD91,	0X26);
	set_name	(0X8053FD91,	"aCurrentThreadM");
	create_strlit	(0X8053FDB7,	0X28);
	set_name	(0X8053FDB7,	"aCurrentThreadS_0");
	create_strlit	(0X8053FDDF,	0X19);
	set_name	(0X8053FDDF,	"aTStateThreadDe");
	create_strlit	(0X8053FDF8,	0X28);
	set_name	(0X8053FDF8,	"aCurrentThreadS");
	create_strlit	(0X8053FE20,	0X2C);
	set_name	(0X8053FE20,	"aSleepingInDead");
	create_strlit	(0X8053FE4C,	0XA);
	set_name	(0X8053FE4C,	"src");
	create_strlit	(0X8053FE56,	0X5);
	set_name	(0X8053FE56,	"aIdle");
	create_strlit	(0X8053FE5B,	0X5);
	set_name	(0X8053FE5B,	"aUnkn");
	create_strlit	(0X8053FE60,	0X18);
	set_name	(0X8053FE60,	"aDumpThreadTPS");
	create_strlit	(0X8053FE78,	0X43);
	set_name	(0X8053FE78,	"aStateSPriority");
	create_strlit	(0X8053FEBB,	0X55);
	set_name	(0X8053FEBB,	"aDefaultDeadlin");
	create_strlit	(0X8053FF10,	0X1B);
	set_name	(0X8053FF10,	"aStackPStackSiz");
	create_strlit	(0X8053FF2B,	0X1);
	create_strlit	(0X8053FF2C,	0X1E);
	set_name	(0X8053FF2C,	"aEntryPArgPFlag");
	create_strlit	(0X8053FF4A,	0X23);
	set_name	(0X8053FF4A,	"aWaitQueuePWait");
	create_strlit	(0X8053FF6D,	0X6);
	set_name	(0X8053FF6D,	"aTls");
	create_strlit	(0X8053FF73,	0X14);
	set_name	(0X8053FF73,	"aDRunningThread");
	create_strlit	(0X8053FF87,	0X20);
	set_name	(0X8053FF87,	"aWaitMagicWaitQ");
	create_strlit	(0X8053FFA7,	0X19);
	set_name	(0X8053FFA7,	"aTStateThreadDe_0");
	create_strlit	(0X8053FFC0,	0X1F);
	set_name	(0X8053FFC0,	"aTBlockingWaitQ");
	create_strlit	(0X8053FFDF,	0X1B);
	set_name	(0X8053FFDF,	"aTStateThreadBl");
	create_strlit	(0X8053FFFA,	0X11);
	set_name	(0X8053FFFA,	"aWaitCount0");
	create_strlit	(0X8054000B,	0X24);
	set_name	(0X8054000B,	"aSomehowFellThr");
	create_strlit	(0X8054002F,	0X1F);
	set_name	(0X8054002F,	"aTBlockingWaitQ_0");
	create_strlit	(0X8054004E,	0X32);
	set_name	(0X8054004E,	"aTBlockingWaitQ_1");
	create_strlit	(0X80540080,	0X5);
	set_name	(0X80540080,	"aSusp");
	create_strlit	(0X80540085,	0X4);
	set_name	(0X80540085,	"aRdy");
	create_strlit	(0X80540089,	0X4);
	set_name	(0X80540089,	"aRun");
	create_strlit	(0X8054008D,	0X5);
	set_name	(0X8054008D,	"aBlok");
	create_strlit	(0X80540092,	0X5);
	set_name	(0X80540092,	"aSlep");
	create_strlit	(0X80540097,	0X5);
	set_name	(0X80540097,	"aDeth");
	create_strlit	(0X8054009C,	0XF);
	set_name	(0X8054009C,	"aTreeIsEmpty");
	create_strlit	(0X805400AB,	0X10);
	set_name	(0X805400AB,	"aNoEdfThread");
	create_strlit	(0X805400BB,	0X33);
	set_name	(0X805400BB,	"aSCurTimeLluAbs");
	create_strlit	(0X805400EE,	0X2A);
	set_name	(0X805400EE,	"aPrintingDlThre");
	create_strlit	(0X80540118,	0X25);
	create_strlit	(0X8054013D,	0X36);
	set_name	(0X8054013D,	"aCurBudgetLluNe");
	create_dword	(x=0X80540174);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X80540174,	"_cmd_list_0");
	create_dword	(x=0X80540178);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8054017C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540184);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540188);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8054018C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540190);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540194);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540198);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X80540198,	"CSWTCH.73");
	create_dword	(x=0X8054019C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805401A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805401A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805401A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805401AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X805401B0,	0X10);
	set_name	(0X805401B0,	"aLibCbufCbufC");
	create_strlit	(0X805401C0,	0X5);
	set_name	(0X805401C0,	"aCbuf");
	create_strlit	(0X805401C5,	0X8);
	set_name	(0X805401C5,	"aLen0");
	create_strlit	(0X805401CD,	0XC);
	set_name	(0X805401CD,	"aIspow2Len");
	create_strlit	(0X805401D9,	0X5);
	set_name	(0X805401D9,	"aBuf");
	create_strlit	(0X805401DE,	0X1E);
	set_name	(0X805401DE,	"aLenValpow2Cbuf");
	create_dword	(x=0X805401FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X805401FC,	"_cmd_list_1");
	create_dword	(x=0X80540200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540208);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8054020C);
	create_dword	(x=0X80540210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540214);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540218);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8054021C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540220);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540224);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80540228);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X8054022C,	0X12);
	set_name	(0X8054022C,	"aCommandHistory");
	create_byte	(0X8054023E);
	create_strlit	(0X8054023F,	0X4);
	set_name	(0X8054023F,	"aS");
	create_strlit	(0X80540243,	0X12);
	set_name	(0X80540243,	"aArgcDArgvP");
	create_strlit	(0X80540255,	0X22);
	set_name	(0X80540255,	"aDStrSIDUXBD");
	create_strlit	(0X80540277,	0XF);
	set_name	(0X80540277,	"aCommandList");
	create_strlit	(0X80540286,	0XC);
	set_name	(0X80540286,	"a16sS");
	create_strlit	(0X80540292,	0X5);
	set_name	(0X80540292,	"a1d");
	create_strlit	(0X80540297,	0X17);
	set_name	(0X80540297,	"aErrorLineTooLo");
	create_strlit	(0X805402AE,	0X3);
	set_name	(0X805402AE,	"s");
	create_strlit	(0X805402B1,	0X16);
	set_name	(0X805402B1,	"aLibConsoleCons");
	create_strlit	(0X805402C7,	0XA);
	set_name	(0X805402C7,	"aC0");
	create_strlit	(0X805402D1,	0X9);
	set_name	(0X805402D1,	"aC");
	create_strlit	(0X805402DA,	0X9);
	set_name	(0X805402DA,	"aC_0");
	create_strlit	(0X805402E3,	0X9);
	set_name	(0X805402E3,	"aC_1");
	create_strlit	(0X805402EC,	0X4);
	set_name	(0X805402EC,	"aOff");
	create_strlit	(0X805402F0,	0X13);
	set_name	(0X805402F0,	"aCommandNotFoun");
	create_strlit	(0X80540303,	0X17);
	set_name	(0X80540303,	"aSNotEnoughMemo");
	create_strlit	(0X8054031A,	0X1C);
	set_name	(0X8054031A,	"aEnteringMainCo");
	create_strlit	(0X80540336,	0X1B);
	set_name	(0X80540336,	"aExitingMainCon");
	create_strlit	(0X80540351,	0X6);
	set_name	(0X80540351,	"aBlock");
	create_strlit	(0X80540357,	0X14);
	set_name	(0X80540357,	"aBlockNextNull");
	create_strlit	(0X8054036B,	0X5);
	set_name	(0X8054036B,	"aHelp");
	create_strlit	(0X80540370,	0XA);
	set_name	(0X80540370,	"aThisList");
	create_strlit	(0X8054037A,	0X5);
	set_name	(0X8054037A,	"aEcho");
	create_strlit	(0X8054037F,	0X5);
	set_name	(0X8054037F,	"aTest");
	create_strlit	(0X80540384,	0X1B);
	set_name	(0X80540384,	"aTestTheCommand");
	create_strlit	(0X8054039F,	0X10);
	set_name	(0X8054039F,	"aCommandHistory_0");
	create_strlit	(0X805403AF,	0XD);
	set_name	(0X805403AF,	"aCommandLoop");
	create_strlit	(0X805403BC,	0X14);
	set_name	(0X805403BC,	"aPanicCallerP");
	create_strlit	(0X805403D0,	0XA);
	set_name	(0X805403D0,	"a0x08lx");
	create_strlit	(0X805403DA,	0X16);
	set_name	(0X805403DA,	"a08x08x08x08x");
	create_strlit	(0X805403F0,	0X3);
	set_name	(0X805403F0,	"aC_2");
	create_strlit	(0X805403F3,	0X3);
	create_strlit	(0X805403F6,	0XA);
	set_name	(0X805403F6,	"a0x02hhx");
	create_strlit	(0X80540400,	0X10);
	set_name	(0X80540400,	"aLibHeapHeapC");
	create_strlit	(0X80540410,	0X21);
	set_name	(0X80540410,	"aChunkEndVaddrT");
	create_strlit	(0X80540431,	0X16);
	set_name	(0X80540431,	"aNotEnoughArgum");
	create_strlit	(0X80540447,	0X5);
	set_name	(0X80540447,	"aInfo");
	create_strlit	(0X8054044C,	0XC);
	set_name	(0X8054044C,	"aHeapDump");
	create_strlit	(0X80540458,	0X15);
	set_name	(0X80540458,	"aBasePLen0xZx");
	create_strlit	(0X8054046D,	0XD);
	set_name	(0X8054046D,	"aFreeList");
	create_strlit	(0X8054047A,	0X21);
	set_name	(0X8054047A,	"aBasePEnd0xLxLe");
	create_strlit	(0X8054049B,	0X15);
	set_name	(0X8054049B,	"aDelayedFreeLis");
	create_strlit	(0X805404B0,	0X16);
	set_name	(0X805404B0,	"aUnrecognizedCo");
	create_strlit	(0X805404C6,	0X1C);
	set_name	(0X805404C6,	"aLenSizeofVoid0");
	create_strlit	(0X805404E2,	0X23);
	set_name	(0X805404E2,	"aChunkLenSizeof");
	create_strlit	(0X80540505,	0X13);
	set_name	(0X80540505,	"aChunkLenSize");
	create_strlit	(0X80540518,	0X18);
	set_name	(0X80540518,	"aAsMagicHeapMag");
	create_strlit	(0X80540530,	0X14);
	set_name	(0X80540530,	"aHeapDebugComma");
	create_dword	(0X80540544);
	create_dword	(0X80540548);
	create_dword	(0X8054054C);
	create_strlit	(0X80540550,	0X17);
	set_name	(0X80540550,	"a0123456789abcd");
	create_strlit	(0X80540567,	0XE);
	set_name	(0X80540567,	"aGeneralError");
	create_strlit	(0X80540575,	0X9);
	set_name	(0X80540575,	"aNoError");
	create_strlit	(0X8054057E,	0X43);
	set_name	(0X8054057E,	"a0123456789abcd_0");
	create_strlit	(0X805405C1,	0X2B);
	set_name	(0X805405C1,	"aErrorSAtDCanno");
	create_strlit	(0X805405EC,	0X37);
	set_name	(0X805405EC,	"aErrorSAtDMailb");
	create_strlit	(0X80540623,	0X4E);
	set_name	(0X80540623,	"aErrorSAtDMailb_0");
	create_strlit	(0X80540671,	0X33);
	set_name	(0X80540671,	"aMsgNnCodecDeta");
	create_strlit	(0X805406A4,	0XB);
	set_name	(0X805406A4,	"aDispatcher");
	create_strlit	(0X805406AF,	0X37);
	set_name	(0X805406AF,	"aErrorSAtDCould");
	create_strlit	(0X805406E6,	0X36);
	set_name	(0X805406E6,	"aErrorSAtDAnErr");
	create_strlit	(0X8054071C,	0X3C);
	set_name	(0X8054071C,	"aErrorSAtDCould_0");
	create_strlit	(0X80540758,	0X16);
	set_name	(0X80540758,	"aOpusmessagedis");
	create_strlit	(0X8054076E,	0X13);
	set_name	(0X8054076E,	"aWorkmemoryNull");
	create_strlit	(0X80540781,	0X27);
	set_name	(0X80540781,	"aChannelcount1C");
	create_strlit	(0X805407A8,	0XF);
	set_name	(0X805407A8,	"aSamplerate0");
	create_strlit	(0X805407B7,	0X45);
	set_name	(0X805407B7,	"aWorkmemorysize");
	create_strlit	(0X805407FC,	0XE);
	set_name	(0X805407FC,	"aFramesize0");
	create_strlit	(0X8054080A,	0X87);
	set_name	(0X8054080A,	"aTotalstreamcou");
	create_strlit	(0X80540891,	0X11);
	set_name	(0X80540891,	"aChannelcount0");
	create_strlit	(0X805408A2,	0X67);
	set_name	(0X805408A2,	"aWorkmemorysize_0");
	create_strlit	(0X80540909,	0X28);
	set_name	(0X80540909,	"aErrorSAtDUnkno");
	create_strlit	(0X80540931,	0X7);
	set_name	(0X80540931,	"aDecode");
	create_strlit	(0X80540938,	0X10);
	set_name	(0X80540938,	"aIsinitialized");
	create_strlit	(0X80540948,	0X3);
	set_name	(0X80540948,	"aS_0");
	create_strlit	(0X8054094B,	0X9);
	set_name	(0X8054094B,	"aSenddata");
	create_strlit	(0X80540954,	0X20);
	set_name	(0X80540954,	"aDataMailboxhea");
	create_dword	(0X80540974);
	create_dword	(0X80540978);
	create_dword	(0X8054097C);
	create_dword	(0X80540980);
	create_word	(0X80540984);
	create_word	(0X80540986);
	create_word	(0X80540988);
	create_byte	(x=0X80540996);
	make_array	(x,	0X42);
	op_chr		(x,	0);
	create_strlit	(0X805409D8,	0X8);
	set_name	(0X805409D8,	"aSuccess");
	create_strlit	(0X805409E0,	0X11);
	set_name	(0X805409E0,	"aInvalidArgumen");
	create_strlit	(0X805409F1,	0X11);
	set_name	(0X805409F1,	"aBufferTooSmall");
	create_strlit	(0X80540A02,	0XF);
	set_name	(0X80540A02,	"aInternalError");
	create_strlit	(0X80540A11,	0X11);
	set_name	(0X80540A11,	"aCorruptedStrea");
	create_strlit	(0X80540A22,	0X18);
	set_name	(0X80540A22,	"aRequestNotImpl");
	create_strlit	(0X80540A3A,	0XE);
	set_name	(0X80540A3A,	"aInvalidState");
	create_strlit	(0X80540A48,	0X19);
	set_name	(0X80540A48,	"aMemoryAllocati");
	create_strlit	(0X80540A61,	0XE);
	set_name	(0X80540A61,	"aUnknownError");
	create_strlit	(0X80540A6F,	0X12);
	set_name	(0X80540A6F,	"aLibopus11Fixed");
	create_dword	(0X80540A94);
	make_array	(0X80540A94,	0X8);
	create_dword	(0X80540AB4);
	make_array	(0X80540AB4,	0X81);
	MakeStruct	(0X80540CB8,	"OpusCustomMode");
	set_name	(0X80540CB8,	"gOpusCustomMode");
	set_name	(0X80540D1C,	"gOpusCustomMode_eBands");
	set_name	(0X80540D48,	"gOpusCustomMode_allocVectors");
	set_name	(0X80540E30,	"gOpusCustomMode_logN");
	set_name	(0X80540E5A,	"gOpusCustomMode_window");
	set_name	(0X80540F4C,	"gOpusCustomMode_kfft1");
	set_name	(0X80540F88,	"gOpusCustomMode_mdctTrig");
	set_name	(0X80541D98,	"gOpusCustomMode_cacheIdx");
	set_name	(0X80541E6A,	"gOpusCustomMode_cacheBits");
	set_name	(0X80541FF2,	"gOpusCustomMode_cacheCaps");
	set_name	(0X80542DBC,	"gOpusCustomMode_kfft2");
	set_name	(0X80542EE8,	"gOpusCustomMode_kfft3");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_7(void) {
        auto x;
#define id x

	set_name	(0X80542F9C,	"gOpusCustomMode_kfft4");
	create_dword	(0X80542FD8);
	make_array	(0X80542FD8,	0X10);
	create_byte	(0X80543018);
	create_byte	(0X80543019);
	create_byte	(0X8054301A);
	create_byte	(0X8054301B);
	create_word	(0X80543182);
	make_array	(0X80543182,	0X4);
	create_word	(0X8054318A);
	make_array	(0X8054318A,	0X4);
	create_byte	(0X80543195);
	make_array	(0X80543195,	0X1B);
	create_word	(0X80543E78);
	make_array	(0X80543E78,	0X4);
	create_byte	(0X80544396);
	make_array	(0X80544396,	0X10);
	create_byte	(0X805443A6);
	make_array	(0X805443A6,	0X10);
	create_dword	(0X805443C8);
	make_array	(0X805443C8,	0X1E);
	create_byte	(0X8054585C);
	create_dword	(0X80545984);
	create_dword	(0X80546A68);
	create_dword	(0X80546A6C);
	create_dword	(0X80546A80);
	create_dword	(0X80546A84);
	create_dword	(x=0X80546AC0);
	make_array	(x,	0X15);
	op_dec		(x,	0);
	set_name	(0X80546AC0,	"adsp_freq_table");
	create_dword	(0X80546B14);
	create_byte	(0X80546B20);
	set_name	(0X80546B20,	"echo");
	create_dword	(x=0X80546B24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X80546B24,	"__stdio_FILEs");
	create_dword	(x=0X80546B28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80546B2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80546B30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80546B34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	MakeStruct	(0X80546B38,	"FILE_0");
	set_name	(0X80546B38,	"fp");
	create_dword	(x=0X80546B4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80546B50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80546B54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80546B58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80546B5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80546B60);
	set_name	(0X80546B60,	"randseed");
	MakeStruct	(0X80546B64,	"cmd_block");
	set_name	(0X80546B64,	"_cmd_block_interrupts");
	create_dword	(0X80546B70);
	create_dword	(0X80546B74);
	create_dword	(x=0X80546B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80546B7C);
	create_dword	(0X80546B80);
	create_dword	(x=0X80546B84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	MakeStruct	(0X80546B88,	"app_descriptor");
	set_name	(0X80546B88,	"_app_shell");
	create_dword	(0X80546B9C);
	set_name	(0X80546B9C,	"_apps_end");
	MakeStruct	(0X80546BA0,	"adsp_app_descriptor");
	set_name	(0X80546BA0,	"gMix_SetupInfo");
	MakeStruct	(0X80546C08,	"adsp_app_descriptor");
	set_name	(0X80546C08,	"AudioRenderer_SetupInfo");
	MakeStruct	(0X80546C70,	"adsp_app_descriptor");
	set_name	(0X80546C70,	"OpusSetupInfo");
	create_dword	(x=0X80546CD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80547000);
	set_name	(0X80547000,	"adsp_os_suspended");
	create_dword	(x=0X80547004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X80547004,	"adsp_cpu_lr");
	create_dword	(0X80547008);
	MakeStruct	(0X80548000,	"gMixData");
	make_array	(0X80548000,	0);
	set_name	(0X80548000,	"gMix_Data");
	create_dword	(0X80778000);
	make_array	(0X80778000,	0X1000);
	set_name	(0X80778000,	"tt");
	create_dword	(0X8077C000);
	set_name	(0X8077C000,	"chip_id");
	create_dword	(0X8077C004);
	set_name	(0X8077C004,	"gSessionRegistryPtr");
	create_dword	(0X8077C008);
	set_name	(0X8077C008,	"gMixDataPtr");
	create_dword	(0X8077C010);
	make_array	(0X8077C010,	0X970C);
	set_name	(0X8077C010,	"gSessionRegistry");
	create_byte	(0X807A1C40);
	set_name	(0X807A1C40,	"gSessionRegistryInitialised");
	MakeStruct	(0X807A1C44,	"adsp_mbx_t");
	set_name	(0X807A1C44,	"gAudioRenderMailbox");
	MakeStruct	(0X807A1CC4,	"adsp_mbx_t");
	set_name	(0X807A1CC4,	"gAudioRenderMapMailbox");
	create_dword	(0X807A1D44);
	set_name	(0X807A1D44,	"gAudioRender_MapUnmapThread");
	MakeStruct	(0X807A1D48,	"nn::audio::dsp::CommandListProcessor");
	make_array	(0X807A1D48,	0);
	set_name	(0X807A1D48,	"gCommandListProcessor1");
	MakeStruct	(0X807A1D88,	"nn::audio::dsp::CommandListProcessor");
	make_array	(0X807A1D88,	0);
	set_name	(0X807A1D88,	"gCommandListProcessor2");
	set_name	(0X807A1DC8,	"AudioRenderer_Main_Data");
	MakeStruct	(0X807A1E38,	"HardwareDevice");
	make_array	(0X807A1E38,	0X6);
	set_name	(0X807A1E38,	"gDeviceSessions");
	MakeStruct	(0X807A7EF8,	"semaphore_t");
	set_name	(0X807A7EF8,	"gDeviceSemaphore");
	MakeStruct	(0X807A7F20,	"MixDevice");
	make_array	(0X807A7F20,	0X6);
	set_name	(0X807A7F20,	"gMixDevices");
	create_dword	(0X807A8550);
	set_name	(0X807A8550,	"NumTimesProcessed");
	create_word	(0X807A8554);
	make_array	(0X807A8554,	0X4);
	set_name	(0X807A8554,	"DecodeWaveBuffers_SampleHistory");
	create_byte	(0X807B0364);
	set_name	(0X807B0364,	"Reverb_SomethingInitialised");
	create_dword	(0X807B0368);
	set_name	(0X807B0368,	"Reverb_SampleRateThing");
	create_dword	(0X807B036C);
	set_name	(0X807B036C,	"host_cpu_com_thread");
	create_dword	(0X807B0370);
	set_name	(0X807B0370,	"dummy_idle_thread");
	MakeStruct	(0X807B0374,	"adsp_mbx_t");
	set_name	(0X807B0374,	"host_cpu_com_mbox");
	MakeStruct	(0X807B03F8,	"int_handler_struct");
	make_array	(0X807B03F8,	0X56);
	set_name	(0X807B03F8,	"int_handler_table");
	create_dword	(0X807B06A8);
	set_name	(0X807B06A8,	"t_callback");
	create_dword	(0X807B06AC);
	set_name	(0X807B06AC,	"callback_us_timer");
	create_dword	(0X807B06B0);
	set_name	(0X807B06B0,	"save_private_counter_reg");
	create_dword	(0X807B06B4);
	set_name	(0X807B06B4,	"callback_arg");
	create_dword	(0X807B06B8);
	set_name	(0X807B06B8,	"callback_us_arg");
	create_qword	(0X807B06C0);
	set_name	(0X807B06C0,	"save_global_counter_reg");
	create_dword	(0X807B06C8);
	set_name	(0X807B06C8,	"t_callback_hires");
	create_dword	(0X807B06CC);
	set_name	(0X807B06CC,	"ram_log");
	MakeStruct	(0X807B06D0,	"cbuf_t");
	set_name	(0X807B06D0,	"debug_rx_buf");
	MakeStruct	(0X807B070C,	"adsp_mbx_t");
	set_name	(0X807B070C,	"stdio_mbox");
	create_byte	(0X807B078C);
	set_name	(0X807B078C,	"new_line");
	create_byte	(0X807B0794);
	set_name	(0X807B0794,	"mb_debug_ready");
	set_name	(0X807B0798,	"cur_adsp_freq");
	MakeStruct	(0X807B07A0,	"mbox_t");
	set_name	(0X807B07A0,	"mbox");
	create_dword	(0X807B0820);
	set_name	(0X807B0820,	"curr_hw_mbx");
	create_dword	(0X807B1834);
	set_name	(0X807B1834,	"l2x0_sets");
	create_word	(0X807B1838);
	set_name	(0X807B1838,	"l2x0_cache_id");
	create_dword	(0X807B183C);
	set_name	(0X807B183C,	"l2x0_base");
	create_byte	(x=0X807B1840);
	make_array	(x,	0X4);
	op_chr		(x,	0);
	set_name	(0X807B1840,	"l2x0_ways");
	create_dword	(0X807B1844);
	set_name	(0X807B1844,	"l2x0_size");
	create_dword	(0X807B1848);
	set_name	(0X807B1848,	"l2x0_way_mask");
	create_dword	(0X807B1854);
	create_dword	(0X807B185C);
	set_name	(0X807B185C,	"tt_level2_count");
	create_byte	(0X807B1860);
	set_name	(0X807B1860,	"assert_on_l1l2_conv");
	create_dword	(0X807B1864);
	set_name	(0X807B1864,	"arch_cycles_high_word.4025");
	MakeStruct	(0X807B186C,	"private_struct");
	set_name	(0X807B186C,	"priv");
	MakeStruct	(0X807B18F8,	"thread_stats");
	set_name	(0X807B18F8,	"old_stats.4351");
	MakeStruct	(0X807B1960,	"timer_t");
	set_name	(0X807B1960,	"timer");
	create_byte	(0X807B1990);
	set_name	(0X807B1990,	"showthreadload.4361");
	create_dword	(0X807B1998);
	set_name	(0X807B1998,	"last_idle_time.4352");
	MakeStruct	(0X807B19A0,	"list_node");
	set_name	(0X807B19A0,	"timer_queue");
	create_qword	(0X807B19B0);
	create_qword	(0X807B19B8);
	create_dword	(0X807B19C8);
	set_name	(0X807B19C8,	"current_t_cycle_cnt");
	MakeStruct	(0X807B19D0,	"timer_t");
	set_name	(0X807B19D0,	"preempt_timer");
	MakeStruct	(0X807B1A00,	"list_node");
	make_array	(0X807B1A00,	0X40);
	set_name	(0X807B1A00,	"run_queue");
	MakeStruct	(0X807B1C00,	"list_node");
	set_name	(0X807B1C00,	"thread_list");
	MakeStruct	(0X807B1C08,	"thread_t");
	set_name	(0X807B1C08,	"bootstrap_thread");
	create_dword	(0X807B1D00);
	set_name	(0X807B1D00,	"history");
	create_dword	(0X807B1D04);
	set_name	(0X807B1D04,	"debug_buffer");
	create_byte	(0X807B1D08);
	set_name	(0X807B1D08,	"abort_script");
	create_dword	(0X807B1D0C);
	set_name	(0X807B1D0C,	"history_next");
	create_dword	(0X807B1D10);
	set_name	(0X807B1D10,	"command_list");
	create_dword	(0X807B1D14);
	set_name	(0X807B1D14,	"command_lock");
	create_dword	(0X807B1D18);
	make_array	(0X807B1D18,	0XE);
	create_dword	(0X807B1D50);
	create_dword	(0X807B1D54);
	MakeStruct	(0X807B1D58,	"OpusMailbox");
	make_array	(0X807B1D58,	0);
	set_name	(0X807B1D58,	"gOpusMailbox");
	create_byte	(0X807B1DDC);
	create_dword	(0X807B1DE0);
	create_dword	(0X807B1DE4);
	set_name	(0X807B1DE4,	"gOpusSharedMemory");
	create_byte	(0X807B1DE8);
	set_name	(0X807B1DE8,	"OpusMainStructInitialised");
	MakeStruct	(0X807B1DEC,	"OpusMainStruct");
	set_name	(0X807B1DEC,	"gOpusMainStruct");
	create_byte	(x=0X807B1DF8);
	make_array	(x,	0X80);
	op_chr		(x,	0);
	create_dword	(0X807B1E78);
	create_dword	(0X807B1E7C);
	create_dword	(0X807B1E80);
	set_name	(0X807B1E80,	"cpu_gic");
	create_dword	(0X807B1E88);
	make_array	(0X807B1E88,	0X200);
	set_name	(0X807B1E88,	"adsp_mailboxes");
	MakeStruct	(0X807B2688,	"mailbox_attributes");
	make_array	(0X807B2688,	0X200);
	set_name	(0X807B2688,	"adsp_mailbox_attributes");
	MakeStruct	(0X807B3688,	"adsp_hw_mbx_t");
	make_array	(0X807B3688,	0X2);
	set_name	(0X807B3688,	"hw_mbx");
	create_byte	(0X807B5730);
	make_array	(0X807B5730,	0X44);
	set_name	(0X807B5730,	"adsp_sw_mbx_map");
	MakeStruct	(0X807B5774,	"outer_cache_fns");
	set_name	(0X807B5774,	"outer_cache");
	create_dword	(0X807B5798);
	set_name	(0X807B5798,	"edf_ready_tree");
	create_dword	(0X807B579C);
	set_name	(0X807B579C,	"current_thread");
	create_dword	(0X807B57A0);
	set_name	(0X807B57A0,	"cur_budget");
	MakeStruct	(0X807B57A8,	"thread_stats");
	set_name	(0X807B57A8,	"thread_stats_0");
	create_dword	(0X807B5810);
	set_name	(0X807B5810,	"critical_section_count");
	set_name	(0X807B5814,	"in_interrupt_context");
	create_dword	(0X807B5818);
	set_name	(0X807B5818,	"idle_thread");
	create_dword	(0X807B5820);
	set_name	(0X807B5820,	"edf_t_cycle_cnt");
	create_qword	(0X807B5828);
	set_name	(0X807B5828,	"run_queue_bitmap");
	create_dword	(0X807B5830);
	set_name	(0X807B5830,	"lastresult");
}

static Functions_0(void) {

	add_func    (0X80500000,0X80500004);
	set_func_flags(0X80500000,0x1000);
	SetType(0X80500000, "void __noreturn start();");
	add_func    (0X80500004,0X80500008);
	set_func_flags(0X80500004,0x1481);
	SetType(0X80500004, "void __fastcall __noreturn arm_undefined(int, int, int, int, int);");
	add_func    (0X80500008,0X8050000C);
	set_func_flags(0X80500008,0x14c1);
	SetType(0X80500008, "void __fastcall __noreturn arm_syscall(int, int, int, int, int);");
	add_func    (0X8050000C,0X80500010);
	set_func_flags(0X8050000C,0x14c1);
	SetType(0X8050000C, "void __fastcall __noreturn arm_prefetch_abort(int, int, int, int, int);");
	add_func    (0X80500010,0X80500014);
	set_func_flags(0X80500010,0x14c1);
	SetType(0X80500010, "void __fastcall __noreturn arm_data_abort(int, int, int, int, int);");
	add_func    (0X80500014,0X80500018);
	set_func_flags(0X80500014,0x14c1);
	SetType(0X80500014, "void __noreturn arm_reserved();");
	add_func    (0X80500018,0X8050001C);
	set_func_flags(0X80500018,0x14c1);
	SetType(0X80500018, "void __fastcall __noreturn j_arm_irq(int, int, int, int, int);");
	add_func    (0X8050001C,0X80500020);
	set_func_flags(0X8050001C,0x14c1);
	SetType(0X8050001C, "void __fastcall __noreturn j_arm_fiq(int, int, int, int, int);");
	add_func    (0X80500020,0X8050007C);
	set_func_flags(0X80500020,0x1400);
	SetType(0X80500020, "void __noreturn platform_reset();");
	add_func    (0X8050008C,0X80500134);
	set_func_flags(0X8050008C,0x1401);
	SetType(0X8050008C, "void __noreturn sub_8050008C();");
	add_func    (0X805001CC,0X805001E4);
	set_func_flags(0X805001CC,0x1411);
	SetType(0X805001CC, "void __fastcall __noreturn sub_805001CC(int, char *, int);");
	set_frame_size(0X805001CC, 0X10, 8, 0);
	add_func    (0X80500206,0X8050021E);
	set_func_flags(0X80500206,0x1411);
	SetType(0X80500206, "void __fastcall __noreturn sub_80500206(int, char *, int);");
	set_frame_size(0X80500206, 0X10, 8, 0);
	add_func    (0X80500390,0X80500398);
	set_func_flags(0X80500390,0x1400);
	SetType(0X80500390, "int __fastcall sub_80500390(int result);");
	add_func    (0X80500398,0X805003A4);
	set_func_flags(0X80500398,0x1411);
	SetType(0X80500398, "void __fastcall __noreturn sub_80500398(int, int, int, int);");
	set_frame_size(0X80500398, 0X10, 8, 0);
	add_func    (0X805003C6,0X805003D2);
	set_func_flags(0X805003C6,0x1411);
	SetType(0X805003C6, "void __fastcall __noreturn sub_805003C6(int, int, int, int);");
	set_frame_size(0X805003C6, 0X10, 8, 0);
	add_func    (0X805003F4,0X80500400);
	set_func_flags(0X805003F4,0x1411);
	SetType(0X805003F4, "void __fastcall __noreturn sub_805003F4(int, int, int, int);");
	set_frame_size(0X805003F4, 0X10, 8, 0);
	add_func    (0X80500422,0X8050042E);
	set_func_flags(0X80500422,0x1411);
	SetType(0X80500422, "void __fastcall __noreturn sub_80500422(int, int, int, int);");
	set_frame_size(0X80500422, 0X10, 8, 0);
	add_func    (0X80500450,0X8050045C);
	set_func_flags(0X80500450,0x1411);
	SetType(0X80500450, "void __fastcall __noreturn sub_80500450(int, int, int, int);");
	set_frame_size(0X80500450, 0X10, 8, 0);
	add_func    (0X8050047E,0X8050048A);
	set_func_flags(0X8050047E,0x1411);
	SetType(0X8050047E, "void __fastcall __noreturn sub_8050047E(int, int, int, int);");
	set_frame_size(0X8050047E, 0X10, 8, 0);
	add_func    (0X805004AC,0X805004B8);
	set_func_flags(0X805004AC,0x1411);
	SetType(0X805004AC, "void __fastcall __noreturn sub_805004AC(int, int, int, int);");
	set_frame_size(0X805004AC, 0X10, 8, 0);
	add_func    (0X805004DA,0X805004E6);
	set_func_flags(0X805004DA,0x1411);
	SetType(0X805004DA, "void __fastcall __noreturn sub_805004DA(int, int, int, int);");
	set_frame_size(0X805004DA, 0X10, 8, 0);
	add_func    (0X80500508,0X80500514);
	set_func_flags(0X80500508,0x1411);
	SetType(0X80500508, "void __fastcall __noreturn sub_80500508(int, int, int, int);");
	set_frame_size(0X80500508, 0X10, 8, 0);
	add_func    (0X80500536,0X80500542);
	set_func_flags(0X80500536,0x1411);
	SetType(0X80500536, "void __fastcall __noreturn sub_80500536(int, int, int, int);");
	set_frame_size(0X80500536, 0X10, 8, 0);
	add_func    (0X80500564,0X80500570);
	set_func_flags(0X80500564,0x1411);
	SetType(0X80500564, "void __fastcall __noreturn sub_80500564(int, int, int, int);");
	set_frame_size(0X80500564, 0X10, 8, 0);
	add_func    (0X80500592,0X8050059E);
	set_func_flags(0X80500592,0x1411);
	SetType(0X80500592, "void __fastcall __noreturn sub_80500592(int, int, int, int);");
	set_frame_size(0X80500592, 0X10, 8, 0);
	add_func    (0X805005C0,0X805005CC);
	set_func_flags(0X805005C0,0x1411);
	SetType(0X805005C0, "void __fastcall __noreturn sub_805005C0(int, int, int, int);");
	set_frame_size(0X805005C0, 0X10, 8, 0);
	add_func    (0X805005F0,0X805005FA);
	set_func_flags(0X805005F0,0x1411);
	SetType(0X805005F0, "void __fastcall __noreturn pure_virtual(int, int, int, int);");
	set_frame_size(0X805005F0, 0X8, 8, 0);
	add_func    (0X80500608,0X8050060C);
	set_func_flags(0X80500608,0x1400);
	SetType(0X80500608, "int sub_80500608();");
	add_func    (0X8050060C,0X80500610);
	set_func_flags(0X8050060C,0x1400);
	SetType(0X8050060C, "int __fastcall sub_8050060C(int);");
	add_func    (0X80500610,0X80500622);
	set_func_flags(0X80500610,0x1400);
	SetType(0X80500610, "int __fastcall operator_delete(int, char *, int);");
	set_frame_size(0X80500610, 0X8, 0, 0);
	add_func    (0X80500624,0X8050066C);
	set_func_flags(0X80500624,0x1410);
	SetType(0X80500624, "void SessionRegistry_Init();");
	set_frame_size(0X80500624, 0X8, 8, 0);
	add_func    (0X8050066C,0X8050066E);
	set_func_flags(0X8050066C,0x1440);
	SetType(0X8050066C, "void nullsub_10();");
	add_func    (0X8050066E,0X80500682);
	set_func_flags(0X8050066E,0x1400);
	SetType(0X8050066E, "void ShutdownSessionRegistry();");
	set_frame_size(0X8050066E, 0X8, 0, 0);
	add_func    (0X80500682,0X80500698);
	set_func_flags(0X80500682,0x1400);
	SetType(0X80500682, "int __fastcall sub_80500682(int);");
	set_frame_size(0X80500682, 0X8, 0, 0);
	add_func    (0X80500698,0X805006B0);
	set_func_flags(0X80500698,0x1400);
	SetType(0X80500698, "unsigned int __fastcall sub_80500698(int, unsigned int);");
	set_frame_size(0X80500698, 0X8, 0, 0);
	add_func    (0X805006B0,0X805006C6);
	set_func_flags(0X805006B0,0x1400);
	SetType(0X805006B0, "int __fastcall sub_805006B0(int);");
	set_frame_size(0X805006B0, 0X8, 0, 0);
	add_func    (0X805006C6,0X805006DE);
	set_func_flags(0X805006C6,0x1400);
	SetType(0X805006C6, "void __fastcall sub_805006C6(int, u32);");
	set_frame_size(0X805006C6, 0X8, 0, 0);
	add_func    (0X805006DE,0X805006F4);
	set_func_flags(0X805006DE,0x1400);
	SetType(0X805006DE, "semaphore_t *__fastcall sub_805006DE(int sessioNType);");
	set_frame_size(0X805006DE, 0X8, 0, 0);
	add_func    (0X805006F4,0X8050070C);
	set_func_flags(0X805006F4,0x1400);
	SetType(0X805006F4, "void __fastcall SessionRegistry__SetSemaphore_Wrap(int type, semaphore_t *sem);");
	set_frame_size(0X805006F4, 0X8, 0, 0);
	add_func    (0X8050070C,0X80500724);
	set_func_flags(0X8050070C,0x1400);
	SetType(0X8050070C, "void __fastcall sub_8050070C(int, unsigned int, int, int);");
	set_frame_size(0X8050070C, 0X8, 0, 0);
	add_func    (0X80500724,0X80500726);
	set_func_flags(0X80500724,0x1440);
	SetType(0X80500724, "void nullsub_17();");
	add_func    (0X80500726,0X80500760);
	set_func_flags(0X80500726,0x1410);
	SetType(0X80500726, "void __fastcall HardwareDevice_Open(HardwareDevice *hardwareDevice, int sesionType, unsigned int sessionid, int, int maybe_channelCount, int);");
	set_frame_size(0X80500726, 0X28, 8, 0);
	define_local_var(0X80500726, 0X80500760, "[bp-0X28]", "a5");
	define_local_var(0X80500726, 0X80500760, "[bp-0X24]", "a7");
	define_local_var(0X80500726, 0X80500760, "[bp+0X8]", "maybe_channelCount");
	add_func    (0X80500760,0X80500776);
	set_func_flags(0X80500760,0x1400);
	SetType(0X80500760, "int __fastcall CloseAudioSession(AudioRenderSession *renderSession);");
	set_frame_size(0X80500760, 0X8, 0, 0);
	add_func    (0X80500776,0X8050078E);
	set_func_flags(0X80500776,0x1400);
	SetType(0X80500776, "int __fastcall sub_80500776(int, unsigned int, int, int);");
	set_frame_size(0X80500776, 0X8, 0, 0);
	add_func    (0X8050078E,0X805007A6);
	set_func_flags(0X8050078E,0x1400);
	SetType(0X8050078E, "int __fastcall sub_8050078E(int, unsigned int, int, int);");
	set_frame_size(0X8050078E, 0X8, 0, 0);
	add_func    (0X805007A6,0X805007C8);
	set_func_flags(0X805007A6,0x1400);
	SetType(0X805007A6, "int __fastcall sub_805007A6(int, unsigned int, int, int);");
	set_frame_size(0X805007A6, 0X10, 0, 0);
	add_func    (0X805007C8,0X805007EA);
	set_func_flags(0X805007C8,0x1400);
	SetType(0X805007C8, "int __fastcall sub_805007C8(int, unsigned int, int, int);");
	set_frame_size(0X805007C8, 0X10, 0, 0);
	add_func    (0X805007EA,0X80500800);
	set_func_flags(0X805007EA,0x1401);
	SetType(0X805007EA, "void __fastcall __noreturn sub_805007EA(int, int, int);");
	set_frame_size(0X805007EA, 0X8, 0, 0);
	add_func    (0X80500800,0X80500818);
	set_func_flags(0X80500800,0x1400);
	SetType(0X80500800, "void __fastcall sub_80500800(int, unsigned int, int, int);");
	set_frame_size(0X80500800, 0X8, 0, 0);
	add_func    (0X80500818,0X80500830);
	set_func_flags(0X80500818,0x1400);
	SetType(0X80500818, "void __fastcall sub_80500818(int, unsigned int);");
	set_frame_size(0X80500818, 0X8, 0, 0);
	add_func    (0X80500830,0X8050085A);
	set_func_flags(0X80500830,0x1400);
	SetType(0X80500830, "int __fastcall gMix_Main(adsp_app_descriptor *desciptor);");
	set_frame_size(0X80500830, 0X8, 0, 0);
	add_func    (0X8050085A,0X80500A46);
	set_func_flags(0X8050085A,0x1410);
	SetType(0X8050085A, "SessionRegistry *__fastcall SetupSessionRegistry(SessionRegistry *registry);");
	set_frame_size(0X8050085A, 0X20, 8, 0);
	add_func    (0X80500A46,0X80500AA4);
	set_func_flags(0X80500A46,0x1410);
	SetType(0X80500A46, "status_t __fastcall ADSP_SendDataFromGMix(SessionRegistry *registry, const msgq_message_t *msg);");
	set_frame_size(0X80500A46, 0X10, 8, 0);
	add_func    (0X80500AA4,0X80500B02);
	set_func_flags(0X80500AA4,0x1410);
	SetType(0X80500AA4, "int __fastcall sub_80500AA4(SessionRegistry *registry);");
	set_frame_size(0X80500AA4, 0X8, 8, 0);
	add_func    (0X80500B02,0X80500B24);
	set_func_flags(0X80500B02,0x1400);
	SetType(0X80500B02, "int __fastcall sub_80500B02(int result);");
	set_frame_size(0X80500B02, 0X8, 0, 0);
	add_func    (0X80500B24,0X80500B90);
	set_func_flags(0X80500B24,0x1410);
	SetType(0X80500B24, "void __fastcall gMix_MainLoop(SessionRegistry *sessionRegistry);");
	set_frame_size(0X80500B24, 0X28, 8, 0);
	define_local_var(0X80500B24, 0X80500B90, "[bp-0X28]", "wait_and");
	define_local_var(0X80500B24, 0X80500B90, "[bp-0X24]", "objects");
	define_local_var(0X80500B24, 0X80500B90, "[bp-0X14]", "signalledObject");
	add_func    (0X80500B90,0X80500DD4);
	set_func_flags(0X80500B90,0x1410);
	SetType(0X80500B90, "void __fastcall gMix_ProcessMessage(SessionRegistry *registry);");
	set_frame_size(0X80500B90, 0X28, 8, 0);
	add_func    (0X80500DF8,0X80501A58);
	set_func_flags(0X80500DF8,0x1410);
	SetType(0X80500DF8, "void __fastcall gMix_InitialiseSessionRegistry(SessionRegistry *registry);");
	set_frame_size(0X80500DF8, 0X1B0, 8, 0);
	define_local_var(0X80500DF8, 0X80501A58, "[bp-0X1B0]", "err_handler");
	define_local_var(0X80500DF8, 0X80501A58, "[bp-0X1A8]", "context");
	define_local_var(0X80500DF8, 0X80501A58, "[bp-0X19C]", "message");
	define_local_var(0X80500DF8, 0X80501A58, "[bp-0X198]", "mixOut");
	define_local_var(0X80500DF8, 0X80501A58, "[bp-0X194]", "i_4");
	define_local_var(0X80500DF8, 0X80501A58, "[bp-0X174]", "registry_2");
	define_local_var(0X80500DF8, 0X80501A58, "[bp-0X170]", "localOutSession");
	define_local_var(0X80500DF8, 0X80501A58, "[bp-0X1E]", "mbx_id");
	add_func    (0X80501A7A,0X80501AA6);
	set_func_flags(0X80501A7A,0x1400);
	SetType(0X80501A7A, "int __fastcall SessionRegistryMailboxHandler(int a1, SessionRegistry *registry, adsp_mbx_direction_t a3, int a4);");
	add_func    (0X80501AA6,0X80501B02);
	set_func_flags(0X80501AA6,0x1410);
	SetType(0X80501AA6, "_DWORD *__fastcall sub_80501AA6(_DWORD *, int);");
	set_frame_size(0X80501AA6, 0X8, 8, 0);
	add_func    (0X80501B02,0X80501B4A);
	set_func_flags(0X80501B02,0x1410);
	SetType(0X80501B02, "void __fastcall SessionRegistry_Shutdown(unsigned int *);");
	set_frame_size(0X80501B02, 0X8, 8, 0);
	add_func    (0X80501B4A,0X80501B56);
	set_func_flags(0X80501B4A,0x1400);
	SetType(0X80501B4A, "int __fastcall sub_80501B4A(_DWORD, _DWORD);");
	add_func    (0X80501B56,0X80501B68);
	set_func_flags(0X80501B56,0x1400);
	SetType(0X80501B56, "unsigned int __fastcall sub_80501B56(int, int, unsigned int);");
	set_frame_size(0X80501B56, 0X8, 0, 0);
	add_func    (0X80501B68,0X80501B82);
	set_func_flags(0X80501B68,0x1400);
	SetType(0X80501B68, "int __fastcall sub_80501B68(int, int);");
	add_func    (0X80501B82,0X80501BC6);
	set_func_flags(0X80501B82,0x1400);
	SetType(0X80501B82, "void __fastcall sub_80501B82(int, int, u32);");
	add_func    (0X80501BC6,0X80501BE0);
	set_func_flags(0X80501BC6,0x1400);
	SetType(0X80501BC6, "void __fastcall SessionRegistry__SetSemaphore(SessionRegistry *registry, int sessionType, semaphore_t *semaphore);");
	add_func    (0X80501BE0,0X80501BFA);
	set_func_flags(0X80501BE0,0x1400);
	SetType(0X80501BE0, "semaphore_t *__fastcall sub_80501BE0(SessionRegistry *registry, int sessionType);");
	add_func    (0X80501BFA,0X80501C38);
	set_func_flags(0X80501BFA,0x1410);
	SetType(0X80501BFA, "void __fastcall sub_80501BFA(int sessionRegistry, int *hardwareDevice, int sessionType, unsigned int sessionId, int a5, int maybe_channelCount, int a7);");
	set_frame_size(0X80501BFA, 0X20, 8, 0);
	define_local_var(0X80501BFA, 0X80501C38, "[bp+0X8]", "a5");
	define_local_var(0X80501BFA, 0X80501C38, "[bp+0XC]", "maybe_channelCount");
	define_local_var(0X80501BFA, 0X80501C38, "[bp+0X10]", "a7");
	add_func    (0X80501C38,0X80501D6A);
	set_func_flags(0X80501C38,0x1410);
	SetType(0X80501C38, "AudioRenderSession *__fastcall GetSession(SessionRegistry *sessionRegistry, int sessionType, unsigned int sessionId);");
	set_frame_size(0X80501C38, 0X10, 8, 0);
	add_func    (0X80501D8E,0X80501D9C);
	set_func_flags(0X80501D8E,0x1400);
	SetType(0X80501D8E, "int __fastcall SessionRegistry_CloseSession(SessionRegistry *registry, AudioRenderSession *session);");
	set_frame_size(0X80501D8E, 0X8, 0, 0);
	add_func    (0X80501D9C,0X80501DAC);
	set_func_flags(0X80501D9C,0x1400);
	SetType(0X80501D9C, "int __fastcall sub_80501D9C(int, int, unsigned int, int);");
	set_frame_size(0X80501D9C, 0X8, 0, 0);
	add_func    (0X80501DAC,0X80501DBC);
	set_func_flags(0X80501DAC,0x1400);
	SetType(0X80501DAC, "int __fastcall sub_80501DAC(int, int, unsigned int, int);");
	set_frame_size(0X80501DAC, 0X8, 0, 0);
	add_func    (0X80501DBC,0X80501DD2);
	set_func_flags(0X80501DBC,0x1410);
	SetType(0X80501DBC, "int __fastcall sub_80501DBC(int, int, unsigned int, int, int);");
	set_frame_size(0X80501DBC, 0X8, 8, 0);
	add_func    (0X80501DD2,0X80501DE8);
	set_func_flags(0X80501DD2,0x1410);
	SetType(0X80501DD2, "int __fastcall sub_80501DD2(int, int, unsigned int, int, int);");
	set_frame_size(0X80501DD2, 0X8, 8, 0);
	add_func    (0X80501DE8,0X80501DFA);
	set_func_flags(0X80501DE8,0x1400);
	SetType(0X80501DE8, "void __fastcall sub_80501DE8(UnkSessionStruct *, int, unsigned int);");
	set_frame_size(0X80501DE8, 0X8, 0, 0);
	add_func    (0X80501DFA,0X80501E06);
	set_func_flags(0X80501DFA,0x1400);
	SetType(0X80501DFA, "int __fastcall sub_80501DFA(int result, int);");
	add_func    (0X80501E06,0X80501E44);
	set_func_flags(0X80501E06,0x1410);
	SetType(0X80501E06, "int __fastcall sub_80501E06(SessionRegistry *registry, unsigned int *a2, int sessionType, unsigned int sessionId, int a5, int a6, int a7, int a8);");
	set_frame_size(0X80501E06, 0X20, 8, 0);
	add_func    (0X80501E44,0X80501E58);
	set_func_flags(0X80501E44,0x1400);
	SetType(0X80501E44, "int __fastcall sub_80501E44(semaphore_t *);");
	set_frame_size(0X80501E44, 0X8, 0, 0);
	add_func    (0X80501E58,0X80501E7A);
	set_func_flags(0X80501E58,0x1411);
	SetType(0X80501E58, "void __fastcall __noreturn RegisterCloseTimeoutHandler(int, int, int);");
	set_frame_size(0X80501E58, 0X10, 8, 0);
	add_func    (0X80501E98,0X80501E9A);
	set_func_flags(0X80501E98,0x1440);
	SetType(0X80501E98, "void nullsub_14();");
	add_func    (0X80501E9A,0X80501EA4);
	set_func_flags(0X80501E9A,0x1400);
	SetType(0X80501E9A, "int __fastcall sub_80501E9A(int, char *, int);");
	set_frame_size(0X80501E9A, 0X8, 0, 0);
	add_func    (0X80501EA4,0X80501EA6);
	set_func_flags(0X80501EA4,0x1440);
	SetType(0X80501EA4, "void nullsub_15();");
	add_func    (0X80501EA6,0X80501EB0);
	set_func_flags(0X80501EA6,0x1400);
	SetType(0X80501EA6, "int __fastcall sub_80501EA6(int, char *, int);");
	set_frame_size(0X80501EA6, 0X8, 0, 0);
	add_func    (0X80501EB0,0X80501F66);
	set_func_flags(0X80501EB0,0x1410);
	SetType(0X80501EB0, "_WORD *__fastcall sub_80501EB0(_WORD *result, _WORD *, __int64, int, int, int, int);");
	set_frame_size(0X80501EB0, 0X1C, 8, 0);
	add_func    (0X80501F66,0X80501F68);
	set_func_flags(0X80501F66,0x1400);
	SetType(0X80501F66, "void __fastcall sub_80501F66(_WORD *, _WORD *, int, int, int, int, int, int, int, int);");
	set_frame_size(0X80501F66, 0X14, 0, 0);
	add_func    (0X80501F68,0X80502018);
	set_func_flags(0X80501F68,0x1410);
	SetType(0X80501F68, "void __fastcall sub_80501F68(_WORD *, _WORD *, int, int, int, int, int, int, int, int);");
	set_frame_size(0X80501F68, 0, 0, 0);
	add_func    (0X80502018,0X805020B4);
	set_func_flags(0X80502018,0x1410);
	SetType(0X80502018, "void __fastcall Write_2ChSamples(_WORD *ringBuffer, _WORD *ringBufferPlus2, int, int, int, int, int, int);");
	set_frame_size(0X80502018, 0X14, 0, 0);
	add_func    (0X805020B4,0X80502490);
	set_func_flags(0X805020B4,0x1410);
	SetType(0X805020B4, "void __fastcall ProcessOutDevice(SessionRegistry *registry, int sessionType, unsigned int numSamples);");
	set_frame_size(0X805020B4, 0X70, 8, 0);
	define_local_var(0X805020B4, 0X80502490, "[bp-0X5C]", "isSessionType8");
	define_local_var(0X805020B4, 0X80502490, "[bp-0X3C]", "outSamples");
	define_local_var(0X805020B4, 0X80502490, "[bp-0X34]", "registry_1");
	add_func    (0X805024BC,0X805024EC);
	set_func_flags(0X805024BC,0x1400);
	SetType(0X805024BC, "BOOL __fastcall NearVoiceGameRecordSession__IsActive(GameRecordSession *a1);");
	set_frame_size(0X805024BC, 0X8, 0, 0);
	add_func    (0X805024EC,0X805025BE);
	set_func_flags(0X805024EC,0x1410);
	SetType(0X805024EC, "BOOL __fastcall sub_805024EC(SessionRegistry *registry, int sessionType);");
	set_frame_size(0X805024EC, 0X18, 8, 0);
	add_func    (0X805025BE,0X80502604);
	set_func_flags(0X805025BE,0x1410);
	SetType(0X805025BE, "bool __fastcall sub_805025BE(SessionRegistry *registry, AudioOutSession *session, int sessionType);");
	set_frame_size(0X805025BE, 0X10, 8, 0);
	add_func    (0X80502604,0X8050261E);
	set_func_flags(0X80502604,0x1400);
	SetType(0X80502604, "int __fastcall sub_80502604(int, int, int, int);");
	add_func    (0X8050261E,0X805027C0);
	set_func_flags(0X8050261E,0x1410);
	SetType(0X8050261E, "int __fastcall ReadSamples2(int a1, AudioRenderSession *session, _DWORD *outSamples, int numSamples, int a5, _DWORD *outSamples2);");
	set_frame_size(0X8050261E, 0X48, 8, 0);
	define_local_var(0X8050261E, 0X805027C0, "[bp-0X44]", "frameSize");
	define_local_var(0X8050261E, 0X805027C0, "[bp-0X38]", "ringBuffer");
	define_local_var(0X8050261E, 0X805027C0, "[bp+0XC]", "outSamples2");
	add_func    (0X805027C0,0X80502918);
	set_func_flags(0X805027C0,0x1410);
	SetType(0X805027C0, "int __fastcall ReadSamples(int a1, AudioRenderSession *session, s32 *outSamples, int numSamples, int a5);");
	set_frame_size(0X805027C0, 0X38, 8, 0);
	define_local_var(0X805027C0, 0X80502918, "[bp-0X30]", "ringBuffer");
	define_local_var(0X805027C0, 0X80502918, "[bp-0X24]", "i_1");
	add_func    (0X80502918,0X80502B4C);
	set_func_flags(0X80502918,0x1410);
	SetType(0X80502918, "int __fastcall WriteSamples(SessionRegistry *registry, AudioRenderSession *session, _DWORD *samples, int numSamples);");
	set_frame_size(0X80502918, 0X68, 8, 0);
	define_local_var(0X80502918, 0X80502B4C, "[bp-0X38]", "channelCount_1");
	add_func    (0X80502B5C,0X80502CAE);
	set_func_flags(0X80502B5C,0x1410);
	SetType(0X80502B5C, "void __fastcall sub_80502B5C(SessionRegistry *registry, int sampleCount);");
	set_frame_size(0X80502B5C, 0X38, 8, 0);
	add_func    (0X80502CAE,0X80502D50);
	set_func_flags(0X80502CAE,0x1410);
	SetType(0X80502CAE, "unsigned int __fastcall sub_80502CAE(SessionRegistry *this, char *inSamples, unsigned int sampleCount);");
	set_frame_size(0X80502CAE, 0X20, 8, 0);
	add_func    (0X80502D50,0X80502E1A);
	set_func_flags(0X80502D50,0x1410);
	SetType(0X80502D50, "void __fastcall Maybe_RecordSamples(SessionRegistry *registry, int sessionType, unsigned int samples);");
	set_frame_size(0X80502D50, 0X20, 8, 0);
	add_func    (0X80502E1A,0X80502EDA);
	set_func_flags(0X80502E1A,0x1410);
	SetType(0X80502E1A, "s32 __fastcall sub_80502E1A(SessionRegistry *registry, int, unsigned int);");
	set_frame_size(0X80502E1A, 0X20, 8, 0);
	add_func    (0X80502EDA,0X80502FD8);
	set_func_flags(0X80502EDA,0x1410);
	SetType(0X80502EDA, "void __fastcall gMix_SinkSamples(SessionRegistry *sessionRegistry);");
	set_frame_size(0X80502EDA, 0X28, 8, 0);
	define_local_var(0X80502EDA, 0X80502FD8, "[bp-0X28]", "msg");
	define_local_var(0X80502EDA, 0X80502FD8, "[bp-0X1C]", "data");
	add_func    (0X80502FD8,0X805030D0);
	set_func_flags(0X80502FD8,0x1410);
	SetType(0X80502FD8, "int __fastcall sub_80502FD8(SessionRegistry *registry, int sessionType, unsigned int readPos_1);");
	set_frame_size(0X80502FD8, 0X38, 8, 0);
	define_local_var(0X80502FD8, 0X805030D0, "[bp-0X34]", "message");
	add_func    (0X805030D0,0X805030F2);
	set_func_flags(0X805030D0,0x1410);
	SetType(0X805030D0, "void __fastcall SessionBase__Close(AudioRenderSession *this);");
	set_frame_size(0X805030D0, 0X10, 8, 0);
	add_func    (0X80503114,0X80503162);
	set_func_flags(0X80503114,0x1410);
	SetType(0X80503114, "void __fastcall SessionBase__PrepareSamples(AudioOutSession *this, int sampleCount);");
	set_frame_size(0X80503114, 0X10, 8, 0);
	add_func    (0X80503184,0X80503188);
	set_func_flags(0X80503184,0x1400);
	SetType(0X80503184, "void __fastcall SessionBase__Unk4C(AudioRenderSession *this, int a2);");
	add_func    (0X80503188,0X80503194);
	set_func_flags(0X80503188,0x1400);
	SetType(0X80503188, "void __fastcall SessionBase__Unk44(AudioRenderSession *this, int volume, unsigned int a3);");
	set_frame_size(0X80503188, 0X8, 0, 0);
	add_func    (0X80503194,0X805031A0);
	set_func_flags(0X80503194,0x1400);
	SetType(0X80503194, "void __fastcall SessionBase__Unk48(AudioRenderSession *this, int volume, unsigned int a3);");
	set_frame_size(0X80503194, 0X8, 0, 0);
	add_func    (0X805031A0,0X805031A8);
	set_func_flags(0X805031A0,0x1400);
	SetType(0X805031A0, "void __fastcall SessionBase__Suspend(AudioRenderSession *this);");
	add_func    (0X805031A8,0X805031C2);
	set_func_flags(0X805031A8,0x1410);
	SetType(0X805031A8, "void __fastcall SessionBase__Resume(AudioRenderSession *this);");
	set_frame_size(0X805031A8, 0X10, 8, 0);
	add_func    (0X805031E4,0X805031E8);
	set_func_flags(0X805031E4,0x1400);
	SetType(0X805031E4, "u32 __fastcall SessionBase__GetRingBuffer(AudioRenderSession *this);");
	add_func    (0X805031E8,0X805031EC);
	set_func_flags(0X805031E8,0x1400);
	SetType(0X805031E8, "u32 __fastcall SessionBase__Unk04(AudioRenderSession *this);");
	add_func    (0X805031EC,0X805031F0);
	set_func_flags(0X805031EC,0x1400);
	SetType(0X805031EC, "s32 __fastcall SessionBase__GetRingBufferSize(AudioRenderSession *this);");
	add_func    (0X805031F0,0X805031F4);
	set_func_flags(0X805031F0,0x1400);
	SetType(0X805031F0, "s32 __fastcall SessionBase__GetReadPosition(AudioRenderSession *this);");
	add_func    (0X805031F4,0X805031F8);
	set_func_flags(0X805031F4,0x1400);
	SetType(0X805031F4, "s32 __fastcall SessionBase__GetWritePosition(AudioRenderSession *this);");
	add_func    (0X805031F8,0X805031FE);
	set_func_flags(0X805031F8,0x1400);
	SetType(0X805031F8, "__int64 SessionBase__Unk14();");
	add_func    (0X805031FE,0X80503216);
	set_func_flags(0X805031FE,0x1411);
	SetType(0X805031FE, "void __fastcall __noreturn SessionBase__SetSamplesProcessed(int, char *, int);");
	set_frame_size(0X805031FE, 0X10, 8, 0);
	add_func    (0X80503238,0X80503244);
	set_func_flags(0X80503238,0x1411);
	SetType(0X80503238, "void __fastcall __noreturn SessionBase__GetSharedBufferPosition(int, int, int, int);");
	set_frame_size(0X80503238, 0X10, 8, 0);
	add_func    (0X80503266,0X8050327E);
	set_func_flags(0X80503266,0x1411);
	SetType(0X80503266, "void __fastcall __noreturn SessionBase__SetSharedBufferPosition(int, char *, int);");
	set_frame_size(0X80503266, 0X10, 8, 0);
	add_func    (0X805032A0,0X805032AC);
	set_func_flags(0X805032A0,0x1411);
	SetType(0X805032A0, "void __fastcall __noreturn SessionBase__AppendBuffer(int, int, int, int);");
	set_frame_size(0X805032A0, 0X10, 8, 0);
	add_func    (0X805032CE,0X805032DA);
	set_func_flags(0X805032CE,0x1411);
	SetType(0X805032CE, "void __fastcall __noreturn SessionBase__GetBuffersProcessed(int, int, int, int);");
	set_frame_size(0X805032CE, 0X10, 8, 0);
	add_func    (0X805032FC,0X80503314);
	set_func_flags(0X805032FC,0x1411);
	SetType(0X805032FC, "void __fastcall __noreturn SessionBase__AttachWorkBuffer(int, char *, int);");
	set_frame_size(0X805032FC, 0X10, 8, 0);
	add_func    (0X80503336,0X80503342);
	set_func_flags(0X80503336,0x1411);
	SetType(0X80503336, "void __fastcall __noreturn SessionBase__Open(int, int, int, int);");
	set_frame_size(0X80503336, 0X10, 8, 0);
	add_func    (0X80503364,0X80503376);
	set_func_flags(0X80503364,0x1400);
	SetType(0X80503364, "BOOL __fastcall SessionBase__Unk5C(AudioRenderSession *this);");
	add_func    (0X80503376,0X8050337A);
	set_func_flags(0X80503376,0x1400);
	SetType(0X80503376, "s32 __fastcall SessionBase__Unk68(AudioOutSession *this);");
	add_func    (0X8050337A,0X80503400);
	set_func_flags(0X8050337A,0x1410);
	SetType(0X8050337A, "void __fastcall AudioRenderSession__Open(AudioRenderSession *this, int a2, int a3, int channelCount, int a5, int a6, int a7, int a8);");
	set_frame_size(0X8050337A, 0X18, 8, 0);
	define_local_var(0X8050337A, 0X80503400, "[bp+0X8]", "a5");
	define_local_var(0X8050337A, 0X80503400, "[bp+0XC]", "a6");
	define_local_var(0X8050337A, 0X80503400, "[bp+0X10]", "a7");
	define_local_var(0X8050337A, 0X80503400, "[bp+0X14]", "a8");
	add_func    (0X80503422,0X8050342A);
	set_func_flags(0X80503422,0x1400);
	SetType(0X80503422, "void __fastcall AudioRenderSession__Unk30(AudioRenderSession *this);");
	add_func    (0X8050342A,0X80503432);
	set_func_flags(0X8050342A,0x1400);
	SetType(0X8050342A, "void __fastcall AudioRenderSession__Unk34(AudioRenderSession *this);");
	add_func    (0X80503432,0X8050343E);
	set_func_flags(0X80503432,0x1411);
	SetType(0X80503432, "void __fastcall __noreturn AudioRenderSession__GetBufferDeviceAddress(int, int, int, int);");
	set_frame_size(0X80503432, 0X10, 8, 0);
	add_func    (0X80503462,0X80503464);
	set_func_flags(0X80503462,0x1440);
	SetType(0X80503462, "void AudioRenderSession__SetWritePosition();");
	add_func    (0X80503464,0X80503470);
	set_func_flags(0X80503464,0x1411);
	SetType(0X80503464, "void __fastcall __noreturn AudioRenderSession__FlushBuffers(int, int, int, int);");
	set_frame_size(0X80503464, 0X10, 8, 0);
	add_func    (0X80503494,0X805034BA);
	set_func_flags(0X80503494,0x1400);
	SetType(0X80503494, "void __fastcall AudioRenderSession__Unk64(AudioRenderSession *this, unsigned int sampleCount);");
	set_frame_size(0X80503494, 0X8, 0, 0);
	add_func    (0X805034BA,0X805034D0);
	set_func_flags(0X805034BA,0x1400);
	SetType(0X805034BA, "void __fastcall AudioRenderSession__SetReadPosition(AudioRenderSession *this, int readPosition_1);");
	add_func    (0X805034D0,0X80503582);
	set_func_flags(0X805034D0,0x1410);
	SetType(0X805034D0, "s32 __fastcall AudioOutSession__Open(AudioOutSession *this, int a2, int a3, int channelCount, int a5, int a6, int a7, int a8);");
	set_frame_size(0X805034D0, 0X18, 8, 0);
	add_func    (0X805035A4,0X805035C8);
	set_func_flags(0X805035A4,0x1410);
	SetType(0X805035A4, "void __fastcall AudioOutSession__Close(AudioOutSession *this, int a2, int a3, int a4);");
	set_frame_size(0X805035A4, 0X8, 8, 0);
	add_func    (0X805035C8,0X805036C4);
	set_func_flags(0X805035C8,0x1410);
	SetType(0X805035C8, "void __fastcall AudioOutSession__SetReadPosition(AudioOutSession *this, int readPosition);");
	set_frame_size(0X805035C8, 0X20, 8, 0);
	add_func    (0X805036C4,0X805036CE);
	set_func_flags(0X805036C4,0x1400);
	SetType(0X805036C4, "int __fastcall AudioOutSession__FlushBuffers(AudioOutSession *this);");
	add_func    (0X805036CE,0X80503768);
	set_func_flags(0X805036CE,0x1410);
	SetType(0X805036CE, "void __fastcall AudioOutSession__AppendBuffer(AudioOutSession *this, int a2, int a3, int a4, int addr, unsigned int size, int);");
	set_frame_size(0X805036CE, 0X18, 8, 0);
	define_local_var(0X805036CE, 0X80503768, "[bp+0X8]", "addr");
	define_local_var(0X805036CE, 0X80503768, "[bp+0XC]", "size");
	add_func    (0X8050378A,0X80503792);
	set_func_flags(0X8050378A,0x1400);
	SetType(0X8050378A, "void __fastcall AudioOutSession__Unk30(AudioOutSession *this);");
	add_func    (0X80503792,0X8050379A);
	set_func_flags(0X80503792,0x1400);
	SetType(0X80503792, "void __fastcall AudioOutSession__Unk34(AudioOutSession *this);");
	add_func    (0X8050379A,0X805037A6);
	set_func_flags(0X8050379A,0x1411);
	SetType(0X8050379A, "void __fastcall __noreturn AudioOutSession__GetBufferDeviceAddress(int, int, int, int);");
	set_frame_size(0X8050379A, 0X10, 8, 0);
	add_func    (0X805037CA,0X805037D6);
	set_func_flags(0X805037CA,0x1411);
	SetType(0X805037CA, "void __fastcall __noreturn AudioOutSession__SetWritePosition(int, int, int, int);");
	set_frame_size(0X805037CA, 0X10, 8, 0);
	add_func    (0X805037FA,0X80503812);
	set_func_flags(0X805037FA,0x1400);
	SetType(0X805037FA, "BOOL __fastcall AudioOutSession__ShouldAdvance_Maybe(AudioOutSession *this);");
	add_func    (0X80503812,0X8050382A);
	set_func_flags(0X80503812,0x1400);
	SetType(0X80503812, "void __fastcall AudioOutSession__Unk64(AudioOutSession *this, int sampleCount);");
	add_func    (0X8050382A,0X805038FE);
	set_func_flags(0X8050382A,0x1410);
	SetType(0X8050382A, "int __fastcall NearVoiceGameRecordSession__Open(AudioRenderSession *this, int source, int a3, int channelCount, int a5, int a6, int a7, int a8);");
	set_frame_size(0X8050382A, 0X10, 8, 0);
	add_func    (0X80503920,0X80503968);
	set_func_flags(0X80503920,0x1410);
	SetType(0X80503920, "char *__fastcall NearVoiceGameRecordSession__Close(AudioRenderSession *this, int a2, int a3, int a4);");
	set_frame_size(0X80503920, 0X8, 8, 0);
	add_func    (0X80503968,0X805039F8);
	set_func_flags(0X80503968,0x1410);
	SetType(0X80503968, "void __fastcall NearVoiceGameRecordSession__SetWritePosition(NearVoiceSession *this, unsigned int position);");
	set_frame_size(0X80503968, 0X10, 8, 0);
	add_func    (0X805039F8,0X80503A00);
	set_func_flags(0X805039F8,0x1400);
	SetType(0X805039F8, "void __fastcall NearVoiceGameRecordSession__SetSharedBufferPosition(NearVoiceSession *this, int readPosition);");
	add_func    (0X80503A00,0X80503A92);
	set_func_flags(0X80503A00,0x1410);
	SetType(0X80503A00, "_DWORD *__fastcall NearVoiceGameRecordSession__AppendBuffer(int, int, int, int, int, unsigned int);");
	set_frame_size(0X80503A00, 0X18, 8, 0);
	add_func    (0X80503AB4,0X80503AC4);
	set_func_flags(0X80503AB4,0x1400);
	SetType(0X80503AB4, "void __fastcall NearVoiceGameRecordSession__Unk30(NearVoiceSession *this);");
	add_func    (0X80503AC4,0X80503AD4);
	set_func_flags(0X80503AC4,0x1400);
	SetType(0X80503AC4, "int __fastcall NearVoiceGameRecordSession__Unk34(NearVoiceSession *this);");
	add_func    (0X80503AD4,0X80503B34);
	set_func_flags(0X80503AD4,0x1410);
	SetType(0X80503AD4, "void __fastcall NearVoiceGameRecordSession__AttachWorkbuffer(NearVoiceSession *this, unsigned int *audioBuffer0, unsigned int audioBuffer0Size, unsigned int audioBuffer1, unsigned int audioBuffer1Size, int numFrames);");
	set_frame_size(0X80503AD4, 0X20, 8, 0);
	define_local_var(0X80503AD4, 0X80503B34, "[bp+0X8]", "audioBuffer1Size");
	define_local_var(0X80503AD4, 0X80503B34, "[bp+0XC]", "numFrames");
	add_func    (0X80503B34,0X80503B3C);
	set_func_flags(0X80503B34,0x1400);
	SetType(0X80503B34, "s32 __fastcall NearVoiceGameRecordSession__GetSharedBufferPosition(NearVoiceSession *this);");
	add_func    (0X80503B3C,0X80503B4C);
	set_func_flags(0X80503B3C,0x1400);
	SetType(0X80503B3C, "int __fastcall NearVoiceGameRecordSession__GetRingBuffer(int);");
	add_func    (0X80503B4C,0X80503B58);
	set_func_flags(0X80503B4C,0x1411);
	SetType(0X80503B4C, "void __fastcall __noreturn NearVoiceGameRecordSession__GetBufferDeviceAddress(int, int, int, int);");
	set_frame_size(0X80503B4C, 0X10, 8, 0);
	add_func    (0X80503B7C,0X80503B8C);
	set_func_flags(0X80503B7C,0x1400);
	SetType(0X80503B7C, "int __fastcall NearVoiceGameRecordSession__Unk10(NearVoiceSession *this);");
	add_func    (0X80503B8C,0X80503B98);
	set_func_flags(0X80503B8C,0x1411);
	SetType(0X80503B8C, "void __fastcall __noreturn NearVoiceGameRecordSession__FlushBuffers(int, int, int, int);");
	set_frame_size(0X80503B8C, 0X10, 8, 0);
	add_func    (0X80503BBC,0X80503BD4);
	set_func_flags(0X80503BBC,0x1400);
	SetType(0X80503BBC, "void __fastcall NearVoiceGameRecordSession__PrepareSamples(int, int);");
	set_frame_size(0X80503BBC, 0X8, 0, 0);
	add_func    (0X80503BD4,0X80503BEC);
	set_func_flags(0X80503BD4,0x1400);
	SetType(0X80503BD4, "int __fastcall NearVoiceGameRecordSession__Unk64(int result, int);");
	add_func    (0X80503BEC,0X80503BFC);
	set_func_flags(0X80503BEC,0x1400);
	SetType(0X80503BEC, "int __fastcall NearVoiceGameRecordSession__Unk68(int);");
	add_func    (0X80503BFC,0X80503C08);
	set_func_flags(0X80503BFC,0x1411);
	SetType(0X80503BFC, "void __fastcall __noreturn NearVoiceGameRecordSession__SetReadPosition(int, int, int, int);");
	set_frame_size(0X80503BFC, 0X10, 8, 0);
	add_func    (0X80503C30,0X80503C9E);
	set_func_flags(0X80503C30,0x1410);
	SetType(0X80503C30, "int __fastcall sub_80503C30(int);");
	set_frame_size(0X80503C30, 0X10, 8, 0);
	add_func    (0X80503CB0,0X80503CC0);
	set_func_flags(0X80503CB0,0x1400);
	SetType(0X80503CB0, "int __fastcall sub_80503CB0(int);");
	add_func    (0X80503CC0,0X80503CE0);
	set_func_flags(0X80503CC0,0x1400);
	SetType(0X80503CC0, "int __fastcall sub_80503CC0(int result);");
	set_frame_size(0X80503CC0, 0X8, 0, 0);
	add_func    (0X80503CE0,0X80503D0C);
	set_func_flags(0X80503CE0,0x1410);
	SetType(0X80503CE0, "char *__fastcall sub_80503CE0(int);");
	set_frame_size(0X80503CE0, 0X8, 8, 0);
	add_func    (0X80503D0C,0X80503D20);
	set_func_flags(0X80503D0C,0x1400);
	SetType(0X80503D0C, "_DWORD *__fastcall sub_80503D0C(_DWORD *result, int);");
	add_func    (0X80503D20,0X80503D2C);
	set_func_flags(0X80503D20,0x1411);
	SetType(0X80503D20, "void __fastcall __noreturn sub_80503D20(int, int, int, int);");
	set_frame_size(0X80503D20, 0X10, 8, 0);
	add_func    (0X80503D50,0X80503D6C);
	set_func_flags(0X80503D50,0x1400);
	SetType(0X80503D50, "int __fastcall sub_80503D50(int result, int);");
	add_func    (0X80503D6C,0X80503D78);
	set_func_flags(0X80503D6C,0x1411);
	SetType(0X80503D6C, "void __fastcall __noreturn sub_80503D6C(int, int, int, int);");
	set_frame_size(0X80503D6C, 0X10, 8, 0);
	add_func    (0X80503DA0,0X80503E0E);
	set_func_flags(0X80503DA0,0x1410);
	SetType(0X80503DA0, "int __fastcall sub_80503DA0(int);");
	set_frame_size(0X80503DA0, 0X10, 8, 0);
	add_func    (0X80503E20,0X80503E30);
	set_func_flags(0X80503E20,0x1400);
	SetType(0X80503E20, "int __fastcall sub_80503E20(int);");
	add_func    (0X80503E30,0X80503E50);
	set_func_flags(0X80503E30,0x1400);
	SetType(0X80503E30, "int __fastcall sub_80503E30(int result);");
	set_frame_size(0X80503E30, 0X8, 0, 0);
	add_func    (0X80503E50,0X80503E7C);
	set_func_flags(0X80503E50,0x1410);
	SetType(0X80503E50, "char *__fastcall sub_80503E50(int);");
	set_frame_size(0X80503E50, 0X8, 8, 0);
	add_func    (0X80503E7C,0X80503E88);
	set_func_flags(0X80503E7C,0x1411);
	SetType(0X80503E7C, "void __fastcall __noreturn sub_80503E7C(int, int, int, int);");
	set_frame_size(0X80503E7C, 0X10, 8, 0);
	add_func    (0X80503EAC,0X80503EB8);
	set_func_flags(0X80503EAC,0x1411);
	SetType(0X80503EAC, "void __fastcall __noreturn sub_80503EAC(int, int, int, int);");
	set_frame_size(0X80503EAC, 0X10, 8, 0);
	add_func    (0X80503EDC,0X80503F02);
	set_func_flags(0X80503EDC,0x1400);
	SetType(0X80503EDC, "int __fastcall sub_80503EDC(int, unsigned int);");
	set_frame_size(0X80503EDC, 0X8, 0, 0);
	add_func    (0X80503F02,0X80503F18);
	set_func_flags(0X80503F02,0x1400);
	SetType(0X80503F02, "_DWORD *__fastcall sub_80503F02(_DWORD *result, int);");
	add_func    (0X80503F18,0X80503F9C);
	set_func_flags(0X80503F18,0x1410);
	SetType(0X80503F18, "int __fastcall sub_80503F18(_DWORD *, int, int, int);");
	set_frame_size(0X80503F18, 0X10, 8, 0);
	add_func    (0X80503F9C,0X80503FB2);
	set_func_flags(0X80503F9C,0x1400);
	SetType(0X80503F9C, "_DWORD *__fastcall sub_80503F9C(_DWORD *result, int);");
	add_func    (0X80503FB2,0X80503FBA);
	set_func_flags(0X80503FB2,0x1400);
	SetType(0X80503FB2, "int __fastcall sub_80503FB2(int result);");
	add_func    (0X80503FBA,0X80503FD6);
	set_func_flags(0X80503FBA,0x1400);
	SetType(0X80503FBA, "char *__fastcall sub_80503FBA(char *result);");
	set_frame_size(0X80503FBA, 0X8, 0, 0);
	add_func    (0X80503FD6,0X80503FE2);
	set_func_flags(0X80503FD6,0x1411);
	SetType(0X80503FD6, "void __fastcall __noreturn sub_80503FD6(int, int, int, int);");
	set_frame_size(0X80503FD6, 0X10, 8, 0);
	add_func    (0X80504006,0X80504012);
	set_func_flags(0X80504006,0x1411);
	SetType(0X80504006, "void __fastcall __noreturn sub_80504006(int, int, int, int);");
	set_frame_size(0X80504006, 0X10, 8, 0);
	add_func    (0X80504036,0X8050405C);
	set_func_flags(0X80504036,0x1400);
	SetType(0X80504036, "int __fastcall sub_80504036(int, unsigned int);");
	set_frame_size(0X80504036, 0X8, 0, 0);
	add_func    (0X8050405C,0X80504068);
	set_func_flags(0X8050405C,0x1411);
	SetType(0X8050405C, "void __fastcall __noreturn sub_8050405C(int, int, int, int);");
	set_frame_size(0X8050405C, 0X10, 8, 0);
	add_func    (0X8050408C,0X805040D8);
	set_func_flags(0X8050408C,0x1410);
	SetType(0X8050408C, "void __fastcall sub_8050408C(UnkSessionStruct *this, int volume, unsigned int a3);");
	set_frame_size(0X8050408C, 0X10, 8, 0);
	add_func    (0X805040D8,0X805040DC);
	set_func_flags(0X805040D8,0x1400);
	SetType(0X805040D8, "s32 __fastcall UnkSessionStruct_MaybeGetVolume(UnkSessionStruct *this);");
	add_func    (0X805040DC,0X8050419C);
	set_func_flags(0X805040DC,0x1410);
	SetType(0X805040DC, "int __fastcall sub_805040DC(UnkSessionStruct *this);");
	set_frame_size(0X805040DC, 0X20, 8, 0);
	add_func    (0X8050419C,0X805041BE);
	set_func_flags(0X8050419C,0x1400);
	SetType(0X8050419C, "int __fastcall sub_8050419C(int result);");
	add_func    (0X805041BE,0X8050423E);
	set_func_flags(0X805041BE,0x1410);
	SetType(0X805041BE, "void __fastcall NearVoiceGameRecord_UnkStruct_Initialise(NearVoiceGameRecordUnkStruct *this, int *audioBuffer0, int *audioBuffer1, unsigned int dataSizeBytes, unsigned int frameSize, unsigned int sharedBufferPosition, unsigned int bufferOffset, bool isNew);");
	set_frame_size(0X805041BE, 0X18, 8, 0);
	define_local_var(0X805041BE, 0X8050423E, "[bp+0X8]", "frameSize");
	define_local_var(0X805041BE, 0X8050423E, "[bp+0XC]", "sharedBufferPosition");
	define_local_var(0X805041BE, 0X8050423E, "[bp+0X10]", "bufferOffset");
	define_local_var(0X805041BE, 0X8050423E, "[bp+0X14]", "isNew");
	add_func    (0X80504260,0X80504336);
	set_func_flags(0X80504260,0x1410);
	SetType(0X80504260, "void __fastcall PrepareNewBuffer(NearVoiceGameRecordUnkStruct *this);");
	set_frame_size(0X80504260, 0X18, 8, 0);
	add_func    (0X80504358,0X80504380);
	set_func_flags(0X80504358,0x1400);
	SetType(0X80504358, "int __fastcall sub_80504358(int result);");
	add_func    (0X80504380,0X80504382);
	set_func_flags(0X80504380,0x1440);
	SetType(0X80504380, "int __fastcall nullsub_11(_DWORD);");
	add_func    (0X80504382,0X805043D2);
	set_func_flags(0X80504382,0x1410);
	SetType(0X80504382, "int __fastcall SetPosition(int *a1, unsigned int position);");
	set_frame_size(0X80504382, 0X20, 8, 0);
	add_func    (0X805043F4,0X8050443A);
	set_func_flags(0X805043F4,0x1410);
	SetType(0X805043F4, "int *__fastcall sub_805043F4(int **);");
	set_frame_size(0X805043F4, 0X8, 8, 0);
	add_func    (0X8050443A,0X80504452);
	set_func_flags(0X8050443A,0x1400);
	SetType(0X8050443A, "void __fastcall sub_8050443A(int, int, int, int);");
	set_frame_size(0X8050443A, 0X8, 0, 0);
	add_func    (0X80504452,0X80504496);
	set_func_flags(0X80504452,0x1410);
	SetType(0X80504452, "int __fastcall sub_80504452(int);");
	set_frame_size(0X80504452, 0X10, 8, 0);
	add_func    (0X80504496,0X805044A0);
	set_func_flags(0X80504496,0x1400);
	SetType(0X80504496, "unsigned __int64 sub_80504496();");
	set_frame_size(0X80504496, 0X8, 0, 0);
	add_func    (0X805044A0,0X805044BA);
	set_func_flags(0X805044A0,0x1410);
	SetType(0X805044A0, "BOOL __fastcall sub_805044A0(NearVoiceGameRecordUnkStruct *this);");
	set_frame_size(0X805044A0, 0X8, 8, 0);
	add_func    (0X805044BC,0X805044E4);
	set_func_flags(0X805044BC,0x1400);
	SetType(0X805044BC, "int AudioRender_Init();");
	set_frame_size(0X805044BC, 0X8, 0, 0);
	add_func    (0X805044E4,0X80504816);
	set_func_flags(0X805044E4,0x1410);
	SetType(0X805044E4, "int __fastcall AudioRender_Main(adsp_app_descriptor *descriptor);");
	set_frame_size(0X805044E4, 0X60, 8, 0);
	define_local_var(0X805044E4, 0X80504816, "[bp-0X60]", "stack_size");
	define_local_var(0X805044E4, 0X80504816, "[bp-0X58]", "Device1HasBeenReset");
	define_local_var(0X805044E4, 0X80504816, "[bp-0X54]", "device2HasBeenReset");
	define_local_var(0X805044E4, 0X80504816, "[bp-0X28]", "renderTimesTaken");
	add_func    (0X80504818,0X80504924);
	set_func_flags(0X80504818,0x1410);
	SetType(0X80504818, "int __fastcall AudioRender_MemoryMapUnmapThreadFunc(nn::audio::dsp::MapUnmapBuffer *buffer);");
	set_frame_size(0X80504818, 0X40, 8, 0);
	add_func    (0X80504924,0X80504A10);
	set_func_flags(0X80504924,0x1410);
	SetType(0X80504924, "int __fastcall InitializeDevice(MixDevice *device, char *name, unsigned int sessionId);");
	set_frame_size(0X80504924, 0X28, 8, 0);
	add_func    (0X80504A6C,0X80504AAC);
	set_func_flags(0X80504A6C,0x1410);
	SetType(0X80504A6C, "void __fastcall gMix_ResetBuffers(int index);");
	set_frame_size(0X80504A6C, 0X8, 8, 0);
	add_func    (0X80504AAC,0X80504AB2);
	set_func_flags(0X80504AAC,0x1400);
	SetType(0X80504AAC, "int __cdecl MixDevice__GetSampleRate(int);");
	add_func    (0X80504AB2,0X80504AB8);
	set_func_flags(0X80504AB2,0x1400);
	SetType(0X80504AB2, "s32 __cdecl MixDevice__GetChannelCount(MixDevice *device);");
	add_func    (0X80504AB8,0X80504B1C);
	set_func_flags(0X80504AB8,0x1410);
	SetType(0X80504AB8, "int __fastcall sub_80504AB8(int, int);");
	set_frame_size(0X80504AB8, 0X10, 8, 0);
	add_func    (0X80504B1C,0X80504B22);
	set_func_flags(0X80504B1C,0x1400);
	SetType(0X80504B1C, "void *__cdecl MixDevice__GetBuffer(MixDevice *device);");
	add_func    (0X80504B22,0X80504B54);
	set_func_flags(0X80504B22,0x1410);
	SetType(0X80504B22, "int sub_80504B22();");
	set_frame_size(0X80504B22, 0X8, 8, 0);
	add_func    (0X80504B54,0X80504BCA);
	set_func_flags(0X80504B54,0x1410);
	SetType(0X80504B54, "int __fastcall sub_80504B54(int *, int);");
	set_frame_size(0X80504B54, 0X10, 8, 0);
	add_func    (0X80504BCA,0X80504C22);
	set_func_flags(0X80504BCA,0x1410);
	SetType(0X80504BCA, "BOOL __fastcall gMix_CheckDeviceState2(int index);");
	set_frame_size(0X80504BCA, 0X10, 8, 0);
	add_func    (0X80504C44,0X80504C9C);
	set_func_flags(0X80504C44,0x1410);
	SetType(0X80504C44, "BOOL __fastcall gMix_IsSuspended(int index);");
	set_frame_size(0X80504C44, 0X10, 8, 0);
	add_func    (0X80504CBE,0X80504D16);
	set_func_flags(0X80504CBE,0x1410);
	SetType(0X80504CBE, "BOOL __fastcall gMix_IsInitialised(int index);");
	set_frame_size(0X80504CBE, 0X10, 8, 0);
	add_func    (0X80504D38,0X80504DBC);
	set_func_flags(0X80504D38,0x1410);
	SetType(0X80504D38, "void __fastcall gMix_ResumeIfInititialised(int a1);");
	set_frame_size(0X80504D38, 0X10, 8, 0);
	add_func    (0X80504DDE,0X80504E62);
	set_func_flags(0X80504DDE,0x1410);
	SetType(0X80504DDE, "int __fastcall sub_80504DDE(int, int, int, int);");
	set_frame_size(0X80504DDE, 0X10, 8, 0);
	add_func    (0X80504E84,0X80504F08);
	set_func_flags(0X80504E84,0x1410);
	SetType(0X80504E84, "void __fastcall gMix_SuspendIfRunning(int index);");
	set_frame_size(0X80504E84, 0X10, 8, 0);
	add_func    (0X80504F2A,0X80504FAE);
	set_func_flags(0X80504F2A,0x1410);
	SetType(0X80504F2A, "int __fastcall gMix_ResumeIfSuspended(int);");
	set_frame_size(0X80504F2A, 0X10, 8, 0);
	add_func    (0X80504FD0,0X805050A4);
	set_func_flags(0X80504FD0,0x1410);
	SetType(0X80504FD0, "void __fastcall MixDevice_WaitForSamplesFree(int index, int sampleCount);");
	set_frame_size(0X80504FD0, 0X20, 8, 0);
	add_func    (0X805050C6,0X805050EE);
	set_func_flags(0X805050C6,0x1400);
	SetType(0X805050C6, "void __fastcall MixDevice_ClearSampleBuffer(int index);");
	set_frame_size(0X805050C6, 0X8, 0, 0);
	add_func    (0X805050EE,0X80505172);
	set_func_flags(0X805050EE,0x1410);
	SetType(0X805050EE, "void __fastcall MixDevice_SinkSamples(int index, int sampleCount);");
	set_frame_size(0X805050EE, 0X10, 8, 0);
	add_func    (0X80505172,0X805051D2);
	set_func_flags(0X80505172,0x1410);
	SetType(0X80505172, "void __fastcall InitializeDevices();");
	set_frame_size(0X80505172, 0X8, 8, 0);
	add_func    (0X805051D2,0X80505304);
	set_func_flags(0X805051D2,0x1410);
	SetType(0X805051D2, "void ShutdownAllMixDevices();");
	set_frame_size(0X805051D2, 0X10, 8, 0);
	add_func    (0X80505304,0X8050532C);
	set_func_flags(0X80505304,0x1410);
	SetType(0X80505304, "MixDevice *__fastcall GetMixDeviceBySessionId(char *name, int index);");
	set_frame_size(0X80505304, 0X8, 8, 0);
	add_func    (0X8050532C,0X80505500);
	set_func_flags(0X8050532C,0x1410);
	SetType(0X8050532C, "unsigned int __fastcall sub_8050532C(int, int, __int64, unsigned int, _QWORD *, unsigned int, int, int);");
	set_frame_size(0X8050532C, 0X28, 8, 0);
	add_func    (0X80505522,0X805056B0);
	set_func_flags(0X80505522,0x1410);
	SetType(0X80505522, "unsigned int __fastcall ReadAuxBufferDsp(nn::audio::AuxInfoDsp *returnInfo, __int64 returnBuffer, unsigned int countMax, int *outData, unsigned int readCount, int readOffset, int updateCount);");
	set_frame_size(0X80505522, 0X28, 8, 0);
	define_local_var(0X80505522, 0X805056B0, "[bp-0X20]", "dspInfo");
	define_local_var(0X80505522, 0X805056B0, "[bp+0X8]", "countMax");
	define_local_var(0X80505522, 0X805056B0, "[bp+0XC]", "outData");
	define_local_var(0X80505522, 0X805056B0, "[bp+0X10]", "readCount");
	define_local_var(0X80505522, 0X805056B0, "[bp+0X14]", "readOffset");
	define_local_var(0X80505522, 0X805056B0, "[bp+0X18]", "updateCount");
	add_func    (0X805056D2,0X805058A4);
	set_func_flags(0X805056D2,0x1410);
	SetType(0X805056D2, "unsigned int __fastcall Capture_WriteAuxBufferDsp(nn::audio::AuxBufferInfo *sendInfo, __int64 bufferAddress, unsigned int countMax, int *input, unsigned int writeCount, int writeOffset, int updateCount);");
	set_frame_size(0X805056D2, 0X28, 8, 0);
	define_local_var(0X805056D2, 0X805058A4, "[bp-0X20]", "sendInfo_1");
	define_local_var(0X805056D2, 0X805058A4, "[bp+0X8]", "countMax");
	define_local_var(0X805056D2, 0X805058A4, "[bp+0XC]", "input");
	define_local_var(0X805056D2, 0X805058A4, "[bp+0X10]", "writeCount");
	define_local_var(0X805056D2, 0X805058A4, "[bp+0X14]", "writeOffset");
	define_local_var(0X805056D2, 0X805058A4, "[bp+0X18]", "updateCount");
	add_func    (0X805058C6,0X80505A50);
	set_func_flags(0X805058C6,0x1410);
	SetType(0X805058C6, "int __fastcall Aux_WriteAuxBufferDsp(nn::audio::AuxInfoDsp *sendInfo, int sampleCount, __int64 bufferAddress, unsigned int countMax, int *input, unsigned int writeCount, int writeOffset, int updateCount);");
	set_frame_size(0X805058C6, 0X28, 8, 0);
	define_local_var(0X805058C6, 0X80505A50, "[bp-0X20]", "sendInfo_1");
	define_local_var(0X805058C6, 0X80505A50, "[bp+0X8]", "countMax");
	define_local_var(0X805058C6, 0X80505A50, "[bp+0XC]", "input");
	define_local_var(0X805058C6, 0X80505A50, "[bp+0X10]", "writeCount");
	define_local_var(0X805058C6, 0X80505A50, "[bp+0X14]", "writeOffset");
	define_local_var(0X805058C6, 0X80505A50, "[bp+0X18]", "updateCount");
	add_func    (0X80505A72,0X80505A90);
	set_func_flags(0X80505A72,0x1410);
	SetType(0X80505A72, "void __fastcall ResetAuxBufferDsp(nn::audio::AuxInfoDsp *OutAuxBuffer);");
	set_frame_size(0X80505A72, 0X10, 8, 0);
	add_func    (0X80505AB4,0X80505B66);
	set_func_flags(0X80505AB4,0x1410);
	SetType(0X80505AB4, "float __fastcall Axfx2AllPassTick(nn::audio::I3dl2DelayLine *decayLine0, nn::audio::I3dl2DelayLine *decayLine1, nn::audio::I3dl2DelayLine *fdnDecayLine, float sample);");
	set_frame_size(0X80505AB4, 0X8, 8, 0);
	add_func    (0X80505B68,0X80505BF8);
	set_func_flags(0X80505B68,0x1410);
	SetType(0X80505B68, "void __fastcall ApplyBiquadFilterInt(int *output, const int *input, __int16 *b, __int16 *a, nn::audio::BiquadFilterState *state, int sampleCount);");
	set_frame_size(0X80505B68, 0X10, 8, 0);
	define_local_var(0X80505B68, 0X80505BF8, "[bp+0X8]", "state");
	define_local_var(0X80505B68, 0X80505BF8, "[bp+0XC]", "sampleCount");
	add_func    (0X80505BFC,0X80506108);
	set_func_flags(0X80505BFC,0x1410);
	SetType(0X80505BFC, "void __fastcall ApplyBiquadFilterFloat(f32 *output, f32 *input, s16 *b, __int16 *a, nn::audio::BiquadFilterState *state, int sampleCount);");
	set_frame_size(0X80505BFC, 0X1F8, 8, 0);
	define_local_var(0X80505BFC, 0X80506108, "[bp+0X8]", "state");
	define_local_var(0X80505BFC, 0X80506108, "[bp+0XC]", "sampleCount");
	add_func    (0X8050610C,0X805064FC);
	set_func_flags(0X8050610C,0x1410);
	SetType(0X8050610C, "float32x4_t *__fastcall ApplyBiquadFilterFloat2(float32x4_t *result, _QWORD *, __int16 *, __int16 *, int, int);");
	set_frame_size(0X8050610C, 0XC8, 8, 0);
	add_func    (0X80506504,0X80506F84);
	set_func_flags(0X80506504,0x1410);
	SetType(0X80506504, "void __fastcall ApplyDoubleBiquadFilterFloat(f32 *output, f32 *input, __int16 *biquad1b, __int16 *biquad1a, const float *biquad1State, __int16 *biquad2b, __int16 *biquad2a, f32 *biquad2State, int sampleCount);");
	set_frame_size(0X80506504, 0X418, 8, 0);
	define_local_var(0X80506504, 0X80506F84, "[bp+0X8]", "biquad1State");
	define_local_var(0X80506504, 0X80506F84, "[bp+0XC]", "biquad2b");
	define_local_var(0X80506504, 0X80506F84, "[bp+0X10]", "biquad2a");
	define_local_var(0X80506504, 0X80506F84, "[bp+0X14]", "biquad2State");
	define_local_var(0X80506504, 0X80506F84, "[bp+0X18]", "sampleCount");
	add_func    (0X80506F84,0X80506FBE);
	set_func_flags(0X80506F84,0x1410);
	SetType(0X80506F84, "void __fastcall CommandListProcessor__Setup(nn::audio::dsp::CommandListProcessor *this, nn::audio::CommandListHeader *header, unsigned int commandSize);");
	set_frame_size(0X80506F84, 0X10, 8, 0);
	add_func    (0X80506FE2,0X80506FE6);
	set_func_flags(0X80506FE2,0x1400);
	SetType(0X80506FE2, "void __fastcall CommandListProcessor__SetProcessTimeMax(nn::audio::dsp::CommandListProcessor *this, u32 maxTime);");
	add_func    (0X80506FE8,0X80508BD4);
	set_func_flags(0X80506FE8,0x1410);
	SetType(0X80506FE8, "unsigned __int64 __fastcall CommandListProcessor__Process(nn::audio::dsp::CommandListProcessor *commandListProcessor);");
	set_frame_size(0X80506FE8, 0X158, 8, 0);
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X158]", "a5");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X150]", "biquad2a");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X148]", "sampleCount");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X140]", "mixBuffer4");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X13C]", "mixBuffer5");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X138]", "mixBuffer2");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X134]", "mixBuffer3");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X130]", "mixBuffers_1");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X12C]", "inBuffer1");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X128]", "inBuffer4");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X124]", "inBuffer5");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X120]", "inBuffer3");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X11C]", "inputCount_2");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X104]", "upsamplerInfo");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0X100]", "startTick");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0XF4]", "cmdListProcessor");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0XF0]", "waveBufferArgs");
	define_local_var(0X80506FE8, 0X80508BD4, "[bp-0XBC]", "waveBuffers");
	add_func    (0X80508BF8,0X80508BFC);
	set_func_flags(0X80508BF8,0x1400);
	SetType(0X80508BF8, "u32 __fastcall GetCommandCount(nn::audio::dsp::CommandListProcessor *this);");
	add_func    (0X80508BFC,0X80508C00);
	set_func_flags(0X80508BFC,0x1400);
	SetType(0X80508BFC, "u32 __fastcall CommandListProcessor__GetSampleCount(nn::audio::dsp::CommandListProcessor *this);");
	add_func    (0X80508C00,0X80508C04);
	set_func_flags(0X80508C00,0x1400);
	SetType(0X80508C00, "u32 __fastcall CommandListProcessor__GetTargetSampleRate(nn::audio::dsp::CommandListProcessor *this);");
	add_func    (0X80508C04,0X80508C08);
	set_func_flags(0X80508C04,0x1400);
	SetType(0X80508C04, "void *__fastcall CommandListProcessor__GetMixBuffers(nn::audio::dsp::CommandListProcessor *this);");
	add_func    (0X80508C08,0X80508C0C);
	set_func_flags(0X80508C08,0x1400);
	SetType(0X80508C08, "u32 __fastcall CommandListProcessor__GetBufferCount(nn::audio::dsp::CommandListProcessor *this);");
	add_func    (0X80508C0C,0X80508C10);
	set_func_flags(0X80508C0C,0x1400);
	SetType(0X80508C0C, "u32 __fastcall CommandListProcessor__GetProcessedCommandCount(nn::audio::dsp::CommandListProcessor *this);");
	add_func    (0X80508C10,0X80508C18);
	set_func_flags(0X80508C10,0x1400);
	SetType(0X80508C10, "u32 __fastcall CommandListProcessor__GetRemainCommandCount(nn::audio::dsp::CommandListProcessor *this);");
	add_func    (0X80508C18,0X805093DE);
	set_func_flags(0X80508C18,0x1410);
	SetType(0X80508C18, "void __fastcall DecodeFromWaveBuffers(nn::audio::dsp::DecodeFromWaveBuffersArgs *args);");
	set_frame_size(0X80508C18, 0XC0, 8, 0);
	define_local_var(0X80508C18, 0X805093DE, "[bp-0XC0]", "a5");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0XAC]", "samplesRemaining_2");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0XA8]", "isBufferStarved");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0XA4]", "a3");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0XA0]", "output");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0X9C]", "samplesToWrite");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0X98]", "remainSampleCount");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0X90]", "pitch_4");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0X8C]", "args_1");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0X88]", "waveIndex_1");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0X80]", "sampelsToReadInt");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0X7C]", "tempBufferPos");
	define_local_var(0X80508C18, 0X805093DE, "[bp-0X20]", "fraction_1");
	add_func    (0X805093DE,0X805094A4);
	set_func_flags(0X805093DE,0x1410);
	SetType(0X805093DE, "unsigned __int32 __fastcall sub_805093DE(int32x2_t *, int, int, int);");
	set_frame_size(0X805093DE, 0X8, 8, 0);
	add_func    (0X805094A4,0X805094E6);
	set_func_flags(0X805094A4,0x1400);
	SetType(0X805094A4, "int __fastcall sub_805094A4(int *, int, int, int);");
	add_func    (0X805094E6,0X80509540);
	set_func_flags(0X805094E6,0x1400);
	SetType(0X805094E6, "int __fastcall sub_805094E6(_DWORD *, int, int, int);");
	set_frame_size(0X805094E6, 0X8, 0, 0);
	add_func    (0X80509540,0X80509606);
	set_func_flags(0X80509540,0x1010);
	SetType(0X80509540, "unsigned __int32 __fastcall sub_80509540(int32x2_t *, int, int, int);");
	set_frame_size(0X80509540, 0X8, 8, 0);
	add_func    (0X80509606,0X80509730);
	set_func_flags(0X80509606,0x1410);
	SetType(0X80509606, "int __fastcall ApplyDepopMix(int *output, int depopSample, int decay, int sampleCount);");
	set_frame_size(0X80509606, 0X8, 8, 0);
	add_func    (0X80509730,0X805097D0);
	set_func_flags(0X80509730,0x1410);
	SetType(0X80509730, "_WORD *__fastcall sub_80509730(_WORD *result, float32x4_t *, int);");
	set_frame_size(0X80509730, 0X8, 8, 0);
	add_func    (0X805097F0,0X80509902);
	set_func_flags(0X805097F0,0x1410);
	SetType(0X805097F0, "_WORD *__fastcall sub_805097F0(_WORD *result, int, int, int, int);");
	set_frame_size(0X805097F0, 0X2C, 8, 0);
	add_func    (0X80509924,0X80509A3C);
	set_func_flags(0X80509924,0x1410);
	SetType(0X80509924, "s32 __fastcall DecodePcm16(_WORD *outBuffer, nn::audio::dsp::DecodeArg *req);");
	set_frame_size(0X80509924, 0X20, 8, 0);
	add_func    (0X80509A40,0X80509C82);
	set_func_flags(0X80509A40,0x1410);
	SetType(0X80509A40, "int __fastcall DecodePcmFloat(_WORD *tempBuffer, nn::audio::dsp::DecodeArg *args);");
	set_frame_size(0X80509A40, 0X38, 8, 0);
	add_func    (0X80509CA4,0X80509FFA);
	set_func_flags(0X80509CA4,0x1410);
	SetType(0X80509CA4, "s32 __fastcall DecodeAdpcm(_WORD *tempBuffer, nn::audio::dsp::DecodeArg *arg);");
	set_frame_size(0X80509CA4, 0X30, 8, 0);
	define_local_var(0X80509CA4, 0X80509FFA, "[bp-0X30]", "context");
	define_local_var(0X80509CA4, 0X80509FFA, "[bp-0X2C]", "samplesDecoded");
	define_local_var(0X80509CA4, 0X80509FFA, "[bp-0X28]", "coefficients_1");
	define_local_var(0X80509CA4, 0X80509FFA, "[bp-0X20]", "scale_1");
	add_func    (0X80509FFA,0X8050A324);
	set_func_flags(0X80509FFA,0x1410);
	SetType(0X80509FFA, "void __fastcall ApplyDelayEffect6ch(nn::audio::DelayParameter *param, nn::audio::DelayState *state, int **inputBuffers, int **outputBuffers, int sampleCount);");
	set_frame_size(0X80509FFA, 0XEC, 8, 0);
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0XE4]", "inputs");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0XCC]", "outputs");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0XA0]", "line5Buffer");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X9C]", "line5Sample");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X94]", "line2Buffer");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X90]", "input2Sample");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X88]", "input3Sample");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X7C]", "line0Buffer");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X60]", "lowPassSamples");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X4C]", "line0Sample_1");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X48]", "line1Sample_1");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X44]", "line2Sample");
	define_local_var(0X80509FFA, 0X8050A324, "[bp-0X34]", "inputSamples");
	define_local_var(0X80509FFA, 0X8050A324, "[bp+0X8]", "sampleCount");
	add_func    (0X8050A324,0X8050A448);
	set_func_flags(0X8050A324,0x1410);
	SetType(0X8050A324, "void __fastcall nn__audio__InitializeDelayEffect(nn::audio::DelayParameter *param, nn::audio::DelayState *state, char *workBuffer);");
	set_frame_size(0X8050A324, 0X20, 8, 0);
	add_func    (0X8050A448,0X8050A4B0);
	set_func_flags(0X8050A448,0x1410);
	SetType(0X8050A448, "void __fastcall nn__audio__SetDelayEffectParameter(nn::audio::DelayParameter *param, nn::audio::DelayState *state);");
	set_frame_size(0X8050A448, 0X8, 8, 0);
	add_func    (0X8050A4B0,0X8050AB1E);
	set_func_flags(0X8050A4B0,0x1410);
	SetType(0X8050A4B0, "void __fastcall ApplyDelayEffect(nn::audio::DelayParameter *param, nn::audio::DelayState *state, bool enabled, int **inputBuffers, int **outputBuffers, int sampleCount);");
	set_frame_size(0X8050A4B0, 0XE8, 8, 0);
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0XE8]", "sampleCount");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0XE0]", "lowPassCrossGain_1");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0XDC]", "delayFeedbackGain_1");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0XC8]", "inGain_1");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0XBC]", "line0Sample");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0XB8]", "line1Sample");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0XB0]", "line3Sample");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0XA0]", "param");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp-0X7C]", "wetGain_1");
	define_local_var(0X8050A4B0, 0X8050AB1E, "[bp+0X8]", "outputBuffers");
	add_func    (0X8050ABFA,0X8050ACDC);
	set_func_flags(0X8050ABFA,0x1410);
	SetType(0X8050ABFA, "void __fastcall nn__audio__InitializeLightLimiterEffect(nn::audio::LightLimiterParameter *param, nn::audio::LightLimiterState *state, f32 *buffer);");
	set_frame_size(0X8050ABFA, 0X20, 8, 0);
	add_func    (0X8050ACDC,0X8050ACDE);
	set_func_flags(0X8050ACDC,0x1440);
	SetType(0X8050ACDC, "void __fastcall nn__audio__UpdateLightLimiterEffectParameter(int, int);");
	add_func    (0X8050ACE0,0X8050B5A4);
	set_func_flags(0X8050ACE0,0x1410);
	SetType(0X8050ACE0, "void __fastcall nn__audio__ApplyLightLimiterEffect(nn::audio::LightLimiterParameter *param, nn::audio::LightLimiterState *state, bool enabled, s32 **inputBuffers, s32 **outputBuffers, int sampleCount, nn::audio::LightLimiterStatisticsInternal *statistics);");
	set_frame_size(0X8050ACE0, 0X70, 8, 0);
	define_local_var(0X8050ACE0, 0X8050B5A4, "[bp+0X8]", "outputBuffers");
	define_local_var(0X8050ACE0, 0X8050B5A4, "[bp+0XC]", "sampleCount");
	define_local_var(0X8050ACE0, 0X8050B5A4, "[bp+0X10]", "statistics");
	add_func    (0X8050B608,0X8050B8CA);
	set_func_flags(0X8050B608,0x1410);
	SetType(0X8050B608, "void __fastcall nn__audio__InitializeReverbEffect(nn::audio::ReverbParameter *param, nn::audio::ReverbState *state, int workBuffer, int longSizePreDelaySupported);");
	set_frame_size(0X8050B608, 0X18, 8, 0);
	add_func    (0X8050B8CA,0X8050C248);
	set_func_flags(0X8050B8CA,0x1410);
	SetType(0X8050B8CA, "void __fastcall nn__audio__UpdateReverbEffectParameter(nn::audio::ReverbParameter *params, nn::audio::ReverbState *state);");
	set_frame_size(0X8050B8CA, 0X38, 8, 0);
	define_local_var(0X8050B8CA, 0X8050C248, "[bp-0X2C]", "state_2");
	define_local_var(0X8050B8CA, 0X8050C248, "[bp-0X24]", "colouration_1");
	add_func    (0X8050C26C,0X8050D97A);
	set_func_flags(0X8050C26C,0x1410);
	SetType(0X8050C26C, "void __fastcall ApplyReverbEffect(nn::audio::ReverbParameter *params, nn::audio::ReverbState *state, int enabled, int **inputs, int **outputs, int sampleCount);");
	set_frame_size(0X8050C26C, 0X108, 8, 0);
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XD0]", "fdn0End_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XCC]", "fdn1End_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XC8]", "decay2End_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XC4]", "fdn2End_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XC0]", "decay3End_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XBC]", "fdn3End_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XB8]", "decay1End_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XB4]", "decay0End_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0XA0]", "preDelaySampleCount");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X8C]", "earlyGain9_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X84]", "earlyGain8");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X80]", "earlyGain7");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X7C]", "earlyGain6");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X78]", "earlyGain5");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X74]", "earlyGain4");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X70]", "earlyGain3");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X6C]", "earlyGain2");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X68]", "earlyGain1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X64]", "earlySample9");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X60]", "earlyGain0");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X5C]", "earlySample8");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X58]", "earlySample7");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X50]", "earlySample6");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X4C]", "earlySample5");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X48]", "earlySample4");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X44]", "earlySample3");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X40]", "earlySample2");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X3C]", "earlySample1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X38]", "earlySample0");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X34]", "inputSample");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X30]", "input0_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X2C]", "output_2");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X28]", "hdDecayGain");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp-0X24]", "sampleCount_1");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp+0X8]", "outputs");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp+0XC]", "sample_count");
	define_local_var(0X8050C26C, 0X8050D97A, "[bp+0X10]", "sampleCount");
	add_func    (0X8050D97A,0X8050DA9E);
	set_func_flags(0X8050D97A,0x1410);
	SetType(0X8050D97A, "unsigned int __fastcall sub_8050D97A(int, int);");
	set_frame_size(0X8050D97A, 0X10, 8, 0);
	add_func    (0X8050DA9E,0X8050DB64);
	set_func_flags(0X8050DA9E,0x1410);
	SetType(0X8050DA9E, "int __fastcall DivQfQf(int dividend, int divisor);");
	set_frame_size(0X8050DA9E, 0X10, 8, 0);
	add_func    (0X8050DBB8,0X8050E1EA);
	set_func_flags(0X8050DBB8,0x1410);
	SetType(0X8050DBB8, "void __fastcall nn__audio__detail__ApplyI3dl2ReverbEffect1ch(nn::audio::I3dl2ReverbState *state, int **inputs, int **outputs, int sampleCount);");
	set_frame_size(0X8050DBB8, 0XA0, 8, 0);
	define_local_var(0X8050DBB8, 0X8050E1EA, "[bp-0X90]", "input_1");
	define_local_var(0X8050DBB8, 0X8050E1EA, "[bp-0X8C]", "output_1");
	define_local_var(0X8050DBB8, 0X8050E1EA, "[bp-0X70]", "mixingMatrix");
	add_func    (0X8050E1F0,0X8050E7C6);
	set_func_flags(0X8050E1F0,0x1410);
	SetType(0X8050E1F0, "void __fastcall nn__audio__detail__ApplyI3dl2ReverbEffect2ch(nn::audio::I3dl2ReverbState *state, int **inputs, int **outputs, int sampleCount);");
	set_frame_size(0X8050E1F0, 0XF0, 8, 0);
	define_local_var(0X8050E1F0, 0X8050E7C6, "[bp-0X68]", "sampleCount_1");
	define_local_var(0X8050E1F0, 0X8050E7C6, "[bp-0X64]", "input_2");
	add_func    (0X8050E804,0X8050EEAA);
	set_func_flags(0X8050E804,0x1410);
	SetType(0X8050E804, "int __fastcall nn__audio__detail__ApplyI3dl2ReverbEffect4ch(int result, int **, int, int);");
	set_frame_size(0X8050E804, 0X108, 8, 0);
	define_local_var(0X8050E804, 0X8050EEAA, "[bp-0X108]", "fdnDecayLine");
	add_func    (0X8050EEEC,0X8050F720);
	set_func_flags(0X8050EEEC,0x1410);
	SetType(0X8050EEEC, "void __fastcall nn__audio__detail__ApplyI3dl2ReverbEffect6ch(nn::audio::I3dl2ReverbState *state, int **inputs, int **outputs, int sampleCount);");
	set_frame_size(0X8050EEEC, 0X118, 8, 0);
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X118]", "fdnDelayLine0");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X114]", "fdnDelayLine1");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X110]", "fdnDelayLine2");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X10C]", "fdnDelayLine3");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X108]", "decayDelayLine00");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X104]", "decayDelayLine10");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X100]", "decayDelayLine01");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XFC]", "decayDelayLine11");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XF8]", "decayDelayLine02");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XF4]", "decayDelayLine12");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XF0]", "decayDelayLine03");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XEC]", "decayDelayLine13");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XE4]", "earlyTap01");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XDC]", "earlyTap2");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XD8]", "earlyTap3");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XD4]", "earlyTap4");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XD0]", "earlyTap56");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XC8]", "earlyTap7");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XC4]", "earlyTap89");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XBC]", "earlyTap10");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XB8]", "earlyTap11");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XB4]", "earlyTap12");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XB0]", "earlyTap1314");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XA8]", "earlyTap15");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XA4]", "earlyTap16");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0XA0]", "earlyTap17");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X9C]", "earlyTap18");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X98]", "earlyTap19");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X94]", "input5_1");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X90]", "input3_1");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X8C]", "input2_1");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X88]", "output5");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X84]", "output4");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X80]", "output3");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X7C]", "output2");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X78]", "output1");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X74]", "output0");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X6C]", "input4");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X68]", "input1");
	define_local_var(0X8050EEEC, 0X8050F720, "[bp-0X64]", "input0");
	add_func    (0X8050F720,0X8050F960);
	set_func_flags(0X8050F720,0x1410);
	SetType(0X8050F720, "void __fastcall nn__audio__InitializeI3dl2ReverbEffect(nn::audio::I3dl2ReverbParameter *param, nn::audio::I3dl2ReverbState *state, int *workBuffer);");
	set_frame_size(0X8050F720, 0X40, 8, 0);
	define_local_var(0X8050F720, 0X8050F960, "[bp-0X3C]", "param");
	define_local_var(0X8050F720, 0X8050F960, "[bp-0X34]", "maxDelayTimes_1");
	define_local_var(0X8050F720, 0X8050F960, "[bp-0X30]", "decay1MaxTime");
	define_local_var(0X8050F720, 0X8050F960, "[bp-0X2C]", "sampleRateDiv1000");
	add_func    (0X8050F964,0X8051068E);
	set_func_flags(0X8050F964,0x1410);
	SetType(0X8050F964, "void __fastcall nn__audio__UpdateI3dl2ReverbEffectParameter(nn::audio::I3dl2ReverbParameter *param, nn::audio::I3dl2ReverbState *state, int doReset);");
	set_frame_size(0X8050F964, 0X78, 8, 0);
	define_local_var(0X8050F964, 0X8051068E, "[bp-0X70]", "reset");
	define_local_var(0X8050F964, 0X8051068E, "[bp-0X6C]", "state_1");
	add_func    (0X805106B8,0X80510770);
	set_func_flags(0X805106B8,0x1410);
	SetType(0X805106B8, "void __fastcall ApplyI3dl2ReverbEffect(nn::audio::I3dl2ReverbParameter *param, nn::audio::I3dl2ReverbState *state, int enabled, int **inputs, int **outputs, int sampleCount);");
	set_frame_size(0X805106B8, 0X18, 8, 0);
	define_local_var(0X805106B8, 0X80510770, "[bp+0X8]", "outputs");
	add_func    (0X80510794,0X805108EE);
	set_func_flags(0X80510794,0x1410);
	SetType(0X80510794, "unsigned int __fastcall sub_80510794(int);");
	set_frame_size(0X80510794, 0X8, 8, 0);
	add_func    (0X805108EE,0X80510944);
	set_func_flags(0X805108EE,0x1410);
	SetType(0X805108EE, "float *__fastcall sub_805108EE(float *result, int32x4_t *, unsigned int);");
	set_frame_size(0X805108EE, 0X8, 8, 0);
	add_func    (0X80510944,0X8051095C);
	set_func_flags(0X80510944,0x1400);
	SetType(0X80510944, "float32x4_t *__fastcall sub_80510944(float32x4_t *result, int32x4_t *, int);");
	add_func    (0X8051095C,0X805109CA);
	set_func_flags(0X8051095C,0x1410);
	SetType(0X8051095C, "float *__fastcall sub_8051095C(float *result, int32x4_t *, unsigned int);");
	set_frame_size(0X8051095C, 0X8, 8, 0);
	add_func    (0X805109CA,0X80510A22);
	set_func_flags(0X805109CA,0x1410);
	SetType(0X805109CA, "int32x4_t *__fastcall sub_805109CA(int32x4_t *result, float32x4_t *, unsigned int);");
	set_frame_size(0X805109CA, 0X8, 8, 0);
	add_func    (0X80510A22,0X80510A3A);
	set_func_flags(0X80510A22,0x1400);
	SetType(0X80510A22, "int32x4_t *__fastcall sub_80510A22(int32x4_t *result, float32x4_t *, int);");
	add_func    (0X80510A3A,0X80510AAA);
	set_func_flags(0X80510A3A,0x1410);
	SetType(0X80510A3A, "int32x4_t *__fastcall sub_80510A3A(int32x4_t *result, float32x4_t *, unsigned int);");
	set_frame_size(0X80510A3A, 0X8, 8, 0);
	add_func    (0X80510AAA,0X80510ADA);
	set_func_flags(0X80510AAA,0x1400);
	SetType(0X80510AAA, "float *__fastcall sub_80510AAA(float *result, int *, char, int);");
	add_func    (0X80510ADA,0X80510B12);
	set_func_flags(0X80510ADA,0x1400);
	SetType(0X80510ADA, "float32x4_t *__fastcall sub_80510ADA(float32x4_t *result, int32x4_t *, char, int);");
	add_func    (0X80510B12,0X80510B7C);
	set_func_flags(0X80510B12,0x1400);
	SetType(0X80510B12, "float *__fastcall sub_80510B12(float *result, int *, char, int);");
	add_func    (0X80510B7C,0X80510BAE);
	set_func_flags(0X80510B7C,0x1400);
	SetType(0X80510B7C, "_DWORD *__fastcall sub_80510B7C(_DWORD *result, float *, char, int);");
	add_func    (0X80510BAE,0X80510BDE);
	set_func_flags(0X80510BAE,0x1400);
	SetType(0X80510BAE, "int32x4_t *__fastcall sub_80510BAE(int32x4_t *result, float32x4_t *, char, int);");
	add_func    (0X80510BDE,0X80510C42);
	set_func_flags(0X80510BDE,0x1400);
	SetType(0X80510BDE, "int32x4_t *__fastcall sub_80510BDE(int32x4_t *result, float *, char, int);");
	add_func    (0X80510C50,0X80510E5E);
	set_func_flags(0X80510C50,0x1410);
	SetType(0X80510C50, "int32x4_t *__fastcall sub_80510C50(int32x4_t *result, int32x2_t *, signed int, int);");
	set_frame_size(0X80510C50, 0X38, 8, 0);
	add_func    (0X80510E70,0X80510EC6);
	set_func_flags(0X80510E70,0x1400);
	SetType(0X80510E70, "int32x4_t *__fastcall sub_80510E70(int32x4_t *result, int32x4_t *, unsigned int, int);");
	add_func    (0X80510EC6,0X80510F14);
	set_func_flags(0X80510EC6,0x1400);
	SetType(0X80510EC6, "int32x2_t *__fastcall sub_80510EC6(int32x2_t *result, int32x2_t *, unsigned int, int);");
	add_func    (0X80510F20,0X8051107A);
	set_func_flags(0X80510F20,0x1410);
	SetType(0X80510F20, "int32x4_t *__fastcall sub_80510F20(int32x4_t *result, unsigned int, int, int);");
	set_frame_size(0X80510F20, 0X34, 8, 0);
	add_func    (0X80511090,0X8051116E);
	set_func_flags(0X80511090,0x1410);
	SetType(0X80511090, "int __fastcall sub_80511090(int32x4_t *, unsigned int, signed int, unsigned int, int);");
	set_frame_size(0X80511090, 0X10, 8, 0);
	add_func    (0X80511190,0X8051123A);
	set_func_flags(0X80511190,0x1410);
	SetType(0X80511190, "int __fastcall sub_80511190(int32x2_t *, int32x2_t *, unsigned int, int, int);");
	set_frame_size(0X80511190, 0X8, 8, 0);
	add_func    (0X8051123A,0X80511306);
	set_func_flags(0X8051123A,0x1410);
	SetType(0X8051123A, "int __fastcall sub_8051123A(int32x4_t *, int32x2_t *, unsigned int, int, int);");
	set_frame_size(0X8051123A, 0X8, 8, 0);
	add_func    (0X80511310,0X8051151E);
	set_func_flags(0X80511310,0x1410);
	SetType(0X80511310, "int32x4_t *__fastcall sub_80511310(int32x4_t *result, int32x2_t *, signed int, int);");
	set_frame_size(0X80511310, 0X38, 8, 0);
	add_func    (0X80511530,0X80511586);
	set_func_flags(0X80511530,0x1400);
	SetType(0X80511530, "int32x4_t *__fastcall sub_80511530(int32x4_t *result, int32x4_t *, unsigned int, int);");
	add_func    (0X80511586,0X805115D4);
	set_func_flags(0X80511586,0x1400);
	SetType(0X80511586, "int32x2_t *__fastcall sub_80511586(int32x2_t *result, int32x2_t *, unsigned int, int);");
	add_func    (0X805115E0,0X8051173A);
	set_func_flags(0X805115E0,0x1410);
	SetType(0X805115E0, "int32x4_t *__fastcall sub_805115E0(int32x4_t *result, unsigned int, int, int);");
	set_frame_size(0X805115E0, 0X34, 8, 0);
	add_func    (0X80511750,0X8051182E);
	set_func_flags(0X80511750,0x1410);
	SetType(0X80511750, "int __fastcall sub_80511750(int32x4_t *, unsigned int, signed int, unsigned int, int);");
	set_frame_size(0X80511750, 0X10, 8, 0);
	add_func    (0X80511850,0X805118FA);
	set_func_flags(0X80511850,0x1410);
	SetType(0X80511850, "int __fastcall sub_80511850(int32x2_t *, int32x2_t *, unsigned int, int, int);");
	set_frame_size(0X80511850, 0X8, 8, 0);
	add_func    (0X805118FA,0X805119C6);
	set_func_flags(0X805118FA,0x1410);
	SetType(0X805118FA, "int __fastcall sub_805118FA(int32x4_t *, int32x2_t *, unsigned int, int, int);");
	set_frame_size(0X805118FA, 0X8, 8, 0);
	add_func    (0X805119D0,0X80511DF6);
	set_func_flags(0X805119D0,0x1410);
	SetType(0X805119D0, "void __fastcall ApplyMix(s32 *output, s32 *input, signed int volume, unsigned int sampleCount, int precision);");
	set_frame_size(0X805119D0, 0X38, 8, 0);
	define_local_var(0X805119D0, 0X80511DF6, "[bp+0X8]", "precision");
	add_func    (0X80511E20,0X80511E46);
	set_func_flags(0X80511E20,0x1400);
	SetType(0X80511E20, "float *__fastcall sub_80511E20(float *result, float *, float, int);");
	add_func    (0X80511E46,0X80511E6A);
	set_func_flags(0X80511E46,0x1400);
	SetType(0X80511E46, "float32x4_t *__fastcall sub_80511E46(float32x4_t *result, float32x4_t *, unsigned int, int);");
	add_func    (0X80511E6A,0X80511EB4);
	set_func_flags(0X80511E6A,0x1400);
	SetType(0X80511E6A, "float *__fastcall sub_80511E6A(float *result, float *, float, int);");
	add_func    (0X80511EC0,0X805123A0);
	set_func_flags(0X80511EC0,0x1410);
	SetType(0X80511EC0, "unsigned __int32 __fastcall nn__audio__dsp__ApplyMixRamp(int32x4_t *output, int32x2_t *input, signed int volume, unsigned int ramp, int sampleCount, int precision);");
	set_frame_size(0X80511EC0, 0X10, 8, 0);
	define_local_var(0X80511EC0, 0X805123A0, "[bp+0X8]", "sampleCount");
	add_func    (0X805123D0,0X80512416);
	set_func_flags(0X805123D0,0x1400);
	SetType(0X805123D0, "int __fastcall sub_805123D0(float *, float *, float, float, int);");
	set_frame_size(0X805123D0, 0, 0, 0);
	add_func    (0X8051241C,0X805124A2);
	set_func_flags(0X8051241C,0x1400);
	SetType(0X8051241C, "float __fastcall sub_8051241C(float32x4_t *, float32x4_t *, float, float, int);");
	set_frame_size(0X8051241C, 0, 0, 0);
	add_func    (0X805124A8,0X8051256E);
	set_func_flags(0X805124A8,0x1400);
	SetType(0X805124A8, "float __fastcall sub_805124A8(float *, float *, float, float, int);");
	set_frame_size(0X805124A8, 0, 0, 0);
	add_func    (0X80512574,0X805126EE);
	set_func_flags(0X80512574,0x1410);
	SetType(0X80512574, "void __fastcall Resample_NormalQuality(int *output, unsigned __int16 *input, int sampleRateRatio, s16 *fraction, int sampleCount);");
	set_frame_size(0X80512574, 0X70, 8, 0);
	define_local_var(0X80512574, 0X805126EE, "[bp-0X68]", "fraction_1");
	define_local_var(0X80512574, 0X805126EE, "[bp+0X8]", "sampleCount");
	add_func    (0X805126EE,0X8051272C);
	set_func_flags(0X805126EE,0x1410);
	SetType(0X805126EE, "void __fastcall Resample_LowQuality(_DWORD *output, __int16 *input, int ratio, int *frac, int sampleCount);");
	set_frame_size(0X805126EE, 0X8, 8, 0);
	define_local_var(0X805126EE, 0X8051272C, "[bp+0X8]", "sampleCount");
	add_func    (0X8051272C,0X80512910);
	set_func_flags(0X8051272C,0x1410);
	SetType(0X8051272C, "void __fastcall Resample_HighQuality(int *output, unsigned __int16 *sampleHistory, int pitch, int *fraction, int sampleCount);");
	set_frame_size(0X8051272C, 0X50, 8, 0);
	define_local_var(0X8051272C, 0X80512910, "[bp-0X44]", "pitch_1");
	define_local_var(0X8051272C, 0X80512910, "[bp+0X8]", "sampleCount");
	add_func    (0X80512910,0X805129A4);
	set_func_flags(0X80512910,0x1410);
	SetType(0X80512910, "void __fastcall Resample(int *output, unsigned __int16 *sampleHistory, int sampleRateRatio, int *fraction, int samplesRemaining, int quality);");
	set_frame_size(0X80512910, 0X18, 8, 0);
	define_local_var(0X80512910, 0X805129A4, "[bp-0X18]", "sampleCount");
	define_local_var(0X80512910, 0X805129A4, "[bp+0X8]", "samplesRemaining");
	define_local_var(0X80512910, 0X805129A4, "[bp+0XC]", "quality");
	add_func    (0X805129A4,0X805129D0);
	set_func_flags(0X805129A4,0x1410);
	SetType(0X805129A4, "int __fastcall sub_805129A4(int, int);");
	set_frame_size(0X805129A4, 0X8, 8, 0);
	add_func    (0X805129D0,0X805137B0);
	set_func_flags(0X805129D0,0x1410);
	SetType(0X805129D0, "void __fastcall SrcProcessFrame(s32 *output, s32 *input, int targetSampleCount, int sampleCount, nn::audio::UpsamplerState *state);");
	set_frame_size(0X805129D0, 0X40, 8, 0);
	define_local_var(0X805129D0, 0X805137B0, "[bp-0X30]", "historyStartIndex_1");
	define_local_var(0X805129D0, 0X805137B0, "[bp-0X2C]", "history_1");
	define_local_var(0X805129D0, 0X805137B0, "[bp-0X20]", "output_1");
	define_local_var(0X805129D0, 0X805137B0, "[bp+0X8]", "state");
	add_func    (0X80513E40,0X80514184);
	set_func_flags(0X80513E40,0x1410);
	SetType(0X80513E40, "void __fastcall ApplyUniformGain(int32x2_t *output, int32x2_t *input, signed int volume, unsigned int sampleCount, int precision);");
	set_frame_size(0X80513E40, 0X38, 8, 0);
	define_local_var(0X80513E40, 0X80514184, "[bp+0X8]", "precision");
	add_func    (0X80514230,0X805144C8);
	set_func_flags(0X80514230,0x1410);
	SetType(0X80514230, "void __fastcall ApplyLinearEnvelopeGain(s32 *outBuffer, s32 *inBuffer, signed int gain, unsigned int ramp, int sampleCount, int precision);");
	set_frame_size(0X80514230, 0X10, 8, 0);
	define_local_var(0X80514230, 0X805144C8, "[bp+0X8]", "sampleCount");
	add_func    (0X80514634,0X8051463E);
	set_func_flags(0X80514634,0x1400);
	SetType(0X80514634, "int __cdecl Mailbox__Open(adsp_mbx_t *mbx, s16 id, bool isServer);");
	set_frame_size(0X80514634, 0X8, 0, 0);
	add_func    (0X8051463E,0X80514648);
	set_func_flags(0X8051463E,0x1400);
	SetType(0X8051463E, "status_t __fastcall Mailbox__Close(adsp_mbx_t *);");
	set_frame_size(0X8051463E, 0X8, 0, 0);
	add_func    (0X80514648,0X80514662);
	set_func_flags(0X80514648,0x1410);
	SetType(0X80514648, "int __fastcall Mailbox__Send(adsp_mbx_t *mbx, unsigned int msg);");
	set_frame_size(0X80514648, 0X10, 8, 0);
	add_func    (0X80514684,0X8051468E);
	set_func_flags(0X80514684,0x1400);
	SetType(0X80514684, "int __fastcall Mailbox__Receive_Wrap(adsp_mbx_t *);");
	set_frame_size(0X80514684, 0X8, 0, 0);
	add_func    (0X8051468E,0X80514690);
	set_func_flags(0X8051468E,0x1440);
	SetType(0X8051468E, "void nullsub_13();");
	add_func    (0X80514690,0X80514692);
	set_func_flags(0X80514690,0x1440);
	add_func    (0X80514692,0X8051476C);
	set_func_flags(0X80514692,0x1410);
	SetType(0X80514692, "int __fastcall mbox_open(adsp_mbx_t *mbx, s16 id, bool isServer);");
	set_frame_size(0X80514692, 0X18, 8, 0);
	define_local_var(0X80514692, 0X8051476C, "[bp-0X18]", "err_handler");
	define_local_var(0X80514692, 0X8051476C, "[bp-0X10]", "context");
	define_local_var(0X80514692, 0X8051476C, "[bp-0XA]", "mbx_ids");
	define_local_var(0X80514692, 0X8051476C, "[bp+0X8]", "error_handler");
	define_local_var(0X80514692, 0X8051476C, "[bp+0XC]", "msg_handler");
	add_func    (0X8051476C,0X80514784);
	set_func_flags(0X8051476C,0x1410);
	SetType(0X8051476C, "status_t __fastcall mbox_close(adsp_mbx_t *);");
	set_frame_size(0X8051476C, 0X10, 8, 0);
	add_func    (0X805147A6,0X805147CC);
	set_func_flags(0X805147A6,0x1410);
	SetType(0X805147A6, "status_t __fastcall mbx_send(adsp_mbx_t *mbx, int32_t msg);");
	set_frame_size(0X805147A6, 0X8, 8, 0);
	add_func    (0X805147CC,0X805147EE);
	set_func_flags(0X805147CC,0x1410);
	SetType(0X805147CC, "int __fastcall Mailbox__Receive(adsp_mbx_t *mbx);");
	set_frame_size(0X805147CC, 0X10, 8, 0);
	add_func    (0X80514810,0X8051481A);
	set_func_flags(0X80514810,0x1400);
	SetType(0X80514810, "int __fastcall FlushDataCache(int, unsigned int);");
	set_frame_size(0X80514810, 0X8, 0, 0);
	add_func    (0X8051481A,0X80514824);
	set_func_flags(0X8051481A,0x1400);
	SetType(0X8051481A, "void __fastcall InvalidateCache(addr_t, size_t);");
	set_frame_size(0X8051481A, 0X8, 0, 0);
	add_func    (0X80514824,0X80514828);
	set_func_flags(0X80514824,0x1400);
	SetType(0X80514824, "int OpusDecoder_Init();");
	add_func    (0X80514828,0X80514874);
	set_func_flags(0X80514828,0x1410);
	SetType(0X80514828, "int OpusDecoder_Main();");
	set_frame_size(0X80514828, 0X10, 8, 0);
	add_func    (0X80514874,0X8051490C);
	set_func_flags(0X80514874,0x1400);
	SetType(0X80514874, "int _cpu_early_init();");
	add_func    (0X80514910,0X80514940);
	set_func_flags(0X80514910,0x1400);
	SetType(0X80514910, "void __fastcall cpu_suspend(int);");
	set_frame_size(0X80514910, 0X34, 0, 0);
	add_func    (0X80514940,0X8051496C);
	set_func_flags(0X80514940,0x1400);
	SetType(0X80514940, "int cpu_resume();");
	add_func    (0X80514978,0X80514990);
	set_func_flags(0X80514978,0x1400);
	SetType(0X80514978, "int __fastcall Debug_Error1();");
	set_frame_size(0X80514978, 0X44, 0, 0);
	add_func    (0X80514990,0X80514B6A);
	set_func_flags(0X80514990,0x1400);
	SetType(0X80514990, "int __fastcall sub_80514990(unsigned int *);");
	set_frame_size(0X80514990, 0X48, 0, 0);
	add_func    (0X80514BAC,0X80514BD6);
	set_func_flags(0X80514BAC,0x1400);
	SetType(0X80514BAC, "void __fastcall platform_mmu_map_pages(int start, int end, unsigned int flags);");
	set_frame_size(0X80514BAC, 0X10, 0, 0);
	add_func    (0X80514BD6,0X80514BFA);
	set_func_flags(0X80514BD6,0x1400);
	SetType(0X80514BD6, "int __fastcall platform_mmu_unmap_pages(int result, int);");
	set_frame_size(0X80514BD6, 0X10, 0, 0);
	add_func    (0X80514BFA,0X80514C1C);
	set_func_flags(0X80514BFA,0x1400);
	SetType(0X80514BFA, "void __fastcall platform_mmu_unmap_sections(int result, unsigned int);");
	set_frame_size(0X80514BFA, 0X10, 0, 0);
	add_func    (0X80514C1C,0X80514C44);
	set_func_flags(0X80514C1C,0x1400);
	SetType(0X80514C1C, "int __fastcall sub_80514C1C(int, int, int);");
	set_frame_size(0X80514C1C, 0X8, 0, 0);
	add_func    (0X80514C48,0X80514C5C);
	set_func_flags(0X80514C48,0x1401);
	SetType(0X80514C48, "void __noreturn sub_80514C48();");
	set_frame_size(0X80514C48, 0X8, 0, 0);
	add_func    (0X80514C60,0X80514C92);
	set_func_flags(0X80514C60,0x1400);
	SetType(0X80514C60, "int __fastcall platform_init_outer();");
	add_func    (0X80514CB0,0X80514CB8);
	set_func_flags(0X80514CB0,0x1401);
	SetType(0X80514CB0, "void __noreturn dummy_idle_threadFunc();");
	set_frame_size(0X80514CB0, 0X8, 0, 0);
	add_func    (0X80514CB8,0X80514CCC);
	set_func_flags(0X80514CB8,0x1401);
	SetType(0X80514CB8, "void __noreturn sub_80514CB8();");
	set_frame_size(0X80514CB8, 0X8, 0, 0);
	add_func    (0X80514CCC,0X80514CFC);
	set_func_flags(0X80514CCC,0x1400);
	SetType(0X80514CCC, "int __fastcall adsp_send_os_load_complete(int msg);");
	set_frame_size(0X80514CCC, 0X10, 0, 0);
	add_func    (0X80514D10,0X80514D6A);
	set_func_flags(0X80514D10,0x1401);
	SetType(0X80514D10, "void __fastcall __noreturn platform_os_suspend();");
	set_frame_size(0X80514D10, 0X10, 0, 0);
	add_func    (0X80514D7C,0X80514DA0);
	set_func_flags(0X80514D7C,0x1401);
	SetType(0X80514D7C, "void __fastcall __noreturn host_cpu_comThreadFunc(void *arg);");
	set_frame_size(0X80514D7C, 0X10, 0, 0);
	define_local_var(0X80514D7C, 0X80514DA0, "[bp-0XC]", "cmd");
	add_func    (0X80514DB0,0X80514DB2);
	set_func_flags(0X80514DB0,0x1440);
	SetType(0X80514DB0, "void nullsub_2();");
	add_func    (0X80514DB4,0X80514E12);
	set_func_flags(0X80514DB4,0x1400);
	SetType(0X80514DB4, "void __fastcall platform_early_init();");
	set_frame_size(0X80514DB4, 0X8, 0, 0);
	add_func    (0X80514E24,0X80514F9E);
	set_func_flags(0X80514E24,0x1400);
	SetType(0X80514E24, "int platform_remap_mappings();");
	set_frame_size(0X80514E24, 0X18, 0, 0);
	add_func    (0X80515038,0X805150FE);
	set_func_flags(0X80515038,0x1400);
	SetType(0X80515038, "void __cdecl platform_init();");
	set_frame_size(0X80515038, 0X28, 0, 0);
	define_local_var(0X80515038, 0X805150FE, "[bp-0X28]", "err_handler");
	define_local_var(0X80515038, 0X805150FE, "[bp-0X24]", "msg_handler");
	define_local_var(0X80515038, 0X805150FE, "[bp-0X20]", "context");
	define_local_var(0X80515038, 0X805150FE, "[bp-0X12]", "mbx_id");
	add_func    (0X8051513C,0X80515170);
	set_func_flags(0X8051513C,0x1400);
	SetType(0X8051513C, "char *__fastcall vector_to_gic(unsigned int);");
	add_func    (0X80515174,0X805151B2);
	set_func_flags(0X80515174,0x1400);
	SetType(0X80515174, "int __fastcall handler(int);");
	set_frame_size(0X80515174, 0X18, 0, 0);
	add_func    (0X805151C0,0X805151FE);
	set_func_flags(0X805151C0,0x1400);
	SetType(0X805151C0, "int __fastcall handle_fiq(int);");
	set_frame_size(0X805151C0, 0X10, 0, 0);
	add_func    (0X8051520C,0X8051524C);
	set_func_flags(0X8051520C,0x1400);
	SetType(0X8051520C, "int __fastcall mask_interrupt(unsigned int);");
	set_frame_size(0X8051520C, 0X10, 0, 0);
	add_func    (0X8051524C,0X8051528C);
	set_func_flags(0X8051524C,0x1400);
	SetType(0X8051524C, "int __fastcall unmask_interrupt(unsigned int);");
	set_frame_size(0X8051524C, 0X10, 0, 0);
	add_func    (0X8051528C,0X80515326);
	set_func_flags(0X8051528C,0x1400);
	SetType(0X8051528C, "status_t __fastcall set_int_trigger_type(unsigned int vector, vector_trigger_type type);");
	set_frame_size(0X8051528C, 0X20, 0, 0);
	add_func    (0X8051532C,0X8051534C);
	set_func_flags(0X8051532C,0x1400);
	SetType(0X8051532C, "int __fastcall sub_8051532C(int, int, int);");
	set_frame_size(0X8051532C, 0X8, 0, 0);
	add_func    (0X8051535C,0X8051537A);
	set_func_flags(0X8051535C,0x1400);
	SetType(0X8051535C, "int __fastcall sub_8051535C(int, int, int);");
	set_frame_size(0X8051535C, 0X8, 0, 0);
	add_func    (0X8051538C,0X80515398);
	set_func_flags(0X8051538C,0x1400);
	SetType(0X8051538C, "int __fastcall platform_irq(int);");
	add_func    (0X805153A0,0X805153B8);
	set_func_flags(0X805153A0,0x1400);
	SetType(0X805153A0, "int __fastcall platform_fiq(int);");
	set_frame_size(0X805153A0, 0X8, 0, 0);
	add_func    (0X805153C0,0X80515416);
	set_func_flags(0X805153C0,0x1400);
	SetType(0X805153C0, "int __fastcall register_int_handler(unsigned int, int, int);");
	set_frame_size(0X805153C0, 0X18, 0, 0);
	add_func    (0X8051542C,0X80515472);
	set_func_flags(0X8051542C,0x1400);
	SetType(0X8051542C, "int __fastcall sub_8051542C(unsigned int);");
	set_frame_size(0X8051542C, 0X8, 0, 0);
	add_func    (0X80515484,0X805154CE);
	set_func_flags(0X80515484,0x1400);
	SetType(0X80515484, "int __fastcall set_as_fiq(unsigned int);");
	set_frame_size(0X80515484, 0X8, 0, 0);
	add_func    (0X805154D0,0X8051557E);
	set_func_flags(0X805154D0,0x1400);
	SetType(0X805154D0, "unsigned int __fastcall enable_int_dist(const char **);");
	set_frame_size(0X805154D0, 0X18, 0, 0);
	add_func    (0X80515588,0X805155A8);
	set_func_flags(0X80515588,0x1400);
	SetType(0X80515588, "int __fastcall enable_cpuintf(int result);");
	set_frame_size(0X80515588, 0X8, 0, 0);
	add_func    (0X805155AC,0X805155D6);
	set_func_flags(0X805155AC,0x1400);
	SetType(0X805155AC, "int __fastcall sub_805155AC(int result);");
	set_frame_size(0X805155AC, 0XC, 0, 0);
	add_func    (0X805155D6,0X805155E4);
	set_func_flags(0X805155D6,0x1400);
	SetType(0X805155D6, "int __fastcall sub_805155D6(int result);");
	add_func    (0X805155E4,0X8051563A);
	set_func_flags(0X805155E4,0x1400);
	SetType(0X805155E4, "int platform_init_interrupts();");
	set_frame_size(0X805155E4, 0X10, 0, 0);
	add_func    (0X80515654,0X80515676);
	set_func_flags(0X80515654,0x1400);
	SetType(0X80515654, "int platform_deinit_interrupts();");
	set_frame_size(0X80515654, 0X8, 0, 0);
	add_func    (0X8051567C,0X805156AC);
	set_func_flags(0X8051567C,0x1400);
	SetType(0X8051567C, "__int64 sub_8051567C();");
	set_frame_size(0X8051567C, 0XC, 0, 0);
	add_func    (0X805156B8,0X805156C4);
	set_func_flags(0X805156B8,0x1400);
	SetType(0X805156B8, "void sub_805156B8();");
	add_func    (0X805156C8,0X80515700);
	set_func_flags(0X805156C8,0x1400);
	SetType(0X805156C8, "int __fastcall sub_805156C8(int, int, int);");
	set_frame_size(0X805156C8, 0X10, 0, 0);
	add_func    (0X80515710,0X80515766);
	set_func_flags(0X80515710,0x1400);
	SetType(0X80515710, "int __fastcall platform_set_oneshot_timer_hi_res(handler_return (__fastcall *)(void *, lk_bigtime_t), void *, __int64);");
	set_frame_size(0X80515710, 0X18, 0, 0);
	add_func    (0X8051577C,0X805157C2);
	set_func_flags(0X8051577C,0x1400);
	SetType(0X8051577C, "void __fastcall platform_set_wdt_timer(lk_time_t interval_ms);");
	set_frame_size(0X8051577C, 0X8, 0, 0);
	add_func    (0X805157D4,0X8051584C);
	set_func_flags(0X805157D4,0x1400);
	SetType(0X805157D4, "void __fastcall _platform_init_timer(int counter);");
	set_frame_size(0X805157D4, 0X18, 0, 0);
	add_func    (0X80515870,0X805158A8);
	set_func_flags(0X80515870,0x1400);
	SetType(0X80515870, "void platform_disable_wdt_timer();");
	add_func    (0X805158B8,0X8051592E);
	set_func_flags(0X805158B8,0x1400);
	SetType(0X805158B8, "lk_time_t __fastcall current_time();");
	set_frame_size(0X805158B8, 0X20, 0, 0);
	add_func    (0X8051593C,0X805159B6);
	set_func_flags(0X8051593C,0x1400);
	SetType(0X8051593C, "lk_bigtime_t __fastcall current_time_hires();");
	set_frame_size(0X8051593C, 0X20, 0, 0);
	add_func    (0X805159C0,0X805159F2);
	set_func_flags(0X805159C0,0x1400);
	SetType(0X805159C0, "platform_timer_callback_hires us_handler();");
	set_frame_size(0X805159C0, 0X10, 0, 0);
	add_func    (0X80515A04,0X80515A3E);
	set_func_flags(0X80515A04,0x1400);
	SetType(0X80515A04, "handler_return __fastcall os_timer_tick(void *arg);");
	set_frame_size(0X80515A04, 0X10, 0, 0);
	add_func    (0X80515A50,0X80515AE0);
	set_func_flags(0X80515A50,0x1400);
	SetType(0X80515A50, "unsigned __int64 __fastcall sub_80515A50(int, int, unsigned int);");
	set_frame_size(0X80515A50, 0X28, 0, 0);
	add_func    (0X80515AF8,0X80515B0E);
	set_func_flags(0X80515AF8,0x1400);
	SetType(0X80515AF8, "void __fastcall platform_init_timer(int counter);");
	set_frame_size(0X80515AF8, 0X8, 0, 0);
	add_func    (0X80515B18,0X80515B3A);
	set_func_flags(0X80515B18,0x1400);
	SetType(0X80515B18, "__int64 platform_halt_timer();");
	set_frame_size(0X80515B18, 0X8, 0, 0);
	add_func    (0X80515B48,0X80515B5E);
	set_func_flags(0X80515B48,0x1400);
	SetType(0X80515B48, "int __fastcall timer_cb(int);");
	set_frame_size(0X80515B48, 0X8, 0, 0);
	add_func    (0X80515B60,0X80515B96);
	set_func_flags(0X80515B60,0x1400);
	SetType(0X80515B60, "int read_global_counter();");
	set_frame_size(0X80515B60, 0XC, 0, 0);
	add_func    (0X80515BA0,0X80515BC0);
	set_func_flags(0X80515BA0,0x1400);
	SetType(0X80515BA0, "BOOL __fastcall msg_handler(unsigned __int8, int, int);");
	set_frame_size(0X80515BA0, 0X8, 0, 0);
	add_func    (0X80515BC4,0X80515C1A);
	set_func_flags(0X80515BC4,0x1400);
	SetType(0X80515BC4, "void __cdecl platform_init_debug();");
	set_frame_size(0X80515BC4, 0X20, 0, 0);
	define_local_var(0X80515BC4, 0X80515C1A, "[bp-0X20]", "err_handler");
	define_local_var(0X80515BC4, 0X80515C1A, "[bp-0X1C]", "msg_handler");
	define_local_var(0X80515BC4, 0X80515C1A, "[bp-0X18]", "context");
	define_local_var(0X80515BC4, 0X80515C1A, "[bp-0XA]", "mbx_id");
	add_func    (0X80515C38,0X80515C3C);
	set_func_flags(0X80515C38,0x1400);
	SetType(0X80515C38, "int sub_80515C38();");
	add_func    (0X80515C3C,0X80515C42);
	set_func_flags(0X80515C3C,0x1400);
	SetType(0X80515C3C, "int sub_80515C3C();");
	add_func    (0X80515C44,0X80515C86);
	set_func_flags(0X80515C44,0x1400);
	SetType(0X80515C44, "int __fastcall dram_log_putc(char);");
	add_func    (0X80515C94,0X80515CFC);
	set_func_flags(0X80515C94,0x1400);
	SetType(0X80515C94, "int __fastcall platform_dputc(int c);");
	set_frame_size(0X80515C94, 0X28, 0, 0);
	add_func    (0X80515D08,0X80515D20);
	set_func_flags(0X80515D08,0x1400);
	SetType(0X80515D08, "int __fastcall platform_dgetc(unsigned __int8 *c, bool wait);");
	add_func    (0X80515D28,0X80515D46);
	set_func_flags(0X80515D28,0x1400);
	SetType(0X80515D28, "int __fastcall platform_init_uart();");
	set_frame_size(0X80515D28, 0X8, 0, 0);
	add_func    (0X80515D58,0X80515D5A);
	set_func_flags(0X80515D58,0x1440);
	add_func    (0X80515D5C,0X80515DB0);
	set_func_flags(0X80515D5C,0x1400);
	SetType(0X80515D5C, "int __fastcall sub_80515D5C(char *, unsigned int);");
	set_frame_size(0X80515D5C, 0X18, 0, 0);
	add_func    (0X80515DB8,0X80515E0E);
	set_func_flags(0X80515DB8,0x1400);
	SetType(0X80515DB8, "int __fastcall sub_80515DB8(char *, unsigned int, int, int);");
	set_frame_size(0X80515DB8, 0X28, 0, 0);
	add_func    (0X80515E1C,0X80515E54);
	set_func_flags(0X80515E1C,0x1400);
	SetType(0X80515E1C, "int __fastcall sub_80515E1C(int *, int, int);");
	set_frame_size(0X80515E1C, 0X20, 0, 0);
	add_func    (0X80515E54,0X80515E70);
	set_func_flags(0X80515E54,0x1400);
	SetType(0X80515E54, "int __fastcall sub_80515E54(int);");
	set_frame_size(0X80515E54, 0X8, 0, 0);
	add_func    (0X80515E70,0X80515E78);
	set_func_flags(0X80515E70,0x1400);
	SetType(0X80515E70, "void sub_80515E70();");
	add_func    (0X80515E7C,0X80515E84);
	set_func_flags(0X80515E7C,0x1400);
	SetType(0X80515E7C, "void sub_80515E7C();");
	add_func    (0X80515E88,0X80515E96);
	set_func_flags(0X80515E88,0x1400);
	SetType(0X80515E88, "int __fastcall sub_80515E88(_DWORD *);");
	add_func    (0X80515E98,0X80515FC2);
	set_func_flags(0X80515E98,0x1400);
	SetType(0X80515E98, "int __fastcall sub_80515E98(unsigned __int8 *, int);");
	set_frame_size(0X80515E98, 0X10, 0, 0);
	add_func    (0X80515FD8,0X80516028);
	set_func_flags(0X80515FD8,0x1400);
	SetType(0X80515FD8, "int __fastcall sub_80515FD8(int *, int, int, int);");
	set_frame_size(0X80515FD8, 0XC, 0, 0);
	add_func    (0X80516028,0X8051604C);
	set_func_flags(0X80516028,0x1400);
	SetType(0X80516028, "int __fastcall sub_80516028(unsigned __int8 *);");
	add_func    (0X8051604C,0X80516078);
	set_func_flags(0X8051604C,0x1400);
	SetType(0X8051604C, "int __fastcall sub_8051604C(int);");
	set_frame_size(0X8051604C, 0X8, 0, 0);
	add_func    (0X8051607C,0X805160BC);
	set_func_flags(0X8051607C,0x1400);
	SetType(0X8051607C, "int __fastcall sub_8051607C(unsigned __int8 *, int);");
	set_frame_size(0X8051607C, 0X8, 0, 0);
	add_func    (0X805160C0,0X80516160);
	set_func_flags(0X805160C0,0x1400);
	SetType(0X805160C0, "int __fastcall sub_805160C0(int *, int *, _DWORD *, unsigned int *, _QWORD *);");
	set_frame_size(0X805160C0, 0X18, 0, 0);
	add_func    (0X80516164,0X805161CE);
	set_func_flags(0X80516164,0x1400);
	SetType(0X80516164, "int __fastcall sub_80516164(int);");
	set_frame_size(0X80516164, 0X8, 0, 0);
	add_func    (0X805161DC,0X8051620A);
	set_func_flags(0X805161DC,0x1400);
	SetType(0X805161DC, "int __fastcall sub_805161DC(int);");
	set_frame_size(0X805161DC, 0X8, 0, 0);
	add_func    (0X8051620A,0X8051620E);
	set_func_flags(0X8051620A,0x1400);
	SetType(0X8051620A, "int sub_8051620A();");
	add_func    (0X8051620E,0X80516212);
	set_func_flags(0X8051620E,0x1400);
	SetType(0X8051620E, "int sub_8051620E();");
	add_func    (0X80516214,0X80516254);
	set_func_flags(0X80516214,0x1400);
	SetType(0X80516214, "int __fastcall sub_80516214(int, int);");
	set_frame_size(0X80516214, 0X8, 0, 0);
	add_func    (0X80516258,0X805162BE);
	set_func_flags(0X80516258,0x1400);
	SetType(0X80516258, "int __fastcall platform_init_aram(int, char *, int);");
	set_frame_size(0X80516258, 0X8, 0, 0);
	add_func    (0X805162D8,0X805162FE);
	set_func_flags(0X805162D8,0x1400);
	SetType(0X805162D8, "int __fastcall scheduler_cb(unsigned int freq);");
	add_func    (0X80516308,0X80516340);
	set_func_flags(0X80516308,0x1400);
	SetType(0X80516308, "int __fastcall dfs_receive(int index);");
	set_frame_size(0X80516308, 0X8, 0, 0);
	add_func    (0X80516350,0X80516392);
	set_func_flags(0X80516350,0x1400);
	SetType(0X80516350, "void __cdecl adsp_dfs_init();");
	set_frame_size(0X80516350, 0X20, 0, 0);
	define_local_var(0X80516350, 0X80516392, "[bp-0X20]", "err_handler");
	define_local_var(0X80516350, 0X80516392, "[bp-0X1C]", "msg_handler");
	define_local_var(0X80516350, 0X80516392, "[bp-0X18]", "context");
	add_func    (0X805163A4,0X805163AC);
	set_func_flags(0X805163A4,0x1400);
	SetType(0X805163A4, "__int64 get_cur_adsp_freq();");
	add_func    (0X805163B0,0X805163BA);
	set_func_flags(0X805163B0,0x1400);
	SetType(0X805163B0, "int __fastcall set_cur_adsp_freq(int index);");
	add_func    (0X805163C0,0X805163C4);
	set_func_flags(0X805163C0,0x1480);
	SetType(0X805163C0, "int __fastcall sub_805163C0(unsigned int freq);");
	add_func    (0X805163C4,0X80516490);
	set_func_flags(0X805163C4,0x1400);
	SetType(0X805163C4, "BOOL __fastcall adsp_hw_rdy_mbx_handler(void *ctx);");
	set_frame_size(0X805163C4, 0X18, 0, 0);
	add_func    (0X8051649C,0X8051656E);
	set_func_flags(0X8051649C,0x1400);
	SetType(0X8051649C, "BOOL __fastcall adsp_hw_full_mbx_handler(void *ctx);");
	set_frame_size(0X8051649C, 0X18, 0, 0);
	add_func    (0X8051657C,0X805165FE);
	set_func_flags(0X8051657C,0x1400);
	SetType(0X8051657C, "int __fastcall get_next_mbx_id(__int16 *id);");
	set_frame_size(0X8051657C, 0X10, 0, 0);
	add_func    (0X80516614,0X80516630);
	set_func_flags(0X80516614,0x1400);
	SetType(0X80516614, "int __fastcall put_mbx_id(int mb_id);");
	add_func    (0X80516634,0X8051665C);
	set_func_flags(0X80516634,0x1400);
	SetType(0X80516634, "void __cdecl adsp_sw_mbx_init();");
	set_frame_size(0X80516634, 0X8, 0, 0);
	add_func    (0X80516668,0X8051670E);
	set_func_flags(0X80516668,0x1400);
	SetType(0X80516668, "int __fastcall mbx_open(adsp_mbx_t *mbx, int16_t *mbx_id, unsigned __int8 *name, semaphore_t *sem, adsp_mbx_handler_t err_handler, adsp_mbx_handler_t msg_handler, void *context);");
	set_frame_size(0X80516668, 0X28, 0, 0);
	define_local_var(0X80516668, 0X8051670E, "[bp+0]", "err_handler");
	define_local_var(0X80516668, 0X8051670E, "[bp+0X4]", "msg_handler");
	define_local_var(0X80516668, 0X8051670E, "[bp+0X8]", "context");
	add_func    (0X8051671C,0X80516786);
	set_func_flags(0X8051671C,0x1400);
	SetType(0X8051671C, "status_t __fastcall mbx_close(adsp_mbx_t *mbx);");
	set_frame_size(0X8051671C, 0X18, 0, 0);
	add_func    (0X80516794,0X8051684A);
	set_func_flags(0X80516794,0x1400);
	SetType(0X80516794, "int __fastcall mbx_attr(int, int, int);");
	set_frame_size(0X80516794, 0X18, 0, 0);
	add_func    (0X80516858,0X805168F8);
	set_func_flags(0X80516858,0x1400);
	SetType(0X80516858, "status_t __fastcall mbx_recv_msg(adsp_mbx_t *mbox, _DWORD *data, int block, unsigned int timeout);");
	set_frame_size(0X80516858, 0X20, 0, 0);
	add_func    (0X80516900,0X80516906);
	set_func_flags(0X80516900,0x1400);
	SetType(0X80516900, "int __fastcall sub_80516900(int);");
	add_func    (0X80516908,0X8051692A);
	set_func_flags(0X80516908,0x1400);
	SetType(0X80516908, "void __fastcall mbx_clear_err_code(adsp_mbx_t *mbx);");
	add_func    (0X80516930,0X80516950);
	set_func_flags(0X80516930,0x1400);
	SetType(0X80516930, "int __fastcall sub_80516930(int result, char);");
	add_func    (0X80516954,0X8051695E);
	set_func_flags(0X80516954,0x1400);
	SetType(0X80516954, "int __fastcall sub_80516954(int);");
	add_func    (0X8051695E,0X8051696E);
	set_func_flags(0X8051695E,0x1400);
	SetType(0X8051695E, "int __fastcall sub_8051695E(int, int);");
	add_func    (0X8051696E,0X8051697C);
	set_func_flags(0X8051696E,0x1400);
	SetType(0X8051696E, "int __fastcall sub_8051696E(int, int);");
	add_func    (0X8051697C,0X80516986);
	set_func_flags(0X8051697C,0x1400);
	SetType(0X8051697C, "int __fastcall sub_8051697C(int);");
	add_func    (0X80516986,0X80516990);
	set_func_flags(0X80516986,0x1400);
	SetType(0X80516986, "int __fastcall sub_80516986(int);");
	add_func    (0X80516990,0X805169F2);
	set_func_flags(0X80516990,0x1400);
	SetType(0X80516990, "status_t __fastcall adsp_hw_mbx_send(int16_t mbx_id, int32_t data, bool block, lk_time_t timeout);");
	set_frame_size(0X80516990, 0X10, 0, 0);
	add_func    (0X80516A00,0X80516A6E);
	set_func_flags(0X80516A00,0x1400);
	SetType(0X80516A00, "status_t __fastcall mbx_send_msg(adsp_mbx_t *mbx, int32_t data, int32_t block, lk_time_t timeout);");
	set_frame_size(0X80516A00, 0X20, 0, 0);
	add_func    (0X80516A78,0X80516B20);
	set_func_flags(0X80516A78,0x1400);
	SetType(0X80516A78, "status_t __fastcall adsp_hw_mbx_init(int mbx_id);");
	set_frame_size(0X80516A78, 0X10, 0, 0);
	add_func    (0X80516B3C,0X80516BE6);
	set_func_flags(0X80516B3C,0x1400);
	SetType(0X80516B3C, "void wait_for_mbx_send_complete();");
	set_frame_size(0X80516B3C, 0X18, 0, 0);
	add_func    (0X80516C10,0X80516C18);
	set_func_flags(0X80516C10,0x1400);
	SetType(0X80516C10, "int __fastcall adsp_arm_hello_world(int, char *, int);");
	add_func    (0X80516C1C,0X80516C40);
	set_func_flags(0X80516C1C,0x1401);
	SetType(0X80516C1C, "void __noreturn enter_wfi();");
	set_frame_size(0X80516C1C, 0X8, 0, 0);
	add_func    (0X80516C48,0X80516C88);
	set_func_flags(0X80516C48,0x1400);
	SetType(0X80516C48, "int __fastcall arm_context_switch(_DWORD *, int);");
	set_frame_size(0X80516C48, 0X28, 0, 0);
	add_func    (0X80516C88,0X80516CF8);
	set_func_flags(0X80516C88,0x1400);
	SetType(0X80516C88, "_DWORD *__fastcall arm_save_mode_regs(_DWORD *, int, int, int, int);");
	add_func    (0X80516CF8,0X80516D54);
	set_func_flags(0X80516CF8,0x1400);
	SetType(0X80516CF8, "int __fastcall arch_disable_cache(char);");
	set_frame_size(0X80516CF8, 0X24, 0, 0);
	add_func    (0X80516D54,0X80516DB8);
	set_func_flags(0X80516D54,0x1400);
	SetType(0X80516D54, "int __fastcall arch_enable_cache(int result);");
	set_frame_size(0X80516D54, 0X24, 0, 0);
	add_func    (0X80516DB8,0X80516E44);
	set_func_flags(0X80516DB8,0x1400);
	SetType(0X80516DB8, "void __cdecl flush_invalidate_cache_v7_0();");
	add_func    (0X80516E44,0X80516ED0);
	set_func_flags(0X80516E44,0x1400);
	SetType(0X80516E44, "unsigned int flush_invalidate_cache_v7();");
	add_func    (0X80516ED0,0X80516F5C);
	set_func_flags(0X80516ED0,0x1400);
	SetType(0X80516ED0, "unsigned int invalidate_cache_v7();");
	add_func    (0X80516F5C,0X80516F98);
	set_func_flags(0X80516F5C,0x1400);
	SetType(0X80516F5C, "void __fastcall arch_clean_cache_range(int addr, int len);");
	add_func    (0X80516F98,0X80516FC8);
	set_func_flags(0X80516F98,0x1400);
	SetType(0X80516F98, "int __fastcall arch_clean_invalidate_cache_range(int, unsigned int);");
	add_func    (0X80516FC8,0X80516FD4);
	set_func_flags(0X80516FC8,0x1400);
	SetType(0X80516FC8, "int sub_80516FC8();");
	add_func    (0X80516FD4,0X80516FF8);
	set_func_flags(0X80516FD4,0x1400);
	SetType(0X80516FD4, "int __fastcall arch_invalidate_cache_range(int, int);");
	add_func    (0X80516FF8,0X8051700C);
	set_func_flags(0X80516FF8,0x1400);
	SetType(0X80516FF8, "int __fastcall arch_sync_cache_range();");
	set_frame_size(0X80516FF8, 0X4, 0, 0);
	add_func    (0X80517014,0X8051701C);
	set_func_flags(0X80517014,0x1400);
	SetType(0X80517014, "void arch_idle();");
	add_func    (0X8051701C,0X80517024);
	set_func_flags(0X8051701C,0x1400);
	SetType(0X8051701C, "int arm_read_cr1();");
	add_func    (0X80517024,0X8051702C);
	set_func_flags(0X80517024,0x1400);
	SetType(0X80517024, "unsigned int __fastcall arm_write_cr1(unsigned int result);");
	add_func    (0X8051702C,0X80517034);
	set_func_flags(0X8051702C,0x1400);
	SetType(0X8051702C, "int arm_read_cr1_aux();");
	add_func    (0X80517034,0X8051703C);
	set_func_flags(0X80517034,0x1400);
	SetType(0X80517034, "unsigned int __fastcall arm_write_cr1_aux(unsigned int result);");
	add_func    (0X8051703C,0X80517044);
	set_func_flags(0X8051703C,0x1400);
	SetType(0X8051703C, "unsigned int __fastcall arm_write_ttbr(unsigned int result);");
	add_func    (0X80517044,0X8051704C);
	set_func_flags(0X80517044,0x1400);
	SetType(0X80517044, "unsigned int __fastcall arm_write_ttbcr(unsigned int result);");
	add_func    (0X8051704C,0X80517054);
	set_func_flags(0X8051704C,0x1400);
	SetType(0X8051704C, "unsigned int __fastcall arm_write_dacr(unsigned int result);");
	add_func    (0X80517054,0X8051706C);
	set_func_flags(0X80517054,0x1400);
	SetType(0X80517054, "int arm_invalidate_tlb();");
	add_func    (0X8051706C,0X8051708C);
	set_func_flags(0X8051706C,0x1400);
	SetType(0X8051706C, "void __fastcall arm_invalidate_tlb_byaddr(unsigned int);");
	add_func    (0X8051708C,0X80517094);
	set_func_flags(0X8051708C,0x1400);
	SetType(0X8051708C, "int sub_8051708C();");
	add_func    (0X80517094,0X805170D8);
	set_func_flags(0X80517094,0x1401);
	SetType(0X80517094, "void __fastcall __noreturn Stop_UnhandledAbort(int, int, int, int, int);");
	set_frame_size(0X80517094, 0X44, 0, 0);
	add_func    (0X805170D8,0X80517118);
	set_func_flags(0X805170D8,0x1401);
	SetType(0X805170D8, "void __fastcall __noreturn Stop_UnhandledSyscall(int, int, int, int, int);");
	set_frame_size(0X805170D8, 0X44, 0, 0);
	add_func    (0X80517118,0X8051715C);
	set_func_flags(0X80517118,0x1401);
	SetType(0X80517118, "void __fastcall __noreturn Stop_PrefetchAbort(int, int, int, int, int);");
	set_frame_size(0X80517118, 0X44, 0, 0);
	add_func    (0X8051715C,0X805171A0);
	set_func_flags(0X8051715C,0x1401);
	SetType(0X8051715C, "void __fastcall __noreturn Stop_DataAbort(int, int, int, int, int);");
	set_frame_size(0X8051715C, 0X44, 0, 0);
	add_func    (0X805171A0,0X805171A4);
	set_func_flags(0X805171A0,0x1401);
	SetType(0X805171A0, "void __noreturn arm_reserved_();");
	add_func    (0X805171A4,0X80517210);
	set_func_flags(0X805171A4,0x1401);
	SetType(0X805171A4, "void __fastcall __noreturn arm_irq(int, int, int, int, int);");
	set_frame_size(0X805171A4, 0X24, 0, 0);
	add_func    (0X80517210,0X80517254);
	set_func_flags(0X80517210,0x1401);
	SetType(0X80517210, "void __fastcall __noreturn arm_fiq(int, int, int, int, int);");
	set_frame_size(0X80517210, 0X24, 0, 0);
	add_func    (0X80517280,0X80517292);
	set_func_flags(0X80517280,0x1400);
	SetType(0X80517280, "_DWORD *__fastcall sub_80517280(int, int);");
	add_func    (0X80517298,0X805172A4);
	set_func_flags(0X80517298,0x1400);
	SetType(0X80517298, "int __fastcall l2x0_cache_sync(_DWORD);");
	add_func    (0X805172A8,0X805172C6);
	set_func_flags(0X805172A8,0x1400);
	SetType(0X805172A8, "int l2x0_flush_all(void);");
	set_frame_size(0X805172A8, 0X8, 0, 0);
	add_func    (0X805172D0,0X805172EE);
	set_func_flags(0X805172D0,0x1400);
	SetType(0X805172D0, "int l2x0_clean_all();");
	set_frame_size(0X805172D0, 0X8, 0, 0);
	add_func    (0X805172F8,0X80517320);
	set_func_flags(0X805172F8,0x1400);
	SetType(0X805172F8, "int __fastcall l2x0_clean_range(int, unsigned int);");
	add_func    (0X80517328,0X80517334);
	set_func_flags(0X80517328,0x1400);
	SetType(0X80517328, "void l2x0_enable();");
	add_func    (0X80517338,0X8051734E);
	set_func_flags(0X80517338,0x1400);
	SetType(0X80517338, "void l2x0_disable();");
	add_func    (0X80517354,0X80517388);
	set_func_flags(0X80517354,0x1400);
	SetType(0X80517354, "int __fastcall l2x0_inv_all(int, int);");
	set_frame_size(0X80517354, 0X8, 0, 0);
	add_func    (0X80517394,0X805173BC);
	set_func_flags(0X80517394,0x1400);
	SetType(0X80517394, "int __fastcall l2x0_flush_range(int, unsigned int);");
	add_func    (0X805173C4,0X805173FC);
	set_func_flags(0X805173C4,0x1400);
	SetType(0X805173C4, "int __fastcall l2x0_inv_range(unsigned int, int);");
	add_func    (0X80517400,0X8051741C);
	set_func_flags(0X80517400,0x1400);
	SetType(0X80517400, "int __fastcall sub_80517400(char, char);");
	add_func    (0X80517420,0X8051742E);
	set_func_flags(0X80517420,0x1400);
	SetType(0X80517420, "int sub_80517420();");
	add_func    (0X80517434,0X80517442);
	set_func_flags(0X80517434,0x1400);
	SetType(0X80517434, "int l2x0_reset_events();");
	add_func    (0X80517448,0X8051745C);
	set_func_flags(0X80517448,0x1400);
	SetType(0X80517448, "int l2x0_stop_events();");
	add_func    (0X80517462,0X80517474);
	set_func_flags(0X80517462,0x1400);
	SetType(0X80517462, "int __fastcall sub_80517462(_DWORD *, _DWORD *, int, int *);");
	add_func    (0X80517478,0X8051747E);
	set_func_flags(0X80517478,0x1400);
	SetType(0X80517478, "int __fastcall l2x0_set_base(int result);");
	add_func    (0X80517484,0X80517598);
	set_func_flags(0X80517484,0x1400);
	SetType(0X80517484, "int __fastcall l2x0_init(int, int);");
	set_frame_size(0X80517484, 0X28, 0, 0);
	add_func    (0X805175F4,0X80517628);
	set_func_flags(0X805175F4,0x1400);
	SetType(0X805175F4, "void __fastcall FlushRange(int, unsigned int);");
	set_frame_size(0X805175F4, 0X10, 0, 0);
	add_func    (0X80517630,0X80517664);
	set_func_flags(0X80517630,0x1400);
	SetType(0X80517630, "void __fastcall CleanCacheRange(paddr_t, unsigned int);");
	set_frame_size(0X80517630, 0X10, 0, 0);
	add_func    (0X8051766C,0X805176A0);
	set_func_flags(0X8051766C,0x1400);
	SetType(0X8051766C, "void __fastcall cache_inv_range(addr_t addr, size_t len);");
	set_frame_size(0X8051766C, 0X10, 0, 0);
	add_func    (0X805176A8,0X805176D6);
	set_func_flags(0X805176A8,0x1400);
	SetType(0X805176A8, "int __fastcall CleanAndInvalidateCache();");
	set_frame_size(0X805176A8, 0X8, 0, 0);
	add_func    (0X805176E0,0X8051770E);
	set_func_flags(0X805176E0,0x1400);
	SetType(0X805176E0, "int __fastcall CleanCache();");
	set_frame_size(0X805176E0, 0X8, 0, 0);
	add_func    (0X80517718,0X80517746);
	set_func_flags(0X80517718,0x1400);
	SetType(0X80517718, "int sub_80517718();");
	set_frame_size(0X80517718, 0X8, 0, 0);
	add_func    (0X80517750,0X8051777A);
	set_func_flags(0X80517750,0x1400);
	SetType(0X80517750, "int sub_80517750();");
	set_frame_size(0X80517750, 0X8, 0, 0);
	add_func    (0X80517784,0X805177AE);
	set_func_flags(0X80517784,0x1400);
	SetType(0X80517784, "int sub_80517784();");
	set_frame_size(0X80517784, 0X8, 0, 0);
	add_func    (0X805177B8,0X80517992);
	set_func_flags(0X805177B8,0x1400);
	SetType(0X805177B8, "void __fastcall __noreturn exception_die(_DWORD *, int, int);");
	set_frame_size(0X805177B8, 0X48, 0, 0);
	add_func    (0X805179E0,0X805179F2);
	set_func_flags(0X805179E0,0x1400);
	SetType(0X805179E0, "int __fastcall sub_805179E0(int, unsigned int);");
	add_func    (0X805179F8,0X80517A18);
	set_func_flags(0X805179F8,0x1400);
	SetType(0X805179F8, "int __fastcall ExitKernelUnhandledSyscall(_DWORD *);");
	set_frame_size(0X805179F8, 0X8, 0, 0);
	add_func    (0X80517A1C,0X80517A3A);
	set_func_flags(0X80517A1C,0x1400);
	SetType(0X80517A1C, "int __fastcall ExitKernelWithUnhandledAbort(_DWORD *);");
	set_frame_size(0X80517A1C, 0X8, 0, 0);
	add_func    (0X80517A40,0X80517A60);
	set_func_flags(0X80517A40,0x1400);
	SetType(0X80517A40, "int __fastcall ExitKerneDataAbort(_DWORD *);");
	set_frame_size(0X80517A40, 0X8, 0, 0);
	add_func    (0X80517A64,0X80517A84);
	set_func_flags(0X80517A64,0x1400);
	SetType(0X80517A64, "int __fastcall ExitKernelPrefetchAbort(_DWORD *);");
	set_frame_size(0X80517A64, 0X8, 0, 0);
	add_func    (0X80517A88,0X80517AAA);
	set_func_flags(0X80517A88,0x1400);
	SetType(0X80517A88, "int __fastcall sub_80517A88(unsigned int, unsigned int, int);");
	set_frame_size(0X80517A88, 0X8, 0, 0);
	add_func    (0X80517AB0,0X80517AD2);
	set_func_flags(0X80517AB0,0x1400);
	SetType(0X80517AB0, "void __fastcall arm_mmu_unmap_section(addr_t vaddr);");
	set_frame_size(0X80517AB0, 0X8, 0, 0);
	add_func    (0X80517AD8,0X80517AFA);
	set_func_flags(0X80517AD8,0x1400);
	SetType(0X80517AD8, "void __fastcall arm_mmu_map_kpage(vaddr_t vaddr, paddr_t paddr, uint32_t flags);");
	set_frame_size(0X80517AD8, 0X8, 0, 0);
	add_func    (0X80517B00,0X80517B22);
	set_func_flags(0X80517B00,0x1400);
	SetType(0X80517B00, "void __fastcall arm_mmu_desc_unmap_page(unsigned int);");
	set_frame_size(0X80517B00, 0X8, 0, 0);
	add_func    (0X80517B28,0X80517B2C);
	set_func_flags(0X80517B28,0x1480);
	SetType(0X80517B28, "int sub_80517B28();");
	add_func    (0X80517B2C,0X80517B3C);
	set_func_flags(0X80517B2C,0x1400);
	SetType(0X80517B2C, "int sub_80517B2C();");
	set_frame_size(0X80517B2C, 0X8, 0, 0);
	add_func    (0X80517B3C,0X80517B90);
	set_func_flags(0X80517B3C,0x1400);
	SetType(0X80517B3C, "void __fastcall arm_mmu_map_mem(vaddr_t vaddr, paddr_t paddr, size_t size, uint32_t flags);");
	set_frame_size(0X80517B3C, 0X20, 0, 0);
	add_func    (0X80517B94,0X80517BD8);
	set_func_flags(0X80517B94,0x1400);
	SetType(0X80517B94, "void __fastcall arm_mmu_unmap_mem(unsigned int result, unsigned int a2);");
	set_frame_size(0X80517B94, 0X18, 0, 0);
	add_func    (0X80517BDC,0X80517BE0);
	set_func_flags(0X80517BDC,0x1480);
	SetType(0X80517BDC, "unsigned int __fastcall sub_80517BDC(int);");
	add_func    (0X80517BF4,0X80517C1E);
	set_func_flags(0X80517BF4,0x1400);
	SetType(0X80517BF4, "char *__fastcall arm_mmu_desc_alloc_pgtbl(int);");
	set_frame_size(0X80517BF4, 0X8, 0, 0);
	add_func    (0X80517C28,0X80517C30);
	set_func_flags(0X80517C28,0x1400);
	SetType(0X80517C28, "void sub_80517C28();");
	add_func    (0X80517C34,0X80517C3C);
	set_func_flags(0X80517C34,0x1400);
	SetType(0X80517C34, "void sub_80517C34();");
	add_func    (0X80517C40,0X80517C46);
	set_func_flags(0X80517C40,0x1400);
	SetType(0X80517C40, "int sub_80517C40();");
	add_func    (0X80517C4C,0X80517D48);
	set_func_flags(0X80517C4C,0x1400);
	SetType(0X80517C4C, "void __fastcall arm_mmu_desc_map_page(vaddr_t vaddr, paddr_t paddr, uint32_t flags);");
	set_frame_size(0X80517C4C, 0X20, 0, 0);
	add_func    (0X80517D64,0X80517DCA);
	set_func_flags(0X80517D64,0x1400);
	SetType(0X80517D64, "void __fastcall sub_80517D64(unsigned int a1);");
	set_frame_size(0X80517D64, 0X10, 0, 0);
	add_func    (0X80517DE4,0X80517F74);
	set_func_flags(0X80517DE4,0x1400);
	SetType(0X80517DE4, "int __fastcall sub_80517DE4(__int64);");
	set_frame_size(0X80517DE4, 0X40, 0, 0);
	add_func    (0X80517F88,0X80517FD6);
	set_func_flags(0X80517F88,0x1400);
	SetType(0X80517F88, "void __fastcall sub_80517F88(unsigned int, unsigned int, int);");
	set_frame_size(0X80517F88, 0X18, 0, 0);
	add_func    (0X80517FEC,0X80518032);
	set_func_flags(0X80517FEC,0x1400);
	SetType(0X80517FEC, "void __fastcall arm_mmu_desc_unmap_section(vaddr_t vaddr);");
	set_frame_size(0X80517FEC, 0X10, 0, 0);
	add_func    (0X80518048,0X805180A8);
	set_func_flags(0X80518048,0x1400);
	SetType(0X80518048, "unsigned int __fastcall sub_80518048(int);");
	set_frame_size(0X80518048, 0X8, 0, 0);
	add_func    (0X805180B4,0X805180D0);
	set_func_flags(0X805180B4,0x1401);
	SetType(0X805180B4, "void __noreturn sub_805180B4();");
	set_frame_size(0X805180B4, 0X8, 0, 0);
	add_func    (0X805180D8,0X805180FE);
	set_func_flags(0X805180D8,0x1400);
	SetType(0X805180D8, "int *__fastcall sub_805180D8(_DWORD *);");
	set_frame_size(0X805180D8, 0X10, 0, 0);
	add_func    (0X80518104,0X8051810C);
	set_func_flags(0X80518104,0x1400);
	SetType(0X80518104, "void __fastcall arch_context_switch(thread_t *oldthread, thread_t *newthread);");
	add_func    (0X8051810C,0X80518138);
	set_func_flags(0X8051810C,0x1400);
	SetType(0X8051810C, "int __fastcall sub_8051810C(int);");
	set_frame_size(0X8051810C, 0X8, 0, 0);
	add_func    (0X80518138,0X80518164);
	set_func_flags(0X80518138,0x1400);
	SetType(0X80518138, "int __fastcall sub_80518138(unsigned __int8 *);");
	add_func    (0X80518164,0X80518172);
	set_func_flags(0X80518164,0x1400);
	SetType(0X80518164, "void sub_80518164();");
	add_func    (0X80518172,0X80518180);
	set_func_flags(0X80518172,0x1400);
	SetType(0X80518172, "void sub_80518172();");
	add_func    (0X80518180,0X8051818E);
	set_func_flags(0X80518180,0x1400);
	SetType(0X80518180, "void sub_80518180();");
	add_func    (0X80518190,0X805181F8);
	set_func_flags(0X80518190,0x1400);
	SetType(0X80518190, "int arch_early_init();");
	set_frame_size(0X80518190, 0X8, 0, 0);
	add_func    (0X80518200,0X80518204);
	set_func_flags(0X80518200,0x1440);
	SetType(0X80518200, "void nullsub_6();");
	add_func    (0X8051821C,0X80518248);
	set_func_flags(0X8051821C,0x1400);
	SetType(0X8051821C, "int __fastcall arch_vfp_save(int result);");
	set_frame_size(0X8051821C, 0X8, 0, 0);
	add_func    (0X80518248,0X80518274);
	set_func_flags(0X80518248,0x1400);
	SetType(0X80518248, "int __fastcall arch_vfp_restore(int result);");
	set_frame_size(0X80518248, 0X8, 0, 0);
	add_func    (0X80518274,0X805182DC);
	set_func_flags(0X80518274,0x1400);
	SetType(0X80518274, "u64 __cdecl arch_cycle_count64();");
	add_func    (0X805182E0,0X8051834C);
	set_func_flags(0X805182E0,0x1400);
	SetType(0X805182E0, "int __fastcall lk_init_level_0(unsigned int);");
	set_frame_size(0X805182E0, 0X20, 0, 0);
	add_func    (0X80518358,0X805183C0);
	set_func_flags(0X80518358,0x1400);
	SetType(0X80518358, "int bootstrap2();");
	set_frame_size(0X80518358, 0X8, 0, 0);
	add_func    (0X805183E8,0X8051848A);
	set_func_flags(0X805183E8,0x1401);
	SetType(0X805183E8, "void __fastcall __noreturn lk_main();");
	set_frame_size(0X805183E8, 0X10, 0, 0);
	define_local_var(0X805183E8, 0X8051848A, "[bp-0X10]", "stack_size");
	add_func    (0X805184C8,0X805184D4);
	set_func_flags(0X805184C8,0x1400);
	SetType(0X805184C8, "int __fastcall sub_805184C8(int);");
	set_frame_size(0X805184C8, 0X8, 0, 0);
	add_func    (0X805184D4,0X8051853E);
	set_func_flags(0X805184D4,0x1400);
	SetType(0X805184D4, "int apps_init();");
	set_frame_size(0X805184D4, 0X20, 0, 0);
	define_local_var(0X805184D4, 0X8051853E, "[bp-0X20]", "stack_size");
	add_func    (0X80518554,0X80518560);
	set_func_flags(0X80518554,0x1400);
	SetType(0X80518554, "int __fastcall app_thread_entry(int);");
	set_frame_size(0X80518554, 0X8, 0, 0);
	add_func    (0X80518560,0X805185CE);
	set_func_flags(0X80518560,0x1400);
	SetType(0X80518560, "void __fastcall queue_adsp_app(const adsp_app_descriptor *app);");
	set_frame_size(0X80518560, 0XE0, 0, 0);
	define_local_var(0X80518560, 0X805185CE, "[bp-0XD4]", "message");
	add_func    (0X805185E4,0X80518638);
	set_func_flags(0X805185E4,0x1400);
	SetType(0X805185E4, "void __fastcall queue_adsp_app_status(adsp_app_descriptor *app, int a2, uint64_t host_ref, adsp_app_msg msg, int status);");
	set_frame_size(0X805185E4, 0XE8, 0, 0);
	define_local_var(0X805185E4, 0X80518638, "[bp-0XDC]", "message");
	define_local_var(0X805185E4, 0X80518638, "[bp+0]", "status");
	add_func    (0X8051864C,0X80518678);
	set_func_flags(0X8051864C,0x1400);
	SetType(0X8051864C, "void __fastcall notify_message_to_host(adsp_app_msg msg);");
	set_frame_size(0X8051864C, 0X10, 0, 0);
	add_func    (0X80518688,0X805186EA);
	set_func_flags(0X80518688,0x1400);
	SetType(0X80518688, "_DWORD *__fastcall delete_app_instance(_DWORD *result);");
	set_frame_size(0X80518688, 0X8, 0, 0);
	add_func    (0X805186EC,0X805187C8);
	set_func_flags(0X805186EC,0x1400);
	SetType(0X805186EC, "adsp_app_descriptor *__fastcall create_and_init_app(run_app_instance_data *data, uint32_t *stack_sz);");
	set_frame_size(0X805186EC, 0X18, 0, 0);
	add_func    (0X805187CC,0X8051880E);
	set_func_flags(0X805187CC,0x1400);
	SetType(0X805187CC, "int __fastcall start_adsp_app(adsp_app_descriptor *app, uint32_t stack_sz);");
	set_frame_size(0X805187CC, 0X18, 0, 0);
	define_local_var(0X805187CC, 0X8051880E, "[bp+0]", "stack_size");
	add_func    (0X80518814,0X805188D0);
	set_func_flags(0X80518814,0x1401);
	SetType(0X80518814, "void __cdecl __noreturn app_thread_receive(void *argv);");
	set_frame_size(0X80518814, 0X298, 0, 0);
	define_local_var(0X80518814, 0X805188D0, "[bp-0X298]", "status");
	define_local_var(0X80518814, 0X805188D0, "[bp-0X28C]", "recv_mbox_data");
	define_local_var(0X80518814, 0X805188D0, "[bp-0X288]", "stack_sz");
	define_local_var(0X80518814, 0X805188D0, "[bp-0X284]", "message");
	add_func    (0X805188F0,0X80518922);
	set_func_flags(0X805188F0,0x1400);
	SetType(0X805188F0, "int __fastcall sub_805188F0(int);");
	set_frame_size(0X805188F0, 0X20, 0, 0);
	add_func    (0X80518924,0X8051898C);
	set_func_flags(0X80518924,0x1400);
	SetType(0X80518924, "int __fastcall adsp_static_apps_init();");
	set_frame_size(0X80518924, 0X18, 0, 0);
	add_func    (0X805189A0,0X80518A44);
	set_func_flags(0X805189A0,0x1400);
	SetType(0X805189A0, "void adsp_app_module_init();");
	set_frame_size(0X805189A0, 0X28, 0, 0);
	define_local_var(0X805189A0, 0X80518A44, "[bp-0X28]", "err_handler");
	define_local_var(0X805189A0, 0X80518A44, "[bp-0X24]", "msg_handler");
	define_local_var(0X805189A0, 0X80518A44, "[bp-0X20]", "context");
	add_func    (0X80518A68,0X80518A6C);
	set_func_flags(0X80518A68,0x1480);
	SetType(0X80518A68, "void __fastcall shell_entry(const app_descriptor *app, void *args);");
	add_func    (0X80518A6C,0X80518A70);
	set_func_flags(0X80518A6C,0x1480);
	SetType(0X80518A6C, "void __fastcall shell_init(const app_descriptor *app);");
	add_func    (0X80518A70,0X80518A78);
	set_func_flags(0X80518A70,0x1400);
	SetType(0X80518A70, "int __fastcall arm_get_vfp_fpexc();");
	add_func    (0X80518A78,0X80518A80);
	set_func_flags(0X80518A78,0x1400);
	SetType(0X80518A78, "int __fastcall arm_set_vfp_fpexc(int result);");
	add_func    (0X80518A80,0X80518A88);
	set_func_flags(0X80518A80,0x1400);
	SetType(0X80518A80, "int __fastcall arm_get_vfp_fpscr();");
	add_func    (0X80518A88,0X80518A90);
	set_func_flags(0X80518A88,0x1400);
	SetType(0X80518A88, "int __fastcall arm_set_vfp_fpscr(int result);");
	add_func    (0X80518A90,0X80518AA8);
	set_func_flags(0X80518A90,0x1400);
	SetType(0X80518A90, "_QWORD *__fastcall arm_save_vfp_dregs(_QWORD *);");
	add_func    (0X80518AA8,0X80518AC0);
	set_func_flags(0X80518AA8,0x1400);
	SetType(0X80518AA8, "int __fastcall arm_restore_vfp_dregs(int);");
	add_func    (0X80518B14,0X80518BD2);
	set_func_flags(0X80518B14,0x1400);
	SetType(0X80518B14, "handler_return __fastcall threadload(timer *t, lk_time_t now, void *arg);");
	set_frame_size(0X80518B14, 0X30, 0, 0);
	add_func    (0X80518BF0,0X80518C66);
	set_func_flags(0X80518BF0,0x1400);
	SetType(0X80518BF0, "int __fastcall cmd_threadstats(int argc, const cmd_args *argv);");
	set_frame_size(0X80518BF0, 0X10, 0, 0);
	add_func    (0X80518C94,0X80518CA4);
	set_func_flags(0X80518C94,0x1400);
	SetType(0X80518C94, "int __fastcall cmd_threads(int argc, const cmd_args *argv);");
	set_frame_size(0X80518C94, 0X8, 0, 0);
	add_func    (0X80518CA8,0X80518CD0);
	set_func_flags(0X80518CA8,0x1400);
	SetType(0X80518CA8, "int __fastcall event_init(int result, char, int);");
	set_frame_size(0X80518CA8, 0XC, 0, 0);
	add_func    (0X80518CD8,0X80518D32);
	set_func_flags(0X80518CD8,0x1400);
	SetType(0X80518CD8, "int __fastcall sub_80518CD8(_DWORD);");
	set_frame_size(0X80518CD8, 0X18, 0, 0);
	add_func    (0X80518D48,0X80518DA2);
	set_func_flags(0X80518D48,0x1400);
	SetType(0X80518D48, "status_t __fastcall event_wait_timeout(event_t *e, lk_time_t timeout);");
	set_frame_size(0X80518D48, 0X10, 0, 0);
	add_func    (0X80518DB8,0X80518DBC);
	set_func_flags(0X80518DB8,0x1400);
	SetType(0X80518DB8, "bool __fastcall event_is_signaled(event_t *e);");
	add_func    (0X80518DBC,0X80518E12);
	set_func_flags(0X80518DBC,0x1400);
	SetType(0X80518DBC, "status_t __fastcall event_trywait(event_t *e);");
	set_frame_size(0X80518DBC, 0X10, 0, 0);
	add_func    (0X80518E28,0X80518EA4);
	set_func_flags(0X80518E28,0x1400);
	SetType(0X80518E28, "status_t __fastcall event_signal(event_t *e, bool reschedule);");
	set_frame_size(0X80518E28, 0X20, 0, 0);
	add_func    (0X80518EB8,0X80518EE2);
	set_func_flags(0X80518EB8,0x1400);
	SetType(0X80518EB8, "status_t __fastcall event_unsignal(event_t *e);");
	set_frame_size(0X80518EB8, 0X10, 0, 0);
	add_func    (0X80518EF4,0X80518EFA);
	set_func_flags(0X80518EF4,0x1400);
	SetType(0X80518EF4, "int __fastcall event_add_child(event_t *e, list_node *child_queue_node);");
	add_func    (0X80518EFA,0X80518F00);
	set_func_flags(0X80518EFA,0x1400);
	SetType(0X80518EFA, "int __fastcall event_del_child(event_t *e, list_node *child_queue_node);");
	add_func    (0X80518F00,0X80518F1A);
	set_func_flags(0X80518F00,0x1400);
	SetType(0X80518F00, "int kernel_init();");
	set_frame_size(0X80518F00, 0X8, 0, 0);
	add_func    (0X80518F24,0X80518F3E);
	set_func_flags(0X80518F24,0x1400);
	SetType(0X80518F24, "void __fastcall mutex_init(mutex_t *m);");
	add_func    (0X80518FDC,0X80519064);
	set_func_flags(0X80518FDC,0x1400);
	SetType(0X80518FDC, "status_t __fastcall mutex_acquire_timeout(mutex_t *m, lk_time_t timeout);");
	set_frame_size(0X80518FDC, 0X20, 0, 0);
	add_func    (0X80519080,0X80519104);
	set_func_flags(0X80519080,0x1400);
	SetType(0X80519080, "status_t __fastcall _mutex_release(mutex_t *m, bool reschedule);");
	set_frame_size(0X80519080, 0X20, 0, 0);
	add_func    (0X80519138,0X8051917E);
	set_func_flags(0X80519138,0x1400);
	SetType(0X80519138, "void __fastcall insert_timer_in_queue(timer_t *timer);");
	set_frame_size(0X80519138, 0X14, 0, 0);
	add_func    (0X80519184,0X805192FA);
	set_func_flags(0X80519184,0x1400);
	SetType(0X80519184, "int __fastcall timer_tick(int, __int64);");
	set_frame_size(0X80519184, 0X40, 0, 0);
	add_func    (0X8051932C,0X805193D6);
	set_func_flags(0X8051932C,0x1400);
	SetType(0X8051932C, "void __fastcall timer_set(timer_t *timer, s32 delay, s32 period, void *callback, void *arg);");
	set_frame_size(0X8051932C, 0X30, 0, 0);
	define_local_var(0X8051932C, 0X805193D6, "[bp+0]", "arg");
	add_func    (0X805193F8,0X8051940A);
	set_func_flags(0X805193F8,0x1400);
	SetType(0X805193F8, "void __fastcall timer_initialize(timer_t *timer);");
	set_frame_size(0X805193F8, 0X8, 0, 0);
	add_func    (0X80519454,0X8051946C);
	set_func_flags(0X80519454,0x1400);
	SetType(0X80519454, "void __fastcall timer_set_oneshot(timer_t *timer, unsigned int delay, int callback, void *arg);");
	set_frame_size(0X80519454, 0X10, 0, 0);
	define_local_var(0X80519454, 0X8051946C, "[bp-0X10]", "arg");
	add_func    (0X8051946C,0X80519484);
	set_func_flags(0X8051946C,0x1400);
	SetType(0X8051946C, "void __fastcall timer_set_periodic(timer_t *timer, lk_time_t period, timer_callback callback, void *arg);");
	set_frame_size(0X8051946C, 0X10, 0, 0);
	define_local_var(0X8051946C, 0X80519484, "[bp-0X10]", "arg");
	add_func    (0X80519484,0X8051952E);
	set_func_flags(0X80519484,0x1400);
	SetType(0X80519484, "void __fastcall timer_cancel(timer_t *timer);");
	set_frame_size(0X80519484, 0X20, 0, 0);
	add_func    (0X8051954C,0X80519554);
	set_func_flags(0X8051954C,0x1400);
	SetType(0X8051954C, "void sub_8051954C();");
	add_func    (0X80519558,0X8051957E);
	set_func_flags(0X80519558,0x1400);
	SetType(0X80519558, "void __fastcall sem_init(semaphore_t *sem, unsigned int value);");
	set_frame_size(0X80519558, 0X8, 0, 0);
	add_func    (0X80519588,0X805195BE);
	set_func_flags(0X80519588,0x1400);
	SetType(0X80519588, "void __fastcall sem_destroy(semaphore_t *sem);");
	set_frame_size(0X80519588, 0X8, 0, 0);
	add_func    (0X805195C4,0X8051960A);
	set_func_flags(0X805195C4,0x1400);
	SetType(0X805195C4, "int __fastcall _sem_post(semaphore_t *dem, bool reschedule);");
	set_frame_size(0X805195C4, 0X8, 0, 0);
	add_func    (0X80519610,0X80519644);
	set_func_flags(0X80519610,0x1400);
	SetType(0X80519610, "status_t __fastcall sub_80519610(int);");
	set_frame_size(0X80519610, 0X8, 0, 0);
	add_func    (0X80519648,0X80519674);
	set_func_flags(0X80519648,0x1400);
	SetType(0X80519648, "semaphore_t *__fastcall sem_trywait(semaphore_t *sem);");
	add_func    (0X80519678,0X805196B8);
	set_func_flags(0X80519678,0x1400);
	SetType(0X80519678, "status_t __fastcall sem_timedwait(semaphore_t *semaphore, unsigned int timeout);");
	set_frame_size(0X80519678, 0X10, 0, 0);
	add_func    (0X805196BC,0X805196C8);
	set_func_flags(0X805196BC,0x1400);
	SetType(0X805196BC, "bool __fastcall semaphore_is_signaled(semaphore_t *s);");
	add_func    (0X805196C8,0X805196CE);
	set_func_flags(0X805196C8,0x1400);
	SetType(0X805196C8, "int __fastcall sem_add_child(semaphore_t *s, list_node *child_queue_node);");
	add_func    (0X805196CE,0X805196D4);
	set_func_flags(0X805196CE,0x1400);
	SetType(0X805196CE, "int __fastcall sem_del_child(semaphore_t *s, list_node *child_queue_node);");
	add_func    (0X805196D4,0X805196E6);
	set_func_flags(0X805196D4,0x1400);
	SetType(0X805196D4, "void __fastcall list_delete(list_node *item);");
	add_func    (0X80519714,0X8051977E);
	set_func_flags(0X80519714,0x1400);
	SetType(0X80519714, "int __fastcall sub_80519714(int);");
	set_frame_size(0X80519714, 0X18, 0, 0);
	add_func    (0X80519790,0X80519834);
	set_func_flags(0X80519790,0x1400);
	SetType(0X80519790, "__int64 __fastcall insert_in_run_queue_tail(_DWORD *);");
	set_frame_size(0X80519790, 0X18, 0, 0);
	add_func    (0X8051985C,0X805198FA);
	set_func_flags(0X8051985C,0x1400);
	SetType(0X8051985C, "__int64 __fastcall insert_in_run_queue_head(_DWORD *);");
	set_frame_size(0X8051985C, 0X10, 0, 0);
	add_func    (0X80519924,0X80519998);
	set_func_flags(0X80519924,0x1400);
	SetType(0X80519924, "_DWORD *__fastcall ready_q_or_tree_insertion(_DWORD *result, int, int);");
	set_frame_size(0X80519924, 0X20, 0, 0);
	define_local_var(0X80519924, 0X80519998, "[bp-0X20]", "now_c");
	add_func    (0X8051999C,0X805199EC);
	set_func_flags(0X8051999C,0x1400);
	SetType(0X8051999C, "handler_return __fastcall thread_sleep_handler(timer_t *timer, lk_time_t now, void *arg);");
	set_frame_size(0X8051999C, 0X10, 0, 0);
	add_func    (0X80519A00,0X80519B20);
	set_func_flags(0X80519A00,0x1400);
	SetType(0X80519A00, "unsigned int __fastcall thread_create_etc(unsigned int, int, int, int, int, int, __int64, __int64, unsigned int, int, int, int);");
	set_frame_size(0X80519A00, 0X20, 0, 0);
	add_func    (0X80519B34,0X80519B70);
	set_func_flags(0X80519B34,0x1400);
	SetType(0X80519B34, "int __fastcall sub_80519B34(int, int, int, int, int, int, __int64, __int64, unsigned int, int, int);");
	set_frame_size(0X80519B34, 0X40, 0, 0);
	add_func    (0X80519B70,0X80519BA6);
	set_func_flags(0X80519B70,0x1400);
	SetType(0X80519B70, "thread_t *__fastcall thread_create(char *name, int func, void *arg, int prio, int stack_size);");
	set_frame_size(0X80519B70, 0X40, 0, 0);
	define_local_var(0X80519B70, 0X80519BA6, "[bp+0]", "stack_size");
	add_func    (0X80519BAC,0X80519EAC);
	set_func_flags(0X80519BAC,0x1400);
	SetType(0X80519BAC, "void __fastcall thread_resched();");
	set_frame_size(0X80519BAC, 0X50, 0, 0);
	add_func    (0X80519EBC,0X80519F88);
	set_func_flags(0X80519EBC,0x1400);
	SetType(0X80519EBC, "void thread_yield();");
	set_frame_size(0X80519EBC, 0X20, 0, 0);
	define_local_var(0X80519EBC, 0X80519F88, "[bp-0X20]", "now_c");
	add_func    (0X80519FAC,0X8051A040);
	set_func_flags(0X80519FAC,0x1400);
	SetType(0X80519FAC, "int __fastcall thread_resume(thread_t *);");
	set_frame_size(0X80519FAC, 0X18, 0, 0);
	add_func    (0X8051A05C,0X8051A154);
	set_func_flags(0X8051A05C,0x1400);
	SetType(0X8051A05C, "void thread_preempt();");
	set_frame_size(0X8051A05C, 0X20, 0, 0);
	define_local_var(0X8051A05C, 0X8051A154, "[bp-0X20]", "now_c");
	add_func    (0X8051A17C,0X8051A232);
	set_func_flags(0X8051A17C,0x1400);
	SetType(0X8051A17C, "int __fastcall thread_set_sched_policy(int);");
	set_frame_size(0X8051A17C, 0X18, 0, 0);
	add_func    (0X8051A24C,0X8051A2DA);
	set_func_flags(0X8051A24C,0x1400);
	SetType(0X8051A24C, "int __fastcall thread_block();");
	set_frame_size(0X8051A24C, 0X18, 0, 0);
	add_func    (0X8051A2FC,0X8051A388);
	set_func_flags(0X8051A2FC,0x1400);
	SetType(0X8051A2FC, "void __fastcall thread_sleep(lk_time_t delay);");
	set_frame_size(0X8051A2FC, 0X48, 0, 0);
	define_local_var(0X8051A2FC, 0X8051A388, "[bp-0X40]", "timer");
	add_func    (0X8051A3AC,0X8051A3B8);
	set_func_flags(0X8051A3AC,0x1400);
	SetType(0X8051A3AC, "int __fastcall tls_get(int);");
	add_func    (0X8051A3BC,0X8051A3CA);
	set_func_flags(0X8051A3BC,0x1400);
	SetType(0X8051A3BC, "int __fastcall tls_set(int, int);");
	add_func    (0X8051A3D0,0X8051A448);
	set_func_flags(0X8051A3D0,0x1400);
	SetType(0X8051A3D0, "void thread_init_early();");
	set_frame_size(0X8051A3D0, 0X10, 0, 0);
	add_func    (0X8051A46C,0X8051A472);
	set_func_flags(0X8051A46C,0x1400);
	SetType(0X8051A46C, "void thread_init();");
	add_func    (0X8051A478,0X8051A486);
	set_func_flags(0X8051A478,0x1400);
	SetType(0X8051A478, "void __fastcall thread_set_name(const unsigned __int8 *name);");
	add_func    (0X8051A48C,0X8051A4A2);
	set_func_flags(0X8051A48C,0x1400);
	SetType(0X8051A48C, "int __fastcall thread_set_priority(int result);");
	add_func    (0X8051A4A8,0X8051A4B0);
	set_func_flags(0X8051A4A8,0x1400);
	SetType(0X8051A4A8, "int thread_get_priority();");
	add_func    (0X8051A4B4,0X8051A4E0);
	set_func_flags(0X8051A4B4,0x1401);
	SetType(0X8051A4B4, "void __noreturn thread_become_idle();");
	set_frame_size(0X8051A4B4, 0X8, 0, 0);
	add_func    (0X8051A4F0,0X8051A572);
	set_func_flags(0X8051A4F0,0x1400);
	SetType(0X8051A4F0, "void __fastcall dump_thread(thread_t *t);");
	set_frame_size(0X8051A4F0, 0X28, 0, 0);
	add_func    (0X8051A59C,0X8051A5D2);
	set_func_flags(0X8051A59C,0x1400);
	SetType(0X8051A59C, "void dump_all_threads();");
	set_frame_size(0X8051A59C, 0X10, 0, 0);
	add_func    (0X8051A5E4,0X8051A62C);
	set_func_flags(0X8051A5E4,0x1400);
	SetType(0X8051A5E4, "int dump_run_threads();");
	set_frame_size(0X8051A5E4, 0X18, 0, 0);
	add_func    (0X8051A638,0X8051A684);
	set_func_flags(0X8051A638,0x1400);
	SetType(0X8051A638, "__int64 thread_get_cycle_count();");
	set_frame_size(0X8051A638, 0X18, 0, 0);
	add_func    (0X8051A690,0X8051A6A0);
	set_func_flags(0X8051A690,0x1400);
	SetType(0X8051A690, "void __fastcall wait_queue_init(wait_queue_t *wait);");
	add_func    (0X8051A6A4,0X8051A76C);
	set_func_flags(0X8051A6A4,0x1400);
	SetType(0X8051A6A4, "status_t __fastcall wait_queue_block(wait_queue_t *, unsigned int timeout);");
	set_frame_size(0X8051A6A4, 0X48, 0, 0);
	add_func    (0X8051A790,0X8051A8AE);
	set_func_flags(0X8051A790,0x1400);
	SetType(0X8051A790, "status_t __fastcall thread_join(thread_t *t, int *retcode, lk_time_t timeout);");
	set_frame_size(0X8051A790, 0X20, 0, 0);
	add_func    (0X8051A8D0,0X8051A9A4);
	set_func_flags(0X8051A8D0,0x1400);
	SetType(0X8051A8D0, "int __fastcall wait_queue_wake_one(wait_queue_t *wait, bool reschedule, status_t wait_queue_error);");
	set_frame_size(0X8051A8D0, 0X28, 0, 0);
	add_func    (0X8051A9C8,0X8051AAAE);
	set_func_flags(0X8051A9C8,0x1400);
	SetType(0X8051A9C8, "int __fastcall wait_queue_wake_all(wait_queue_t *wait, bool reschedule, status_t wait_queue_error);");
	set_frame_size(0X8051A9C8, 0X38, 0, 0);
	add_func    (0X8051AAD4,0X8051AB52);
	set_func_flags(0X8051AAD4,0x1400);
	SetType(0X8051AAD4, "int __fastcall thread_detach(thread_t *a1);");
	set_frame_size(0X8051AAD4, 0X18, 0, 0);
	add_func    (0X8051AB68,0X8051AB80);
	set_func_flags(0X8051AB68,0x1400);
	SetType(0X8051AB68, "int __fastcall thread_detach_and_resume(thread_t *);");
	set_frame_size(0X8051AB68, 0X8, 0, 0);
	add_func    (0X8051AB80,0X8051AC5C);
	set_func_flags(0X8051AB80,0x1401);
	SetType(0X8051AB80, "void __fastcall thread_exit(int retcode);");
	set_frame_size(0X8051AB80, 0X10, 0, 0);
	add_func    (0X8051AC8C,0X8051ACDC);
	set_func_flags(0X8051AC8C,0x1400);
	SetType(0X8051AC8C, "void __fastcall wait_queue_destroy(wait_queue_t *wait, bool reschedule);");
	set_frame_size(0X8051AC8C, 0X18, 0, 0);
	add_func    (0X8051ACF4,0X8051ADBA);
	set_func_flags(0X8051ACF4,0x1400);
	SetType(0X8051ACF4, "status_t __fastcall thread_unblock_from_wait_queue(thread_t *t, status_t wait_queue_error);");
	set_frame_size(0X8051ACF4, 0X18, 0, 0);
	add_func    (0X8051ADE4,0X8051AE18);
	set_func_flags(0X8051ADE4,0x1400);
	SetType(0X8051ADE4, "handler_return __fastcall wait_queue_timeout_handler(timer_t *timer, lk_time_t now, void *arg);");
	set_frame_size(0X8051ADE4, 0X10, 0, 0);
	add_func    (0X8051AE28,0X8051AE2E);
	set_func_flags(0X8051AE28,0x1400);
	SetType(0X8051AE28, "thread_t *get_current_thread_handle();");
	add_func    (0X8051AE34,0X8051AE3A);
	set_func_flags(0X8051AE34,0x1400);
	SetType(0X8051AE34, "thread_t *get_current_thread();");
	add_func    (0X8051AE40,0X8051AE48);
	set_func_flags(0X8051AE40,0x1400);
	SetType(0X8051AE40, "__int64 get_preempt_time();");
	add_func    (0X8051AE4C,0X8051AE54);
	set_func_flags(0X8051AE4C,0x1400);
	SetType(0X8051AE4C, "__int64 get_wake_one_time();");
	add_func    (0X8051AE58,0X8051AE5E);
	set_func_flags(0X8051AE58,0x1400);
	SetType(0X8051AE58, "int get_preempts();");
	add_func    (0X8051AE64,0X8051AE6A);
	set_func_flags(0X8051AE64,0x1400);
	SetType(0X8051AE64, "int get_wake_ones();");
	add_func    (0X8051AE70,0X8051AE78);
	set_func_flags(0X8051AE70,0x1400);
	SetType(0X8051AE70, "__int64 get_block_time();");
	add_func    (0X8051AE7C,0X8051AE82);
	set_func_flags(0X8051AE7C,0x1400);
	SetType(0X8051AE7C, "int get_blocks();");
	add_func    (0X8051AE88,0X8051AE8E);
	set_func_flags(0X8051AE88,0x1400);
	SetType(0X8051AE88, "int get_timer_ints();");
	add_func    (0X8051AE94,0X8051AE9C);
	set_func_flags(0X8051AE94,0x1400);
	SetType(0X8051AE94, "__int64 get_timers_time();");
	add_func    (0X8051AEA0,0X8051AEA6);
	set_func_flags(0X8051AEA0,0x1400);
	SetType(0X8051AEA0, "int get_timer_sets();");
	add_func    (0X8051AEAC,0X8051AEB4);
	set_func_flags(0X8051AEAC,0x1400);
	SetType(0X8051AEAC, "__int64 get_timer_set_time();");
	add_func    (0X8051AEB8,0X8051AEE0);
	set_func_flags(0X8051AEB8,0x1400);
	SetType(0X8051AEB8, "int clear_thread_stats();");
	add_func    (0X8051AEE4,0X8051AF12);
	set_func_flags(0X8051AEE4,0x1400);
	SetType(0X8051AEE4, "uint64_t __fastcall ert_tot_budget(thread_t *head);");
	set_frame_size(0X8051AEE4, 0X10, 0, 0);
	add_func    (0X8051AF12,0X8051AF22);
	set_func_flags(0X8051AF12,0x1400);
	SetType(0X8051AF12, "thread_t *__fastcall longest_dl_thread(thread_t **head);");
	add_func    (0X8051AF22,0X8051AF4E);
	set_func_flags(0X8051AF22,0x1400);
	SetType(0X8051AF22, "void __fastcall insert_in_tree(thread_t **head, thread_t *t);");
	set_frame_size(0X8051AF22, 0X10, 0, 0);
	add_func    (0X8051AF4E,0X8051AF64);
	set_func_flags(0X8051AF4E,0x1400);
	SetType(0X8051AF4E, "int __fastcall sub_8051AF4E(int result, _DWORD *);");
	add_func    (0X8051AF64,0X8051B034);
	set_func_flags(0X8051AF64,0x1400);
	SetType(0X8051AF64, "thread_t *__fastcall remove_edf_thread_from_ert(thread_t **root);");
	set_frame_size(0X8051AF64, 0X28, 0, 0);
	add_func    (0X8051B07C,0X8051B0C2);
	set_func_flags(0X8051B07C,0x1400);
	SetType(0X8051B07C, "int __fastcall update_ert(int result, int, unsigned __int64);");
	set_frame_size(0X8051B07C, 0X18, 0, 0);
	add_func    (0X8051B0C4,0X8051B140);
	set_func_flags(0X8051B0C4,0x1400);
	SetType(0X8051B0C4, "int __fastcall get_extra_budget(unsigned __int64);");
	set_frame_size(0X8051B0C4, 0X18, 0, 0);
	add_func    (0X8051B148,0X8051B1A6);
	set_func_flags(0X8051B148,0x1400);
	SetType(0X8051B148, "__int64 __fastcall insert_in_ert(int, int, __int64);");
	set_frame_size(0X8051B148, 0X10, 0, 0);
	add_func    (0X8051B1AC,0X8051B1E6);
	set_func_flags(0X8051B1AC,0x1400);
	SetType(0X8051B1AC, "thread_t *__fastcall remove_edf_thread(thread_t **tree);");
	set_frame_size(0X8051B1AC, 0X10, 0, 0);
	add_func    (0X8051B214,0X8051B2B6);
	set_func_flags(0X8051B214,0x1400);
	SetType(0X8051B214, "int __fastcall update_dl_param(thread_t *t, int a2, lk_bigtime_t now, uint64_t now_c);");
	set_frame_size(0X8051B214, 0X18, 0, 0);
	define_local_var(0X8051B214, 0X8051B2B6, "[bp+0]", "now_c");
	add_func    (0X8051B2C0,0X8051B324);
	set_func_flags(0X8051B2C0,0x1400);
	SetType(0X8051B2C0, "int __fastcall thread_set_dl(unsigned __int64);");
	set_frame_size(0X8051B2C0, 0X20, 0, 0);
	add_func    (0X8051B328,0X8051B3A0);
	set_func_flags(0X8051B328,0x1400);
	SetType(0X8051B328, "int __fastcall admission_test(__int64);");
	set_frame_size(0X8051B328, 0X28, 0, 0);
	add_func    (0X8051B3B0,0X8051B3C0);
	set_func_flags(0X8051B3B0,0x1400);
	SetType(0X8051B3B0, "void __fastcall child_queue_init(child_queue_t *child);");
	add_func    (0X8051B3C4,0X8051B3DE);
	set_func_flags(0X8051B3C4,0x1400);
	SetType(0X8051B3C4, "int __fastcall child_queue_add_tail(child_queue_t *child, list_node *child_queue_node);");
	add_func    (0X8051B3DE,0X8051B3F8);
	set_func_flags(0X8051B3DE,0x1400);
	SetType(0X8051B3DE, "int __fastcall child_queue_remove(child_queue_t *child, list_node *child_queue_node);");
	add_func    (0X8051B3F8,0X8051B492);
	set_func_flags(0X8051B3F8,0x1400);
	SetType(0X8051B3F8, "int __fastcall child_queue_signal(child_queue_t *child, void *parent, bool reschedule, bool all);");
	set_frame_size(0X8051B3F8, 0X28, 0, 0);
	define_local_var(0X8051B3F8, 0X8051B492, "[bp-0X24]", "signaled_object");
	add_func    (0X8051B492,0X8051B4A6);
	set_func_flags(0X8051B492,0x1400);
	SetType(0X8051B492, "void __fastcall child_queue_destroy(child_queue_t *child);");
	set_frame_size(0X8051B492, 0X8, 0, 0);
	add_func    (0X8051B4A6,0X8051B4CC);
	set_func_flags(0X8051B4A6,0x1400);
	SetType(0X8051B4A6, "void __fastcall comp_event_usignal(comp_event_t *c);");
	set_frame_size(0X8051B4A6, 0X10, 0, 0);
	add_func    (0X8051B4CC,0X8051B5A6);
	set_func_flags(0X8051B4CC,0x1400);
	SetType(0X8051B4CC, "status_t __fastcall comp_event_init(comp_event_t *c, comp_event_elem_t *parents, sync_object_t *objects, int count, bool wait_and);");
	set_frame_size(0X8051B4CC, 0X28, 0, 0);
	define_local_var(0X8051B4CC, 0X8051B5A6, "[bp+0]", "wait_and");
	add_func    (0X8051B5B4,0X8051B64A);
	set_func_flags(0X8051B5B4,0x1400);
	SetType(0X8051B5B4, "void __fastcall comp_event_destroy(comp_event_t *c);");
	set_frame_size(0X8051B5B4, 0X20, 0, 0);
	add_func    (0X8051B650,0X8051B664);
	set_func_flags(0X8051B650,0x1400);
	SetType(0X8051B650, "status_t __fastcall comp_event_del_parent_event(comp_event_elem_t *c, event_t *e);");
	set_frame_size(0X8051B650, 0X8, 0, 0);
	add_func    (0X8051B664,0X8051B6B8);
	set_func_flags(0X8051B664,0x1400);
	SetType(0X8051B664, "bool __fastcall comp_event_find_signaled_object(comp_event_t *c, int *signaled_object);");
	set_frame_size(0X8051B664, 0X18, 0, 0);
	add_func    (0X8051B6B8,0X8051B736);
	set_func_flags(0X8051B6B8,0x1400);
	SetType(0X8051B6B8, "int __fastcall comp_event_grab_signaled_object(comp_event_t *c, int *signaled_object);");
	set_frame_size(0X8051B6B8, 0X20, 0, 0);
	add_func    (0X8051B738,0X8051B7B8);
	set_func_flags(0X8051B738,0x1400);
	SetType(0X8051B738, "status_t __fastcall comp_event_wait_timeout(comp_event_t *c, int *signaled_object, lk_time_t timeout);");
	set_frame_size(0X8051B738, 0X20, 0, 0);
	add_func    (0X8051B7BC,0X8051B7FC);
	set_func_flags(0X8051B7BC,0x1400);
	SetType(0X8051B7BC, "status_t __fastcall wait_on_multiple(sync_object_t *objects, uint count, int *signaled_object, lk_time_t timeout, bool wait_and);");
	set_frame_size(0X8051B7BC, 0X120, 0, 0);
	define_local_var(0X8051B7BC, 0X8051B7FC, "[bp-0X120]", "wait_and");
	define_local_var(0X8051B7BC, 0X8051B7FC, "[bp-0X114]", "c");
	define_local_var(0X8051B7BC, 0X8051B7FC, "[bp-0XD8]", "parents");
	add_func    (0X8051B7FC,0X8051B862);
	set_func_flags(0X8051B7FC,0x1400);
	SetType(0X8051B7FC, "void __fastcall cbuf_initialize_etc(cbuf_t *cbuf, size_t len, void *buf);");
	set_frame_size(0X8051B7FC, 0X18, 0, 0);
	add_func    (0X8051B878,0X8051B892);
	set_func_flags(0X8051B878,0x1400);
	SetType(0X8051B878, "void __fastcall cbuf_initialize(cbuf_t *, _DWORD *);");
	set_frame_size(0X8051B878, 0X10, 0, 0);
	add_func    (0X8051B892,0X8051B8A8);
	set_func_flags(0X8051B892,0x1400);
	SetType(0X8051B892, "size_t __fastcall cbuf_space_avail(cbuf_t *cbuf);");
	add_func    (0X8051BAA8,0X8051BB16);
	set_func_flags(0X8051BAA8,0x1400);
	SetType(0X8051BAA8, "size_t __fastcall sub_8051BAA8(cbuf_t *, unsigned __int8, bool);");
	set_frame_size(0X8051BAA8, 0X20, 0, 0);
	add_func    (0X8051BB28,0X8051BBBA);
	set_func_flags(0X8051BB28,0x1400);
	SetType(0X8051BB28, "size_t __fastcall cbuf_read_char(cbuf_t *cbuf, unsigned __int8 *c, bool block);");
	set_frame_size(0X8051BB28, 0X18, 0, 0);
	add_func    (0X8051BBD6,0X8051BBD8);
	set_func_flags(0X8051BBD6,0x1440);
	SetType(0X8051BBD6, "int __fastcall nullsub_3(_DWORD);");
	add_func    (0X8051BBD8,0X8051BBDA);
	set_func_flags(0X8051BBD8,0x1440);
	SetType(0X8051BBD8, "int __fastcall nullsub_7(_DWORD);");
	add_func    (0X8051BC24,0X8051BC32);
	set_func_flags(0X8051BC24,0x1400);
	SetType(0X8051BC24, "int __fastcall cmd_echo(int argc, const cmd_args *argv);");
	add_func    (0X8051BC38,0X8051BC6E);
	set_func_flags(0X8051BC38,0x1400);
	SetType(0X8051BC38, "int __fastcall cmd_history(int argc, const cmd_args *argv);");
	set_frame_size(0X8051BC38, 0X10, 0, 0);
	add_func    (0X8051BC80,0X8051BCC0);
	set_func_flags(0X8051BC80,0x1400);
	SetType(0X8051BC80, "int __fastcall cmd_test(int argc, const cmd_args *argv);");
	set_frame_size(0X8051BC80, 0X18, 0, 0);
	add_func    (0X8051BCC8,0X8051BD00);
	set_func_flags(0X8051BCC8,0x1400);
	SetType(0X8051BCC8, "int __fastcall cmd_help(int argc, const cmd_args *argv);");
	set_frame_size(0X8051BCC8, 0X18, 0, 0);
	add_func    (0X8051BF10,0X8051BF46);
	set_func_flags(0X8051BF10,0x1400);
	SetType(0X8051BF10, "const cmd *__fastcall match_command(const unsigned __int8 *command);");
	set_frame_size(0X8051BF10, 0X20, 0, 0);
	add_func    (0X8051BF4C,0X8051C292);
	set_func_flags(0X8051BF4C,0x1400);
	SetType(0X8051BF4C, "status_t __fastcall command_loop(int (__fastcall *get_line)(const unsigned __int8 **, void *), void *get_line_cookie, bool showprompt, bool locked);");
	set_frame_size(0X8051BF4C, 0X50, 0, 0);
	add_func    (0X8051C2F0,0X8051C328);
	set_func_flags(0X8051C2F0,0x1400);
	SetType(0X8051C2F0, "_DWORD *console_start();");
	set_frame_size(0X8051C2F0, 0X8, 0, 0);
	add_func    (0X8051C350,0X8051C390);
	set_func_flags(0X8051C350,0x1400);
	SetType(0X8051C350, "void __fastcall console_register_commands(cmd_block *block);");
	set_frame_size(0X8051C350, 0X10, 0, 0);
	add_func    (0X8051C3A4,0X8051C3DE);
	set_func_flags(0X8051C3A4,0x1400);
	SetType(0X8051C3A4, "int console_init();");
	set_frame_size(0X8051C3A4, 0X10, 0, 0);
	add_func    (0X8051C3F4,0X8051C40E);
	set_func_flags(0X8051C3F4,0x1400);
	SetType(0X8051C3F4, "int __fastcall _debug_stdio_fgetc(void *ctx);");
	set_frame_size(0X8051C3F4, 0X10, 0, 0);
	define_local_var(0X8051C3F4, 0X8051C40E, "[bp-0X9]", "c");
	add_func    (0X8051C40E,0X8051C41A);
	set_func_flags(0X8051C40E,0x1400);
	SetType(0X8051C40E, "int __fastcall _debug_stdio_fputc(void *ctx, int c);");
	set_frame_size(0X8051C40E, 0X8, 0, 0);
	add_func    (0X8051C478,0X8051C48C);
	set_func_flags(0X8051C478,0x1401);
	SetType(0X8051C478, "void __noreturn halt();");
	set_frame_size(0X8051C478, 0X8, 0, 0);
	add_func    (0X8051C490,0X8051C4A2);
	set_func_flags(0X8051C490,0x1400);
	SetType(0X8051C490, "int __fastcall dputs(const unsigned __int8 *str);");
	set_frame_size(0X8051C490, 0X8, 0, 0);
	add_func    (0X8051C4A2,0X8051C4A8);
	set_func_flags(0X8051C4A2,0x1400);
	SetType(0X8051C4A2, "int __fastcall _debug_stdio_fputs(void *ctx, const unsigned __int8 *s);");
	add_func    (0X8051C4A8,0X8051C4DE);
	set_func_flags(0X8051C4A8,0x1400);
	SetType(0X8051C4A8, "int dprintf(const char *, ...);");
	set_frame_size(0X8051C4A8, 0X20, 0, 0);
	define_local_var(0X8051C4A8, 0X8051C4DE, "[bp-0X10]", "varg_r0");
	define_local_var(0X8051C4A8, 0X8051C4DE, "[bp-0XC]", "varg_r1");
	define_local_var(0X8051C4A8, 0X8051C4DE, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051C4A8, 0X8051C4DE, "[bp-0X4]", "varg_r3");
	add_func    (0X8051C4E8,0X8051C512);
	set_func_flags(0X8051C4E8,0x1400);
	SetType(0X8051C4E8, "int __fastcall dvprintf(const unsigned __int8 *fmt, va_list ap);");
	set_frame_size(0X8051C4E8, 0X10, 0, 0);
	add_func    (0X8051C51C,0X8051C53C);
	set_func_flags(0X8051C51C,0x1401);
	SetType(0X8051C51C, "void __noreturn Debug_Error2(const void *, const char *, ...);");
	set_frame_size(0X8051C51C, 0X18, 0, 0);
	define_local_var(0X8051C51C, 0X8051C53C, "[bp-0XC]", "varg_r1");
	define_local_var(0X8051C51C, 0X8051C53C, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051C51C, 0X8051C53C, "[bp-0X4]", "varg_r3");
	add_func    (0X8051C540,0X8051C548);
	set_func_flags(0X8051C540,0x1400);
	SetType(0X8051C540, "int __fastcall _debug_stdio_vfprintf(void *ctx, const unsigned __int8 *fmt, va_list ap);");
	add_func    (0X8051C548,0X8051C5A0);
	set_func_flags(0X8051C548,0x1400);
	SetType(0X8051C548, "int __fastcall hexdump(int result, unsigned int);");
	set_frame_size(0X8051C548, 0X20, 0, 0);
	add_func    (0X8051C5F8,0X8051C60A);
	set_func_flags(0X8051C5F8,0x1400);
	SetType(0X8051C5F8, "_DWORD *__fastcall sub_8051C5F8(_DWORD *result);");
	add_func    (0X8051C60C,0X8051C616);
	set_func_flags(0X8051C60C,0x1400);
	SetType(0X8051C60C, "int __fastcall sub_8051C60C(_DWORD, _DWORD, _DWORD);");
	add_func    (0X8051C61C,0X8051C6BE);
	set_func_flags(0X8051C61C,0x1400);
	SetType(0X8051C61C, "_DWORD *__fastcall sub_8051C61C(_DWORD *, int, int);");
	set_frame_size(0X8051C61C, 0X20, 0, 0);
	add_func    (0X8051C6D4,0X8051C738);
	set_func_flags(0X8051C6D4,0x1400);
	SetType(0X8051C6D4, "_DWORD *sub_8051C6D4();");
	set_frame_size(0X8051C6D4, 0X20, 0, 0);
	add_func    (0X8051C740,0X8051C7C2);
	set_func_flags(0X8051C740,0x1400);
	SetType(0X8051C740, "int __fastcall sub_8051C740(int, int, int);");
	set_frame_size(0X8051C740, 0X18, 0, 0);
	add_func    (0X8051C7EC,0X8051C80E);
	set_func_flags(0X8051C7EC,0x1400);
	SetType(0X8051C7EC, "int __fastcall sub_8051C7EC(int result, int);");
	set_frame_size(0X8051C7EC, 0X10, 0, 0);
	add_func    (0X8051C81C,0X8051C938);
	set_func_flags(0X8051C81C,0x1400);
	SetType(0X8051C81C, "unsigned int __fastcall miniheap_alloc(_DWORD *, unsigned int);");
	set_frame_size(0X8051C81C, 0X28, 0, 0);
	add_func    (0X8051C958,0X8051C994);
	set_func_flags(0X8051C958,0x1400);
	SetType(0X8051C958, "_DWORD *__fastcall sub_8051C958(_DWORD *result);");
	set_frame_size(0X8051C958, 0X10, 0, 0);
	add_func    (0X8051C9A4,0X8051CA00);
	set_func_flags(0X8051C9A4,0x1400);
	SetType(0X8051C9A4, "void __fastcall heap_delayed_free(void *ptr);");
	set_frame_size(0X8051C9A4, 0X10, 0, 0);
	add_func    (0X8051CA78,0X8051CAB6);
	set_func_flags(0X8051CA78,0x1400);
	SetType(0X8051CA78, "_DWORD *heap_init();");
	set_frame_size(0X8051CA78, 0X8, 0, 0);
	add_func    (0X8051CAD0,0X8051CBD4);
	set_func_flags(0X8051CAD0,0x1400);
	SetType(0X8051CAD0, "void __fastcall memmove(int a1, char *a2, int a3);");
	add_func    (0X8051CBDC,0X8051CC70);
	set_func_flags(0X8051CBDC,0x1400);
	SetType(0X8051CBDC, "char *__fastcall memset(char *dst, int value, int size);");
	add_func    (0X8051CC70,0X8051CC9C);
	set_func_flags(0X8051CC70,0x1400);
	add_func    (0X8051CC9C,0X8051CCFE);
	set_func_flags(0X8051CC9C,0x1400);
	set_frame_size(0X8051CC9C, 0X18, 0, 0);
	add_func    (0X8051CCFE,0X8051CD02);
	set_func_flags(0X8051CCFE,0x1480);
	SetType(0X8051CCFE, "int __fastcall atoi(const unsigned __int8 *num);");
	add_func    (0X8051CD02,0X8051CD52);
	set_func_flags(0X8051CD02,0x1400);
	set_frame_size(0X8051CD02, 0X10, 0, 0);
	add_func    (0X8051CD52,0X8051CD56);
	set_func_flags(0X8051CD52,0x1480);
	SetType(0X8051CD52, "unsigned int __fastcall atoui(const unsigned __int8 *num);");
	add_func    (0X8051CDE2,0X8051CDF4);
	set_func_flags(0X8051CDE2,0x1400);
	SetType(0X8051CDE2, "int __fastcall isspace(int c);");
	add_func    (0X8051CE0C,0X8051CE18);
	set_func_flags(0X8051CE0C,0x1400);
	add_func    (0X8051CE18,0X8051CE28);
	set_func_flags(0X8051CE18,0x1400);
	SetType(0X8051CE18, "int __fastcall sub_8051CE18(_DWORD);");
	add_func    (0X8051CE44,0X8051CE60);
	set_func_flags(0X8051CE44,0x1400);
	add_func    (0X8051CEA6,0X8051CEB2);
	set_func_flags(0X8051CEA6,0x1400);
	SetType(0X8051CEA6, "int __fastcall sub_8051CEA6(_DWORD);");
	add_func    (0X8051CEE4,0X8051CF7A);
	set_func_flags(0X8051CEE4,0x1400);
	SetType(0X8051CEE4, "int __fastcall sub_8051CEE4(int, __int64, __int16, char *);");
	set_frame_size(0X8051CEE4, 0X28, 0, 0);
	add_func    (0X8051CF7C,0X8051D3DE);
	set_func_flags(0X8051CF7C,0x1400);
	SetType(0X8051CF7C, "int __fastcall sub_8051CF7C(int (__fastcall *)(unsigned __int8 *, unsigned __int8 *, int), int, unsigned __int8 *, char **);");
	set_frame_size(0X8051CF7C, 0X60, 0, 0);
	add_func    (0X8051D3E0,0X8051D408);
	set_func_flags(0X8051D3E0,0x1400);
	SetType(0X8051D3E0, "unsigned int __fastcall sub_8051D3E0(int, unsigned int, unsigned __int8 *, char **);");
	set_frame_size(0X8051D3E0, 0X20, 0, 0);
	add_func    (0X8051D40C,0X8051D426);
	set_func_flags(0X8051D40C,0x1400);
	SetType(0X8051D40C, "int snprintf(int, unsigned int, unsigned __int8 *, ...);");
	set_frame_size(0X8051D40C, 0X18, 0, 0);
	define_local_var(0X8051D40C, 0X8051D426, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051D40C, 0X8051D426, "[bp-0X4]", "varg_r3");
	add_func    (0X8051D426,0X8051D43A);
	set_func_flags(0X8051D426,0x1400);
	SetType(0X8051D426, "int __fastcall sub_8051D426(int, unsigned __int8 *, char **);");
	set_frame_size(0X8051D426, 0X8, 0, 0);
	add_func    (0X8051D43A,0X8051D454);
	set_func_flags(0X8051D43A,0x1400);
	SetType(0X8051D43A, "int sub_8051D43A(int, unsigned __int8 *, ...);");
	set_frame_size(0X8051D43A, 0X18, 0, 0);
	define_local_var(0X8051D43A, 0X8051D454, "[bp-0XC]", "varg_r1");
	define_local_var(0X8051D43A, 0X8051D454, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051D43A, 0X8051D454, "[bp-0X4]", "varg_r3");
	add_func    (0X8051D454,0X8051D45A);
	set_func_flags(0X8051D454,0x1400);
	SetType(0X8051D454, "unsigned int __fastcall malloc(_DWORD *);");
	add_func    (0X8051D45A,0X8051D464);
	set_func_flags(0X8051D45A,0x1400);
	SetType(0X8051D45A, "unsigned int __fastcall sub_8051D45A(unsigned int, int);");
	add_func    (0X8051D464,0X8051D482);
	set_func_flags(0X8051D464,0x1400);
	SetType(0X8051D464, "void *__fastcall calloc(size_t count, size_t size);");
	set_frame_size(0X8051D464, 0X10, 0, 0);
	add_func    (0X8051D482,0X8051D4AE);
	set_func_flags(0X8051D482,0x1400);
	SetType(0X8051D482, "unsigned int __fastcall sub_8051D482(char *, int);");
	set_frame_size(0X8051D482, 0X10, 0, 0);
	add_func    (0X8051D4AE,0X8051D4B2);
	set_func_flags(0X8051D4AE,0x1480);
	SetType(0X8051D4AE, "_DWORD *__fastcall free(_DWORD *result);");
	add_func    (0X8051D4B2,0X8051D4BA);
	set_func_flags(0X8051D4B2,0x1400);
	SetType(0X8051D4B2, "int __fastcall sub_8051D4B2(int result);");
	add_func    (0X8051D4BC,0X8051D4D0);
	set_func_flags(0X8051D4BC,0x1400);
	SetType(0X8051D4BC, "int __fastcall sub_8051D4BC(int, int, int);");
	add_func    (0X8051D4DC,0X8051D4EA);
	set_func_flags(0X8051D4DC,0x1400);
	SetType(0X8051D4DC, "int __fastcall sub_8051D4DC(int, int);");
	set_frame_size(0X8051D4DC, 0X8, 0, 0);
	add_func    (0X8051D4EC,0X8051D4F2);
	set_func_flags(0X8051D4EC,0x1400);
	SetType(0X8051D4EC, "int __fastcall sub_8051D4EC(int);");
	add_func    (0X8051D4F4,0X8051D4F8);
	set_func_flags(0X8051D4F4,0x1400);
	SetType(0X8051D4F4, "int __fastcall sub_8051D4F4(int, int, int);");
	set_frame_size(0X8051D4F4, 0X8, 0, 0);
	add_func    (0X8051D4F8,0X8051D506);
	set_func_flags(0X8051D4F8,0x1400);
	SetType(0X8051D4F8, "int __fastcall fputs(const unsigned __int8 *s, FILE_0 *fp);");
	set_frame_size(0X8051D4F8, 0X8, 0, 0);
	add_func    (0X8051D508,0X8051D522);
	set_func_flags(0X8051D508,0x1400);
	SetType(0X8051D508, "int __fastcall sub_8051D508(int);");
	set_frame_size(0X8051D508, 0X8, 0, 0);
	add_func    (0X8051D528,0X8051D532);
	set_func_flags(0X8051D528,0x1400);
	SetType(0X8051D528, "int __fastcall sub_8051D528(int);");
	set_frame_size(0X8051D528, 0X8, 0, 0);
	add_func    (0X8051D534,0X8051D53A);
	set_func_flags(0X8051D534,0x1400);
	SetType(0X8051D534, "int sub_8051D534();");
	add_func    (0X8051D540,0X8051D54A);
	set_func_flags(0X8051D540,0x1400);
	SetType(0X8051D540, "int __fastcall sub_8051D540(int);");
	set_frame_size(0X8051D540, 0X8, 0, 0);
	add_func    (0X8051D54A,0X8051D564);
	set_func_flags(0X8051D54A,0x1400);
	SetType(0X8051D54A, "int __fastcall sub_8051D54A(int);");
	set_frame_size(0X8051D54A, 0X18, 0, 0);
	define_local_var(0X8051D54A, 0X8051D564, "[bp-0XC]", "varg_r1");
	define_local_var(0X8051D54A, 0X8051D564, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051D54A, 0X8051D564, "[bp-0X4]", "varg_r3");
	add_func    (0X8051D564,0X8051D580);
	set_func_flags(0X8051D564,0x1400);
	SetType(0X8051D564, "int printf(const unsigned __int8 *fmt, ...);");
	set_frame_size(0X8051D564, 0X20, 0, 0);
	define_local_var(0X8051D564, 0X8051D580, "[bp-0X10]", "varg_r0");
	define_local_var(0X8051D564, 0X8051D580, "[bp-0XC]", "varg_r1");
	define_local_var(0X8051D564, 0X8051D580, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051D564, 0X8051D580, "[bp-0X4]", "varg_r3");
	add_func    (0X8051D584,0X8051D588);
	set_func_flags(0X8051D584,0x1400);
	SetType(0X8051D584, "int sub_8051D584();");
	add_func    (0X8051D588,0X8051D58C);
	set_func_flags(0X8051D588,0x1400);
	SetType(0X8051D588, "int sub_8051D588();");
	add_func    (0X8051D58C,0X8051D590);
	set_func_flags(0X8051D58C,0x1400);
	SetType(0X8051D58C, "int sub_8051D58C();");
	add_func    (0X8051D590,0X8051D592);
	set_func_flags(0X8051D590,0x1440);
	add_func    (0X8051D592,0X8051D598);
	set_func_flags(0X8051D592,0x1401);
	SetType(0X8051D592, "void __noreturn sub_8051D592();");
	set_frame_size(0X8051D592, 0X8, 0, 0);
	add_func    (0X8051D598,0X8051D5B4);
	set_func_flags(0X8051D598,0x1400);
	SetType(0X8051D598, "unsigned __int8 *__fastcall sub_8051D598(unsigned __int8 *, unsigned __int8, int);");
	set_frame_size(0X8051D598, 0X8, 0, 0);
	add_func    (0X8051D5B4,0X8051D5CE);
	set_func_flags(0X8051D5B4,0x1400);
	SetType(0X8051D5B4, "void __fastcall sub_8051D5B4(int, int, int, int, int, int, int);");
	set_frame_size(0X8051D5B4, 0XC, 0, 0);
	add_func    (0X8051D5CE,0X8051D5D2);
	set_func_flags(0X8051D5CE,0x1400);
	SetType(0X8051D5CE, "void __fastcall sub_8051D5CE(int, int, int, int, int, int, int);");
	add_func    (0X8051D5D2,0X8051D5EC);
	set_func_flags(0X8051D5D2,0x1400);
	SetType(0X8051D5D2, "_BYTE *__fastcall sub_8051D5D2(_BYTE *result, int);");
	set_frame_size(0X8051D5D2, 0X8, 0, 0);
	add_func    (0X8051D5EC,0X8051D604);
	set_func_flags(0X8051D5EC,0x1400);
	SetType(0X8051D5EC, "unsigned __int8 *__fastcall sub_8051D5EC(unsigned __int8 *, unsigned __int8);");
	add_func    (0X8051D604,0X8051D61E);
	set_func_flags(0X8051D604,0x1400);
	SetType(0X8051D604, "int __fastcall strcmp(const unsigned __int8 *cs, const unsigned __int8 *ct);");
	set_frame_size(0X8051D604, 0X8, 0, 0);
	add_func    (0X8051D61E,0X8051D622);
	set_func_flags(0X8051D61E,0x14c0);
	SetType(0X8051D61E, "int __fastcall j_strcmp(int, int);");
	add_func    (0X8051D622,0X8051D630);
	set_func_flags(0X8051D622,0x1400);
	SetType(0X8051D622, "int __fastcall sub_8051D622(int result, int);");
	add_func    (0X8051D630,0X8051D650);
	set_func_flags(0X8051D630,0x1400);
	SetType(0X8051D630, "int __fastcall sub_8051D630(char *, int);");
	set_frame_size(0X8051D630, 0X10, 0, 0);
	add_func    (0X8051D650,0X8051D65E);
	set_func_flags(0X8051D650,0x1400);
	SetType(0X8051D650, "char *__fastcall sub_8051D650(int);");
	add_func    (0X8051D668,0X8051D6A8);
	set_func_flags(0X8051D668,0x1400);
	SetType(0X8051D668, "_BYTE *__fastcall sub_8051D668(_BYTE *, int, int);");
	set_frame_size(0X8051D668, 0X18, 0, 0);
	add_func    (0X8051D6A8,0X8051D6D6);
	set_func_flags(0X8051D6A8,0x1400);
	SetType(0X8051D6A8, "size_t __fastcall strlcpy(unsigned __int8 *dst, const unsigned __int8 *src, size_t s);");
	set_frame_size(0X8051D6A8, 0X8, 0, 0);
	add_func    (0X8051D6D6,0X8051D6E4);
	set_func_flags(0X8051D6D6,0x1400);
	SetType(0X8051D6D6, "int __fastcall sub_8051D6D6(int);");
	add_func    (0X8051D6E4,0X8051D70A);
	set_func_flags(0X8051D6E4,0x1400);
	SetType(0X8051D6E4, "_BYTE *__fastcall sub_8051D6E4(_BYTE *result, int, int);");
	set_frame_size(0X8051D6E4, 0X10, 0, 0);
	add_func    (0X8051D70A,0X8051D71E);
	set_func_flags(0X8051D70A,0x1400);
	SetType(0X8051D70A, "int __fastcall strncpy(int result, int, int);");
	set_frame_size(0X8051D70A, 0X8, 0, 0);
	add_func    (0X8051D71E,0X8051D740);
	set_func_flags(0X8051D71E,0x1400);
	SetType(0X8051D71E, "int __fastcall strncmp(int, int, int);");
	set_frame_size(0X8051D71E, 0XC, 0, 0);
	add_func    (0X8051D740,0X8051D784);
	set_func_flags(0X8051D740,0x1400);
	SetType(0X8051D740, "int __fastcall sub_8051D740(int, int, int);");
	set_frame_size(0X8051D740, 0X20, 0, 0);
	add_func    (0X8051D784,0X8051D79E);
	set_func_flags(0X8051D784,0x1400);
	SetType(0X8051D784, "_BYTE *__fastcall sub_8051D784(_BYTE *, int);");
	set_frame_size(0X8051D784, 0X8, 0, 0);
	add_func    (0X8051D79E,0X8051D7BE);
	set_func_flags(0X8051D79E,0x1400);
	SetType(0X8051D79E, "unsigned __int8 *__fastcall sub_8051D79E(unsigned __int8 *, int);");
	set_frame_size(0X8051D79E, 0XC, 0, 0);
	add_func    (0X8051D7BE,0X8051D7DC);
	set_func_flags(0X8051D7BE,0x1400);
	SetType(0X8051D7BE, "unsigned __int8 *__fastcall sub_8051D7BE(unsigned __int8 *, int);");
	set_frame_size(0X8051D7BE, 0X8, 0, 0);
	add_func    (0X8051D7DC,0X8051D7F8);
	set_func_flags(0X8051D7DC,0x1400);
	SetType(0X8051D7DC, "int __fastcall sub_8051D7DC(int, int);");
	set_frame_size(0X8051D7DC, 0XC, 0, 0);
	add_func    (0X8051D7F8,0X8051D83E);
	set_func_flags(0X8051D7F8,0x1400);
	SetType(0X8051D7F8, "int __fastcall sub_8051D7F8(int, int);");
	set_frame_size(0X8051D7F8, 0X18, 0, 0);
	add_func    (0X8051D83E,0X8051D882);
	set_func_flags(0X8051D83E,0x1400);
	SetType(0X8051D83E, "int __fastcall sub_8051D83E(int, int);");
	set_frame_size(0X8051D83E, 0X18, 0, 0);
	add_func    (0X8051D888,0X8051D8B6);
	set_func_flags(0X8051D888,0x1400);
	SetType(0X8051D888, "unsigned int __fastcall sub_8051D888(int, char *, unsigned int);");
	set_frame_size(0X8051D888, 0X18, 0, 0);
	add_func    (0X8051D8B8,0X8051D8D8);
	set_func_flags(0X8051D8B8,0x1400);
	SetType(0X8051D8B8, "void __fastcall msgq_init(msgq_t *msgq, int32_t size);");
	set_frame_size(0X8051D8B8, 0X10, 0, 0);
	add_func    (0X8051D8DC,0X8051D976);
	set_func_flags(0X8051D8DC,0x1400);
	SetType(0X8051D8DC, "status_t __fastcall msgq_queue_message(msgq_t *msgq, const msgq_message_t *message);");
	set_frame_size(0X8051D8DC, 0X20, 0, 0);
	add_func    (0X8051D976,0X8051DA24);
	set_func_flags(0X8051D976,0x1400);
	SetType(0X8051D976, "status_t __fastcall msgq_dequeue_message(msgq_t *msgq, msgq_message_t *message);");
	set_frame_size(0X8051D976, 0X20, 0, 0);
	add_func    (0X8051DA28,0X8051DA30);
	set_func_flags(0X8051DA28,0x1400);
	SetType(0X8051DA28, "int __cdecl Maybe_FixedPointDivide(int, int);");
	set_frame_size(0X8051DA28, 0X10, 0, 0);
	add_func    (0X8051DA54,0X8051DA58);
	set_func_flags(0X8051DA54,0x1400);
	SetType(0X8051DA54, "int __cdecl SomeKindaDivide(int, int);");
	add_func    (0X8051DA58,0X8051DA64);
	set_func_flags(0X8051DA58,0x1400);
	SetType(0X8051DA58, "void sub_8051DA58();");
	add_func    (0X8051DA64,0X8051DA70);
	set_func_flags(0X8051DA64,0x1400);
	SetType(0X8051DA64, "void sub_8051DA64();");
	add_func    (0X8051DAD4,0X8051DADC);
	set_func_flags(0X8051DAD4,0x1400);
	SetType(0X8051DAD4, "void sub_8051DAD4();");
	add_func    (0X8051DADC,0X8051DAE8);
	set_func_flags(0X8051DADC,0x1400);
	SetType(0X8051DADC, "void sub_8051DADC();");
	add_func    (0X8051DC10,0X8051DC14);
	set_func_flags(0X8051DC10,0x1400);
	SetType(0X8051DC10, "void sub_8051DC10();");
	add_func    (0X8051DC14,0X8051DC20);
	set_func_flags(0X8051DC14,0x1400);
	SetType(0X8051DC14, "void sub_8051DC14();");
	add_func    (0X8051DC24,0X8051DC58);
	set_func_flags(0X8051DC24,0x1400);
	SetType(0X8051DC24, "__int64 __fastcall sub_8051DC24(int result, int, int);");
	add_func    (0X8051DC58,0X8051DC5C);
	set_func_flags(0X8051DC58,0x1440);
	SetType(0X8051DC58, "int __fastcall nullsub_1(_DWORD);");
	add_func    (0X8051DC5C,0X8051DC60);
	set_func_flags(0X8051DC5C,0x1440);
	SetType(0X8051DC5C, "void nullsub_4();");
	add_func    (0X8051DC60,0X8051DC7C);
	set_func_flags(0X8051DC60,0x1400);
	SetType(0X8051DC60, "__int64 __fastcall modulo2(int, int);");
	set_frame_size(0X8051DC60, 0X8, 0, 0);
	add_func    (0X8051DC7C,0X8051DC80);
	set_func_flags(0X8051DC7C,0x14c0);
	SetType(0X8051DC7C, "void __fastcall j_memcpy(int a1, char *a2, int a3);");
	add_func    (0X8051DC80,0X8051DC9C);
	set_func_flags(0X8051DC80,0x1400);
	SetType(0X8051DC80, "__int64 __fastcall modulo(unsigned int, unsigned int);");
	set_frame_size(0X8051DC80, 0X8, 0, 0);
	add_func    (0X8051DC9C,0X8051DCC0);
	set_func_flags(0X8051DC9C,0x1400);
	SetType(0X8051DC9C, "s64 __fastcall Divide64(s64, s64);");
	set_frame_size(0X8051DC9C, 0X18, 0, 0);
	add_func    (0X8051DCC0,0X8051DD04);
	set_func_flags(0X8051DCC0,0x1410);
	SetType(0X8051DCC0, "unsigned int __fastcall sub_8051DCC0(int, int, _DWORD *);");
	set_frame_size(0X8051DCC0, 0XC, 8, 0);
	add_func    (0X8051DD04,0X8051DD38);
	set_func_flags(0X8051DD04,0x1000);
	SetType(0X8051DD04, "unsigned int __fastcall sub_8051DD04(unsigned int result, unsigned int, unsigned int *);");
	add_func    (0X8051DD38,0X8051DD7C);
	set_func_flags(0X8051DD38,0x1400);
	SetType(0X8051DD38, "int __fastcall sub_8051DD38(unsigned int, unsigned int, unsigned int *, int);");
	add_func    (0X8051DD7C,0X8051DEC4);
	set_func_flags(0X8051DD7C,0x1400);
	SetType(0X8051DD7C, "int __fastcall sub_8051DD7C(unsigned int, unsigned int, unsigned int *, int);");
	add_func    (0X8051DEE4,0X8051DF64);
	set_func_flags(0X8051DEE4,0x1400);
	SetType(0X8051DEE4, "s64 __fastcall sub_8051DEE4(s64, s64, unsigned int *);");
	set_frame_size(0X8051DEE4, 0X28, 0, 0);
	add_func    (0X8051DF64,0X8051DFEC);
	set_func_flags(0X8051DF64,0x1400);
	SetType(0X8051DF64, "int __fastcall sub_8051DF64(int, int, int, int, int, int, int, int, int, int, int, int, int);");
	add_func    (0X8051DFEC,0X8051E018);
	set_func_flags(0X8051DFEC,0x1400);
	SetType(0X8051DFEC, "void sub_8051DFEC();");
	add_func    (0X8051E0FC,0X8051E12C);
	set_func_flags(0X8051E0FC,0x1000);
	SetType(0X8051E0FC, "int __cdecl sub_8051E0FC(int);");
	add_func    (0X8051E12C,0X8051E200);
	set_func_flags(0X8051E12C,0x1400);
	SetType(0X8051E12C, "int __fastcall sub_8051E12C(int, unsigned int, int, int, unsigned int *);");
	set_frame_size(0X8051E12C, 0, 0, 0);
	add_func    (0X8051E200,0X8051E212);
	set_func_flags(0X8051E200,0x1400);
	SetType(0X8051E200, "int sub_8051E200();");
	set_frame_size(0X8051E200, 0X8, 0, 0);
	add_func    (0X8051E212,0X8051E222);
	set_func_flags(0X8051E212,0x1400);
	SetType(0X8051E212, "char *sub_8051E212();");
	add_func    (0X8051E222,0X8051E248);
	set_func_flags(0X8051E222,0x1400);
	SetType(0X8051E222, "int sub_8051E222();");
	set_frame_size(0X8051E222, 0X8, 0, 0);
	add_func    (0X8051E248,0X8051E460);
	set_func_flags(0X8051E248,0x1410);
	SetType(0X8051E248, "int __fastcall OpusDecoder_Initialise(OpusMainStruct *this);");
	set_frame_size(0X8051E248, 0X20, 8, 0);
	define_local_var(0X8051E248, 0X8051E460, "[bp-0X20]", "stack_size");
	define_local_var(0X8051E248, 0X8051E460, "[bp-0X18]", "receiveBufferAddr");
	define_local_var(0X8051E248, 0X8051E460, "[bp-0X14]", "receiveMsg");
	add_func    (0X8051E460,0X8051EBBA);
	set_func_flags(0X8051E460,0x1411);
	SetType(0X8051E460, "void __fastcall __noreturn OpusMessageDispatcher();");
	set_frame_size(0X8051E460, 0X38, 8, 0);
	define_local_var(0X8051E460, 0X8051EBBA, "[bp-0X2C]", "unkData5");
	define_local_var(0X8051E460, 0X8051EBBA, "[bp-0X28]", "outDataPtr");
	define_local_var(0X8051E460, 0X8051EBBA, "[bp-0X24]", "outDecodedSamples");
	define_local_var(0X8051E460, 0X8051EBBA, "[bp-0X20]", "cmd");
	add_func    (0X8051EBBA,0X8051EC2C);
	set_func_flags(0X8051EBBA,0x1410);
	SetType(0X8051EBBA, "void __fastcall ShutdownOpusDecoder(OpusMainStruct *this);");
	set_frame_size(0X8051EBBA, 0X18, 8, 0);
	add_func    (0X8051EC2C,0X8051EC60);
	set_func_flags(0X8051EC2C,0x1410);
	SetType(0X8051EC2C, "OpusMainStruct *InitAndGetOpusMainStruct();");
	set_frame_size(0X8051EC2C, 0X8, 8, 0);
	add_func    (0X8051EC60,0X8051EC76);
	set_func_flags(0X8051EC60,0x1400);
	SetType(0X8051EC60, "int __fastcall OpusDecodeObject__GetRequiredWorkSize(int channelCount);");
	add_func    (0X8051EC76,0X8051EC9C);
	set_func_flags(0X8051EC76,0x1400);
	SetType(0X8051EC76, "OpusDecodeObject *__fastcall OpusDecodeObject_Init(OpusDecodeObject *this, void *a2);");
	add_func    (0X8051EC9C,0X8051ECDE);
	set_func_flags(0X8051EC9C,0x1410);
	SetType(0X8051EC9C, "int __fastcall OpusDecodeObject_InitDecoder(OpusDecodeObject *this, int sampleRate, unsigned int channelCount);");
	set_frame_size(0X8051EC9C, 0X8, 8, 0);
	add_func    (0X8051ECDE,0X8051ED02);
	set_func_flags(0X8051ECDE,0x1400);
	SetType(0X8051ECDE, "int __fastcall OpusDecodeObject_Reset(OpusDecodeObject *this);");
	add_func    (0X8051ED02,0X8051ED80);
	set_func_flags(0X8051ED02,0x1410);
	SetType(0X8051ED02, "int __fastcall OpusDecodeObject_Decode(OpusDecodeObject *this, int *outDecodedSamples, int outData, int frameSize_1, int inData, int inDataLen);");
	set_frame_size(0X8051ED02, 0X18, 8, 0);
	define_local_var(0X8051ED02, 0X8051ED80, "[bp+0X8]", "inData");
	add_func    (0X8051ED80,0X8051ED90);
	set_func_flags(0X8051ED80,0x1400);
	SetType(0X8051ED80, "int __fastcall OpusDecodeObject_ResetDecoderState(HardwareOpusUnkStruct *this);");
	set_frame_size(0X8051ED80, 0X8, 0, 0);
	add_func    (0X8051ED90,0X8051EDB6);
	set_func_flags(0X8051ED90,0x1400);
	SetType(0X8051ED90, "unsigned int __fastcall OpusMultiStreamDecodeObject__GetRequiredWorkSize(int totalStreamCount, int stereoStreamCount);");
	add_func    (0X8051EDB6,0X8051EDDC);
	set_func_flags(0X8051EDB6,0x1400);
	SetType(0X8051EDB6, "OpusMultiStreamDecodeObject *__fastcall OpusMultiStreamDecodeObject_Init(OpusMultiStreamDecodeObject *this, int a2);");
	add_func    (0X8051EDDC,0X8051EE2C);
	set_func_flags(0X8051EDDC,0x1410);
	SetType(0X8051EDDC, "int __fastcall OpusMultiStreamDecodeObject_InitDecoder(OpusMultiStreamDecodeObject *this, int sampleRate, __int64 channelsStreams, int coupledStreams, u8 *mapping);");
	set_frame_size(0X8051EDDC, 0X10, 8, 0);
	define_local_var(0X8051EDDC, 0X8051EE2C, "[bp+0X8]", "coupledStreams");
	add_func    (0X8051EE2C,0X8051EE50);
	set_func_flags(0X8051EE2C,0x1400);
	SetType(0X8051EE2C, "int __fastcall OpusMultiStreamDecodeObject_Reset(OpusMultiStreamDecodeObject *this);");
	add_func    (0X8051EE50,0X8051EECE);
	set_func_flags(0X8051EE50,0x1410);
	SetType(0X8051EE50, "int __fastcall OpusMultiStreamDecodeObject_Decode(OpusMultiStreamDecodeObject *this, int *outDecodedSampleCount, u8 *outData, int frameSize, u8 *data, int len);");
	set_frame_size(0X8051EE50, 0X18, 8, 0);
	define_local_var(0X8051EE50, 0X8051EECE, "[bp+0X8]", "data");
	add_func    (0X8051EECE,0X8051EEDE);
	set_func_flags(0X8051EECE,0x1400);
	SetType(0X8051EECE, "int __fastcall OpusMultiStreamDecodeObject_ResetDecoderState(OpusMultiStreamDecodeObject *this);");
	set_frame_size(0X8051EECE, 0X8, 0, 0);
	add_func    (0X8051EEE0,0X8051EF2C);
	set_func_flags(0X8051EEE0,0x1410);
	SetType(0X8051EEE0, "int __fastcall sub_8051EEE0(int, unsigned __int8 *, char **);");
	set_frame_size(0X8051EEE0, 0X8, 8, 0);
	add_func    (0X8051EF2C,0X8051EF4C);
	set_func_flags(0X8051EF2C,0x1400);
	SetType(0X8051EF2C, "int sub_8051EF2C(int, const char *, ...);");
	set_frame_size(0X8051EF2C, 0X18, 0, 0);
	add_func    (0X8051EF4C,0X8051EF6A);
	set_func_flags(0X8051EF4C,0x1410);
	SetType(0X8051EF4C, "void __fastcall MapMemory(unsigned int addr, unsigned int size, int flags);");
	set_frame_size(0X8051EF4C, 0X8, 8, 0);
	add_func    (0X8051EF6A,0X8051EF80);
	set_func_flags(0X8051EF6A,0x1410);
	SetType(0X8051EF6A, "void __fastcall Opus_UnmapMemory(unsigned int, unsigned int);");
	set_frame_size(0X8051EF6A, 0X8, 8, 0);
	add_func    (0X8051EF80,0X8051EFDA);
	set_func_flags(0X8051EF80,0x1410);
	SetType(0X8051EF80, "BOOL __fastcall open_opus_mailbox(OpusMailbox *opusMailbox, __int16 a2);");
	set_frame_size(0X8051EF80, 0X20, 8, 0);
	define_local_var(0X8051EF80, 0X8051EFDA, "[bp-0X20]", "err_handler");
	define_local_var(0X8051EF80, 0X8051EFDA, "[bp-0X18]", "context");
	add_func    (0X8051EFDA,0X8051EFF4);
	set_func_flags(0X8051EFDA,0x1410);
	SetType(0X8051EFDA, "BOOL __fastcall close_opus_mbx(OpusMailbox *this);");
	set_frame_size(0X8051EFDA, 0X8, 8, 0);
	add_func    (0X8051EFF4,0X8051F020);
	set_func_flags(0X8051EFF4,0x1410);
	SetType(0X8051EFF4, "BOOL __fastcall mailbox_SendData(int, unsigned int, int, int);");
	set_frame_size(0X8051EFF4, 0X10, 8, 0);
	add_func    (0X8051F042,0X8051F060);
	set_func_flags(0X8051F042,0x1410);
	SetType(0X8051F042, "BOOL __fastcall mailbox_receive(OpusMailbox *mbx, _DWORD *outMsg, int timeout, int block);");
	set_frame_size(0X8051F042, 0X8, 8, 0);
	add_func    (0X8051F060,0X8051F078);
	set_func_flags(0X8051F060,0x1410);
	SetType(0X8051F060, "int __fastcall mailbox_checkerror(int);");
	set_frame_size(0X8051F060, 0X8, 8, 0);
	add_func    (0X8051F078,0X8051F07E);
	set_func_flags(0X8051F078,0x1400);
	SetType(0X8051F078, "int __cdecl opus_decoder_alloc_get_size(int channelCount);");
	add_func    (0X8051F07E,0X8051F0B8);
	set_func_flags(0X8051F07E,0x1410);
	SetType(0X8051F07E, "int __fastcall opus_decoder_get_size(int);");
	set_frame_size(0X8051F07E, 0X10, 8, 0);
	add_func    (0X8051F0B8,0X8051F1C8);
	set_func_flags(0X8051F0B8,0x1410);
	SetType(0X8051F0B8, "int __fastcall opus_decoder_init(OpusDecoder *decoder, int sampleRate, unsigned int channelCount);");
	set_frame_size(0X8051F0B8, 0X20, 8, 0);
	add_func    (0X8051F1C8,0X8051F280);
	set_func_flags(0X8051F1C8,0x1410);
	SetType(0X8051F1C8, "u8 *__fastcall opus_decoder_create(int sampleRate, unsigned int channelCount, int *error);");
	set_frame_size(0X8051F1C8, 0X18, 8, 0);
	add_func    (0X8051F280,0X8051F57C);
	set_func_flags(0X8051F280,0x1410);
	SetType(0X8051F280, "int __fastcall opus_decode_native(_DWORD *st, char *data, int len, int pcm, int frame_size, unsigned int decode_fec, int self_delimited, int packet_offset);");
	set_frame_size(0X8051F280, 0XA8, 8, 0);
	define_local_var(0X8051F280, 0X8051F57C, "[bp-0X82]", "size");
	define_local_var(0X8051F280, 0X8051F57C, "[bp-0X21]", "toc");
	define_local_var(0X8051F280, 0X8051F57C, "[bp-0X20]", "offset");
	define_local_var(0X8051F280, 0X8051F57C, "[bp+0X8]", "frame_size");
	define_local_var(0X8051F280, 0X8051F57C, "[bp+0XC]", "decode_fec");
	define_local_var(0X8051F280, 0X8051F57C, "[bp+0X10]", "self_delimited");
	define_local_var(0X8051F280, 0X8051F57C, "[bp+0X14]", "packet_offset");
	add_func    (0X8051F580,0X805209CA);
	set_func_flags(0X8051F580,0x1410);
	SetType(0X8051F580, "int __fastcall opus_decode_frame(_DWORD *st, BOOL data, __int64 pcm, int frame_size, int decode_fec);");
	set_frame_size(0X8051F580, 0X100, 8, 0);
	define_local_var(0X8051F580, 0X805209CA, "[bp+0X8]", "frame_size");
	define_local_var(0X8051F580, 0X805209CA, "[bp+0XC]", "decode_fec");
	add_func    (0X805209F0,0X80520A28);
	set_func_flags(0X805209F0,0x1400);
	SetType(0X805209F0, "int __fastcall sub_805209F0(unsigned __int8 *);");
	add_func    (0X80520A28,0X80520A36);
	set_func_flags(0X80520A28,0x1400);
	SetType(0X80520A28, "int __fastcall sub_80520A28(_BYTE *);");
	add_func    (0X80520A36,0X80520B74);
	set_func_flags(0X80520A36,0x1410);
	SetType(0X80520A36, "int __fastcall sub_80520A36(_DWORD *, char *, int, float *, int, unsigned int);");
	set_frame_size(0X80520A36, 0X30, 8, 0);
	add_func    (0X80520B78,0X80520BCA);
	set_func_flags(0X80520B78,0x1410);
	SetType(0X80520B78, "int __fastcall sub_80520B78(int, unsigned __int8 *, int);");
	set_frame_size(0X80520B78, 0X8, 8, 0);
	add_func    (0X80520BCA,0X80520C2C);
	set_func_flags(0X80520BCA,0x1410);
	SetType(0X80520BCA, "int __fastcall opus_decode(OpusDecoder *st, char *data, int len, s16 *pcm, int frameSize, int decode_fec);");
	set_frame_size(0X80520BCA, 0X30, 8, 0);
	define_local_var(0X80520BCA, 0X80520C2C, "[bp+0X8]", "frameSize");
	define_local_var(0X80520BCA, 0X80520C2C, "[bp+0XC]", "decode_fec");
	add_func    (0X80520C2C,0X80520D5C);
	set_func_flags(0X80520C2C,0x1410);
	SetType(0X80520C2C, "int opus_decoder_ctl(OpusDecoder *this, OPUS_REQUEST request, ...);");
	set_frame_size(0X80520C2C, 0X18, 16, 0);
	add_func    (0X80520D5C,0X80520D66);
	set_func_flags(0X80520D5C,0x1400);
	SetType(0X80520D5C, "_DWORD *__fastcall sub_80520D5C(_DWORD *);");
	set_frame_size(0X80520D5C, 0X8, 0, 0);
	add_func    (0X80520D66,0X80520D96);
	set_func_flags(0X80520D66,0x1400);
	SetType(0X80520D66, "int __fastcall sub_80520D66(_BYTE *, int);");
	add_func    (0X80520D96,0X80520DE6);
	set_func_flags(0X80520D96,0x1410);
	SetType(0X80520D96, "int __fastcall sub_80520D96(unsigned __int8 *, int, int);");
	set_frame_size(0X80520D96, 0X8, 8, 0);
	add_func    (0X80520DE8,0X80520DEE);
	set_func_flags(0X80520DE8,0x1400);
	SetType(0X80520DE8, "int sub_80520DE8();");
	add_func    (0X80520DEE,0X80520E58);
	set_func_flags(0X80520DEE,0x1410);
	SetType(0X80520DEE, "unsigned int __fastcall opus_multistream_decoder_get_size(int, int);");
	set_frame_size(0X80520DEE, 0X18, 8, 0);
	add_func    (0X80520E58,0X80520F96);
	set_func_flags(0X80520E58,0x1410);
	SetType(0X80520E58, "int __fastcall opus_multistream_decoder_init(OpusMSDecoder *st, int Fs, __int64 channelsStreams, int coupledStreams, u8 *mapping);");
	set_frame_size(0X80520E58, 0X28, 8, 0);
	define_local_var(0X80520E58, 0X80520F96, "[bp+0X8]", "coupledStreams");
	define_local_var(0X80520E58, 0X80520F96, "[bp+0XC]", "mapping");
	add_func    (0X80520F96,0X80521064);
	set_func_flags(0X80520F96,0x1410);
	SetType(0X80520F96, "_DWORD *__fastcall sub_80520F96(int, unsigned int, int, int, unsigned int, int *);");
	set_frame_size(0X80520F96, 0X30, 8, 0);
	add_func    (0X80521064,0X80521084);
	set_func_flags(0X80521064,0x1410);
	SetType(0X80521064, "int __fastcall opus_multistream_decode(OpusMSDecoder *st, char *data, int len, s16 *pcm, int frame_size, unsigned int decode_fec);");
	set_frame_size(0X80521064, 0X18, 8, 0);
	define_local_var(0X80521064, 0X80521084, "[bp+0X8]", "frame_size");
	add_func    (0X80521084,0X805213DE);
	set_func_flags(0X80521084,0x1410);
	SetType(0X80521084, "int __fastcall opus_multistream_decode_native(OpusMSDecoder *st, char *data, int len, s16 *pcm, void *(__fastcall *copy_channel_out)(void *dst, int dst_stride, int dst_channel, s16 *src, int src_stride, int frame_size), int frame_size, int decode_fec);");
	set_frame_size(0X80521084, 0XD0, 8, 0);
	define_local_var(0X80521084, 0X805213DE, "[bp+0X8]", "copy_channel_out");
	define_local_var(0X80521084, 0X805213DE, "[bp+0XC]", "frame_size");
	define_local_var(0X80521084, 0X805213DE, "[bp+0X10]", "decode_fec");
	add_func    (0X805213DE,0X805214C8);
	set_func_flags(0X805213DE,0x1410);
	SetType(0X805213DE, "void *__fastcall opus_copy_channel_out_short(void *dst, int dst_stride, int dst_channel, s16 *src, int src_stride, int frame_size);");
	set_frame_size(0X805213DE, 0X18, 8, 0);
	define_local_var(0X805213DE, 0X805214C8, "[bp+0X8]", "src_stride");
	define_local_var(0X805213DE, 0X805214C8, "[bp+0XC]", "frame_size");
	add_func    (0X805214C8,0X805214E8);
	set_func_flags(0X805214C8,0x1410);
	SetType(0X805214C8, "int __fastcall sub_805214C8(int *, char *, int, int, int, unsigned int);");
	set_frame_size(0X805214C8, 0X18, 8, 0);
	add_func    (0X805214EA,0X80521580);
	set_func_flags(0X805214EA,0x1410);
	SetType(0X805214EA, "void __fastcall sub_805214EA(int, int, int, __int16 *, int, int, int, int, int);");
	set_frame_size(0X805214EA, 0, 0, 0);
	add_func    (0X80521584,0X80521750);
	set_func_flags(0X80521584,0x1410);
	SetType(0X80521584, "int opus_multistream_decoder_ctl_va_list(OpusMSDecoder *this, OPUS_REQUEST request, ...);");
	set_frame_size(0X80521584, 0X28, 16, 0);
	add_func    (0X8052175C,0X8052179E);
	set_func_flags(0X8052175C,0x1400);
	SetType(0X8052175C, "int __fastcall sub_8052175C(int);");
	add_func    (0X8052179E,0X80521C4C);
	set_func_flags(0X8052179E,0x1410);
	SetType(0X8052179E, "void __fastcall sub_8052179E(int, char *, int, int, int, __int64, int, int, int, int);");
	set_frame_size(0X8052179E, 0X78, 8, 0);
	add_func    (0X80521C4C,0X80521CA4);
	set_func_flags(0X80521C4C,0x1410);
	SetType(0X80521C4C, "_DWORD *__fastcall sub_80521C4C(_DWORD *result, int, int, int);");
	set_frame_size(0X80521C4C, 0X18, 8, 0);
	add_func    (0X80521CD0,0X80521CFA);
	set_func_flags(0X80521CD0,0x1410);
	SetType(0X80521CD0, "int __fastcall celt_decoder_get_size(int channelCount);");
	set_frame_size(0X80521CD0, 0X8, 8, 0);
	add_func    (0X80521CFA,0X80521D94);
	set_func_flags(0X80521CFA,0x1410);
	SetType(0X80521CFA, "int __fastcall celt_decoder_init(int, int, unsigned int);");
	set_frame_size(0X80521CFA, 0X18, 8, 0);
	add_func    (0X80521DA0,0X80524940);
	set_func_flags(0X80521DA0,0x1410);
	SetType(0X80521DA0, "void __fastcall sub_80521DA0(unsigned int, int, unsigned int, int, int, int *, int);");
	set_frame_size(0X80521DA0, 0X3D8, 8, 0);
	define_local_var(0X80521DA0, 0X80524940, "[bp-0X16C]", "result");
	add_func    (0X80524A20,0X80524D0A);
	set_func_flags(0X80524A20,0x1410);
	SetType(0X80524A20, "int __fastcall sub_80524A20(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80524A20, 0X58, 8, 0);
	add_func    (0X80524D0A,0X80525088);
	set_func_flags(0X80524D0A,0x1410);
	SetType(0X80524D0A, "int __fastcall sub_80524D0A(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80524D0A, 0X70, 8, 0);
	add_func    (0X80525088,0X8052526C);
	set_func_flags(0X80525088,0x1410);
	SetType(0X80525088, "int __fastcall celt_decoder_ctl(char *, int, __int64);");
	set_frame_size(0X80525088, 0X20, 16, 0);
	add_func    (0X8052526C,0X805254D8);
	set_func_flags(0X8052526C,0x1410);
	SetType(0X8052526C, "int __fastcall sub_8052526C(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8052526C, 0XB8, 8, 0);
	add_func    (0X805254D8,0X8052593C);
	set_func_flags(0X805254D8,0x1410);
	SetType(0X805254D8, "int __fastcall sub_805254D8(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805254D8, 0X68, 8, 0);
	add_func    (0X8052593C,0X80525AE2);
	set_func_flags(0X8052593C,0x1410);
	set_frame_size(0X8052593C, 0X4C, 8, 0);
	add_func    (0X80525AE2,0X80525F74);
	set_func_flags(0X80525AE2,0x1410);
	SetType(0X80525AE2, "int __fastcall sub_80525AE2(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80525AE2, 0X68, 8, 0);
	add_func    (0X80525F74,0X8052637A);
	set_func_flags(0X80525F74,0x1410);
	SetType(0X80525F74, "int __fastcall sub_80525F74(int16x4_t *, signed int *, int, int, __int64);");
	set_frame_size(0X80525F74, 0X38, 8, 0);
	add_func    (0X8052637C,0X805263B6);
	set_func_flags(0X8052637C,0x1400);
	SetType(0X8052637C, "int __fastcall sub_8052637C(int);");
	add_func    (0X805263C0,0X805264A4);
	set_func_flags(0X805263C0,0x1410);
	SetType(0X805263C0, "int __fastcall sub_805263C0(int result, unsigned __int8 *, unsigned int);");
	set_frame_size(0X805263C0, 0X10, 8, 0);
	add_func    (0X805264C0,0X80526524);
	set_func_flags(0X805264C0,0x1410);
	SetType(0X805264C0, "unsigned int __fastcall sub_805264C0(_DWORD *, unsigned int);");
	set_frame_size(0X805264C0, 0X8, 8, 0);
	add_func    (0X80526524,0X8052654E);
	set_func_flags(0X80526524,0x1410);
	SetType(0X80526524, "unsigned int __fastcall sub_80526524(_DWORD *, char);");
	set_frame_size(0X80526524, 0X8, 8, 0);
	add_func    (0X8052654E,0X805265D8);
	set_func_flags(0X8052654E,0x1410);
	SetType(0X8052654E, "int *__fastcall sub_8052654E(int *result, int, int, int);");
	set_frame_size(0X8052654E, 0X10, 8, 0);
	add_func    (0X805265D8,0X80526664);
	set_func_flags(0X805265D8,0x1410);
	SetType(0X805265D8, "BOOL __fastcall sub_805265D8(int *, char);");
	set_frame_size(0X805265D8, 0X18, 8, 0);
	add_func    (0X80526664,0X805266EE);
	set_func_flags(0X80526664,0x1410);
	SetType(0X80526664, "int __fastcall sub_80526664(int *, int, char);");
	set_frame_size(0X80526664, 0X18, 8, 0);
	add_func    (0X805266EE,0X8052694E);
	set_func_flags(0X805266EE,0x1410);
	SetType(0X805266EE, "unsigned int __fastcall sub_805266EE(int *, unsigned int);");
	set_frame_size(0X805266EE, 0X28, 8, 0);
	add_func    (0X8052694E,0X805269A8);
	set_func_flags(0X8052694E,0x1410);
	SetType(0X8052694E, "int __fastcall sub_8052694E(int *, unsigned int);");
	set_frame_size(0X8052694E, 0X8, 8, 0);
	add_func    (0X805269A8,0X805269E0);
	set_func_flags(0X805269A8,0x1400);
	SetType(0X805269A8, "int __fastcall sub_805269A8(unsigned int);");
	add_func    (0X805269E0,0X80526B24);
	set_func_flags(0X805269E0,0x1410);
	SetType(0X805269E0, "int __fastcall sub_805269E0(int, signed int);");
	set_frame_size(0X805269E0, 0X18, 8, 0);
	add_func    (0X80526B24,0X80526BB0);
	set_func_flags(0X80526B24,0x1400);
	SetType(0X80526B24, "int __fastcall sub_80526B24(signed int);");
	add_func    (0X80526BB0,0X80526C22);
	set_func_flags(0X80526BB0,0x1400);
	SetType(0X80526BB0, "int __fastcall sub_80526BB0(__int16);");
	add_func    (0X80526C22,0X80526CD4);
	set_func_flags(0X80526C22,0x1400);
	SetType(0X80526C22, "int __fastcall sub_80526C22(signed int);");
	add_func    (0X80526CD4,0X80526DEA);
	set_func_flags(0X80526CD4,0x1400);
	SetType(0X80526CD4, "int __fastcall sub_80526CD4(int);");
	add_func    (0X80526DEC,0X805271EE);
	set_func_flags(0X80526DEC,0x1410);
	SetType(0X80526DEC, "int *__fastcall sub_80526DEC(int *, int, _DWORD *, int, int, int, int);");
	set_frame_size(0X80526DEC, 0X70, 8, 0);
	add_func    (0X805271EE,0X805274A8);
	set_func_flags(0X805271EE,0x1410);
	SetType(0X805271EE, "int __fastcall sub_805271EE(int *, int *, int, int, int, int, int);");
	set_frame_size(0X805271EE, 0X60, 8, 0);
	add_func    (0X805274A8,0X805274F0);
	set_func_flags(0X805274A8,0x1400);
	SetType(0X805274A8, "OpusCustomMode *__fastcall opus_custom_mode_create(int sampleRate, int frameSize, _DWORD *error);");
	add_func    (0X805274F0,0X8052791A);
	set_func_flags(0X805274F0,0x1410);
	SetType(0X805274F0, "int __fastcall sub_805274F0(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805274F0, 0X48, 8, 0);
	add_func    (0X8052791A,0X80527C4E);
	set_func_flags(0X8052791A,0x1410);
	SetType(0X8052791A, "int __fastcall sub_8052791A(_DWORD);");
	set_frame_size(0X8052791A, 0X60, 8, 0);
	add_func    (0X80527C4E,0X80528214);
	set_func_flags(0X80527C4E,0x1410);
	SetType(0X80527C4E, "int __fastcall sub_80527C4E(const __int16 *, const __int16 *, int, int, int *);");
	set_frame_size(0X80527C4E, 0X88, 8, 0);
	add_func    (0X80528220,0X805284A8);
	set_func_flags(0X80528220,0x1410);
	SetType(0X80528220, "int __fastcall sub_80528220(int, int16x4_t *, int, int, int *, unsigned int, unsigned int);");
	set_frame_size(0X80528220, 0X38, 8, 0);
	add_func    (0X805284C0,0X80528ABC);
	set_func_flags(0X805284C0,0x1410);
	SetType(0X805284C0, "int __fastcall sub_805284C0(int, int, int, int, int *, int, int);");
	set_frame_size(0X805284C0, 0X80, 8, 0);
	add_func    (0X80528ABC,0X80528B74);
	set_func_flags(0X80528ABC,0x1410);
	SetType(0X80528ABC, "int __fastcall sub_80528ABC(int, signed int, signed int);");
	set_frame_size(0X80528ABC, 0X10, 8, 0);
	add_func    (0X80528B74,0X80528FA0);
	set_func_flags(0X80528B74,0x1410);
	SetType(0X80528B74, "int __fastcall sub_80528B74(int r0_0, int r1_0, int, int, int, char *, unsigned int, int, __int64 *, int, int, int, int, int *, int, int, int);");
	set_frame_size(0X80528B74, 0X100, 8, 0);
	define_local_var(0X80528B74, 0X80528FA0, "[bp-0XCC]", "a1");
	define_local_var(0X80528B74, 0X80528FA0, "[bp+0XC]", "a2");
	add_func    (0X80528FA0,0X8052922A);
	set_func_flags(0X80528FA0,0x1410);
	SetType(0X80528FA0, "int __fastcall sub_80528FA0(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);");
	set_frame_size(0X80528FA0, 0X60, 8, 0);
	add_func    (0X80529450,0X805295BC);
	set_func_flags(0X80529450,0x1410);
	SetType(0X80529450, "int __fastcall sub_80529450(int, int, int, int, int, _DWORD *, int, int);");
	set_frame_size(0X80529450, 0X48, 8, 0);
	add_func    (0X805295BC,0X80529630);
	set_func_flags(0X805295BC,0x1410);
	SetType(0X805295BC, "int __fastcall sub_805295BC(int result, int, int, int, int, int, int);");
	set_frame_size(0X805295BC, 0X20, 8, 0);
	add_func    (0X80529630,0X80529730);
	set_func_flags(0X80529630,0x1410);
	SetType(0X80529630, "int __fastcall sub_80529630(int result, int, int, int, int, int, int, int, int);");
	set_frame_size(0X80529630, 0X28, 8, 0);
	add_func    (0X80529730,0X80529AC2);
	set_func_flags(0X80529730,0x1410);
	SetType(0X80529730, "int __fastcall sub_80529730(int result, int, int, int32x4_t *, int16x4_t *, int);");
	set_frame_size(0X80529730, 0XA0, 8, 0);
	add_func    (0X80529B30,0X8052ACA2);
	set_func_flags(0X80529B30,0x1410);
	SetType(0X80529B30, "signed int __fastcall sub_80529B30(_DWORD *, signed int, signed int, int, int, int, signed int *, int *, int, unsigned int *, int, int, int, int, unsigned int, int, int, signed int, signed int);");
	set_frame_size(0X80529B30, 0XD0, 8, 0);
	add_func    (0X8052ACA4,0X8052B0C0);
	set_func_flags(0X8052ACA4,0x1410);
	set_frame_size(0X8052ACA4, 0X60, 8, 0);
	add_func    (0X8052B0C0,0X8052B880);
	set_func_flags(0X8052B0C0,0x1410);
	set_frame_size(0X8052B0C0, 0XB0, 8, 0);
	add_func    (0X8052B880,0X8052BA7E);
	set_func_flags(0X8052B880,0x1410);
	set_frame_size(0X8052B880, 0X38, 8, 0);
	add_func    (0X8052BA7E,0X8052BBA2);
	set_func_flags(0X8052BA7E,0x1410);
	SetType(0X8052BA7E, "int __fastcall sub_8052BA7E(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8052BA7E, 0X10, 8, 0);
	add_func    (0X8052BBB0,0X8052BE4E);
	set_func_flags(0X8052BBB0,0x1410);
	set_frame_size(0X8052BBB0, 0X18, 8, 0);
	add_func    (0X8052BE60,0X8052BE6A);
	set_func_flags(0X8052BE60,0x1400);
	SetType(0X8052BE60, "int __fastcall silk_Get_Decoder_Size(_DWORD *);");
	add_func    (0X8052BE6A,0X8052BEA2);
	set_func_flags(0X8052BE6A,0x1410);
	SetType(0X8052BE6A, "int __fastcall silk_InitDecoder(int);");
	set_frame_size(0X8052BE6A, 0X10, 8, 0);
	add_func    (0X8052BEB0,0X8052C8AA);
	set_func_flags(0X8052BEB0,0x1410);
	SetType(0X8052BEB0, "int __fastcall sub_8052BEB0(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8052BEB0, 0X318, 8, 0);
	define_local_var(0X8052BEB0, 0X8052C8AA, "[bp+0XC]", "result");
	add_func    (0X8052C8C0,0X8052CA1C);
	set_func_flags(0X8052C8C0,0x1410);
	set_frame_size(0X8052C8C0, 0X30, 8, 0);
	add_func    (0X8052CA1C,0X8052CCDE);
	set_func_flags(0X8052CA1C,0x1410);
	set_frame_size(0X8052CA1C, 0X50, 8, 0);
	add_func    (0X8052CCE0,0X8052CF0C);
	set_func_flags(0X8052CCE0,0x1410);
	set_frame_size(0X8052CCE0, 0X60, 8, 0);
	add_func    (0X8052CF0C,0X8052CFCA);
	set_func_flags(0X8052CF0C,0x1410);
	set_frame_size(0X8052CF0C, 0X10, 8, 0);
	add_func    (0X8052CFCC,0X8052D308);
	set_func_flags(0X8052CFCC,0x1410);
	set_frame_size(0X8052CFCC, 0XE0, 8, 0);
	add_func    (0X8052D308,0X8052D458);
	set_func_flags(0X8052D308,0x1410);
	set_frame_size(0X8052D308, 0X20, 8, 0);
	add_func    (0X8052D63C,0X8052D668);
	set_func_flags(0X8052D63C,0x1410);
	SetType(0X8052D63C, "int __fastcall sub_8052D63C(_DWORD);");
	set_frame_size(0X8052D63C, 0X8, 8, 0);
	add_func    (0X8052D710,0X8052D976);
	set_func_flags(0X8052D710,0x1410);
	set_frame_size(0X8052D710, 0X10, 8, 0);
	add_func    (0X8052D976,0X8052DA62);
	set_func_flags(0X8052D976,0x1410);
	set_frame_size(0X8052D976, 0X18, 8, 0);
	add_func    (0X8052DA64,0X8052DC04);
	set_func_flags(0X8052DA64,0x1410);
	set_frame_size(0X8052DA64, 0X50, 8, 0);
	define_local_var(0X8052DA64, 0X8052DC04, "[bp-0X50]", "result");
	add_func    (0X8052DC04,0X8052E26E);
	set_func_flags(0X8052DC04,0x1410);
	set_frame_size(0X8052DC04, 0X60, 8, 0);
	define_local_var(0X8052DC04, 0X8052E26E, "[bp-0X5C]", "result");
	add_func    (0X8052E270,0X8052E3E0);
	set_func_flags(0X8052E270,0x1400);
	set_frame_size(0X8052E270, 0X40, 0, 0);
	add_func    (0X8052E3E0,0X8052E3EA);
	set_func_flags(0X8052E3E0,0x1400);
	set_frame_size(0X8052E3E0, 0X8, 0, 0);
	add_func    (0X8052E62E,0X8052E93C);
	set_func_flags(0X8052E62E,0x1410);
	set_frame_size(0X8052E62E, 0X20, 8, 0);
	add_func    (0X8052E940,0X8052EF5C);
	set_func_flags(0X8052E940,0x1410);
	set_frame_size(0X8052E940, 0X108, 8, 0);
	add_func    (0X8052EF90,0X8052F07E);
	set_func_flags(0X8052EF90,0x1410);
	set_frame_size(0X8052EF90, 0X20, 8, 0);
	add_func    (0X8052F07E,0X8052F096);
	set_func_flags(0X8052F07E,0x1410);
	set_frame_size(0X8052F07E, 0X8, 8, 0);
	add_func    (0X8052F400,0X8052F490);
	set_func_flags(0X8052F400,0x1400);
	SetType(0X8052F400, "int __fastcall opus_packet_get_samples_per_frame(unsigned __int8 *, int);");
	add_func    (0X8052F490,0X8052F83C);
	set_func_flags(0X8052F490,0x1410);
	SetType(0X8052F490, "int __fastcall opus_packet_parse_impl(unsigned __int8 *, int, int, _BYTE *, _DWORD *, int16x8_t *, _DWORD *, _DWORD *);");
	set_frame_size(0X8052F490, 0X30, 8, 0);
	add_func    (0X8052F860,0X8052F896);
	set_func_flags(0X8052F860,0x1400);
	SetType(0X8052F860, "int __fastcall validate_layout(ChannelLayout *this);");
	add_func    (0X8052F896,0X8052F8C4);
	set_func_flags(0X8052F896,0x1400);
	SetType(0X8052F896, "int __fastcall sub_8052F896(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8052F896, 0X8, 0, 0);
	add_func    (0X8052F8C4,0X8052F8F4);
	set_func_flags(0X8052F8C4,0x1400);
	SetType(0X8052F8C4, "int __fastcall sub_8052F8C4(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8052F8C4, 0X8, 0, 0);
	add_func    (0X8052F8F4,0X8052F926);
	set_func_flags(0X8052F8F4,0x1400);
	SetType(0X8052F8F4, "int __fastcall sub_8052F8F4(int *, int, int);");
	set_frame_size(0X8052F8F4, 0X8, 0, 0);
	add_func    (0X8052F982,0X8052F998);
	set_func_flags(0X8052F982,0x1400);
	SetType(0X8052F982, "int __fastcall sub_8052F982(_DWORD);");
	add_func    (0X8052FDB8,0X8053008C);
	set_func_flags(0X8052FDB8,0x1410);
	SetType(0X8052FDB8, "char *__fastcall sub_8052FDB8(int, int, uint32x4_t *, int, int, int, int, int, int);");
	set_frame_size(0X8052FDB8, 0X60, 8, 0);
	add_func    (0X8053008C,0X8053040E);
	set_func_flags(0X8053008C,0x1410);
	SetType(0X8053008C, "int __fastcall sub_8053008C(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8053008C, 0X50, 8, 0);
	add_func    (0X805307C6,0X805315D2);
	set_func_flags(0X805307C6,0x1410);
	SetType(0X805307C6, "int __fastcall sub_805307C6(int, _DWORD *, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int *, int, int, int *, int);");
	set_frame_size(0X805307C6, 0X168, 8, 0);
	define_local_var(0X805307C6, 0X805315D2, "[bp-0XA4]", "result");
}

static Functions_1(void) {

	add_func    (0X805315D2,0X8053230C);
	set_func_flags(0X805315D2,0x1410);
	SetType(0X805315D2, "int __fastcall sub_805315D2(int *, int16x4_t *, unsigned int, int, int, char *, int, int16x4_t *, int, int result, int);");
	set_frame_size(0X805315D2, 0X80, 8, 0);
	define_local_var(0X805315D2, 0X8053230C, "[bp+0X1C]", "result");
	add_func    (0X8053230C,0X80532826);
	set_func_flags(0X8053230C,0x1410);
	SetType(0X8053230C, "int __fastcall sub_8053230C(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8053230C, 0X78, 8, 0);
	add_func    (0X80532828,0X80533132);
	set_func_flags(0X80532828,0x1410);
	SetType(0X80532828, "int __fastcall sub_80532828(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80532828, 0X48, 8, 0);
	add_func    (0X80533140,0X8053320C);
	set_func_flags(0X80533140,0x1410);
	set_frame_size(0X80533140, 0X28, 8, 0);
	add_func    (0X8053320C,0X80533388);
	set_func_flags(0X8053320C,0x1410);
	set_frame_size(0X8053320C, 0X18, 8, 0);
	add_func    (0X805333E0,0X80533520);
	set_func_flags(0X805333E0,0x1410);
	set_frame_size(0X805333E0, 0X18, 8, 0);
	add_func    (0X80533520,0X80533612);
	set_func_flags(0X80533520,0x1410);
	set_frame_size(0X80533520, 0X10, 8, 0);
	add_func    (0X80533612,0X805336EA);
	set_func_flags(0X80533612,0x1410);
	SetType(0X80533612, "int __fastcall sub_80533612(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80533612, 0X10, 8, 0);
	add_func    (0X805336EA,0X805337E4);
	set_func_flags(0X805336EA,0x1410);
	SetType(0X805336EA, "int __fastcall sub_805336EA(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805336EA, 0X10, 8, 0);
	add_func    (0X805337E4,0X80533884);
	set_func_flags(0X805337E4,0x1410);
	SetType(0X805337E4, "int __fastcall sub_805337E4(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805337E4, 0X10, 8, 0);
	add_func    (0X80533884,0X805338E4);
	set_func_flags(0X80533884,0x1410);
	SetType(0X80533884, "int __fastcall sub_80533884(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80533884, 0X8, 8, 0);
	add_func    (0X80533B5C,0X805346C8);
	set_func_flags(0X80533B5C,0x1410);
	SetType(0X80533B5C, "int __fastcall sub_80533B5C(_DWORD, _DWORD);");
	set_frame_size(0X80533B5C, 0X110, 8, 0);
	add_func    (0X8053479C,0X8053484A);
	set_func_flags(0X8053479C,0x1410);
	SetType(0X8053479C, "int __fastcall sub_8053479C(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8053479C, 0X10, 8, 0);
	add_func    (0X8053484A,0X805348F6);
	set_func_flags(0X8053484A,0x1410);
	SetType(0X8053484A, "int __fastcall sub_8053484A(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8053484A, 0X18, 8, 0);
	add_func    (0X80534900,0X805349AA);
	set_func_flags(0X80534900,0x1410);
	set_frame_size(0X80534900, 0X10, 8, 0);
	add_func    (0X805349D0,0X805350A0);
	set_func_flags(0X805349D0,0x1410);
	set_frame_size(0X805349D0, 0XB0, 8, 0);
	add_func    (0X805350D0,0X80535AE8);
	set_func_flags(0X805350D0,0x1410);
	set_frame_size(0X805350D0, 0X120, 8, 0);
	add_func    (0X80535B20,0X80535C82);
	set_func_flags(0X80535B20,0x1410);
	set_frame_size(0X80535B20, 0X90, 8, 0);
	add_func    (0X80535C84,0X805360A4);
	set_func_flags(0X80535C84,0x1410);
	set_frame_size(0X80535C84, 0X30, 8, 0);
	add_func    (0X805360A4,0X80536126);
	set_func_flags(0X805360A4,0x1410);
	set_frame_size(0X805360A4, 0X10, 8, 0);
	add_func    (0X80536128,0X80536148);
	set_func_flags(0X80536128,0x1400);
	add_func    (0X80536148,0X80536E1A);
	set_func_flags(0X80536148,0x1410);
	set_frame_size(0X80536148, 0XD0, 8, 0);
	define_local_var(0X80536148, 0X80536E1A, "[bp-0XC8]", "result");
	add_func    (0X80536E1A,0X80536F74);
	set_func_flags(0X80536E1A,0x1410);
	set_frame_size(0X80536E1A, 0X20, 8, 0);
	add_func    (0X80536F74,0X80536FCC);
	set_func_flags(0X80536F74,0x1410);
	set_frame_size(0X80536F74, 0X10, 8, 0);
	add_func    (0X80536FCC,0X8053704E);
	set_func_flags(0X80536FCC,0x1410);
	set_frame_size(0X80536FCC, 0X18, 8, 0);
	add_func    (0X8053722A,0X80537462);
	set_func_flags(0X8053722A,0x1410);
	set_frame_size(0X8053722A, 0X20, 8, 0);
	add_func    (0X80537464,0X80537E6C);
	set_func_flags(0X80537464,0x1410);
	SetType(0X80537464, "int *__fastcall sub_80537464(int, int, char *, int, int);");
	set_frame_size(0X80537464, 0XB0, 8, 0);
	define_local_var(0X80537464, 0X80537E6C, "[bp-0X44]", "result");
	add_func    (0X80537E6C,0X80537EC4);
	set_func_flags(0X80537E6C,0x1410);
	SetType(0X80537E6C, "_DWORD *__fastcall sub_80537E6C(_DWORD *result, _DWORD *, __int16 *, __int16 *, int);");
	set_frame_size(0X80537E6C, 0X10, 8, 0);
	add_func    (0X80538180,0X805381CA);
	set_func_flags(0X80538180,0x1410);
	SetType(0X80538180, "int __fastcall sub_80538180(int result, int);");
	set_frame_size(0X80538180, 0X8, 8, 0);
	add_func    (0X805381CC,0X8053826A);
	set_func_flags(0X805381CC,0x1410);
	SetType(0X805381CC, "unsigned int *__fastcall sub_805381CC(unsigned int *result, int *, int, int);");
	set_frame_size(0X805381CC, 0X10, 8, 0);
	add_func    (0X8053826C,0X80538398);
	set_func_flags(0X8053826C,0x1410);
	SetType(0X8053826C, "int __fastcall sub_8053826C(_QWORD *, int, int16x8_t *, int, unsigned int);");
	set_frame_size(0X8053826C, 0X68, 8, 0);
	add_func    (0X80538398,0X80538458);
	set_func_flags(0X80538398,0x1410);
	SetType(0X80538398, "int __fastcall sub_80538398(unsigned __int16 *, int);");
	set_frame_size(0X80538398, 0XA0, 8, 0);
	add_func    (0X80538460,0X80538BC8);
	set_func_flags(0X80538460,0x1410);
	SetType(0X80538460, "int __fastcall sub_80538460(int, int);");
	set_frame_size(0X80538460, 0XC0, 8, 0);
	add_func    (0X80538C40,0X80538D42);
	set_func_flags(0X80538C40,0x1410);
	SetType(0X80538C40, "unsigned int __fastcall sub_80538C40(_WORD *, int, int);");
	set_frame_size(0X80538C40, 0X28, 8, 0);
	add_func    (0X80538D48,0X80538D50);
	set_func_flags(0X80538D48,0x1480);
	SetType(0X80538D48, "int __fastcall sub_80538D48(_DWORD, _DWORD);");
	add_func    (0X80538D50,0X80538D54);
	set_func_flags(0X80538D50,0x14c0);
	SetType(0X80538D50, "int __cdecl j_print_error(int a1, char *a2, int a3);");
	add_func    (0X80538D58,0X80538D60);
	set_func_flags(0X80538D58,0x1480);
	SetType(0X80538D58, "unsigned int __fastcall sub_80538D58(unsigned int result);");
	add_func    (0X80538D60,0X80538D68);
	set_func_flags(0X80538D60,0x1480);
	SetType(0X80538D60, "void __fastcall _arm_invalidate_tlb_byaddr_from_thumb(unsigned int);");
	add_func    (0X80538D68,0X80538D6C);
	set_func_flags(0X80538D68,0x14c0);
	SetType(0X80538D68, "int __fastcall j_thread_preempt(int);");
	add_func    (0X80538D70,0X80538D74);
	set_func_flags(0X80538D70,0x1480);
	SetType(0X80538D70, "int __fastcall sub_80538D70(unsigned int *);");
	add_func    (0X80538D78,0X80538D80);
	set_func_flags(0X80538D78,0x1480);
	SetType(0X80538D78, "char *__fastcall _memset_from_thumb(int *result, int value, int size);");
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
	Functions_1();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X80300000,"T",0,3);
	split_sreg_range(0X80307000,"T",0,3);
	split_sreg_range(0X80500000,"T",0,3);
	split_sreg_range(0X80500020,"T",0,3);
	split_sreg_range(0X80500064,"T",0,3);
	split_sreg_range(0X8050008C,"T",0,3);
	split_sreg_range(0X80500108,"T",0,3);
	split_sreg_range(0X80500118,"T",0,3);
	split_sreg_range(0X80500124,"T",0,3);
	split_sreg_range(0X80500130,"T",0,3);
	split_sreg_range(0X80500134,"T",0,3);
	split_sreg_range(0X80500158,"T",0X1,2);
	split_sreg_range(0X80500192,"T",0X1,2);
	split_sreg_range(0X80500390,"T",0X1,3);
	split_sreg_range(0X8050060C,"T",0X1,3);
	split_sreg_range(0X80500610,"T",0X1,3);
	split_sreg_range(0X80500624,"T",0X1,3);
	split_sreg_range(0X8050063C,"T",0X1,3);
	split_sreg_range(0X8050064E,"T",0X1,3);
	split_sreg_range(0X8050066E,"T",0X1,3);
	split_sreg_range(0X805006DE,"T",0X1,3);
	split_sreg_range(0X805006F4,"T",0X1,3);
	split_sreg_range(0X80500726,"T",0X1,3);
	split_sreg_range(0X80500760,"T",0X1,3);
	split_sreg_range(0X80500830,"T",0X1,2);
	split_sreg_range(0X8050085A,"T",0X1,3);
	split_sreg_range(0X805008AC,"T",0X1,3);
	split_sreg_range(0X805008EA,"T",0X1,3);
	split_sreg_range(0X805008FA,"T",0X1,3);
	split_sreg_range(0X8050091A,"T",0X1,3);
	split_sreg_range(0X8050092A,"T",0X1,3);
	split_sreg_range(0X8050094A,"T",0X1,3);
	split_sreg_range(0X8050095A,"T",0X1,3);
	split_sreg_range(0X80500988,"T",0X1,3);
	split_sreg_range(0X805009A0,"T",0X1,3);
	split_sreg_range(0X805009C2,"T",0X1,3);
	split_sreg_range(0X805009DA,"T",0X1,3);
	split_sreg_range(0X80500A46,"T",0X1,3);
	split_sreg_range(0X80500A64,"T",0X1,3);
	split_sreg_range(0X80500A78,"T",0X1,3);
	split_sreg_range(0X80500A82,"T",0X1,3);
	split_sreg_range(0X80500A9E,"T",0X1,3);
	split_sreg_range(0X80500AA4,"T",0X1,3);
	split_sreg_range(0X80500ABC,"T",0X1,3);
	split_sreg_range(0X80500B02,"T",0X1,3);
	split_sreg_range(0X80500B24,"T",0X1,3);
	split_sreg_range(0X80500B4E,"T",0X1,3);
	split_sreg_range(0X80500B56,"T",0X1,3);
	split_sreg_range(0X80500B5C,"T",0X1,3);
	split_sreg_range(0X80500B6E,"T",0X1,3);
	split_sreg_range(0X80500B76,"T",0X1,3);
	split_sreg_range(0X80500B88,"T",0X1,3);
	split_sreg_range(0X80500B90,"T",0X1,3);
	split_sreg_range(0X80500BB6,"T",0X1,3);
	split_sreg_range(0X80500BEA,"T",0X1,3);
	split_sreg_range(0X80500C1E,"T",0X1,3);
	split_sreg_range(0X80500C28,"T",0X1,3);
	split_sreg_range(0X80500D30,"T",0X1,3);
	split_sreg_range(0X80500D5C,"T",0X1,3);
	split_sreg_range(0X80500D72,"T",0X1,3);
	split_sreg_range(0X80500DA2,"T",0X1,3);
	split_sreg_range(0X80500DBE,"T",0X1,3);
	split_sreg_range(0X80500DC2,"T",0X1,3);
	split_sreg_range(0X80500DF8,"T",0X1,3);
	split_sreg_range(0X80500E1C,"T",0X1,3);
	split_sreg_range(0X80500FB4,"T",0X1,3);
	split_sreg_range(0X80500FE4,"T",0X1,3);
	split_sreg_range(0X805010C4,"T",0X1,3);
	split_sreg_range(0X80501126,"T",0X1,3);
	split_sreg_range(0X80501200,"T",0X1,3);
	split_sreg_range(0X80501232,"T",0X1,3);
	split_sreg_range(0X80501312,"T",0X1,3);
	split_sreg_range(0X80501368,"T",0X1,3);
	split_sreg_range(0X8050139A,"T",0X1,3);
	split_sreg_range(0X8050147A,"T",0X1,3);
	split_sreg_range(0X805014E6,"T",0X1,3);
	split_sreg_range(0X805015EC,"T",0X1,3);
	split_sreg_range(0X8050164A,"T",0X1,3);
	split_sreg_range(0X8050174E,"T",0X1,3);
	split_sreg_range(0X80501A4C,"T",0X1,3);
	split_sreg_range(0X80501A54,"T",0X1,3);
	split_sreg_range(0X80501AA6,"T",0X1,3);
	split_sreg_range(0X80501AEE,"T",0X1,3);
	split_sreg_range(0X80501B02,"T",0X1,3);
	split_sreg_range(0X80501B08,"T",0X1,3);
	split_sreg_range(0X80501B4A,"T",0X1,3);
	split_sreg_range(0X80501B56,"T",0X1,3);
	split_sreg_range(0X80501B68,"T",0X1,3);
	split_sreg_range(0X80501B82,"T",0X1,3);
	split_sreg_range(0X80501BA6,"T",0X1,3);
	split_sreg_range(0X80501BC2,"T",0X1,3);
	split_sreg_range(0X80501BC4,"T",0X1,3);
	split_sreg_range(0X80501BC6,"T",0X1,3);
	split_sreg_range(0X80501BE0,"T",0X1,3);
	split_sreg_range(0X80501BF4,"T",0X1,3);
	split_sreg_range(0X80501BF6,"T",0X1,3);
	split_sreg_range(0X80501BFA,"T",0X1,3);
	split_sreg_range(0X80501C38,"T",0X1,3);
	split_sreg_range(0X80501CC2,"T",0X1,3);
	split_sreg_range(0X80501CC6,"T",0X1,3);
	split_sreg_range(0X80501CEE,"T",0X1,3);
	split_sreg_range(0X80501D16,"T",0X1,3);
	split_sreg_range(0X80501D3E,"T",0X1,3);
	split_sreg_range(0X80501D66,"T",0X1,3);
	split_sreg_range(0X80501D8E,"T",0X1,3);
	split_sreg_range(0X80501D9C,"T",0X1,3);
	split_sreg_range(0X80501DAC,"T",0X1,3);
	split_sreg_range(0X80501DBC,"T",0X1,3);
	split_sreg_range(0X80501DD2,"T",0X1,3);
	split_sreg_range(0X80501DE8,"T",0X1,3);
	split_sreg_range(0X80501E58,"T",0X1,3);
	split_sreg_range(0X805020B4,"T",0X1,3);
	split_sreg_range(0X8050215E,"T",0X1,3);
	split_sreg_range(0X80502168,"T",0X1,3);
	split_sreg_range(0X80502176,"T",0X1,3);
	split_sreg_range(0X805021A6,"T",0X1,3);
	split_sreg_range(0X805021E2,"T",0X1,3);
	split_sreg_range(0X80502244,"T",0X1,3);
	split_sreg_range(0X80502272,"T",0X1,3);
	split_sreg_range(0X8050228C,"T",0X1,3);
	split_sreg_range(0X8050229E,"T",0X1,3);
	split_sreg_range(0X805022C2,"T",0X1,3);
	split_sreg_range(0X805022D8,"T",0X1,3);
	split_sreg_range(0X80502336,"T",0X1,3);
	split_sreg_range(0X80502364,"T",0X1,3);
	split_sreg_range(0X8050237E,"T",0X1,3);
	split_sreg_range(0X80502390,"T",0X1,3);
	split_sreg_range(0X805023BA,"T",0X1,3);
	split_sreg_range(0X8050241C,"T",0X1,3);
	split_sreg_range(0X8050242A,"T",0X1,3);
	split_sreg_range(0X80502454,"T",0X1,3);
	split_sreg_range(0X8050245E,"T",0X1,3);
	split_sreg_range(0X80502466,"T",0X1,3);
	split_sreg_range(0X8050248A,"T",0X1,3);
	split_sreg_range(0X805024BC,"T",0X1,3);
	split_sreg_range(0X805024DA,"T",0X1,3);
	split_sreg_range(0X805024DC,"T",0X1,3);
	split_sreg_range(0X805024E0,"T",0X1,3);
	split_sreg_range(0X805024EC,"T",0X1,3);
	split_sreg_range(0X8050250E,"T",0X1,3);
	split_sreg_range(0X80502536,"T",0X1,3);
	split_sreg_range(0X80502538,"T",0X1,3);
	split_sreg_range(0X80502546,"T",0X1,3);
	split_sreg_range(0X80502554,"T",0X1,3);
	split_sreg_range(0X8050255C,"T",0X1,3);
	split_sreg_range(0X8050255E,"T",0X1,3);
	split_sreg_range(0X80502560,"T",0X1,3);
	split_sreg_range(0X80502566,"T",0X1,3);
	split_sreg_range(0X80502570,"T",0X1,3);
	split_sreg_range(0X80502598,"T",0X1,3);
	split_sreg_range(0X8050259A,"T",0X1,3);
	split_sreg_range(0X805025A8,"T",0X1,3);
	split_sreg_range(0X805025B6,"T",0X1,3);
	split_sreg_range(0X805025BE,"T",0X1,3);
	split_sreg_range(0X805025E8,"T",0X1,3);
	split_sreg_range(0X805025F4,"T",0X1,3);
	split_sreg_range(0X805025F8,"T",0X1,3);
	split_sreg_range(0X805025FC,"T",0X1,3);
	split_sreg_range(0X805025FE,"T",0X1,3);
	split_sreg_range(0X8050261E,"T",0X1,3);
	split_sreg_range(0X8050264C,"T",0X1,3);
	split_sreg_range(0X805026A0,"T",0X1,3);
	split_sreg_range(0X805026AE,"T",0X1,3);
	split_sreg_range(0X805026D2,"T",0X1,3);
	split_sreg_range(0X805026D6,"T",0X1,3);
	split_sreg_range(0X80502700,"T",0X1,3);
	split_sreg_range(0X80502720,"T",0X1,3);
	split_sreg_range(0X80502728,"T",0X1,3);
	split_sreg_range(0X80502730,"T",0X1,3);
	split_sreg_range(0X80502758,"T",0X1,3);
	split_sreg_range(0X8050275C,"T",0X1,3);
	split_sreg_range(0X80502772,"T",0X1,3);
	split_sreg_range(0X805027C0,"T",0X1,3);
	split_sreg_range(0X805027E2,"T",0X1,3);
	split_sreg_range(0X80502836,"T",0X1,3);
	split_sreg_range(0X80502844,"T",0X1,3);
	split_sreg_range(0X8050285C,"T",0X1,3);
	split_sreg_range(0X8050288C,"T",0X1,3);
	split_sreg_range(0X8050289C,"T",0X1,3);
	split_sreg_range(0X805028A4,"T",0X1,3);
	split_sreg_range(0X805028AC,"T",0X1,3);
	split_sreg_range(0X805028C2,"T",0X1,3);
	split_sreg_range(0X805028CE,"T",0X1,3);
	split_sreg_range(0X80502918,"T",0X1,3);
	split_sreg_range(0X80502954,"T",0X1,3);
	split_sreg_range(0X80502964,"T",0X1,3);
	split_sreg_range(0X80502970,"T",0X1,3);
	split_sreg_range(0X8050297A,"T",0X1,3);
	split_sreg_range(0X805029CE,"T",0X1,3);
	split_sreg_range(0X805029DE,"T",0X1,3);
	split_sreg_range(0X805029E4,"T",0X1,3);
	split_sreg_range(0X805029F6,"T",0X1,3);
	split_sreg_range(0X80502A58,"T",0X1,3);
	split_sreg_range(0X80502ADE,"T",0X1,3);
	split_sreg_range(0X80502B04,"T",0X1,3);
	split_sreg_range(0X80502B06,"T",0X1,3);
	split_sreg_range(0X80502B5C,"T",0X1,3);
	split_sreg_range(0X80502C28,"T",0X1,3);
	split_sreg_range(0X80502C7C,"T",0X1,3);
	split_sreg_range(0X80502CAE,"T",0X1,3);
	split_sreg_range(0X80502D22,"T",0X1,3);
	split_sreg_range(0X80502D44,"T",0X1,3);
	split_sreg_range(0X80502D50,"T",0X1,3);
	split_sreg_range(0X80502DB0,"T",0X1,3);
	split_sreg_range(0X80502DEC,"T",0X1,3);
	split_sreg_range(0X80502E1A,"T",0X1,3);
	split_sreg_range(0X80502E5C,"T",0X1,3);
	split_sreg_range(0X80502E66,"T",0X1,3);
	split_sreg_range(0X80502E86,"T",0X1,3);
	split_sreg_range(0X80502ED2,"T",0X1,3);
	split_sreg_range(0X80502EDA,"T",0X1,3);
	split_sreg_range(0X80502F18,"T",0X1,3);
	split_sreg_range(0X80502F1C,"T",0X1,3);
	split_sreg_range(0X80502F32,"T",0X1,3);
	split_sreg_range(0X80502F38,"T",0X1,3);
	split_sreg_range(0X80502F4A,"T",0X1,3);
	split_sreg_range(0X80502F6E,"T",0X1,3);
	split_sreg_range(0X80502F76,"T",0X1,3);
	split_sreg_range(0X80502F82,"T",0X1,3);
	split_sreg_range(0X80502F94,"T",0X1,3);
	split_sreg_range(0X80502FA8,"T",0X1,3);
	split_sreg_range(0X80502FAC,"T",0X1,3);
	split_sreg_range(0X80502FB6,"T",0X1,3);
	split_sreg_range(0X80502FB8,"T",0X1,3);
	split_sreg_range(0X80502FC0,"T",0X1,3);
	split_sreg_range(0X80502FC8,"T",0X1,3);
	split_sreg_range(0X80502FD8,"T",0X1,3);
	split_sreg_range(0X80503054,"T",0X1,3);
	split_sreg_range(0X8050305E,"T",0X1,3);
	split_sreg_range(0X80503072,"T",0X1,3);
	split_sreg_range(0X80503092,"T",0X1,3);
	split_sreg_range(0X80503096,"T",0X1,3);
	split_sreg_range(0X805030A8,"T",0X1,3);
	split_sreg_range(0X805030AE,"T",0X1,3);
	split_sreg_range(0X805030BC,"T",0X1,3);
	split_sreg_range(0X805030C0,"T",0X1,3);
	split_sreg_range(0X805030C8,"T",0X1,3);
	split_sreg_range(0X805030D0,"T",0X1,3);
	split_sreg_range(0X805030E8,"T",0X1,3);
	split_sreg_range(0X805030EC,"T",0X1,3);
	split_sreg_range(0X80503114,"T",0X1,3);
	split_sreg_range(0X80503130,"T",0X1,3);
	split_sreg_range(0X80503154,"T",0X1,3);
	split_sreg_range(0X80503158,"T",0X1,3);
	split_sreg_range(0X8050315C,"T",0X1,3);
	split_sreg_range(0X805031BC,"T",0X1,3);
	split_sreg_range(0X805033FA,"T",0X1,3);
	split_sreg_range(0X80503558,"T",0X1,3);
	split_sreg_range(0X8050357C,"T",0X1,3);
	split_sreg_range(0X805035AE,"T",0X1,3);
	split_sreg_range(0X805035C0,"T",0X1,3);
	split_sreg_range(0X805035C8,"T",0X1,3);
	split_sreg_range(0X805035F2,"T",0X1,3);
	split_sreg_range(0X80503610,"T",0X1,3);
	split_sreg_range(0X80503618,"T",0X1,3);
	split_sreg_range(0X80503652,"T",0X1,3);
	split_sreg_range(0X8050366E,"T",0X1,3);
	split_sreg_range(0X805036A0,"T",0X1,3);
	split_sreg_range(0X805036AC,"T",0X1,3);
	split_sreg_range(0X805036B2,"T",0X1,3);
	split_sreg_range(0X805036BA,"T",0X1,3);
	split_sreg_range(0X80503714,"T",0X1,3);
	split_sreg_range(0X80503750,"T",0X1,3);
	split_sreg_range(0X80503764,"T",0X1,3);
	split_sreg_range(0X80503802,"T",0X1,3);
	split_sreg_range(0X80503806,"T",0X1,3);
	split_sreg_range(0X805038AC,"T",0X1,3);
	split_sreg_range(0X805038D4,"T",0X1,3);
	split_sreg_range(0X805038FA,"T",0X1,3);
	split_sreg_range(0X8050392A,"T",0X1,3);
	split_sreg_range(0X8050393C,"T",0X1,3);
	split_sreg_range(0X80503968,"T",0X1,3);
	split_sreg_range(0X8050398E,"T",0X1,3);
	split_sreg_range(0X805039E0,"T",0X1,3);
	split_sreg_range(0X805039EA,"T",0X1,3);
	split_sreg_range(0X805039F0,"T",0X1,3);
	split_sreg_range(0X805039F2,"T",0X1,3);
	split_sreg_range(0X80503A3E,"T",0X1,3);
	split_sreg_range(0X80503A7A,"T",0X1,3);
	split_sreg_range(0X80503A8E,"T",0X1,3);
	split_sreg_range(0X80503BCE,"T",0X1,3);
	split_sreg_range(0X80503C94,"T",0X1,3);
	split_sreg_range(0X80503CB0,"T",0X1,3);
	split_sreg_range(0X80503CCE,"T",0X1,3);
	split_sreg_range(0X80503E04,"T",0X1,3);
	split_sreg_range(0X80503E20,"T",0X1,3);
	split_sreg_range(0X80503E3E,"T",0X1,3);
	split_sreg_range(0X80503F92,"T",0X1,3);
	split_sreg_range(0X8050408C,"T",0X1,3);
	split_sreg_range(0X805040D2,"T",0X1,3);
	split_sreg_range(0X805040D8,"T",0X1,3);
	split_sreg_range(0X805040DC,"T",0X1,3);
	split_sreg_range(0X80504100,"T",0X1,3);
	split_sreg_range(0X8050414E,"T",0X1,3);
	split_sreg_range(0X80504180,"T",0X1,3);
	split_sreg_range(0X80504194,"T",0X1,3);
	split_sreg_range(0X8050419C,"T",0X1,3);
	split_sreg_range(0X805041BE,"T",0X1,3);
	split_sreg_range(0X80504214,"T",0X1,3);
	split_sreg_range(0X8050423A,"T",0X1,3);
	split_sreg_range(0X80504260,"T",0X1,3);
	split_sreg_range(0X80504296,"T",0X1,3);
	split_sreg_range(0X805042DE,"T",0X1,3);
	split_sreg_range(0X805042E6,"T",0X1,3);
	split_sreg_range(0X8050430C,"T",0X1,3);
	split_sreg_range(0X80504332,"T",0X1,3);
	split_sreg_range(0X80504358,"T",0X1,3);
	split_sreg_range(0X80504378,"T",0X1,3);
	split_sreg_range(0X80504380,"T",0X1,3);
	split_sreg_range(0X80504382,"T",0X1,3);
	split_sreg_range(0X805043C2,"T",0X1,3);
	split_sreg_range(0X805043C4,"T",0X1,3);
	split_sreg_range(0X805043CC,"T",0X1,3);
	split_sreg_range(0X805043F4,"T",0X1,3);
	split_sreg_range(0X80504402,"T",0X1,3);
	split_sreg_range(0X80504438,"T",0X1,3);
	split_sreg_range(0X8050443A,"T",0X1,3);
	split_sreg_range(0X8050444C,"T",0X1,3);
	split_sreg_range(0X80504452,"T",0X1,3);
	split_sreg_range(0X80504490,"T",0X1,3);
	split_sreg_range(0X805044A0,"T",0X1,3);
	split_sreg_range(0X805044B2,"T",0X1,3);
	split_sreg_range(0X805044E4,"T",0X1,2);
	split_sreg_range(0X805044E5,"T",0X1,2);
	split_sreg_range(0X805044F3,"T",0X1,2);
	split_sreg_range(0X80504570,"T",0X1,3);
	split_sreg_range(0X805045BA,"T",0X1,3);
	split_sreg_range(0X805045D4,"T",0X1,3);
	split_sreg_range(0X805045F0,"T",0X1,3);
	split_sreg_range(0X805045FC,"T",0X1,3);
	split_sreg_range(0X80504608,"T",0X1,3);
	split_sreg_range(0X80504616,"T",0X1,3);
	split_sreg_range(0X80504626,"T",0X1,3);
	split_sreg_range(0X80504634,"T",0X1,3);
	split_sreg_range(0X805046AC,"T",0X1,3);
	split_sreg_range(0X805046BC,"T",0X1,3);
	split_sreg_range(0X805046D6,"T",0X1,3);
	split_sreg_range(0X805046E2,"T",0X1,3);
	split_sreg_range(0X805046F0,"T",0X1,3);
	split_sreg_range(0X80504720,"T",0X1,3);
	split_sreg_range(0X80504786,"T",0X1,3);
	split_sreg_range(0X80504794,"T",0X1,3);
	split_sreg_range(0X805047DE,"T",0X1,3);
	split_sreg_range(0X80504832,"T",0X1,3);
	split_sreg_range(0X80504866,"T",0X1,3);
	split_sreg_range(0X80504886,"T",0X1,3);
	split_sreg_range(0X80504890,"T",0X1,3);
	split_sreg_range(0X805048E0,"T",0X1,3);
	split_sreg_range(0X805048FA,"T",0X1,3);
	split_sreg_range(0X80504924,"T",0X1,3);
	split_sreg_range(0X80504982,"T",0X1,3);
	split_sreg_range(0X80504A00,"T",0X1,3);
	split_sreg_range(0X80504A0A,"T",0X1,3);
	split_sreg_range(0X80504A6C,"T",0X1,3);
	split_sreg_range(0X80504A8C,"T",0X1,3);
	split_sreg_range(0X80504AAC,"T",0X1,3);
	split_sreg_range(0X80504AB2,"T",0X1,3);
	split_sreg_range(0X80504AD6,"T",0X1,3);
	split_sreg_range(0X80504AEC,"T",0X1,3);
	split_sreg_range(0X80504B1C,"T",0X1,3);
	split_sreg_range(0X80504B36,"T",0X1,3);
	split_sreg_range(0X80504B50,"T",0X1,3);
	split_sreg_range(0X80504B7C,"T",0X1,3);
	split_sreg_range(0X80504B9E,"T",0X1,3);
	split_sreg_range(0X80504BAA,"T",0X1,3);
	split_sreg_range(0X80504BBC,"T",0X1,3);
	split_sreg_range(0X80504BC4,"T",0X1,3);
	split_sreg_range(0X80504BCA,"T",0X1,3);
	split_sreg_range(0X80504C1E,"T",0X1,3);
	split_sreg_range(0X80504C44,"T",0X1,3);
	split_sreg_range(0X80504C98,"T",0X1,3);
	split_sreg_range(0X80504CBE,"T",0X1,3);
	split_sreg_range(0X80504D12,"T",0X1,3);
	split_sreg_range(0X80504D38,"T",0X1,3);
	split_sreg_range(0X80504D66,"T",0X1,3);
	split_sreg_range(0X80504D82,"T",0X1,3);
	split_sreg_range(0X80504D84,"T",0X1,3);
	split_sreg_range(0X80504D8E,"T",0X1,3);
	split_sreg_range(0X80504D92,"T",0X1,3);
	split_sreg_range(0X80504DB8,"T",0X1,3);
	split_sreg_range(0X80504E0C,"T",0X1,3);
	split_sreg_range(0X80504E28,"T",0X1,3);
	split_sreg_range(0X80504E2A,"T",0X1,3);
	split_sreg_range(0X80504E34,"T",0X1,3);
	split_sreg_range(0X80504E38,"T",0X1,3);
	split_sreg_range(0X80504E5E,"T",0X1,3);
	split_sreg_range(0X80504E84,"T",0X1,3);
	split_sreg_range(0X80504EB2,"T",0X1,3);
	split_sreg_range(0X80504ECE,"T",0X1,3);
	split_sreg_range(0X80504ED0,"T",0X1,3);
	split_sreg_range(0X80504EDA,"T",0X1,3);
	split_sreg_range(0X80504EDE,"T",0X1,3);
	split_sreg_range(0X80504F04,"T",0X1,3);
	split_sreg_range(0X80504F2A,"T",0X1,3);
	split_sreg_range(0X80504F58,"T",0X1,3);
	split_sreg_range(0X80504F74,"T",0X1,3);
	split_sreg_range(0X80504F76,"T",0X1,3);
	split_sreg_range(0X80504F80,"T",0X1,3);
	split_sreg_range(0X80504F84,"T",0X1,3);
	split_sreg_range(0X80504FAA,"T",0X1,3);
	split_sreg_range(0X80504FD0,"T",0X1,3);
	split_sreg_range(0X80504FFC,"T",0X1,3);
	split_sreg_range(0X8050500A,"T",0X1,3);
	split_sreg_range(0X80505020,"T",0X1,3);
	split_sreg_range(0X80505054,"T",0X1,3);
	split_sreg_range(0X8050506E,"T",0X1,3);
	split_sreg_range(0X80505070,"T",0X1,3);
	split_sreg_range(0X80505072,"T",0X1,3);
	split_sreg_range(0X8050507A,"T",0X1,3);
	split_sreg_range(0X805050A0,"T",0X1,3);
	split_sreg_range(0X805050C6,"T",0X1,3);
	split_sreg_range(0X805050EE,"T",0X1,3);
	split_sreg_range(0X80505124,"T",0X1,3);
	split_sreg_range(0X80505146,"T",0X1,3);
	split_sreg_range(0X80505152,"T",0X1,3);
	split_sreg_range(0X80505164,"T",0X1,3);
	split_sreg_range(0X8050516C,"T",0X1,3);
	split_sreg_range(0X80505172,"T",0X1,3);
	split_sreg_range(0X805051D2,"T",0X1,3);
	split_sreg_range(0X805051F4,"T",0X1,3);
	split_sreg_range(0X80505214,"T",0X1,3);
	split_sreg_range(0X80505220,"T",0X1,3);
	split_sreg_range(0X80505240,"T",0X1,3);
	split_sreg_range(0X8050524C,"T",0X1,3);
	split_sreg_range(0X8050526C,"T",0X1,3);
	split_sreg_range(0X80505278,"T",0X1,3);
	split_sreg_range(0X80505298,"T",0X1,3);
	split_sreg_range(0X805052A4,"T",0X1,3);
	split_sreg_range(0X805052C4,"T",0X1,3);
	split_sreg_range(0X805052D0,"T",0X1,3);
	split_sreg_range(0X805052F8,"T",0X1,3);
	split_sreg_range(0X80505304,"T",0X1,3);
	split_sreg_range(0X80505396,"T",0X1,3);
	split_sreg_range(0X805053A8,"T",0X1,3);
	split_sreg_range(0X805053EE,"T",0X1,3);
	split_sreg_range(0X80505402,"T",0X1,3);
	split_sreg_range(0X80505406,"T",0X1,3);
	split_sreg_range(0X8050540A,"T",0X1,3);
	split_sreg_range(0X80505418,"T",0X1,3);
	split_sreg_range(0X8050541A,"T",0X1,3);
	split_sreg_range(0X80505422,"T",0X1,3);
	split_sreg_range(0X80505452,"T",0X1,3);
	split_sreg_range(0X80505458,"T",0X1,3);
	split_sreg_range(0X80505480,"T",0X1,3);
	split_sreg_range(0X8050548A,"T",0X1,3);
	split_sreg_range(0X805054B0,"T",0X1,3);
	split_sreg_range(0X805054D6,"T",0X1,3);
	split_sreg_range(0X805054FC,"T",0X1,3);
	split_sreg_range(0X80505522,"T",0X1,3);
	split_sreg_range(0X8050558A,"T",0X1,3);
	split_sreg_range(0X8050559C,"T",0X1,3);
	split_sreg_range(0X805055E2,"T",0X1,3);
	split_sreg_range(0X805055F6,"T",0X1,3);
	split_sreg_range(0X805055FA,"T",0X1,3);
	split_sreg_range(0X805055FE,"T",0X1,3);
	split_sreg_range(0X8050560C,"T",0X1,3);
	split_sreg_range(0X8050560E,"T",0X1,3);
	split_sreg_range(0X80505616,"T",0X1,3);
	split_sreg_range(0X80505630,"T",0X1,3);
	split_sreg_range(0X8050563A,"T",0X1,3);
	split_sreg_range(0X80505660,"T",0X1,3);
	split_sreg_range(0X80505686,"T",0X1,3);
	split_sreg_range(0X805056AC,"T",0X1,3);
	split_sreg_range(0X805056D2,"T",0X1,3);
	split_sreg_range(0X80505740,"T",0X1,3);
	split_sreg_range(0X8050575A,"T",0X1,3);
	split_sreg_range(0X80505788,"T",0X1,3);
	split_sreg_range(0X8050578C,"T",0X1,3);
	split_sreg_range(0X80505790,"T",0X1,3);
	split_sreg_range(0X8050579E,"T",0X1,3);
	split_sreg_range(0X805057AE,"T",0X1,3);
	split_sreg_range(0X805057C2,"T",0X1,3);
	split_sreg_range(0X805057F2,"T",0X1,3);
	split_sreg_range(0X805057F8,"T",0X1,3);
	split_sreg_range(0X80505816,"T",0X1,3);
	split_sreg_range(0X80505820,"T",0X1,3);
	split_sreg_range(0X8050582E,"T",0X1,3);
	split_sreg_range(0X80505854,"T",0X1,3);
	split_sreg_range(0X8050587A,"T",0X1,3);
	split_sreg_range(0X805058A0,"T",0X1,3);
	split_sreg_range(0X805058C6,"T",0X1,3);
	split_sreg_range(0X80505930,"T",0X1,3);
	split_sreg_range(0X8050594A,"T",0X1,3);
	split_sreg_range(0X80505978,"T",0X1,3);
	split_sreg_range(0X8050597C,"T",0X1,3);
	split_sreg_range(0X80505980,"T",0X1,3);
	split_sreg_range(0X8050598E,"T",0X1,3);
	split_sreg_range(0X8050599E,"T",0X1,3);
	split_sreg_range(0X805059B2,"T",0X1,3);
	split_sreg_range(0X805059CC,"T",0X1,3);
	split_sreg_range(0X805059D0,"T",0X1,3);
	split_sreg_range(0X805059DA,"T",0X1,3);
	split_sreg_range(0X80505A00,"T",0X1,3);
	split_sreg_range(0X80505A26,"T",0X1,3);
	split_sreg_range(0X80505A4C,"T",0X1,3);
	split_sreg_range(0X80505A72,"T",0X1,3);
	split_sreg_range(0X80505AB4,"T",0X1,3);
	split_sreg_range(0X80505B68,"T",0X1,3);
	split_sreg_range(0X80505BBC,"T",0X1,3);
	split_sreg_range(0X80505BEC,"T",0X1,3);
	split_sreg_range(0X80505BFC,"T",0X1,3);
	split_sreg_range(0X80505E6E,"T",0X1,3);
	split_sreg_range(0X80505EF0,"T",0X1,3);
	split_sreg_range(0X80505F08,"T",0X1,3);
	split_sreg_range(0X80505F18,"T",0X1,3);
	split_sreg_range(0X80505FAA,"T",0X1,3);
	split_sreg_range(0X805060E6,"T",0X1,3);
	split_sreg_range(0X80506388,"T",0X1,3);
	split_sreg_range(0X805063EC,"T",0X1,3);
	split_sreg_range(0X805063F8,"T",0X1,3);
	split_sreg_range(0X8050642E,"T",0X1,3);
	split_sreg_range(0X80506446,"T",0X1,3);
	split_sreg_range(0X8050645C,"T",0X1,3);
	split_sreg_range(0X805064B8,"T",0X1,3);
	split_sreg_range(0X805064DC,"T",0X1,3);
	split_sreg_range(0X80506504,"T",0X1,3);
	split_sreg_range(0X80506920,"T",0X1,3);
	split_sreg_range(0X805069F8,"T",0X1,3);
	split_sreg_range(0X80506B02,"T",0X1,3);
	split_sreg_range(0X80506B34,"T",0X1,3);
	split_sreg_range(0X80506BE6,"T",0X1,3);
	split_sreg_range(0X80506D24,"T",0X1,3);
	split_sreg_range(0X80506D54,"T",0X1,3);
	split_sreg_range(0X80506E16,"T",0X1,3);
	split_sreg_range(0X80506F50,"T",0X1,3);
	split_sreg_range(0X80506F60,"T",0X1,3);
	split_sreg_range(0X80506F84,"T",0X1,3);
	split_sreg_range(0X80506FE2,"T",0X1,3);
	split_sreg_range(0X80506FE8,"T",0X1,3);
	split_sreg_range(0X8050704E,"T",0X1,3);
	split_sreg_range(0X8050705A,"T",0X1,3);
	split_sreg_range(0X80507094,"T",0X1,3);
	split_sreg_range(0X805070A2,"T",0X1,3);
	split_sreg_range(0X805070B8,"T",0X1,3);
	split_sreg_range(0X8050733E,"T",0X1,3);
	split_sreg_range(0X80507346,"T",0X1,3);
	split_sreg_range(0X805074FC,"T",0X1,3);
	split_sreg_range(0X80507588,"T",0X1,3);
	split_sreg_range(0X805075E8,"T",0X1,3);
	split_sreg_range(0X80507632,"T",0X1,3);
	split_sreg_range(0X80507874,"T",0X1,3);
	split_sreg_range(0X8050787E,"T",0X1,3);
	split_sreg_range(0X80507A3E,"T",0X1,3);
	split_sreg_range(0X80507A7C,"T",0X1,3);
	split_sreg_range(0X80507AAE,"T",0X1,3);
	split_sreg_range(0X80507BFA,"T",0X1,3);
	split_sreg_range(0X80507C08,"T",0X1,3);
	split_sreg_range(0X80507CC8,"T",0X1,3);
	split_sreg_range(0X80507D12,"T",0X1,3);
	split_sreg_range(0X80507D9C,"T",0X1,3);
	split_sreg_range(0X80507E86,"T",0X1,3);
	split_sreg_range(0X80507F40,"T",0X1,3);
	split_sreg_range(0X80507F48,"T",0X1,3);
	split_sreg_range(0X8050806E,"T",0X1,3);
	split_sreg_range(0X80508098,"T",0X1,3);
	split_sreg_range(0X805080AC,"T",0X1,3);
	split_sreg_range(0X80508102,"T",0X1,3);
	split_sreg_range(0X80508150,"T",0X1,3);
	split_sreg_range(0X805081B0,"T",0X1,3);
	split_sreg_range(0X805081FA,"T",0X1,3);
	split_sreg_range(0X805082B2,"T",0X1,3);
	split_sreg_range(0X805082BC,"T",0X1,3);
	split_sreg_range(0X805082C4,"T",0X1,3);
	split_sreg_range(0X805082EC,"T",0X1,3);
	split_sreg_range(0X8050831C,"T",0X1,3);
	split_sreg_range(0X805083AE,"T",0X1,3);
	split_sreg_range(0X805083F8,"T",0X1,3);
	split_sreg_range(0X8050841E,"T",0X1,3);
	split_sreg_range(0X80508420,"T",0X1,3);
	split_sreg_range(0X80508426,"T",0X1,3);
	split_sreg_range(0X80508430,"T",0X1,3);
	split_sreg_range(0X805084A0,"T",0X1,3);
	split_sreg_range(0X805084EC,"T",0X1,3);
	split_sreg_range(0X805084F8,"T",0X1,3);
	split_sreg_range(0X80508502,"T",0X1,3);
	split_sreg_range(0X8050853E,"T",0X1,3);
	split_sreg_range(0X80508546,"T",0X1,3);
	split_sreg_range(0X8050856A,"T",0X1,3);
	split_sreg_range(0X80508572,"T",0X1,3);
	split_sreg_range(0X80508578,"T",0X1,3);
	split_sreg_range(0X80508580,"T",0X1,3);
	split_sreg_range(0X8050859E,"T",0X1,3);
	split_sreg_range(0X805085A8,"T",0X1,3);
	split_sreg_range(0X805085CC,"T",0X1,3);
	split_sreg_range(0X805085D4,"T",0X1,3);
	split_sreg_range(0X805085DA,"T",0X1,3);
	split_sreg_range(0X805085FE,"T",0X1,3);
	split_sreg_range(0X8050861E,"T",0X1,3);
	split_sreg_range(0X80508630,"T",0X1,3);
	split_sreg_range(0X80508654,"T",0X1,3);
	split_sreg_range(0X80508696,"T",0X1,3);
	split_sreg_range(0X805086BC,"T",0X1,3);
	split_sreg_range(0X805086E4,"T",0X1,3);
	split_sreg_range(0X8050870C,"T",0X1,3);
	split_sreg_range(0X80508734,"T",0X1,3);
	split_sreg_range(0X8050875C,"T",0X1,3);
	split_sreg_range(0X80508784,"T",0X1,3);
	split_sreg_range(0X805087AC,"T",0X1,3);
	split_sreg_range(0X805087D4,"T",0X1,3);
	split_sreg_range(0X805087FC,"T",0X1,3);
	split_sreg_range(0X80508824,"T",0X1,3);
	split_sreg_range(0X8050884C,"T",0X1,3);
	split_sreg_range(0X80508874,"T",0X1,3);
	split_sreg_range(0X8050889C,"T",0X1,3);
	split_sreg_range(0X805088C4,"T",0X1,3);
	split_sreg_range(0X805088EC,"T",0X1,3);
	split_sreg_range(0X80508914,"T",0X1,3);
	split_sreg_range(0X8050893C,"T",0X1,3);
	split_sreg_range(0X80508964,"T",0X1,3);
	split_sreg_range(0X8050898C,"T",0X1,3);
	split_sreg_range(0X805089B4,"T",0X1,3);
	split_sreg_range(0X805089DC,"T",0X1,3);
	split_sreg_range(0X80508A04,"T",0X1,3);
	split_sreg_range(0X80508A2C,"T",0X1,3);
	split_sreg_range(0X80508A54,"T",0X1,3);
	split_sreg_range(0X80508A7C,"T",0X1,3);
	split_sreg_range(0X80508AA4,"T",0X1,3);
	split_sreg_range(0X80508ACC,"T",0X1,3);
	split_sreg_range(0X80508B30,"T",0X1,3);
	split_sreg_range(0X80508B58,"T",0X1,3);
	split_sreg_range(0X80508B80,"T",0X1,3);
	split_sreg_range(0X80508BA8,"T",0X1,3);
	split_sreg_range(0X80508BD0,"T",0X1,3);
	split_sreg_range(0X80508C10,"T",0X1,3);
	split_sreg_range(0X80508C18,"T",0X1,3);
	split_sreg_range(0X80508D22,"T",0X1,3);
	split_sreg_range(0X80508D4E,"T",0X1,3);
	split_sreg_range(0X80508D58,"T",0X1,3);
	split_sreg_range(0X80508D78,"T",0X1,3);
	split_sreg_range(0X80508D7C,"T",0X1,3);
	split_sreg_range(0X80508D8C,"T",0X1,3);
	split_sreg_range(0X80508D94,"T",0X1,3);
	split_sreg_range(0X80508DCC,"T",0X1,3);
	split_sreg_range(0X80508E12,"T",0X1,3);
	split_sreg_range(0X80508E16,"T",0X1,3);
	split_sreg_range(0X80508E4E,"T",0X1,3);
	split_sreg_range(0X80508E6A,"T",0X1,3);
	split_sreg_range(0X80508E78,"T",0X1,3);
	split_sreg_range(0X80508E8E,"T",0X1,3);
	split_sreg_range(0X80508ED2,"T",0X1,3);
	split_sreg_range(0X80508EFA,"T",0X1,3);
	split_sreg_range(0X80508F70,"T",0X1,3);
	split_sreg_range(0X80508FB0,"T",0X1,3);
	split_sreg_range(0X80508FBE,"T",0X1,3);
	split_sreg_range(0X80508FCE,"T",0X1,3);
	split_sreg_range(0X80508FE2,"T",0X1,3);
	split_sreg_range(0X80509054,"T",0X1,3);
	split_sreg_range(0X8050905A,"T",0X1,3);
	split_sreg_range(0X805090A0,"T",0X1,3);
	split_sreg_range(0X805090B2,"T",0X1,3);
	split_sreg_range(0X805090B6,"T",0X1,3);
	split_sreg_range(0X805090BE,"T",0X1,3);
	split_sreg_range(0X805090CE,"T",0X1,3);
	split_sreg_range(0X805090EA,"T",0X1,3);
	split_sreg_range(0X80509122,"T",0X1,3);
	split_sreg_range(0X80509130,"T",0X1,3);
	split_sreg_range(0X8050913C,"T",0X1,3);
	split_sreg_range(0X80509140,"T",0X1,3);
	split_sreg_range(0X80509142,"T",0X1,3);
	split_sreg_range(0X8050914A,"T",0X1,3);
	split_sreg_range(0X8050916C,"T",0X1,3);
	split_sreg_range(0X8050917C,"T",0X1,3);
	split_sreg_range(0X805091B4,"T",0X1,3);
	split_sreg_range(0X805091BC,"T",0X1,3);
	split_sreg_range(0X805091D0,"T",0X1,3);
	split_sreg_range(0X805091D8,"T",0X1,3);
	split_sreg_range(0X805091FE,"T",0X1,3);
	split_sreg_range(0X80509226,"T",0X1,3);
	split_sreg_range(0X8050924E,"T",0X1,3);
	split_sreg_range(0X80509276,"T",0X1,3);
	split_sreg_range(0X8050929E,"T",0X1,3);
	split_sreg_range(0X805092C6,"T",0X1,3);
	split_sreg_range(0X805092EE,"T",0X1,3);
	split_sreg_range(0X80509316,"T",0X1,3);
	split_sreg_range(0X8050933E,"T",0X1,3);
	split_sreg_range(0X80509366,"T",0X1,3);
	split_sreg_range(0X8050938E,"T",0X1,3);
	split_sreg_range(0X805093B6,"T",0X1,3);
	split_sreg_range(0X80509426,"T",0X1,3);
	split_sreg_range(0X80509440,"T",0X1,3);
	split_sreg_range(0X80509446,"T",0X1,3);
	split_sreg_range(0X80509482,"T",0X1,3);
	split_sreg_range(0X8050949C,"T",0X1,3);
	split_sreg_range(0X805094AC,"T",0X1,3);
	split_sreg_range(0X805094C2,"T",0X1,3);
	split_sreg_range(0X805094CA,"T",0X1,3);
	split_sreg_range(0X805094E2,"T",0X1,3);
	split_sreg_range(0X805094F4,"T",0X1,3);
	split_sreg_range(0X80509510,"T",0X1,3);
	split_sreg_range(0X80509514,"T",0X1,3);
	split_sreg_range(0X8050951C,"T",0X1,3);
	split_sreg_range(0X80509538,"T",0X1,3);
	split_sreg_range(0X80509588,"T",0X1,3);
	split_sreg_range(0X805095A2,"T",0X1,3);
	split_sreg_range(0X805095A8,"T",0X1,3);
	split_sreg_range(0X805095E4,"T",0X1,3);
	split_sreg_range(0X805095FE,"T",0X1,3);
	split_sreg_range(0X80509606,"T",0X1,3);
	split_sreg_range(0X80509656,"T",0X1,3);
	split_sreg_range(0X80509670,"T",0X1,3);
	split_sreg_range(0X80509678,"T",0X1,3);
	split_sreg_range(0X80509682,"T",0X1,3);
	split_sreg_range(0X8050969E,"T",0X1,3);
	split_sreg_range(0X805096A2,"T",0X1,3);
	split_sreg_range(0X805096E0,"T",0X1,3);
	split_sreg_range(0X805096FA,"T",0X1,3);
	split_sreg_range(0X80509706,"T",0X1,3);
	split_sreg_range(0X8050970E,"T",0X1,3);
	split_sreg_range(0X8050972A,"T",0X1,3);
	split_sreg_range(0X8050974C,"T",0X1,3);
	split_sreg_range(0X80509786,"T",0X1,3);
	split_sreg_range(0X805097A8,"T",0X1,3);
	split_sreg_range(0X80509844,"T",0X1,3);
	split_sreg_range(0X805098AC,"T",0X1,3);
	split_sreg_range(0X805098B2,"T",0X1,3);
	split_sreg_range(0X805098D4,"T",0X1,3);
	split_sreg_range(0X805098FA,"T",0X1,3);
	split_sreg_range(0X80509924,"T",0X1,3);
	split_sreg_range(0X80509942,"T",0X1,3);
	split_sreg_range(0X8050994E,"T",0X1,3);
	split_sreg_range(0X8050998C,"T",0X1,3);
	split_sreg_range(0X805099C2,"T",0X1,3);
	split_sreg_range(0X805099D6,"T",0X1,3);
	split_sreg_range(0X805099E6,"T",0X1,3);
	split_sreg_range(0X80509A00,"T",0X1,3);
	split_sreg_range(0X80509A0C,"T",0X1,3);
	split_sreg_range(0X80509A16,"T",0X1,3);
	split_sreg_range(0X80509A40,"T",0X1,3);
	split_sreg_range(0X80509A64,"T",0X1,3);
	split_sreg_range(0X80509A66,"T",0X1,3);
	split_sreg_range(0X80509A6E,"T",0X1,3);
	split_sreg_range(0X80509AAE,"T",0X1,3);
	split_sreg_range(0X80509AEC,"T",0X1,3);
	split_sreg_range(0X80509B4A,"T",0X1,3);
	split_sreg_range(0X80509BB8,"T",0X1,3);
	split_sreg_range(0X80509BC0,"T",0X1,3);
	split_sreg_range(0X80509BE6,"T",0X1,3);
	split_sreg_range(0X80509C0E,"T",0X1,3);
	split_sreg_range(0X80509C16,"T",0X1,3);
	split_sreg_range(0X80509C34,"T",0X1,3);
	split_sreg_range(0X80509C5C,"T",0X1,3);
	split_sreg_range(0X80509CA4,"T",0X1,3);
	split_sreg_range(0X80509CF2,"T",0X1,3);
	split_sreg_range(0X80509CFC,"T",0X1,3);
	split_sreg_range(0X80509D78,"T",0X1,3);
	split_sreg_range(0X80509F64,"T",0X1,3);
	split_sreg_range(0X80509F6C,"T",0X1,3);
	split_sreg_range(0X80509F98,"T",0X1,3);
	split_sreg_range(0X80509FE2,"T",0X1,3);
	split_sreg_range(0X80509FFA,"T",0X1,3);
	split_sreg_range(0X8050A088,"T",0X1,3);
	split_sreg_range(0X8050A094,"T",0X1,3);
	split_sreg_range(0X8050A0DE,"T",0X1,3);
	split_sreg_range(0X8050A2AC,"T",0X1,3);
	split_sreg_range(0X8050A31A,"T",0X1,3);
	split_sreg_range(0X8050A31C,"T",0X1,3);
	split_sreg_range(0X8050A324,"T",0X1,3);
	split_sreg_range(0X8050A358,"T",0X1,3);
	split_sreg_range(0X8050A3E0,"T",0X1,3);
	split_sreg_range(0X8050A448,"T",0X1,3);
	split_sreg_range(0X8050A4B0,"T",0X1,3);
	split_sreg_range(0X8050A524,"T",0X1,3);
	split_sreg_range(0X8050A5AE,"T",0X1,3);
	split_sreg_range(0X8050A5B6,"T",0X1,3);
	split_sreg_range(0X8050A5BA,"T",0X1,3);
	split_sreg_range(0X8050A61E,"T",0X1,3);
	split_sreg_range(0X8050A96E,"T",0X1,3);
	split_sreg_range(0X8050AAFE,"T",0X1,3);
	split_sreg_range(0X8050AB02,"T",0X1,3);
	split_sreg_range(0X8050AB1A,"T",0X1,3);
	split_sreg_range(0X8050ABFA,"T",0X1,3);
	split_sreg_range(0X8050AC7C,"T",0X1,3);
	split_sreg_range(0X8050AC92,"T",0X1,3);
	split_sreg_range(0X8050AC94,"T",0X1,3);
	split_sreg_range(0X8050ACA8,"T",0X1,3);
	split_sreg_range(0X8050ACB8,"T",0X1,3);
	split_sreg_range(0X8050ACBC,"T",0X1,3);
	split_sreg_range(0X8050ACC8,"T",0X1,3);
	split_sreg_range(0X8050ACD4,"T",0X1,3);
	split_sreg_range(0X8050ACDC,"T",0X1,3);
	split_sreg_range(0X8050ACE0,"T",0X1,3);
	split_sreg_range(0X8050AD3E,"T",0X1,3);
	split_sreg_range(0X8050AD52,"T",0X1,3);
	split_sreg_range(0X8050AD60,"T",0X1,3);
	split_sreg_range(0X8050AD6C,"T",0X1,3);
	split_sreg_range(0X8050ADB6,"T",0X1,3);
	split_sreg_range(0X8050AE2E,"T",0X1,3);
	split_sreg_range(0X8050AE6C,"T",0X1,3);
	split_sreg_range(0X8050AEDA,"T",0X1,3);
	split_sreg_range(0X8050AEDE,"T",0X1,3);
	split_sreg_range(0X8050AEF8,"T",0X1,3);
	split_sreg_range(0X8050AF34,"T",0X1,3);
	split_sreg_range(0X8050B008,"T",0X1,3);
	split_sreg_range(0X8050B046,"T",0X1,3);
	split_sreg_range(0X8050B0C8,"T",0X1,3);
	split_sreg_range(0X8050B182,"T",0X1,3);
	split_sreg_range(0X8050B1C2,"T",0X1,3);
	split_sreg_range(0X8050B21A,"T",0X1,3);
	split_sreg_range(0X8050B292,"T",0X1,3);
	split_sreg_range(0X8050B41E,"T",0X1,3);
	split_sreg_range(0X8050B47A,"T",0X1,3);
	split_sreg_range(0X8050B484,"T",0X1,3);
	split_sreg_range(0X8050B4A0,"T",0X1,3);
	split_sreg_range(0X8050B4AE,"T",0X1,3);
	split_sreg_range(0X8050B526,"T",0X1,3);
	split_sreg_range(0X8050B564,"T",0X1,3);
	split_sreg_range(0X8050B5A0,"T",0X1,3);
	split_sreg_range(0X8050B608,"T",0X1,3);
	split_sreg_range(0X8050B864,"T",0X1,3);
	split_sreg_range(0X8050B8CA,"T",0X1,3);
	split_sreg_range(0X8050BB62,"T",0X1,3);
	split_sreg_range(0X8050BBB0,"T",0X1,3);
	split_sreg_range(0X8050BBCA,"T",0X1,3);
	split_sreg_range(0X8050BCA2,"T",0X1,3);
	split_sreg_range(0X8050BCB8,"T",0X1,3);
	split_sreg_range(0X8050BCCA,"T",0X1,3);
	split_sreg_range(0X8050BCCE,"T",0X1,3);
	split_sreg_range(0X8050BCD8,"T",0X1,3);
	split_sreg_range(0X8050BCDC,"T",0X1,3);
	split_sreg_range(0X8050BCE0,"T",0X1,3);
	split_sreg_range(0X8050BCF0,"T",0X1,3);
	split_sreg_range(0X8050BD18,"T",0X1,3);
	split_sreg_range(0X8050BD34,"T",0X1,3);
	split_sreg_range(0X8050BD42,"T",0X1,3);
	split_sreg_range(0X8050BD54,"T",0X1,3);
	split_sreg_range(0X8050BD5C,"T",0X1,3);
	split_sreg_range(0X8050BD7C,"T",0X1,3);
	split_sreg_range(0X8050BD90,"T",0X1,3);
	split_sreg_range(0X8050BD94,"T",0X1,3);
	split_sreg_range(0X8050BDA6,"T",0X1,3);
	split_sreg_range(0X8050BDB0,"T",0X1,3);
	split_sreg_range(0X8050BDB4,"T",0X1,3);
	split_sreg_range(0X8050BDE4,"T",0X1,3);
	split_sreg_range(0X8050BDE6,"T",0X1,3);
	split_sreg_range(0X8050BDF6,"T",0X1,3);
	split_sreg_range(0X8050BE1E,"T",0X1,3);
	split_sreg_range(0X8050BE34,"T",0X1,3);
	split_sreg_range(0X8050BE36,"T",0X1,3);
	split_sreg_range(0X8050BE4E,"T",0X1,3);
	split_sreg_range(0X8050BE60,"T",0X1,3);
	split_sreg_range(0X8050BEB4,"T",0X1,3);
	split_sreg_range(0X8050BF0A,"T",0X1,3);
	split_sreg_range(0X8050BF1A,"T",0X1,3);
	split_sreg_range(0X8050BF26,"T",0X1,3);
	split_sreg_range(0X8050BF3E,"T",0X1,3);
	split_sreg_range(0X8050BF4E,"T",0X1,3);
	split_sreg_range(0X8050BF5E,"T",0X1,3);
	split_sreg_range(0X8050BF6E,"T",0X1,3);
	split_sreg_range(0X8050BF7A,"T",0X1,3);
	split_sreg_range(0X8050BF88,"T",0X1,3);
	split_sreg_range(0X8050BF92,"T",0X1,3);
	split_sreg_range(0X8050BF9C,"T",0X1,3);
	split_sreg_range(0X8050BFA6,"T",0X1,3);
	split_sreg_range(0X8050BFB0,"T",0X1,3);
	split_sreg_range(0X8050BFB8,"T",0X1,3);
	split_sreg_range(0X8050BFC2,"T",0X1,3);
	split_sreg_range(0X8050BFC6,"T",0X1,3);
	split_sreg_range(0X8050C03E,"T",0X1,3);
	split_sreg_range(0X8050C05C,"T",0X1,3);
	split_sreg_range(0X8050C06C,"T",0X1,3);
	split_sreg_range(0X8050C07E,"T",0X1,3);
	split_sreg_range(0X8050C088,"T",0X1,3);
	split_sreg_range(0X8050C08A,"T",0X1,3);
	split_sreg_range(0X8050C09A,"T",0X1,3);
	split_sreg_range(0X8050C0C2,"T",0X1,3);
	split_sreg_range(0X8050C0DC,"T",0X1,3);
	split_sreg_range(0X8050C0E0,"T",0X1,3);
	split_sreg_range(0X8050C128,"T",0X1,3);
	split_sreg_range(0X8050C138,"T",0X1,3);
	split_sreg_range(0X8050C18E,"T",0X1,3);
	split_sreg_range(0X8050C196,"T",0X1,3);
	split_sreg_range(0X8050C1AC,"T",0X1,3);
	split_sreg_range(0X8050C1C4,"T",0X1,3);
	split_sreg_range(0X8050C1C6,"T",0X1,3);
	split_sreg_range(0X8050C1CC,"T",0X1,3);
	split_sreg_range(0X8050C244,"T",0X1,3);
	split_sreg_range(0X8050C26C,"T",0X1,3);
	split_sreg_range(0X8050C334,"T",0X1,3);
	split_sreg_range(0X8050C7A4,"T",0X1,3);
	split_sreg_range(0X8050C7A8,"T",0X1,3);
	split_sreg_range(0X8050C7BE,"T",0X1,3);
	split_sreg_range(0X8050C83E,"T",0X1,3);
	split_sreg_range(0X8050CD8A,"T",0X1,3);
	split_sreg_range(0X8050CDFC,"T",0X1,3);
	split_sreg_range(0X8050D2B8,"T",0X1,3);
	split_sreg_range(0X8050D356,"T",0X1,3);
	split_sreg_range(0X8050D8DC,"T",0X1,3);
	split_sreg_range(0X8050D8EA,"T",0X1,3);
	split_sreg_range(0X8050D8EE,"T",0X1,3);
	split_sreg_range(0X8050D908,"T",0X1,3);
	split_sreg_range(0X8050D92E,"T",0X1,3);
	split_sreg_range(0X8050D954,"T",0X1,3);
	split_sreg_range(0X8050DA96,"T",0X1,3);
	split_sreg_range(0X8050DA9E,"T",0X1,3);
	split_sreg_range(0X8050DAC8,"T",0X1,3);
	split_sreg_range(0X8050DADC,"T",0X1,3);
	split_sreg_range(0X8050DAE2,"T",0X1,3);
	split_sreg_range(0X8050DAE6,"T",0X1,3);
	split_sreg_range(0X8050DAFC,"T",0X1,3);
	split_sreg_range(0X8050DB00,"T",0X1,3);
	split_sreg_range(0X8050DB06,"T",0X1,3);
	split_sreg_range(0X8050DB10,"T",0X1,3);
	split_sreg_range(0X8050DB16,"T",0X1,3);
	split_sreg_range(0X8050DB28,"T",0X1,3);
	split_sreg_range(0X8050DB48,"T",0X1,3);
	split_sreg_range(0X8050DB5E,"T",0X1,3);
	split_sreg_range(0X8050DBB8,"T",0X1,3);
	split_sreg_range(0X8050DCA8,"T",0X1,3);
	split_sreg_range(0X8050DCFE,"T",0X1,3);
	split_sreg_range(0X8050DD1C,"T",0X1,3);
	split_sreg_range(0X8050DD36,"T",0X1,3);
	split_sreg_range(0X8050DD50,"T",0X1,3);
	split_sreg_range(0X8050DD7A,"T",0X1,3);
	split_sreg_range(0X8050DDA0,"T",0X1,3);
	split_sreg_range(0X8050DDBE,"T",0X1,3);
	split_sreg_range(0X8050DDE0,"T",0X1,3);
	split_sreg_range(0X8050DE02,"T",0X1,3);
	split_sreg_range(0X8050DE20,"T",0X1,3);
	split_sreg_range(0X8050DE42,"T",0X1,3);
	split_sreg_range(0X8050DE60,"T",0X1,3);
	split_sreg_range(0X8050DE82,"T",0X1,3);
	split_sreg_range(0X8050DEA0,"T",0X1,3);
	split_sreg_range(0X8050DEC2,"T",0X1,3);
	split_sreg_range(0X8050DEE0,"T",0X1,3);
	split_sreg_range(0X8050DF02,"T",0X1,3);
	split_sreg_range(0X8050DF20,"T",0X1,3);
	split_sreg_range(0X8050DF42,"T",0X1,3);
	split_sreg_range(0X8050DF60,"T",0X1,3);
	split_sreg_range(0X8050DF86,"T",0X1,3);
	split_sreg_range(0X8050DFB0,"T",0X1,3);
	split_sreg_range(0X8050E0E6,"T",0X1,3);
	split_sreg_range(0X8050E1DC,"T",0X1,3);
	split_sreg_range(0X8050E1F0,"T",0X1,3);
	split_sreg_range(0X8050E344,"T",0X1,3);
	split_sreg_range(0X8050E7B8,"T",0X1,3);
	split_sreg_range(0X8050E804,"T",0X1,3);
	split_sreg_range(0X8050E964,"T",0X1,3);
	split_sreg_range(0X8050EE9C,"T",0X1,3);
	split_sreg_range(0X8050EEEC,"T",0X1,3);
	split_sreg_range(0X8050F08C,"T",0X1,3);
	split_sreg_range(0X8050F712,"T",0X1,3);
	split_sreg_range(0X8050F720,"T",0X1,3);
	split_sreg_range(0X8050F77E,"T",0X1,3);
	split_sreg_range(0X8050F964,"T",0X1,3);
	split_sreg_range(0X8050F9E4,"T",0X1,3);
	split_sreg_range(0X8050FA46,"T",0X1,3);
	split_sreg_range(0X8050FA48,"T",0X1,3);
	split_sreg_range(0X8050FA8C,"T",0X1,3);
	split_sreg_range(0X8050FAEE,"T",0X1,3);
	split_sreg_range(0X8050FAF0,"T",0X1,3);
	split_sreg_range(0X8050FB42,"T",0X1,3);
	split_sreg_range(0X8050FB50,"T",0X1,3);
	split_sreg_range(0X8050FB62,"T",0X1,3);
	split_sreg_range(0X8050FBD2,"T",0X1,3);
	split_sreg_range(0X8050FC66,"T",0X1,3);
	split_sreg_range(0X8050FC72,"T",0X1,3);
	split_sreg_range(0X8050FC7A,"T",0X1,3);
	split_sreg_range(0X8050FC8E,"T",0X1,3);
	split_sreg_range(0X8050FC9A,"T",0X1,3);
	split_sreg_range(0X8050FCC4,"T",0X1,3);
	split_sreg_range(0X8050FCD0,"T",0X1,3);
	split_sreg_range(0X8050FCD6,"T",0X1,3);
	split_sreg_range(0X8050FCE0,"T",0X1,3);
	split_sreg_range(0X8050FCEC,"T",0X1,3);
	split_sreg_range(0X8050FD00,"T",0X1,3);
	split_sreg_range(0X8050FD18,"T",0X1,3);
	split_sreg_range(0X8050FD30,"T",0X1,3);
	split_sreg_range(0X8050FD34,"T",0X1,3);
	split_sreg_range(0X8050FD48,"T",0X1,3);
	split_sreg_range(0X8050FD66,"T",0X1,3);
	split_sreg_range(0X8050FD82,"T",0X1,3);
	split_sreg_range(0X8050FD8A,"T",0X1,3);
	split_sreg_range(0X8050FD96,"T",0X1,3);
	split_sreg_range(0X8050FDA6,"T",0X1,3);
	split_sreg_range(0X8050FDAE,"T",0X1,3);
	split_sreg_range(0X8050FDC6,"T",0X1,3);
	split_sreg_range(0X8050FDDE,"T",0X1,3);
	split_sreg_range(0X8050FDE0,"T",0X1,3);
	split_sreg_range(0X8050FDE8,"T",0X1,3);
	split_sreg_range(0X8050FE2C,"T",0X1,3);
	split_sreg_range(0X8050FE48,"T",0X1,3);
	split_sreg_range(0X8050FE60,"T",0X1,3);
	split_sreg_range(0X8050FE62,"T",0X1,3);
	split_sreg_range(0X8050FEA2,"T",0X1,3);
	split_sreg_range(0X8050FEBA,"T",0X1,3);
	split_sreg_range(0X8050FEBC,"T",0X1,3);
	split_sreg_range(0X8050FEFC,"T",0X1,3);
	split_sreg_range(0X8050FF14,"T",0X1,3);
	split_sreg_range(0X8050FF16,"T",0X1,3);
	split_sreg_range(0X8050FF56,"T",0X1,3);
	split_sreg_range(0X8050FF6E,"T",0X1,3);
	split_sreg_range(0X8050FF70,"T",0X1,3);
	split_sreg_range(0X8050FFB0,"T",0X1,3);
	split_sreg_range(0X8050FFC8,"T",0X1,3);
	split_sreg_range(0X8050FFD6,"T",0X1,3);
	split_sreg_range(0X8050FFD8,"T",0X1,3);
	split_sreg_range(0X80510016,"T",0X1,3);
	split_sreg_range(0X8051002E,"T",0X1,3);
	split_sreg_range(0X8051003C,"T",0X1,3);
	split_sreg_range(0X8051003E,"T",0X1,3);
	split_sreg_range(0X80510076,"T",0X1,3);
	split_sreg_range(0X8051008E,"T",0X1,3);
	split_sreg_range(0X8051009E,"T",0X1,3);
	split_sreg_range(0X805100A0,"T",0X1,3);
	split_sreg_range(0X805100BA,"T",0X1,3);
	split_sreg_range(0X805100FE,"T",0X1,3);
	split_sreg_range(0X80510192,"T",0X1,3);
	split_sreg_range(0X805101E6,"T",0X1,3);
	split_sreg_range(0X80510248,"T",0X1,3);
	split_sreg_range(0X8051027A,"T",0X1,3);
	split_sreg_range(0X805103C0,"T",0X1,3);
	split_sreg_range(0X80510494,"T",0X1,3);
	split_sreg_range(0X805105B0,"T",0X1,3);
	split_sreg_range(0X805105E2,"T",0X1,3);
	split_sreg_range(0X8051062A,"T",0X1,3);
	split_sreg_range(0X8051063A,"T",0X1,3);
	split_sreg_range(0X8051064A,"T",0X1,3);
	split_sreg_range(0X8051065A,"T",0X1,3);
	split_sreg_range(0X80510666,"T",0X1,3);
	split_sreg_range(0X8051067A,"T",0X1,3);
	split_sreg_range(0X80510684,"T",0X1,3);
	split_sreg_range(0X8051068A,"T",0X1,3);
	split_sreg_range(0X805106B8,"T",0X1,3);
	split_sreg_range(0X805106F6,"T",0X1,3);
	split_sreg_range(0X805106FE,"T",0X1,3);
	split_sreg_range(0X80510702,"T",0X1,3);
	split_sreg_range(0X80510750,"T",0X1,3);
	split_sreg_range(0X80510754,"T",0X1,3);
	split_sreg_range(0X8051076C,"T",0X1,3);
	split_sreg_range(0X80510900,"T",0X1,3);
	split_sreg_range(0X8051090A,"T",0X1,3);
	split_sreg_range(0X80510922,"T",0X1,3);
	split_sreg_range(0X8051092E,"T",0X1,3);
	split_sreg_range(0X80510942,"T",0X1,3);
	split_sreg_range(0X8051094A,"T",0X1,3);
	split_sreg_range(0X80510972,"T",0X1,3);
	split_sreg_range(0X80510974,"T",0X1,3);
	split_sreg_range(0X80510986,"T",0X1,3);
	split_sreg_range(0X80510990,"T",0X1,3);
	split_sreg_range(0X805109A8,"T",0X1,3);
	split_sreg_range(0X805109B4,"T",0X1,3);
	split_sreg_range(0X805109C8,"T",0X1,3);
	split_sreg_range(0X805109DC,"T",0X1,3);
	split_sreg_range(0X805109E6,"T",0X1,3);
	split_sreg_range(0X805109FE,"T",0X1,3);
	split_sreg_range(0X80510A0A,"T",0X1,3);
	split_sreg_range(0X80510A20,"T",0X1,3);
	split_sreg_range(0X80510A28,"T",0X1,3);
	split_sreg_range(0X80510A50,"T",0X1,3);
	split_sreg_range(0X80510A52,"T",0X1,3);
	split_sreg_range(0X80510A64,"T",0X1,3);
	split_sreg_range(0X80510A6E,"T",0X1,3);
	split_sreg_range(0X80510A86,"T",0X1,3);
	split_sreg_range(0X80510A92,"T",0X1,3);
	split_sreg_range(0X80510AA8,"T",0X1,3);
	split_sreg_range(0X80510AC0,"T",0X1,3);
	split_sreg_range(0X80510AFC,"T",0X1,3);
	split_sreg_range(0X80510B2E,"T",0X1,3);
	split_sreg_range(0X80510B48,"T",0X1,3);
	split_sreg_range(0X80510B66,"T",0X1,3);
	split_sreg_range(0X80510B7A,"T",0X1,3);
	split_sreg_range(0X80510B92,"T",0X1,3);
	split_sreg_range(0X80510BC8,"T",0X1,3);
	split_sreg_range(0X80510BFA,"T",0X1,3);
	split_sreg_range(0X80510C16,"T",0X1,3);
	split_sreg_range(0X80510C2C,"T",0X1,3);
	split_sreg_range(0X80510C40,"T",0X1,3);
	split_sreg_range(0X80510C72,"T",0X1,3);
	split_sreg_range(0X80510C8A,"T",0X1,3);
	split_sreg_range(0X80510C9A,"T",0X1,3);
	split_sreg_range(0X80510CB2,"T",0X1,3);
	split_sreg_range(0X80510CF2,"T",0X1,3);
	split_sreg_range(0X80510DCC,"T",0X1,3);
	split_sreg_range(0X80510DD6,"T",0X1,3);
	split_sreg_range(0X80510DFE,"T",0X1,3);
	split_sreg_range(0X80510E06,"T",0X1,3);
	split_sreg_range(0X80510E26,"T",0X1,3);
	split_sreg_range(0X80510E28,"T",0X1,3);
	split_sreg_range(0X80510E32,"T",0X1,3);
	split_sreg_range(0X80510E56,"T",0X1,3);
	split_sreg_range(0X80510E7A,"T",0X1,3);
	split_sreg_range(0X80510E92,"T",0X1,3);
	split_sreg_range(0X80510E9E,"T",0X1,3);
	split_sreg_range(0X80510EC4,"T",0X1,3);
	split_sreg_range(0X80510ED0,"T",0X1,3);
	split_sreg_range(0X80510EE8,"T",0X1,3);
	split_sreg_range(0X80510EF4,"T",0X1,3);
	split_sreg_range(0X80510F12,"T",0X1,3);
	split_sreg_range(0X80510F70,"T",0X1,3);
	split_sreg_range(0X80511042,"T",0X1,3);
	split_sreg_range(0X80511044,"T",0X1,3);
	split_sreg_range(0X8051104E,"T",0X1,3);
	split_sreg_range(0X80511072,"T",0X1,3);
	split_sreg_range(0X805110E8,"T",0X1,3);
	split_sreg_range(0X80511126,"T",0X1,3);
	split_sreg_range(0X8051112E,"T",0X1,3);
	split_sreg_range(0X80511132,"T",0X1,3);
	split_sreg_range(0X8051113E,"T",0X1,3);
	split_sreg_range(0X80511168,"T",0X1,3);
	split_sreg_range(0X805111B6,"T",0X1,3);
	split_sreg_range(0X805111DA,"T",0X1,3);
	split_sreg_range(0X805111E4,"T",0X1,3);
	split_sreg_range(0X805111FC,"T",0X1,3);
	split_sreg_range(0X80511204,"T",0X1,3);
	split_sreg_range(0X80511222,"T",0X1,3);
	split_sreg_range(0X80511272,"T",0X1,3);
	split_sreg_range(0X8051129E,"T",0X1,3);
	split_sreg_range(0X805112A8,"T",0X1,3);
	split_sreg_range(0X805112C0,"T",0X1,3);
	split_sreg_range(0X805112C8,"T",0X1,3);
	split_sreg_range(0X805112EE,"T",0X1,3);
	split_sreg_range(0X80511332,"T",0X1,3);
	split_sreg_range(0X8051134A,"T",0X1,3);
	split_sreg_range(0X8051135A,"T",0X1,3);
	split_sreg_range(0X80511372,"T",0X1,3);
	split_sreg_range(0X805113B2,"T",0X1,3);
	split_sreg_range(0X8051148C,"T",0X1,3);
	split_sreg_range(0X80511496,"T",0X1,3);
	split_sreg_range(0X805114BE,"T",0X1,3);
	split_sreg_range(0X805114C6,"T",0X1,3);
	split_sreg_range(0X805114E6,"T",0X1,3);
	split_sreg_range(0X805114E8,"T",0X1,3);
	split_sreg_range(0X805114F2,"T",0X1,3);
	split_sreg_range(0X80511516,"T",0X1,3);
	split_sreg_range(0X8051153A,"T",0X1,3);
	split_sreg_range(0X80511552,"T",0X1,3);
	split_sreg_range(0X8051155E,"T",0X1,3);
	split_sreg_range(0X80511584,"T",0X1,3);
	split_sreg_range(0X80511590,"T",0X1,3);
	split_sreg_range(0X805115A8,"T",0X1,3);
	split_sreg_range(0X805115B4,"T",0X1,3);
	split_sreg_range(0X805115D2,"T",0X1,3);
	split_sreg_range(0X80511630,"T",0X1,3);
	split_sreg_range(0X80511702,"T",0X1,3);
	split_sreg_range(0X80511704,"T",0X1,3);
	split_sreg_range(0X8051170E,"T",0X1,3);
	split_sreg_range(0X80511732,"T",0X1,3);
	split_sreg_range(0X805117A8,"T",0X1,3);
	split_sreg_range(0X805117E6,"T",0X1,3);
	split_sreg_range(0X805117EE,"T",0X1,3);
	split_sreg_range(0X805117F2,"T",0X1,3);
	split_sreg_range(0X805117FE,"T",0X1,3);
	split_sreg_range(0X80511828,"T",0X1,3);
	split_sreg_range(0X80511876,"T",0X1,3);
	split_sreg_range(0X8051189A,"T",0X1,3);
	split_sreg_range(0X805118A4,"T",0X1,3);
	split_sreg_range(0X805118BC,"T",0X1,3);
	split_sreg_range(0X805118C4,"T",0X1,3);
	split_sreg_range(0X805118E2,"T",0X1,3);
	split_sreg_range(0X80511932,"T",0X1,3);
	split_sreg_range(0X8051195E,"T",0X1,3);
	split_sreg_range(0X80511968,"T",0X1,3);
	split_sreg_range(0X80511980,"T",0X1,3);
	split_sreg_range(0X80511988,"T",0X1,3);
	split_sreg_range(0X805119AE,"T",0X1,3);
	split_sreg_range(0X805119D0,"T",0X1,3);
	split_sreg_range(0X80511A00,"T",0X1,3);
	split_sreg_range(0X80511A18,"T",0X1,3);
	split_sreg_range(0X80511A32,"T",0X1,3);
	split_sreg_range(0X80511A4A,"T",0X1,3);
	split_sreg_range(0X80511A5A,"T",0X1,3);
	split_sreg_range(0X80511A72,"T",0X1,3);
	split_sreg_range(0X80511A82,"T",0X1,3);
	split_sreg_range(0X80511A9A,"T",0X1,3);
	split_sreg_range(0X80511ADA,"T",0X1,3);
	split_sreg_range(0X80511BB6,"T",0X1,3);
	split_sreg_range(0X80511BF8,"T",0X1,3);
	split_sreg_range(0X80511CD2,"T",0X1,3);
	split_sreg_range(0X80511CDE,"T",0X1,3);
	split_sreg_range(0X80511D06,"T",0X1,3);
	split_sreg_range(0X80511D10,"T",0X1,3);
	split_sreg_range(0X80511D38,"T",0X1,3);
	split_sreg_range(0X80511D42,"T",0X1,3);
	split_sreg_range(0X80511D62,"T",0X1,3);
	split_sreg_range(0X80511D6C,"T",0X1,3);
	split_sreg_range(0X80511D8C,"T",0X1,3);
	split_sreg_range(0X80511D8E,"T",0X1,3);
	split_sreg_range(0X80511D98,"T",0X1,3);
	split_sreg_range(0X80511DBE,"T",0X1,3);
	split_sreg_range(0X80511DC0,"T",0X1,3);
	split_sreg_range(0X80511DCA,"T",0X1,3);
	split_sreg_range(0X80511DEE,"T",0X1,3);
	split_sreg_range(0X80511E2A,"T",0X1,3);
	split_sreg_range(0X80511E52,"T",0X1,3);
	split_sreg_range(0X80511E78,"T",0X1,3);
	split_sreg_range(0X80511E94,"T",0X1,3);
	split_sreg_range(0X80511E9C,"T",0X1,3);
	split_sreg_range(0X80511EB2,"T",0X1,3);
	split_sreg_range(0X80511EC0,"T",0X1,3);
	split_sreg_range(0X80511F0C,"T",0X1,3);
	split_sreg_range(0X80511F32,"T",0X1,3);
	split_sreg_range(0X80511F68,"T",0X1,3);
	split_sreg_range(0X80511F8E,"T",0X1,3);
	split_sreg_range(0X80511FC8,"T",0X1,3);
	split_sreg_range(0X80511FF6,"T",0X1,3);
	split_sreg_range(0X80512030,"T",0X1,3);
	split_sreg_range(0X8051205E,"T",0X1,3);
	split_sreg_range(0X805120B0,"T",0X1,3);
	split_sreg_range(0X805120EC,"T",0X1,3);
	split_sreg_range(0X8051213C,"T",0X1,3);
	split_sreg_range(0X80512176,"T",0X1,3);
	split_sreg_range(0X8051217C,"T",0X1,3);
	split_sreg_range(0X80512184,"T",0X1,3);
	split_sreg_range(0X80512194,"T",0X1,3);
	split_sreg_range(0X805121AE,"T",0X1,3);
	split_sreg_range(0X805121BE,"T",0X1,3);
	split_sreg_range(0X805121D8,"T",0X1,3);
	split_sreg_range(0X805121E6,"T",0X1,3);
	split_sreg_range(0X80512200,"T",0X1,3);
	split_sreg_range(0X8051220E,"T",0X1,3);
	split_sreg_range(0X80512228,"T",0X1,3);
	split_sreg_range(0X80512234,"T",0X1,3);
	split_sreg_range(0X8051225E,"T",0X1,3);
	split_sreg_range(0X8051226A,"T",0X1,3);
	split_sreg_range(0X80512294,"T",0X1,3);
	split_sreg_range(0X805122A0,"T",0X1,3);
	split_sreg_range(0X805122C0,"T",0X1,3);
	split_sreg_range(0X805122DC,"T",0X1,3);
	split_sreg_range(0X805122E8,"T",0X1,3);
	split_sreg_range(0X80512308,"T",0X1,3);
	split_sreg_range(0X80512324,"T",0X1,3);
	split_sreg_range(0X80512328,"T",0X1,3);
	split_sreg_range(0X80512334,"T",0X1,3);
	split_sreg_range(0X80512360,"T",0X1,3);
	split_sreg_range(0X80512364,"T",0X1,3);
	split_sreg_range(0X80512370,"T",0X1,3);
	split_sreg_range(0X8051239A,"T",0X1,3);
	split_sreg_range(0X805123E2,"T",0X1,3);
	split_sreg_range(0X8051240C,"T",0X1,3);
	split_sreg_range(0X8051246C,"T",0X1,3);
	split_sreg_range(0X80512488,"T",0X1,3);
	split_sreg_range(0X805124C0,"T",0X1,3);
	split_sreg_range(0X805124EA,"T",0X1,3);
	split_sreg_range(0X8051252E,"T",0X1,3);
	split_sreg_range(0X8051254A,"T",0X1,3);
	split_sreg_range(0X80512564,"T",0X1,3);
	split_sreg_range(0X80512574,"T",0X1,3);
	split_sreg_range(0X805125C6,"T",0X1,3);
	split_sreg_range(0X80512628,"T",0X1,3);
	split_sreg_range(0X80512638,"T",0X1,3);
	split_sreg_range(0X805126DC,"T",0X1,3);
	split_sreg_range(0X80512700,"T",0X1,3);
	split_sreg_range(0X80512726,"T",0X1,3);
	split_sreg_range(0X8051272C,"T",0X1,3);
	split_sreg_range(0X80512778,"T",0X1,3);
	split_sreg_range(0X8051281A,"T",0X1,3);
	split_sreg_range(0X80512828,"T",0X1,3);
	split_sreg_range(0X805128FE,"T",0X1,3);
	split_sreg_range(0X80512910,"T",0X1,3);
	split_sreg_range(0X8051293A,"T",0X1,3);
	split_sreg_range(0X80512948,"T",0X1,3);
	split_sreg_range(0X8051294E,"T",0X1,3);
	split_sreg_range(0X80512972,"T",0X1,3);
	split_sreg_range(0X8051297C,"T",0X1,3);
	split_sreg_range(0X805129D0,"T",0X1,3);
	split_sreg_range(0X80512A0E,"T",0X1,3);
	split_sreg_range(0X80512A50,"T",0X1,3);
	split_sreg_range(0X80512A60,"T",0X1,3);
	split_sreg_range(0X80512A6C,"T",0X1,3);
	split_sreg_range(0X80512A6E,"T",0X1,3);
	split_sreg_range(0X80512A78,"T",0X1,3);
	split_sreg_range(0X80512A84,"T",0X1,3);
	split_sreg_range(0X80512AD8,"T",0X1,3);
	split_sreg_range(0X80512B16,"T",0X1,3);
	split_sreg_range(0X80512B46,"T",0X1,3);
	split_sreg_range(0X80512BBC,"T",0X1,3);
	split_sreg_range(0X80512BE8,"T",0X1,3);
	split_sreg_range(0X80512BF8,"T",0X1,3);
	split_sreg_range(0X80512BFE,"T",0X1,3);
	split_sreg_range(0X80512C1C,"T",0X1,3);
	split_sreg_range(0X80512C60,"T",0X1,3);
	split_sreg_range(0X80512C90,"T",0X1,3);
	split_sreg_range(0X80512C9E,"T",0X1,3);
	split_sreg_range(0X80512CA6,"T",0X1,3);
	split_sreg_range(0X80512CBC,"T",0X1,3);
	split_sreg_range(0X80512CCA,"T",0X1,3);
	split_sreg_range(0X80512CCC,"T",0X1,3);
	split_sreg_range(0X80512CE6,"T",0X1,3);
	split_sreg_range(0X80512D28,"T",0X1,3);
	split_sreg_range(0X80512D52,"T",0X1,3);
	split_sreg_range(0X80512D60,"T",0X1,3);
	split_sreg_range(0X80512D68,"T",0X1,3);
	split_sreg_range(0X80512D7C,"T",0X1,3);
	split_sreg_range(0X80512D8A,"T",0X1,3);
	split_sreg_range(0X80512DB2,"T",0X1,3);
	split_sreg_range(0X80512DCA,"T",0X1,3);
	split_sreg_range(0X80512DD6,"T",0X1,3);
	split_sreg_range(0X80512DD8,"T",0X1,3);
	split_sreg_range(0X80512DE0,"T",0X1,3);
	split_sreg_range(0X80512DEC,"T",0X1,3);
	split_sreg_range(0X80512E40,"T",0X1,3);
	split_sreg_range(0X80512E76,"T",0X1,3);
	split_sreg_range(0X80512EA2,"T",0X1,3);
	split_sreg_range(0X80512EDC,"T",0X1,3);
	split_sreg_range(0X80512F08,"T",0X1,3);
	split_sreg_range(0X80512F16,"T",0X1,3);
	split_sreg_range(0X80512F1C,"T",0X1,3);
	split_sreg_range(0X80512F36,"T",0X1,3);
	split_sreg_range(0X80512F78,"T",0X1,3);
	split_sreg_range(0X80512FA4,"T",0X1,3);
	split_sreg_range(0X80512FB2,"T",0X1,3);
	split_sreg_range(0X80512FBA,"T",0X1,3);
	split_sreg_range(0X80512FD0,"T",0X1,3);
	split_sreg_range(0X80512FE0,"T",0X1,3);
	split_sreg_range(0X80512FE6,"T",0X1,3);
	split_sreg_range(0X80513004,"T",0X1,3);
	split_sreg_range(0X80513044,"T",0X1,3);
	split_sreg_range(0X8051306E,"T",0X1,3);
	split_sreg_range(0X8051307C,"T",0X1,3);
	split_sreg_range(0X80513084,"T",0X1,3);
	split_sreg_range(0X80513098,"T",0X1,3);
	split_sreg_range(0X805130A6,"T",0X1,3);
	split_sreg_range(0X805130CE,"T",0X1,3);
	split_sreg_range(0X805130E6,"T",0X1,3);
	split_sreg_range(0X805130F2,"T",0X1,3);
	split_sreg_range(0X805130F4,"T",0X1,3);
	split_sreg_range(0X805130FC,"T",0X1,3);
	split_sreg_range(0X80513108,"T",0X1,3);
	split_sreg_range(0X805131A0,"T",0X1,3);
	split_sreg_range(0X8051320C,"T",0X1,3);
	split_sreg_range(0X80513278,"T",0X1,3);
	split_sreg_range(0X805132E4,"T",0X1,3);
	split_sreg_range(0X8051334E,"T",0X1,3);
	split_sreg_range(0X8051337E,"T",0X1,3);
	split_sreg_range(0X8051338E,"T",0X1,3);
	split_sreg_range(0X80513394,"T",0X1,3);
	split_sreg_range(0X805133B2,"T",0X1,3);
	split_sreg_range(0X805133F2,"T",0X1,3);
	split_sreg_range(0X8051341E,"T",0X1,3);
	split_sreg_range(0X8051342C,"T",0X1,3);
	split_sreg_range(0X80513434,"T",0X1,3);
	split_sreg_range(0X8051344A,"T",0X1,3);
	split_sreg_range(0X8051345A,"T",0X1,3);
	split_sreg_range(0X80513460,"T",0X1,3);
	split_sreg_range(0X8051347E,"T",0X1,3);
	split_sreg_range(0X805134BE,"T",0X1,3);
	split_sreg_range(0X805134E8,"T",0X1,3);
	split_sreg_range(0X805134F6,"T",0X1,3);
	split_sreg_range(0X805134FE,"T",0X1,3);
	split_sreg_range(0X80513512,"T",0X1,3);
	split_sreg_range(0X80513520,"T",0X1,3);
	split_sreg_range(0X80513530,"T",0X1,3);
	split_sreg_range(0X80513536,"T",0X1,3);
	split_sreg_range(0X80513554,"T",0X1,3);
	split_sreg_range(0X80513594,"T",0X1,3);
	split_sreg_range(0X805135BE,"T",0X1,3);
	split_sreg_range(0X805135CC,"T",0X1,3);
	split_sreg_range(0X805135D4,"T",0X1,3);
	split_sreg_range(0X805135E8,"T",0X1,3);
	split_sreg_range(0X805135F6,"T",0X1,3);
	split_sreg_range(0X80513606,"T",0X1,3);
	split_sreg_range(0X8051360C,"T",0X1,3);
	split_sreg_range(0X8051362A,"T",0X1,3);
	split_sreg_range(0X8051366A,"T",0X1,3);
	split_sreg_range(0X80513694,"T",0X1,3);
	split_sreg_range(0X805136A2,"T",0X1,3);
	split_sreg_range(0X805136AA,"T",0X1,3);
	split_sreg_range(0X805136BE,"T",0X1,3);
	split_sreg_range(0X805136CC,"T",0X1,3);
	split_sreg_range(0X805136DC,"T",0X1,3);
	split_sreg_range(0X805136E2,"T",0X1,3);
	split_sreg_range(0X80513700,"T",0X1,3);
	split_sreg_range(0X80513740,"T",0X1,3);
	split_sreg_range(0X8051376A,"T",0X1,3);
	split_sreg_range(0X80513778,"T",0X1,3);
	split_sreg_range(0X80513780,"T",0X1,3);
	split_sreg_range(0X80513794,"T",0X1,3);
	split_sreg_range(0X805137A2,"T",0X1,3);
	split_sreg_range(0X805137AA,"T",0X1,3);
	split_sreg_range(0X80513E40,"T",0X1,3);
	split_sreg_range(0X80513E6A,"T",0X1,3);
	split_sreg_range(0X80513E80,"T",0X1,3);
	split_sreg_range(0X80513E94,"T",0X1,3);
	split_sreg_range(0X80513EAA,"T",0X1,3);
	split_sreg_range(0X80513EB4,"T",0X1,3);
	split_sreg_range(0X80513ED2,"T",0X1,3);
	split_sreg_range(0X80513EDC,"T",0X1,3);
	split_sreg_range(0X80513EFA,"T",0X1,3);
	split_sreg_range(0X80513F3A,"T",0X1,3);
	split_sreg_range(0X8051400E,"T",0X1,3);
	split_sreg_range(0X80514050,"T",0X1,3);
	split_sreg_range(0X80514122,"T",0X1,3);
	split_sreg_range(0X80514124,"T",0X1,3);
	split_sreg_range(0X8051412E,"T",0X1,3);
	split_sreg_range(0X80514150,"T",0X1,3);
	split_sreg_range(0X80514152,"T",0X1,3);
	split_sreg_range(0X8051415C,"T",0X1,3);
	split_sreg_range(0X8051417C,"T",0X1,3);
	split_sreg_range(0X80514230,"T",0X1,3);
	split_sreg_range(0X8051426C,"T",0X1,3);
	split_sreg_range(0X80514288,"T",0X1,3);
	split_sreg_range(0X805142AE,"T",0X1,3);
	split_sreg_range(0X805142CA,"T",0X1,3);
	split_sreg_range(0X805142F4,"T",0X1,3);
	split_sreg_range(0X80514318,"T",0X1,3);
	split_sreg_range(0X80514342,"T",0X1,3);
	split_sreg_range(0X80514366,"T",0X1,3);
	split_sreg_range(0X805143B4,"T",0X1,3);
	split_sreg_range(0X805143E2,"T",0X1,3);
	split_sreg_range(0X8051442E,"T",0X1,3);
	split_sreg_range(0X8051445C,"T",0X1,3);
	split_sreg_range(0X80514460,"T",0X1,3);
	split_sreg_range(0X8051446C,"T",0X1,3);
	split_sreg_range(0X80514490,"T",0X1,3);
	split_sreg_range(0X80514494,"T",0X1,3);
	split_sreg_range(0X805144A0,"T",0X1,3);
	split_sreg_range(0X805144C2,"T",0X1,3);
	split_sreg_range(0X80514633,"T",0X1,2);
	split_sreg_range(0X80514634,"T",0X1,3);
	split_sreg_range(0X8051463E,"T",0X1,3);
	split_sreg_range(0X80514648,"T",0X1,3);
	split_sreg_range(0X8051465C,"T",0X1,3);
	split_sreg_range(0X80514684,"T",0X1,3);
	split_sreg_range(0X80514692,"T",0X1,3);
	split_sreg_range(0X805146FA,"T",0X1,3);
	split_sreg_range(0X80514720,"T",0X1,3);
	split_sreg_range(0X80514746,"T",0X1,3);
	split_sreg_range(0X8051476C,"T",0X1,3);
	split_sreg_range(0X805147A6,"T",0X1,3);
	split_sreg_range(0X805147AE,"T",0X1,3);
	split_sreg_range(0X805147CA,"T",0X1,3);
	split_sreg_range(0X805147CC,"T",0X1,3);
	split_sreg_range(0X80514810,"T",0X1,3);
	split_sreg_range(0X8051481A,"T",0X1,3);
	split_sreg_range(0X8051484E,"T",0X1,3);
	split_sreg_range(0X80514874,"T",0,2);
	split_sreg_range(0X80514908,"T",0,3);
	split_sreg_range(0X80514910,"T",0,3);
	split_sreg_range(0X80514938,"T",0,3);
	split_sreg_range(0X80514940,"T",0,3);
	split_sreg_range(0X80514978,"T",0,3);
	split_sreg_range(0X80514990,"T",0X1,3);
	split_sreg_range(0X805149A8,"T",0X1,3);
	split_sreg_range(0X805149B0,"T",0X1,3);
	split_sreg_range(0X805149CE,"T",0X1,3);
	split_sreg_range(0X80514B3C,"T",0X1,3);
	split_sreg_range(0X80514B3E,"T",0X1,3);
	split_sreg_range(0X80514B56,"T",0X1,3);
	split_sreg_range(0X80514B66,"T",0X1,3);
	split_sreg_range(0X80514BAC,"T",0X1,3);
	split_sreg_range(0X80514BC0,"T",0X1,3);
	split_sreg_range(0X80514BD4,"T",0X1,3);
	split_sreg_range(0X80514BD6,"T",0X1,3);
	split_sreg_range(0X80514BE8,"T",0X1,3);
	split_sreg_range(0X80514BF8,"T",0X1,3);
	split_sreg_range(0X80514BFA,"T",0X1,3);
	split_sreg_range(0X80514C0A,"T",0X1,3);
	split_sreg_range(0X80514C1A,"T",0X1,3);
	split_sreg_range(0X80514C3A,"T",0X1,3);
	split_sreg_range(0X80514C48,"T",0X1,3);
	split_sreg_range(0X80514C56,"T",0X1,3);
	split_sreg_range(0X80514C60,"T",0X1,3);
	split_sreg_range(0X80514C6E,"T",0X1,3);
	split_sreg_range(0X80514C8E,"T",0X1,3);
	split_sreg_range(0X80514CB2,"T",0X1,3);
	split_sreg_range(0X80514CBA,"T",0X1,3);
	split_sreg_range(0X80514CCC,"T",0X1,3);
	split_sreg_range(0X80514CF8,"T",0X1,3);
	split_sreg_range(0X80514D10,"T",0X1,3);
	split_sreg_range(0X80514D1A,"T",0X1,3);
	split_sreg_range(0X80514D40,"T",0X1,3);
	split_sreg_range(0X80514D46,"T",0X1,3);
	split_sreg_range(0X80514D66,"T",0X1,3);
	split_sreg_range(0X80514D7E,"T",0X1,3);
	split_sreg_range(0X80514D96,"T",0X1,3);
	split_sreg_range(0X80514DB0,"T",0X1,3);
	split_sreg_range(0X80514DB4,"T",0X1,3);
	split_sreg_range(0X80514DD0,"T",0X1,3);
	split_sreg_range(0X80514DE8,"T",0X1,3);
	split_sreg_range(0X80514E04,"T",0X1,3);
	split_sreg_range(0X80514E24,"T",0X1,3);
	split_sreg_range(0X80514E38,"T",0X1,3);
	split_sreg_range(0X80514F46,"T",0X1,3);
	split_sreg_range(0X80514F56,"T",0X1,3);
	split_sreg_range(0X80514F6C,"T",0X1,3);
	split_sreg_range(0X80514F74,"T",0X1,3);
	split_sreg_range(0X80514F80,"T",0X1,3);
	split_sreg_range(0X80514F9A,"T",0X1,3);
	split_sreg_range(0X80515038,"T",0X1,3);
	split_sreg_range(0X8051506A,"T",0X1,3);
	split_sreg_range(0X805150C0,"T",0X1,3);
	split_sreg_range(0X805150DC,"T",0X1,3);
	split_sreg_range(0X805150F4,"T",0X1,3);
	split_sreg_range(0X805150F6,"T",0X1,3);
	split_sreg_range(0X805150FA,"T",0X1,3);
	split_sreg_range(0X8051513C,"T",0X1,3);
	split_sreg_range(0X8051514C,"T",0X1,3);
	split_sreg_range(0X80515162,"T",0X1,3);
	split_sreg_range(0X80515164,"T",0X1,3);
	split_sreg_range(0X8051516C,"T",0X1,3);
	split_sreg_range(0X80515174,"T",0X1,3);
	split_sreg_range(0X805151A2,"T",0X1,3);
	split_sreg_range(0X805151AA,"T",0X1,3);
	split_sreg_range(0X805151AE,"T",0X1,3);
	split_sreg_range(0X805151C0,"T",0X1,3);
	split_sreg_range(0X805151F0,"T",0X1,3);
	split_sreg_range(0X805151FA,"T",0X1,3);
	split_sreg_range(0X8051520C,"T",0X1,3);
	split_sreg_range(0X80515232,"T",0X1,3);
	split_sreg_range(0X80515246,"T",0X1,3);
	split_sreg_range(0X8051524C,"T",0X1,3);
	split_sreg_range(0X80515272,"T",0X1,3);
	split_sreg_range(0X80515286,"T",0X1,3);
	split_sreg_range(0X8051528C,"T",0X1,3);
	split_sreg_range(0X805152B2,"T",0X1,3);
	split_sreg_range(0X805152CC,"T",0X1,3);
	split_sreg_range(0X805152CE,"T",0X1,3);
	split_sreg_range(0X805152F4,"T",0X1,3);
	split_sreg_range(0X80515306,"T",0X1,3);
	split_sreg_range(0X80515310,"T",0X1,3);
	split_sreg_range(0X80515318,"T",0X1,3);
	split_sreg_range(0X80515322,"T",0X1,3);
	split_sreg_range(0X80515344,"T",0X1,3);
	split_sreg_range(0X80515374,"T",0X1,3);
	split_sreg_range(0X8051538C,"T",0X1,3);
	split_sreg_range(0X805153A0,"T",0X1,3);
	split_sreg_range(0X805153C0,"T",0X1,3);
	split_sreg_range(0X805153D6,"T",0X1,3);
	split_sreg_range(0X805153DE,"T",0X1,3);
	split_sreg_range(0X8051540A,"T",0X1,3);
	split_sreg_range(0X80515414,"T",0X1,3);
	split_sreg_range(0X8051542C,"T",0X1,3);
	split_sreg_range(0X80515442,"T",0X1,3);
	split_sreg_range(0X8051544A,"T",0X1,3);
	split_sreg_range(0X80515470,"T",0X1,3);
	split_sreg_range(0X80515484,"T",0X1,3);
	split_sreg_range(0X805154AA,"T",0X1,3);
	split_sreg_range(0X805154C8,"T",0X1,3);
	split_sreg_range(0X805154D0,"T",0X1,3);
	split_sreg_range(0X805154E4,"T",0X1,3);
	split_sreg_range(0X805154F2,"T",0X1,3);
	split_sreg_range(0X80515510,"T",0X1,3);
	split_sreg_range(0X8051551E,"T",0X1,3);
	split_sreg_range(0X80515532,"T",0X1,3);
	split_sreg_range(0X8051554C,"T",0X1,3);
	split_sreg_range(0X80515562,"T",0X1,3);
	split_sreg_range(0X80515570,"T",0X1,3);
	split_sreg_range(0X8051557C,"T",0X1,3);
	split_sreg_range(0X80515588,"T",0X1,3);
	split_sreg_range(0X805155A6,"T",0X1,3);
	split_sreg_range(0X805155AC,"T",0X1,3);
	split_sreg_range(0X805155C0,"T",0X1,3);
	split_sreg_range(0X805155CE,"T",0X1,3);
	split_sreg_range(0X805155D4,"T",0X1,3);
	split_sreg_range(0X805155D6,"T",0X1,3);
	split_sreg_range(0X805155E2,"T",0X1,3);
	split_sreg_range(0X805155E4,"T",0X1,3);
	split_sreg_range(0X805155EE,"T",0X1,3);
	split_sreg_range(0X80515608,"T",0X1,3);
	split_sreg_range(0X8051560E,"T",0X1,3);
	split_sreg_range(0X8051562A,"T",0X1,3);
	split_sreg_range(0X80515654,"T",0X1,3);
	split_sreg_range(0X8051567C,"T",0X1,3);
	split_sreg_range(0X80515686,"T",0X1,3);
	split_sreg_range(0X80515690,"T",0X1,3);
	split_sreg_range(0X805156AA,"T",0X1,3);
	split_sreg_range(0X805156B8,"T",0X1,3);
	split_sreg_range(0X80515710,"T",0X1,3);
	split_sreg_range(0X8051577C,"T",0X1,3);
	split_sreg_range(0X80515786,"T",0X1,3);
	split_sreg_range(0X805157C0,"T",0X1,3);
	split_sreg_range(0X805157D4,"T",0X1,3);
	split_sreg_range(0X80515870,"T",0X1,3);
	split_sreg_range(0X80515878,"T",0X1,3);
	split_sreg_range(0X805158A6,"T",0X1,3);
	split_sreg_range(0X805158B8,"T",0X1,3);
	split_sreg_range(0X805158C4,"T",0X1,3);
	split_sreg_range(0X8051592A,"T",0X1,3);
	split_sreg_range(0X8051593C,"T",0X1,3);
	split_sreg_range(0X80515948,"T",0X1,3);
	split_sreg_range(0X805159B2,"T",0X1,3);
	split_sreg_range(0X805159EE,"T",0X1,3);
	split_sreg_range(0X805159F0,"T",0X1,3);
	split_sreg_range(0X80515A24,"T",0X1,3);
	split_sreg_range(0X80515A3A,"T",0X1,3);
	split_sreg_range(0X80515A3C,"T",0X1,3);
	split_sreg_range(0X80515A68,"T",0X1,3);
	split_sreg_range(0X80515AA2,"T",0X1,3);
	split_sreg_range(0X80515AC2,"T",0X1,3);
	split_sreg_range(0X80515ADA,"T",0X1,3);
	split_sreg_range(0X80515AF8,"T",0X1,3);
	split_sreg_range(0X80515B18,"T",0X1,3);
	split_sreg_range(0X80515B48,"T",0X1,3);
	split_sreg_range(0X80515B60,"T",0X1,3);
	split_sreg_range(0X80515B6A,"T",0X1,3);
	split_sreg_range(0X80515B72,"T",0X1,3);
	split_sreg_range(0X80515B80,"T",0X1,3);
	split_sreg_range(0X80515B94,"T",0X1,3);
	split_sreg_range(0X80515BB4,"T",0X1,3);
	split_sreg_range(0X80515BB6,"T",0X1,3);
	split_sreg_range(0X80515BC4,"T",0X1,3);
	split_sreg_range(0X80515BD6,"T",0X1,3);
	split_sreg_range(0X80515C06,"T",0X1,3);
	split_sreg_range(0X80515C0C,"T",0X1,3);
	split_sreg_range(0X80515C16,"T",0X1,3);
	split_sreg_range(0X80515C44,"T",0X1,3);
	split_sreg_range(0X80515C64,"T",0X1,3);
	split_sreg_range(0X80515C80,"T",0X1,3);
	split_sreg_range(0X80515C94,"T",0X1,3);
	split_sreg_range(0X80515CA2,"T",0X1,3);
	split_sreg_range(0X80515CC6,"T",0X1,3);
	split_sreg_range(0X80515CD6,"T",0X1,3);
	split_sreg_range(0X80515CDA,"T",0X1,3);
	split_sreg_range(0X80515CE4,"T",0X1,3);
	split_sreg_range(0X80515CE6,"T",0X1,3);
	split_sreg_range(0X80515CEC,"T",0X1,3);
	split_sreg_range(0X80515CF6,"T",0X1,3);
	split_sreg_range(0X80515D08,"T",0X1,3);
	split_sreg_range(0X80515D1A,"T",0X1,3);
	split_sreg_range(0X80515D28,"T",0X1,3);
	split_sreg_range(0X80515D3C,"T",0X1,3);
	split_sreg_range(0X80515D5C,"T",0X1,3);
	split_sreg_range(0X80515D7E,"T",0X1,3);
	split_sreg_range(0X80515D8A,"T",0X1,3);
	split_sreg_range(0X80515DCA,"T",0X1,3);
	split_sreg_range(0X80515DF4,"T",0X1,3);
	split_sreg_range(0X80515E08,"T",0X1,3);
	split_sreg_range(0X80515E1C,"T",0X1,3);
	split_sreg_range(0X80515E2A,"T",0X1,3);
	split_sreg_range(0X80515E42,"T",0X1,3);
	split_sreg_range(0X80515E64,"T",0X1,3);
	split_sreg_range(0X80515E66,"T",0X1,3);
	split_sreg_range(0X80515E6E,"T",0X1,3);
	split_sreg_range(0X80515EC6,"T",0X1,3);
	split_sreg_range(0X80515F10,"T",0X1,3);
	split_sreg_range(0X80515F36,"T",0X1,3);
	split_sreg_range(0X80515F52,"T",0X1,3);
	split_sreg_range(0X80515F5A,"T",0X1,3);
	split_sreg_range(0X80515FBC,"T",0X1,3);
	split_sreg_range(0X80515FC0,"T",0X1,3);
	split_sreg_range(0X8051600A,"T",0X1,3);
	split_sreg_range(0X80516012,"T",0X1,3);
	split_sreg_range(0X80516018,"T",0X1,3);
	split_sreg_range(0X8051601E,"T",0X1,3);
	split_sreg_range(0X80516024,"T",0X1,3);
	split_sreg_range(0X80516028,"T",0X1,3);
	split_sreg_range(0X80516040,"T",0X1,3);
	split_sreg_range(0X80516046,"T",0X1,3);
	split_sreg_range(0X80516066,"T",0X1,3);
	split_sreg_range(0X8051606A,"T",0X1,3);
	split_sreg_range(0X80516072,"T",0X1,3);
	split_sreg_range(0X805160AA,"T",0X1,3);
	split_sreg_range(0X805160B0,"T",0X1,3);
	split_sreg_range(0X805160B6,"T",0X1,3);
	split_sreg_range(0X805160D8,"T",0X1,3);
	split_sreg_range(0X805160F4,"T",0X1,3);
	split_sreg_range(0X805160FA,"T",0X1,3);
	split_sreg_range(0X80516120,"T",0X1,3);
	split_sreg_range(0X80516130,"T",0X1,3);
	split_sreg_range(0X80516138,"T",0X1,3);
	split_sreg_range(0X80516156,"T",0X1,3);
	split_sreg_range(0X8051615A,"T",0X1,3);
	split_sreg_range(0X80516164,"T",0X1,3);
	split_sreg_range(0X80516186,"T",0X1,3);
	split_sreg_range(0X805161A4,"T",0X1,3);
	split_sreg_range(0X805161C4,"T",0X1,3);
	split_sreg_range(0X805161CA,"T",0X1,3);
	split_sreg_range(0X805161EE,"T",0X1,3);
	split_sreg_range(0X80516204,"T",0X1,3);
	split_sreg_range(0X80516208,"T",0X1,3);
	split_sreg_range(0X8051620A,"T",0X1,3);
	split_sreg_range(0X8051620E,"T",0X1,3);
	split_sreg_range(0X80516214,"T",0X1,3);
	split_sreg_range(0X80516230,"T",0X1,3);
	split_sreg_range(0X80516246,"T",0X1,3);
	split_sreg_range(0X80516258,"T",0X1,3);
	split_sreg_range(0X805162D8,"T",0X1,3);
	split_sreg_range(0X805162E0,"T",0X1,3);
	split_sreg_range(0X805162FA,"T",0X1,3);
	split_sreg_range(0X80516324,"T",0X1,3);
	split_sreg_range(0X80516328,"T",0X1,3);
	split_sreg_range(0X8051632A,"T",0X1,3);
	split_sreg_range(0X8051633C,"T",0X1,3);
	split_sreg_range(0X80516350,"T",0X1,3);
	split_sreg_range(0X80516388,"T",0X1,3);
	split_sreg_range(0X8051638E,"T",0X1,3);
	split_sreg_range(0X805163A4,"T",0X1,3);
	split_sreg_range(0X805163B0,"T",0X1,3);
	split_sreg_range(0X805163D0,"T",0X1,3);
	split_sreg_range(0X805163E4,"T",0X1,3);
	split_sreg_range(0X805163F0,"T",0X1,3);
	split_sreg_range(0X805163F4,"T",0X1,3);
	split_sreg_range(0X80516418,"T",0X1,3);
	split_sreg_range(0X8051641E,"T",0X1,3);
	split_sreg_range(0X80516422,"T",0X1,3);
	split_sreg_range(0X8051643A,"T",0X1,3);
	split_sreg_range(0X80516462,"T",0X1,3);
	split_sreg_range(0X80516478,"T",0X1,3);
	split_sreg_range(0X8051648C,"T",0X1,3);
	split_sreg_range(0X805164A8,"T",0X1,3);
	split_sreg_range(0X805164F2,"T",0X1,3);
	split_sreg_range(0X80516520,"T",0X1,3);
	split_sreg_range(0X8051652E,"T",0X1,3);
	split_sreg_range(0X80516540,"T",0X1,3);
	split_sreg_range(0X80516542,"T",0X1,3);
	split_sreg_range(0X80516548,"T",0X1,3);
	split_sreg_range(0X8051654E,"T",0X1,3);
	split_sreg_range(0X80516552,"T",0X1,3);
	split_sreg_range(0X80516564,"T",0X1,3);
	split_sreg_range(0X8051657C,"T",0X1,3);
	split_sreg_range(0X8051658E,"T",0X1,3);
	split_sreg_range(0X80516598,"T",0X1,3);
	split_sreg_range(0X805165A4,"T",0X1,3);
	split_sreg_range(0X805165BE,"T",0X1,3);
	split_sreg_range(0X805165C4,"T",0X1,3);
	split_sreg_range(0X805165D6,"T",0X1,3);
	split_sreg_range(0X805165DA,"T",0X1,3);
	split_sreg_range(0X805165E6,"T",0X1,3);
	split_sreg_range(0X80516614,"T",0X1,3);
	split_sreg_range(0X80516634,"T",0X1,3);
	split_sreg_range(0X80516668,"T",0X1,3);
	split_sreg_range(0X80516682,"T",0X1,3);
	split_sreg_range(0X805166E0,"T",0X1,3);
	split_sreg_range(0X805166EA,"T",0X1,3);
	split_sreg_range(0X805166F4,"T",0X1,3);
	split_sreg_range(0X805166FE,"T",0X1,3);
	split_sreg_range(0X80516708,"T",0X1,3);
	split_sreg_range(0X8051671C,"T",0X1,3);
	split_sreg_range(0X80516728,"T",0X1,3);
	split_sreg_range(0X80516752,"T",0X1,3);
	split_sreg_range(0X80516754,"T",0X1,3);
	split_sreg_range(0X8051675C,"T",0X1,3);
	split_sreg_range(0X8051675E,"T",0X1,3);
	split_sreg_range(0X80516794,"T",0X1,3);
	split_sreg_range(0X805167A4,"T",0X1,3);
	split_sreg_range(0X805167AC,"T",0X1,3);
	split_sreg_range(0X805167B2,"T",0X1,3);
	split_sreg_range(0X805167F8,"T",0X1,3);
	split_sreg_range(0X805167FE,"T",0X1,3);
	split_sreg_range(0X8051680A,"T",0X1,3);
	split_sreg_range(0X80516810,"T",0X1,3);
	split_sreg_range(0X80516820,"T",0X1,3);
	split_sreg_range(0X80516826,"T",0X1,3);
	split_sreg_range(0X80516832,"T",0X1,3);
	split_sreg_range(0X80516838,"T",0X1,3);
	split_sreg_range(0X8051683E,"T",0X1,3);
	split_sreg_range(0X80516848,"T",0X1,3);
	split_sreg_range(0X80516858,"T",0X1,3);
	split_sreg_range(0X8051686C,"T",0X1,3);
	split_sreg_range(0X80516886,"T",0X1,3);
	split_sreg_range(0X8051688C,"T",0X1,3);
	split_sreg_range(0X8051689A,"T",0X1,3);
	split_sreg_range(0X805168A4,"T",0X1,3);
	split_sreg_range(0X805168B4,"T",0X1,3);
	split_sreg_range(0X805168BA,"T",0X1,3);
	split_sreg_range(0X805168E6,"T",0X1,3);
	split_sreg_range(0X805168EA,"T",0X1,3);
	split_sreg_range(0X805168F4,"T",0X1,3);
	split_sreg_range(0X80516900,"T",0X1,3);
	split_sreg_range(0X80516908,"T",0X1,3);
	split_sreg_range(0X80516910,"T",0X1,3);
	split_sreg_range(0X80516928,"T",0X1,3);
	split_sreg_range(0X80516938,"T",0X1,3);
	split_sreg_range(0X8051694E,"T",0X1,3);
	split_sreg_range(0X80516990,"T",0X1,3);
	split_sreg_range(0X805169A6,"T",0X1,3);
	split_sreg_range(0X805169AC,"T",0X1,3);
	split_sreg_range(0X805169D6,"T",0X1,3);
	split_sreg_range(0X805169EE,"T",0X1,3);
	split_sreg_range(0X805169F0,"T",0X1,3);
	split_sreg_range(0X80516A00,"T",0X1,3);
	split_sreg_range(0X80516A14,"T",0X1,3);
	split_sreg_range(0X80516A2E,"T",0X1,3);
	split_sreg_range(0X80516A34,"T",0X1,3);
	split_sreg_range(0X80516A42,"T",0X1,3);
	split_sreg_range(0X80516A4C,"T",0X1,3);
	split_sreg_range(0X80516A60,"T",0X1,3);
	split_sreg_range(0X80516A6A,"T",0X1,3);
	split_sreg_range(0X80516A78,"T",0X1,3);
	split_sreg_range(0X80516AC2,"T",0X1,3);
	split_sreg_range(0X80516AD2,"T",0X1,3);
	split_sreg_range(0X80516B3C,"T",0X1,3);
	split_sreg_range(0X80516B46,"T",0X1,3);
	split_sreg_range(0X80516B50,"T",0X1,3);
	split_sreg_range(0X80516BB0,"T",0X1,3);
	split_sreg_range(0X80516BDA,"T",0X1,3);
	split_sreg_range(0X80516BE4,"T",0X1,3);
	split_sreg_range(0X80516C10,"T",0,2);
	split_sreg_range(0X80516C1C,"T",0,3);
	split_sreg_range(0X80516C28,"T",0,3);
	split_sreg_range(0X80516C48,"T",0,3);
	split_sreg_range(0X80516C88,"T",0,3);
	split_sreg_range(0X80516CF8,"T",0,3);
	split_sreg_range(0X80516D2C,"T",0,3);
	split_sreg_range(0X80516D30,"T",0,3);
	split_sreg_range(0X80516D44,"T",0,3);
	split_sreg_range(0X80516D54,"T",0,3);
	split_sreg_range(0X80516D94,"T",0,3);
	split_sreg_range(0X80516DB0,"T",0,3);
	split_sreg_range(0X80516DB8,"T",0,3);
	split_sreg_range(0X80516DCC,"T",0,3);
	split_sreg_range(0X80516E08,"T",0,3);
	split_sreg_range(0X80516E0C,"T",0,3);
	split_sreg_range(0X80516E28,"T",0,3);
	split_sreg_range(0X80516E34,"T",0,3);
	split_sreg_range(0X80516E44,"T",0,3);
	split_sreg_range(0X80516E58,"T",0,3);
	split_sreg_range(0X80516E94,"T",0,3);
	split_sreg_range(0X80516E98,"T",0,3);
	split_sreg_range(0X80516EB4,"T",0,3);
	split_sreg_range(0X80516EC0,"T",0,3);
	split_sreg_range(0X80516ED0,"T",0,3);
	split_sreg_range(0X80516EE4,"T",0,3);
	split_sreg_range(0X80516F20,"T",0,3);
	split_sreg_range(0X80516F24,"T",0,3);
	split_sreg_range(0X80516F40,"T",0,3);
	split_sreg_range(0X80516F4C,"T",0,3);
	split_sreg_range(0X80516F5C,"T",0,3);
	split_sreg_range(0X80516F7C,"T",0,3);
	split_sreg_range(0X80516F8C,"T",0,3);
	split_sreg_range(0X80516F98,"T",0,3);
	split_sreg_range(0X80516FB8,"T",0,3);
	split_sreg_range(0X80516FC8,"T",0,3);
	split_sreg_range(0X80516FD4,"T",0,3);
	split_sreg_range(0X80516FDC,"T",0,3);
	split_sreg_range(0X80517014,"T",0,3);
	split_sreg_range(0X8051701C,"T",0,3);
	split_sreg_range(0X80517024,"T",0,3);
	split_sreg_range(0X8051703C,"T",0,3);
	split_sreg_range(0X80517044,"T",0,3);
	split_sreg_range(0X8051704C,"T",0,3);
	split_sreg_range(0X8051706C,"T",0,3);
	split_sreg_range(0X80517094,"T",0,3);
	split_sreg_range(0X805170A0,"T",0,3);
	split_sreg_range(0X805170D8,"T",0,3);
	split_sreg_range(0X805170E0,"T",0,3);
	split_sreg_range(0X80517118,"T",0,3);
	split_sreg_range(0X80517124,"T",0,3);
	split_sreg_range(0X8051715C,"T",0,3);
	split_sreg_range(0X80517168,"T",0,3);
	split_sreg_range(0X805171A0,"T",0,3);
	split_sreg_range(0X805171A4,"T",0,3);
	split_sreg_range(0X805171B0,"T",0,3);
	split_sreg_range(0X80517210,"T",0,3);
	split_sreg_range(0X8051721C,"T",0,3);
	split_sreg_range(0X80517280,"T",0X1,3);
	split_sreg_range(0X80517286,"T",0X1,3);
	split_sreg_range(0X80517290,"T",0X1,3);
	split_sreg_range(0X80517298,"T",0X1,3);
	split_sreg_range(0X805172A8,"T",0X1,3);
	split_sreg_range(0X805172D0,"T",0X1,3);
	split_sreg_range(0X805172D1,"T",0X1,2);
	split_sreg_range(0X80517306,"T",0X1,3);
	split_sreg_range(0X80517312,"T",0X1,3);
	split_sreg_range(0X8051731C,"T",0X1,3);
	split_sreg_range(0X80517328,"T",0X1,3);
	split_sreg_range(0X80517338,"T",0X1,3);
	split_sreg_range(0X80517354,"T",0X1,3);
	split_sreg_range(0X80517370,"T",0X1,3);
	split_sreg_range(0X805173A2,"T",0X1,3);
	split_sreg_range(0X805173AE,"T",0X1,3);
	split_sreg_range(0X805173B8,"T",0X1,3);
	split_sreg_range(0X805173DA,"T",0X1,3);
	split_sreg_range(0X805173E8,"T",0X1,3);
	split_sreg_range(0X805173EE,"T",0X1,3);
	split_sreg_range(0X805173F8,"T",0X1,3);
	split_sreg_range(0X80517478,"T",0X1,3);
	split_sreg_range(0X80517484,"T",0X1,3);
	split_sreg_range(0X8051749E,"T",0X1,3);
	split_sreg_range(0X805174D6,"T",0X1,3);
	split_sreg_range(0X805174E0,"T",0X1,3);
	split_sreg_range(0X805174F0,"T",0X1,3);
	split_sreg_range(0X805174F6,"T",0X1,3);
	split_sreg_range(0X8051751E,"T",0X1,3);
	split_sreg_range(0X8051752E,"T",0X1,3);
	split_sreg_range(0X805175F4,"T",0X1,3);
	split_sreg_range(0X80517602,"T",0X1,3);
	split_sreg_range(0X8051761C,"T",0X1,3);
	split_sreg_range(0X80517626,"T",0X1,3);
	split_sreg_range(0X80517630,"T",0X1,3);
	split_sreg_range(0X8051763E,"T",0X1,3);
	split_sreg_range(0X80517658,"T",0X1,3);
	split_sreg_range(0X80517662,"T",0X1,3);
	split_sreg_range(0X8051766C,"T",0X1,3);
	split_sreg_range(0X8051767A,"T",0X1,3);
	split_sreg_range(0X80517694,"T",0X1,3);
	split_sreg_range(0X8051769E,"T",0X1,3);
	split_sreg_range(0X805176A8,"T",0X1,3);
	split_sreg_range(0X805176B2,"T",0X1,3);
	split_sreg_range(0X805176CA,"T",0X1,3);
	split_sreg_range(0X805176D4,"T",0X1,3);
	split_sreg_range(0X805176E0,"T",0X1,3);
	split_sreg_range(0X805176EA,"T",0X1,3);
	split_sreg_range(0X80517702,"T",0X1,3);
	split_sreg_range(0X8051770C,"T",0X1,3);
	split_sreg_range(0X80517722,"T",0X1,3);
	split_sreg_range(0X8051773A,"T",0X1,3);
	split_sreg_range(0X80517744,"T",0X1,3);
	split_sreg_range(0X8051775A,"T",0X1,3);
	split_sreg_range(0X8051776E,"T",0X1,3);
	split_sreg_range(0X80517778,"T",0X1,3);
	split_sreg_range(0X8051778E,"T",0X1,3);
	split_sreg_range(0X8051779C,"T",0X1,3);
	split_sreg_range(0X805177AC,"T",0X1,3);
	split_sreg_range(0X805177B8,"T",0X1,3);
	split_sreg_range(0X805177F4,"T",0X1,3);
	split_sreg_range(0X80517962,"T",0X1,3);
	split_sreg_range(0X80517964,"T",0X1,3);
	split_sreg_range(0X8051796A,"T",0X1,3);
	split_sreg_range(0X8051796E,"T",0X1,3);
	split_sreg_range(0X80517980,"T",0X1,3);
	split_sreg_range(0X805179EE,"T",0X1,3);
	split_sreg_range(0X805179F8,"T",0X1,3);
	split_sreg_range(0X80517A02,"T",0X1,3);
	split_sreg_range(0X80517A0E,"T",0X1,3);
	split_sreg_range(0X80517A1C,"T",0X1,3);
	split_sreg_range(0X80517A26,"T",0X1,3);
	split_sreg_range(0X80517A30,"T",0X1,3);
	split_sreg_range(0X80517A40,"T",0X1,3);
	split_sreg_range(0X80517A4A,"T",0X1,3);
	split_sreg_range(0X80517A56,"T",0X1,3);
	split_sreg_range(0X80517A64,"T",0X1,3);
	split_sreg_range(0X80517A6E,"T",0X1,3);
	split_sreg_range(0X80517A7A,"T",0X1,3);
	split_sreg_range(0X80517A92,"T",0X1,3);
	split_sreg_range(0X80517AA8,"T",0X1,3);
	split_sreg_range(0X80517AB0,"T",0X1,3);
	split_sreg_range(0X80517ABA,"T",0X1,3);
	split_sreg_range(0X80517AD0,"T",0X1,3);
	split_sreg_range(0X80517AD8,"T",0X1,3);
	split_sreg_range(0X80517AE2,"T",0X1,3);
	split_sreg_range(0X80517AF8,"T",0X1,3);
	split_sreg_range(0X80517B00,"T",0X1,3);
	split_sreg_range(0X80517B0A,"T",0X1,3);
	split_sreg_range(0X80517B20,"T",0X1,3);
	split_sreg_range(0X80517B3C,"T",0X1,3);
	split_sreg_range(0X80517B5C,"T",0X1,3);
	split_sreg_range(0X80517B64,"T",0X1,3);
	split_sreg_range(0X80517B82,"T",0X1,3);
	split_sreg_range(0X80517B8C,"T",0X1,3);
	split_sreg_range(0X80517B94,"T",0X1,3);
	split_sreg_range(0X80517BAA,"T",0X1,3);
	split_sreg_range(0X80517BB2,"T",0X1,3);
	split_sreg_range(0X80517BCA,"T",0X1,3);
	split_sreg_range(0X80517BD4,"T",0X1,3);
	split_sreg_range(0X80517BDC,"T",0X1,3);
	split_sreg_range(0X80517BF4,"T",0X1,3);
	split_sreg_range(0X80517C1A,"T",0X1,3);
	split_sreg_range(0X80517C4C,"T",0X1,3);
	split_sreg_range(0X80517C86,"T",0X1,3);
	split_sreg_range(0X80517C96,"T",0X1,3);
	split_sreg_range(0X80517CA6,"T",0X1,3);
	split_sreg_range(0X80517CB0,"T",0X1,3);
	split_sreg_range(0X80517CB8,"T",0X1,3);
	split_sreg_range(0X80517D06,"T",0X1,3);
	split_sreg_range(0X80517D0A,"T",0X1,3);
	split_sreg_range(0X80517D0E,"T",0X1,3);
	split_sreg_range(0X80517D14,"T",0X1,3);
	split_sreg_range(0X80517D18,"T",0X1,3);
	split_sreg_range(0X80517D1C,"T",0X1,3);
	split_sreg_range(0X80517D1E,"T",0X1,3);
	split_sreg_range(0X80517D22,"T",0X1,3);
	split_sreg_range(0X80517D24,"T",0X1,3);
	split_sreg_range(0X80517D64,"T",0X1,3);
	split_sreg_range(0X80517D96,"T",0X1,3);
	split_sreg_range(0X80517DB8,"T",0X1,3);
	split_sreg_range(0X80517DBC,"T",0X1,3);
	split_sreg_range(0X80517DE4,"T",0X1,3);
	split_sreg_range(0X80517E10,"T",0X1,3);
	split_sreg_range(0X80517E3C,"T",0X1,3);
	split_sreg_range(0X80517E90,"T",0X1,3);
	split_sreg_range(0X80517EAE,"T",0X1,3);
	split_sreg_range(0X80517EE6,"T",0X1,3);
	split_sreg_range(0X80517F12,"T",0X1,3);
	split_sreg_range(0X80517F64,"T",0X1,3);
	split_sreg_range(0X80517F68,"T",0X1,3);
	split_sreg_range(0X80517F6E,"T",0X1,3);
	split_sreg_range(0X80517F88,"T",0X1,3);
	split_sreg_range(0X80517FBC,"T",0X1,3);
	split_sreg_range(0X80517FEC,"T",0X1,3);
	split_sreg_range(0X80518020,"T",0X1,3);
	split_sreg_range(0X80518048,"T",0X1,3);
	split_sreg_range(0X8051806C,"T",0X1,3);
	split_sreg_range(0X80518086,"T",0X1,3);
	split_sreg_range(0X805180C2,"T",0X1,3);
	split_sreg_range(0X805180D8,"T",0X1,3);
	split_sreg_range(0X80518104,"T",0X1,3);
	split_sreg_range(0X80518114,"T",0X1,3);
	split_sreg_range(0X8051812E,"T",0X1,3);
	split_sreg_range(0X8051813E,"T",0X1,3);
	split_sreg_range(0X8051815A,"T",0X1,3);
	split_sreg_range(0X80518190,"T",0,3);
	split_sreg_range(0X805181BC,"T",0,3);
	split_sreg_range(0X80518200,"T",0,3);
	split_sreg_range(0X8051821C,"T",0,3);
	split_sreg_range(0X80518248,"T",0,3);
	split_sreg_range(0X80518274,"T",0,3);
	split_sreg_range(0X80518288,"T",0,3);
	split_sreg_range(0X805182C0,"T",0,3);
	split_sreg_range(0X805182E0,"T",0X1,3);
	split_sreg_range(0X805182F0,"T",0X1,3);
	split_sreg_range(0X805182FA,"T",0X1,3);
	split_sreg_range(0X80518316,"T",0X1,3);
	split_sreg_range(0X8051831E,"T",0X1,3);
	split_sreg_range(0X8051832A,"T",0X1,3);
	split_sreg_range(0X8051832C,"T",0X1,3);
	split_sreg_range(0X80518330,"T",0X1,3);
	split_sreg_range(0X80518334,"T",0X1,3);
	split_sreg_range(0X80518336,"T",0X1,3);
	split_sreg_range(0X80518342,"T",0X1,3);
	split_sreg_range(0X805183E8,"T",0X1,3);
	split_sreg_range(0X805183FA,"T",0X1,3);
	split_sreg_range(0X8051841C,"T",0X1,3);
	split_sreg_range(0X80518436,"T",0X1,3);
	split_sreg_range(0X80518442,"T",0X1,3);
	split_sreg_range(0X805184D3,"T",0X1,2);
	split_sreg_range(0X805184D4,"T",0X1,3);
	split_sreg_range(0X805184DA,"T",0X1,3);
	split_sreg_range(0X805184E8,"T",0X1,3);
	split_sreg_range(0X805184EC,"T",0X1,3);
	split_sreg_range(0X805184EE,"T",0X1,3);
	split_sreg_range(0X80518536,"T",0X1,3);
	split_sreg_range(0X8051853A,"T",0X1,3);
	split_sreg_range(0X80518560,"T",0X1,3);
	split_sreg_range(0X8051859E,"T",0X1,3);
	split_sreg_range(0X805185CA,"T",0X1,3);
	split_sreg_range(0X805185E4,"T",0X1,3);
	split_sreg_range(0X80518634,"T",0X1,3);
	split_sreg_range(0X8051864C,"T",0X1,3);
	split_sreg_range(0X80518674,"T",0X1,3);
	split_sreg_range(0X80518688,"T",0X1,3);
	split_sreg_range(0X805186A4,"T",0X1,3);
	split_sreg_range(0X805186B6,"T",0X1,3);
	split_sreg_range(0X805186C8,"T",0X1,3);
	split_sreg_range(0X805186DE,"T",0X1,3);
	split_sreg_range(0X805186E8,"T",0X1,3);
	split_sreg_range(0X805186EC,"T",0X1,3);
	split_sreg_range(0X80518706,"T",0X1,3);
	split_sreg_range(0X80518730,"T",0X1,3);
	split_sreg_range(0X8051875C,"T",0X1,3);
	split_sreg_range(0X8051876A,"T",0X1,3);
	split_sreg_range(0X80518778,"T",0X1,3);
	split_sreg_range(0X8051878A,"T",0X1,3);
	split_sreg_range(0X805187C2,"T",0X1,3);
	split_sreg_range(0X805187C4,"T",0X1,3);
	split_sreg_range(0X805187CC,"T",0X1,3);
	split_sreg_range(0X805187FE,"T",0X1,3);
	split_sreg_range(0X8051880A,"T",0X1,3);
	split_sreg_range(0X80518822,"T",0X1,3);
	split_sreg_range(0X80518858,"T",0X1,3);
	split_sreg_range(0X80518868,"T",0X1,3);
	split_sreg_range(0X8051888A,"T",0X1,3);
	split_sreg_range(0X8051889E,"T",0X1,3);
	split_sreg_range(0X805188A4,"T",0X1,3);
	split_sreg_range(0X805188AC,"T",0X1,3);
	split_sreg_range(0X805188AE,"T",0X1,3);
	split_sreg_range(0X805188B4,"T",0X1,3);
	split_sreg_range(0X805188B8,"T",0X1,3);
	split_sreg_range(0X80518924,"T",0X1,3);
	split_sreg_range(0X8051892A,"T",0X1,3);
	split_sreg_range(0X80518936,"T",0X1,2);
	split_sreg_range(0X80518956,"T",0X1,3);
	split_sreg_range(0X80518968,"T",0X1,3);
	split_sreg_range(0X8051897E,"T",0X1,3);
	split_sreg_range(0X80518982,"T",0X1,3);
	split_sreg_range(0X805189A0,"T",0X1,3);
	split_sreg_range(0X80518A16,"T",0X1,3);
	split_sreg_range(0X80518A38,"T",0X1,3);
	split_sreg_range(0X80518A3A,"T",0X1,3);
	split_sreg_range(0X80518A40,"T",0X1,3);
	split_sreg_range(0X80518A68,"T",0X1,2);
	split_sreg_range(0X80518A6C,"T",0X1,3);
	split_sreg_range(0X80518A70,"T",0,2);
	split_sreg_range(0X80518A72,"T",0,2);
	split_sreg_range(0X80518A74,"T",0,2);
	split_sreg_range(0X80518A78,"T",0,2);
	split_sreg_range(0X80518A80,"T",0,2);
	split_sreg_range(0X80518A88,"T",0,2);
	split_sreg_range(0X80518A90,"T",0,2);
	split_sreg_range(0X80518AA6,"T",0,2);
	split_sreg_range(0X80518AA8,"T",0,2);
	split_sreg_range(0X80518ABC,"T",0,2);
	split_sreg_range(0X80518AC0,"T",0X1,2);
	split_sreg_range(0X80518ACA,"T",0X1,3);
	split_sreg_range(0X80518AEE,"T",0X1,3);
	split_sreg_range(0X80518AF4,"T",0X1,3);
	split_sreg_range(0X80518B00,"T",0X1,3);
	split_sreg_range(0X80518B40,"T",0X1,3);
	split_sreg_range(0X80518BF0,"T",0X1,2);
	split_sreg_range(0X80518CA8,"T",0X1,3);
	split_sreg_range(0X80518CD8,"T",0X1,3);
	split_sreg_range(0X80518CE0,"T",0X1,3);
	split_sreg_range(0X80518CF0,"T",0X1,3);
	split_sreg_range(0X80518CFA,"T",0X1,3);
	split_sreg_range(0X80518D02,"T",0X1,3);
	split_sreg_range(0X80518D2E,"T",0X1,3);
	split_sreg_range(0X80518D48,"T",0X1,3);
	split_sreg_range(0X80518D6A,"T",0X1,3);
	split_sreg_range(0X80518D72,"T",0X1,3);
	split_sreg_range(0X80518D8C,"T",0X1,3);
	split_sreg_range(0X80518D94,"T",0X1,3);
	split_sreg_range(0X80518D9E,"T",0X1,3);
	split_sreg_range(0X80518DB8,"T",0X1,3);
	split_sreg_range(0X80518DBC,"T",0X1,3);
	split_sreg_range(0X80518DDE,"T",0X1,3);
	split_sreg_range(0X80518DE6,"T",0X1,3);
	split_sreg_range(0X80518E00,"T",0X1,3);
	split_sreg_range(0X80518E04,"T",0X1,3);
	split_sreg_range(0X80518E0E,"T",0X1,3);
	split_sreg_range(0X80518E28,"T",0X1,3);
	split_sreg_range(0X80518E4C,"T",0X1,3);
	split_sreg_range(0X80518E54,"T",0X1,3);
	split_sreg_range(0X80518E7C,"T",0X1,3);
	split_sreg_range(0X80518E86,"T",0X1,3);
	split_sreg_range(0X80518E94,"T",0X1,3);
	split_sreg_range(0X80518E9E,"T",0X1,3);
	split_sreg_range(0X80518EA0,"T",0X1,3);
	split_sreg_range(0X80518EB8,"T",0X1,3);
	split_sreg_range(0X80518EDA,"T",0X1,3);
	split_sreg_range(0X80518EF4,"T",0X1,3);
	split_sreg_range(0X80518EFA,"T",0X1,3);
	split_sreg_range(0X80518F00,"T",0X1,3);
	split_sreg_range(0X80518F24,"T",0X1,3);
	split_sreg_range(0X80518FDC,"T",0X1,3);
	split_sreg_range(0X80518FFC,"T",0X1,3);
	split_sreg_range(0X80519018,"T",0X1,3);
	split_sreg_range(0X8051901C,"T",0X1,3);
	split_sreg_range(0X80519024,"T",0X1,3);
	split_sreg_range(0X80519052,"T",0X1,3);
	split_sreg_range(0X80519056,"T",0X1,3);
	split_sreg_range(0X80519060,"T",0X1,3);
	split_sreg_range(0X80519080,"T",0X1,3);
	split_sreg_range(0X805190A2,"T",0X1,3);
	split_sreg_range(0X805190C0,"T",0X1,3);
	split_sreg_range(0X805190C2,"T",0X1,3);
	split_sreg_range(0X805190D0,"T",0X1,3);
	split_sreg_range(0X805190D8,"T",0X1,3);
	split_sreg_range(0X805190F4,"T",0X1,3);
	split_sreg_range(0X805190FE,"T",0X1,3);
	split_sreg_range(0X80519138,"T",0X1,3);
	split_sreg_range(0X8051913E,"T",0X1,3);
	split_sreg_range(0X80519144,"T",0X1,3);
	split_sreg_range(0X8051915C,"T",0X1,3);
	split_sreg_range(0X8051916C,"T",0X1,3);
	split_sreg_range(0X80519170,"T",0X1,3);
	split_sreg_range(0X805191F6,"T",0X1,3);
	split_sreg_range(0X80519234,"T",0X1,3);
	split_sreg_range(0X8051927A,"T",0X1,3);
	split_sreg_range(0X80519282,"T",0X1,3);
	split_sreg_range(0X805192AC,"T",0X1,3);
	split_sreg_range(0X805192B0,"T",0X1,3);
	split_sreg_range(0X805192B8,"T",0X1,3);
	split_sreg_range(0X805192D4,"T",0X1,3);
	split_sreg_range(0X805192F2,"T",0X1,3);
	split_sreg_range(0X8051932C,"T",0X1,3);
	split_sreg_range(0X80519356,"T",0X1,3);
	split_sreg_range(0X8051935E,"T",0X1,3);
	split_sreg_range(0X8051936C,"T",0X1,3);
	split_sreg_range(0X8051939E,"T",0X1,3);
	split_sreg_range(0X805193C6,"T",0X1,3);
	split_sreg_range(0X805193D0,"T",0X1,3);
	split_sreg_range(0X805193F8,"T",0X1,3);
	split_sreg_range(0X80519454,"T",0X1,3);
	split_sreg_range(0X8051946C,"T",0X1,3);
	split_sreg_range(0X80519484,"T",0X1,3);
	split_sreg_range(0X805194A6,"T",0X1,3);
	split_sreg_range(0X805194AE,"T",0X1,3);
	split_sreg_range(0X805194C4,"T",0X1,3);
	split_sreg_range(0X805194C6,"T",0X1,3);
	split_sreg_range(0X805194CE,"T",0X1,3);
	split_sreg_range(0X805194E4,"T",0X1,3);
	split_sreg_range(0X805194EA,"T",0X1,3);
	split_sreg_range(0X80519512,"T",0X1,3);
	split_sreg_range(0X8051951C,"T",0X1,3);
	split_sreg_range(0X80519520,"T",0X1,3);
	split_sreg_range(0X8051954C,"T",0X1,3);
	split_sreg_range(0X80519558,"T",0X1,3);
	split_sreg_range(0X80519588,"T",0X1,3);
	split_sreg_range(0X80519594,"T",0X1,3);
	split_sreg_range(0X805195BC,"T",0X1,3);
	split_sreg_range(0X805195C4,"T",0X1,3);
	split_sreg_range(0X805195D2,"T",0X1,3);
	split_sreg_range(0X805195F0,"T",0X1,3);
	split_sreg_range(0X805195FC,"T",0X1,3);
	split_sreg_range(0X80519606,"T",0X1,3);
	split_sreg_range(0X8051961A,"T",0X1,3);
	split_sreg_range(0X80519638,"T",0X1,3);
	split_sreg_range(0X80519642,"T",0X1,3);
	split_sreg_range(0X80519648,"T",0X1,3);
	split_sreg_range(0X80519650,"T",0X1,3);
	split_sreg_range(0X80519672,"T",0X1,3);
	split_sreg_range(0X80519678,"T",0X1,3);
	split_sreg_range(0X80519684,"T",0X1,3);
	split_sreg_range(0X805196AC,"T",0X1,3);
	split_sreg_range(0X805196B6,"T",0X1,3);
	split_sreg_range(0X805196BC,"T",0X1,3);
	split_sreg_range(0X805196C8,"T",0X1,3);
	split_sreg_range(0X805196CE,"T",0X1,3);
	split_sreg_range(0X805196D4,"T",0X1,3);
	split_sreg_range(0X80519714,"T",0X1,3);
	split_sreg_range(0X80519736,"T",0X1,3);
	split_sreg_range(0X80519742,"T",0X1,3);
	split_sreg_range(0X8051975C,"T",0X1,3);
	split_sreg_range(0X80519760,"T",0X1,3);
	split_sreg_range(0X80519768,"T",0X1,3);
	split_sreg_range(0X80519776,"T",0X1,3);
	split_sreg_range(0X80519778,"T",0X1,3);
	split_sreg_range(0X80519790,"T",0X1,3);
	split_sreg_range(0X805197B0,"T",0X1,3);
	split_sreg_range(0X805197C6,"T",0X1,3);
	split_sreg_range(0X805197CA,"T",0X1,3);
	split_sreg_range(0X805197D4,"T",0X1,3);
	split_sreg_range(0X805197E6,"T",0X1,3);
	split_sreg_range(0X80519800,"T",0X1,3);
	split_sreg_range(0X8051985C,"T",0X1,3);
	split_sreg_range(0X8051987C,"T",0X1,3);
	split_sreg_range(0X80519892,"T",0X1,3);
	split_sreg_range(0X80519896,"T",0X1,3);
	split_sreg_range(0X805198A0,"T",0X1,3);
	split_sreg_range(0X805198B2,"T",0X1,3);
	split_sreg_range(0X805198CC,"T",0X1,3);
	split_sreg_range(0X80519924,"T",0X1,3);
	split_sreg_range(0X8051994A,"T",0X1,3);
	split_sreg_range(0X8051994E,"T",0X1,3);
	split_sreg_range(0X80519960,"T",0X1,3);
	split_sreg_range(0X80519966,"T",0X1,3);
	split_sreg_range(0X80519978,"T",0X1,3);
	split_sreg_range(0X80519986,"T",0X1,3);
	split_sreg_range(0X80519992,"T",0X1,3);
	split_sreg_range(0X805199BC,"T",0X1,3);
	split_sreg_range(0X805199D4,"T",0X1,3);
	split_sreg_range(0X805199D8,"T",0X1,3);
	split_sreg_range(0X80519A00,"T",0X1,3);
	split_sreg_range(0X80519A1E,"T",0X1,3);
	split_sreg_range(0X80519A24,"T",0X1,3);
	split_sreg_range(0X80519A26,"T",0X1,3);
	split_sreg_range(0X80519A6A,"T",0X1,3);
	split_sreg_range(0X80519AA8,"T",0X1,3);
	split_sreg_range(0X80519ADA,"T",0X1,3);
	split_sreg_range(0X80519AE6,"T",0X1,3);
	split_sreg_range(0X80519AFA,"T",0X1,3);
	split_sreg_range(0X80519B1A,"T",0X1,3);
	split_sreg_range(0X80519B6A,"T",0X1,3);
	split_sreg_range(0X80519B70,"T",0X1,3);
	split_sreg_range(0X80519BAC,"T",0X1,3);
	split_sreg_range(0X80519BD2,"T",0X1,3);
	split_sreg_range(0X80519BEA,"T",0X1,3);
	split_sreg_range(0X80519BEE,"T",0X1,3);
	split_sreg_range(0X80519C24,"T",0X1,3);
	split_sreg_range(0X80519C38,"T",0X1,3);
	split_sreg_range(0X80519C3E,"T",0X1,3);
	split_sreg_range(0X80519C5A,"T",0X1,3);
	split_sreg_range(0X80519C98,"T",0X1,3);
	split_sreg_range(0X80519CA6,"T",0X1,3);
	split_sreg_range(0X80519CAC,"T",0X1,3);
	split_sreg_range(0X80519CC0,"T",0X1,3);
	split_sreg_range(0X80519CE0,"T",0X1,3);
	split_sreg_range(0X80519CFA,"T",0X1,3);
	split_sreg_range(0X80519D0E,"T",0X1,3);
	split_sreg_range(0X80519D1A,"T",0X1,3);
	split_sreg_range(0X80519D1E,"T",0X1,3);
	split_sreg_range(0X80519D4C,"T",0X1,3);
	split_sreg_range(0X80519D7E,"T",0X1,3);
	split_sreg_range(0X80519D8E,"T",0X1,3);
	split_sreg_range(0X80519DAA,"T",0X1,3);
	split_sreg_range(0X80519DC6,"T",0X1,3);
	split_sreg_range(0X80519E2C,"T",0X1,3);
	split_sreg_range(0X80519E36,"T",0X1,3);
	split_sreg_range(0X80519E80,"T",0X1,3);
	split_sreg_range(0X80519EBC,"T",0X1,3);
	split_sreg_range(0X80519EE2,"T",0X1,3);
	split_sreg_range(0X80519EFA,"T",0X1,3);
	split_sreg_range(0X80519EFE,"T",0X1,3);
	split_sreg_range(0X80519F06,"T",0X1,3);
	split_sreg_range(0X80519F2C,"T",0X1,3);
	split_sreg_range(0X80519F36,"T",0X1,3);
	split_sreg_range(0X80519F74,"T",0X1,3);
	split_sreg_range(0X80519F82,"T",0X1,3);
	split_sreg_range(0X80519FAC,"T",0X1,3);
	split_sreg_range(0X80519FCE,"T",0X1,3);
	split_sreg_range(0X80519FE6,"T",0X1,3);
	split_sreg_range(0X80519FEA,"T",0X1,3);
	split_sreg_range(0X80519FF2,"T",0X1,3);
	split_sreg_range(0X8051A00E,"T",0X1,3);
	split_sreg_range(0X8051A018,"T",0X1,3);
	split_sreg_range(0X8051A02C,"T",0X1,3);
	split_sreg_range(0X8051A030,"T",0X1,3);
	split_sreg_range(0X8051A03A,"T",0X1,3);
	split_sreg_range(0X8051A05C,"T",0X1,3);
	split_sreg_range(0X8051A082,"T",0X1,3);
	split_sreg_range(0X8051A09A,"T",0X1,3);
	split_sreg_range(0X8051A09E,"T",0X1,3);
	split_sreg_range(0X8051A0A6,"T",0X1,3);
	split_sreg_range(0X8051A0C4,"T",0X1,3);
	split_sreg_range(0X8051A0C8,"T",0X1,3);
	split_sreg_range(0X8051A0E0,"T",0X1,3);
	split_sreg_range(0X8051A0E6,"T",0X1,3);
	split_sreg_range(0X8051A0EC,"T",0X1,3);
	split_sreg_range(0X8051A118,"T",0X1,3);
	split_sreg_range(0X8051A140,"T",0X1,3);
	split_sreg_range(0X8051A14E,"T",0X1,3);
	split_sreg_range(0X8051A1A4,"T",0X1,3);
	split_sreg_range(0X8051A1AC,"T",0X1,3);
	split_sreg_range(0X8051A1CC,"T",0X1,3);
	split_sreg_range(0X8051A1DA,"T",0X1,3);
	split_sreg_range(0X8051A218,"T",0X1,3);
	split_sreg_range(0X8051A226,"T",0X1,3);
	split_sreg_range(0X8051A22A,"T",0X1,3);
	split_sreg_range(0X8051A22E,"T",0X1,3);
	split_sreg_range(0X8051A24C,"T",0X1,3);
	split_sreg_range(0X8051A270,"T",0X1,3);
	split_sreg_range(0X8051A288,"T",0X1,3);
	split_sreg_range(0X8051A28C,"T",0X1,3);
	split_sreg_range(0X8051A294,"T",0X1,3);
	split_sreg_range(0X8051A2CC,"T",0X1,3);
	split_sreg_range(0X8051A2D6,"T",0X1,3);
	split_sreg_range(0X8051A2FC,"T",0X1,3);
	split_sreg_range(0X8051A324,"T",0X1,3);
	split_sreg_range(0X8051A33C,"T",0X1,3);
	split_sreg_range(0X8051A340,"T",0X1,3);
	split_sreg_range(0X8051A34E,"T",0X1,3);
	split_sreg_range(0X8051A35C,"T",0X1,3);
	split_sreg_range(0X8051A384,"T",0X1,3);
	split_sreg_range(0X8051A3D0,"T",0X1,3);
	split_sreg_range(0X8051A3DC,"T",0X1,3);
	split_sreg_range(0X8051A446,"T",0X1,3);
	split_sreg_range(0X8051A46C,"T",0X1,3);
	split_sreg_range(0X8051A478,"T",0X1,3);
	split_sreg_range(0X8051A48C,"T",0X1,3);
	split_sreg_range(0X8051A498,"T",0X1,3);
	split_sreg_range(0X8051A49A,"T",0X1,3);
	split_sreg_range(0X8051A4B4,"T",0X1,3);
	split_sreg_range(0X8051A4D6,"T",0X1,3);
	split_sreg_range(0X8051A4DA,"T",0X1,3);
	split_sreg_range(0X8051A4F0,"T",0X1,3);
	split_sreg_range(0X8051A59C,"T",0X1,3);
	split_sreg_range(0X8051A5A6,"T",0X1,3);
	split_sreg_range(0X8051A5B4,"T",0X1,3);
	split_sreg_range(0X8051A5C6,"T",0X1,3);
	split_sreg_range(0X8051A5D0,"T",0X1,3);
	split_sreg_range(0X8051A5EE,"T",0X1,3);
	split_sreg_range(0X8051A5FE,"T",0X1,3);
	split_sreg_range(0X8051A612,"T",0X1,3);
	split_sreg_range(0X8051A618,"T",0X1,3);
	split_sreg_range(0X8051A62A,"T",0X1,3);
	split_sreg_range(0X8051A638,"T",0X1,3);
	split_sreg_range(0X8051A642,"T",0X1,3);
	split_sreg_range(0X8051A67A,"T",0X1,3);
	split_sreg_range(0X8051A690,"T",0X1,3);
	split_sreg_range(0X8051A6A4,"T",0X1,3);
	split_sreg_range(0X8051A6CA,"T",0X1,3);
	split_sreg_range(0X8051A6E6,"T",0X1,3);
	split_sreg_range(0X8051A6EA,"T",0X1,3);
	split_sreg_range(0X8051A706,"T",0X1,3);
	split_sreg_range(0X8051A750,"T",0X1,3);
	split_sreg_range(0X8051A75E,"T",0X1,3);
	split_sreg_range(0X8051A764,"T",0X1,3);
	split_sreg_range(0X8051A768,"T",0X1,3);
	split_sreg_range(0X8051A790,"T",0X1,3);
	split_sreg_range(0X8051A7B4,"T",0X1,3);
	split_sreg_range(0X8051A7BC,"T",0X1,3);
	split_sreg_range(0X8051A7D2,"T",0X1,3);
	split_sreg_range(0X8051A7D8,"T",0X1,3);
	split_sreg_range(0X8051A7F6,"T",0X1,3);
	split_sreg_range(0X8051A7F8,"T",0X1,3);
	split_sreg_range(0X8051A812,"T",0X1,3);
	split_sreg_range(0X8051A816,"T",0X1,3);
	split_sreg_range(0X8051A830,"T",0X1,3);
	split_sreg_range(0X8051A848,"T",0X1,3);
	split_sreg_range(0X8051A850,"T",0X1,3);
	split_sreg_range(0X8051A864,"T",0X1,3);
	split_sreg_range(0X8051A86A,"T",0X1,3);
	split_sreg_range(0X8051A87E,"T",0X1,3);
	split_sreg_range(0X8051A88C,"T",0X1,3);
	split_sreg_range(0X8051A89A,"T",0X1,3);
	split_sreg_range(0X8051A8AA,"T",0X1,3);
	split_sreg_range(0X8051A8D0,"T",0X1,3);
	split_sreg_range(0X8051A8F8,"T",0X1,3);
	split_sreg_range(0X8051A912,"T",0X1,3);
	split_sreg_range(0X8051A916,"T",0X1,3);
	split_sreg_range(0X8051A92A,"T",0X1,3);
	split_sreg_range(0X8051A92E,"T",0X1,3);
	split_sreg_range(0X8051A95C,"T",0X1,3);
	split_sreg_range(0X8051A974,"T",0X1,3);
	split_sreg_range(0X8051A99C,"T",0X1,3);
	split_sreg_range(0X8051A99E,"T",0X1,3);
	split_sreg_range(0X8051A9C8,"T",0X1,3);
	split_sreg_range(0X8051A9F2,"T",0X1,3);
	split_sreg_range(0X8051AA0C,"T",0X1,3);
	split_sreg_range(0X8051AA10,"T",0X1,3);
	split_sreg_range(0X8051AA26,"T",0X1,3);
	split_sreg_range(0X8051AA32,"T",0X1,3);
	split_sreg_range(0X8051AA38,"T",0X1,3);
	split_sreg_range(0X8051AA52,"T",0X1,3);
	split_sreg_range(0X8051AA86,"T",0X1,3);
	split_sreg_range(0X8051AA9E,"T",0X1,3);
	split_sreg_range(0X8051AAA6,"T",0X1,3);
	split_sreg_range(0X8051AAD4,"T",0X1,3);
	split_sreg_range(0X8051AAF8,"T",0X1,3);
	split_sreg_range(0X8051AB00,"T",0X1,3);
	split_sreg_range(0X8051AB2C,"T",0X1,3);
	split_sreg_range(0X8051AB3C,"T",0X1,3);
	split_sreg_range(0X8051AB4C,"T",0X1,3);
	split_sreg_range(0X8051AB68,"T",0X1,3);
	split_sreg_range(0X8051AB7E,"T",0X1,3);
	split_sreg_range(0X8051AB80,"T",0X1,3);
	split_sreg_range(0X8051ABA4,"T",0X1,3);
	split_sreg_range(0X8051ABBC,"T",0X1,3);
	split_sreg_range(0X8051ABC0,"T",0X1,3);
	split_sreg_range(0X8051ABC8,"T",0X1,3);
	split_sreg_range(0X8051AC0A,"T",0X1,3);
	split_sreg_range(0X8051AC2C,"T",0X1,3);
	split_sreg_range(0X8051AC3C,"T",0X1,3);
	split_sreg_range(0X8051AC4A,"T",0X1,3);
	split_sreg_range(0X8051AC54,"T",0X1,3);
	split_sreg_range(0X8051AC8C,"T",0X1,3);
	split_sreg_range(0X8051ACAE,"T",0X1,3);
	split_sreg_range(0X8051ACC8,"T",0X1,3);
	split_sreg_range(0X8051ACCC,"T",0X1,3);
	split_sreg_range(0X8051ACF4,"T",0X1,3);
	split_sreg_range(0X8051AD18,"T",0X1,3);
	split_sreg_range(0X8051AD32,"T",0X1,3);
	split_sreg_range(0X8051AD36,"T",0X1,3);
	split_sreg_range(0X8051AD54,"T",0X1,3);
	split_sreg_range(0X8051AD70,"T",0X1,3);
	split_sreg_range(0X8051AD8E,"T",0X1,3);
	split_sreg_range(0X8051AD94,"T",0X1,3);
	split_sreg_range(0X8051ADB6,"T",0X1,3);
	split_sreg_range(0X8051AE06,"T",0X1,3);
	split_sreg_range(0X8051AE28,"T",0X1,3);
	split_sreg_range(0X8051AEE4,"T",0X1,3);
	split_sreg_range(0X8051AEEC,"T",0X1,3);
	split_sreg_range(0X8051AF0C,"T",0X1,3);
	split_sreg_range(0X8051AF12,"T",0X1,3);
	split_sreg_range(0X8051AF16,"T",0X1,3);
	split_sreg_range(0X8051AF20,"T",0X1,3);
	split_sreg_range(0X8051AF22,"T",0X1,3);
	split_sreg_range(0X8051AF24,"T",0X1,3);
	split_sreg_range(0X8051AF34,"T",0X1,3);
	split_sreg_range(0X8051AF4E,"T",0X1,3);
	split_sreg_range(0X8051AF54,"T",0X1,3);
	split_sreg_range(0X8051AF62,"T",0X1,3);
	split_sreg_range(0X8051AF64,"T",0X1,3);
	split_sreg_range(0X8051AF7A,"T",0X1,3);
	split_sreg_range(0X8051AF92,"T",0X1,3);
	split_sreg_range(0X8051AFAE,"T",0X1,3);
	split_sreg_range(0X8051AFBC,"T",0X1,3);
	split_sreg_range(0X8051AFC2,"T",0X1,3);
	split_sreg_range(0X8051AFD8,"T",0X1,3);
	split_sreg_range(0X8051AFE6,"T",0X1,3);
	split_sreg_range(0X8051AFEC,"T",0X1,3);
	split_sreg_range(0X8051B006,"T",0X1,3);
	split_sreg_range(0X8051B014,"T",0X1,3);
	split_sreg_range(0X8051B01A,"T",0X1,3);
	split_sreg_range(0X8051B024,"T",0X1,3);
	split_sreg_range(0X8051B02C,"T",0X1,3);
	split_sreg_range(0X8051B02E,"T",0X1,3);
	split_sreg_range(0X8051B07C,"T",0X1,3);
	split_sreg_range(0X8051B08A,"T",0X1,3);
	split_sreg_range(0X8051B0B4,"T",0X1,3);
	split_sreg_range(0X8051B0B8,"T",0X1,3);
	split_sreg_range(0X8051B0BE,"T",0X1,3);
	split_sreg_range(0X8051B0C4,"T",0X1,3);
	split_sreg_range(0X8051B0E0,"T",0X1,3);
	split_sreg_range(0X8051B116,"T",0X1,3);
	split_sreg_range(0X8051B134,"T",0X1,3);
	split_sreg_range(0X8051B13A,"T",0X1,3);
	split_sreg_range(0X8051B148,"T",0X1,3);
	split_sreg_range(0X8051B15C,"T",0X1,3);
	split_sreg_range(0X8051B182,"T",0X1,3);
	split_sreg_range(0X8051B18C,"T",0X1,3);
	split_sreg_range(0X8051B1AC,"T",0X1,3);
	split_sreg_range(0X8051B1C8,"T",0X1,3);
	split_sreg_range(0X8051B1E2,"T",0X1,3);
	split_sreg_range(0X8051B214,"T",0X1,3);
	split_sreg_range(0X8051B242,"T",0X1,3);
	split_sreg_range(0X8051B272,"T",0X1,3);
	split_sreg_range(0X8051B276,"T",0X1,3);
	split_sreg_range(0X8051B2AA,"T",0X1,3);
	split_sreg_range(0X8051B2B0,"T",0X1,3);
	split_sreg_range(0X8051B2EC,"T",0X1,3);
	split_sreg_range(0X8051B30A,"T",0X1,3);
	split_sreg_range(0X8051B310,"T",0X1,3);
	split_sreg_range(0X8051B320,"T",0X1,3);
	split_sreg_range(0X8051B328,"T",0X1,3);
	split_sreg_range(0X8051B33A,"T",0X1,3);
	split_sreg_range(0X8051B35A,"T",0X1,3);
	split_sreg_range(0X8051B382,"T",0X1,3);
	split_sreg_range(0X8051B386,"T",0X1,3);
	split_sreg_range(0X8051B38C,"T",0X1,3);
	split_sreg_range(0X8051B39A,"T",0X1,3);
	split_sreg_range(0X8051B3C4,"T",0X1,3);
	split_sreg_range(0X8051B3DE,"T",0X1,3);
	split_sreg_range(0X8051B3F8,"T",0X1,3);
	split_sreg_range(0X8051B406,"T",0X1,3);
	split_sreg_range(0X8051B408,"T",0X1,3);
	split_sreg_range(0X8051B412,"T",0X1,3);
	split_sreg_range(0X8051B440,"T",0X1,3);
	split_sreg_range(0X8051B460,"T",0X1,3);
	split_sreg_range(0X8051B462,"T",0X1,3);
	split_sreg_range(0X8051B474,"T",0X1,3);
	split_sreg_range(0X8051B486,"T",0X1,3);
	split_sreg_range(0X8051B48A,"T",0X1,3);
	split_sreg_range(0X8051B492,"T",0X1,3);
	split_sreg_range(0X8051B4A6,"T",0X1,3);
	split_sreg_range(0X8051B4B4,"T",0X1,3);
	split_sreg_range(0X8051B4C4,"T",0X1,3);
	split_sreg_range(0X8051B4CA,"T",0X1,3);
	split_sreg_range(0X8051B4CC,"T",0X1,3);
	split_sreg_range(0X8051B4E0,"T",0X1,3);
	split_sreg_range(0X8051B50C,"T",0X1,3);
	split_sreg_range(0X8051B536,"T",0X1,3);
	split_sreg_range(0X8051B540,"T",0X1,3);
	split_sreg_range(0X8051B548,"T",0X1,3);
	split_sreg_range(0X8051B54C,"T",0X1,3);
	split_sreg_range(0X8051B554,"T",0X1,3);
	split_sreg_range(0X8051B56A,"T",0X1,3);
	split_sreg_range(0X8051B56E,"T",0X1,3);
	split_sreg_range(0X8051B578,"T",0X1,3);
	split_sreg_range(0X8051B58E,"T",0X1,3);
	split_sreg_range(0X8051B596,"T",0X1,3);
	split_sreg_range(0X8051B5A0,"T",0X1,3);
	split_sreg_range(0X8051B5B4,"T",0X1,3);
	split_sreg_range(0X8051B5C2,"T",0X1,3);
	split_sreg_range(0X8051B5D8,"T",0X1,3);
	split_sreg_range(0X8051B5EC,"T",0X1,3);
	split_sreg_range(0X8051B5F8,"T",0X1,3);
	split_sreg_range(0X8051B604,"T",0X1,3);
	split_sreg_range(0X8051B60E,"T",0X1,3);
	split_sreg_range(0X8051B62A,"T",0X1,3);
	split_sreg_range(0X8051B638,"T",0X1,3);
	split_sreg_range(0X8051B646,"T",0X1,3);
	split_sreg_range(0X8051B664,"T",0X1,3);
	split_sreg_range(0X8051B676,"T",0X1,3);
	split_sreg_range(0X8051B690,"T",0X1,3);
	split_sreg_range(0X8051B696,"T",0X1,3);
	split_sreg_range(0X8051B69A,"T",0X1,3);
	split_sreg_range(0X8051B6A4,"T",0X1,3);
	split_sreg_range(0X8051B6A8,"T",0X1,3);
	split_sreg_range(0X8051B6AE,"T",0X1,3);
	split_sreg_range(0X8051B6B2,"T",0X1,3);
	split_sreg_range(0X8051B6B8,"T",0X1,3);
	split_sreg_range(0X8051B6CE,"T",0X1,3);
	split_sreg_range(0X8051B6D4,"T",0X1,3);
	split_sreg_range(0X8051B6E0,"T",0X1,3);
	split_sreg_range(0X8051B702,"T",0X1,3);
	split_sreg_range(0X8051B70E,"T",0X1,3);
	split_sreg_range(0X8051B712,"T",0X1,3);
	split_sreg_range(0X8051B718,"T",0X1,3);
	split_sreg_range(0X8051B720,"T",0X1,3);
	split_sreg_range(0X8051B726,"T",0X1,3);
	split_sreg_range(0X8051B72A,"T",0X1,3);
	split_sreg_range(0X8051B730,"T",0X1,3);
	split_sreg_range(0X8051B738,"T",0X1,3);
	split_sreg_range(0X8051B74A,"T",0X1,3);
	split_sreg_range(0X8051B75C,"T",0X1,3);
	split_sreg_range(0X8051B760,"T",0X1,3);
	split_sreg_range(0X8051B770,"T",0X1,3);
	split_sreg_range(0X8051B774,"T",0X1,3);
	split_sreg_range(0X8051B77E,"T",0X1,3);
	split_sreg_range(0X8051B782,"T",0X1,3);
	split_sreg_range(0X8051B7AA,"T",0X1,3);
	split_sreg_range(0X8051B7B4,"T",0X1,3);
	split_sreg_range(0X8051B7BC,"T",0X1,3);
	split_sreg_range(0X8051B7F4,"T",0X1,3);
	split_sreg_range(0X8051B7F8,"T",0X1,3);
	split_sreg_range(0X8051B7FC,"T",0X1,3);
	split_sreg_range(0X8051B816,"T",0X1,3);
	split_sreg_range(0X8051B828,"T",0X1,3);
	split_sreg_range(0X8051B82C,"T",0X1,3);
	split_sreg_range(0X8051B844,"T",0X1,3);
	split_sreg_range(0X8051B878,"T",0X1,3);
	split_sreg_range(0X8051B892,"T",0X1,3);
	split_sreg_range(0X8051BAA8,"T",0X1,3);
	split_sreg_range(0X8051BAC8,"T",0X1,3);
	split_sreg_range(0X8051BAD0,"T",0X1,3);
	split_sreg_range(0X8051BB06,"T",0X1,3);
	split_sreg_range(0X8051BB08,"T",0X1,3);
	split_sreg_range(0X8051BB12,"T",0X1,3);
	split_sreg_range(0X8051BB28,"T",0X1,3);
	split_sreg_range(0X8051BB44,"T",0X1,3);
	split_sreg_range(0X8051BB56,"T",0X1,3);
	split_sreg_range(0X8051BB5A,"T",0X1,3);
	split_sreg_range(0X8051BB62,"T",0X1,3);
	split_sreg_range(0X8051BB76,"T",0X1,3);
	split_sreg_range(0X8051BBA6,"T",0X1,3);
	split_sreg_range(0X8051BBAA,"T",0X1,3);
	split_sreg_range(0X8051BBAC,"T",0X1,3);
	split_sreg_range(0X8051BBB6,"T",0X1,3);
	split_sreg_range(0X8051BBD6,"T",0X1,3);
	split_sreg_range(0X8051BBD8,"T",0X1,3);
	split_sreg_range(0X8051BC2E,"T",0X1,3);
	split_sreg_range(0X8051BC4E,"T",0X1,3);
	split_sreg_range(0X8051BC5E,"T",0X1,3);
	split_sreg_range(0X8051BC92,"T",0X1,3);
	split_sreg_range(0X8051BCBA,"T",0X1,3);
	split_sreg_range(0X8051BCD6,"T",0X1,3);
	split_sreg_range(0X8051BCDC,"T",0X1,3);
	split_sreg_range(0X8051BCF4,"T",0X1,3);
	split_sreg_range(0X8051BCF8,"T",0X1,3);
	split_sreg_range(0X8051BCFC,"T",0X1,3);
	split_sreg_range(0X8051BF10,"T",0X1,3);
	split_sreg_range(0X8051BF1A,"T",0X1,3);
	split_sreg_range(0X8051BF24,"T",0X1,3);
	split_sreg_range(0X8051BF3A,"T",0X1,3);
	split_sreg_range(0X8051BF3E,"T",0X1,3);
	split_sreg_range(0X8051BF40,"T",0X1,3);
	split_sreg_range(0X8051BF4C,"T",0X1,3);
	split_sreg_range(0X8051BF82,"T",0X1,3);
	split_sreg_range(0X8051BF84,"T",0X1,3);
	split_sreg_range(0X8051BF90,"T",0X1,3);
	split_sreg_range(0X8051BF9C,"T",0X1,3);
	split_sreg_range(0X8051BFAC,"T",0X1,3);
	split_sreg_range(0X8051BFB0,"T",0X1,3);
	split_sreg_range(0X8051BFB2,"T",0X1,3);
	split_sreg_range(0X8051BFC0,"T",0X1,3);
	split_sreg_range(0X8051BFE2,"T",0X1,3);
	split_sreg_range(0X8051BFF6,"T",0X1,3);
	split_sreg_range(0X8051C014,"T",0X1,3);
	split_sreg_range(0X8051C038,"T",0X1,3);
	split_sreg_range(0X8051C042,"T",0X1,3);
	split_sreg_range(0X8051C04C,"T",0X1,3);
	split_sreg_range(0X8051C06E,"T",0X1,3);
	split_sreg_range(0X8051C07A,"T",0X1,3);
	split_sreg_range(0X8051C080,"T",0X1,3);
	split_sreg_range(0X8051C09C,"T",0X1,3);
	split_sreg_range(0X8051C0A0,"T",0X1,3);
	split_sreg_range(0X8051C0B6,"T",0X1,3);
	split_sreg_range(0X8051C0BC,"T",0X1,3);
	split_sreg_range(0X8051C0D6,"T",0X1,3);
	split_sreg_range(0X8051C0F8,"T",0X1,3);
	split_sreg_range(0X8051C10E,"T",0X1,3);
	split_sreg_range(0X8051C124,"T",0X1,3);
	split_sreg_range(0X8051C130,"T",0X1,3);
	split_sreg_range(0X8051C158,"T",0X1,3);
	split_sreg_range(0X8051C162,"T",0X1,3);
	split_sreg_range(0X8051C164,"T",0X1,3);
	split_sreg_range(0X8051C176,"T",0X1,3);
	split_sreg_range(0X8051C1A6,"T",0X1,3);
	split_sreg_range(0X8051C1B0,"T",0X1,3);
	split_sreg_range(0X8051C1C4,"T",0X1,3);
	split_sreg_range(0X8051C1CA,"T",0X1,3);
	split_sreg_range(0X8051C1D8,"T",0X1,3);
	split_sreg_range(0X8051C234,"T",0X1,3);
	split_sreg_range(0X8051C244,"T",0X1,3);
	split_sreg_range(0X8051C270,"T",0X1,3);
	split_sreg_range(0X8051C27A,"T",0X1,3);
	split_sreg_range(0X8051C280,"T",0X1,3);
	split_sreg_range(0X8051C28C,"T",0X1,3);
	split_sreg_range(0X8051C2F0,"T",0X1,3);
	split_sreg_range(0X8051C308,"T",0X1,3);
	split_sreg_range(0X8051C350,"T",0X1,3);
	split_sreg_range(0X8051C36A,"T",0X1,3);
	split_sreg_range(0X8051C380,"T",0X1,3);
	split_sreg_range(0X8051C384,"T",0X1,3);
	split_sreg_range(0X8051C3A4,"T",0X1,3);
	split_sreg_range(0X8051C3BA,"T",0X1,3);
	split_sreg_range(0X8051C3C8,"T",0X1,3);
	split_sreg_range(0X8051C478,"T",0X1,3);
	split_sreg_range(0X8051C482,"T",0X1,3);
	split_sreg_range(0X8051C490,"T",0X1,3);
	split_sreg_range(0X8051C494,"T",0X1,3);
	split_sreg_range(0X8051C4A0,"T",0X1,3);
	split_sreg_range(0X8051C4A8,"T",0X1,3);
	split_sreg_range(0X8051C4B4,"T",0X1,3);
	split_sreg_range(0X8051C4D4,"T",0X1,3);
	split_sreg_range(0X8051C4E8,"T",0X1,3);
	split_sreg_range(0X8051C4F6,"T",0X1,3);
	split_sreg_range(0X8051C510,"T",0X1,3);
	split_sreg_range(0X8051C51C,"T",0X1,3);
	split_sreg_range(0X8051C548,"T",0X1,3);
	split_sreg_range(0X8051C552,"T",0X1,3);
	split_sreg_range(0X8051C570,"T",0X1,3);
	split_sreg_range(0X8051C584,"T",0X1,3);
	split_sreg_range(0X8051C58A,"T",0X1,3);
	split_sreg_range(0X8051C59A,"T",0X1,3);
	split_sreg_range(0X8051C5F8,"T",0X1,3);
	split_sreg_range(0X8051C60C,"T",0X1,3);
	split_sreg_range(0X8051C61C,"T",0X1,3);
	split_sreg_range(0X8051C638,"T",0X1,3);
	split_sreg_range(0X8051C660,"T",0X1,3);
	split_sreg_range(0X8051C66E,"T",0X1,3);
	split_sreg_range(0X8051C672,"T",0X1,3);
	split_sreg_range(0X8051C67E,"T",0X1,3);
	split_sreg_range(0X8051C69A,"T",0X1,3);
	split_sreg_range(0X8051C6B0,"T",0X1,3);
	split_sreg_range(0X8051C6D4,"T",0X1,3);
	split_sreg_range(0X8051C6EA,"T",0X1,3);
	split_sreg_range(0X8051C6F6,"T",0X1,3);
	split_sreg_range(0X8051C704,"T",0X1,3);
	split_sreg_range(0X8051C70E,"T",0X1,3);
	split_sreg_range(0X8051C724,"T",0X1,3);
	split_sreg_range(0X8051C732,"T",0X1,3);
	split_sreg_range(0X8051C74A,"T",0X1,3);
	split_sreg_range(0X8051C776,"T",0X1,3);
	split_sreg_range(0X8051C78C,"T",0X1,3);
	split_sreg_range(0X8051C796,"T",0X1,3);
	split_sreg_range(0X8051C7AA,"T",0X1,3);
	split_sreg_range(0X8051C7B4,"T",0X1,3);
	split_sreg_range(0X8051C7B6,"T",0X1,3);
	split_sreg_range(0X8051C7BE,"T",0X1,3);
	split_sreg_range(0X8051C7EC,"T",0X1,3);
	split_sreg_range(0X8051C808,"T",0X1,3);
	split_sreg_range(0X8051C81C,"T",0X1,3);
	split_sreg_range(0X8051C838,"T",0X1,3);
	split_sreg_range(0X8051C856,"T",0X1,3);
	split_sreg_range(0X8051C860,"T",0X1,3);
	split_sreg_range(0X8051C882,"T",0X1,3);
	split_sreg_range(0X8051C8B8,"T",0X1,3);
	split_sreg_range(0X8051C8CA,"T",0X1,3);
	split_sreg_range(0X8051C8E2,"T",0X1,3);
	split_sreg_range(0X8051C8E6,"T",0X1,3);
	split_sreg_range(0X8051C8F0,"T",0X1,3);
	split_sreg_range(0X8051C8F8,"T",0X1,3);
	split_sreg_range(0X8051C91E,"T",0X1,3);
	split_sreg_range(0X8051C922,"T",0X1,3);
	split_sreg_range(0X8051C924,"T",0X1,3);
	split_sreg_range(0X8051C930,"T",0X1,3);
	split_sreg_range(0X8051C932,"T",0X1,3);
	split_sreg_range(0X8051C958,"T",0X1,3);
	split_sreg_range(0X8051C97E,"T",0X1,3);
	split_sreg_range(0X8051C990,"T",0X1,3);
	split_sreg_range(0X8051C9A4,"T",0X1,3);
	split_sreg_range(0X8051C9C8,"T",0X1,3);
	split_sreg_range(0X8051C9D8,"T",0X1,3);
	split_sreg_range(0X8051C9FC,"T",0X1,3);
	split_sreg_range(0X8051CA78,"T",0X1,3);
	split_sreg_range(0X8051CAD0,"T",0,3);
	split_sreg_range(0X8051CB10,"T",0,3);
	split_sreg_range(0X8051CB18,"T",0,3);
	split_sreg_range(0X8051CB44,"T",0,3);
	split_sreg_range(0X8051CB48,"T",0,3);
	split_sreg_range(0X8051CB60,"T",0,3);
	split_sreg_range(0X8051CB70,"T",0,3);
	split_sreg_range(0X8051CB74,"T",0,3);
	split_sreg_range(0X8051CBB0,"T",0,3);
	split_sreg_range(0X8051CBC0,"T",0,3);
	split_sreg_range(0X8051CBDC,"T",0,3);
	split_sreg_range(0X8051CC04,"T",0,3);
	split_sreg_range(0X8051CC18,"T",0,3);
	split_sreg_range(0X8051CC34,"T",0,3);
	split_sreg_range(0X8051CC40,"T",0,3);
	split_sreg_range(0X8051CC48,"T",0,3);
	split_sreg_range(0X8051CC70,"T",0X1,3);
	split_sreg_range(0X8051CC7E,"T",0X1,3);
	split_sreg_range(0X8051CC8C,"T",0X1,3);
	split_sreg_range(0X8051CC9C,"T",0X1,3);
	split_sreg_range(0X8051CCAE,"T",0X1,3);
	split_sreg_range(0X8051CCC8,"T",0X1,3);
	split_sreg_range(0X8051CCD2,"T",0X1,3);
	split_sreg_range(0X8051CCD4,"T",0X1,3);
	split_sreg_range(0X8051CCDA,"T",0X1,3);
	split_sreg_range(0X8051CCE0,"T",0X1,3);
	split_sreg_range(0X8051CCE6,"T",0X1,3);
	split_sreg_range(0X8051CCFA,"T",0X1,3);
	split_sreg_range(0X8051CCFE,"T",0X1,3);
	split_sreg_range(0X8051CD02,"T",0X1,3);
	split_sreg_range(0X8051CD0A,"T",0X1,3);
	split_sreg_range(0X8051CD12,"T",0X1,3);
	split_sreg_range(0X8051CD1C,"T",0X1,3);
	split_sreg_range(0X8051CD36,"T",0X1,3);
	split_sreg_range(0X8051CD46,"T",0X1,3);
	split_sreg_range(0X8051CD4E,"T",0X1,3);
	split_sreg_range(0X8051CD52,"T",0X1,3);
	split_sreg_range(0X8051CDE2,"T",0X1,3);
	split_sreg_range(0X8051CDE6,"T",0X1,3);
	split_sreg_range(0X8051CDEA,"T",0X1,3);
	split_sreg_range(0X8051CE0C,"T",0X1,3);
	split_sreg_range(0X8051CE18,"T",0X1,3);
	split_sreg_range(0X8051CE44,"T",0X1,3);
	split_sreg_range(0X8051CE5C,"T",0X1,3);
	split_sreg_range(0X8051CEA6,"T",0X1,3);
	split_sreg_range(0X8051CEE4,"T",0X1,3);
	split_sreg_range(0X8051CF0E,"T",0X1,3);
	split_sreg_range(0X8051CF10,"T",0X1,3);
	split_sreg_range(0X8051CF18,"T",0X1,3);
	split_sreg_range(0X8051CF4C,"T",0X1,3);
	split_sreg_range(0X8051CF5C,"T",0X1,3);
	split_sreg_range(0X8051CF66,"T",0X1,3);
	split_sreg_range(0X8051CF6E,"T",0X1,3);
	split_sreg_range(0X8051CF74,"T",0X1,3);
	split_sreg_range(0X8051CF7C,"T",0X1,3);
	split_sreg_range(0X8051CF8C,"T",0X1,3);
	split_sreg_range(0X8051CF96,"T",0X1,3);
	split_sreg_range(0X8051CFA4,"T",0X1,3);
	split_sreg_range(0X8051CFC2,"T",0X1,3);
	split_sreg_range(0X8051CFEC,"T",0X1,3);
	split_sreg_range(0X8051CFF0,"T",0X1,3);
	split_sreg_range(0X8051D000,"T",0X1,3);
	split_sreg_range(0X8051D00E,"T",0X1,3);
	split_sreg_range(0X8051D01A,"T",0X1,3);
	split_sreg_range(0X8051D032,"T",0X1,3);
	split_sreg_range(0X8051D03E,"T",0X1,3);
	split_sreg_range(0X8051D056,"T",0X1,3);
	split_sreg_range(0X8051D068,"T",0X1,3);
	split_sreg_range(0X8051D074,"T",0X1,3);
	split_sreg_range(0X8051D07C,"T",0X1,3);
	split_sreg_range(0X8051D094,"T",0X1,3);
	split_sreg_range(0X8051D0B2,"T",0X1,3);
	split_sreg_range(0X8051D0CA,"T",0X1,3);
	split_sreg_range(0X8051D0D0,"T",0X1,3);
	split_sreg_range(0X8051D0D6,"T",0X1,3);
	split_sreg_range(0X8051D0E4,"T",0X1,3);
	split_sreg_range(0X8051D0F2,"T",0X1,3);
	split_sreg_range(0X8051D0F8,"T",0X1,3);
	split_sreg_range(0X8051D10C,"T",0X1,3);
	split_sreg_range(0X8051D110,"T",0X1,3);
	split_sreg_range(0X8051D11E,"T",0X1,3);
	split_sreg_range(0X8051D122,"T",0X1,3);
	split_sreg_range(0X8051D12C,"T",0X1,3);
	split_sreg_range(0X8051D130,"T",0X1,3);
	split_sreg_range(0X8051D142,"T",0X1,3);
	split_sreg_range(0X8051D14C,"T",0X1,3);
	split_sreg_range(0X8051D152,"T",0X1,3);
	split_sreg_range(0X8051D166,"T",0X1,3);
	split_sreg_range(0X8051D16A,"T",0X1,3);
	split_sreg_range(0X8051D178,"T",0X1,3);
	split_sreg_range(0X8051D17C,"T",0X1,3);
	split_sreg_range(0X8051D186,"T",0X1,3);
	split_sreg_range(0X8051D18A,"T",0X1,3);
	split_sreg_range(0X8051D19C,"T",0X1,3);
	split_sreg_range(0X8051D1A6,"T",0X1,3);
	split_sreg_range(0X8051D1B8,"T",0X1,3);
	split_sreg_range(0X8051D1BE,"T",0X1,3);
	split_sreg_range(0X8051D1C2,"T",0X1,3);
	split_sreg_range(0X8051D1D6,"T",0X1,3);
	split_sreg_range(0X8051D1DA,"T",0X1,3);
	split_sreg_range(0X8051D1E8,"T",0X1,3);
	split_sreg_range(0X8051D1EC,"T",0X1,3);
	split_sreg_range(0X8051D1F6,"T",0X1,3);
	split_sreg_range(0X8051D1FA,"T",0X1,3);
	split_sreg_range(0X8051D20C,"T",0X1,3);
	split_sreg_range(0X8051D216,"T",0X1,3);
	split_sreg_range(0X8051D230,"T",0X1,3);
	split_sreg_range(0X8051D298,"T",0X1,3);
	split_sreg_range(0X8051D2AC,"T",0X1,3);
	split_sreg_range(0X8051D2B0,"T",0X1,3);
	split_sreg_range(0X8051D2BC,"T",0X1,3);
	split_sreg_range(0X8051D2C4,"T",0X1,3);
	split_sreg_range(0X8051D2C8,"T",0X1,3);
	split_sreg_range(0X8051D2F8,"T",0X1,3);
	split_sreg_range(0X8051D2FC,"T",0X1,3);
	split_sreg_range(0X8051D300,"T",0X1,3);
	split_sreg_range(0X8051D31C,"T",0X1,3);
	split_sreg_range(0X8051D33A,"T",0X1,3);
	split_sreg_range(0X8051D350,"T",0X1,3);
	split_sreg_range(0X8051D37C,"T",0X1,3);
	split_sreg_range(0X8051D39C,"T",0X1,3);
	split_sreg_range(0X8051D3BE,"T",0X1,3);
	split_sreg_range(0X8051D3CE,"T",0X1,3);
	split_sreg_range(0X8051D3D2,"T",0X1,3);
	split_sreg_range(0X8051D3D6,"T",0X1,3);
	split_sreg_range(0X8051D3D8,"T",0X1,3);
	split_sreg_range(0X8051D3E0,"T",0X1,3);
	split_sreg_range(0X8051D40C,"T",0X1,3);
	split_sreg_range(0X8051D426,"T",0X1,3);
	split_sreg_range(0X8051D454,"T",0X1,3);
	split_sreg_range(0X8051D464,"T",0X1,3);
	split_sreg_range(0X8051D47E,"T",0X1,3);
	split_sreg_range(0X8051D494,"T",0X1,3);
	split_sreg_range(0X8051D4AA,"T",0X1,3);
	split_sreg_range(0X8051D4AE,"T",0X1,3);
	split_sreg_range(0X8051D4DC,"T",0X1,3);
	split_sreg_range(0X8051D4F8,"T",0X1,3);
	split_sreg_range(0X8051D520,"T",0X1,3);
	split_sreg_range(0X8051D528,"T",0X1,3);
	split_sreg_range(0X8051D540,"T",0X1,3);
	split_sreg_range(0X8051D564,"T",0X1,3);
	split_sreg_range(0X8051D59E,"T",0X1,3);
	split_sreg_range(0X8051D5B0,"T",0X1,3);
	split_sreg_range(0X8051D5B4,"T",0X1,3);
	split_sreg_range(0X8051D5B8,"T",0X1,3);
	split_sreg_range(0X8051D5CC,"T",0X1,3);
	split_sreg_range(0X8051D5CE,"T",0X1,3);
	split_sreg_range(0X8051D5D6,"T",0X1,3);
	split_sreg_range(0X8051D5E0,"T",0X1,3);
	split_sreg_range(0X8051D5EE,"T",0X1,3);
	split_sreg_range(0X8051D600,"T",0X1,3);
	split_sreg_range(0X8051D604,"T",0X1,3);
	split_sreg_range(0X8051D608,"T",0X1,3);
	split_sreg_range(0X8051D61A,"T",0X1,3);
	split_sreg_range(0X8051D624,"T",0X1,3);
	split_sreg_range(0X8051D64C,"T",0X1,3);
	split_sreg_range(0X8051D682,"T",0X1,3);
	split_sreg_range(0X8051D688,"T",0X1,3);
	split_sreg_range(0X8051D68C,"T",0X1,3);
	split_sreg_range(0X8051D698,"T",0X1,3);
	split_sreg_range(0X8051D69C,"T",0X1,3);
	split_sreg_range(0X8051D6A8,"T",0X1,3);
	split_sreg_range(0X8051D6B2,"T",0X1,3);
	split_sreg_range(0X8051D6BC,"T",0X1,3);
	split_sreg_range(0X8051D6C4,"T",0X1,3);
	split_sreg_range(0X8051D6C8,"T",0X1,3);
	split_sreg_range(0X8051D6D6,"T",0X1,3);
	split_sreg_range(0X8051D6D8,"T",0X1,3);
	split_sreg_range(0X8051D6E0,"T",0X1,3);
	split_sreg_range(0X8051D6EA,"T",0X1,3);
	split_sreg_range(0X8051D6F4,"T",0X1,3);
	split_sreg_range(0X8051D708,"T",0X1,3);
	split_sreg_range(0X8051D70A,"T",0X1,3);
	split_sreg_range(0X8051D70E,"T",0X1,3);
	split_sreg_range(0X8051D71C,"T",0X1,3);
	split_sreg_range(0X8051D71E,"T",0X1,3);
	split_sreg_range(0X8051D722,"T",0X1,3);
	split_sreg_range(0X8051D73A,"T",0X1,3);
	split_sreg_range(0X8051D73C,"T",0X1,3);
	split_sreg_range(0X8051D74E,"T",0X1,3);
	split_sreg_range(0X8051D772,"T",0X1,3);
	split_sreg_range(0X8051D77A,"T",0X1,3);
	split_sreg_range(0X8051D77E,"T",0X1,3);
	split_sreg_range(0X8051D784,"T",0X1,3);
	split_sreg_range(0X8051D78A,"T",0X1,3);
	split_sreg_range(0X8051D790,"T",0X1,3);
	split_sreg_range(0X8051D794,"T",0X1,3);
	split_sreg_range(0X8051D79E,"T",0X1,3);
	split_sreg_range(0X8051D7A0,"T",0X1,3);
	split_sreg_range(0X8051D7AA,"T",0X1,3);
	split_sreg_range(0X8051D7BA,"T",0X1,3);
	split_sreg_range(0X8051D7C8,"T",0X1,3);
	split_sreg_range(0X8051D7D8,"T",0X1,3);
	split_sreg_range(0X8051D7DC,"T",0X1,3);
	split_sreg_range(0X8051D7E0,"T",0X1,3);
	split_sreg_range(0X8051D7E6,"T",0X1,3);
	split_sreg_range(0X8051D7F4,"T",0X1,3);
	split_sreg_range(0X8051D816,"T",0X1,3);
	split_sreg_range(0X8051D834,"T",0X1,3);
	split_sreg_range(0X8051D83A,"T",0X1,3);
	split_sreg_range(0X8051D84E,"T",0X1,3);
	split_sreg_range(0X8051D862,"T",0X1,3);
	split_sreg_range(0X8051D878,"T",0X1,3);
	split_sreg_range(0X8051D87E,"T",0X1,3);
	split_sreg_range(0X8051D8B2,"T",0X1,3);
	split_sreg_range(0X8051D8B8,"T",0X1,3);
	split_sreg_range(0X8051D8CE,"T",0X1,3);
	split_sreg_range(0X8051D8DC,"T",0X1,3);
	split_sreg_range(0X8051D916,"T",0X1,3);
	split_sreg_range(0X8051D91C,"T",0X1,3);
	split_sreg_range(0X8051D940,"T",0X1,3);
	split_sreg_range(0X8051D968,"T",0X1,3);
	split_sreg_range(0X8051D96E,"T",0X1,3);
	split_sreg_range(0X8051D976,"T",0X1,3);
	split_sreg_range(0X8051D990,"T",0X1,3);
	split_sreg_range(0X8051D9AE,"T",0X1,3);
	split_sreg_range(0X8051D9BE,"T",0X1,3);
	split_sreg_range(0X8051D9EC,"T",0X1,3);
	split_sreg_range(0X8051DA16,"T",0X1,3);
	split_sreg_range(0X8051DA1C,"T",0X1,3);
	split_sreg_range(0X8051DA54,"T",0X1,2);
	split_sreg_range(0X8051DA58,"T",0X1,2);
	split_sreg_range(0X8051DA5A,"T",0X1,3);
	split_sreg_range(0X8051DA76,"T",0X1,3);
	split_sreg_range(0X8051DA7A,"T",0X1,3);
	split_sreg_range(0X8051DA80,"T",0X1,3);
	split_sreg_range(0X8051DA8C,"T",0X1,2);
	split_sreg_range(0X8051DA8E,"T",0X1,3);
	split_sreg_range(0X8051DA90,"T",0X1,2);
	split_sreg_range(0X8051DA94,"T",0X1,2);
	split_sreg_range(0X8051DAC6,"T",0X1,2);
	split_sreg_range(0X8051DACC,"T",0X1,3);
	split_sreg_range(0X8051DACE,"T",0X1,2);
	split_sreg_range(0X8051DAD0,"T",0X1,2);
	split_sreg_range(0X8051DAD2,"T",0X1,2);
	split_sreg_range(0X8051DAD4,"T",0X1,3);
	split_sreg_range(0X8051DB00,"T",0X1,3);
	split_sreg_range(0X8051DB1A,"T",0X1,3);
	split_sreg_range(0X8051DB1E,"T",0X1,3);
	split_sreg_range(0X8051DC24,"T",0X1,2);
	split_sreg_range(0X8051DC28,"T",0X1,2);
	split_sreg_range(0X8051DC2C,"T",0,3);
	split_sreg_range(0X8051DC48,"T",0,3);
	split_sreg_range(0X8051DC58,"T",0,3);
	split_sreg_range(0X8051DC60,"T",0,3);
	split_sreg_range(0X8051DC7C,"T",0,3);
	split_sreg_range(0X8051DC80,"T",0,3);
	split_sreg_range(0X8051DC9C,"T",0,3);
	split_sreg_range(0X8051DCC0,"T",0,3);
	split_sreg_range(0X8051DD04,"T",0,3);
	split_sreg_range(0X8051DEC4,"T",0,3);
	split_sreg_range(0X8051DED0,"T",0,3);
	split_sreg_range(0X8051DEDC,"T",0,3);
	split_sreg_range(0X8051DEE4,"T",0,3);
	split_sreg_range(0X8051DF2C,"T",0,3);
	split_sreg_range(0X8051DF38,"T",0,3);
	split_sreg_range(0X8051DF54,"T",0,2);
	split_sreg_range(0X8051DF64,"T",0,3);
	split_sreg_range(0X8051DFA0,"T",0,3);
	split_sreg_range(0X8051DFEC,"T",0,3);
	split_sreg_range(0X8051E00C,"T",0,3);
	split_sreg_range(0X8051E018,"T",0,3);
	split_sreg_range(0X8051E03C,"T",0,3);
	split_sreg_range(0X8051E064,"T",0,3);
	split_sreg_range(0X8051E06C,"T",0,3);
	split_sreg_range(0X8051E09C,"T",0,3);
	split_sreg_range(0X8051E0B4,"T",0,3);
	split_sreg_range(0X8051E0D4,"T",0,3);
	split_sreg_range(0X8051E0DC,"T",0,3);
	split_sreg_range(0X8051E0E4,"T",0,3);
	split_sreg_range(0X8051E0F8,"T",0,3);
	split_sreg_range(0X8051E0FC,"T",0,2);
	split_sreg_range(0X8051E0FE,"T",0,2);
	split_sreg_range(0X8051E12C,"T",0,2);
	split_sreg_range(0X8051E130,"T",0,2);
	split_sreg_range(0X8051E158,"T",0,2);
	split_sreg_range(0X8051E170,"T",0,2);
	split_sreg_range(0X8051E172,"T",0,2);
	split_sreg_range(0X8051E178,"T",0,2);
	split_sreg_range(0X8051E188,"T",0,2);
	split_sreg_range(0X8051E1CC,"T",0,2);
	split_sreg_range(0X8051E1FF,"T",0,2);
	split_sreg_range(0X8051E200,"T",0X1,2);
	split_sreg_range(0X8051E248,"T",0X1,3);
	split_sreg_range(0X8051E262,"T",0X1,3);
	split_sreg_range(0X8051E2A4,"T",0X1,3);
	split_sreg_range(0X8051E2DC,"T",0X1,3);
	split_sreg_range(0X8051E3A4,"T",0X1,3);
	split_sreg_range(0X8051E3BA,"T",0X1,3);
	split_sreg_range(0X8051E3D0,"T",0X1,3);
	split_sreg_range(0X8051E3E0,"T",0X1,3);
	split_sreg_range(0X8051E3E4,"T",0X1,3);
	split_sreg_range(0X8051E3F2,"T",0X1,3);
	split_sreg_range(0X8051E438,"T",0X1,3);
	split_sreg_range(0X8051E4A8,"T",0X1,3);
	split_sreg_range(0X8051E4B2,"T",0X1,3);
	split_sreg_range(0X8051E4CC,"T",0X1,3);
	split_sreg_range(0X8051E4F4,"T",0X1,3);
	split_sreg_range(0X8051E54E,"T",0X1,3);
	split_sreg_range(0X8051E764,"T",0X1,3);
	split_sreg_range(0X8051E808,"T",0X1,3);
	split_sreg_range(0X8051E832,"T",0X1,3);
	split_sreg_range(0X8051E878,"T",0X1,3);
	split_sreg_range(0X8051E896,"T",0X1,3);
	split_sreg_range(0X8051E898,"T",0X1,3);
	split_sreg_range(0X8051E8A0,"T",0X1,3);
	split_sreg_range(0X8051E8F2,"T",0X1,3);
	split_sreg_range(0X8051E8F4,"T",0X1,3);
	split_sreg_range(0X8051E8FC,"T",0X1,3);
	split_sreg_range(0X8051E94C,"T",0X1,3);
	split_sreg_range(0X8051E94E,"T",0X1,3);
	split_sreg_range(0X8051E960,"T",0X1,3);
	split_sreg_range(0X8051E9A6,"T",0X1,3);
	split_sreg_range(0X8051E9CC,"T",0X1,3);
	split_sreg_range(0X8051E9F4,"T",0X1,3);
	split_sreg_range(0X8051EA1C,"T",0X1,3);
	split_sreg_range(0X8051EA5C,"T",0X1,3);
	split_sreg_range(0X8051EA82,"T",0X1,3);
	split_sreg_range(0X8051EAA8,"T",0X1,3);
	split_sreg_range(0X8051EACE,"T",0X1,3);
	split_sreg_range(0X8051EAF4,"T",0X1,3);
	split_sreg_range(0X8051EB1C,"T",0X1,3);
	split_sreg_range(0X8051EB44,"T",0X1,3);
	split_sreg_range(0X8051EB6C,"T",0X1,3);
	split_sreg_range(0X8051EB92,"T",0X1,3);
	split_sreg_range(0X8051EBBA,"T",0X1,3);
	split_sreg_range(0X8051EC24,"T",0X1,3);
	split_sreg_range(0X8051EC2C,"T",0X1,3);
	split_sreg_range(0X8051EC40,"T",0X1,3);
	split_sreg_range(0X8051EC60,"T",0X1,3);
	split_sreg_range(0X8051EC76,"T",0X1,3);
	split_sreg_range(0X8051EC94,"T",0X1,3);
	split_sreg_range(0X8051EC9C,"T",0X1,3);
	split_sreg_range(0X8051ECD8,"T",0X1,3);
	split_sreg_range(0X8051ECDE,"T",0X1,3);
	split_sreg_range(0X8051ED02,"T",0X1,3);
	split_sreg_range(0X8051ED44,"T",0X1,3);
	split_sreg_range(0X8051ED4C,"T",0X1,3);
	split_sreg_range(0X8051ED58,"T",0X1,3);
	split_sreg_range(0X8051ED80,"T",0X1,3);
	split_sreg_range(0X8051ED90,"T",0X1,3);
	split_sreg_range(0X8051EDB4,"T",0X1,3);
	split_sreg_range(0X8051EDB6,"T",0X1,3);
	split_sreg_range(0X8051EDD4,"T",0X1,3);
	split_sreg_range(0X8051EDDC,"T",0X1,3);
	split_sreg_range(0X8051EDF2,"T",0X1,3);
	split_sreg_range(0X8051EDFA,"T",0X1,3);
	split_sreg_range(0X8051EE12,"T",0X1,3);
	split_sreg_range(0X8051EE2C,"T",0X1,3);
	split_sreg_range(0X8051EE50,"T",0X1,3);
	split_sreg_range(0X8051EE92,"T",0X1,3);
	split_sreg_range(0X8051EE9A,"T",0X1,3);
	split_sreg_range(0X8051EEA6,"T",0X1,3);
	split_sreg_range(0X8051EECE,"T",0X1,3);
	split_sreg_range(0X8051EEE0,"T",0X1,3);
	split_sreg_range(0X8051EEF8,"T",0X1,3);
	split_sreg_range(0X8051EF20,"T",0X1,3);
	split_sreg_range(0X8051EF2A,"T",0X1,3);
	split_sreg_range(0X8051EF2C,"T",0X1,3);
	split_sreg_range(0X8051EF4C,"T",0X1,3);
	split_sreg_range(0X8051EF6A,"T",0X1,3);
	split_sreg_range(0X8051EF80,"T",0X1,3);
	split_sreg_range(0X8051EF96,"T",0X1,3);
	split_sreg_range(0X8051EFC0,"T",0X1,3);
	split_sreg_range(0X8051EFD0,"T",0X1,3);
	split_sreg_range(0X8051EFDA,"T",0X1,3);
	split_sreg_range(0X8051EFF2,"T",0X1,3);
	split_sreg_range(0X8051EFF4,"T",0X1,3);
	split_sreg_range(0X8051F01A,"T",0X1,3);
	split_sreg_range(0X8051F042,"T",0X1,3);
	split_sreg_range(0X8051F060,"T",0X1,3);
	split_sreg_range(0X8051F078,"T",0X1,3);
	split_sreg_range(0X8051F07E,"T",0X1,3);
	split_sreg_range(0X8051F094,"T",0X1,3);
	split_sreg_range(0X8051F09A,"T",0X1,3);
	split_sreg_range(0X8051F0B8,"T",0X1,3);
	split_sreg_range(0X8051F0E6,"T",0X1,3);
	split_sreg_range(0X8051F0F4,"T",0X1,3);
	split_sreg_range(0X8051F108,"T",0X1,3);
	split_sreg_range(0X8051F112,"T",0X1,3);
	split_sreg_range(0X8051F124,"T",0X1,3);
	split_sreg_range(0X8051F13C,"T",0X1,3);
	split_sreg_range(0X8051F18A,"T",0X1,3);
	split_sreg_range(0X8051F198,"T",0X1,3);
	split_sreg_range(0X8051F1F2,"T",0X1,3);
	split_sreg_range(0X8051F200,"T",0X1,3);
	split_sreg_range(0X8051F206,"T",0X1,3);
	split_sreg_range(0X8051F216,"T",0X1,3);
	split_sreg_range(0X8051F226,"T",0X1,3);
	split_sreg_range(0X8051F244,"T",0X1,3);
	split_sreg_range(0X8051F266,"T",0X1,3);
	split_sreg_range(0X8051F274,"T",0X1,3);
	split_sreg_range(0X8051F276,"T",0X1,3);
	split_sreg_range(0X8051F280,"T",0X1,3);
	split_sreg_range(0X8051F2A8,"T",0X1,3);
	split_sreg_range(0X8051F2C6,"T",0X1,3);
	split_sreg_range(0X8051F2D4,"T",0X1,3);
	split_sreg_range(0X8051F2DA,"T",0X1,3);
	split_sreg_range(0X8051F2E6,"T",0X1,3);
	split_sreg_range(0X8051F312,"T",0X1,3);
	split_sreg_range(0X8051F318,"T",0X1,3);
	split_sreg_range(0X8051F34C,"T",0X1,3);
	split_sreg_range(0X8051F360,"T",0X1,3);
	split_sreg_range(0X8051F368,"T",0X1,3);
	split_sreg_range(0X8051F36A,"T",0X1,3);
	split_sreg_range(0X8051F3D0,"T",0X1,3);
	split_sreg_range(0X8051F3F6,"T",0X1,3);
	split_sreg_range(0X8051F424,"T",0X1,3);
	split_sreg_range(0X8051F430,"T",0X1,3);
	split_sreg_range(0X8051F448,"T",0X1,3);
	split_sreg_range(0X8051F466,"T",0X1,3);
	split_sreg_range(0X8051F49A,"T",0X1,3);
	split_sreg_range(0X8051F4CA,"T",0X1,3);
	split_sreg_range(0X8051F4CC,"T",0X1,3);
	split_sreg_range(0X8051F4DA,"T",0X1,3);
	split_sreg_range(0X8051F4E2,"T",0X1,3);
	split_sreg_range(0X8051F516,"T",0X1,3);
	split_sreg_range(0X8051F55C,"T",0X1,3);
	split_sreg_range(0X8051F568,"T",0X1,3);
	split_sreg_range(0X8051F56E,"T",0X1,3);
	split_sreg_range(0X8051F580,"T",0X1,3);
	split_sreg_range(0X8051F5D2,"T",0X1,3);
	split_sreg_range(0X8051F600,"T",0X1,3);
	split_sreg_range(0X8051F632,"T",0X1,3);
	split_sreg_range(0X8051F69A,"T",0X1,3);
	split_sreg_range(0X8051F6AA,"T",0X1,3);
	split_sreg_range(0X8051F6D6,"T",0X1,3);
	split_sreg_range(0X8051F6EE,"T",0X1,3);
	split_sreg_range(0X8051F72E,"T",0X1,3);
	split_sreg_range(0X8051F750,"T",0X1,3);
	split_sreg_range(0X8051F75C,"T",0X1,3);
	split_sreg_range(0X8051F762,"T",0X1,3);
	split_sreg_range(0X8051F76A,"T",0X1,3);
	split_sreg_range(0X8051F774,"T",0X1,3);
	split_sreg_range(0X8051F7A4,"T",0X1,3);
	split_sreg_range(0X8051F7D8,"T",0X1,3);
	split_sreg_range(0X8051F7EA,"T",0X1,3);
	split_sreg_range(0X8051F7FA,"T",0X1,3);
	split_sreg_range(0X8051F810,"T",0X1,3);
	split_sreg_range(0X8051F81E,"T",0X1,3);
	split_sreg_range(0X8051F824,"T",0X1,3);
	split_sreg_range(0X8051F82A,"T",0X1,3);
	split_sreg_range(0X8051F87C,"T",0X1,3);
	split_sreg_range(0X8051F88E,"T",0X1,3);
	split_sreg_range(0X8051F8AA,"T",0X1,3);
	split_sreg_range(0X8051F8BE,"T",0X1,3);
	split_sreg_range(0X8051F916,"T",0X1,3);
	split_sreg_range(0X8051F966,"T",0X1,3);
	split_sreg_range(0X8051F96A,"T",0X1,3);
	split_sreg_range(0X8051F98A,"T",0X1,3);
	split_sreg_range(0X8051F99C,"T",0X1,3);
	split_sreg_range(0X8051F9D4,"T",0X1,3);
	split_sreg_range(0X8051F9DC,"T",0X1,3);
	split_sreg_range(0X8051F9E8,"T",0X1,3);
	split_sreg_range(0X8051F9EE,"T",0X1,3);
	split_sreg_range(0X8051F9F6,"T",0X1,3);
	split_sreg_range(0X8051FA04,"T",0X1,3);
	split_sreg_range(0X8051FA22,"T",0X1,3);
	split_sreg_range(0X8051FA2E,"T",0X1,3);
	split_sreg_range(0X8051FA60,"T",0X1,3);
	split_sreg_range(0X8051FAC6,"T",0X1,3);
	split_sreg_range(0X8051FAF2,"T",0X1,3);
	split_sreg_range(0X8051FB2E,"T",0X1,3);
	split_sreg_range(0X8051FB42,"T",0X1,3);
	split_sreg_range(0X8051FB64,"T",0X1,3);
	split_sreg_range(0X8051FB92,"T",0X1,3);
	split_sreg_range(0X8051FBA8,"T",0X1,3);
	split_sreg_range(0X8051FBB4,"T",0X1,3);
	split_sreg_range(0X8051FBD8,"T",0X1,3);
	split_sreg_range(0X8051FBDA,"T",0X1,3);
	split_sreg_range(0X8051FC44,"T",0X1,3);
	split_sreg_range(0X8051FC50,"T",0X1,3);
	split_sreg_range(0X8051FC52,"T",0X1,3);
	split_sreg_range(0X8051FCB2,"T",0X1,3);
	split_sreg_range(0X8051FD00,"T",0X1,3);
	split_sreg_range(0X8051FD0C,"T",0X1,3);
	split_sreg_range(0X8051FD14,"T",0X1,3);
	split_sreg_range(0X8051FD1C,"T",0X1,3);
	split_sreg_range(0X8051FD34,"T",0X1,3);
	split_sreg_range(0X8051FD5C,"T",0X1,3);
	split_sreg_range(0X8051FD66,"T",0X1,3);
	split_sreg_range(0X8051FD8A,"T",0X1,3);
	split_sreg_range(0X8051FDB8,"T",0X1,3);
	split_sreg_range(0X8051FDE0,"T",0X1,3);
	split_sreg_range(0X8051FDE2,"T",0X1,3);
	split_sreg_range(0X8051FDF2,"T",0X1,3);
	split_sreg_range(0X8051FE06,"T",0X1,3);
	split_sreg_range(0X8051FE84,"T",0X1,3);
	split_sreg_range(0X8051FEA6,"T",0X1,3);
	split_sreg_range(0X8051FEC4,"T",0X1,3);
	split_sreg_range(0X8051FF46,"T",0X1,3);
	split_sreg_range(0X8051FF5A,"T",0X1,3);
	split_sreg_range(0X8051FFE4,"T",0X1,3);
	split_sreg_range(0X80520072,"T",0X1,3);
	split_sreg_range(0X8052007C,"T",0X1,3);
	split_sreg_range(0X80520090,"T",0X1,3);
	split_sreg_range(0X805200CA,"T",0X1,3);
	split_sreg_range(0X805200EE,"T",0X1,3);
	split_sreg_range(0X805200F0,"T",0X1,3);
	split_sreg_range(0X805200FC,"T",0X1,3);
	split_sreg_range(0X80520108,"T",0X1,3);
	split_sreg_range(0X80520124,"T",0X1,3);
	split_sreg_range(0X8052015C,"T",0X1,3);
	split_sreg_range(0X8052016C,"T",0X1,3);
	split_sreg_range(0X805201EA,"T",0X1,3);
	split_sreg_range(0X80520264,"T",0X1,3);
	split_sreg_range(0X80520282,"T",0X1,3);
	split_sreg_range(0X805202B6,"T",0X1,3);
	split_sreg_range(0X805202CC,"T",0X1,3);
	split_sreg_range(0X805202DE,"T",0X1,3);
	split_sreg_range(0X80520360,"T",0X1,3);
	split_sreg_range(0X805203B4,"T",0X1,3);
	split_sreg_range(0X805203C4,"T",0X1,3);
	split_sreg_range(0X805203EE,"T",0X1,3);
	split_sreg_range(0X805203F0,"T",0X1,3);
	split_sreg_range(0X805203F8,"T",0X1,3);
	split_sreg_range(0X80520406,"T",0X1,3);
	split_sreg_range(0X8052040A,"T",0X1,3);
	split_sreg_range(0X80520428,"T",0X1,3);
	split_sreg_range(0X80520496,"T",0X1,3);
	split_sreg_range(0X805204A8,"T",0X1,3);
	split_sreg_range(0X80520542,"T",0X1,3);
	split_sreg_range(0X805205CA,"T",0X1,3);
	split_sreg_range(0X805205D0,"T",0X1,3);
	split_sreg_range(0X805205F4,"T",0X1,3);
	split_sreg_range(0X8052062E,"T",0X1,3);
	split_sreg_range(0X80520696,"T",0X1,3);
	split_sreg_range(0X805206B0,"T",0X1,3);
	split_sreg_range(0X805206CA,"T",0X1,3);
	split_sreg_range(0X8052071A,"T",0X1,3);
	split_sreg_range(0X8052072C,"T",0X1,3);
	split_sreg_range(0X80520754,"T",0X1,3);
	split_sreg_range(0X80520792,"T",0X1,3);
	split_sreg_range(0X805207A0,"T",0X1,3);
	split_sreg_range(0X805207FE,"T",0X1,3);
	split_sreg_range(0X80520812,"T",0X1,3);
	split_sreg_range(0X805208A0,"T",0X1,3);
	split_sreg_range(0X80520930,"T",0X1,3);
	split_sreg_range(0X8052093C,"T",0X1,3);
	split_sreg_range(0X80520950,"T",0X1,3);
	split_sreg_range(0X80520986,"T",0X1,3);
	split_sreg_range(0X8052098E,"T",0X1,3);
	split_sreg_range(0X805209AC,"T",0X1,3);
	split_sreg_range(0X805209B4,"T",0X1,3);
	split_sreg_range(0X80520A0C,"T",0X1,3);
	split_sreg_range(0X80520A1E,"T",0X1,3);
	split_sreg_range(0X80520A72,"T",0X1,3);
	split_sreg_range(0X80520AA4,"T",0X1,3);
	split_sreg_range(0X80520AC4,"T",0X1,3);
	split_sreg_range(0X80520ACA,"T",0X1,3);
	split_sreg_range(0X80520ACE,"T",0X1,3);
	split_sreg_range(0X80520AD4,"T",0X1,3);
	split_sreg_range(0X80520ADA,"T",0X1,3);
	split_sreg_range(0X80520AE2,"T",0X1,3);
	split_sreg_range(0X80520B12,"T",0X1,3);
	split_sreg_range(0X80520B4E,"T",0X1,3);
	split_sreg_range(0X80520B66,"T",0X1,3);
	split_sreg_range(0X80520B98,"T",0X1,3);
	split_sreg_range(0X80520B9E,"T",0X1,3);
	split_sreg_range(0X80520BA2,"T",0X1,3);
	split_sreg_range(0X80520BA6,"T",0X1,3);
	split_sreg_range(0X80520BAC,"T",0X1,3);
	split_sreg_range(0X80520BCA,"T",0X1,3);
	split_sreg_range(0X80520C1A,"T",0X1,3);
	split_sreg_range(0X80520C1E,"T",0X1,3);
	split_sreg_range(0X80520C2C,"T",0X1,3);
	split_sreg_range(0X80520D3C,"T",0X1,3);
	split_sreg_range(0X80520D3E,"T",0X1,3);
	split_sreg_range(0X80520D42,"T",0X1,3);
	split_sreg_range(0X80520D46,"T",0X1,3);
	split_sreg_range(0X80520D56,"T",0X1,3);
	split_sreg_range(0X80520D96,"T",0X1,3);
	split_sreg_range(0X80520DB6,"T",0X1,3);
	split_sreg_range(0X80520DBC,"T",0X1,3);
	split_sreg_range(0X80520DC0,"T",0X1,3);
	split_sreg_range(0X80520DC4,"T",0X1,3);
	split_sreg_range(0X80520DCA,"T",0X1,3);
	split_sreg_range(0X80520DEE,"T",0X1,3);
	split_sreg_range(0X80520E4A,"T",0X1,3);
	split_sreg_range(0X80520E50,"T",0X1,3);
	split_sreg_range(0X80520E58,"T",0X1,3);
	split_sreg_range(0X80520E6E,"T",0X1,3);
	split_sreg_range(0X80520E76,"T",0X1,3);
	split_sreg_range(0X80520EB4,"T",0X1,3);
	split_sreg_range(0X80520EB6,"T",0X1,3);
	split_sreg_range(0X80520EC0,"T",0X1,3);
	split_sreg_range(0X80520ECC,"T",0X1,3);
	split_sreg_range(0X80520F10,"T",0X1,3);
	split_sreg_range(0X80520F32,"T",0X1,3);
	split_sreg_range(0X80520F3E,"T",0X1,3);
	split_sreg_range(0X80520F5C,"T",0X1,3);
	split_sreg_range(0X80520F68,"T",0X1,3);
	split_sreg_range(0X80520F70,"T",0X1,3);
	split_sreg_range(0X80520F82,"T",0X1,3);
	split_sreg_range(0X80520F8C,"T",0X1,3);
	split_sreg_range(0X80520FAC,"T",0X1,3);
	split_sreg_range(0X80520FBA,"T",0X1,3);
	split_sreg_range(0X80520FBC,"T",0X1,3);
	split_sreg_range(0X80520FC6,"T",0X1,3);
	split_sreg_range(0X80521054,"T",0X1,3);
	split_sreg_range(0X80521064,"T",0X1,3);
	split_sreg_range(0X80521084,"T",0X1,3);
	split_sreg_range(0X80521168,"T",0X1,3);
	split_sreg_range(0X8052116E,"T",0X1,3);
	split_sreg_range(0X8052117A,"T",0X1,3);
	split_sreg_range(0X80521196,"T",0X1,3);
	split_sreg_range(0X805211A8,"T",0X1,3);
	split_sreg_range(0X805211FE,"T",0X1,3);
	split_sreg_range(0X8052120A,"T",0X1,3);
	split_sreg_range(0X8052120E,"T",0X1,3);
	split_sreg_range(0X80521216,"T",0X1,3);
	split_sreg_range(0X80521236,"T",0X1,3);
	split_sreg_range(0X80521256,"T",0X1,3);
	split_sreg_range(0X80521268,"T",0X1,3);
	split_sreg_range(0X80521282,"T",0X1,3);
	split_sreg_range(0X805212F4,"T",0X1,3);
	split_sreg_range(0X80521318,"T",0X1,3);
	split_sreg_range(0X80521330,"T",0X1,3);
	split_sreg_range(0X80521350,"T",0X1,3);
	split_sreg_range(0X80521362,"T",0X1,3);
	split_sreg_range(0X80521386,"T",0X1,3);
	split_sreg_range(0X80521398,"T",0X1,3);
	split_sreg_range(0X8052139E,"T",0X1,3);
	split_sreg_range(0X805213B8,"T",0X1,3);
	split_sreg_range(0X805213BC,"T",0X1,3);
	split_sreg_range(0X805213C6,"T",0X1,3);
	split_sreg_range(0X805213D2,"T",0X1,3);
	split_sreg_range(0X805213FC,"T",0X1,3);
	split_sreg_range(0X80521402,"T",0X1,3);
	split_sreg_range(0X80521428,"T",0X1,3);
	split_sreg_range(0X80521436,"T",0X1,3);
	split_sreg_range(0X80521444,"T",0X1,3);
	split_sreg_range(0X8052145E,"T",0X1,3);
	split_sreg_range(0X8052146C,"T",0X1,3);
	split_sreg_range(0X80521486,"T",0X1,3);
	split_sreg_range(0X80521496,"T",0X1,3);
	split_sreg_range(0X805214A8,"T",0X1,3);
	split_sreg_range(0X805214AC,"T",0X1,3);
	split_sreg_range(0X805214BA,"T",0X1,3);
	split_sreg_range(0X805214C2,"T",0X1,3);
	split_sreg_range(0X8052150C,"T",0X1,3);
	split_sreg_range(0X8052152C,"T",0X1,3);
	split_sreg_range(0X80521552,"T",0X1,3);
	split_sreg_range(0X80521560,"T",0X1,3);
	split_sreg_range(0X80521564,"T",0X1,3);
	split_sreg_range(0X80521572,"T",0X1,3);
	split_sreg_range(0X8052157A,"T",0X1,3);
	split_sreg_range(0X80521584,"T",0X1,3);
	split_sreg_range(0X8052160E,"T",0X1,3);
	split_sreg_range(0X8052163A,"T",0X1,3);
	split_sreg_range(0X8052168A,"T",0X1,3);
	split_sreg_range(0X805216DE,"T",0X1,3);
	split_sreg_range(0X8052170A,"T",0X1,3);
	split_sreg_range(0X8052170E,"T",0X1,3);
	split_sreg_range(0X80521712,"T",0X1,3);
	split_sreg_range(0X80521724,"T",0X1,3);
	split_sreg_range(0X8052173A,"T",0X1,3);
	split_sreg_range(0X8052173E,"T",0X1,3);
	split_sreg_range(0X80521742,"T",0X1,3);
	split_sreg_range(0X8052175C,"T",0X1,3);
	split_sreg_range(0X80521784,"T",0X1,3);
	split_sreg_range(0X8052179E,"T",0X1,3);
	split_sreg_range(0X805218D6,"T",0X1,3);
	split_sreg_range(0X805219F2,"T",0X1,3);
	split_sreg_range(0X80521A50,"T",0X1,3);
	split_sreg_range(0X80521BFE,"T",0X1,3);
	split_sreg_range(0X80521C06,"T",0X1,3);
	split_sreg_range(0X80521C1C,"T",0X1,3);
	split_sreg_range(0X80521C2E,"T",0X1,3);
	split_sreg_range(0X80521C4C,"T",0X1,3);
	split_sreg_range(0X80521C70,"T",0X1,3);
	split_sreg_range(0X80521C9E,"T",0X1,3);
	split_sreg_range(0X80521CD0,"T",0X1,3);
	split_sreg_range(0X80521CFA,"T",0X1,3);
	split_sreg_range(0X80521D28,"T",0X1,3);
	split_sreg_range(0X80521D88,"T",0X1,3);
	split_sreg_range(0X80521DA0,"T",0X1,3);
	split_sreg_range(0X80521DFA,"T",0X1,3);
	split_sreg_range(0X80521E64,"T",0X1,3);
	split_sreg_range(0X80521E7A,"T",0X1,3);
	split_sreg_range(0X80521E7E,"T",0X1,3);
	split_sreg_range(0X80521E90,"T",0X1,3);
	split_sreg_range(0X80521ED6,"T",0X1,3);
	split_sreg_range(0X80521F10,"T",0X1,3);
	split_sreg_range(0X80521F40,"T",0X1,3);
	split_sreg_range(0X80521F6E,"T",0X1,3);
	split_sreg_range(0X80521F86,"T",0X1,3);
	split_sreg_range(0X80521FCA,"T",0X1,3);
	split_sreg_range(0X80521FF2,"T",0X1,3);
	split_sreg_range(0X8052201A,"T",0X1,3);
	split_sreg_range(0X80522056,"T",0X1,3);
	split_sreg_range(0X80522082,"T",0X1,3);
	split_sreg_range(0X805220AE,"T",0X1,3);
	split_sreg_range(0X805220C6,"T",0X1,3);
	split_sreg_range(0X805220F6,"T",0X1,3);
	split_sreg_range(0X805221A4,"T",0X1,3);
	split_sreg_range(0X805221B8,"T",0X1,3);
	split_sreg_range(0X805221E6,"T",0X1,3);
	split_sreg_range(0X805221EA,"T",0X1,3);
	split_sreg_range(0X80522224,"T",0X1,3);
	split_sreg_range(0X8052222E,"T",0X1,3);
	split_sreg_range(0X80522248,"T",0X1,3);
	split_sreg_range(0X80522270,"T",0X1,3);
	split_sreg_range(0X80522282,"T",0X1,3);
	split_sreg_range(0X8052228E,"T",0X1,3);
	split_sreg_range(0X805222AA,"T",0X1,3);
	split_sreg_range(0X805222D6,"T",0X1,3);
	split_sreg_range(0X805222EA,"T",0X1,3);
	split_sreg_range(0X805222EC,"T",0X1,3);
	split_sreg_range(0X80522306,"T",0X1,3);
	split_sreg_range(0X8052234E,"T",0X1,3);
	split_sreg_range(0X80522390,"T",0X1,3);
	split_sreg_range(0X805223AA,"T",0X1,3);
	split_sreg_range(0X805223C4,"T",0X1,3);
	split_sreg_range(0X805223E8,"T",0X1,3);
	split_sreg_range(0X805223FE,"T",0X1,3);
	split_sreg_range(0X80522448,"T",0X1,3);
	split_sreg_range(0X8052244E,"T",0X1,3);
	split_sreg_range(0X80522464,"T",0X1,3);
	split_sreg_range(0X8052246E,"T",0X1,3);
	split_sreg_range(0X80522496,"T",0X1,3);
	split_sreg_range(0X805224A8,"T",0X1,3);
	split_sreg_range(0X80522518,"T",0X1,3);
	split_sreg_range(0X80522520,"T",0X1,3);
	split_sreg_range(0X80522536,"T",0X1,3);
	split_sreg_range(0X80522546,"T",0X1,3);
	split_sreg_range(0X80522564,"T",0X1,3);
	split_sreg_range(0X80522574,"T",0X1,3);
	split_sreg_range(0X805225A8,"T",0X1,3);
	split_sreg_range(0X805225CC,"T",0X1,3);
	split_sreg_range(0X80522670,"T",0X1,3);
	split_sreg_range(0X8052268E,"T",0X1,3);
	split_sreg_range(0X8052269E,"T",0X1,3);
	split_sreg_range(0X805226D4,"T",0X1,3);
	split_sreg_range(0X805226E0,"T",0X1,3);
	split_sreg_range(0X805226FA,"T",0X1,3);
	split_sreg_range(0X80522702,"T",0X1,3);
	split_sreg_range(0X80522734,"T",0X1,3);
	split_sreg_range(0X80522746,"T",0X1,3);
	split_sreg_range(0X80522748,"T",0X1,3);
	split_sreg_range(0X80522762,"T",0X1,3);
	split_sreg_range(0X80522774,"T",0X1,3);
	split_sreg_range(0X8052279A,"T",0X1,3);
	split_sreg_range(0X805227AA,"T",0X1,3);
	split_sreg_range(0X8052280C,"T",0X1,3);
	split_sreg_range(0X80522818,"T",0X1,3);
	split_sreg_range(0X80522864,"T",0X1,3);
	split_sreg_range(0X8052289A,"T",0X1,3);
	split_sreg_range(0X8052289E,"T",0X1,3);
	split_sreg_range(0X805228A0,"T",0X1,3);
	split_sreg_range(0X805228B4,"T",0X1,3);
	split_sreg_range(0X805228D2,"T",0X1,3);
	split_sreg_range(0X805228D4,"T",0X1,3);
	split_sreg_range(0X80522906,"T",0X1,3);
	split_sreg_range(0X80522918,"T",0X1,3);
	split_sreg_range(0X80522954,"T",0X1,3);
	split_sreg_range(0X8052295E,"T",0X1,3);
	split_sreg_range(0X805229FA,"T",0X1,3);
	split_sreg_range(0X80522B18,"T",0X1,3);
	split_sreg_range(0X80522B1E,"T",0X1,3);
	split_sreg_range(0X80522B48,"T",0X1,3);
	split_sreg_range(0X80522B80,"T",0X1,3);
	split_sreg_range(0X80522B9A,"T",0X1,3);
	split_sreg_range(0X80522BB8,"T",0X1,3);
	split_sreg_range(0X80522BC4,"T",0X1,3);
	split_sreg_range(0X80522BE2,"T",0X1,3);
	split_sreg_range(0X80522BEA,"T",0X1,3);
	split_sreg_range(0X80522C0E,"T",0X1,3);
	split_sreg_range(0X80522C2A,"T",0X1,3);
	split_sreg_range(0X80522CC0,"T",0X1,3);
	split_sreg_range(0X80522CCE,"T",0X1,3);
	split_sreg_range(0X80522D22,"T",0X1,3);
	split_sreg_range(0X80522D80,"T",0X1,3);
	split_sreg_range(0X80522DB0,"T",0X1,3);
	split_sreg_range(0X80522E24,"T",0X1,3);
	split_sreg_range(0X80522E26,"T",0X1,3);
	split_sreg_range(0X80522E48,"T",0X1,3);
	split_sreg_range(0X80522E60,"T",0X1,3);
	split_sreg_range(0X80522E7A,"T",0X1,3);
	split_sreg_range(0X80522E96,"T",0X1,3);
	split_sreg_range(0X80522EB0,"T",0X1,3);
	split_sreg_range(0X80522EC8,"T",0X1,3);
	split_sreg_range(0X80522FBA,"T",0X1,3);
	split_sreg_range(0X80522FDA,"T",0X1,3);
	split_sreg_range(0X805230E4,"T",0X1,3);
	split_sreg_range(0X80523100,"T",0X1,3);
	split_sreg_range(0X80523140,"T",0X1,3);
	split_sreg_range(0X80523152,"T",0X1,3);
	split_sreg_range(0X80523160,"T",0X1,3);
	split_sreg_range(0X8052327A,"T",0X1,3);
	split_sreg_range(0X80523296,"T",0X1,3);
	split_sreg_range(0X805232A0,"T",0X1,3);
	split_sreg_range(0X805232DA,"T",0X1,3);
	split_sreg_range(0X805232EC,"T",0X1,3);
	split_sreg_range(0X805232FE,"T",0X1,3);
	split_sreg_range(0X8052333C,"T",0X1,3);
	split_sreg_range(0X8052334E,"T",0X1,3);
	split_sreg_range(0X80523460,"T",0X1,3);
	split_sreg_range(0X8052347A,"T",0X1,3);
	split_sreg_range(0X8052356E,"T",0X1,3);
	split_sreg_range(0X8052358C,"T",0X1,3);
	split_sreg_range(0X80523598,"T",0X1,3);
	split_sreg_range(0X805235DC,"T",0X1,3);
	split_sreg_range(0X805235EE,"T",0X1,3);
	split_sreg_range(0X80523610,"T",0X1,3);
	split_sreg_range(0X8052372A,"T",0X1,3);
	split_sreg_range(0X80523748,"T",0X1,3);
	split_sreg_range(0X805237B0,"T",0X1,3);
	split_sreg_range(0X80523B36,"T",0X1,3);
	split_sreg_range(0X80523B56,"T",0X1,3);
	split_sreg_range(0X80523B64,"T",0X1,3);
	split_sreg_range(0X80523B94,"T",0X1,3);
	split_sreg_range(0X80523D10,"T",0X1,3);
	split_sreg_range(0X80523EFA,"T",0X1,3);
	split_sreg_range(0X80523F04,"T",0X1,3);
	split_sreg_range(0X80523F12,"T",0X1,3);
	split_sreg_range(0X80523F6C,"T",0X1,3);
	split_sreg_range(0X80523F76,"T",0X1,3);
	split_sreg_range(0X80523F8A,"T",0X1,3);
	split_sreg_range(0X80523FB6,"T",0X1,3);
	split_sreg_range(0X80523FBC,"T",0X1,3);
	split_sreg_range(0X80523FCA,"T",0X1,3);
	split_sreg_range(0X80524024,"T",0X1,3);
	split_sreg_range(0X8052402E,"T",0X1,3);
	split_sreg_range(0X80524042,"T",0X1,3);
	split_sreg_range(0X8052405E,"T",0X1,3);
	split_sreg_range(0X80524072,"T",0X1,3);
	split_sreg_range(0X80524078,"T",0X1,3);
	split_sreg_range(0X8052408E,"T",0X1,3);
	split_sreg_range(0X805240E6,"T",0X1,3);
	split_sreg_range(0X805240F6,"T",0X1,3);
	split_sreg_range(0X80524116,"T",0X1,3);
	split_sreg_range(0X80524168,"T",0X1,3);
	split_sreg_range(0X805241B2,"T",0X1,3);
	split_sreg_range(0X805241B6,"T",0X1,3);
	split_sreg_range(0X805243C2,"T",0X1,3);
	split_sreg_range(0X805243D6,"T",0X1,3);
	split_sreg_range(0X805243E6,"T",0X1,3);
	split_sreg_range(0X8052441C,"T",0X1,3);
	split_sreg_range(0X8052442A,"T",0X1,3);
	split_sreg_range(0X8052443E,"T",0X1,3);
	split_sreg_range(0X80524444,"T",0X1,3);
	split_sreg_range(0X8052447C,"T",0X1,3);
	split_sreg_range(0X80524486,"T",0X1,3);
	split_sreg_range(0X8052448E,"T",0X1,3);
	split_sreg_range(0X8052449E,"T",0X1,3);
	split_sreg_range(0X805244AC,"T",0X1,3);
	split_sreg_range(0X805244B6,"T",0X1,3);
	split_sreg_range(0X805244D4,"T",0X1,3);
	split_sreg_range(0X80524544,"T",0X1,3);
	split_sreg_range(0X8052455E,"T",0X1,3);
	split_sreg_range(0X80524592,"T",0X1,3);
	split_sreg_range(0X805245BE,"T",0X1,3);
	split_sreg_range(0X805245E8,"T",0X1,3);
	split_sreg_range(0X805245EE,"T",0X1,3);
	split_sreg_range(0X8052460E,"T",0X1,3);
	split_sreg_range(0X80524688,"T",0X1,3);
	split_sreg_range(0X805246B2,"T",0X1,3);
	split_sreg_range(0X805246F2,"T",0X1,3);
	split_sreg_range(0X80524704,"T",0X1,3);
	split_sreg_range(0X8052478E,"T",0X1,3);
	split_sreg_range(0X8052479C,"T",0X1,3);
	split_sreg_range(0X805247DA,"T",0X1,3);
	split_sreg_range(0X805247E4,"T",0X1,3);
	split_sreg_range(0X805247EE,"T",0X1,3);
	split_sreg_range(0X80524802,"T",0X1,3);
	split_sreg_range(0X80524848,"T",0X1,3);
	split_sreg_range(0X8052485C,"T",0X1,3);
	split_sreg_range(0X80524870,"T",0X1,3);
	split_sreg_range(0X805248B6,"T",0X1,3);
	split_sreg_range(0X805248C8,"T",0X1,3);
	split_sreg_range(0X80524924,"T",0X1,3);
	split_sreg_range(0X80524938,"T",0X1,3);
	split_sreg_range(0X80524A20,"T",0X1,3);
	split_sreg_range(0X80524AB8,"T",0X1,3);
	split_sreg_range(0X80524ABC,"T",0X1,3);
	split_sreg_range(0X80524ACE,"T",0X1,3);
	split_sreg_range(0X80524AEC,"T",0X1,3);
	split_sreg_range(0X80524B0E,"T",0X1,3);
	split_sreg_range(0X80524B1E,"T",0X1,3);
	split_sreg_range(0X80524B2C,"T",0X1,3);
	split_sreg_range(0X80524B74,"T",0X1,3);
	split_sreg_range(0X80524B7E,"T",0X1,3);
	split_sreg_range(0X80524BB2,"T",0X1,3);
	split_sreg_range(0X80524BC4,"T",0X1,3);
	split_sreg_range(0X80524BF4,"T",0X1,3);
	split_sreg_range(0X80524C2C,"T",0X1,3);
	split_sreg_range(0X80524C3C,"T",0X1,3);
	split_sreg_range(0X80524C74,"T",0X1,3);
	split_sreg_range(0X80524C9A,"T",0X1,3);
	split_sreg_range(0X80524CC2,"T",0X1,3);
	split_sreg_range(0X80524CD2,"T",0X1,3);
	split_sreg_range(0X80524CF6,"T",0X1,3);
	split_sreg_range(0X80524D0A,"T",0X1,3);
	split_sreg_range(0X80524DC6,"T",0X1,3);
	split_sreg_range(0X80524DFA,"T",0X1,3);
	split_sreg_range(0X80524E52,"T",0X1,3);
	split_sreg_range(0X80524EB4,"T",0X1,3);
	split_sreg_range(0X80524EFA,"T",0X1,3);
	split_sreg_range(0X80524F2C,"T",0X1,3);
	split_sreg_range(0X80524FA0,"T",0X1,3);
	split_sreg_range(0X80524FA2,"T",0X1,3);
	split_sreg_range(0X80524FB4,"T",0X1,3);
	split_sreg_range(0X80524FC8,"T",0X1,3);
	split_sreg_range(0X80524FE2,"T",0X1,3);
	split_sreg_range(0X80525010,"T",0X1,3);
	split_sreg_range(0X80525020,"T",0X1,3);
	split_sreg_range(0X8052504E,"T",0X1,3);
	split_sreg_range(0X80525062,"T",0X1,3);
	split_sreg_range(0X8052506A,"T",0X1,3);
	split_sreg_range(0X80525088,"T",0X1,3);
	split_sreg_range(0X805250D4,"T",0X1,3);
	split_sreg_range(0X805251D8,"T",0X1,3);
	split_sreg_range(0X805251DA,"T",0X1,3);
	split_sreg_range(0X80525204,"T",0X1,3);
	split_sreg_range(0X80525210,"T",0X1,3);
	split_sreg_range(0X80525230,"T",0X1,3);
	split_sreg_range(0X80525232,"T",0X1,3);
	split_sreg_range(0X80525236,"T",0X1,3);
	split_sreg_range(0X8052523A,"T",0X1,3);
	split_sreg_range(0X80525248,"T",0X1,3);
	split_sreg_range(0X8052525A,"T",0X1,3);
	split_sreg_range(0X8052526C,"T",0X1,3);
	split_sreg_range(0X805252C8,"T",0X1,3);
	split_sreg_range(0X805252CC,"T",0X1,3);
	split_sreg_range(0X8052532A,"T",0X1,3);
	split_sreg_range(0X80525348,"T",0X1,3);
	split_sreg_range(0X8052534E,"T",0X1,3);
	split_sreg_range(0X8052535A,"T",0X1,3);
	split_sreg_range(0X805253B2,"T",0X1,3);
	split_sreg_range(0X805253B6,"T",0X1,3);
	split_sreg_range(0X805253E8,"T",0X1,3);
	split_sreg_range(0X8052542A,"T",0X1,3);
	split_sreg_range(0X8052547A,"T",0X1,3);
	split_sreg_range(0X80525488,"T",0X1,3);
	split_sreg_range(0X80525496,"T",0X1,3);
	split_sreg_range(0X805254AA,"T",0X1,3);
	split_sreg_range(0X805254B6,"T",0X1,3);
	split_sreg_range(0X805254CA,"T",0X1,3);
	split_sreg_range(0X805254D8,"T",0X1,3);
	split_sreg_range(0X8052553A,"T",0X1,3);
	split_sreg_range(0X8052553C,"T",0X1,3);
	split_sreg_range(0X8052554A,"T",0X1,3);
	split_sreg_range(0X80525556,"T",0X1,3);
	split_sreg_range(0X8052557C,"T",0X1,3);
	split_sreg_range(0X8052557E,"T",0X1,3);
	split_sreg_range(0X80525596,"T",0X1,3);
	split_sreg_range(0X805255A2,"T",0X1,3);
	split_sreg_range(0X805255B0,"T",0X1,3);
	split_sreg_range(0X805255CE,"T",0X1,3);
	split_sreg_range(0X805255E0,"T",0X1,3);
	split_sreg_range(0X805255FE,"T",0X1,3);
	split_sreg_range(0X80525606,"T",0X1,3);
	split_sreg_range(0X80525618,"T",0X1,3);
	split_sreg_range(0X8052562E,"T",0X1,3);
	split_sreg_range(0X8052563A,"T",0X1,3);
	split_sreg_range(0X8052565C,"T",0X1,3);
	split_sreg_range(0X8052565E,"T",0X1,3);
	split_sreg_range(0X8052566C,"T",0X1,3);
	split_sreg_range(0X80525678,"T",0X1,3);
	split_sreg_range(0X805256B4,"T",0X1,3);
	split_sreg_range(0X80525762,"T",0X1,3);
	split_sreg_range(0X80525772,"T",0X1,3);
	split_sreg_range(0X805257A4,"T",0X1,3);
	split_sreg_range(0X805257D0,"T",0X1,3);
	split_sreg_range(0X805257DC,"T",0X1,3);
	split_sreg_range(0X805257E6,"T",0X1,3);
	split_sreg_range(0X80525810,"T",0X1,3);
	split_sreg_range(0X80525820,"T",0X1,3);
	split_sreg_range(0X80525832,"T",0X1,3);
	split_sreg_range(0X80525866,"T",0X1,3);
	split_sreg_range(0X80525896,"T",0X1,3);
	split_sreg_range(0X805258B2,"T",0X1,3);
	split_sreg_range(0X805258CA,"T",0X1,3);
	split_sreg_range(0X805258E4,"T",0X1,3);
	split_sreg_range(0X805258F4,"T",0X1,3);
	split_sreg_range(0X80525910,"T",0X1,3);
	split_sreg_range(0X8052591E,"T",0X1,3);
	split_sreg_range(0X8052593C,"T",0X1,3);
	split_sreg_range(0X80525970,"T",0X1,3);
	split_sreg_range(0X80525A36,"T",0X1,3);
	split_sreg_range(0X80525A42,"T",0X1,3);
	split_sreg_range(0X80525A6E,"T",0X1,3);
	split_sreg_range(0X80525A7A,"T",0X1,3);
	split_sreg_range(0X80525A82,"T",0X1,3);
	split_sreg_range(0X80525AB2,"T",0X1,3);
	split_sreg_range(0X80525AE2,"T",0X1,3);
	split_sreg_range(0X80525B4C,"T",0X1,3);
	split_sreg_range(0X80525B4E,"T",0X1,3);
	split_sreg_range(0X80525B5E,"T",0X1,3);
	split_sreg_range(0X80525B6A,"T",0X1,3);
	split_sreg_range(0X80525B92,"T",0X1,3);
	split_sreg_range(0X80525B94,"T",0X1,3);
	split_sreg_range(0X80525BAC,"T",0X1,3);
	split_sreg_range(0X80525BC0,"T",0X1,3);
	split_sreg_range(0X80525BC2,"T",0X1,3);
	split_sreg_range(0X80525BD0,"T",0X1,3);
	split_sreg_range(0X80525BEC,"T",0X1,3);
	split_sreg_range(0X80525BFA,"T",0X1,3);
	split_sreg_range(0X80525C0E,"T",0X1,3);
	split_sreg_range(0X80525C16,"T",0X1,3);
	split_sreg_range(0X80525C50,"T",0X1,3);
	split_sreg_range(0X80525D28,"T",0X1,3);
	split_sreg_range(0X80525D60,"T",0X1,3);
	split_sreg_range(0X80525D86,"T",0X1,3);
	split_sreg_range(0X80525D96,"T",0X1,3);
	split_sreg_range(0X80525DAC,"T",0X1,3);
	split_sreg_range(0X80525DD6,"T",0X1,3);
	split_sreg_range(0X80525DE4,"T",0X1,3);
	split_sreg_range(0X80525DF6,"T",0X1,3);
	split_sreg_range(0X80525E1E,"T",0X1,3);
	split_sreg_range(0X80525E20,"T",0X1,3);
	split_sreg_range(0X80525E40,"T",0X1,3);
	split_sreg_range(0X80525E58,"T",0X1,3);
	split_sreg_range(0X80525E6A,"T",0X1,3);
	split_sreg_range(0X80525E80,"T",0X1,3);
	split_sreg_range(0X80525E9C,"T",0X1,3);
	split_sreg_range(0X80525EAE,"T",0X1,3);
	split_sreg_range(0X80525EBA,"T",0X1,3);
	split_sreg_range(0X80525ECE,"T",0X1,3);
	split_sreg_range(0X80525EDC,"T",0X1,3);
	split_sreg_range(0X80525EFA,"T",0X1,3);
	split_sreg_range(0X80525F0A,"T",0X1,3);
	split_sreg_range(0X80525F2E,"T",0X1,3);
	split_sreg_range(0X80525F50,"T",0X1,3);
	split_sreg_range(0X80525F74,"T",0X1,3);
	split_sreg_range(0X80525FC0,"T",0X1,3);
	split_sreg_range(0X80525FC4,"T",0X1,3);
	split_sreg_range(0X80525FD6,"T",0X1,3);
	split_sreg_range(0X80525FE2,"T",0X1,3);
	split_sreg_range(0X80525FEC,"T",0X1,3);
	split_sreg_range(0X80526022,"T",0X1,3);
	split_sreg_range(0X80526024,"T",0X1,3);
	split_sreg_range(0X8052603E,"T",0X1,3);
	split_sreg_range(0X80526054,"T",0X1,3);
	split_sreg_range(0X8052606E,"T",0X1,3);
	split_sreg_range(0X805260AE,"T",0X1,3);
	split_sreg_range(0X805260D0,"T",0X1,3);
	split_sreg_range(0X8052610C,"T",0X1,3);
	split_sreg_range(0X8052610E,"T",0X1,3);
	split_sreg_range(0X8052611E,"T",0X1,3);
	split_sreg_range(0X80526130,"T",0X1,3);
	split_sreg_range(0X80526138,"T",0X1,3);
	split_sreg_range(0X8052613E,"T",0X1,3);
	split_sreg_range(0X80526172,"T",0X1,3);
	split_sreg_range(0X80526174,"T",0X1,3);
	split_sreg_range(0X80526192,"T",0X1,3);
	split_sreg_range(0X805261AA,"T",0X1,3);
	split_sreg_range(0X805261BA,"T",0X1,3);
	split_sreg_range(0X805261E8,"T",0X1,3);
	split_sreg_range(0X805261FA,"T",0X1,3);
	split_sreg_range(0X8052620C,"T",0X1,3);
	split_sreg_range(0X8052621E,"T",0X1,3);
	split_sreg_range(0X8052623C,"T",0X1,3);
	split_sreg_range(0X80526254,"T",0X1,3);
	split_sreg_range(0X8052627E,"T",0X1,3);
	split_sreg_range(0X8052628A,"T",0X1,3);
	split_sreg_range(0X805262A0,"T",0X1,3);
	split_sreg_range(0X805262B2,"T",0X1,3);
	split_sreg_range(0X805262C6,"T",0X1,3);
	split_sreg_range(0X805262CE,"T",0X1,3);
	split_sreg_range(0X805262DC,"T",0X1,3);
	split_sreg_range(0X805262E0,"T",0X1,3);
	split_sreg_range(0X805262F6,"T",0X1,3);
	split_sreg_range(0X80526322,"T",0X1,3);
	split_sreg_range(0X80526338,"T",0X1,3);
	split_sreg_range(0X8052634C,"T",0X1,3);
	split_sreg_range(0X80526356,"T",0X1,3);
	split_sreg_range(0X80526364,"T",0X1,3);
	split_sreg_range(0X80526366,"T",0X1,3);
	split_sreg_range(0X8052637C,"T",0X1,3);
	split_sreg_range(0X805263C0,"T",0X1,3);
	split_sreg_range(0X805263F0,"T",0X1,3);
	split_sreg_range(0X805263F6,"T",0X1,3);
	split_sreg_range(0X8052641C,"T",0X1,3);
	split_sreg_range(0X8052641E,"T",0X1,3);
	split_sreg_range(0X8052644E,"T",0X1,3);
	split_sreg_range(0X80526452,"T",0X1,3);
	split_sreg_range(0X80526486,"T",0X1,3);
	split_sreg_range(0X80526488,"T",0X1,3);
	split_sreg_range(0X805264C0,"T",0X1,3);
	split_sreg_range(0X805264DA,"T",0X1,3);
	split_sreg_range(0X8052650C,"T",0X1,3);
	split_sreg_range(0X80526524,"T",0X1,3);
	split_sreg_range(0X8052654E,"T",0X1,3);
	split_sreg_range(0X80526574,"T",0X1,3);
	split_sreg_range(0X80526584,"T",0X1,3);
	split_sreg_range(0X80526592,"T",0X1,3);
	split_sreg_range(0X805265A0,"T",0X1,3);
	split_sreg_range(0X805265C4,"T",0X1,3);
	split_sreg_range(0X805265D2,"T",0X1,3);
	split_sreg_range(0X805265D8,"T",0X1,3);
	split_sreg_range(0X80526614,"T",0X1,3);
	split_sreg_range(0X80526622,"T",0X1,3);
	split_sreg_range(0X80526644,"T",0X1,3);
	split_sreg_range(0X80526656,"T",0X1,3);
	split_sreg_range(0X80526664,"T",0X1,3);
	split_sreg_range(0X80526676,"T",0X1,3);
	split_sreg_range(0X805266A4,"T",0X1,3);
	split_sreg_range(0X805266B2,"T",0X1,3);
	split_sreg_range(0X805266D4,"T",0X1,3);
	split_sreg_range(0X805266E6,"T",0X1,3);
	split_sreg_range(0X805266EE,"T",0X1,3);
	split_sreg_range(0X80526734,"T",0X1,3);
	split_sreg_range(0X805267BC,"T",0X1,3);
	split_sreg_range(0X805267CE,"T",0X1,3);
	split_sreg_range(0X805267F8,"T",0X1,3);
	split_sreg_range(0X8052680C,"T",0X1,3);
	split_sreg_range(0X8052683E,"T",0X1,3);
	split_sreg_range(0X80526890,"T",0X1,3);
	split_sreg_range(0X805268A2,"T",0X1,3);
	split_sreg_range(0X805268CA,"T",0X1,3);
	split_sreg_range(0X805268DC,"T",0X1,3);
	split_sreg_range(0X805268F0,"T",0X1,3);
	split_sreg_range(0X805268FE,"T",0X1,3);
	split_sreg_range(0X8052690E,"T",0X1,3);
	split_sreg_range(0X80526916,"T",0X1,3);
	split_sreg_range(0X80526918,"T",0X1,3);
	split_sreg_range(0X80526946,"T",0X1,3);
	split_sreg_range(0X8052694E,"T",0X1,3);
	split_sreg_range(0X80526960,"T",0X1,3);
	split_sreg_range(0X80526970,"T",0X1,3);
	split_sreg_range(0X80526980,"T",0X1,3);
	split_sreg_range(0X80526988,"T",0X1,3);
	split_sreg_range(0X8052698A,"T",0X1,3);
	split_sreg_range(0X805269A8,"T",0X1,3);
	split_sreg_range(0X805269BC,"T",0X1,3);
	split_sreg_range(0X805269E0,"T",0X1,3);
	split_sreg_range(0X80526B06,"T",0X1,3);
	split_sreg_range(0X80526B24,"T",0X1,3);
	split_sreg_range(0X80526BB0,"T",0X1,3);
	split_sreg_range(0X80526C22,"T",0X1,3);
	split_sreg_range(0X80526CD4,"T",0X1,3);
	split_sreg_range(0X80526D5A,"T",0X1,3);
	split_sreg_range(0X80526D80,"T",0X1,3);
	split_sreg_range(0X80526E28,"T",0X1,3);
	split_sreg_range(0X80526E36,"T",0X1,3);
	split_sreg_range(0X80526EB4,"T",0X1,3);
	split_sreg_range(0X80526F7C,"T",0X1,3);
	split_sreg_range(0X80526F92,"T",0X1,3);
	split_sreg_range(0X80526FAE,"T",0X1,3);
	split_sreg_range(0X80526FB0,"T",0X1,3);
	split_sreg_range(0X80526FD4,"T",0X1,3);
	split_sreg_range(0X8052704C,"T",0X1,3);
	split_sreg_range(0X80527078,"T",0X1,3);
	split_sreg_range(0X8052715E,"T",0X1,3);
	split_sreg_range(0X805271D2,"T",0X1,3);
	split_sreg_range(0X805271DA,"T",0X1,3);
	split_sreg_range(0X805271EE,"T",0X1,3);
	split_sreg_range(0X8052720C,"T",0X1,3);
	split_sreg_range(0X8052721A,"T",0X1,3);
	split_sreg_range(0X8052726E,"T",0X1,3);
	split_sreg_range(0X80527324,"T",0X1,3);
	split_sreg_range(0X8052741C,"T",0X1,3);
	split_sreg_range(0X80527422,"T",0X1,3);
	split_sreg_range(0X8052743A,"T",0X1,3);
	split_sreg_range(0X805274A0,"T",0X1,3);
	split_sreg_range(0X805274A8,"T",0X1,3);
	split_sreg_range(0X805274C8,"T",0X1,3);
	split_sreg_range(0X805274DA,"T",0X1,3);
	split_sreg_range(0X805274E2,"T",0X1,3);
	split_sreg_range(0X805274F0,"T",0X1,3);
	split_sreg_range(0X80527512,"T",0X1,3);
	split_sreg_range(0X80527528,"T",0X1,3);
	split_sreg_range(0X80527538,"T",0X1,3);
	split_sreg_range(0X80527574,"T",0X1,3);
	split_sreg_range(0X8052757A,"T",0X1,3);
	split_sreg_range(0X8052758E,"T",0X1,3);
	split_sreg_range(0X805275AC,"T",0X1,3);
	split_sreg_range(0X805275B2,"T",0X1,3);
	split_sreg_range(0X805275C2,"T",0X1,3);
	split_sreg_range(0X805275FE,"T",0X1,3);
	split_sreg_range(0X80527604,"T",0X1,3);
	split_sreg_range(0X80527618,"T",0X1,3);
	split_sreg_range(0X8052761A,"T",0X1,3);
	split_sreg_range(0X8052762E,"T",0X1,3);
	split_sreg_range(0X80527638,"T",0X1,3);
	split_sreg_range(0X80527678,"T",0X1,3);
	split_sreg_range(0X8052769A,"T",0X1,3);
	split_sreg_range(0X805276C0,"T",0X1,3);
	split_sreg_range(0X805276CE,"T",0X1,3);
	split_sreg_range(0X805276EE,"T",0X1,3);
	split_sreg_range(0X8052772E,"T",0X1,3);
	split_sreg_range(0X80527750,"T",0X1,3);
	split_sreg_range(0X8052777E,"T",0X1,3);
	split_sreg_range(0X80527784,"T",0X1,3);
	split_sreg_range(0X805277AE,"T",0X1,3);
	split_sreg_range(0X805277C2,"T",0X1,3);
	split_sreg_range(0X805278DA,"T",0X1,3);
	split_sreg_range(0X80527912,"T",0X1,3);
	split_sreg_range(0X8052791A,"T",0X1,3);
	split_sreg_range(0X80527950,"T",0X1,3);
	split_sreg_range(0X80527994,"T",0X1,3);
	split_sreg_range(0X805279CA,"T",0X1,3);
	split_sreg_range(0X80527A92,"T",0X1,3);
	split_sreg_range(0X80527A9E,"T",0X1,3);
	split_sreg_range(0X80527AB4,"T",0X1,3);
	split_sreg_range(0X80527ADA,"T",0X1,3);
	split_sreg_range(0X80527B0A,"T",0X1,3);
	split_sreg_range(0X80527B42,"T",0X1,3);
	split_sreg_range(0X80527B62,"T",0X1,3);
	split_sreg_range(0X80527B6A,"T",0X1,3);
	split_sreg_range(0X80527B82,"T",0X1,3);
	split_sreg_range(0X80527B98,"T",0X1,3);
	split_sreg_range(0X80527BA2,"T",0X1,3);
	split_sreg_range(0X80527BAC,"T",0X1,3);
	split_sreg_range(0X80527BD6,"T",0X1,3);
	split_sreg_range(0X80527BEC,"T",0X1,3);
	split_sreg_range(0X80527C0A,"T",0X1,3);
	split_sreg_range(0X80527C2E,"T",0X1,3);
	split_sreg_range(0X80527C38,"T",0X1,3);
	split_sreg_range(0X80527C44,"T",0X1,3);
	split_sreg_range(0X80527C4E,"T",0X1,3);
	split_sreg_range(0X80527CD4,"T",0X1,3);
	split_sreg_range(0X80527CE4,"T",0X1,3);
	split_sreg_range(0X80527CF0,"T",0X1,3);
	split_sreg_range(0X80527CFE,"T",0X1,3);
	split_sreg_range(0X80527D0A,"T",0X1,3);
	split_sreg_range(0X80527D26,"T",0X1,3);
	split_sreg_range(0X80527D36,"T",0X1,3);
	split_sreg_range(0X80527D42,"T",0X1,3);
	split_sreg_range(0X80527D56,"T",0X1,3);
	split_sreg_range(0X80527D62,"T",0X1,3);
	split_sreg_range(0X80527D82,"T",0X1,3);
	split_sreg_range(0X80527D88,"T",0X1,3);
	split_sreg_range(0X80527D9C,"T",0X1,3);
	split_sreg_range(0X80527DF8,"T",0X1,3);
	split_sreg_range(0X80527E04,"T",0X1,3);
	split_sreg_range(0X80527E18,"T",0X1,3);
	split_sreg_range(0X80527E3C,"T",0X1,3);
	split_sreg_range(0X80527E42,"T",0X1,3);
	split_sreg_range(0X80527E54,"T",0X1,3);
	split_sreg_range(0X80527EB4,"T",0X1,3);
	split_sreg_range(0X80527EC8,"T",0X1,3);
	split_sreg_range(0X80527EDC,"T",0X1,3);
	split_sreg_range(0X80527F18,"T",0X1,3);
	split_sreg_range(0X80527F2E,"T",0X1,3);
	split_sreg_range(0X80527F56,"T",0X1,3);
	split_sreg_range(0X80527F60,"T",0X1,3);
	split_sreg_range(0X80527F70,"T",0X1,3);
	split_sreg_range(0X80527F86,"T",0X1,3);
	split_sreg_range(0X80527F9E,"T",0X1,3);
	split_sreg_range(0X80527FC6,"T",0X1,3);
	split_sreg_range(0X80527FD6,"T",0X1,3);
	split_sreg_range(0X80527FE6,"T",0X1,3);
	split_sreg_range(0X80527FEA,"T",0X1,3);
	split_sreg_range(0X80528064,"T",0X1,3);
	split_sreg_range(0X80528074,"T",0X1,3);
	split_sreg_range(0X80528080,"T",0X1,3);
	split_sreg_range(0X805280A4,"T",0X1,3);
	split_sreg_range(0X805280B0,"T",0X1,3);
	split_sreg_range(0X805280BA,"T",0X1,3);
	split_sreg_range(0X805280EC,"T",0X1,3);
	split_sreg_range(0X80528108,"T",0X1,3);
	split_sreg_range(0X80528114,"T",0X1,3);
	split_sreg_range(0X8052813E,"T",0X1,3);
	split_sreg_range(0X80528148,"T",0X1,3);
	split_sreg_range(0X8052816E,"T",0X1,3);
	split_sreg_range(0X80528172,"T",0X1,3);
	split_sreg_range(0X80528174,"T",0X1,3);
	split_sreg_range(0X80528176,"T",0X1,3);
	split_sreg_range(0X805281D6,"T",0X1,3);
	split_sreg_range(0X805281F2,"T",0X1,3);
	split_sreg_range(0X805281F4,"T",0X1,3);
	split_sreg_range(0X80528220,"T",0X1,3);
	split_sreg_range(0X8052824E,"T",0X1,3);
	split_sreg_range(0X80528264,"T",0X1,3);
	split_sreg_range(0X80528290,"T",0X1,3);
	split_sreg_range(0X8052829A,"T",0X1,3);
	split_sreg_range(0X805282AC,"T",0X1,3);
	split_sreg_range(0X805282E4,"T",0X1,3);
	split_sreg_range(0X805282EE,"T",0X1,3);
	split_sreg_range(0X8052831C,"T",0X1,3);
	split_sreg_range(0X805283AE,"T",0X1,3);
	split_sreg_range(0X805283B6,"T",0X1,3);
	split_sreg_range(0X805283BE,"T",0X1,3);
	split_sreg_range(0X805283DC,"T",0X1,3);
	split_sreg_range(0X805283E4,"T",0X1,3);
	split_sreg_range(0X80528410,"T",0X1,3);
	split_sreg_range(0X805284A0,"T",0X1,3);
	split_sreg_range(0X80528572,"T",0X1,3);
	split_sreg_range(0X805285B6,"T",0X1,3);
	split_sreg_range(0X805285C8,"T",0X1,3);
	split_sreg_range(0X805285E0,"T",0X1,3);
	split_sreg_range(0X80528608,"T",0X1,3);
	split_sreg_range(0X80528628,"T",0X1,3);
	split_sreg_range(0X8052869C,"T",0X1,3);
	split_sreg_range(0X805286AA,"T",0X1,3);
	split_sreg_range(0X805286DA,"T",0X1,3);
	split_sreg_range(0X8052874E,"T",0X1,3);
	split_sreg_range(0X80528758,"T",0X1,3);
	split_sreg_range(0X80528788,"T",0X1,3);
	split_sreg_range(0X8052879A,"T",0X1,3);
	split_sreg_range(0X805287B4,"T",0X1,3);
	split_sreg_range(0X80528804,"T",0X1,3);
	split_sreg_range(0X80528818,"T",0X1,3);
	split_sreg_range(0X80528834,"T",0X1,3);
	split_sreg_range(0X80528886,"T",0X1,3);
	split_sreg_range(0X80528890,"T",0X1,3);
	split_sreg_range(0X805288B6,"T",0X1,3);
	split_sreg_range(0X805288C4,"T",0X1,3);
	split_sreg_range(0X805288C6,"T",0X1,3);
	split_sreg_range(0X805288DC,"T",0X1,3);
	split_sreg_range(0X805288E0,"T",0X1,3);
	split_sreg_range(0X805288FE,"T",0X1,3);
	split_sreg_range(0X80528906,"T",0X1,3);
	split_sreg_range(0X80528916,"T",0X1,3);
	split_sreg_range(0X80528944,"T",0X1,3);
	split_sreg_range(0X80528956,"T",0X1,3);
	split_sreg_range(0X80528968,"T",0X1,3);
	split_sreg_range(0X80528984,"T",0X1,3);
	split_sreg_range(0X805289B2,"T",0X1,3);
	split_sreg_range(0X805289C2,"T",0X1,3);
	split_sreg_range(0X805289D4,"T",0X1,3);
	split_sreg_range(0X805289E0,"T",0X1,3);
	split_sreg_range(0X805289EE,"T",0X1,3);
	split_sreg_range(0X80528A20,"T",0X1,3);
	split_sreg_range(0X80528A34,"T",0X1,3);
	split_sreg_range(0X80528A48,"T",0X1,3);
	split_sreg_range(0X80528A6A,"T",0X1,3);
	split_sreg_range(0X80528A86,"T",0X1,3);
	split_sreg_range(0X80528ABC,"T",0X1,3);
	split_sreg_range(0X80528AD2,"T",0X1,3);
	split_sreg_range(0X80528ADA,"T",0X1,3);
	split_sreg_range(0X80528B2A,"T",0X1,3);
	split_sreg_range(0X80528B30,"T",0X1,3);
	split_sreg_range(0X80528BA8,"T",0X1,3);
	split_sreg_range(0X80528BAE,"T",0X1,3);
	split_sreg_range(0X80528BCC,"T",0X1,3);
	split_sreg_range(0X80528BCE,"T",0X1,3);
	split_sreg_range(0X80528C26,"T",0X1,3);
	split_sreg_range(0X80528C36,"T",0X1,3);
	split_sreg_range(0X80528C3E,"T",0X1,3);
	split_sreg_range(0X80528C54,"T",0X1,3);
	split_sreg_range(0X80528C8C,"T",0X1,3);
	split_sreg_range(0X80528CA0,"T",0X1,3);
	split_sreg_range(0X80528CBC,"T",0X1,3);
	split_sreg_range(0X80528CD4,"T",0X1,3);
	split_sreg_range(0X80528DE0,"T",0X1,3);
	split_sreg_range(0X80528DE8,"T",0X1,3);
	split_sreg_range(0X80528E1A,"T",0X1,3);
	split_sreg_range(0X80528EF6,"T",0X1,3);
	split_sreg_range(0X80528F4A,"T",0X1,3);
	split_sreg_range(0X80528F5C,"T",0X1,3);
	split_sreg_range(0X80528F86,"T",0X1,3);
	split_sreg_range(0X80528F90,"T",0X1,3);
	split_sreg_range(0X80528FA0,"T",0X1,3);
	split_sreg_range(0X80528FD0,"T",0X1,3);
	split_sreg_range(0X80528FEC,"T",0X1,3);
	split_sreg_range(0X80529014,"T",0X1,3);
	split_sreg_range(0X8052903E,"T",0X1,3);
	split_sreg_range(0X8052904A,"T",0X1,3);
	split_sreg_range(0X8052908E,"T",0X1,3);
	split_sreg_range(0X805290A6,"T",0X1,3);
	split_sreg_range(0X805290AA,"T",0X1,3);
	split_sreg_range(0X80529114,"T",0X1,3);
	split_sreg_range(0X8052917E,"T",0X1,3);
	split_sreg_range(0X805291B6,"T",0X1,3);
	split_sreg_range(0X805291F8,"T",0X1,3);
	split_sreg_range(0X8052920E,"T",0X1,3);
	split_sreg_range(0X80529216,"T",0X1,3);
	split_sreg_range(0X80529450,"T",0X1,3);
	split_sreg_range(0X80529482,"T",0X1,3);
	split_sreg_range(0X805294A4,"T",0X1,3);
	split_sreg_range(0X805294D4,"T",0X1,3);
	split_sreg_range(0X805294DE,"T",0X1,3);
	split_sreg_range(0X80529500,"T",0X1,3);
	split_sreg_range(0X80529514,"T",0X1,3);
	split_sreg_range(0X8052956C,"T",0X1,3);
	split_sreg_range(0X8052959E,"T",0X1,3);
	split_sreg_range(0X805295AE,"T",0X1,3);
	split_sreg_range(0X805295B4,"T",0X1,3);
	split_sreg_range(0X805295BC,"T",0X1,3);
	split_sreg_range(0X805295DC,"T",0X1,3);
	split_sreg_range(0X805295E4,"T",0X1,3);
	split_sreg_range(0X805295F0,"T",0X1,3);
	split_sreg_range(0X80529628,"T",0X1,3);
	split_sreg_range(0X80529630,"T",0X1,3);
	split_sreg_range(0X80529664,"T",0X1,3);
	split_sreg_range(0X80529678,"T",0X1,3);
	split_sreg_range(0X805296BC,"T",0X1,3);
	split_sreg_range(0X805296C8,"T",0X1,3);
	split_sreg_range(0X805296D0,"T",0X1,3);
	split_sreg_range(0X805296E8,"T",0X1,3);
	split_sreg_range(0X80529728,"T",0X1,3);
	split_sreg_range(0X805297E4,"T",0X1,3);
	split_sreg_range(0X805297FC,"T",0X1,3);
	split_sreg_range(0X80529886,"T",0X1,3);
	split_sreg_range(0X80529980,"T",0X1,3);
	split_sreg_range(0X80529996,"T",0X1,3);
	split_sreg_range(0X805299AA,"T",0X1,3);
	split_sreg_range(0X805299B6,"T",0X1,3);
	split_sreg_range(0X805299C4,"T",0X1,3);
	split_sreg_range(0X805299C8,"T",0X1,3);
	split_sreg_range(0X805299DC,"T",0X1,3);
	split_sreg_range(0X80529A52,"T",0X1,3);
	split_sreg_range(0X80529A6A,"T",0X1,3);
	split_sreg_range(0X80529A72,"T",0X1,3);
	split_sreg_range(0X80529A8E,"T",0X1,3);
	split_sreg_range(0X80529A9C,"T",0X1,3);
	split_sreg_range(0X80529AAA,"T",0X1,3);
	split_sreg_range(0X80529AB4,"T",0X1,3);
	split_sreg_range(0X80529B30,"T",0X1,3);
	split_sreg_range(0X80529BA0,"T",0X1,3);
	split_sreg_range(0X80529BA2,"T",0X1,3);
	split_sreg_range(0X80529C40,"T",0X1,3);
	split_sreg_range(0X80529C58,"T",0X1,3);
	split_sreg_range(0X80529CB6,"T",0X1,3);
	split_sreg_range(0X80529D02,"T",0X1,3);
	split_sreg_range(0X80529D94,"T",0X1,3);
	split_sreg_range(0X80529D96,"T",0X1,3);
	split_sreg_range(0X80529DE6,"T",0X1,3);
	split_sreg_range(0X80529E38,"T",0X1,3);
	split_sreg_range(0X80529EBC,"T",0X1,3);
	split_sreg_range(0X80529ED2,"T",0X1,3);
	split_sreg_range(0X80529EF4,"T",0X1,3);
	split_sreg_range(0X80529F02,"T",0X1,3);
	split_sreg_range(0X80529F12,"T",0X1,3);
	split_sreg_range(0X80529F40,"T",0X1,3);
	split_sreg_range(0X80529F62,"T",0X1,3);
	split_sreg_range(0X80529F70,"T",0X1,3);
	split_sreg_range(0X80529F78,"T",0X1,3);
	split_sreg_range(0X80529F96,"T",0X1,3);
	split_sreg_range(0X8052A020,"T",0X1,3);
	split_sreg_range(0X8052A056,"T",0X1,3);
	split_sreg_range(0X8052A060,"T",0X1,3);
	split_sreg_range(0X8052A06A,"T",0X1,3);
	split_sreg_range(0X8052A0BC,"T",0X1,3);
	split_sreg_range(0X8052A0D6,"T",0X1,3);
	split_sreg_range(0X8052A0F0,"T",0X1,3);
	split_sreg_range(0X8052A14E,"T",0X1,3);
	split_sreg_range(0X8052A184,"T",0X1,3);
	split_sreg_range(0X8052A18E,"T",0X1,3);
	split_sreg_range(0X8052A198,"T",0X1,3);
	split_sreg_range(0X8052A1DE,"T",0X1,3);
	split_sreg_range(0X8052A24A,"T",0X1,3);
	split_sreg_range(0X8052A256,"T",0X1,3);
	split_sreg_range(0X8052A260,"T",0X1,3);
	split_sreg_range(0X8052A284,"T",0X1,3);
	split_sreg_range(0X8052A28C,"T",0X1,3);
	split_sreg_range(0X8052A2AE,"T",0X1,3);
	split_sreg_range(0X8052A2BA,"T",0X1,3);
	split_sreg_range(0X8052A2C6,"T",0X1,3);
	split_sreg_range(0X8052A2EE,"T",0X1,3);
	split_sreg_range(0X8052A316,"T",0X1,3);
	split_sreg_range(0X8052A322,"T",0X1,3);
	split_sreg_range(0X8052A32E,"T",0X1,3);
	split_sreg_range(0X8052A356,"T",0X1,3);
	split_sreg_range(0X8052A370,"T",0X1,3);
	split_sreg_range(0X8052A37C,"T",0X1,3);
	split_sreg_range(0X8052A388,"T",0X1,3);
	split_sreg_range(0X8052A3B0,"T",0X1,3);
	split_sreg_range(0X8052A3CA,"T",0X1,3);
	split_sreg_range(0X8052A3D6,"T",0X1,3);
	split_sreg_range(0X8052A3E2,"T",0X1,3);
	split_sreg_range(0X8052A40A,"T",0X1,3);
	split_sreg_range(0X8052A428,"T",0X1,3);
	split_sreg_range(0X8052A434,"T",0X1,3);
	split_sreg_range(0X8052A43E,"T",0X1,3);
	split_sreg_range(0X8052A466,"T",0X1,3);
	split_sreg_range(0X8052A492,"T",0X1,3);
	split_sreg_range(0X8052A4F0,"T",0X1,3);
	split_sreg_range(0X8052A520,"T",0X1,3);
	split_sreg_range(0X8052A526,"T",0X1,3);
	split_sreg_range(0X8052A564,"T",0X1,3);
	split_sreg_range(0X8052A58E,"T",0X1,3);
	split_sreg_range(0X8052A5C0,"T",0X1,3);
	split_sreg_range(0X8052A620,"T",0X1,3);
	split_sreg_range(0X8052A63C,"T",0X1,3);
	split_sreg_range(0X8052A63E,"T",0X1,3);
	split_sreg_range(0X8052A64C,"T",0X1,3);
	split_sreg_range(0X8052A676,"T",0X1,3);
	split_sreg_range(0X8052A67A,"T",0X1,3);
	split_sreg_range(0X8052A682,"T",0X1,3);
	split_sreg_range(0X8052A6BE,"T",0X1,3);
	split_sreg_range(0X8052A6E2,"T",0X1,3);
	split_sreg_range(0X8052A714,"T",0X1,3);
	split_sreg_range(0X8052A764,"T",0X1,3);
	split_sreg_range(0X8052A782,"T",0X1,3);
	split_sreg_range(0X8052A792,"T",0X1,3);
	split_sreg_range(0X8052A7A6,"T",0X1,3);
	split_sreg_range(0X8052A7A8,"T",0X1,3);
	split_sreg_range(0X8052A7AC,"T",0X1,3);
	split_sreg_range(0X8052A7D0,"T",0X1,3);
	split_sreg_range(0X8052A7D6,"T",0X1,3);
	split_sreg_range(0X8052A7E4,"T",0X1,3);
	split_sreg_range(0X8052A7E6,"T",0X1,3);
	split_sreg_range(0X8052A814,"T",0X1,3);
	split_sreg_range(0X8052A818,"T",0X1,3);
	split_sreg_range(0X8052A852,"T",0X1,3);
	split_sreg_range(0X8052A88C,"T",0X1,3);
	split_sreg_range(0X8052A8C4,"T",0X1,3);
	split_sreg_range(0X8052A8D2,"T",0X1,3);
	split_sreg_range(0X8052A8F0,"T",0X1,3);
	split_sreg_range(0X8052A8FE,"T",0X1,3);
	split_sreg_range(0X8052A940,"T",0X1,3);
	split_sreg_range(0X8052A96A,"T",0X1,3);
	split_sreg_range(0X8052A9AE,"T",0X1,3);
	split_sreg_range(0X8052AA00,"T",0X1,3);
	split_sreg_range(0X8052AA0E,"T",0X1,3);
	split_sreg_range(0X8052AA48,"T",0X1,3);
	split_sreg_range(0X8052AA56,"T",0X1,3);
	split_sreg_range(0X8052AA90,"T",0X1,3);
	split_sreg_range(0X8052AAC2,"T",0X1,3);
	split_sreg_range(0X8052AAE8,"T",0X1,3);
	split_sreg_range(0X8052AB2C,"T",0X1,3);
	split_sreg_range(0X8052AB3A,"T",0X1,3);
	split_sreg_range(0X8052AB3E,"T",0X1,3);
	split_sreg_range(0X8052ABF4,"T",0X1,3);
	split_sreg_range(0X8052AC22,"T",0X1,3);
	split_sreg_range(0X8052AC28,"T",0X1,3);
	split_sreg_range(0X8052AC3C,"T",0X1,3);
	split_sreg_range(0X8052AC44,"T",0X1,3);
	split_sreg_range(0X8052AC4A,"T",0X1,3);
	split_sreg_range(0X8052AC60,"T",0X1,3);
	split_sreg_range(0X8052AC86,"T",0X1,3);
	split_sreg_range(0X8052ACA4,"T",0X1,3);
	split_sreg_range(0X8052AD3C,"T",0X1,3);
	split_sreg_range(0X8052AD4C,"T",0X1,3);
	split_sreg_range(0X8052AD5A,"T",0X1,3);
	split_sreg_range(0X8052AD68,"T",0X1,3);
	split_sreg_range(0X8052AD88,"T",0X1,3);
	split_sreg_range(0X8052AD9C,"T",0X1,3);
	split_sreg_range(0X8052ADAA,"T",0X1,3);
	split_sreg_range(0X8052ADD2,"T",0X1,3);
	split_sreg_range(0X8052AE40,"T",0X1,3);
	split_sreg_range(0X8052AE54,"T",0X1,3);
	split_sreg_range(0X8052AE78,"T",0X1,3);
	split_sreg_range(0X8052AE80,"T",0X1,3);
	split_sreg_range(0X8052AE8A,"T",0X1,3);
	split_sreg_range(0X8052AEAC,"T",0X1,3);
	split_sreg_range(0X8052AEBC,"T",0X1,3);
	split_sreg_range(0X8052AECA,"T",0X1,3);
	split_sreg_range(0X8052AED4,"T",0X1,3);
	split_sreg_range(0X8052AEDC,"T",0X1,3);
	split_sreg_range(0X8052AEE0,"T",0X1,3);
	split_sreg_range(0X8052AF1A,"T",0X1,3);
	split_sreg_range(0X8052AF5E,"T",0X1,3);
	split_sreg_range(0X8052AF64,"T",0X1,3);
	split_sreg_range(0X8052AF84,"T",0X1,3);
	split_sreg_range(0X8052AF90,"T",0X1,3);
	split_sreg_range(0X8052AFB4,"T",0X1,3);
	split_sreg_range(0X8052AFC8,"T",0X1,3);
	split_sreg_range(0X8052AFDE,"T",0X1,3);
	split_sreg_range(0X8052AFEC,"T",0X1,3);
	split_sreg_range(0X8052B020,"T",0X1,3);
	split_sreg_range(0X8052B04C,"T",0X1,3);
	split_sreg_range(0X8052B06A,"T",0X1,3);
	split_sreg_range(0X8052B078,"T",0X1,3);
	split_sreg_range(0X8052B080,"T",0X1,3);
	split_sreg_range(0X8052B0A6,"T",0X1,3);
	split_sreg_range(0X8052B0B2,"T",0X1,3);
	split_sreg_range(0X8052B0C0,"T",0X1,3);
	split_sreg_range(0X8052B15E,"T",0X1,3);
	split_sreg_range(0X8052B162,"T",0X1,3);
	split_sreg_range(0X8052B170,"T",0X1,3);
	split_sreg_range(0X8052B188,"T",0X1,3);
	split_sreg_range(0X8052B1C2,"T",0X1,3);
	split_sreg_range(0X8052B27E,"T",0X1,3);
	split_sreg_range(0X8052B29C,"T",0X1,3);
	split_sreg_range(0X8052B32C,"T",0X1,3);
	split_sreg_range(0X8052B35E,"T",0X1,3);
	split_sreg_range(0X8052B36A,"T",0X1,3);
	split_sreg_range(0X8052B3A4,"T",0X1,3);
	split_sreg_range(0X8052B3C8,"T",0X1,3);
	split_sreg_range(0X8052B3E8,"T",0X1,3);
	split_sreg_range(0X8052B400,"T",0X1,3);
	split_sreg_range(0X8052B476,"T",0X1,3);
	split_sreg_range(0X8052B48E,"T",0X1,3);
	split_sreg_range(0X8052B502,"T",0X1,3);
	split_sreg_range(0X8052B508,"T",0X1,3);
	split_sreg_range(0X8052B50C,"T",0X1,3);
	split_sreg_range(0X8052B542,"T",0X1,3);
	split_sreg_range(0X8052B594,"T",0X1,3);
	split_sreg_range(0X8052B5A2,"T",0X1,3);
	split_sreg_range(0X8052B638,"T",0X1,3);
	split_sreg_range(0X8052B63A,"T",0X1,3);
	split_sreg_range(0X8052B63C,"T",0X1,3);
	split_sreg_range(0X8052B676,"T",0X1,3);
	split_sreg_range(0X8052B678,"T",0X1,3);
	split_sreg_range(0X8052B67C,"T",0X1,3);
	split_sreg_range(0X8052B6B2,"T",0X1,3);
	split_sreg_range(0X8052B700,"T",0X1,3);
	split_sreg_range(0X8052B70C,"T",0X1,3);
	split_sreg_range(0X8052B7AA,"T",0X1,3);
	split_sreg_range(0X8052B7AC,"T",0X1,3);
	split_sreg_range(0X8052B7AE,"T",0X1,3);
	split_sreg_range(0X8052B7E6,"T",0X1,3);
	split_sreg_range(0X8052B7FA,"T",0X1,3);
	split_sreg_range(0X8052B82E,"T",0X1,3);
	split_sreg_range(0X8052B83C,"T",0X1,3);
	split_sreg_range(0X8052B878,"T",0X1,3);
	split_sreg_range(0X8052B880,"T",0X1,3);
	split_sreg_range(0X8052B922,"T",0X1,3);
	split_sreg_range(0X8052B93C,"T",0X1,3);
	split_sreg_range(0X8052B964,"T",0X1,3);
	split_sreg_range(0X8052B976,"T",0X1,3);
	split_sreg_range(0X8052B98A,"T",0X1,3);
	split_sreg_range(0X8052B9A8,"T",0X1,3);
	split_sreg_range(0X8052B9BE,"T",0X1,3);
	split_sreg_range(0X8052B9CE,"T",0X1,3);
	split_sreg_range(0X8052BA04,"T",0X1,3);
	split_sreg_range(0X8052BA20,"T",0X1,3);
	split_sreg_range(0X8052BA36,"T",0X1,3);
	split_sreg_range(0X8052BA40,"T",0X1,3);
	split_sreg_range(0X8052BA48,"T",0X1,3);
	split_sreg_range(0X8052BA6E,"T",0X1,3);
	split_sreg_range(0X8052BA7E,"T",0X1,3);
	split_sreg_range(0X8052BA9A,"T",0X1,3);
	split_sreg_range(0X8052BA9E,"T",0X1,3);
	split_sreg_range(0X8052BAAA,"T",0X1,3);
	split_sreg_range(0X8052BACE,"T",0X1,3);
	split_sreg_range(0X8052BAD4,"T",0X1,3);
	split_sreg_range(0X8052BAE0,"T",0X1,3);
	split_sreg_range(0X8052BAE2,"T",0X1,3);
	split_sreg_range(0X8052BB32,"T",0X1,3);
	split_sreg_range(0X8052BB4C,"T",0X1,3);
	split_sreg_range(0X8052BB84,"T",0X1,3);
	split_sreg_range(0X8052BB88,"T",0X1,3);
	split_sreg_range(0X8052BB9C,"T",0X1,3);
	split_sreg_range(0X8052BBB0,"T",0X1,3);
	split_sreg_range(0X8052BBCE,"T",0X1,3);
	split_sreg_range(0X8052BBDC,"T",0X1,3);
	split_sreg_range(0X8052BBE4,"T",0X1,3);
	split_sreg_range(0X8052BBF8,"T",0X1,3);
	split_sreg_range(0X8052BC4C,"T",0X1,3);
	split_sreg_range(0X8052BC56,"T",0X1,3);
	split_sreg_range(0X8052BC7C,"T",0X1,3);
	split_sreg_range(0X8052BC88,"T",0X1,3);
	split_sreg_range(0X8052BCAC,"T",0X1,3);
	split_sreg_range(0X8052BCB2,"T",0X1,3);
	split_sreg_range(0X8052BCBE,"T",0X1,3);
	split_sreg_range(0X8052BCCA,"T",0X1,3);
	split_sreg_range(0X8052BCD6,"T",0X1,3);
	split_sreg_range(0X8052BCFA,"T",0X1,3);
	split_sreg_range(0X8052BD00,"T",0X1,3);
	split_sreg_range(0X8052BD0C,"T",0X1,3);
	split_sreg_range(0X8052BD10,"T",0X1,3);
	split_sreg_range(0X8052BDBA,"T",0X1,3);
	split_sreg_range(0X8052BE3E,"T",0X1,3);
	split_sreg_range(0X8052BE60,"T",0X1,3);
	split_sreg_range(0X8052BE6A,"T",0X1,3);
	split_sreg_range(0X8052BEB0,"T",0X1,3);
	split_sreg_range(0X8052BEFA,"T",0X1,3);
	split_sreg_range(0X8052BF02,"T",0X1,3);
	split_sreg_range(0X8052BF26,"T",0X1,3);
	split_sreg_range(0X8052BF2E,"T",0X1,3);
	split_sreg_range(0X8052BF4C,"T",0X1,3);
	split_sreg_range(0X8052BF4E,"T",0X1,3);
	split_sreg_range(0X8052BF76,"T",0X1,3);
	split_sreg_range(0X8052BF96,"T",0X1,3);
	split_sreg_range(0X8052BFA4,"T",0X1,3);
	split_sreg_range(0X8052BFAA,"T",0X1,3);
	split_sreg_range(0X8052BFAE,"T",0X1,3);
	split_sreg_range(0X8052BFF0,"T",0X1,3);
	split_sreg_range(0X8052C00E,"T",0X1,3);
	split_sreg_range(0X8052C046,"T",0X1,3);
	split_sreg_range(0X8052C04E,"T",0X1,3);
	split_sreg_range(0X8052C050,"T",0X1,3);
	split_sreg_range(0X8052C052,"T",0X1,3);
	split_sreg_range(0X8052C06E,"T",0X1,3);
	split_sreg_range(0X8052C098,"T",0X1,3);
	split_sreg_range(0X8052C0B2,"T",0X1,3);
	split_sreg_range(0X8052C0D2,"T",0X1,3);
	split_sreg_range(0X8052C0EC,"T",0X1,3);
	split_sreg_range(0X8052C11A,"T",0X1,3);
	split_sreg_range(0X8052C11E,"T",0X1,3);
	split_sreg_range(0X8052C12A,"T",0X1,3);
	split_sreg_range(0X8052C17A,"T",0X1,3);
	split_sreg_range(0X8052C18A,"T",0X1,3);
	split_sreg_range(0X8052C1A4,"T",0X1,3);
	split_sreg_range(0X8052C1B2,"T",0X1,3);
	split_sreg_range(0X8052C1B8,"T",0X1,3);
	split_sreg_range(0X8052C1C4,"T",0X1,3);
	split_sreg_range(0X8052C212,"T",0X1,3);
	split_sreg_range(0X8052C220,"T",0X1,3);
	split_sreg_range(0X8052C234,"T",0X1,3);
	split_sreg_range(0X8052C242,"T",0X1,3);
	split_sreg_range(0X8052C24A,"T",0X1,3);
	split_sreg_range(0X8052C250,"T",0X1,3);
	split_sreg_range(0X8052C25E,"T",0X1,3);
	split_sreg_range(0X8052C28E,"T",0X1,3);
	split_sreg_range(0X8052C2A2,"T",0X1,3);
	split_sreg_range(0X8052C2CE,"T",0X1,3);
	split_sreg_range(0X8052C2DC,"T",0X1,3);
	split_sreg_range(0X8052C328,"T",0X1,3);
	split_sreg_range(0X8052C330,"T",0X1,3);
	split_sreg_range(0X8052C33E,"T",0X1,3);
	split_sreg_range(0X8052C36C,"T",0X1,3);
	split_sreg_range(0X8052C370,"T",0X1,3);
	split_sreg_range(0X8052C384,"T",0X1,3);
	split_sreg_range(0X8052C3AC,"T",0X1,3);
	split_sreg_range(0X8052C3F2,"T",0X1,3);
	split_sreg_range(0X8052C418,"T",0X1,3);
	split_sreg_range(0X8052C41A,"T",0X1,3);
	split_sreg_range(0X8052C460,"T",0X1,3);
	split_sreg_range(0X8052C462,"T",0X1,3);
	split_sreg_range(0X8052C49E,"T",0X1,3);
	split_sreg_range(0X8052C4C2,"T",0X1,3);
	split_sreg_range(0X8052C4D2,"T",0X1,3);
	split_sreg_range(0X8052C4F2,"T",0X1,3);
	split_sreg_range(0X8052C508,"T",0X1,3);
	split_sreg_range(0X8052C516,"T",0X1,3);
	split_sreg_range(0X8052C550,"T",0X1,3);
	split_sreg_range(0X8052C55C,"T",0X1,3);
	split_sreg_range(0X8052C58C,"T",0X1,3);
	split_sreg_range(0X8052C590,"T",0X1,3);
	split_sreg_range(0X8052C5C0,"T",0X1,3);
	split_sreg_range(0X8052C5CC,"T",0X1,3);
	split_sreg_range(0X8052C5F8,"T",0X1,3);
	split_sreg_range(0X8052C5FA,"T",0X1,3);
	split_sreg_range(0X8052C634,"T",0X1,3);
	split_sreg_range(0X8052C658,"T",0X1,3);
	split_sreg_range(0X8052C670,"T",0X1,3);
	split_sreg_range(0X8052C694,"T",0X1,3);
	split_sreg_range(0X8052C6BE,"T",0X1,3);
	split_sreg_range(0X8052C74A,"T",0X1,3);
	split_sreg_range(0X8052C74E,"T",0X1,3);
	split_sreg_range(0X8052C76E,"T",0X1,3);
	split_sreg_range(0X8052C79C,"T",0X1,3);
	split_sreg_range(0X8052C7A8,"T",0X1,3);
	split_sreg_range(0X8052C7C2,"T",0X1,3);
	split_sreg_range(0X8052C7CA,"T",0X1,3);
	split_sreg_range(0X8052C7D6,"T",0X1,3);
	split_sreg_range(0X8052C7FA,"T",0X1,3);
	split_sreg_range(0X8052C806,"T",0X1,3);
	split_sreg_range(0X8052C808,"T",0X1,3);
	split_sreg_range(0X8052C80A,"T",0X1,3);
	split_sreg_range(0X8052C812,"T",0X1,3);
	split_sreg_range(0X8052C834,"T",0X1,3);
	split_sreg_range(0X8052C83A,"T",0X1,3);
	split_sreg_range(0X8052C84A,"T",0X1,3);
	split_sreg_range(0X8052C860,"T",0X1,3);
	split_sreg_range(0X8052C86A,"T",0X1,3);
	split_sreg_range(0X8052C87A,"T",0X1,3);
	split_sreg_range(0X8052C882,"T",0X1,3);
	split_sreg_range(0X8052C89E,"T",0X1,3);
	split_sreg_range(0X8052C8A6,"T",0X1,3);
	split_sreg_range(0X8052C8C0,"T",0X1,3);
	split_sreg_range(0X8052C90E,"T",0X1,3);
	split_sreg_range(0X8052C91E,"T",0X1,3);
	split_sreg_range(0X8052C9A2,"T",0X1,3);
	split_sreg_range(0X8052C9B2,"T",0X1,3);
	split_sreg_range(0X8052CA1C,"T",0X1,3);
	split_sreg_range(0X8052CA3E,"T",0X1,3);
	split_sreg_range(0X8052CA50,"T",0X1,3);
	split_sreg_range(0X8052CA82,"T",0X1,3);
	split_sreg_range(0X8052CAC0,"T",0X1,3);
	split_sreg_range(0X8052CACC,"T",0X1,3);
	split_sreg_range(0X8052CAE8,"T",0X1,3);
	split_sreg_range(0X8052CB36,"T",0X1,3);
	split_sreg_range(0X8052CB42,"T",0X1,3);
	split_sreg_range(0X8052CB54,"T",0X1,3);
	split_sreg_range(0X8052CB7A,"T",0X1,3);
	split_sreg_range(0X8052CBA0,"T",0X1,3);
	split_sreg_range(0X8052CBAE,"T",0X1,3);
	split_sreg_range(0X8052CBDC,"T",0X1,3);
	split_sreg_range(0X8052CC0C,"T",0X1,3);
	split_sreg_range(0X8052CC6A,"T",0X1,3);
	split_sreg_range(0X8052CC8A,"T",0X1,3);
	split_sreg_range(0X8052CC94,"T",0X1,3);
	split_sreg_range(0X8052CCA4,"T",0X1,3);
	split_sreg_range(0X8052CCA8,"T",0X1,3);
	split_sreg_range(0X8052CCCC,"T",0X1,3);
	split_sreg_range(0X8052CCE0,"T",0X1,3);
	split_sreg_range(0X8052CD42,"T",0X1,3);
	split_sreg_range(0X8052CD5E,"T",0X1,3);
	split_sreg_range(0X8052CD6E,"T",0X1,3);
	split_sreg_range(0X8052CD80,"T",0X1,3);
	split_sreg_range(0X8052CDC0,"T",0X1,3);
	split_sreg_range(0X8052CDD6,"T",0X1,3);
	split_sreg_range(0X8052CDF2,"T",0X1,3);
	split_sreg_range(0X8052CDFA,"T",0X1,3);
	split_sreg_range(0X8052CE30,"T",0X1,3);
	split_sreg_range(0X8052CE70,"T",0X1,3);
	split_sreg_range(0X8052CEBA,"T",0X1,3);
	split_sreg_range(0X8052CED6,"T",0X1,3);
	split_sreg_range(0X8052CF0C,"T",0X1,3);
	split_sreg_range(0X8052CF82,"T",0X1,3);
	split_sreg_range(0X8052CFA4,"T",0X1,3);
	split_sreg_range(0X8052CFC4,"T",0X1,3);
	split_sreg_range(0X8052CFCC,"T",0X1,3);
	split_sreg_range(0X8052D03C,"T",0X1,3);
	split_sreg_range(0X8052D046,"T",0X1,3);
	split_sreg_range(0X8052D05E,"T",0X1,3);
	split_sreg_range(0X8052D086,"T",0X1,3);
	split_sreg_range(0X8052D09E,"T",0X1,3);
	split_sreg_range(0X8052D0A6,"T",0X1,3);
	split_sreg_range(0X8052D0B2,"T",0X1,3);
	split_sreg_range(0X8052D0C4,"T",0X1,3);
	split_sreg_range(0X8052D0DA,"T",0X1,3);
	split_sreg_range(0X8052D0E4,"T",0X1,3);
	split_sreg_range(0X8052D0FA,"T",0X1,3);
	split_sreg_range(0X8052D118,"T",0X1,3);
	split_sreg_range(0X8052D138,"T",0X1,3);
	split_sreg_range(0X8052D156,"T",0X1,3);
	split_sreg_range(0X8052D174,"T",0X1,3);
	split_sreg_range(0X8052D192,"T",0X1,3);
	split_sreg_range(0X8052D1B0,"T",0X1,3);
	split_sreg_range(0X8052D1CE,"T",0X1,3);
	split_sreg_range(0X8052D1EC,"T",0X1,3);
	split_sreg_range(0X8052D20A,"T",0X1,3);
	split_sreg_range(0X8052D228,"T",0X1,3);
	split_sreg_range(0X8052D246,"T",0X1,3);
	split_sreg_range(0X8052D264,"T",0X1,3);
	split_sreg_range(0X8052D282,"T",0X1,3);
	split_sreg_range(0X8052D2A0,"T",0X1,3);
	split_sreg_range(0X8052D2BE,"T",0X1,3);
	split_sreg_range(0X8052D2EC,"T",0X1,3);
	split_sreg_range(0X8052D308,"T",0X1,3);
	split_sreg_range(0X8052D344,"T",0X1,3);
	split_sreg_range(0X8052D36A,"T",0X1,3);
	split_sreg_range(0X8052D376,"T",0X1,3);
	split_sreg_range(0X8052D3F8,"T",0X1,3);
	split_sreg_range(0X8052D402,"T",0X1,3);
	split_sreg_range(0X8052D40E,"T",0X1,3);
	split_sreg_range(0X8052D412,"T",0X1,3);
	split_sreg_range(0X8052D446,"T",0X1,3);
	split_sreg_range(0X8052D44E,"T",0X1,3);
	split_sreg_range(0X8052D580,"T",0X1,3);
	split_sreg_range(0X8052D5A6,"T",0X1,3);
	split_sreg_range(0X8052D5BC,"T",0X1,3);
	split_sreg_range(0X8052D600,"T",0X1,3);
	split_sreg_range(0X8052D618,"T",0X1,3);
	split_sreg_range(0X8052D63C,"T",0X1,3);
	split_sreg_range(0X8052D710,"T",0X1,3);
	split_sreg_range(0X8052D748,"T",0X1,3);
	split_sreg_range(0X8052D74E,"T",0X1,3);
	split_sreg_range(0X8052D75C,"T",0X1,3);
	split_sreg_range(0X8052D776,"T",0X1,3);
	split_sreg_range(0X8052D784,"T",0X1,3);
	split_sreg_range(0X8052D794,"T",0X1,3);
	split_sreg_range(0X8052D7C8,"T",0X1,3);
	split_sreg_range(0X8052D7D2,"T",0X1,3);
	split_sreg_range(0X8052D7DC,"T",0X1,3);
	split_sreg_range(0X8052D7E0,"T",0X1,3);
	split_sreg_range(0X8052D818,"T",0X1,3);
	split_sreg_range(0X8052D860,"T",0X1,3);
	split_sreg_range(0X8052D882,"T",0X1,3);
	split_sreg_range(0X8052D88C,"T",0X1,3);
	split_sreg_range(0X8052D894,"T",0X1,3);
	split_sreg_range(0X8052D89E,"T",0X1,3);
	split_sreg_range(0X8052D8A8,"T",0X1,3);
	split_sreg_range(0X8052D8C4,"T",0X1,3);
	split_sreg_range(0X8052D8DC,"T",0X1,3);
	split_sreg_range(0X8052D8F2,"T",0X1,3);
	split_sreg_range(0X8052D90A,"T",0X1,3);
	split_sreg_range(0X8052D920,"T",0X1,3);
	split_sreg_range(0X8052D926,"T",0X1,3);
	split_sreg_range(0X8052D950,"T",0X1,3);
	split_sreg_range(0X8052D976,"T",0X1,3);
	split_sreg_range(0X8052D9D6,"T",0X1,3);
	split_sreg_range(0X8052D9FC,"T",0X1,3);
	split_sreg_range(0X8052DA22,"T",0X1,3);
	split_sreg_range(0X8052DA46,"T",0X1,3);
	split_sreg_range(0X8052DA64,"T",0X1,3);
	split_sreg_range(0X8052DAC6,"T",0X1,3);
	split_sreg_range(0X8052DAEA,"T",0X1,3);
	split_sreg_range(0X8052DBC4,"T",0X1,3);
	split_sreg_range(0X8052DBE4,"T",0X1,3);
	split_sreg_range(0X8052DC04,"T",0X1,3);
	split_sreg_range(0X8052DC68,"T",0X1,3);
	split_sreg_range(0X8052DCB0,"T",0X1,3);
	split_sreg_range(0X8052DEB4,"T",0X1,3);
	split_sreg_range(0X8052DEC6,"T",0X1,3);
	split_sreg_range(0X8052E0B0,"T",0X1,3);
	split_sreg_range(0X8052E0BA,"T",0X1,3);
	split_sreg_range(0X8052E224,"T",0X1,3);
	split_sreg_range(0X8052E24C,"T",0X1,3);
	split_sreg_range(0X8052E270,"T",0X1,3);
	split_sreg_range(0X8052E296,"T",0X1,3);
	split_sreg_range(0X8052E3E0,"T",0X1,3);
	split_sreg_range(0X8052E62E,"T",0X1,3);
	split_sreg_range(0X8052E6D8,"T",0X1,3);
	split_sreg_range(0X8052E6E8,"T",0X1,3);
	split_sreg_range(0X8052E6F0,"T",0X1,3);
	split_sreg_range(0X8052E700,"T",0X1,3);
	split_sreg_range(0X8052E70C,"T",0X1,3);
	split_sreg_range(0X8052E714,"T",0X1,3);
	split_sreg_range(0X8052E716,"T",0X1,3);
	split_sreg_range(0X8052E724,"T",0X1,3);
	split_sreg_range(0X8052E74C,"T",0X1,3);
	split_sreg_range(0X8052E7A2,"T",0X1,3);
	split_sreg_range(0X8052E7B0,"T",0X1,3);
	split_sreg_range(0X8052E7B6,"T",0X1,3);
	split_sreg_range(0X8052E7CC,"T",0X1,3);
	split_sreg_range(0X8052E7F2,"T",0X1,3);
	split_sreg_range(0X8052E85C,"T",0X1,3);
	split_sreg_range(0X8052E86A,"T",0X1,3);
	split_sreg_range(0X8052E872,"T",0X1,3);
	split_sreg_range(0X8052E878,"T",0X1,3);
	split_sreg_range(0X8052E886,"T",0X1,3);
	split_sreg_range(0X8052E8AC,"T",0X1,3);
	split_sreg_range(0X8052E8FA,"T",0X1,3);
	split_sreg_range(0X8052E908,"T",0X1,3);
	split_sreg_range(0X8052E916,"T",0X1,3);
	split_sreg_range(0X8052E940,"T",0X1,3);
	split_sreg_range(0X8052EA16,"T",0X1,3);
	split_sreg_range(0X8052EA1A,"T",0X1,3);
	split_sreg_range(0X8052EA4C,"T",0X1,3);
	split_sreg_range(0X8052EAD0,"T",0X1,3);
	split_sreg_range(0X8052EB4A,"T",0X1,3);
	split_sreg_range(0X8052EC32,"T",0X1,3);
	split_sreg_range(0X8052EC58,"T",0X1,3);
	split_sreg_range(0X8052ECBC,"T",0X1,3);
	split_sreg_range(0X8052ECF0,"T",0X1,3);
	split_sreg_range(0X8052ED12,"T",0X1,3);
	split_sreg_range(0X8052ED14,"T",0X1,3);
	split_sreg_range(0X8052ED20,"T",0X1,3);
	split_sreg_range(0X8052ED3C,"T",0X1,3);
	split_sreg_range(0X8052ED4E,"T",0X1,3);
	split_sreg_range(0X8052EDD8,"T",0X1,3);
	split_sreg_range(0X8052EF90,"T",0X1,3);
	split_sreg_range(0X8052F07E,"T",0X1,3);
	split_sreg_range(0X8052F400,"T",0X1,3);
	split_sreg_range(0X8052F426,"T",0X1,3);
	split_sreg_range(0X8052F442,"T",0X1,3);
	split_sreg_range(0X8052F464,"T",0X1,3);
	split_sreg_range(0X8052F478,"T",0X1,3);
	split_sreg_range(0X8052F490,"T",0X1,3);
	split_sreg_range(0X8052F4CE,"T",0X1,3);
	split_sreg_range(0X8052F4D2,"T",0X1,3);
	split_sreg_range(0X8052F4DC,"T",0X1,3);
	split_sreg_range(0X8052F4F8,"T",0X1,3);
	split_sreg_range(0X8052F506,"T",0X1,3);
	split_sreg_range(0X8052F51C,"T",0X1,3);
	split_sreg_range(0X8052F548,"T",0X1,3);
	split_sreg_range(0X8052F54E,"T",0X1,3);
	split_sreg_range(0X8052F552,"T",0X1,3);
	split_sreg_range(0X8052F576,"T",0X1,3);
	split_sreg_range(0X8052F586,"T",0X1,3);
	split_sreg_range(0X8052F5B4,"T",0X1,3);
	split_sreg_range(0X8052F5BA,"T",0X1,3);
	split_sreg_range(0X8052F5C2,"T",0X1,3);
	split_sreg_range(0X8052F5D4,"T",0X1,3);
	split_sreg_range(0X8052F5DC,"T",0X1,3);
	split_sreg_range(0X8052F5E6,"T",0X1,3);
	split_sreg_range(0X8052F5EA,"T",0X1,3);
	split_sreg_range(0X8052F5FE,"T",0X1,3);
	split_sreg_range(0X8052F60C,"T",0X1,3);
	split_sreg_range(0X8052F644,"T",0X1,3);
	split_sreg_range(0X8052F64A,"T",0X1,3);
	split_sreg_range(0X8052F65C,"T",0X1,3);
	split_sreg_range(0X8052F662,"T",0X1,3);
	split_sreg_range(0X8052F680,"T",0X1,3);
	split_sreg_range(0X8052F6A0,"T",0X1,3);
	split_sreg_range(0X8052F6AA,"T",0X1,3);
	split_sreg_range(0X8052F6B4,"T",0X1,3);
	split_sreg_range(0X8052F6C2,"T",0X1,3);
	split_sreg_range(0X8052F6D4,"T",0X1,3);
	split_sreg_range(0X8052F6E6,"T",0X1,3);
	split_sreg_range(0X8052F6F8,"T",0X1,3);
	split_sreg_range(0X8052F708,"T",0X1,3);
	split_sreg_range(0X8052F732,"T",0X1,3);
	split_sreg_range(0X8052F73A,"T",0X1,3);
	split_sreg_range(0X8052F74E,"T",0X1,3);
	split_sreg_range(0X8052F764,"T",0X1,3);
	split_sreg_range(0X8052F774,"T",0X1,3);
	split_sreg_range(0X8052F776,"T",0X1,3);
	split_sreg_range(0X8052F780,"T",0X1,3);
	split_sreg_range(0X8052F7A0,"T",0X1,3);
	split_sreg_range(0X8052F7A4,"T",0X1,3);
	split_sreg_range(0X8052F7AA,"T",0X1,3);
	split_sreg_range(0X8052F7E0,"T",0X1,3);
	split_sreg_range(0X8052F7F6,"T",0X1,3);
	split_sreg_range(0X8052F80A,"T",0X1,3);
	split_sreg_range(0X8052F816,"T",0X1,3);
	split_sreg_range(0X8052F824,"T",0X1,3);
	split_sreg_range(0X8052F82E,"T",0X1,3);
	split_sreg_range(0X8052F836,"T",0X1,3);
	split_sreg_range(0X8052F860,"T",0X1,3);
	split_sreg_range(0X8052F87E,"T",0X1,3);
	split_sreg_range(0X8052F884,"T",0X1,3);
	split_sreg_range(0X8052F88E,"T",0X1,3);
	split_sreg_range(0X8052F892,"T",0X1,3);
	split_sreg_range(0X8052F896,"T",0X1,3);
	split_sreg_range(0X8052F8B2,"T",0X1,3);
	split_sreg_range(0X8052F8BE,"T",0X1,3);
	split_sreg_range(0X8052F8C2,"T",0X1,3);
	split_sreg_range(0X8052F8C4,"T",0X1,3);
	split_sreg_range(0X8052F8E2,"T",0X1,3);
	split_sreg_range(0X8052F8EE,"T",0X1,3);
	split_sreg_range(0X8052F8F2,"T",0X1,3);
	split_sreg_range(0X8052F8F4,"T",0X1,3);
	split_sreg_range(0X8052F914,"T",0X1,3);
	split_sreg_range(0X8052F920,"T",0X1,3);
	split_sreg_range(0X8052F924,"T",0X1,3);
	split_sreg_range(0X8052F982,"T",0X1,3);
	split_sreg_range(0X8052FDB8,"T",0X1,3);
	split_sreg_range(0X8052FDF8,"T",0X1,3);
	split_sreg_range(0X8052FE38,"T",0X1,3);
	split_sreg_range(0X8052FE44,"T",0X1,3);
	split_sreg_range(0X8052FE48,"T",0X1,3);
	split_sreg_range(0X8052FE50,"T",0X1,3);
	split_sreg_range(0X8052FE6C,"T",0X1,3);
	split_sreg_range(0X8052FE76,"T",0X1,3);
	split_sreg_range(0X8052FEB8,"T",0X1,3);
	split_sreg_range(0X8052FF44,"T",0X1,3);
	split_sreg_range(0X8052FF5A,"T",0X1,3);
	split_sreg_range(0X8052FF7A,"T",0X1,3);
	split_sreg_range(0X8052FFC8,"T",0X1,3);
	split_sreg_range(0X8052FFE2,"T",0X1,3);
	split_sreg_range(0X80530004,"T",0X1,3);
	split_sreg_range(0X80530052,"T",0X1,3);
	split_sreg_range(0X80530056,"T",0X1,3);
	split_sreg_range(0X80530070,"T",0X1,3);
	split_sreg_range(0X8053008C,"T",0X1,3);
	split_sreg_range(0X805300CC,"T",0X1,3);
	split_sreg_range(0X805300D6,"T",0X1,3);
	split_sreg_range(0X805300FE,"T",0X1,3);
	split_sreg_range(0X80530130,"T",0X1,3);
	split_sreg_range(0X8053014A,"T",0X1,3);
	split_sreg_range(0X80530154,"T",0X1,3);
	split_sreg_range(0X805301C0,"T",0X1,3);
	split_sreg_range(0X80530212,"T",0X1,3);
	split_sreg_range(0X80530218,"T",0X1,3);
	split_sreg_range(0X80530226,"T",0X1,3);
	split_sreg_range(0X8053025E,"T",0X1,3);
	split_sreg_range(0X8053028E,"T",0X1,3);
	split_sreg_range(0X8053029E,"T",0X1,3);
	split_sreg_range(0X805302A8,"T",0X1,3);
	split_sreg_range(0X80530318,"T",0X1,3);
	split_sreg_range(0X8053033A,"T",0X1,3);
	split_sreg_range(0X80530352,"T",0X1,3);
	split_sreg_range(0X805303A2,"T",0X1,3);
	split_sreg_range(0X805303A8,"T",0X1,3);
	split_sreg_range(0X805303B4,"T",0X1,3);
	split_sreg_range(0X805303D8,"T",0X1,3);
	split_sreg_range(0X805303E0,"T",0X1,3);
	split_sreg_range(0X805303F2,"T",0X1,3);
	split_sreg_range(0X80530406,"T",0X1,3);
	split_sreg_range(0X805307C6,"T",0X1,3);
	split_sreg_range(0X80530944,"T",0X1,3);
	split_sreg_range(0X805309B2,"T",0X1,3);
	split_sreg_range(0X805309C6,"T",0X1,3);
	split_sreg_range(0X805309DE,"T",0X1,3);
	split_sreg_range(0X80530A14,"T",0X1,3);
	split_sreg_range(0X80530A1A,"T",0X1,3);
	split_sreg_range(0X80530A50,"T",0X1,3);
	split_sreg_range(0X80530A56,"T",0X1,3);
	split_sreg_range(0X80530A7A,"T",0X1,3);
	split_sreg_range(0X80530A86,"T",0X1,3);
	split_sreg_range(0X80530AB0,"T",0X1,3);
	split_sreg_range(0X80530B42,"T",0X1,3);
	split_sreg_range(0X80530B60,"T",0X1,3);
	split_sreg_range(0X80530BC0,"T",0X1,3);
	split_sreg_range(0X80530C6E,"T",0X1,3);
	split_sreg_range(0X80530C84,"T",0X1,3);
	split_sreg_range(0X80530C96,"T",0X1,3);
	split_sreg_range(0X80530C98,"T",0X1,3);
	split_sreg_range(0X80530CA0,"T",0X1,3);
	split_sreg_range(0X80530CB0,"T",0X1,3);
	split_sreg_range(0X80530D22,"T",0X1,3);
	split_sreg_range(0X80530D34,"T",0X1,3);
	split_sreg_range(0X80530D5A,"T",0X1,3);
	split_sreg_range(0X80530D74,"T",0X1,3);
	split_sreg_range(0X80530D80,"T",0X1,3);
	split_sreg_range(0X80530D8E,"T",0X1,3);
	split_sreg_range(0X80530DE2,"T",0X1,3);
	split_sreg_range(0X80530DE6,"T",0X1,3);
	split_sreg_range(0X80530DF4,"T",0X1,3);
	split_sreg_range(0X80530EB2,"T",0X1,3);
	split_sreg_range(0X80530EB6,"T",0X1,3);
	split_sreg_range(0X80530ED4,"T",0X1,3);
	split_sreg_range(0X80530ED8,"T",0X1,3);
	split_sreg_range(0X80530EE6,"T",0X1,3);
	split_sreg_range(0X80530F20,"T",0X1,3);
	split_sreg_range(0X80530FCC,"T",0X1,3);
	split_sreg_range(0X80531004,"T",0X1,3);
	split_sreg_range(0X80531064,"T",0X1,3);
	split_sreg_range(0X80531092,"T",0X1,3);
	split_sreg_range(0X8053110C,"T",0X1,3);
	split_sreg_range(0X80531120,"T",0X1,3);
	split_sreg_range(0X80531124,"T",0X1,3);
	split_sreg_range(0X80531146,"T",0X1,3);
	split_sreg_range(0X8053114E,"T",0X1,3);
	split_sreg_range(0X8053115A,"T",0X1,3);
	split_sreg_range(0X805311A6,"T",0X1,3);
	split_sreg_range(0X80531212,"T",0X1,3);
	split_sreg_range(0X8053121E,"T",0X1,3);
	split_sreg_range(0X8053122A,"T",0X1,3);
	split_sreg_range(0X80531252,"T",0X1,3);
	split_sreg_range(0X80531260,"T",0X1,3);
	split_sreg_range(0X8053126A,"T",0X1,3);
	split_sreg_range(0X8053127C,"T",0X1,3);
	split_sreg_range(0X805312BC,"T",0X1,3);
	split_sreg_range(0X805312CE,"T",0X1,3);
	split_sreg_range(0X805312E2,"T",0X1,3);
	split_sreg_range(0X80531342,"T",0X1,3);
	split_sreg_range(0X805313DC,"T",0X1,3);
	split_sreg_range(0X805313EA,"T",0X1,3);
	split_sreg_range(0X8053141A,"T",0X1,3);
	split_sreg_range(0X805314C2,"T",0X1,3);
	split_sreg_range(0X805314D8,"T",0X1,3);
	split_sreg_range(0X80531522,"T",0X1,3);
	split_sreg_range(0X8053152E,"T",0X1,3);
	split_sreg_range(0X80531536,"T",0X1,3);
	split_sreg_range(0X8053154A,"T",0X1,3);
	split_sreg_range(0X80531556,"T",0X1,3);
	split_sreg_range(0X80531564,"T",0X1,3);
	split_sreg_range(0X80531566,"T",0X1,3);
	split_sreg_range(0X8053156A,"T",0X1,3);
	split_sreg_range(0X805315AE,"T",0X1,3);
	split_sreg_range(0X805315BE,"T",0X1,3);
	split_sreg_range(0X805315D2,"T",0X1,3);
	split_sreg_range(0X80531604,"T",0X1,3);
	split_sreg_range(0X8053161A,"T",0X1,3);
	split_sreg_range(0X80531624,"T",0X1,3);
	split_sreg_range(0X8053165E,"T",0X1,3);
	split_sreg_range(0X80531682,"T",0X1,3);
	split_sreg_range(0X80531688,"T",0X1,3);
	split_sreg_range(0X80531698,"T",0X1,3);
	split_sreg_range(0X805316BC,"T",0X1,3);
	split_sreg_range(0X805316C8,"T",0X1,3);
	split_sreg_range(0X805316D6,"T",0X1,3);
	split_sreg_range(0X805316E8,"T",0X1,3);
	split_sreg_range(0X805316EA,"T",0X1,3);
	split_sreg_range(0X80531716,"T",0X1,3);
	split_sreg_range(0X8053173C,"T",0X1,3);
	split_sreg_range(0X8053176A,"T",0X1,3);
	split_sreg_range(0X80531774,"T",0X1,3);
	split_sreg_range(0X805317E8,"T",0X1,3);
	split_sreg_range(0X805317F4,"T",0X1,3);
	split_sreg_range(0X80531840,"T",0X1,3);
	split_sreg_range(0X80531846,"T",0X1,3);
	split_sreg_range(0X80531880,"T",0X1,3);
	split_sreg_range(0X80531892,"T",0X1,3);
	split_sreg_range(0X805318BC,"T",0X1,3);
	split_sreg_range(0X805318C8,"T",0X1,3);
	split_sreg_range(0X805318CC,"T",0X1,3);
	split_sreg_range(0X80531920,"T",0X1,3);
	split_sreg_range(0X80531924,"T",0X1,3);
	split_sreg_range(0X8053195E,"T",0X1,3);
	split_sreg_range(0X80531960,"T",0X1,3);
	split_sreg_range(0X80531A00,"T",0X1,3);
	split_sreg_range(0X80531A0E,"T",0X1,3);
	split_sreg_range(0X80531A3C,"T",0X1,3);
	split_sreg_range(0X80531A3E,"T",0X1,3);
	split_sreg_range(0X80531A4C,"T",0X1,3);
	split_sreg_range(0X80531A5C,"T",0X1,3);
	split_sreg_range(0X80531A60,"T",0X1,3);
	split_sreg_range(0X80531A74,"T",0X1,3);
	split_sreg_range(0X80531AA4,"T",0X1,3);
	split_sreg_range(0X80531AB8,"T",0X1,3);
	split_sreg_range(0X80531ADC,"T",0X1,3);
	split_sreg_range(0X80531B08,"T",0X1,3);
	split_sreg_range(0X80531B10,"T",0X1,3);
	split_sreg_range(0X80531B5C,"T",0X1,3);
	split_sreg_range(0X80531B7A,"T",0X1,3);
	split_sreg_range(0X80531BA8,"T",0X1,3);
	split_sreg_range(0X80531BAC,"T",0X1,3);
	split_sreg_range(0X80531BE6,"T",0X1,3);
	split_sreg_range(0X80531C10,"T",0X1,3);
	split_sreg_range(0X80531C1C,"T",0X1,3);
	split_sreg_range(0X80531C3A,"T",0X1,3);
	split_sreg_range(0X80531CB8,"T",0X1,3);
	split_sreg_range(0X80531CC4,"T",0X1,3);
	split_sreg_range(0X80531CF2,"T",0X1,3);
	split_sreg_range(0X80531CF4,"T",0X1,3);
	split_sreg_range(0X80531D02,"T",0X1,3);
	split_sreg_range(0X80531D12,"T",0X1,3);
	split_sreg_range(0X80531D16,"T",0X1,3);
	split_sreg_range(0X80531D2A,"T",0X1,3);
	split_sreg_range(0X80531D34,"T",0X1,3);
	split_sreg_range(0X80531D52,"T",0X1,3);
	split_sreg_range(0X80531D74,"T",0X1,3);
	split_sreg_range(0X80531D7E,"T",0X1,3);
	split_sreg_range(0X80531E0E,"T",0X1,3);
	split_sreg_range(0X80531E1A,"T",0X1,3);
	split_sreg_range(0X80531E5E,"T",0X1,3);
	split_sreg_range(0X80531E60,"T",0X1,3);
	split_sreg_range(0X80531E70,"T",0X1,3);
	split_sreg_range(0X80531E80,"T",0X1,3);
	split_sreg_range(0X80531E84,"T",0X1,3);
	split_sreg_range(0X80531E98,"T",0X1,3);
	split_sreg_range(0X80531EA2,"T",0X1,3);
	split_sreg_range(0X80531EC4,"T",0X1,3);
	split_sreg_range(0X80531ED0,"T",0X1,3);
	split_sreg_range(0X80531EE0,"T",0X1,3);
	split_sreg_range(0X80531F22,"T",0X1,3);
	split_sreg_range(0X80531F2C,"T",0X1,3);
	split_sreg_range(0X80531F72,"T",0X1,3);
	split_sreg_range(0X80531F88,"T",0X1,3);
	split_sreg_range(0X80531F96,"T",0X1,3);
	split_sreg_range(0X80531FCA,"T",0X1,3);
	split_sreg_range(0X80531FD4,"T",0X1,3);
	split_sreg_range(0X8053202A,"T",0X1,3);
	split_sreg_range(0X80532032,"T",0X1,3);
	split_sreg_range(0X80532034,"T",0X1,3);
	split_sreg_range(0X8053206C,"T",0X1,3);
	split_sreg_range(0X80532098,"T",0X1,3);
	split_sreg_range(0X8053209A,"T",0X1,3);
	split_sreg_range(0X805320A4,"T",0X1,3);
	split_sreg_range(0X805320B8,"T",0X1,3);
	split_sreg_range(0X805320CE,"T",0X1,3);
	split_sreg_range(0X80532110,"T",0X1,3);
	split_sreg_range(0X80532122,"T",0X1,3);
	split_sreg_range(0X80532156,"T",0X1,3);
	split_sreg_range(0X80532158,"T",0X1,3);
	split_sreg_range(0X8053215C,"T",0X1,3);
	split_sreg_range(0X8053216E,"T",0X1,3);
	split_sreg_range(0X80532174,"T",0X1,3);
	split_sreg_range(0X8053218C,"T",0X1,3);
	split_sreg_range(0X805321CA,"T",0X1,3);
	split_sreg_range(0X805321DA,"T",0X1,3);
	split_sreg_range(0X80532216,"T",0X1,3);
	split_sreg_range(0X8053221A,"T",0X1,3);
	split_sreg_range(0X80532220,"T",0X1,3);
	split_sreg_range(0X8053223A,"T",0X1,3);
	split_sreg_range(0X8053223E,"T",0X1,3);
	split_sreg_range(0X80532250,"T",0X1,3);
	split_sreg_range(0X8053228C,"T",0X1,3);
	split_sreg_range(0X8053229A,"T",0X1,3);
	split_sreg_range(0X805322D6,"T",0X1,3);
	split_sreg_range(0X805322D8,"T",0X1,3);
	split_sreg_range(0X805322DC,"T",0X1,3);
	split_sreg_range(0X805322EE,"T",0X1,3);
	split_sreg_range(0X805322F4,"T",0X1,3);
	split_sreg_range(0X8053230C,"T",0X1,3);
	split_sreg_range(0X805323F8,"T",0X1,3);
	split_sreg_range(0X80532442,"T",0X1,3);
	split_sreg_range(0X805324DA,"T",0X1,3);
	split_sreg_range(0X805324DE,"T",0X1,3);
	split_sreg_range(0X805324E2,"T",0X1,3);
	split_sreg_range(0X805324FA,"T",0X1,3);
	split_sreg_range(0X8053251A,"T",0X1,3);
	split_sreg_range(0X8053251E,"T",0X1,3);
	split_sreg_range(0X80532524,"T",0X1,3);
	split_sreg_range(0X80532532,"T",0X1,3);
	split_sreg_range(0X8053253C,"T",0X1,3);
	split_sreg_range(0X8053257E,"T",0X1,3);
	split_sreg_range(0X805325A0,"T",0X1,3);
	split_sreg_range(0X805325A6,"T",0X1,3);
	split_sreg_range(0X805325AC,"T",0X1,3);
	split_sreg_range(0X805325C2,"T",0X1,3);
	split_sreg_range(0X805325DE,"T",0X1,3);
	split_sreg_range(0X805325F6,"T",0X1,3);
	split_sreg_range(0X80532602,"T",0X1,3);
	split_sreg_range(0X80532618,"T",0X1,3);
	split_sreg_range(0X80532654,"T",0X1,3);
	split_sreg_range(0X80532664,"T",0X1,3);
	split_sreg_range(0X8053272C,"T",0X1,3);
	split_sreg_range(0X805327C0,"T",0X1,3);
	split_sreg_range(0X805327D8,"T",0X1,3);
	split_sreg_range(0X805327FA,"T",0X1,3);
	split_sreg_range(0X8053280A,"T",0X1,3);
	split_sreg_range(0X80532810,"T",0X1,3);
	split_sreg_range(0X80532828,"T",0X1,3);
	split_sreg_range(0X805328B2,"T",0X1,3);
	split_sreg_range(0X805328C6,"T",0X1,3);
	split_sreg_range(0X805328FE,"T",0X1,3);
	split_sreg_range(0X80532932,"T",0X1,3);
	split_sreg_range(0X8053294C,"T",0X1,3);
	split_sreg_range(0X8053296C,"T",0X1,3);
	split_sreg_range(0X8053299A,"T",0X1,3);
	split_sreg_range(0X8053299E,"T",0X1,3);
	split_sreg_range(0X805329DE,"T",0X1,3);
	split_sreg_range(0X80532A52,"T",0X1,3);
	split_sreg_range(0X80532A5C,"T",0X1,3);
	split_sreg_range(0X80532A9C,"T",0X1,3);
	split_sreg_range(0X80532ABA,"T",0X1,3);
	split_sreg_range(0X80532ACC,"T",0X1,3);
	split_sreg_range(0X80532AEE,"T",0X1,3);
	split_sreg_range(0X80532AF6,"T",0X1,3);
	split_sreg_range(0X80532B0A,"T",0X1,3);
	split_sreg_range(0X80532B12,"T",0X1,3);
	split_sreg_range(0X80532B20,"T",0X1,3);
	split_sreg_range(0X80532BBE,"T",0X1,3);
	split_sreg_range(0X80532BC4,"T",0X1,3);
	split_sreg_range(0X80532BDA,"T",0X1,3);
	split_sreg_range(0X80532C16,"T",0X1,3);
	split_sreg_range(0X80532C24,"T",0X1,3);
	split_sreg_range(0X80532C40,"T",0X1,3);
	split_sreg_range(0X80532C42,"T",0X1,3);
	split_sreg_range(0X80532C4E,"T",0X1,3);
	split_sreg_range(0X80532C6A,"T",0X1,3);
	split_sreg_range(0X80532C70,"T",0X1,3);
	split_sreg_range(0X80532CA2,"T",0X1,3);
	split_sreg_range(0X80532CB8,"T",0X1,3);
	split_sreg_range(0X80532CBC,"T",0X1,3);
	split_sreg_range(0X80532CEE,"T",0X1,3);
	split_sreg_range(0X80532D26,"T",0X1,3);
	split_sreg_range(0X80532D36,"T",0X1,3);
	split_sreg_range(0X80532D5E,"T",0X1,3);
	split_sreg_range(0X80532D84,"T",0X1,3);
	split_sreg_range(0X80532EA0,"T",0X1,3);
	split_sreg_range(0X80532EB4,"T",0X1,3);
	split_sreg_range(0X80532F4C,"T",0X1,3);
	split_sreg_range(0X80532F52,"T",0X1,3);
	split_sreg_range(0X80532F6C,"T",0X1,3);
	split_sreg_range(0X80532F7A,"T",0X1,3);
	split_sreg_range(0X80532FC4,"T",0X1,3);
	split_sreg_range(0X80532FD8,"T",0X1,3);
	split_sreg_range(0X80533006,"T",0X1,3);
	split_sreg_range(0X80533012,"T",0X1,3);
	split_sreg_range(0X8053303A,"T",0X1,3);
	split_sreg_range(0X80533054,"T",0X1,3);
	split_sreg_range(0X8053305E,"T",0X1,3);
	split_sreg_range(0X80533070,"T",0X1,3);
	split_sreg_range(0X805330B4,"T",0X1,3);
	split_sreg_range(0X805330C4,"T",0X1,3);
	split_sreg_range(0X805330E0,"T",0X1,3);
	split_sreg_range(0X805330E6,"T",0X1,3);
	split_sreg_range(0X805330EA,"T",0X1,3);
	split_sreg_range(0X805330FE,"T",0X1,3);
	split_sreg_range(0X8053311E,"T",0X1,3);
	split_sreg_range(0X80533140,"T",0X1,3);
	split_sreg_range(0X80533174,"T",0X1,3);
	split_sreg_range(0X80533182,"T",0X1,3);
	split_sreg_range(0X805331CA,"T",0X1,3);
	split_sreg_range(0X8053320C,"T",0X1,3);
	split_sreg_range(0X80533266,"T",0X1,3);
	split_sreg_range(0X805332BE,"T",0X1,3);
	split_sreg_range(0X805332D4,"T",0X1,3);
	split_sreg_range(0X805332DE,"T",0X1,3);
	split_sreg_range(0X80533306,"T",0X1,3);
	split_sreg_range(0X8053332C,"T",0X1,3);
	split_sreg_range(0X80533340,"T",0X1,3);
	split_sreg_range(0X8053334E,"T",0X1,3);
	split_sreg_range(0X80533362,"T",0X1,3);
	split_sreg_range(0X805333E0,"T",0X1,3);
	split_sreg_range(0X80533406,"T",0X1,3);
	split_sreg_range(0X80533426,"T",0X1,3);
	split_sreg_range(0X8053345E,"T",0X1,3);
	split_sreg_range(0X8053346E,"T",0X1,3);
	split_sreg_range(0X80533486,"T",0X1,3);
	split_sreg_range(0X8053348E,"T",0X1,3);
	split_sreg_range(0X805334A8,"T",0X1,3);
	split_sreg_range(0X805334D0,"T",0X1,3);
	split_sreg_range(0X805334D4,"T",0X1,3);
	split_sreg_range(0X805334DA,"T",0X1,3);
	split_sreg_range(0X805334E4,"T",0X1,3);
	split_sreg_range(0X805334F0,"T",0X1,3);
	split_sreg_range(0X805334FE,"T",0X1,3);
	split_sreg_range(0X80533510,"T",0X1,3);
	split_sreg_range(0X8053351A,"T",0X1,3);
	split_sreg_range(0X80533520,"T",0X1,3);
	split_sreg_range(0X80533552,"T",0X1,3);
	split_sreg_range(0X80533560,"T",0X1,3);
	split_sreg_range(0X80533578,"T",0X1,3);
	split_sreg_range(0X80533580,"T",0X1,3);
	split_sreg_range(0X8053359A,"T",0X1,3);
	split_sreg_range(0X805335C2,"T",0X1,3);
	split_sreg_range(0X805335C6,"T",0X1,3);
	split_sreg_range(0X805335CC,"T",0X1,3);
	split_sreg_range(0X805335D6,"T",0X1,3);
	split_sreg_range(0X805335E2,"T",0X1,3);
	split_sreg_range(0X805335F0,"T",0X1,3);
	split_sreg_range(0X80533602,"T",0X1,3);
	split_sreg_range(0X8053360C,"T",0X1,3);
	split_sreg_range(0X80533612,"T",0X1,3);
	split_sreg_range(0X80533650,"T",0X1,3);
	split_sreg_range(0X80533658,"T",0X1,3);
	split_sreg_range(0X80533672,"T",0X1,3);
	split_sreg_range(0X8053369A,"T",0X1,3);
	split_sreg_range(0X8053369E,"T",0X1,3);
	split_sreg_range(0X805336A4,"T",0X1,3);
	split_sreg_range(0X805336AE,"T",0X1,3);
	split_sreg_range(0X805336BA,"T",0X1,3);
	split_sreg_range(0X805336C8,"T",0X1,3);
	split_sreg_range(0X805336DA,"T",0X1,3);
	split_sreg_range(0X805336E4,"T",0X1,3);
	split_sreg_range(0X805336EA,"T",0X1,3);
	split_sreg_range(0X80533724,"T",0X1,3);
	split_sreg_range(0X80533732,"T",0X1,3);
	split_sreg_range(0X8053374A,"T",0X1,3);
	split_sreg_range(0X80533752,"T",0X1,3);
	split_sreg_range(0X8053376C,"T",0X1,3);
	split_sreg_range(0X80533794,"T",0X1,3);
	split_sreg_range(0X80533798,"T",0X1,3);
	split_sreg_range(0X8053379E,"T",0X1,3);
	split_sreg_range(0X805337A8,"T",0X1,3);
	split_sreg_range(0X805337B4,"T",0X1,3);
	split_sreg_range(0X805337C2,"T",0X1,3);
	split_sreg_range(0X805337D4,"T",0X1,3);
	split_sreg_range(0X805337DE,"T",0X1,3);
	split_sreg_range(0X805337E4,"T",0X1,3);
	split_sreg_range(0X80533828,"T",0X1,3);
	split_sreg_range(0X80533834,"T",0X1,3);
	split_sreg_range(0X80533848,"T",0X1,3);
	split_sreg_range(0X8053385A,"T",0X1,3);
	split_sreg_range(0X8053386C,"T",0X1,3);
	split_sreg_range(0X8053386E,"T",0X1,3);
	split_sreg_range(0X80533884,"T",0X1,3);
	split_sreg_range(0X80533898,"T",0X1,3);
	split_sreg_range(0X805338A6,"T",0X1,3);
	split_sreg_range(0X805338BE,"T",0X1,3);
	split_sreg_range(0X805338D0,"T",0X1,3);
	split_sreg_range(0X805338D2,"T",0X1,3);
	split_sreg_range(0X80533B5C,"T",0X1,3);
	split_sreg_range(0X80533B74,"T",0X1,3);
	split_sreg_range(0X80533BB0,"T",0X1,3);
	split_sreg_range(0X80533BBC,"T",0X1,3);
	split_sreg_range(0X80533BD0,"T",0X1,3);
	split_sreg_range(0X80533BD6,"T",0X1,3);
	split_sreg_range(0X80533C00,"T",0X1,3);
	split_sreg_range(0X80533D62,"T",0X1,3);
	split_sreg_range(0X80533D6C,"T",0X1,3);
	split_sreg_range(0X80533F18,"T",0X1,3);
	split_sreg_range(0X80533FEC,"T",0X1,3);
	split_sreg_range(0X80534002,"T",0X1,3);
	split_sreg_range(0X80534018,"T",0X1,3);
	split_sreg_range(0X8053445E,"T",0X1,3);
	split_sreg_range(0X805344B2,"T",0X1,3);
	split_sreg_range(0X805344C8,"T",0X1,3);
	split_sreg_range(0X805344DC,"T",0X1,3);
	split_sreg_range(0X805346C0,"T",0X1,3);
	split_sreg_range(0X8053479C,"T",0X1,3);
	split_sreg_range(0X805347D2,"T",0X1,3);
	split_sreg_range(0X805347EC,"T",0X1,3);
	split_sreg_range(0X805347FE,"T",0X1,3);
	split_sreg_range(0X80534802,"T",0X1,3);
	split_sreg_range(0X8053483C,"T",0X1,3);
	split_sreg_range(0X8053484A,"T",0X1,3);
	split_sreg_range(0X8053486A,"T",0X1,3);
	split_sreg_range(0X8053489C,"T",0X1,3);
	split_sreg_range(0X805348BE,"T",0X1,3);
	split_sreg_range(0X805348CC,"T",0X1,3);
	split_sreg_range(0X805348D6,"T",0X1,3);
	split_sreg_range(0X80534900,"T",0X1,3);
	split_sreg_range(0X8053492E,"T",0X1,3);
	split_sreg_range(0X8053495A,"T",0X1,3);
	split_sreg_range(0X8053497E,"T",0X1,3);
	split_sreg_range(0X8053498C,"T",0X1,3);
	split_sreg_range(0X80534996,"T",0X1,3);
	split_sreg_range(0X805349D0,"T",0X1,3);
	split_sreg_range(0X80534A2A,"T",0X1,3);
	split_sreg_range(0X80534A5A,"T",0X1,3);
	split_sreg_range(0X80534A7E,"T",0X1,3);
	split_sreg_range(0X80534A8A,"T",0X1,3);
	split_sreg_range(0X80534A94,"T",0X1,3);
	split_sreg_range(0X80534AAA,"T",0X1,3);
	split_sreg_range(0X80534AD4,"T",0X1,3);
	split_sreg_range(0X80534AEE,"T",0X1,3);
	split_sreg_range(0X80534B3E,"T",0X1,3);
	split_sreg_range(0X80534B4C,"T",0X1,3);
	split_sreg_range(0X80534B78,"T",0X1,3);
	split_sreg_range(0X80534B8C,"T",0X1,3);
	split_sreg_range(0X80534BA0,"T",0X1,3);
	split_sreg_range(0X80534BA2,"T",0X1,3);
	split_sreg_range(0X80534BF2,"T",0X1,3);
	split_sreg_range(0X80534C10,"T",0X1,3);
	split_sreg_range(0X80534C1C,"T",0X1,3);
	split_sreg_range(0X80534CCE,"T",0X1,3);
	split_sreg_range(0X80534CFC,"T",0X1,3);
	split_sreg_range(0X80534D04,"T",0X1,3);
	split_sreg_range(0X80534D0A,"T",0X1,3);
	split_sreg_range(0X80534D2A,"T",0X1,3);
	split_sreg_range(0X80534D2E,"T",0X1,3);
	split_sreg_range(0X80534D38,"T",0X1,3);
	split_sreg_range(0X80534D3A,"T",0X1,3);
	split_sreg_range(0X80534D6C,"T",0X1,3);
	split_sreg_range(0X80534D76,"T",0X1,3);
	split_sreg_range(0X80534D78,"T",0X1,3);
	split_sreg_range(0X80534DAC,"T",0X1,3);
	split_sreg_range(0X80534DB2,"T",0X1,3);
	split_sreg_range(0X80534DD8,"T",0X1,3);
	split_sreg_range(0X80534DF0,"T",0X1,3);
	split_sreg_range(0X80534EAA,"T",0X1,3);
	split_sreg_range(0X80534F1E,"T",0X1,3);
	split_sreg_range(0X80534F94,"T",0X1,3);
	split_sreg_range(0X80535080,"T",0X1,3);
	split_sreg_range(0X805350D0,"T",0X1,3);
	split_sreg_range(0X8053510E,"T",0X1,3);
	split_sreg_range(0X80535148,"T",0X1,3);
	split_sreg_range(0X80535188,"T",0X1,3);
	split_sreg_range(0X80535222,"T",0X1,3);
	split_sreg_range(0X80535256,"T",0X1,3);
	split_sreg_range(0X8053536A,"T",0X1,3);
	split_sreg_range(0X80535372,"T",0X1,3);
	split_sreg_range(0X805353A8,"T",0X1,3);
	split_sreg_range(0X805353CA,"T",0X1,3);
	split_sreg_range(0X80535412,"T",0X1,3);
	split_sreg_range(0X805354A8,"T",0X1,3);
	split_sreg_range(0X805354D8,"T",0X1,3);
	split_sreg_range(0X805355EC,"T",0X1,3);
	split_sreg_range(0X805355F4,"T",0X1,3);
	split_sreg_range(0X8053562A,"T",0X1,3);
	split_sreg_range(0X80535652,"T",0X1,3);
	split_sreg_range(0X80535672,"T",0X1,3);
	split_sreg_range(0X80535698,"T",0X1,3);
	split_sreg_range(0X805356BC,"T",0X1,3);
	split_sreg_range(0X805356C0,"T",0X1,3);
	split_sreg_range(0X8053571E,"T",0X1,3);
	split_sreg_range(0X80535724,"T",0X1,3);
	split_sreg_range(0X80535738,"T",0X1,3);
	split_sreg_range(0X8053574C,"T",0X1,3);
	split_sreg_range(0X8053576C,"T",0X1,3);
	split_sreg_range(0X805357A8,"T",0X1,3);
	split_sreg_range(0X805357B6,"T",0X1,3);
	split_sreg_range(0X805357EC,"T",0X1,3);
	split_sreg_range(0X805357F8,"T",0X1,3);
	split_sreg_range(0X80535814,"T",0X1,3);
	split_sreg_range(0X80535822,"T",0X1,3);
	split_sreg_range(0X80535836,"T",0X1,3);
	split_sreg_range(0X8053584E,"T",0X1,3);
	split_sreg_range(0X8053585A,"T",0X1,3);
	split_sreg_range(0X8053588A,"T",0X1,3);
	split_sreg_range(0X80535890,"T",0X1,3);
	split_sreg_range(0X805358AE,"T",0X1,3);
	split_sreg_range(0X805358BA,"T",0X1,3);
	split_sreg_range(0X805358D0,"T",0X1,3);
	split_sreg_range(0X80535AE0,"T",0X1,3);
	split_sreg_range(0X80535B20,"T",0X1,3);
	split_sreg_range(0X80535B46,"T",0X1,3);
	split_sreg_range(0X80535B5E,"T",0X1,3);
	split_sreg_range(0X80535B86,"T",0X1,3);
	split_sreg_range(0X80535BC0,"T",0X1,3);
	split_sreg_range(0X80535BDC,"T",0X1,3);
	split_sreg_range(0X80535BDE,"T",0X1,3);
	split_sreg_range(0X80535C0C,"T",0X1,3);
	split_sreg_range(0X80535C30,"T",0X1,3);
	split_sreg_range(0X80535C3E,"T",0X1,3);
	split_sreg_range(0X80535C40,"T",0X1,3);
	split_sreg_range(0X80535C6E,"T",0X1,3);
	split_sreg_range(0X80535C84,"T",0X1,3);
	split_sreg_range(0X80535CB6,"T",0X1,3);
	split_sreg_range(0X80535CBA,"T",0X1,3);
	split_sreg_range(0X80535CC6,"T",0X1,3);
	split_sreg_range(0X80535CDA,"T",0X1,3);
	split_sreg_range(0X80535D38,"T",0X1,3);
	split_sreg_range(0X80535D48,"T",0X1,3);
	split_sreg_range(0X80535D4C,"T",0X1,3);
	split_sreg_range(0X80535D68,"T",0X1,3);
	split_sreg_range(0X80535D8C,"T",0X1,3);
	split_sreg_range(0X80535D92,"T",0X1,3);
	split_sreg_range(0X80535D9C,"T",0X1,3);
	split_sreg_range(0X80535DDC,"T",0X1,3);
	split_sreg_range(0X80535E06,"T",0X1,3);
	split_sreg_range(0X80535E16,"T",0X1,3);
	split_sreg_range(0X80535E1A,"T",0X1,3);
	split_sreg_range(0X80535E44,"T",0X1,3);
	split_sreg_range(0X80535E50,"T",0X1,3);
	split_sreg_range(0X80535E52,"T",0X1,3);
	split_sreg_range(0X80535E68,"T",0X1,3);
	split_sreg_range(0X80535E7A,"T",0X1,3);
	split_sreg_range(0X80535E80,"T",0X1,3);
	split_sreg_range(0X80535E8C,"T",0X1,3);
	split_sreg_range(0X80535ED0,"T",0X1,3);
	split_sreg_range(0X80535EE6,"T",0X1,3);
	split_sreg_range(0X80535EEA,"T",0X1,3);
	split_sreg_range(0X80535F06,"T",0X1,3);
	split_sreg_range(0X80535F2A,"T",0X1,3);
	split_sreg_range(0X80535F32,"T",0X1,3);
	split_sreg_range(0X80535F3C,"T",0X1,3);
	split_sreg_range(0X80535F80,"T",0X1,3);
	split_sreg_range(0X80535FAC,"T",0X1,3);
	split_sreg_range(0X80535FBC,"T",0X1,3);
	split_sreg_range(0X80535FC2,"T",0X1,3);
	split_sreg_range(0X80535FEC,"T",0X1,3);
	split_sreg_range(0X80535FF8,"T",0X1,3);
	split_sreg_range(0X80535FFA,"T",0X1,3);
	split_sreg_range(0X80536010,"T",0X1,3);
	split_sreg_range(0X8053603A,"T",0X1,3);
	split_sreg_range(0X80536056,"T",0X1,3);
	split_sreg_range(0X8053607C,"T",0X1,3);
	split_sreg_range(0X8053609C,"T",0X1,3);
	split_sreg_range(0X805360A4,"T",0X1,3);
	split_sreg_range(0X805360CC,"T",0X1,3);
	split_sreg_range(0X80536120,"T",0X1,3);
	split_sreg_range(0X80536128,"T",0X1,3);
	split_sreg_range(0X80536148,"T",0X1,3);
	split_sreg_range(0X8053619C,"T",0X1,3);
	split_sreg_range(0X80536204,"T",0X1,3);
	split_sreg_range(0X8053625E,"T",0X1,3);
	split_sreg_range(0X8053629A,"T",0X1,3);
	split_sreg_range(0X805362F6,"T",0X1,3);
	split_sreg_range(0X80536314,"T",0X1,3);
	split_sreg_range(0X8053638C,"T",0X1,3);
	split_sreg_range(0X805363BC,"T",0X1,3);
	split_sreg_range(0X80536410,"T",0X1,3);
	split_sreg_range(0X8053642C,"T",0X1,3);
	split_sreg_range(0X80536462,"T",0X1,3);
	split_sreg_range(0X80536494,"T",0X1,3);
	split_sreg_range(0X805364D2,"T",0X1,3);
	split_sreg_range(0X8053651E,"T",0X1,3);
	split_sreg_range(0X8053653E,"T",0X1,3);
	split_sreg_range(0X80536574,"T",0X1,3);
	split_sreg_range(0X80536644,"T",0X1,3);
	split_sreg_range(0X80536686,"T",0X1,3);
	split_sreg_range(0X805366A2,"T",0X1,3);
	split_sreg_range(0X805366E4,"T",0X1,3);
	split_sreg_range(0X805366EA,"T",0X1,3);
	split_sreg_range(0X805367B0,"T",0X1,3);
	split_sreg_range(0X805367B2,"T",0X1,3);
	split_sreg_range(0X8053680C,"T",0X1,3);
	split_sreg_range(0X8053682A,"T",0X1,3);
	split_sreg_range(0X80536882,"T",0X1,3);
	split_sreg_range(0X805368A2,"T",0X1,3);
	split_sreg_range(0X8053691E,"T",0X1,3);
	split_sreg_range(0X80536956,"T",0X1,3);
	split_sreg_range(0X80536A20,"T",0X1,3);
	split_sreg_range(0X80536A3E,"T",0X1,3);
	split_sreg_range(0X80536AF0,"T",0X1,3);
	split_sreg_range(0X80536AFE,"T",0X1,3);
	split_sreg_range(0X80536B62,"T",0X1,3);
	split_sreg_range(0X80536C38,"T",0X1,3);
	split_sreg_range(0X80536C60,"T",0X1,3);
	split_sreg_range(0X80536CD8,"T",0X1,3);
	split_sreg_range(0X80536CE6,"T",0X1,3);
	split_sreg_range(0X80536D00,"T",0X1,3);
	split_sreg_range(0X80536D3C,"T",0X1,3);
	split_sreg_range(0X80536D7A,"T",0X1,3);
	split_sreg_range(0X80536DD0,"T",0X1,3);
	split_sreg_range(0X80536DD4,"T",0X1,3);
	split_sreg_range(0X80536E1A,"T",0X1,3);
	split_sreg_range(0X80536E58,"T",0X1,3);
	split_sreg_range(0X80536E88,"T",0X1,3);
	split_sreg_range(0X80536E94,"T",0X1,3);
	split_sreg_range(0X80536EE4,"T",0X1,3);
	split_sreg_range(0X80536EE8,"T",0X1,3);
	split_sreg_range(0X80536EF2,"T",0X1,3);
	split_sreg_range(0X80536EF4,"T",0X1,3);
	split_sreg_range(0X80536F24,"T",0X1,3);
	split_sreg_range(0X80536F3C,"T",0X1,3);
	split_sreg_range(0X80536F66,"T",0X1,3);
	split_sreg_range(0X80536F74,"T",0X1,3);
	split_sreg_range(0X80536F8E,"T",0X1,3);
	split_sreg_range(0X80536FB2,"T",0X1,3);
	split_sreg_range(0X80536FCC,"T",0X1,3);
	split_sreg_range(0X80536FEC,"T",0X1,3);
	split_sreg_range(0X80537022,"T",0X1,3);
	split_sreg_range(0X8053722A,"T",0X1,3);
	split_sreg_range(0X80537270,"T",0X1,3);
	split_sreg_range(0X8053727A,"T",0X1,3);
	split_sreg_range(0X805372B2,"T",0X1,3);
	split_sreg_range(0X805372CE,"T",0X1,3);
	split_sreg_range(0X805372EA,"T",0X1,3);
	split_sreg_range(0X80537306,"T",0X1,3);
	split_sreg_range(0X80537322,"T",0X1,3);
	split_sreg_range(0X8053733E,"T",0X1,3);
	split_sreg_range(0X8053735A,"T",0X1,3);
	split_sreg_range(0X80537376,"T",0X1,3);
	split_sreg_range(0X80537392,"T",0X1,3);
	split_sreg_range(0X805373AE,"T",0X1,3);
	split_sreg_range(0X805373CA,"T",0X1,3);
	split_sreg_range(0X805373E6,"T",0X1,3);
	split_sreg_range(0X80537402,"T",0X1,3);
	split_sreg_range(0X8053741E,"T",0X1,3);
	split_sreg_range(0X8053743A,"T",0X1,3);
	split_sreg_range(0X8053745A,"T",0X1,3);
	split_sreg_range(0X80537464,"T",0X1,3);
	split_sreg_range(0X80537520,"T",0X1,3);
	split_sreg_range(0X80537524,"T",0X1,3);
	split_sreg_range(0X80537528,"T",0X1,3);
	split_sreg_range(0X80537542,"T",0X1,3);
	split_sreg_range(0X80537562,"T",0X1,3);
	split_sreg_range(0X805375CA,"T",0X1,3);
	split_sreg_range(0X805375D2,"T",0X1,3);
	split_sreg_range(0X805375D4,"T",0X1,3);
	split_sreg_range(0X805375FC,"T",0X1,3);
	split_sreg_range(0X805376BA,"T",0X1,3);
	split_sreg_range(0X805376BE,"T",0X1,3);
	split_sreg_range(0X805376DC,"T",0X1,3);
	split_sreg_range(0X80537744,"T",0X1,3);
	split_sreg_range(0X80537750,"T",0X1,3);
	split_sreg_range(0X80537942,"T",0X1,3);
	split_sreg_range(0X80537982,"T",0X1,3);
	split_sreg_range(0X8053798E,"T",0X1,3);
	split_sreg_range(0X805379CE,"T",0X1,3);
	split_sreg_range(0X805379E0,"T",0X1,3);
	split_sreg_range(0X80537A18,"T",0X1,3);
	split_sreg_range(0X80537A4A,"T",0X1,3);
	split_sreg_range(0X80537A68,"T",0X1,3);
	split_sreg_range(0X80537A7E,"T",0X1,3);
	split_sreg_range(0X80537AA4,"T",0X1,3);
	split_sreg_range(0X80537AC2,"T",0X1,3);
	split_sreg_range(0X80537B06,"T",0X1,3);
	split_sreg_range(0X80537B18,"T",0X1,3);
	split_sreg_range(0X80537B40,"T",0X1,3);
	split_sreg_range(0X80537B82,"T",0X1,3);
	split_sreg_range(0X80537C30,"T",0X1,3);
	split_sreg_range(0X80537C52,"T",0X1,3);
	split_sreg_range(0X80537C5E,"T",0X1,3);
	split_sreg_range(0X80537CBC,"T",0X1,3);
	split_sreg_range(0X80537E10,"T",0X1,3);
	split_sreg_range(0X80537E48,"T",0X1,3);
	split_sreg_range(0X80537E4E,"T",0X1,3);
	split_sreg_range(0X80537E6C,"T",0X1,3);
	split_sreg_range(0X80537E88,"T",0X1,3);
	split_sreg_range(0X80537EBE,"T",0X1,3);
	split_sreg_range(0X80538180,"T",0X1,3);
	split_sreg_range(0X80538194,"T",0X1,3);
	split_sreg_range(0X80538196,"T",0X1,3);
	split_sreg_range(0X805381A6,"T",0X1,3);
	split_sreg_range(0X805381AC,"T",0X1,3);
	split_sreg_range(0X805381C8,"T",0X1,3);
	split_sreg_range(0X805381CC,"T",0X1,3);
	split_sreg_range(0X805381E2,"T",0X1,3);
	split_sreg_range(0X80538206,"T",0X1,3);
	split_sreg_range(0X80538210,"T",0X1,3);
	split_sreg_range(0X80538218,"T",0X1,3);
	split_sreg_range(0X8053823E,"T",0X1,3);
	split_sreg_range(0X80538250,"T",0X1,3);
	split_sreg_range(0X8053826C,"T",0X1,3);
	split_sreg_range(0X8053828C,"T",0X1,3);
	split_sreg_range(0X80538296,"T",0X1,3);
	split_sreg_range(0X805382AA,"T",0X1,3);
	split_sreg_range(0X805382B8,"T",0X1,3);
	split_sreg_range(0X805382C8,"T",0X1,3);
	split_sreg_range(0X805382DA,"T",0X1,3);
	split_sreg_range(0X805382F8,"T",0X1,3);
	split_sreg_range(0X8053830A,"T",0X1,3);
	split_sreg_range(0X80538322,"T",0X1,3);
	split_sreg_range(0X8053832E,"T",0X1,3);
	split_sreg_range(0X8053833A,"T",0X1,3);
	split_sreg_range(0X80538374,"T",0X1,3);
	split_sreg_range(0X80538380,"T",0X1,3);
	split_sreg_range(0X80538388,"T",0X1,3);
	split_sreg_range(0X80538390,"T",0X1,3);
	split_sreg_range(0X80538398,"T",0X1,3);
	split_sreg_range(0X805383B6,"T",0X1,3);
	split_sreg_range(0X805383CA,"T",0X1,3);
	split_sreg_range(0X80538416,"T",0X1,3);
	split_sreg_range(0X80538428,"T",0X1,3);
	split_sreg_range(0X8053843A,"T",0X1,3);
	split_sreg_range(0X8053844A,"T",0X1,3);
	split_sreg_range(0X80538460,"T",0X1,3);
	split_sreg_range(0X805384BC,"T",0X1,3);
	split_sreg_range(0X805384E4,"T",0X1,3);
	split_sreg_range(0X80538610,"T",0X1,3);
	split_sreg_range(0X80538614,"T",0X1,3);
	split_sreg_range(0X8053861A,"T",0X1,3);
	split_sreg_range(0X80538664,"T",0X1,3);
	split_sreg_range(0X8053867C,"T",0X1,3);
	split_sreg_range(0X80538680,"T",0X1,3);
	split_sreg_range(0X8053868A,"T",0X1,3);
	split_sreg_range(0X80538700,"T",0X1,3);
	split_sreg_range(0X8053878E,"T",0X1,3);
	split_sreg_range(0X80538938,"T",0X1,3);
	split_sreg_range(0X805389CC,"T",0X1,3);
	split_sreg_range(0X80538B7E,"T",0X1,3);
	split_sreg_range(0X80538B84,"T",0X1,3);
	split_sreg_range(0X80538BB8,"T",0X1,3);
	split_sreg_range(0X80538BBA,"T",0X1,3);
	split_sreg_range(0X80538C40,"T",0X1,3);
	split_sreg_range(0X80538CA4,"T",0X1,3);
	split_sreg_range(0X80538D12,"T",0X1,3);
	split_sreg_range(0X80538D48,"T",0X1,3);
	split_sreg_range(0X80538D4C,"T",0,3);
	split_sreg_range(0X80538D50,"T",0,3);
	split_sreg_range(0X80538D58,"T",0X1,3);
	split_sreg_range(0X80538D5C,"T",0,3);
	split_sreg_range(0X80538D60,"T",0X1,3);
	split_sreg_range(0X80538D64,"T",0,3);
	split_sreg_range(0X80538D68,"T",0,3);
	split_sreg_range(0X80538D70,"T",0,3);
	split_sreg_range(0X80538D78,"T",0X1,3);
	split_sreg_range(0X80538D7C,"T",0,3);
	split_sreg_range(0X80539000,"T",0,3);
	split_sreg_range(0X8053A4EC,"T",0X1,2);
	split_sreg_range(0X8053A4F0,"T",0X1,2);
	split_sreg_range(0X8053A630,"T",0X1,2);
	split_sreg_range(0X80547000,"T",0,3);
	split_sreg_range(0X8054700C,"T",0,3);
	split_sreg_range(0X80548000,"T",0,3);
	split_sreg_range(0X80578000,"T",0,3);
	split_sreg_range(0X8077C000,"T",0,3);
	split_sreg_range(0X807B6000,"T",0,3);
	split_sreg_range(0X80300000,"DS",0X1,3);
	split_sreg_range(0X80307000,"DS",0X1,3);
	split_sreg_range(0X80500000,"DS",0X1,3);
	split_sreg_range(0X80539000,"DS",0X1,3);
	split_sreg_range(0X80547000,"DS",0X1,3);
	split_sreg_range(0X8054700C,"DS",0X1,3);
	split_sreg_range(0X80548000,"DS",0X1,3);
	split_sreg_range(0X80578000,"DS",0X1,3);
	split_sreg_range(0X8077C000,"DS",0X1,3);
	split_sreg_range(0X807B6000,"DS",0X1,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
	Bytes_4();
	Bytes_5();
	Bytes_6();
	Bytes_7();
        end_type_updating(UTP_STRUCT);
}

// End of file.
