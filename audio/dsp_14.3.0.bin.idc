#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("ARM", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 2);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);

	add_segm_ex(0X80300000,0X80307000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80300000,"appservice");
	SegClass (0X80300000,"DATA");
	SegDefReg(0x80300000,"T",0x0);
	SegDefReg(0x80300000,"DS",0x1);
	set_segm_type(0X80300000,3);
	add_segm_ex(0X80500000,0X8053A000,0,1,1,5,ADDSEG_NOSREG);
	SegRename(0X80500000,".text");
	SegClass (0X80500000,"CODE");
	SegDefReg(0x80500000,"T",0x0);
	SegDefReg(0x80500000,"DS",0x0);
	set_segm_type(0X80500000,2);
	add_segm_ex(0X8053A000,0X80548000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X8053A000,".data");
	SegClass (0X8053A000,"DATA");
	SegDefReg(0x8053A000,"T",0x0);
	SegDefReg(0x8053A000,"DS",0x1);
	set_segm_type(0X8053A000,3);
	add_segm_ex(0X80548000,0X8054800C,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80548000,"uncacheddata");
	SegClass (0X80548000,"DATA");
	SegDefReg(0x80548000,"T",0x0);
	SegDefReg(0x80548000,"DS",0x1);
	set_segm_type(0X80548000,3);
	add_segm_ex(0X8054800C,0X80549000,0,1,1,5,ADDSEG_NOSREG);
	SegRename(0X8054800C,".text");
	SegClass (0X8054800C,"CODE");
	SegDefReg(0x8054800C,"T",0x0);
	SegDefReg(0x8054800C,"DS",0x1);
	set_segm_type(0X8054800C,2);
	add_segm_ex(0X80549000,0X80577DC0,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80549000,"dramsharedapp");
	SegClass (0X80549000,"DATA");
	SegDefReg(0x80549000,"T",0x0);
	SegDefReg(0x80549000,"DS",0x1);
	set_segm_type(0X80549000,3);
	add_segm_ex(0X80578000,0X8077C000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X80578000,"preebss");
	SegClass (0X80578000,"DATA");
	SegDefReg(0x80578000,"T",0x0);
	SegDefReg(0x80578000,"DS",0x1);
	set_segm_type(0X80578000,3);
	add_segm_ex(0X8077C000,0X807B586C,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X8077C000,"bss");
	SegClass (0X8077C000,"bss");
	SegDefReg(0x8077C000,"T",0x0);
	SegDefReg(0x8077C000,"DS",0x1);
	add_segm_ex(0X807B6000,0X80800000,0X1,1,1,2,ADDSEG_NOSREG);
	SegRename(0X807B6000,"heap");
	SegClass (0X807B6000,"heap");
	SegDefReg(0x807B6000,"T",0x0);
	SegDefReg(0x807B6000,"DS",0x1);
	set_inf_attr(INF_LOW_OFF, 0x702EF700);
	set_inf_attr(INF_HIGH_OFF, 0x8073437C);
}

static Enums_0(id) {

	id = add_enum(-1,"nn::audio::CommandType",0x1100000);
	add_enum_member(id,"Invalid",	0,	-1);
	add_enum_member(id,"DataSourcePcmInt16V1",	0X1,	-1);
	add_enum_member(id,"DataSourcePcmInt16V2",	0X2,	-1);
	add_enum_member(id,"DataSourcePcmFloatV1",	0X3,	-1);
	add_enum_member(id,"DataSourcePcmFloatV2",	0X4,	-1);
	add_enum_member(id,"DataSourceAdpcmV1",	0X5,	-1);
	add_enum_member(id,"DataSourceAdpcmV2",	0X6,	-1);
	add_enum_member(id,"Volume",	0X7,	-1);
	add_enum_member(id,"VolumeRamp",	0X8,	-1);
	add_enum_member(id,"BiquadFilter",	0X9,	-1);
	add_enum_member(id,"Mix",	0XA,	-1);
	add_enum_member(id,"MixRamp",	0XB,	-1);
	add_enum_member(id,"MixRampGrouped",	0XC,	-1);
	add_enum_member(id,"DepopPrepare",	0XD,	-1);
	add_enum_member(id,"DepopForMixBuffers",	0XE,	-1);
	add_enum_member(id,"Delay",	0XF,	-1);
	add_enum_member(id,"Upsample",	0X10,	-1);
	add_enum_member(id,"DownMix6chTo2ch",	0X11,	-1);
	add_enum_member(id,"Aux",	0X12,	-1);
	add_enum_member(id,"DeviceSink",	0X13,	-1);
	add_enum_member(id,"CircularBufferSink",	0X14,	-1);
	add_enum_member(id,"Reverb",	0X15,	-1);
	add_enum_member(id,"I3dl2Reverb",	0X16,	-1);
	add_enum_member(id,"Performance",	0X17,	-1);
	add_enum_member(id,"ClearMixBuffer",	0X18,	-1);
	add_enum_member(id,"CopyMixBuffer",	0X19,	-1);
	add_enum_member(id,"LightLimiterV1",	0X1A,	-1);
	add_enum_member(id,"LightLimiterV2",	0X1B,	-1);
	add_enum_member(id,"MultiTapBiquadFilter",	0X1C,	-1);
	add_enum_member(id,"Capture",	0X1D,	-1);
	add_enum_member(id,"Compressor",	0X1E,	-1);
	id = add_enum(-1,"nn::audio::PerformanceDetailType",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"nn::audio::PerformanceEntryType",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"Start",	0X1,	0x1);
	add_enum_member(id,"Stop",	0X2,	0x2);
	id = add_enum(-1,"VoiceType::SrcQuality",0x1100000);
	add_enum_member(id,"SrcQuality_Medium",	0,	-1);
	add_enum_member(id,"SrcQuality_High",	0X1,	-1);
	add_enum_member(id,"SrcQuality_Low",	0X2,	-1);
	id = add_enum(-1,"nn::audio::SampleFormat",0x1100000);
	add_enum_member(id,"PcmInt8",	0X1,	-1);
	add_enum_member(id,"PcmInt16",	0X2,	-1);
	add_enum_member(id,"PcmInt24",	0X3,	-1);
	add_enum_member(id,"PcmInt32",	0X4,	-1);
	add_enum_member(id,"PcmFloat",	0X5,	-1);
	add_enum_member(id,"Adpcm",	0X6,	-1);
	id = add_enum(-1,"EffectState",0x1100000);
	add_enum_member(id,"New",	0X1,	-1);
	add_enum_member(id,"Enabled",	0X2,	-1);
	add_enum_member(id,"Disabled",	0X3,	-1);
	id = add_enum(-1,"SessionType",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"adsp_app_msg",0x1100000);
	add_enum_member(id,"OS_LOAD_COMPLETE",	0,	-1);
	add_enum_member(id,"RUN_ADSP_APP",	0X1,	-1);
	add_enum_member(id,"ADSP_APP_INIT",	0X2,	-1);
	add_enum_member(id,"ADSP_APP_START",	0X3,	-1);
	add_enum_member(id,"ADSP_APP_START_STATUS",	0X4,	-1);
	add_enum_member(id,"ADSP_APP_COMPLETE_STATUS",	0X5,	-1);
	id = add_enum(-1,"comp_eve_elem_type_t",0x1100000);
	add_enum_member(id,"IS_SEMAPHORE",	0,	-1);
	add_enum_member(id,"IS_EVENT",	0X1,	-1);
	add_enum_member(id,"IS_C_EVENT",	0X2,	-1);
	id = add_enum(-1,"sched_policy",0x1100000);
	add_enum_member(id,"SCHED_OTHER",	0,	-1);
	add_enum_member(id,"SCHED_RR",	0,	-1);
	add_enum_member(id,"SCHED_FIFO",	0X1,	-1);
	add_enum_member(id,"SCHED_EDF",	0X2,	-1);
	id = add_enum(-1,"$2ACB2F16C07EDC6EF91A32839C59B658",0x1100000);
	add_enum_member(id,"INVALID",	0,	-1);
	add_enum_member(id,"VALID",	0X1,	-1);
	id = add_enum(-1,"$5C9FD532B40CB77241DBDD5010075635",0x1100000);
	add_enum_member(id,"SHORT",	0,	-1);
	add_enum_member(id,"EXTENDED",	0X1,	-1);
	id = add_enum(-1,"thread_state",0x1100000);
	add_enum_member(id,"THREAD_SUSPENDED",	0,	-1);
	add_enum_member(id,"THREAD_READY",	0X1,	-1);
	add_enum_member(id,"THREAD_RUNNING",	0X2,	-1);
	add_enum_member(id,"THREAD_BLOCKED",	0X3,	-1);
	add_enum_member(id,"THREAD_SLEEPING",	0X4,	-1);
	add_enum_member(id,"THREAD_DEATH",	0X5,	-1);
	id = add_enum(-1,"adsp_mbx_direction",0x1100000);
	add_enum_member(id,"ADSP_MBX_SEND",	0,	-1);
	add_enum_member(id,"ADSP_MBX_RCV",	0X1,	-1);
	id = add_enum(-1,"handler_return",0x1100000);
	add_enum_member(id,"INT_NO_RESCHEDULE",	0,	-1);
	add_enum_member(id,"INT_RESCHEDULE",	0X1,	-1);
	id = add_enum(-1,"ParameterState",0x1100000);
	add_enum_member(id,"Initialised",	0,	-1);
	add_enum_member(id,"Updating",	0X1,	-1);
	add_enum_member(id,"Updated",	0X2,	-1);
	id = add_enum(-1,"vector_trigger_type",0x1100000);
	add_enum_member(id,"LEVEL_TRIGGER",	0,	-1);
	add_enum_member(id,"EDGE_TRIGGER",	0X1,	-1);
	id = add_enum(-1,"tegra_chipid",0x1100000);
	add_enum_member(id,"TEGRA_CHIPID_UNKNOWN",	0,	-1);
	add_enum_member(id,"TEGRA_CHIPID_TEGRA18",	0X18,	-1);
	add_enum_member(id,"TEGRA_CHIPID_TEGRA19",	0X19,	-1);
	add_enum_member(id,"TEGRA_CHIPID_TEGRA21",	0X21,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("float32x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("int32x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("int8x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("float32x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("nn::audio::dsp::Command");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x10), "char[16]");
	id = get_struc_id("__n64");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("__n128");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint8x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("int16x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("int32x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("uint16x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("uint32x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("int8x16_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("int16x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("int64x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint8x16_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint16x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint32x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("uint64x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("poly8x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("poly16x4_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[1]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[2]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[4]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[8]");
	SetType(get_member_id(id, 0x4), "__int64[1]");
	SetType(get_member_id(id, 0x5), "__int32[2]");
	SetType(get_member_id(id, 0x6), "__int16[4]");
	SetType(get_member_id(id, 0x7), "__int8[8]");
	SetType(get_member_id(id, 0x8), "float[2]");
	SetType(get_member_id(id, 0x9), "double[1]");
	id = get_struc_id("poly16x8_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("poly8x16_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("float64x2_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("poly128_t");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("float32x2x2_t");
	SetType(get_member_id(id, 0x0), "float32x2_t[2]");
	id = get_struc_id("nn::os::ThreadType");
	SetType(get_member_id(id, 0x0), "__int64");
	SetType(get_member_id(id, 0x8), "__int64");
	SetType(get_member_id(id, 0x10), "__int64");
	SetType(get_member_id(id, 0x18), "__int64");
	SetType(get_member_id(id, 0x20), "char[32]");
	SetType(get_member_id(id, 0x44), "char");
	SetType(get_member_id(id, 0x46), "__int16");
	SetType(get_member_id(id, 0x60), "__int64");
	SetType(get_member_id(id, 0x68), "__int64");
	SetType(get_member_id(id, 0x70), "__int64");
	SetType(get_member_id(id, 0x78), "char[256]");
	SetType(get_member_id(id, 0x178), "char[32]");
	SetType(get_member_id(id, 0x198), "const char *");
	SetType(get_member_id(id, 0x19C), "nn::os::detail::InternalCriticalSection");
	SetType(get_member_id(id, 0x1A0), "nn::os::detail::InternalConditionVariable");
	id = get_struc_id("nn::os::detail::InternalCriticalSection");
	SetType(get_member_id(id, 0x0), "nn::os::detail::InternalCriticalSectionImplByHorizon");
	id = get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon");
	id = get_struc_id("nn::os::detail::InternalConditionVariable");
	SetType(get_member_id(id, 0x0), "nn::os::detail::InternalConditionVariableImplByHorizon");
	id = get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon");
	id = get_struc_id("nn::os::detail::InternalCriticalSectionStorage");
	SetType(get_member_id(id, 0x0), "nn::os::detail::InternalCriticalSection");
	id = get_struc_id("nn::os::ConditionVariableType");
	SetType(get_member_id(id, 0x0), "char");
	SetType(get_member_id(id, 0x4), "int");
	id = get_struc_id("nn::os::EventType");
	SetType(get_member_id(id, 0x0), "nn::os::EventType *");
	SetType(get_member_id(id, 0x4), "nn::os::EventType *");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0x9), "bool");
	SetType(get_member_id(id, 0xA), "bool");
	SetType(get_member_id(id, 0xB), "bool");
	SetType(get_member_id(id, 0x14), "nn::os::detail::InternalCriticalSectionImplByHorizon");
	SetType(get_member_id(id, 0x18), "nn::os::detail::InternalConditionVariableImplByHorizon");
	id = get_struc_id("nn::os::detail::InterProcessEventType");
	SetType(get_member_id(id, 0x0), "nn::os::EventType *");
	SetType(get_member_id(id, 0x4), "nn::os::EventType *");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0x9), "bool");
	SetType(get_member_id(id, 0xA), "bool");
	SetType(get_member_id(id, 0xB), "bool");
	SetType(get_member_id(id, 0x14), "nn::os::detail::InternalCriticalSectionImplByHorizon");
	SetType(get_member_id(id, 0x18), "nn::os::detail::InternalConditionVariableImplByHorizon");
	id = get_struc_id("nn::os::SystemEventType::u");
	SetType(get_member_id(id, 0x0), "nn::os::EventType");
	SetType(get_member_id(id, 0x1), "nn::os::detail::InterProcessEventType");
	id = get_struc_id("nn::sf::NativeHandle");
	SetType(get_member_id(id, 0x4), "char");
	id = get_struc_id("nn::audio::ICommand");
	SetType(get_member_id(id, 0x4), "bool");
	id = get_struc_id("nn::audio::CircularBufferSinkCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x30), "char[4]");
	id = get_struc_id("nn::audio::dsp::CommandListProcessor");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x1C), "void *");
	id = get_struc_id("MixDevice");
	SetType(get_member_id(id, 0x0), "HardwareDevice *");
	SetType(get_member_id(id, 0x4), "char[256]");
	id = get_struc_id("nn::audio::LightLimiterV1Command");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x28), "nn::audio::LightLimiterParameter");
	SetType(get_member_id(id, 0x74), "bool");
	id = get_struc_id("nn::audio::LightLimiterParameter");
	SetType(get_member_id(id, 0x0), "char[6]");
	SetType(get_member_id(id, 0x6), "char[6]");
	SetType(get_member_id(id, 0xC), "__int16");
	SetType(get_member_id(id, 0xE), "__int16");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "int");
	SetType(get_member_id(id, 0x20), "int");
	SetType(get_member_id(id, 0x24), "float");
	SetType(get_member_id(id, 0x28), "float");
	SetType(get_member_id(id, 0x2C), "float");
	SetType(get_member_id(id, 0x30), "float");
	SetType(get_member_id(id, 0x34), "float");
	SetType(get_member_id(id, 0x38), "int");
	SetType(get_member_id(id, 0x3C), "int");
	SetType(get_member_id(id, 0x40), "char");
	SetType(get_member_id(id, 0x41), "bool");
	SetType(get_member_id(id, 0x42), "bool");
	SetType(get_member_id(id, 0x43), "char");
	id = get_struc_id("nn::audio::LightLimiterState");
	SetType(get_member_id(id, 0x10), "char[32]");
	id = get_struc_id("nn::audio::LightLimiterStatisticsInternal");
	id = get_struc_id("nn::audio::PerformanceCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "nn::audio::PerformanceEntryType");
	SetType(get_member_id(id, 0x18), "nn::audio::server::PerformanceEntryAddresses");
	id = get_struc_id("nn::audio::server::PerformanceEntryAddresses");
	id = get_struc_id("nn::audio::CopyMixBufferCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	id = get_struc_id("nn::audio::DownMix6chTo2chCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x3C), "char[4]");
	id = get_struc_id("nn::audio::MixRampCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	id = get_struc_id("nn::audio::server::VoiceState");
	SetType(get_member_id(id, 0x10), "bool[4]");
	SetType(get_member_id(id, 0x2C), "char[4]");
	SetType(get_member_id(id, 0x30), "nn::codec::AdpcmContext");
	SetType(get_member_id(id, 0x36), "char[2]");
	SetType(get_member_id(id, 0x58), "char[8]");
	SetType(get_member_id(id, 0x70), "char[16]");
	SetType(get_member_id(id, 0xE4), "bool");
	SetType(get_member_id(id, 0xE5), "bool");
	SetType(get_member_id(id, 0xEC), "char[20]");
	id = get_struc_id("nn::codec::AdpcmContext");
	id = get_struc_id("nn::audio::dsp::DecodeFromWaveBuffersArgs");
	SetType(get_member_id(id, 0x0), "nn::audio::SampleFormat");
	SetType(get_member_id(id, 0x8), "nn::audio::VoiceState *");
	SetType(get_member_id(id, 0xC), "nn::audio::WaveBuffer *");
	SetType(get_member_id(id, 0x18), "VoiceType::SrcQuality");
	SetType(get_member_id(id, 0x30), "bool");
	SetType(get_member_id(id, 0x31), "bool");
	id = get_struc_id("nn::audio::WaveBuffer");
	SetType(get_member_id(id, 0x10), "bool");
	SetType(get_member_id(id, 0x11), "bool");
	id = get_struc_id("nn::audio::DataSourcePcmInt16V1Command");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x28), "nn::audio::WaveBuffer[4]");
	id = get_struc_id("nn::audio::server::WaveBuffer");
	SetType(get_member_id(id, 0x0), "nn::audio::server::AddressInfo");
	SetType(get_member_id(id, 0x18), "nn::audio::server::AddressInfo");
	SetType(get_member_id(id, 0x38), "bool");
	SetType(get_member_id(id, 0x39), "bool");
	SetType(get_member_id(id, 0x3A), "bool");
	id = get_struc_id("nn::audio::server::AddressInfo");
	SetType(get_member_id(id, 0x0), "void *");
	id = get_struc_id("nn::audio::VoiceState");
	SetType(get_member_id(id, 0x10), "bool[4]");
	SetType(get_member_id(id, 0x2C), "char[4]");
	SetType(get_member_id(id, 0x30), "nn::codec::AdpcmContext");
	SetType(get_member_id(id, 0x36), "char[2]");
	SetType(get_member_id(id, 0x58), "char[8]");
	SetType(get_member_id(id, 0x70), "char[16]");
	SetType(get_member_id(id, 0xE4), "bool");
	SetType(get_member_id(id, 0xE5), "bool");
	SetType(get_member_id(id, 0xE6), "char[4]");
	SetType(get_member_id(id, 0xF0), "char[16]");
	id = get_struc_id("nn::audio::WaveBufferVersion2");
	SetType(get_member_id(id, 0x24), "bool");
	SetType(get_member_id(id, 0x25), "bool");
	id = get_struc_id("nn::audio::dsp::DecodeArg");
	SetType(get_member_id(id, 0x18), "nn::codec::AdpcmContext *");
	id = get_struc_id("nn::audio::PcmFloatDataSourceCommandVersion2");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x28), "nn::audio::WaveBufferVersion2[4]");
	SetType(get_member_id(id, 0xCC), "char[4]");
	id = get_struc_id("nn::audio::AdpcmDataSourceCommandVersion2");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x28), "nn::audio::WaveBufferVersion2[4]");
	id = get_struc_id("nn::audio::AdpcmDataSourceCommandVersion1");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x20), "nn::audio::WaveBuffer[4]");
	id = get_struc_id("nn::audio::VolumeCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	id = get_struc_id("nn::audio::VolumeRampCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	id = get_struc_id("nn::audio::BiquadFilterParameter");
	SetType(get_member_id(id, 0x0), "bool");
	id = get_struc_id("nn::audio::BiquadFilterCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x28), "bool");
	SetType(get_member_id(id, 0x29), "bool");
	SetType(get_member_id(id, 0x2A), "char[2]");
	id = get_struc_id("nn::audio::BiquadFilterState");
	id = get_struc_id("nn::audio::MultiTapBiquadFilterCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x18), "char[2]");
	SetType(get_member_id(id, 0x38), "bool");
	SetType(get_member_id(id, 0x39), "bool");
	id = get_struc_id("nn::audio::MixCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	id = get_struc_id("nn::audio::DepopPrepareCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	id = get_struc_id("nn::audio::DelayState");
	SetType(get_member_id(id, 0x0), "char[32]");
	SetType(get_member_id(id, 0x20), "nn::audio::DelayLine[6]");
	SetType(get_member_id(id, 0xDC), "char[120]");
	id = get_struc_id("nn::audio::DelayParameter");
	SetType(get_member_id(id, 0x34), "ParameterState");
	id = get_struc_id("nn::audio::DelayLine");
	id = get_struc_id("nn::audio::CommandListHeader");
	id = get_struc_id("nn::audio::dsp::CommandBuffer");
	SetType(get_member_id(id, 0x0), "nn::audio::CommandListHeader *");
	SetType(get_member_id(id, 0x10), "bool");
	id = get_struc_id("nn::audio::dsp::Buffer");
	SetType(get_member_id(id, 0x0), "nn::audio::dsp::CommandBuffer");
	SetType(get_member_id(id, 0x28), "nn::audio::dsp::CommandBuffer");
	SetType(get_member_id(id, 0x50), "nn::audio::dsp::MapUnmapBuffer");
	id = get_struc_id("nn::audio::dsp::MapUnmapBuffer");
	id = get_struc_id("nn::audio::DelayCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x2C), "nn::audio::DelayParameter");
	SetType(get_member_id(id, 0x6C), "bool");
	SetType(get_member_id(id, 0x6D), "char[3]");
	id = get_struc_id("nn::audio::DeviceSinkCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "char[256]");
	SetType(get_member_id(id, 0x12C), "char[4]");
	id = get_struc_id("MixDevice::vtbl");
	SetType(get_member_id(id, 0x0), "char[28]");
	SetType(get_member_id(id, 0x20), "void *(__cdecl *)(MixDevice *)");
	id = get_struc_id("HardwareDevice");
	SetType(get_member_id(id, 0x0), "AudioRenderSession *");
	SetType(get_member_id(id, 0x8), "void *");
	id = get_struc_id("SomeDevice");
	SetType(get_member_id(id, 0x0), "struct SomeDevice::vtbl *");
	id = get_struc_id("SomeDevice::vtbl");
	SetType(get_member_id(id, 0x0), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x4), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x8), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0xC), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x10), "char[32]");
	SetType(get_member_id(id, 0x30), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x34), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x38), "char[4]");
	SetType(get_member_id(id, 0x3C), "void *(__cdecl *)(SomeDevice *)");
	SetType(get_member_id(id, 0x40), "void *(__cdecl *)(SomeDevice *)");
	id = get_struc_id("SessionRegistry");
	SetType(get_member_id(id, 0x0), "char[4]");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "char[3]");
	SetType(get_member_id(id, 0x8), "char[184]");
	SetType(get_member_id(id, 0xC0), "char[6][24576]");
	SetType(get_member_id(id, 0x240C8), "timer_t");
	SetType(get_member_id(id, 0x240F0), "char[12]");
	SetType(get_member_id(id, 0x240FC), "semaphore_t");
	SetType(get_member_id(id, 0x24124), "semaphore_t *[3]");
	SetType(get_member_id(id, 0x24130), "char[4]");
	SetType(get_member_id(id, 0x24158), "semaphore_t");
	SetType(get_member_id(id, 0x24180), "char[8]");
	SetType(get_member_id(id, 0x24188), "gMixData *");
	SetType(get_member_id(id, 0x2418C), "char[24]");
	SetType(get_member_id(id, 0x241A4), "adsp_mbx_t");
	SetType(get_member_id(id, 0x24224), "char[4]");
	SetType(get_member_id(id, 0x24228), "UnkSessionStruct");
	SetType(get_member_id(id, 0x24244), "UnkSessionStruct");
	SetType(get_member_id(id, 0x24260), "AudioRenderSession[6]");
	SetType(get_member_id(id, 0x245C0), "AudioOutSession[12]");
	SetType(get_member_id(id, 0x24FE0), "char[1080]");
	SetType(get_member_id(id, 0x25418), "NearVoiceSession[2]");
	SetType(get_member_id(id, 0x25638), "GameRecordSession[4]");
	SetType(get_member_id(id, 0x25A78), "char[2][144]");
	SetType(get_member_id(id, 0x25B98), "char[144]");
	id = get_struc_id("AudioRenderSession");
	SetType(get_member_id(id, 0x0), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x20), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x50), "char[4]");
	SetType(get_member_id(id, 0x54), "UnkSessionStruct");
	SetType(get_member_id(id, 0x70), "UnkSessionStruct");
	SetType(get_member_id(id, 0x8C), "MixRender *");
	id = get_struc_id("AudioOutSession");
	SetType(get_member_id(id, 0x0), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x20), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x50), "bool");
	SetType(get_member_id(id, 0x54), "UnkSessionStruct");
	SetType(get_member_id(id, 0x70), "UnkSessionStruct");
	SetType(get_member_id(id, 0x8C), "MixOut *");
	SetType(get_member_id(id, 0x90), "SessionStruct[4]");
	id = get_struc_id("NearVoiceSession");
	SetType(get_member_id(id, 0x0), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x20), "AudioRenderSession::vftable1 *");
	SetType(get_member_id(id, 0x50), "bool");
	SetType(get_member_id(id, 0x54), "UnkSessionStruct");
	SetType(get_member_id(id, 0x70), "UnkSessionStruct");
	SetType(get_member_id(id, 0x8C), "MixNearVoice *");
	SetType(get_member_id(id, 0x90), "NearVoiceGameRecordUnkStruct");
	SetType(get_member_id(id, 0xC8), "char[72]");
	id = get_struc_id("GameRecordSession");
	SetType(get_member_id(id, 0x0), "char[272]");
	id = get_struc_id("AudioRenderSession::vftable1");
	SetType(get_member_id(id, 0x18), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x20), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x24), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x28), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x2C), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x30), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x34), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x38), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x3C), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x40), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x44), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x48), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x5C), "bool (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x60), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x64), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x68), "void (__fastcall *)(AudioRenderSession *)");
	SetType(get_member_id(id, 0x6C), "void (__fastcall *)(AudioRenderSession *)");
	id = get_struc_id("UnkSessionStruct");
	SetType(get_member_id(id, 0x0), "struct UnkSessionStruct::vtable *");
	id = get_struc_id("nn::audio::UpsampleCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x2C), "nn::audio::UpsamplerInfo *");
	id = get_struc_id("nn::audio::UpsamplerInfo");
	SetType(get_member_id(id, 0x0), "nn::audio::UpsamplerState[6]");
	SetType(get_member_id(id, 0x258), "bool");
	SetType(get_member_id(id, 0x25F), "char[33]");
	id = get_struc_id("nn::audio::UpsamplerState");
	SetType(get_member_id(id, 0x5E), "char[2]");
	id = get_struc_id("app_complete_status_message");
	SetType(get_member_id(id, 0x0), "msgq_message_t");
	SetType(get_member_id(id, 0x1), "app_complete_status_data");
	SetType(get_member_id(id, 0x2), "app_static_app_data");
	id = get_struc_id("msgq_message_t");
	id = get_struc_id("app_complete_status_data");
	SetType(get_member_id(id, 0x0), "adsp_os_message_header");
	id = get_struc_id("adsp_os_message_header");
	id = get_struc_id("app_static_app_data");
	SetType(get_member_id(id, 0x0), "adsp_os_message_header");
	SetType(get_member_id(id, 0x8), "adsp_shared_app");
	id = get_struc_id("adsp_shared_app");
	SetType(get_member_id(id, 0x0), "unsigned __int8[128]");
	SetType(get_member_id(id, 0x80), "app_mem_size");
	SetType(get_member_id(id, 0xBC), "unsigned __int8[16]");
	id = get_struc_id("app_mem_size");
	id = get_struc_id("app_loader_message");
	SetType(get_member_id(id, 0x0), "msgq_message_t");
	SetType(get_member_id(id, 0x1), "app_loader_data");
	id = get_struc_id("app_loader_data");
	SetType(get_member_id(id, 0x4), "run_app_instance_data");
	id = get_struc_id("run_app_instance_data");
	SetType(get_member_id(id, 0x2C), "app_mem_size");
	SetType(get_member_id(id, 0x54), "adsp_app_args_t");
	id = get_struc_id("adsp_app_args_t");
	id = get_struc_id("semaphore_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "wait_queue_t");
	SetType(get_member_id(id, 0x18), "child_queue_t");
	id = get_struc_id("wait_queue_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0xC), "int");
	id = get_struc_id("list_node");
	SetType(get_member_id(id, 0x0), "list_node *");
	SetType(get_member_id(id, 0x4), "list_node *");
	id = get_struc_id("child_queue_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0xC), "int");
	id = get_struc_id("some_sporadic_work");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x8), "semaphore_t *");
	SetType(get_member_id(id, 0x30), "thread_t *");
	SetType(get_member_id(id, 0x34), "timer_t *");
	SetType(get_member_id(id, 0x40), "bool");
	SetType(get_member_id(id, 0x41), "bool");
	id = get_struc_id("comp_event_elem_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "event_t *");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "comp_eve_elem_type_t");
	SetType(get_member_id(id, 0x10), "list_node");
	id = get_struc_id("comp_event_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0xC), "event_t");
	SetType(get_member_id(id, 0x38), "comp_event_elem_t *");
	id = get_struc_id("event_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0xC), "wait_queue_t");
	SetType(get_member_id(id, 0x1C), "child_queue_t");
	id = get_struc_id("sync_object_t");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "comp_eve_elem_type_t");
	id = get_struc_id("ce_thread_args_t");
	SetType(get_member_id(id, 0x0), "unsigned __int8 *");
	SetType(get_member_id(id, 0x8), "sync_object_t *");
	id = get_struc_id("mutex_t");
	SetType(get_member_id(id, 0x4), "thread_t *");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "wait_queue_t");
	id = get_struc_id("sched_arg_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x18), "sched_policy");
	id = get_struc_id("timer_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0x24), "void *");
	id = get_struc_id("thread_stats");
	SetType(get_member_id(id, 0x38), "int");
	SetType(get_member_id(id, 0x3C), "int");
	SetType(get_member_id(id, 0x40), "int");
	SetType(get_member_id(id, 0x44), "int");
	SetType(get_member_id(id, 0x48), "int");
	SetType(get_member_id(id, 0x4C), "int");
	SetType(get_member_id(id, 0x50), "int");
	SetType(get_member_id(id, 0x54), "int");
	SetType(get_member_id(id, 0x58), "int");
	SetType(get_member_id(id, 0x5C), "int");
	SetType(get_member_id(id, 0x60), "int");
	SetType(get_member_id(id, 0x64), "int");
	id = get_struc_id("uint8x16_t_0");
	SetType(get_member_id(id, 0x0), "unsigned __int64[2]");
	SetType(get_member_id(id, 0x1), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x2), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x3), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x4), "__int64[2]");
	SetType(get_member_id(id, 0x5), "__int32[4]");
	SetType(get_member_id(id, 0x6), "__int16[8]");
	SetType(get_member_id(id, 0x7), "__int8[16]");
	SetType(get_member_id(id, 0x8), "float[4]");
	SetType(get_member_id(id, 0x9), "double[2]");
	id = get_struc_id("pmu_events_t");
	id = get_struc_id("test_cmd_args");
	SetType(get_member_id(id, 0x0), "int");
	id = get_struc_id("line_read_struct");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "unsigned __int8 *");
	id = get_struc_id("va_list");
	SetType(get_member_id(id, 0x0), "void *");
	id = get_struc_id("_output_args");
	SetType(get_member_id(id, 0x0), "unsigned __int8 *");
	id = get_struc_id("adsp_shared_mem");
	SetType(get_member_id(id, 0x0), "adsp_app_shared_msg_pool");
	id = get_struc_id("adsp_app_shared_msg_pool");
	SetType(get_member_id(id, 0x0), "app_loader_msgq");
	SetType(get_member_id(id, 0x1000), "app_loader_msgq");
	id = get_struc_id("app_loader_msgq");
	SetType(get_member_id(id, 0x0), "msgq_t");
	SetType(get_member_id(id, 0x1), "app_pool_thing");
	id = get_struc_id("msgq_t");
	id = get_struc_id("$78A6DB0EEAF2F7AED7EA0C7FB7CC5BA8");
	id = get_struc_id("adsp_os_args");
	SetType(get_member_id(id, 0x4), "unsigned __int8[4028]");
	SetType(get_member_id(id, 0xFC4), "_BYTE[4]");
	SetType(get_member_id(id, 0xFD0), "unsigned __int8[120]");
	id = get_struc_id("mbox_t");
	SetType(get_member_id(id, 0x48), "semaphore_t");
	SetType(get_member_id(id, 0x70), "semaphore_t *");
	SetType(get_member_id(id, 0x7C), "void *");
	id = get_struc_id("int_handler_struct");
	SetType(get_member_id(id, 0x4), "void *");
	id = get_struc_id("int_gic_data");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0xC), "bool");
	SetType(get_member_id(id, 0xD), "bool");
	id = get_struc_id("cmd");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0x4), "const unsigned __int8 *");
	SetType(get_member_id(id, 0x8), "const int");
	id = get_struc_id("cbuf_t");
	SetType(get_member_id(id, 0xC), "unsigned __int8 *");
	SetType(get_member_id(id, 0x10), "event_t");
	id = get_struc_id("adsp_mbx_t");
	SetType(get_member_id(id, 0x48), "semaphore_t");
	SetType(get_member_id(id, 0x70), "semaphore_t *");
	SetType(get_member_id(id, 0x7C), "void *");
	id = get_struc_id("cmd_block");
	SetType(get_member_id(id, 0x8), "const cmd *");
	id = get_struc_id("adsp_hw_mbx_t");
	SetType(get_member_id(id, 0x101C), "semaphore_t");
	SetType(get_member_id(id, 0x1044), "wait_queue_t");
	id = get_struc_id("mailbox_attributes");
	id = get_struc_id("outer_cache_fns");
	SetType(get_member_id(id, 0x0), "void (*)(void)");
	SetType(get_member_id(id, 0x8), "void (*)(void)");
	SetType(get_member_id(id, 0x10), "void (*)(void)");
	SetType(get_member_id(id, 0x18), "void (*)(void)");
	SetType(get_member_id(id, 0x1C), "void (*)(void)");
	SetType(get_member_id(id, 0x20), "void (*)(void)");
	id = get_struc_id("private_struct");
	SetType(get_member_id(id, 0x0), "msgq_t *");
	SetType(get_member_id(id, 0x4), "msgq_t *");
	SetType(get_member_id(id, 0x8), "mbox_t");
	id = get_struc_id("app_descriptor");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0xC), "unsigned int");
	id = get_struc_id("some_rt_args");
	SetType(get_member_id(id, 0x8), "test_entry_params");
	SetType(get_member_id(id, 0x78), "bool");
	SetType(get_member_id(id, 0x7C), "event_t *");
	SetType(get_member_id(id, 0x80), "timer_t");
	id = get_struc_id("test_entry_params");
	SetType(get_member_id(id, 0x10), "sched_arg_t");
	id = get_struc_id("test_case");
	SetType(get_member_id(id, 0xC), "test_entry_params *");
	id = get_struc_id("test_suite");
	SetType(get_member_id(id, 0x4), "test_case *");
	id = get_struc_id("thread_t");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0xC), "list_node");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "thread_state");
	SetType(get_member_id(id, 0x1C), "int");
	SetType(get_member_id(id, 0x20), "int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "wait_queue *");
	SetType(get_member_id(id, 0x30), "arch_thread");
	SetType(get_member_id(id, 0x38), "void *");
	SetType(get_member_id(id, 0x44), "void *");
	SetType(get_member_id(id, 0x48), "int");
	SetType(get_member_id(id, 0x4C), "wait_queue");
	SetType(get_member_id(id, 0x5C), "unsigned __int8[32]");
	SetType(get_member_id(id, 0x7C), "sched_policy");
	SetType(get_member_id(id, 0x80), "sched_edf_t");
	id = get_struc_id("arch_thread");
	SetType(get_member_id(id, 0x4), "fpctx_t *");
	id = get_struc_id("wait_queue");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "list_node");
	SetType(get_member_id(id, 0xC), "int");
	id = get_struc_id("sched_edf_t");
	SetType(get_member_id(id, 0x20), "bool");
	SetType(get_member_id(id, 0x21), "bool");
	SetType(get_member_id(id, 0x22), "bool");
	SetType(get_member_id(id, 0x23), "bool");
	SetType(get_member_id(id, 0x24), "bool");
	SetType(get_member_id(id, 0x38), "timer_t");
	SetType(get_member_id(id, 0x60), "btree_t");
	id = get_struc_id("btree_t");
	id = get_struc_id("FILE_0");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "int (__fastcall *)(void *, int)");
	SetType(get_member_id(id, 0x8), "int (__fastcall *)(void *, const unsigned __int8 *)");
	SetType(get_member_id(id, 0xC), "int (__fastcall *)(void *)");
	SetType(get_member_id(id, 0x10), "int (__fastcall *)(void *, const unsigned __int8 *, va_list)");
	id = get_struc_id("heap");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x10), "mutex_t");
	SetType(get_member_id(id, 0x2C), "list_node");
	SetType(get_member_id(id, 0x34), "list_node");
	id = get_struc_id("adsp_app_descriptor");
	SetType(get_member_id(id, 0x0), "const unsigned __int8 *");
	SetType(get_member_id(id, 0xC), "adsp_app_mem_t");
	SetType(get_member_id(id, 0x28), "app_mem_size");
	SetType(get_member_id(id, 0x50), "const adsp_app_args_t *");
	SetType(get_member_id(id, 0x54), "unsigned int");
	SetType(get_member_id(id, 0x5C), "const void *");
	SetType(get_member_id(id, 0x60), "const int");
	id = get_struc_id("adsp_app_mem_t");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x14), "void *");
	id = get_struc_id("nn::audio::ReverbCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x2C), "nn::audio::ReverbParameter");
	SetType(get_member_id(id, 0x78), "bool");
	SetType(get_member_id(id, 0x79), "bool");
	SetType(get_member_id(id, 0x7A), "char[6]");
	id = get_struc_id("nn::audio::ReverbParameter");
	id = get_struc_id("nn::audio::ReverbState");
	SetType(get_member_id(id, 0x0), "nn::audio::DelayLine");
	SetType(get_member_id(id, 0x18), "nn::audio::DelayLine");
	SetType(get_member_id(id, 0x30), "int[10]");
	SetType(get_member_id(id, 0x58), "int[10]");
	SetType(get_member_id(id, 0x80), "int");
	SetType(get_member_id(id, 0x84), "nn::audio::DelayLine[4]");
	SetType(get_member_id(id, 0xE4), "nn::audio::DelayLine[4]");
	SetType(get_member_id(id, 0x144), "int[4]");
	SetType(get_member_id(id, 0x154), "int[4]");
	SetType(get_member_id(id, 0x164), "int[4]");
	SetType(get_member_id(id, 0x174), "char[204]");
	id = get_struc_id("nn::audio::AuxCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x34), "bool");
	id = get_struc_id("nn::audio::AuxInfoDsp");
	SetType(get_member_id(id, 0x10), "char[48]");
	id = get_struc_id("nn::audio::CaptureCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x2C), "bool");
	id = get_struc_id("nn::audio::AuxBufferInfo");
	SetType(get_member_id(id, 0x0), "nn::audio::AuxInfoDsp");
	SetType(get_member_id(id, 0x40), "nn::audio::AuxInfoDsp");
	id = get_struc_id("nn::audio::I3dl2ReverbParameter");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x49), "char[3]");
	id = get_struc_id("nn::audio::I3dl2ReverbCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x2C), "nn::audio::I3dl2ReverbParameter");
	SetType(get_member_id(id, 0x80), "bool");
	id = get_struc_id("nn::audio::I3dl2ReverbState");
	SetType(get_member_id(id, 0xC), "nn::audio::I3dl2DelayLine");
	SetType(get_member_id(id, 0x84), "nn::audio::I3dl2DelayLine[4]");
	SetType(get_member_id(id, 0xF4), "nn::audio::I3dl2DelayLine[4]");
	SetType(get_member_id(id, 0x164), "nn::audio::I3dl2DelayLine[4]");
	SetType(get_member_id(id, 0x1D8), "nn::audio::I3dl2DelayLine");
	SetType(get_member_id(id, 0x238), "char[328]");
	id = get_struc_id("nn::audio::I3dl2DelayLine");
	id = get_struc_id("SessionBase");
	SetType(get_member_id(id, 0x0), "struct SessionBase::vtable *");
	SetType(get_member_id(id, 0x4), "char[12]");
	id = get_struc_id("gMixData");
	SetType(get_member_id(id, 0x0), "MessageQueue");
	SetType(get_member_id(id, 0x800), "MessageQueue");
	SetType(get_member_id(id, 0x1000), "MixRender[6]");
	SetType(get_member_id(id, 0x2B060), "MixOut[12]");
	SetType(get_member_id(id, 0x2B180), "char[2][24]");
	SetType(get_member_id(id, 0x2B1B0), "char[3][24]");
	SetType(get_member_id(id, 0x2B1F8), "MixNearVoice[2]");
	SetType(get_member_id(id, 0x2B238), "char[4][32]");
	SetType(get_member_id(id, 0x2B2B8), "char[2304]");
	SetType(get_member_id(id, 0x2BBB8), "char[16]");
	SetType(get_member_id(id, 0x2BBC8), "char[6144]");
	SetType(get_member_id(id, 0x2D3C8), "char[16]");
	SetType(get_member_id(id, 0x2D3D8), "char[6400]");
	SetType(get_member_id(id, 0x2ECD8), "char[16]");
	SetType(get_member_id(id, 0x2ECFC), "char[4]");
	SetType(get_member_id(id, 0x2ED00), "char[184]");
	id = get_struc_id("MessageQueue");
	SetType(get_member_id(id, 0x0), "msgq_t");
	SetType(get_member_id(id, 0x10), "char[2032]");
	id = get_struc_id("fpctx_t");
	SetType(get_member_id(id, 0x10C), "bool");
	id = get_struc_id("app_pool_thing");
	id = get_struc_id("adsp_os_info");
	SetType(get_member_id(id, 0x0), "unsigned __int8[32]");
	SetType(get_member_id(id, 0x20), "unsigned __int8[128]");
	id = get_struc_id("exception_context");
	SetType(get_member_id(id, 0x0), "arm_fault_frame_shared");
	SetType(get_member_id(id, 0x44), "arm_mode_regs_shared");
	id = get_struc_id("arm_fault_frame_shared");
	id = get_struc_id("arm_mode_regs_shared");
	id = get_struc_id("interrupt_profile_stat");
	id = get_struc_id("gMixRender");
	SetType(get_member_id(id, 0x0), "char[24576]");
	SetType(get_member_id(id, 0x6000), "char[4112]");
	id = get_struc_id("gMixOut");
	SetType(get_member_id(id, 0x0), "char[24]");
	id = get_struc_id("MixRender");
	SetType(get_member_id(id, 0x0), "char[24576]");
	SetType(get_member_id(id, 0x6000), "char[4096]");
	SetType(get_member_id(id, 0x7004), "char[4]");
	id = get_struc_id("MixOut");
	SetType(get_member_id(id, 0xC), "char[4]");
	id = get_struc_id("SessionStruct");
	SetType(get_member_id(id, 0x0), "char[4]");
	id = get_struc_id("NearVoice");
	SetType(get_member_id(id, 0x0), "char[32]");
	id = get_struc_id("MixNearVoice");
	SetType(get_member_id(id, 0x0), "char[8]");
	SetType(get_member_id(id, 0xC), "char[12]");
	id = get_struc_id("NearVoiceGameRecordUnkStruct");
	SetType(get_member_id(id, 0x34), "bool");
	SetType(get_member_id(id, 0x35), "bool");
	SetType(get_member_id(id, 0x36), "char[2]");
	id = get_struc_id("nn::audio::PcmInt16DataSourceCommandVersion1");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x11), "char[3]");
	SetType(get_member_id(id, 0x28), "nn::audio::WaveBuffer[4]");
	id = get_struc_id("nn::audio::DepopForMixBuffersCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	id = get_struc_id("nn::audio::MixRampGroupedCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[3]");
	id = get_struc_id("nn::audio::CompressorParameter");
	SetType(get_member_id(id, 0x0), "s8[6]");
	SetType(get_member_id(id, 0x6), "s8[6]");
	SetType(get_member_id(id, 0xC), "s16");
	SetType(get_member_id(id, 0xE), "s16");
	SetType(get_member_id(id, 0x10), "s32");
	SetType(get_member_id(id, 0x14), "f32");
	SetType(get_member_id(id, 0x18), "f32");
	SetType(get_member_id(id, 0x1C), "s32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "f32");
	SetType(get_member_id(id, 0x28), "f32");
	SetType(get_member_id(id, 0x2C), "f32");
	SetType(get_member_id(id, 0x30), "f32");
	SetType(get_member_id(id, 0x34), "u8");
	SetType(get_member_id(id, 0x35), "bool");
	id = get_struc_id("nn::audio::CompressorState");
	SetType(get_member_id(id, 0x0), "f32");
	SetType(get_member_id(id, 0x4), "f32");
	SetType(get_member_id(id, 0x8), "f32");
	SetType(get_member_id(id, 0xC), "f32");
	SetType(get_member_id(id, 0x10), "f32");
	SetType(get_member_id(id, 0x14), "f32");
	SetType(get_member_id(id, 0x18), "s32");
	SetType(get_member_id(id, 0x1C), "f32");
	SetType(get_member_id(id, 0x20), "s32");
	SetType(get_member_id(id, 0x24), "char[28]");
	id = get_struc_id("nn::audio::CompressorCommand");
	SetType(get_member_id(id, 0x0), "nn::audio::ICommand");
	SetType(get_member_id(id, 0x10), "char[4]");
	SetType(get_member_id(id, 0x14), "s16[6]");
	SetType(get_member_id(id, 0x20), "s16[6]");
	SetType(get_member_id(id, 0x2C), "nn::audio::CompressorParameter");
	SetType(get_member_id(id, 0x64), "u32");
	SetType(get_member_id(id, 0x68), "bool");
	SetType(get_member_id(id, 0x69), "char[3]");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"float32x4_t",1);
	id = add_struc(-1,"int32x4_t",1);
	id = add_struc(-1,"int8x8_t",1);
	id = add_struc(-1,"float32x2_t",1);
	id = add_struc(-1,"nn::audio::dsp::Command",0);
	id = add_struc(-1,"__n64",1);
	id = add_struc(-1,"__n128",1);
	id = add_struc(-1,"uint8x8_t",1);
	id = add_struc(-1,"int16x4_t",1);
	id = add_struc(-1,"int32x2_t",1);
	id = add_struc(-1,"uint16x4_t",1);
	id = add_struc(-1,"uint32x2_t",1);
	id = add_struc(-1,"int8x16_t",1);
	id = add_struc(-1,"int16x8_t",1);
	id = add_struc(-1,"int64x2_t",1);
	id = add_struc(-1,"uint8x16_t",1);
	id = add_struc(-1,"uint16x8_t",1);
	id = add_struc(-1,"uint32x4_t",1);
	id = add_struc(-1,"uint64x2_t",1);
	id = add_struc(-1,"poly8x8_t",1);
	id = add_struc(-1,"poly16x4_t",1);
	id = add_struc(-1,"poly16x8_t",1);
	id = add_struc(-1,"poly8x16_t",1);
	id = add_struc(-1,"float64x2_t",1);
	id = add_struc(-1,"poly128_t",1);
	id = add_struc(-1,"float32x2x2_t",0);
	id = add_struc(-1,"nn::os::ThreadType",0);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSection",0);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSectionImplByHorizon",0);
	id = add_struc(-1,"nn::os::detail::InternalConditionVariable",0);
	id = add_struc(-1,"nn::os::detail::InternalConditionVariableImplByHorizon",0);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSectionStorage",0);
	id = add_struc(-1,"nn::os::ConditionVariableType",0);
	id = add_struc(-1,"nn::os::EventType",0);
	id = add_struc(-1,"nn::os::detail::InterProcessEventType",0);
	id = add_struc(-1,"nn::os::SystemEventType::u",1);
	id = add_struc(-1,"nn::sf::NativeHandle",0);
	id = add_struc(-1,"nn::audio::ICommand",0);
	id = add_struc(-1,"nn::audio::CircularBufferSinkCommand",0);
	id = add_struc(-1,"nn::audio::dsp::CommandListProcessor",0);
	id = add_struc(-1,"MixDevice",0);
	id = add_struc(-1,"nn::audio::LightLimiterV1Command",0);
	id = add_struc(-1,"nn::audio::LightLimiterParameter",0);
	id = add_struc(-1,"nn::audio::LightLimiterState",0);
	id = add_struc(-1,"nn::audio::LightLimiterStatisticsInternal",0);
	id = add_struc(-1,"nn::audio::PerformanceCommand",0);
	id = add_struc(-1,"nn::audio::server::PerformanceEntryAddresses",0);
	id = add_struc(-1,"nn::audio::CopyMixBufferCommand",0);
	id = add_struc(-1,"nn::audio::DownMix6chTo2chCommand",0);
	id = add_struc(-1,"nn::audio::MixRampCommand",0);
	id = add_struc(-1,"nn::audio::server::VoiceState",0);
	id = add_struc(-1,"nn::codec::AdpcmContext",0);
	id = add_struc(-1,"nn::audio::dsp::DecodeFromWaveBuffersArgs",0);
	id = add_struc(-1,"nn::audio::WaveBuffer",0);
	id = add_struc(-1,"nn::audio::DataSourcePcmInt16V1Command",0);
	id = add_struc(-1,"nn::audio::server::WaveBuffer",0);
	id = add_struc(-1,"nn::audio::server::AddressInfo",0);
	id = add_struc(-1,"nn::audio::VoiceState",0);
	id = add_struc(-1,"nn::audio::WaveBufferVersion2",0);
	id = add_struc(-1,"nn::audio::dsp::DecodeArg",0);
	id = add_struc(-1,"nn::audio::PcmFloatDataSourceCommandVersion2",0);
	id = add_struc(-1,"nn::audio::AdpcmDataSourceCommandVersion2",0);
	id = add_struc(-1,"nn::audio::AdpcmDataSourceCommandVersion1",0);
	id = add_struc(-1,"nn::audio::VolumeCommand",0);
	id = add_struc(-1,"nn::audio::VolumeRampCommand",0);
	id = add_struc(-1,"nn::audio::BiquadFilterParameter",0);
	id = add_struc(-1,"nn::audio::BiquadFilterCommand",0);
	id = add_struc(-1,"nn::audio::BiquadFilterState",0);
	id = add_struc(-1,"nn::audio::MultiTapBiquadFilterCommand",0);
	id = add_struc(-1,"nn::audio::MixCommand",0);
	id = add_struc(-1,"nn::audio::DepopPrepareCommand",0);
	id = add_struc(-1,"nn::audio::DelayState",0);
	id = add_struc(-1,"nn::audio::DelayParameter",0);
	id = add_struc(-1,"nn::audio::DelayLine",0);
	id = add_struc(-1,"nn::audio::CommandListHeader",0);
	id = add_struc(-1,"nn::audio::dsp::CommandBuffer",0);
	id = add_struc(-1,"nn::audio::dsp::Buffer",0);
	id = add_struc(-1,"nn::audio::dsp::MapUnmapBuffer",0);
	id = add_struc(-1,"nn::audio::DelayCommand",0);
	id = add_struc(-1,"nn::audio::DeviceSinkCommand",0);
	id = add_struc(-1,"MixDevice::vtbl",0);
	id = add_struc(-1,"HardwareDevice",0);
	id = add_struc(-1,"SomeDevice",0);
	id = add_struc(-1,"SomeDevice::vtbl",0);
	id = add_struc(-1,"SessionRegistry",0);
	id = add_struc(-1,"AudioRenderSession",0);
	id = add_struc(-1,"AudioOutSession",0);
	id = add_struc(-1,"NearVoiceSession",0);
	id = add_struc(-1,"GameRecordSession",0);
	id = add_struc(-1,"AudioRenderSession::vftable1",0);
	id = add_struc(-1,"UnkSessionStruct",0);
	id = add_struc(-1,"nn::audio::UpsampleCommand",0);
	id = add_struc(-1,"nn::audio::UpsamplerInfo",0);
	id = add_struc(-1,"nn::audio::UpsamplerState",0);
	id = add_struc(-1,"app_complete_status_message",1);
	id = add_struc(-1,"msgq_message_t",0);
	id = add_struc(-1,"app_complete_status_data",0);
	id = add_struc(-1,"adsp_os_message_header",0);
	id = add_struc(-1,"app_static_app_data",0);
	id = add_struc(-1,"adsp_shared_app",0);
	id = add_struc(-1,"app_mem_size",0);
	id = add_struc(-1,"app_loader_message",1);
	id = add_struc(-1,"app_loader_data",0);
	id = add_struc(-1,"run_app_instance_data",0);
	id = add_struc(-1,"adsp_app_args_t",0);
	id = add_struc(-1,"semaphore_t",0);
	id = add_struc(-1,"wait_queue_t",0);
	id = add_struc(-1,"list_node",0);
	id = add_struc(-1,"child_queue_t",0);
	id = add_struc(-1,"some_sporadic_work",0);
	id = add_struc(-1,"comp_event_elem_t",0);
	id = add_struc(-1,"comp_event_t",0);
	id = add_struc(-1,"event_t",0);
	id = add_struc(-1,"sync_object_t",0);
	id = add_struc(-1,"ce_thread_args_t",0);
	id = add_struc(-1,"mutex_t",0);
	id = add_struc(-1,"sched_arg_t",0);
	id = add_struc(-1,"timer_t",0);
	id = add_struc(-1,"thread_stats",0);
	id = add_struc(-1,"uint8x16_t_0",1);
	id = add_struc(-1,"pmu_events_t",0);
	id = add_struc(-1,"test_cmd_args",0);
	id = add_struc(-1,"line_read_struct",0);
	id = add_struc(-1,"va_list",0);
	id = add_struc(-1,"_output_args",0);
	id = add_struc(-1,"adsp_shared_mem",0);
	id = add_struc(-1,"adsp_app_shared_msg_pool",0);
	id = add_struc(-1,"app_loader_msgq",1);
	id = add_struc(-1,"msgq_t",0);
	id = add_struc(-1,"$78A6DB0EEAF2F7AED7EA0C7FB7CC5BA8",0);
	id = add_struc(-1,"adsp_os_args",0);
	id = add_struc(-1,"mbox_t",0);
	id = add_struc(-1,"int_handler_struct",0);
	id = add_struc(-1,"int_gic_data",0);
	id = add_struc(-1,"cmd",0);
	id = add_struc(-1,"cbuf_t",0);
	id = add_struc(-1,"adsp_mbx_t",0);
	id = add_struc(-1,"cmd_block",0);
	id = add_struc(-1,"adsp_hw_mbx_t",0);
	id = add_struc(-1,"mailbox_attributes",0);
	id = add_struc(-1,"outer_cache_fns",0);
	id = add_struc(-1,"private_struct",0);
	id = add_struc(-1,"app_descriptor",0);
	id = add_struc(-1,"some_rt_args",0);
	id = add_struc(-1,"test_entry_params",0);
	id = add_struc(-1,"test_case",0);
	id = add_struc(-1,"test_suite",0);
	id = add_struc(-1,"thread_t",0);
	id = add_struc(-1,"arch_thread",0);
	id = add_struc(-1,"wait_queue",0);
	id = add_struc(-1,"sched_edf_t",0);
	id = add_struc(-1,"btree_t",0);
	id = add_struc(-1,"FILE_0",0);
	id = add_struc(-1,"heap",0);
	id = add_struc(-1,"adsp_app_descriptor",0);
	id = add_struc(-1,"adsp_app_mem_t",0);
	id = add_struc(-1,"nn::audio::ReverbCommand",0);
	id = add_struc(-1,"nn::audio::ReverbParameter",0);
	id = add_struc(-1,"nn::audio::ReverbState",0);
	id = add_struc(-1,"nn::audio::AuxCommand",0);
	id = add_struc(-1,"nn::audio::AuxInfoDsp",0);
	id = add_struc(-1,"nn::audio::CaptureCommand",0);
	id = add_struc(-1,"nn::audio::AuxBufferInfo",0);
	id = add_struc(-1,"nn::audio::I3dl2ReverbParameter",0);
	id = add_struc(-1,"nn::audio::I3dl2ReverbCommand",0);
	id = add_struc(-1,"nn::audio::I3dl2ReverbState",0);
	id = add_struc(-1,"nn::audio::I3dl2DelayLine",0);
	id = add_struc(-1,"SessionBase",0);
	id = add_struc(-1,"gMixData",0);
	id = add_struc(-1,"MessageQueue",0);
	id = add_struc(-1,"fpctx_t",0);
	id = add_struc(-1,"app_pool_thing",0);
	id = add_struc(-1,"adsp_os_info",0);
	id = add_struc(-1,"exception_context",0);
	id = add_struc(-1,"arm_fault_frame_shared",0);
	id = add_struc(-1,"arm_mode_regs_shared",0);
	id = add_struc(-1,"interrupt_profile_stat",0);
	id = add_struc(-1,"gMixRender",0);
	id = add_struc(-1,"gMixOut",0);
	id = add_struc(-1,"MixRender",0);
	id = add_struc(-1,"MixOut",0);
	id = add_struc(-1,"SessionStruct",0);
	id = add_struc(-1,"NearVoice",0);
	id = add_struc(-1,"MixNearVoice",0);
	id = add_struc(-1,"NearVoiceGameRecordUnkStruct",0);
	id = add_struc(-1,"nn::audio::PcmInt16DataSourceCommandVersion1",0);
	id = add_struc(-1,"nn::audio::DepopForMixBuffersCommand",0);
	id = add_struc(-1,"nn::audio::MixRampGroupedCommand",0);
	id = add_struc(-1,"nn::audio::CompressorParameter",0);
	id = add_struc(-1,"nn::audio::CompressorState",0);
	id = add_struc(-1,"nn::audio::CompressorCommand",0);
	
	id = get_struc_id("float32x4_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("int32x4_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("int8x8_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"a1",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::dsp::Command");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"type",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"size",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"estimatedProcessTime",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nodeId",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	16);
	set_struc_align(id,2);
	
	id = get_struc_id("__n64");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("__n128");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint8x8_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("int16x4_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("int32x2_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("uint16x4_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("uint32x2_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("int8x16_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("int16x8_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("int64x2_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint8x16_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint16x8_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint32x4_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("uint64x2_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("poly8x8_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("poly16x4_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("poly16x8_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("poly8x16_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("float64x2_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("poly128_t");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("float32x2_t");
	mid = add_struc_member(id,"n64_u64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_u32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_u16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_u8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_i64",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"n64_i32",	0,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"n64_i16",	0,	0x10000400,	-1,	8);
	mid = add_struc_member(id,"n64_i8",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"n64_f32",	0,	0x80000400,	-1,	8);
	mid = add_struc_member(id,"n64_f64",	0,	0x90000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("float32x2x2_t");
	mid = add_struc_member(id,"val",	0,	0x60000400,	get_struc_id("float32x2_t"),	16);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSection");
	mid = add_struc_member(id,"impl",	0,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InternalConditionVariable");
	mid = add_struc_member(id,"impl",	0,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::ThreadType");
	mid = add_struc_member(id,"field_0",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_8",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_10",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_18",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_20",	0X20,	0x000400,	-1,	32);
	mid = add_struc_member(id,"thread_status",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_41",	0X44,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_42",	0X46,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"thread_prio_shift",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread_stack_base_addr",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread_stack_base_addr_mirror",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread_stack_size",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread_param",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread_func",	0X5C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_70",	0X60,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_78",	0X68,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_80",	0X70,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_88",	0X78,	0x000400,	-1,	256);
	mid = add_struc_member(id,"thread_name",	0X178,	0x000400,	-1,	32);
	mid = add_struc_member(id,"thread_name_addr",	0X198,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"crit",	0X19C,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSection"),	4);
	mid = add_struc_member(id,"condvar",	0X1A0,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariable"),	4);
	mid = add_struc_member(id,"thread_handle",	0X1A4,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSectionStorage");
	mid = add_struc_member(id,"storage",	0,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSection"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::ConditionVariableType");
	mid = add_struc_member(id,"field_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"internal_impl",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::EventType");
	mid = add_struc_member(id,"field_0",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"field_8",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"is_signalled",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initially_signaled",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"should_autoclear",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initialized",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"signal_counter",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signal_counter_2",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"crit",	0X14,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon"),	4);
	mid = add_struc_member(id,"condvar",	0X18,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InterProcessEventType");
	mid = add_struc_member(id,"field_0",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"field_8",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk2",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initially_signaled",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"should_autoclear",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk3",	0XB,	0x000400,	-1,	1);
	mid = add_struc_member(id,"readable_handle",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writable_handle",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"crit",	0X14,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon"),	4);
	mid = add_struc_member(id,"condvar",	0X18,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::SystemEventType::u");
	mid = add_struc_member(id,"event",	0,	0x60000400,	get_struc_id("nn::os::EventType"),	28);
	mid = add_struc_member(id,"ipe",	0,	0x60000400,	get_struc_id("nn::os::detail::InterProcessEventType"),	28);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::sf::NativeHandle");
	mid = add_struc_member(id,"handle",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"valid",	0X4,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::ICommand");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"type",	0X5,	0x8800400,	get_enum("nn::audio::CommandType"),	1);
	mid = add_struc_member(id,"size",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"estimatedProcessTime",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nodeId",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CircularBufferSinkCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"input",	0X18,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"address",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pos",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk30",	0X30,	0x000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::dsp::CommandListProcessor");
	mid = add_struc_member(id,"workBufferHeader",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"workBufferCommands",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"workBufferCommandsSize",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"maxProcessTime",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"commandCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"targetSampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mixBuffers",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"bufferCount",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"processedCommandCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startTime",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"currentProcessTime",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"endTime",	0X38,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("MixDevice");
	mid = add_struc_member(id,"hardwareDevice",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"name",	0X4,	0x000400,	-1,	256);
	mid = add_struc_member(id,"sessionId",	0X104,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::LightLimiterParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"channelCountMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"channelCount",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lookAheadTimeMax",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"attackTime",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"releaseTime",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lookAheadTime",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"attackCoeff",	0X24,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"releaseCoeff",	0X28,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"limitThreshold",	0X2C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"inputGain",	0X30,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"outputGain",	0X34,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lookAheadSamplesMin",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lookAheadSamplesMax",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"statisticsEnabled",	0X41,	0x000400,	-1,	1);
	mid = add_struc_member(id,"statisticsResetRequired",	0X42,	0x000400,	-1,	1);
	mid = add_struc_member(id,"processingMode",	0X43,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::LightLimiterV1Command");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"inputOffsets",	0X10,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputOffsets",	0X1C,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"param",	0X28,	0x60000400,	get_struc_id("nn::audio::LightLimiterParameter"),	68);
	mid = add_struc_member(id,"dspStateBuffer",	0X6C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspWorkBuffer",	0X70,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X74,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::LightLimiterState");
	mid = add_struc_member(id,"detectorAverage",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"compressionGain",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lookAheadSampleBuffers",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lookAheadSampleOffsets",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk20",	0X10,	0x000400,	-1,	32);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::LightLimiterStatisticsInternal");
	mid = add_struc_member(id,"channelMaxSample",	0,	0x80000400,	-1,	24);
	mid = add_struc_member(id,"channelCompressionGainMin",	0X18,	0x80000400,	-1,	24);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::server::PerformanceEntryAddresses");
	mid = add_struc_member(id,"translatedAddr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"entryStartTimeOffset",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"headerEntryCountOffset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"entryProcessingTimeOffset",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::PerformanceCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"type",	0X14,	0x28800400,	get_enum("nn::audio::PerformanceEntryType"),	4);
	mid = add_struc_member(id,"performanceEntryAddress",	0X18,	0x60000400,	get_struc_id("nn::audio::server::PerformanceEntryAddresses"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CopyMixBufferCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DownMix6chTo2chCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"downMixCoeff",	0X2C,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"unk3C",	0X3C,	0x000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::MixRampCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"prevVolume",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"currentVolume",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lastSamplePtr",	0X20,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::codec::AdpcmContext");
	mid = add_struc_member(id,"header",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"yn1",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"yn2",	0X4,	0x10000400,	-1,	2);
	set_struc_align(id,1);
	
	id = get_struc_id("nn::audio::server::VoiceState");
	mid = add_struc_member(id,"playedSampleCount",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"offset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferIndex",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferValid",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferConsumed",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleHistory",	0X18,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"fraction",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk2C",	0X2C,	0x000400,	-1,	4);
	mid = add_struc_member(id,"adpcmContext",	0X30,	0x60000400,	get_struc_id("nn::codec::AdpcmContext"),	6);
	mid = add_struc_member(id,"pad36",	0X36,	0x000400,	-1,	2);
	mid = add_struc_member(id,"adpcmCoeff",	0X38,	0x10000400,	-1,	32);
	mid = add_struc_member(id,"unk58",	0X58,	0x000400,	-1,	8);
	mid = add_struc_member(id,"biquadState",	0X60,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"unk70",	0X70,	0x000400,	-1,	16);
	mid = add_struc_member(id,"previousSamples",	0X80,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"externalContextSize",	0XE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"externalContextUsed",	0XE4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"voiceDropped",	0XE5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"loopCount",	0XE8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_EC",	0XEC,	0x000400,	-1,	20);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::dsp::DecodeFromWaveBuffersArgs");
	mid = add_struc_member(id,"sampleFormat",	0,	0x28800400,	get_enum("nn::audio::SampleFormat"),	4);
	mid = add_struc_member(id,"output",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"voiceState",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"waveBuffer",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"channel",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"srcQuality",	0X18,	0x28800400,	get_enum("VoiceType::SrcQuality"),	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sourceSampleRate",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"targetSampleRate",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataAddress",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IsVoicePlayedSampleCountResetAtLoopPointSupported",	0X30,	0x000400,	-1,	1);
	mid = add_struc_member(id,"IsVoicePitchAndSrcSkippedSupported",	0X31,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::WaveBuffer");
	mid = add_struc_member(id,"dspBuffer",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startOffset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"endOffset",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loop",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"streamEnded",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"dspContext",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"contextSize",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DataSourcePcmInt16V1Command");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelIndex",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X28,	0x60000400,	get_struc_id("nn::audio::WaveBuffer"),	112);
	mid = add_struc_member(id,"dspVoiceState",	0X98,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::server::AddressInfo");
	mid = add_struc_member(id,"cpuAddress",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"size",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"memoryPoolInfo",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dspAddress",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::server::WaveBuffer");
	mid = add_struc_member(id,"bufferAddress",	0,	0x60000400,	get_struc_id("nn::audio::server::AddressInfo"),	24);
	mid = add_struc_member(id,"contextAddress",	0X18,	0x60000400,	get_struc_id("nn::audio::server::AddressInfo"),	24);
	mid = add_struc_member(id,"startOffset",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"endOffset",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loop",	0X38,	0x000400,	-1,	1);
	mid = add_struc_member(id,"streamEnded",	0X39,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sentToDSP",	0X3A,	0x000400,	-1,	1);
	mid = add_struc_member(id,"loopStartOffset",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopEndOffset",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopCount",	0X44,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::VoiceState");
	mid = add_struc_member(id,"playedSampleCount",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"offset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferIndex",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferValid",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"waveBufferConsumed",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleHistory",	0X18,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"fraction",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk2C",	0X2C,	0x000400,	-1,	4);
	mid = add_struc_member(id,"adpcmContext",	0X30,	0x60000400,	get_struc_id("nn::codec::AdpcmContext"),	6);
	mid = add_struc_member(id,"pad36",	0X36,	0x000400,	-1,	2);
	mid = add_struc_member(id,"adpcmCoeff",	0X38,	0x10000400,	-1,	32);
	mid = add_struc_member(id,"unk58",	0X58,	0x000400,	-1,	8);
	mid = add_struc_member(id,"biquadState",	0X60,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"unk70",	0X70,	0x000400,	-1,	16);
	mid = add_struc_member(id,"previousSamples",	0X80,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"externalContextSize",	0XE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"externalContextUsed",	0XE4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"voiceDropped",	0XE5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_E8",	0XE6,	0x000400,	-1,	4);
	mid = add_struc_member(id,"loopCount",	0XEC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_F0",	0XF0,	0x000400,	-1,	16);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::dsp::DecodeArg");
	mid = add_struc_member(id,"dspBuffer",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startOffset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"endOffset",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"coefficients",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"adpcmContext",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"channel",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"offset",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"samplesToRead",	0X24,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::WaveBufferVersion2");
	mid = add_struc_member(id,"dspBuffer",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspContext",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"contextSize",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"startOffset",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"endOffset",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopStartOffset",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopEndOffset",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loopCount",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"loop",	0X24,	0x000400,	-1,	1);
	mid = add_struc_member(id,"streamEnded",	0X25,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::PcmFloatDataSourceCommandVersion2");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad11",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelIndex",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X28,	0x60000400,	get_struc_id("nn::audio::WaveBufferVersion2"),	160);
	mid = add_struc_member(id,"dspVoiceState",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"padCC",	0XCC,	0x000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AdpcmDataSourceCommandVersion2");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad11",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelIndex",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X28,	0x60000400,	get_struc_id("nn::audio::WaveBufferVersion2"),	160);
	mid = add_struc_member(id,"dspVoiceState",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspDataAddress",	0XCC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AdpcmDataSourceCommandVersion1");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad11",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X20,	0x60000400,	get_struc_id("nn::audio::WaveBuffer"),	112);
	mid = add_struc_member(id,"dspVoiceState",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspDataAddress",	0X94,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::VolumeCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"volume",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::VolumeRampCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"prevVolume",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"currentVolume",	0X1C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::BiquadFilterParameter");
	mid = add_struc_member(id,"enabled",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"feedForward",	0X2,	0x10000400,	-1,	6);
	mid = add_struc_member(id,"feedBack",	0X8,	0x10000400,	-1,	4);
	set_struc_align(id,1);
	
	id = get_struc_id("nn::audio::BiquadFilterCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"feedForward",	0X18,	0x10000400,	-1,	6);
	mid = add_struc_member(id,"feedBack",	0X1E,	0x10000400,	-1,	4);
	mid = add_struc_member(id,"dspState",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"needsInit",	0X28,	0x000400,	-1,	1);
	mid = add_struc_member(id,"useFloatProcessing",	0X29,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad2A",	0X2A,	0x000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::BiquadFilterState");
	mid = add_struc_member(id,"_s0",	0,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"_s1",	0X4,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"_s2",	0X8,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"_s3",	0XC,	0x80000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::MultiTapBiquadFilterCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"outputIndex",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"unk18",	0X18,	0x000400,	-1,	2);
	mid = add_struc_member(id,"biquad1b",	0X1A,	0x10000400,	-1,	6);
	mid = add_struc_member(id,"biquad2b",	0X20,	0x10000400,	-1,	6);
	mid = add_struc_member(id,"biquad1a",	0X26,	0x10000400,	-1,	4);
	mid = add_struc_member(id,"biquad2a",	0X2A,	0x10000400,	-1,	4);
	mid = add_struc_member(id,"dspState1",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspState2",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"biquad1Disabled",	0X38,	0x000400,	-1,	1);
	mid = add_struc_member(id,"biquad2Disabled",	0X39,	0x000400,	-1,	1);
	mid = add_struc_member(id,"filterTapCount",	0X3A,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::MixCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"input",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"output",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"volume",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DepopPrepareCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"mixBufferIndexes",	0X14,	0x10000400,	-1,	48);
	mid = add_struc_member(id,"dspResultState",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferCount",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspDepopBuffer",	0X4C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DelayLine");
	mid = add_struc_member(id,"sampleCountMax",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferStart",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferEnd",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferCurrent",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decayRate",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DelayState");
	mid = add_struc_member(id,"unk000",	0,	0x000400,	-1,	32);
	mid = add_struc_member(id,"delayLines",	0X20,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	144);
	mid = add_struc_member(id,"feedbackGain",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"delayFeedbackGain",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassCrossGain",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassGain",	0XBC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassFeedbackGain",	0XC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassZ",	0XC4,	0x20000400,	-1,	24);
	mid = add_struc_member(id,"unk0C8",	0XDC,	0x000400,	-1,	120);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CommandListHeader");
	mid = add_struc_member(id,"bufferPos",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"commandCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"translatedSamplesBuffer",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferCount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleRate",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::dsp::CommandBuffer");
	mid = add_struc_member(id,"listHeader",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"commandBufferSize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timeLimit",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"remainingCommandCount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"resetBuffers",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"resourceUserId",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"renderTimeTaken",	0X20,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::dsp::MapUnmapBuffer");
	mid = add_struc_member(id,"addr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::dsp::Buffer");
	mid = add_struc_member(id,"cmdBuffer1",	0,	0x60000400,	get_struc_id("nn::audio::dsp::CommandBuffer"),	40);
	mid = add_struc_member(id,"cmdBuffer2",	0X28,	0x60000400,	get_struc_id("nn::audio::dsp::CommandBuffer"),	40);
	mid = add_struc_member(id,"mapUnmapBuffer",	0X50,	0x60000400,	get_struc_id("nn::audio::dsp::MapUnmapBuffer"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::DelayParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"numChannelsMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"numChannels",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"delayTimeMax",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"delayTime",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inGain",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"feedbackGain",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wetGain",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dryGain",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelSpread",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lowPassAmount",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X34,	0x28800400,	get_enum("ParameterState"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DelayCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"param",	0X2C,	0x60000400,	get_struc_id("nn::audio::DelayParameter"),	56);
	mid = add_struc_member(id,"dspStateBuffer",	0X64,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspWorkBuffer",	0X68,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X6C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad6D",	0X6D,	0x000400,	-1,	3);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DeviceSinkCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"name",	0X14,	0x000400,	-1,	256);
	mid = add_struc_member(id,"sessionId",	0X114,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspSampleBuffer",	0X118,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inputCount",	0X11C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X120,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"unk12C",	0X12C,	0x000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("MixDevice::vtbl");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	28);
	mid = add_struc_member(id,"ChannelCount",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetBuffers",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("HardwareDevice");
	mid = add_struc_member(id,"renderSession",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"state",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ringBufferBase",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ringBufferSize",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hardwareReadPosition",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ringBufferPos",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hardwareQueuedBytes",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleBuffer",	0X20,	0x10000400,	-1,	4096);
	set_struc_align(id,2);
	
	id = get_struc_id("SomeDevice");
	mid = add_struc_member(id,"__vftable",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_04",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("SomeDevice::vtbl");
	mid = add_struc_member(id,"GetRingBuffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_04",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetRingBufferSize",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	32);
	mid = add_struc_member(id,"unk_30",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_34",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk38",	0X38,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk_3C",	0X3C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_40",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("UnkSessionStruct");
	mid = add_struc_member(id,"__vftable",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_04",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("AudioRenderSession");
	mid = add_struc_member(id,"__vftable1",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"refCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__vftable2",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ringBufferBase",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataOffset2",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"totalBuffersByteSize",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_34",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writePosition",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_40",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_44",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_48",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"suspended",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk50",	0X50,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk_54",	0X54,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"unk_70",	0X70,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"mixRender",	0X8C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("SessionStruct");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	4);
	mid = add_struc_member(id,"addr1",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"addr2",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("AudioOutSession");
	mid = add_struc_member(id,"__vftable1",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"refCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__vftable2",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dataOffset",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataOffset2",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"totalBuffersByteSize",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writePosition",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_40",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_44",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_48",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"suspended",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flushBuffers",	0X50,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_54",	0X54,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"unk_70",	0X70,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"mixOut",	0X8C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"subStruct",	0X90,	0x60000400,	get_struc_id("SessionStruct"),	64);
	mid = add_struc_member(id,"subStructCount",	0XD0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_D4",	0XD4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("NearVoiceGameRecordUnkStruct");
	mid = add_struc_member(id,"audioBuffer0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"audioBuffer1",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"audioBuffer1_2",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataSizeBytes",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"frameCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataSizeBytes2",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readAddress",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferOffset",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"remainingBufferSize",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"numFramesRemaining",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sizeBytesTotal",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"frameSize",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"isNew",	0X34,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_35",	0X35,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad",	0X36,	0x000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("NearVoiceSession");
	mid = add_struc_member(id,"__vftable1",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"refCount",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__vftable2",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dataOffset",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataOffset2",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"totalBuffersByteSize",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferSize",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sampleCount",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writePosition",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_40",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_44",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_48",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"suspended",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flushBuffers",	0X50,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_54",	0X54,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"unk_70",	0X70,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"mixNearVoice",	0X8C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk_90",	0X90,	0x60000400,	get_struc_id("NearVoiceGameRecordUnkStruct"),	56);
	mid = add_struc_member(id,"unkC8",	0XC8,	0x000400,	-1,	72);
	set_struc_align(id,2);
	
	id = get_struc_id("GameRecordSession");
	mid = add_struc_member(id,"unk000",	0,	0x000400,	-1,	272);
	
	id = get_struc_id("list_node");
	mid = add_struc_member(id,"prev",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"next",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("wait_queue_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"list",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"count",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("child_queue_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"list",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"count",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("semaphore_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait",	0X8,	0x60000400,	get_struc_id("wait_queue_t"),	16);
	mid = add_struc_member(id,"child",	0X18,	0x60000400,	get_struc_id("child_queue_t"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("timer_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"node",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"scheduled_time",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"periodic_time",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"callback",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"arg",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,3);
	
	id = get_struc_id("adsp_mbx_t");
	mid = add_struc_member(id,"rcv_buffer",	0,	0x20000400,	-1,	64);
	mid = add_struc_member(id,"rcv_rd_idx",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"rcv_wr_idx",	0X41,	0x000400,	-1,	1);
	mid = add_struc_member(id,"count",	0X42,	0x000400,	-1,	1);
	mid = add_struc_member(id,"mbx_id",	0X44,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"err_code",	0X46,	0x000400,	-1,	1);
	mid = add_struc_member(id,"s",	0X48,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"rcv_sem",	0X70,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"err_handler",	0X74,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"msg_handler",	0X78,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"context",	0X7C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("SessionRegistry");
	mid = add_struc_member(id,"unk00000",	0,	0x000400,	-1,	4);
	mid = add_struc_member(id,"stopFlag",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk00005",	0X5,	0x000400,	-1,	3);
	mid = add_struc_member(id,"unk00008",	0X8,	0x000400,	-1,	184);
	mid = add_struc_member(id,"unk000C0",	0XC0,	0x000400,	-1,	147456);
	mid = add_struc_member(id,"unk_240C0",	0X240C0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_240C4",	0X240C4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timr_240C8",	0X240C8,	0x60000400,	get_struc_id("timer_t"),	40);
	mid = add_struc_member(id,"unk240F0",	0X240F0,	0x000400,	-1,	12);
	mid = add_struc_member(id,"sink_semaphore",	0X240FC,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"sessionSemaphores",	0X24124,	0x25500400,	0XFFFFFFFF,	12,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk24130",	0X24130,	0x000400,	-1,	4);
	mid = add_struc_member(id,"gMixMsgSize",	0X24134,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"gMixMsgData",	0X24138,	0x20000400,	-1,	32);
	mid = add_struc_member(id,"process_semaphore",	0X24158,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"unk24180",	0X24180,	0x000400,	-1,	8);
	mid = add_struc_member(id,"mixData",	0X24188,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk2418C",	0X2418C,	0x000400,	-1,	24);
	mid = add_struc_member(id,"mailbox",	0X241A4,	0x60000400,	get_struc_id("adsp_mbx_t"),	128);
	mid = add_struc_member(id,"unk24224",	0X24224,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk_24228",	0X24228,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"unk_24244",	0X24244,	0x60000400,	get_struc_id("UnkSessionStruct"),	28);
	mid = add_struc_member(id,"renderSessions",	0X24260,	0x60000400,	get_struc_id("AudioRenderSession"),	864);
	mid = add_struc_member(id,"audioOutSessions",	0X245C0,	0x60000400,	get_struc_id("AudioOutSession"),	2592);
	mid = add_struc_member(id,"unk24FE0",	0X24FE0,	0x000400,	-1,	1080);
	mid = add_struc_member(id,"nearVoiceSessions",	0X25418,	0x60000400,	get_struc_id("NearVoiceSession"),	544);
	mid = add_struc_member(id,"gameRecordSession",	0X25638,	0x60000400,	get_struc_id("GameRecordSession"),	1088);
	mid = add_struc_member(id,"sessionType7",	0X25A78,	0x000400,	-1,	288);
	mid = add_struc_member(id,"sessionType8",	0X25B98,	0x000400,	-1,	144);
	mid = add_struc_member(id,"unk_sessionType",	0X25C28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_25C2C",	0X25C2C,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("AudioRenderSession::vftable1");
	mid = add_struc_member(id,"GetRingBuffer",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetBufferDeviceAddress",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetRingBufferSize",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetReadPosition",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetWritePosition",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk14",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SetSamplesProcessed",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetSharedBufferPosition",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SetSharedBufferPosition",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SetWritePosition",	0X24,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"AppendBuffer",	0X28,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetBuffersProcessed",	0X2C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk30",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk34",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"FlushBuffers",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Suspend",	0X3C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Resume",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk44",	0X44,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk48",	0X48,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk4C",	0X4C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"AttachWorkBuffer",	0X50,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Open",	0X54,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Close",	0X58,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk5C",	0X5C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"PrepareSamples",	0X60,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"Unk64",	0X64,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"GetSampleCount",	0X68,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"SetReadPosition",	0X6C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::UpsampleCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"dspSamplesBuffer",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspUnkBuffer",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bufferCount",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"targetSampleCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"targetSampleRate",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dspUpsamplerInfo",	0X2C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::UpsamplerState");
	mid = add_struc_member(id,"ratio",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"history",	0X4,	0x20000400,	-1,	80);
	mid = add_struc_member(id,"unk_54",	0X54,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"historyOutputIndex",	0X56,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"historyInputIndex",	0X58,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"historyStartIndex",	0X5A,	0x000400,	-1,	1);
	mid = add_struc_member(id,"historyEndIndex",	0X5B,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_5C",	0X5C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sampleIndex",	0X5D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad5E",	0X5E,	0x000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::UpsamplerInfo");
	mid = add_struc_member(id,"states",	0,	0x60000400,	get_struc_id("nn::audio::UpsamplerState"),	576);
	mid = add_struc_member(id,"manager",	0X240,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"samplesPos",	0X248,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"sampleCount",	0X250,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inputCount",	0X254,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X258,	0x000400,	-1,	1);
	mid = add_struc_member(id,"inputs",	0X259,	0x000400,	-1,	6);
	mid = add_struc_member(id,"unk25F",	0X25F,	0x000400,	-1,	33);
	set_struc_align(id,3);
	
	id = get_struc_id("msgq_message_t");
	mid = add_struc_member(id,"size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"payload",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_os_message_header");
	mid = add_struc_member(id,"header",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"message",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("app_complete_status_data");
	mid = add_struc_member(id,"header",	0,	0x60000400,	get_struc_id("adsp_os_message_header"),	8);
	mid = add_struc_member(id,"host_ref",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"adsp_ref",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"status",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("app_mem_size");
	mid = add_struc_member(id,"dram",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_shared",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_shared_wc",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_x",	0X20,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("adsp_shared_app");
	mid = add_struc_member(id,"name",	0,	0x000400,	-1,	128);
	mid = add_struc_member(id,"mem_size",	0X80,	0x60000400,	get_struc_id("app_mem_size"),	40);
	mid = add_struc_member(id,"mod_ptr",	0XA8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_data_ptr",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"shared_data_ptr",	0XB4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"shared_wc_data_ptr",	0XB8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"version",	0XBC,	0x000400,	-1,	16);
	set_struc_align(id,2);
	
	id = get_struc_id("app_static_app_data");
	mid = add_struc_member(id,"header",	0,	0x60000400,	get_struc_id("adsp_os_message_header"),	8);
	mid = add_struc_member(id,"shared_app",	0X8,	0x60000400,	get_struc_id("adsp_shared_app"),	204);
	set_struc_align(id,2);
	
	id = get_struc_id("app_complete_status_message");
	mid = add_struc_member(id,"msgq_msg",	0,	0x60000400,	get_struc_id("msgq_message_t"),	8);
	mid = add_struc_member(id,"complete_status_data",	0,	0x60000400,	get_struc_id("app_complete_status_data"),	24);
	mid = add_struc_member(id,"static_app_data",	0,	0x60000400,	get_struc_id("app_static_app_data"),	212);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_app_args_t");
	mid = add_struc_member(id,"argc",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"argv",	0X4,	0x20000400,	-1,	512);
	set_struc_align(id,2);
	
	id = get_struc_id("run_app_instance_data");
	mid = add_struc_member(id,"adsp_mod_ptr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"host_ref",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"adsp_ref",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_data_ptr",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_shared_ptr",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dram_shared_wc_ptr",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_ptr",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_flag",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_x_ptr",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_x_flag",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mem_size",	0X2C,	0x60000400,	get_struc_id("app_mem_size"),	40);
	mid = add_struc_member(id,"app_args",	0X54,	0x60000400,	get_struc_id("adsp_app_args_t"),	516);
	mid = add_struc_member(id,"stack_size",	0X258,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"message",	0X25C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("app_loader_data");
	mid = add_struc_member(id,"header",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"app_init",	0X4,	0x60000400,	get_struc_id("run_app_instance_data"),	608);
	set_struc_align(id,2);
	
	id = get_struc_id("app_loader_message");
	mid = add_struc_member(id,"msgq_msg",	0,	0x60000400,	get_struc_id("msgq_message_t"),	8);
	mid = add_struc_member(id,"data",	0,	0x60000400,	get_struc_id("app_loader_data"),	612);
	set_struc_align(id,2);
	
	id = get_struc_id("some_sporadic_work");
	mid = add_struc_member(id,"id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"blocked_once",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sem",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"period_count",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"deadlines_missed",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pending_work",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pending_work_peak",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"period",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inactive_count",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_t",	0X30,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"some_timer",	0X34,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"work_load",	0X38,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"periodic",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"regenerate",	0X41,	0x000400,	-1,	1);
	mid = add_struc_member(id,"min_period",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"max_period",	0X50,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("comp_event_elem_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"e",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"parent",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"parent_type",	0XC,	0x28800400,	get_enum("comp_eve_elem_type_t"),	4);
	mid = add_struc_member(id,"child_queue_node",	0X10,	0x60000400,	get_struc_id("list_node"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("event_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signalled",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"flags",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait",	0XC,	0x60000400,	get_struc_id("wait_queue_t"),	16);
	mid = add_struc_member(id,"child",	0X1C,	0x60000400,	get_struc_id("child_queue_t"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("comp_event_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait_and",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"e",	0XC,	0x60000400,	get_struc_id("event_t"),	44);
	mid = add_struc_member(id,"parents",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("sync_object_t");
	mid = add_struc_member(id,"object",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"type",	0X4,	0x28800400,	get_enum("comp_eve_elem_type_t"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("ce_thread_args_t");
	mid = add_struc_member(id,"my_name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"loop_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"object",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("thread_stats");
	mid = add_struc_member(id,"idle_time",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"last_idle_timestamp",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time_preempt",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time_wake_one",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time_block",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"timer_time",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"timer_set_time",	0X30,	0x30000400,	-1,	8);
	return id;
}

static Structures_1(id) {
        auto mid;

	mid = add_struc_member(id,"reschedules",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"context_switches",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"preempts",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wake_ones",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"blocks",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"yields",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"interrupts",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timer_ints",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timer_sets",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timers",	0X5C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"budget_exceeds",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl_miss",	0X64,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("uint8x16_t_0");
	mid = add_struc_member(id,"n128_u64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"n128_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"n128_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"n128_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"n128_f32",	0,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"n128_f64",	0,	0x90000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("pmu_events_t");
	mid = add_struc_member(id,"events",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"overflow",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"count",	0XC,	0x000400,	-1,	6);
	
	id = get_struc_id("test_cmd_args");
	mid = add_struc_member(id,"argc",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"argv",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("line_read_struct");
	mid = add_struc_member(id,"string",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pos",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buffer",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"buflen",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("va_list");
	mid = add_struc_member(id,"__ap",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("_output_args");
	mid = add_struc_member(id,"outstr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"len",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pos",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("msgq_t");
	mid = add_struc_member(id,"size",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"write_index",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"read_index",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"queue",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("app_pool_thing");
	mid = add_struc_member(id,"header",	0,	0x20000400,	-1,	12);
	mid = add_struc_member(id,"queue",	0XC,	0x20000400,	-1,	4084);
	set_struc_align(id,2);
	
	id = get_struc_id("app_loader_msgq");
	mid = add_struc_member(id,"msgq",	0,	0x60000400,	get_struc_id("msgq_t"),	16);
	mid = add_struc_member(id,"_anon_0",	0,	0x60000400,	get_struc_id("app_pool_thing"),	4096);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_app_shared_msg_pool");
	mid = add_struc_member(id,"app_loader_recv_message",	0,	0x60000400,	get_struc_id("app_loader_msgq"),	4096);
	mid = add_struc_member(id,"app_loader_send_message",	0X1000,	0x60000400,	get_struc_id("app_loader_msgq"),	4096);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_os_args");
	mid = add_struc_member(id,"timer_prescalar",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"logger",	0X4,	0x000400,	-1,	4028);
	mid = add_struc_member(id,"adsp_freq_hz",	0XFC0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"gap4008",	0XFC4,	0x000400,	-1,	4);
	mid = add_struc_member(id,"dynamic_app_support",	0XFC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"chip_id",	0XFCC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0XFD0,	0x000400,	-1,	120);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_os_info");
	mid = add_struc_member(id,"version",	0,	0x000400,	-1,	32);
	mid = add_struc_member(id,"reserved",	0X20,	0x000400,	-1,	128);
	
	id = get_struc_id("arm_fault_frame_shared");
	mid = add_struc_member(id,"_spsr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"usp",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ulr",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"r",	0XC,	0x20000400,	-1,	52);
	mid = add_struc_member(id,"_pc",	0X40,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("arm_mode_regs_shared");
	mid = add_struc_member(id,"fiq_r13",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fiq_r14",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"irq_r13",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"irq_r14",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"svc_r13",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"svc_r14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"abt_r13",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"abt_r14",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"und_r13",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"und_r14",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sys_r13",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sys_r14",	0X2C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("exception_context");
	mid = add_struc_member(id,"frame",	0,	0x60000400,	get_struc_id("arm_fault_frame_shared"),	68);
	mid = add_struc_member(id,"regs",	0X44,	0x60000400,	get_struc_id("arm_mode_regs_shared"),	48);
	mid = add_struc_member(id,"stack_addr",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"stack_dump",	0X78,	0x20000400,	-1,	128);
	mid = add_struc_member(id,"exception_reason",	0XF8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_shared_mem");
	mid = add_struc_member(id,"app_shared_msg_pool",	0,	0x60000400,	get_struc_id("adsp_app_shared_msg_pool"),	8192);
	mid = add_struc_member(id,"os_args",	0X2000,	0x60000400,	get_struc_id("adsp_os_args"),	4168);
	mid = add_struc_member(id,"os_info",	0X3048,	0x60000400,	get_struc_id("adsp_os_info"),	160);
	mid = add_struc_member(id,"exception_context",	0X30E8,	0x60000400,	get_struc_id("exception_context"),	252);
	set_struc_align(id,3);
	
	id = get_struc_id("$78A6DB0EEAF2F7AED7EA0C7FB7CC5BA8");
	mid = add_struc_member(id,"header",	0,	0x20000400,	-1,	12);
	mid = add_struc_member(id,"queue",	0XC,	0x20000400,	-1,	32756);
	set_struc_align(id,2);
	
	id = get_struc_id("int_handler_struct");
	mid = add_struc_member(id,"handler",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"arg",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("int_gic_data");
	mid = add_struc_member(id,"name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dist_base",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cpuintf_base",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cnf_dist",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"cnf_intf",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"irq",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fiq",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"irq_start",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nr_irqs",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"it_line_no",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cpu_id",	0X24,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("cmd");
	mid = add_struc_member(id,"cmd_str",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"help_str",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"cmd_callback",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("cbuf_t");
	mid = add_struc_member(id,"head",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tail",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"len_pow2",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"buf",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"event",	0X10,	0x60000400,	get_struc_id("event_t"),	44);
	set_struc_align(id,2);
	
	id = get_struc_id("cmd_block");
	mid = add_struc_member(id,"next",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"list",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_hw_mbx_t");
	mid = add_struc_member(id,"buffer",	0,	0x20000400,	-1,	4096);
	mid = add_struc_member(id,"rd_idx",	0X1000,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"wr_idx",	0X1002,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"err_code",	0X1004,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"busy",	0X1006,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"count",	0X1008,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"send_mbx",	0X100C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rcv_mbx",	0X1010,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"empty_irq",	0X1014,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"full_irq",	0X1016,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"last_msg",	0X1018,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"s",	0X101C,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"buffer_complete",	0X1044,	0x60000400,	get_struc_id("wait_queue_t"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("mailbox_attributes");
	mid = add_struc_member(id,"owner",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flags",	0X4,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("outer_cache_fns");
	mid = add_struc_member(id,"flush_all",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flush_range",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"clean_all",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"clean_range",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"inv_all",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"inv_range",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"disable",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"enable",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"sync",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("mbox_t");
	mid = add_struc_member(id,"rcv_buffer",	0,	0x20000400,	-1,	64);
	mid = add_struc_member(id,"rcv_rd_idx",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"rcv_wr_idx",	0X41,	0x000400,	-1,	1);
	mid = add_struc_member(id,"count",	0X42,	0x000400,	-1,	1);
	mid = add_struc_member(id,"mbx_id",	0X44,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"err_code",	0X46,	0x000400,	-1,	1);
	mid = add_struc_member(id,"s",	0X48,	0x60000400,	get_struc_id("semaphore_t"),	40);
	mid = add_struc_member(id,"rcv_sem",	0X70,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"err_handler",	0X74,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"msg_handler",	0X78,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"context",	0X7C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("private_struct");
	mid = add_struc_member(id,"recv_msgq",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"send_msgq",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mbox",	0X8,	0x60000400,	get_struc_id("mbox_t"),	128);
	set_struc_align(id,2);
	
	id = get_struc_id("app_descriptor");
	mid = add_struc_member(id,"name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"init",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"entry",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flags",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"stack_size",	0X10,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("sched_arg_t");
	mid = add_struc_member(id,"priority",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"exec_cycle",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"policy",	0X18,	0x28800400,	get_enum("sched_policy"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("test_entry_params");
	mid = add_struc_member(id,"exec_mode",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"load",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sched_args",	0X10,	0x60000400,	get_struc_id("sched_arg_t"),	32);
	set_struc_align(id,3);
	
	id = get_struc_id("some_rt_args");
	mid = add_struc_member(id,"id",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"period_count_limit",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"params",	0X8,	0x60000400,	get_struc_id("test_entry_params"),	48);
	mid = add_struc_member(id,"dl_divisor",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"period_count",	0X40,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"processed_count",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"deadlines_missed",	0X50,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"pending_work_a",	0X58,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"pending_work_a_peak",	0X60,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"pending_work_b",	0X68,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"pending_work_b_peak",	0X70,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"stop_test",	0X78,	0x000400,	-1,	1);
	mid = add_struc_member(id,"e",	0X7C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"some_timer",	0X80,	0x60000400,	get_struc_id("timer_t"),	40);
	set_struc_align(id,3);
	
	id = get_struc_id("test_case");
	mid = add_struc_member(id,"n_entries",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"duration",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"iterations",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"params",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("test_suite");
	mid = add_struc_member(id,"ncases",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cases",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("arch_thread");
	mid = add_struc_member(id,"_sp",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fpctx",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("wait_queue");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"list",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"count",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("btree_t");
	mid = add_struc_member(id,"left",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"right",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("sched_edf_t");
	mid = add_struc_member(id,"exec_cycle",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"abs_exec_cycle",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"abs_dl",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl_new",	0X20,	0x000400,	-1,	1);
	mid = add_struc_member(id,"budget_exceeds",	0X21,	0x000400,	-1,	1);
	mid = add_struc_member(id,"refill",	0X22,	0x000400,	-1,	1);
	mid = add_struc_member(id,"dl_miss",	0X23,	0x000400,	-1,	1);
	mid = add_struc_member(id,"no_more_budget",	0X24,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bdgt_exceeds_cnt",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cur_start",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dl_timer",	0X38,	0x60000400,	get_struc_id("timer_t"),	40);
	mid = add_struc_member(id,"btree",	0X60,	0x60000400,	get_struc_id("btree_t"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("thread_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"thread_list_node",	0X4,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"queue_node",	0XC,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"priority",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X18,	0x28800400,	get_enum("thread_state"),	4);
	mid = add_struc_member(id,"saved_critical_section_count",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"remaining_quantum",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"blocking_wait_queue",	0X28,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"wait_queue_block_ret",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"arch",	0X30,	0x60000400,	get_struc_id("arch_thread"),	8);
	mid = add_struc_member(id,"stack",	0X38,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"stack_size",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"entry",	0X40,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"arg",	0X44,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"retcode",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"retcode_wait_queue",	0X4C,	0x60000400,	get_struc_id("wait_queue"),	16);
	mid = add_struc_member(id,"name",	0X5C,	0x000400,	-1,	32);
	mid = add_struc_member(id,"sched_pol",	0X7C,	0x28800400,	get_enum("sched_policy"),	4);
	mid = add_struc_member(id,"sched_edf",	0X80,	0x60000400,	get_struc_id("sched_edf_t"),	104);
	mid = add_struc_member(id,"running_cycles",	0XE8,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("FILE_0");
	mid = add_struc_member(id,"ctx",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"fputc",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"fputs",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"fgetc",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"vfprintf",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("mutex_t");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"holder",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"count",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wait",	0XC,	0x60000400,	get_struc_id("wait_queue_t"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("heap");
	mid = add_struc_member(id,"base",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"len",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"remaining",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"low_watermark",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lock",	0X10,	0x60000400,	get_struc_id("mutex_t"),	28);
	mid = add_struc_member(id,"free_list",	0X2C,	0x60000400,	get_struc_id("list_node"),	8);
	mid = add_struc_member(id,"delayed_free_list",	0X34,	0x60000400,	get_struc_id("list_node"),	8);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_app_mem_t");
	mid = add_struc_member(id,"dram",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"shared",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"shared_wc",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"aram",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"aram_flag",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"aram_x",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"aram_x_flag",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("adsp_app_descriptor");
	mid = add_struc_member(id,"name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"init",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"entry",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"mem",	0XC,	0x60000400,	get_struc_id("adsp_app_mem_t"),	28);
	mid = add_struc_member(id,"mem_size",	0X28,	0x60000400,	get_struc_id("app_mem_size"),	40);
	mid = add_struc_member(id,"args",	0X50,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"flags",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"stack_size",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"handle",	0X5C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"host_ref",	0X60,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::audio::ReverbParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"channelCountMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"channelCount",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"earlyMode",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"earlyGain",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"preDelay",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lateMode",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lateGain",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decayTime",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"highFreqDecayRatio",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"colouration",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"baseGain",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"outGain",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dryGain",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"usage",	0X40,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::ReverbCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"parameter",	0X2C,	0x60000400,	get_struc_id("nn::audio::ReverbParameter"),	68);
	mid = add_struc_member(id,"state",	0X70,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"workBuffer",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X78,	0x000400,	-1,	1);
	mid = add_struc_member(id,"longSizePreDelaySupported",	0X79,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk7A",	0X7A,	0x000400,	-1,	6);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::ReverbState");
	mid = add_struc_member(id,"preDelayLine",	0,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	24);
	mid = add_struc_member(id,"centerDelayLine",	0X18,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	24);
	mid = add_struc_member(id,"earlyDelayTimes",	0X30,	0x20000400,	-1,	40);
	mid = add_struc_member(id,"earlyGains",	0X58,	0x20000400,	-1,	40);
	mid = add_struc_member(id,"preDelayTime",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decayDelayLines",	0X84,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	96);
	mid = add_struc_member(id,"fdnDelayLines",	0XE4,	0x60000400,	get_struc_id("nn::audio::DelayLine"),	96);
	mid = add_struc_member(id,"hfDecayGain",	0X144,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"hfDecayPrevGain",	0X154,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"previousFeedbackOutput",	0X164,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"unk170",	0X174,	0x000400,	-1,	204);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AuxCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"input",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"output",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sendBufferInfo",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"returnBufferInfo",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sendBufferInfoBase",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"returnBufferInfoBase",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"countMax",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writeOffset",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"updateCount",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X34,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CaptureCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"input",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"output",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sendBufferInfo",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sendBufferInfoBase",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"countMax",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writeOffset",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"updateCount",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X2C,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AuxInfoDsp");
	mid = add_struc_member(id,"readOffset",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writeOffset",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lostSampleCount",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"totalSampleCount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	48);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::AuxBufferInfo");
	mid = add_struc_member(id,"cpuInfo",	0,	0x60000400,	get_struc_id("nn::audio::AuxInfoDsp"),	64);
	mid = add_struc_member(id,"dspInfo",	0X40,	0x60000400,	get_struc_id("nn::audio::AuxInfoDsp"),	64);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::I3dl2ReverbParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"channelCountMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"channelCount",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"sampleRate",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"roomHFGain",	0X18,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"referenceHF",	0X1C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbDecayTime",	0X20,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbHFDecayRatio",	0X24,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"roomGain",	0X28,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"reflectionGain",	0X2C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"reverbGain",	0X30,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbDiffusion",	0X34,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"reflectionDelay",	0X38,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbDelayTime",	0X3C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateReverbDensity",	0X40,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"dryGain",	0X44,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X48,	0x8800400,	get_enum("ParameterState"),	1);
	mid = add_struc_member(id,"unk49",	0X49,	0x000400,	-1,	3);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::I3dl2ReverbCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"parameter",	0X2C,	0x60000400,	get_struc_id("nn::audio::I3dl2ReverbParameter"),	76);
	mid = add_struc_member(id,"state",	0X78,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"workBuffer",	0X7C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X80,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::I3dl2DelayLine");
	mid = add_struc_member(id,"bufferStart",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"bufferEnd",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"maxDelay",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"input",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"output",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"delay",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"coefficient",	0X18,	0x80000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::I3dl2ReverbState");
	mid = add_struc_member(id,"lowpass_0",	0,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lowpass_1",	0X4,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lowpass_2",	0X8,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"earlyDelayLine",	0XC,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	28);
	mid = add_struc_member(id,"earlyTapSteps",	0X28,	0x20000400,	-1,	80);
	mid = add_struc_member(id,"earlyGain",	0X78,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"lateGain",	0X7C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"earlyToLateTaps",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fdnDelayLine",	0X84,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	112);
	mid = add_struc_member(id,"decayDelayLine0",	0XF4,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	112);
	mid = add_struc_member(id,"decayDelayLine1",	0X164,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	112);
	mid = add_struc_member(id,"lastReverbEcho",	0X1D4,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"centerDelayLine",	0X1D8,	0x60000400,	get_struc_id("nn::audio::I3dl2DelayLine"),	28);
	mid = add_struc_member(id,"lpfCoefficients",	0X1F4,	0x80000400,	-1,	48);
	mid = add_struc_member(id,"shelfFilter",	0X224,	0x80000400,	-1,	16);
	mid = add_struc_member(id,"dryGain",	0X234,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk238",	0X238,	0x000400,	-1,	328);
	set_struc_align(id,2);
	
	id = get_struc_id("SessionBase");
	mid = add_struc_member(id,"__vftable",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"unk04",	0X4,	0x000400,	-1,	12);
	set_struc_align(id,2);
	
	id = get_struc_id("MessageQueue");
	mid = add_struc_member(id,"msgq",	0,	0x60000400,	get_struc_id("msgq_t"),	16);
	mid = add_struc_member(id,"messages",	0X10,	0x000400,	-1,	2032);
	set_struc_align(id,2);
	
	id = get_struc_id("MixRender");
	mid = add_struc_member(id,"unk0000",	0,	0x000400,	-1,	24576);
	mid = add_struc_member(id,"unk6000",	0X6000,	0x000400,	-1,	4096);
	mid = add_struc_member(id,"readPosition",	0X7000,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk7004",	0X7004,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk_7008",	0X7008,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_700C",	0X700C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("MixOut");
	mid = add_struc_member(id,"subStructIndex",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"subStructIndex2",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"readPosition",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk0C",	0XC,	0x000400,	-1,	4);
	mid = add_struc_member(id,"playedSampleCount",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("MixNearVoice");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	8);
	mid = add_struc_member(id,"writePosition",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk0C",	0XC,	0x000400,	-1,	12);
	mid = add_struc_member(id,"readPosition",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_1C",	0X1C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("gMixData");
	mid = add_struc_member(id,"adspMsgQ",	0,	0x60000400,	get_struc_id("MessageQueue"),	2048);
	mid = add_struc_member(id,"firmwareMsgQ",	0X800,	0x60000400,	get_struc_id("MessageQueue"),	2048);
	mid = add_struc_member(id,"mixRender",	0X1000,	0x60000400,	get_struc_id("MixRender"),	172128);
	mid = add_struc_member(id,"mixOut",	0X2B060,	0x60000400,	get_struc_id("MixOut"),	288);
	mid = add_struc_member(id,"unk2B180",	0X2B180,	0x000400,	-1,	48);
	mid = add_struc_member(id,"unk2B1B0",	0X2B1B0,	0x000400,	-1,	72);
	mid = add_struc_member(id,"nearVoices",	0X2B1F8,	0x60000400,	get_struc_id("MixNearVoice"),	64);
	mid = add_struc_member(id,"unk2B238",	0X2B238,	0x000400,	-1,	128);
	mid = add_struc_member(id,"unk2B2B8",	0X2B2B8,	0x000400,	-1,	2304);
	mid = add_struc_member(id,"unk2BBB8",	0X2BBB8,	0x000400,	-1,	16);
	mid = add_struc_member(id,"unk2BBC8",	0X2BBC8,	0x000400,	-1,	6144);
	mid = add_struc_member(id,"unk2D3C8",	0X2D3C8,	0x000400,	-1,	16);
	mid = add_struc_member(id,"unk2D3D8",	0X2D3D8,	0x000400,	-1,	6400);
	mid = add_struc_member(id,"unk2ECD8",	0X2ECD8,	0x000400,	-1,	16);
	mid = add_struc_member(id,"unk_2ECE8",	0X2ECE8,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"unk2ECFC",	0X2ECFC,	0x000400,	-1,	4);
	mid = add_struc_member(id,"unk2ED00",	0X2ED00,	0x000400,	-1,	184);
	set_struc_align(id,3);
	
	id = get_struc_id("fpctx_t");
	mid = add_struc_member(id,"_fpexc",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dregs",	0X8,	0x20000400,	-1,	128);
	mid = add_struc_member(id,"_fpscr",	0X108,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"valid",	0X10C,	0x000400,	-1,	1);
	set_struc_align(id,3);
	
	id = get_struc_id("interrupt_profile_stat");
	mid = add_struc_member(id,"vector",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cycle_count",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"us_time",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"timestamp",	0X10,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("gMixRender");
	mid = add_struc_member(id,"unk0000",	0,	0x000400,	-1,	24576);
	mid = add_struc_member(id,"unk6000",	0X6000,	0x000400,	-1,	4112);
	
	id = get_struc_id("gMixOut");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	24);
	
	id = get_struc_id("NearVoice");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	32);
	
	id = get_struc_id("nn::audio::PcmInt16DataSourceCommandVersion1");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"srcQuality",	0X10,	0x8800400,	get_enum("VoiceType::SrcQuality"),	1);
	mid = add_struc_member(id,"pad11",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"outputIndex",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"flags",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pitch",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelIndex",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"channelCount",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"waveBuffers",	0X28,	0x60000400,	get_struc_id("nn::audio::WaveBuffer"),	112);
	mid = add_struc_member(id,"dspVoiceState",	0X98,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::DepopForMixBuffersCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"input",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"decay",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"depopBuffer",	0X20,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::MixRampGroupedCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	3);
	mid = add_struc_member(id,"precision",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bufferCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inputIndexes",	0X18,	0x10000400,	-1,	48);
	mid = add_struc_member(id,"outputIndexes",	0X48,	0x10000400,	-1,	48);
	mid = add_struc_member(id,"prevVolumes",	0X78,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"currVolumes",	0XD8,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"lastSampleAddr",	0X138,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CompressorState");
	mid = add_struc_member(id,"unk_00",	0,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_04",	0X4,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_08",	0X8,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_0C",	0XC,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_10",	0X10,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_14",	0X14,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"makeupGain",	0X1C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_24",	0X24,	0x000400,	-1,	28);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CompressorParameter");
	mid = add_struc_member(id,"inputs",	0,	0x000400,	-1,	6);
	mid = add_struc_member(id,"outputs",	0X6,	0x000400,	-1,	6);
	mid = add_struc_member(id,"channelCountMax",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"channelCount",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"sampleRate",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"threshold",	0X14,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"compressorRatio",	0X18,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"attackTime",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"releaseTime",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_24",	0X24,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_28",	0X28,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"unk_2C",	0X2C,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"outGain",	0X30,	0x80000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X34,	0x000400,	-1,	1);
	mid = add_struc_member(id,"makeupGainEnabled",	0X35,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::audio::CompressorCommand");
	mid = add_struc_member(id,"baseclass_0",	0,	0x60000400,	get_struc_id("nn::audio::ICommand"),	16);
	mid = add_struc_member(id,"unk10",	0X10,	0x000400,	-1,	4);
	mid = add_struc_member(id,"inputs",	0X14,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"outputs",	0X20,	0x10000400,	-1,	12);
	mid = add_struc_member(id,"params",	0X2C,	0x60000400,	get_struc_id("nn::audio::CompressorParameter"),	56);
	mid = add_struc_member(id,"workbuffer",	0X64,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enabled",	0X68,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad69",	0X69,	0x000400,	-1,	3);
	set_struc_align(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
	id = Structures_1(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0X80500000,	E_PREV + 0,	"; File Name   : F:\\Switch\\firmware\\dsp_14.3.0.bin");
	update_extra_cmt		(0X80500000,	E_PREV + 1,	"; Format      : Binary file");
	update_extra_cmt		(0X80500000,	E_PREV + 2,	"; Base Address: 0000h Range: 0000h - 77DC0h Loaded length: 77DC0h");
	create_insn	(0X80500000);
	create_insn	(0X80500004);
	create_insn	(0X80500008);
	create_insn	(0X8050000C);
	create_insn	(0X80500010);
	create_insn	(0X80500014);
	create_dword	(0X80500018);
	create_dword	(0X8050001C);
	create_insn	(0X80500020);
	create_insn	(x=0X80500024);
	op_hex		(x,	1);
	create_insn	(x=0X80500028);
	op_hex		(x,	1);
	create_insn	(x=0X8050002C);
	op_hex		(x,	1);
	create_insn	(x=0X80500038);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500054);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500060);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500074);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8050007C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500084);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8050008C);
	create_insn	(x=0X80500090);
	op_hex		(x,	1);
	create_insn	(x=0X80500098);
	op_hex		(x,	1);
	create_insn	(x=0X805000A4);
	op_hex		(x,	1);
	create_insn	(x=0X805000B0);
	op_hex		(x,	1);
	create_insn	(x=0X805000BC);
	op_hex		(x,	1);
	create_insn	(x=0X805000C8);
	op_hex		(x,	1);
	create_insn	(x=0X805000D4);
	op_hex		(x,	1);
	create_insn	(x=0X805000E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805000F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805000F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805000FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500118);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500134);
	create_dword	(0X80500138);
	create_dword	(0X8050013C);
	create_dword	(x=0X80500140);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500144);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500148);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8050014C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80500150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80500154);
	create_insn	(0X80500390);
	create_insn	(0X80500398);
	create_insn	(x=0X805003A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805003B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805003C6);
	create_insn	(x=0X805003D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805003E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805003E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050060C);
	create_insn	(0X80500624);
	set_name	(0X80500624,	"SessionRegistry_Init");
	create_insn	(x=0X80500628);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050062C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500630);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050064E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050066E);
	create_insn	(x=0X80500672);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805006DE);
	create_insn	(x=0X805006E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805006F4);
	create_insn	(x=0X805006FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500766);
	create_insn	(x=0X80500776);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050077E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500782);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500784);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500788);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050078C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500792);
	op_stkvar	(x,	1);
	create_insn	(0X805007A0);
	create_insn	(x=0X805007A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500870);
	set_name	(0X80500870,	"gMix_Main");
	create_insn	(x=0X80500876);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500884);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050089A);
	create_insn	(x=0X805008A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805008AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805008B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805008C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805008CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805008D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500906);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050091A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805009A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805009B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805009F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500A50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500A76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80500AA6);
	set_cmt	(0X80500ABA,	"int",	0);
	set_cmt	(0X80500ACC,	"int",	0);
	set_cmt	(0X80500ACE,	"a2",	0);
	create_insn	(0X80500AFE);
	create_insn	(0X80500B84);
	create_insn	(x=0X80500B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500B9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500BAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500BB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500BBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500BC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500BD6);
	op_stkvar	(x,	1);
	create_insn	(0X80500BE8);
	create_insn	(0X80500BF0);
	create_insn	(x=0X80500C04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500C4C,	"int",	0);
	set_cmt	(0X80500C4E,	"result",	0);
	set_cmt	(0X80500C5A,	"a2",	0);
	set_cmt	(0X80500C5C,	"switch 20 cases",	0);
	set_cmt	(0X80500C6A,	"switch jump",	0);
	set_cmt	(0X80500C6E,	"jump table for switch statement",	0);
	create_byte	(0X80500C6E);
	set_name	(0X80500C6E,	"jpt_80500C6A");
	create_byte	(0X80500C6F);
	create_byte	(0X80500C70);
	create_byte	(0X80500C71);
	create_byte	(0X80500C72);
	create_byte	(0X80500C73);
	create_byte	(0X80500C74);
	create_byte	(0X80500C75);
	create_byte	(0X80500C76);
	create_byte	(0X80500C77);
	create_byte	(0X80500C78);
	create_byte	(0X80500C79);
	create_byte	(0X80500C7A);
	create_byte	(0X80500C7B);
	create_byte	(0X80500C7C);
	create_byte	(0X80500C7D);
	create_byte	(0X80500C7E);
	create_byte	(0X80500C7F);
	create_byte	(0X80500C80);
	create_byte	(0X80500C81);
	set_cmt	(0X80500C82,	"jumptable 80500C6A case 0",	1);
	create_insn	(0X80500C82);
	create_insn	(0X80500C88);
	set_cmt	(0X80500C9A,	"jumptable 80500C6A case 14",	1);
	create_insn	(0X80500C9A);
	set_cmt	(0X80500CAE,	"jumptable 80500C6A case 16",	1);
	create_insn	(0X80500CAE);
	set_cmt	(0X80500CBE,	"jumptable 80500C6A case 4",	1);
	create_insn	(0X80500CBE);
	set_cmt	(0X80500CCA,	"jumptable 80500C6A case 11",	1);
	create_insn	(0X80500CCA);
	set_cmt	(0X80500CDA,	"jumptable 80500C6A case 12",	1);
	create_insn	(0X80500CDA);
	set_cmt	(0X80500CEE,	"jumptable 80500C6A case 1",	1);
	create_insn	(0X80500CEE);
	set_cmt	(0X80500CF4,	"jumptable 80500C6A case 2",	1);
	create_insn	(0X80500CF4);
	set_cmt	(0X80500D02,	"jumptable 80500C6A case 3",	1);
	create_insn	(0X80500D02);
	create_insn	(x=0X80500D10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500D18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500D24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500D2E,	"jumptable 80500C6A case 7",	1);
	create_insn	(0X80500D2E);
	set_cmt	(0X80500D70,	"jumptable 80500C6A case 9",	1);
	create_insn	(0X80500D70);
	set_cmt	(0X80500D80,	"jumptable 80500C6A case 15",	1);
	create_insn	(0X80500D80);
	set_cmt	(0X80500DA0,	"jumptable 80500C6A case 5",	1);
	create_insn	(0X80500DA0);
	set_cmt	(0X80500DB2,	"jumptable 80500C6A case 6",	1);
	create_insn	(0X80500DB2);
	set_cmt	(0X80500DBA,	"jumptable 80500C6A case 8",	1);
	create_insn	(0X80500DBA);
	create_insn	(x=0X80500DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500DDA);
	op_stkvar	(x,	1);
	set_cmt	(0X80500DE2,	"jumptable 80500C6A case 10",	1);
	create_insn	(0X80500DE2);
	set_cmt	(0X80500DF2,	"jumptable 80500C6A case 13",	1);
	create_insn	(0X80500DF2);
	set_cmt	(0X80500E08,	"jumptable 80500C6A case 17",	1);
	create_insn	(0X80500E08);
	set_cmt	(0X80500E1A,	"jumptable 80500C6A case 18",	1);
	create_insn	(0X80500E1A);
	set_cmt	(0X80500E2C,	"jumptable 80500C6A case 19",	1);
	create_insn	(0X80500E2C);
	create_insn	(x=0X80500E3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500E46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80500E66,	"jumptable 80500C6A default case",	1);
	create_insn	(0X80500E66);
	set_name	(0X80500E66,	"def_80500C6A");
	create_insn	(x=0X80500E68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500E8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500E8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X80500E9C);
	create_float	(0X80500EA0);
	create_insn	(0X80500EA4);
	create_insn	(x=0X80500EDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500EE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500F0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500F9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500FA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80500FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80500FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501008);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050100E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501014);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501020);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501022);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050102A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501030);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501032);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501042);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050104A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050104C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501056);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050105A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050105C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501064);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501068);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050106C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050106E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501070);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501072);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501074);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501076);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501078);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050108C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050108E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050109A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805010A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805010AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805010CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805010F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050111A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501126);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050118E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050119C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805011B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805011C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805011F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501204);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050123C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501284);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501290);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501292);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501294);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805012A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805012F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501304);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501342);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050135E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501360);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501374);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805013FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501402);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050141C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050141E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501420);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501428);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050142A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501430);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501432);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501434);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501442);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501444);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501450);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501454);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501458);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050146C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805014DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501544);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501552);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050155C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501564);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050156A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050157A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501590);
	op_stkvar	(x,	1);
	create_insn	(x=0X805015A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805015AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805015B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805015CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050161C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050161E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501668);
	op_stkvar	(x,	1);
	create_insn	(x=0X805016B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805016B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805016C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805016D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805016D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050170C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501710);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501716);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050172E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501788);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050178A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805017B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501812);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501816);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501826);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501832);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050183A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501840);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050184A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050184C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501850);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501854);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501878);
	op_stkvar	(x,	1);
	create_insn	(x=0X805018B8);
	op_hex		(x,	1);
	create_insn	(x=0X805018D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501922);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050192C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050193A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501948);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501A0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501A16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501A18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501A74);
	op_hex		(x,	1);
	create_insn	(x=0X80501ABE);
	op_stkvar	(x,	1);
	set_cmt	(0X80501AD8,	"a2",	0);
	create_insn	(x=0X80501AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501AE8);
	op_stkvar	(x,	1);
	set_cmt	(0X80501AEA,	"int",	0);
	create_insn	(0X80501B24);
	create_insn	(x=0X80501B28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501B2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501B30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501B34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501B3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501B3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501B40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501B4A);
	create_insn	(0X80501B76);
	create_insn	(x=0X80501B86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501B9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501BA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501BD2);
	create_insn	(0X80501C96);
	create_insn	(0X80501CB0);
	create_insn	(0X80501CC4);
	create_insn	(0X80501CCA);
	create_insn	(x=0X80501CE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501CEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501CF8);
	op_stkvar	(x,	1);
	create_insn	(0X80501D08);
	set_cmt	(0X80501D0E,	"switch 8 cases",	0);
	set_cmt	(0X80501D16,	"switch jump",	0);
	set_cmt	(0X80501D1A,	"jump table for switch statement",	0);
	create_byte	(0X80501D1A);
	set_name	(0X80501D1A,	"jpt_80501D16");
	create_byte	(0X80501D1B);
	create_byte	(0X80501D1C);
	create_byte	(0X80501D1D);
	create_byte	(0X80501D1E);
	create_byte	(0X80501D1F);
	create_byte	(0X80501D20);
	create_byte	(0X80501D21);
	set_cmt	(0X80501D22,	"jumptable 80501D16 case 1",	1);
	create_insn	(0X80501D22);
	set_cmt	(0X80501D38,	"jumptable 80501D16 case 6",	1);
	create_insn	(0X80501D38);
	set_cmt	(0X80501D4E,	"jumptable 80501D16 case 2",	1);
	create_insn	(0X80501D4E);
	set_cmt	(0X80501D62,	"jumptable 80501D16 case 5",	1);
	create_insn	(0X80501D62);
	set_cmt	(0X80501D78,	"jumptable 80501D16 case 8",	1);
	create_insn	(0X80501D78);
	set_cmt	(0X80501D82,	"jumptable 80501D16 case 7",	1);
	create_insn	(0X80501D82);
	set_cmt	(0X80501D96,	"jumptable 80501D16 default case, cases 3,4",	1);
	create_insn	(0X80501D96);
	set_name	(0X80501D96,	"def_80501D16");
	create_insn	(x=0X80501D9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501D9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501DAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501DBE);
	create_insn	(x=0X80501DC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501DE6);
	create_insn	(x=0X80501DEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501DFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501DFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501E0E);
	create_insn	(x=0X80501E12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501E36);
	create_insn	(x=0X80501E3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501E4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80501E50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80501E5E);
	create_insn	(0X80501FD6);
	create_insn	(x=0X80501FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80501FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502040);
	op_stkvar	(x,	1);
	create_insn	(0X8050208C);
	create_insn	(x=0X80502094);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050209C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805020DA);
	op_stkvar	(x,	1);
	create_insn	(0X8050213E);
	create_insn	(x=0X80502146);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050214E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050216C);
	op_stkvar	(x,	1);
	create_insn	(0X805021DC);
	create_insn	(x=0X805021F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805021F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502202);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502216);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502220);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502226);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502232);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502240);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502244);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502250);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502260);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502268);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050226E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050227E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502286);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050228E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502292);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502294);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805022F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050230A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502320);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502340);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050234E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050236C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805023EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502412);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502432);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502440);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050245E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502498);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050249A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050249E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805024FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050250E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502516);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502520);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502546);
	op_stkvar	(x,	1);
	create_insn	(0X80502554);
	create_insn	(x=0X80502560);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502562);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502568);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502590);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502594);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502596);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050259A,	"a3",	0);
	set_cmt	(0X8050259E,	"a2",	0);
	set_cmt	(0X805025A4,	"result",	0);
	create_insn	(0X805025C8);
	create_insn	(0X805025E2);
	create_insn	(0X805025EE);
	create_insn	(x=0X805025F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805025F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805025FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502600);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502604);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502606);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050260A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X80502618);
	create_float	(0X8050261C);
	create_insn	(0X80502620);
	create_insn	(x=0X80502638);
	op_hex		(x,	1);
	create_insn	(0X8050263E);
	create_insn	(0X80502644);
	create_insn	(0X80502650);
	create_insn	(0X8050269A);
	create_insn	(0X805026AA);
	create_insn	(0X805026C0);
	create_insn	(0X805026CA);
	create_insn	(0X805026FC);
	create_insn	(0X8050270C);
	create_insn	(0X80502722);
	create_insn	(0X8050275C);
	create_insn	(0X80502782);
	create_insn	(x=0X80502790);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502796);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805027F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502800);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502812);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502818);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502820);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502826);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502864);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050286C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502878);
	op_stkvar	(x,	1);
	create_insn	(0X80502884);
	create_insn	(x=0X8050288E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805028DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502902);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050290E);
	op_stkvar	(x,	1);
	create_insn	(0X80502924);
	create_insn	(x=0X8050293C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502942);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502944);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502964);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502974);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050297E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050298E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805029D6);
	op_stkvar	(x,	1);
	create_insn	(0X80502A00);
	create_insn	(x=0X80502A32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502A68);
	op_stkvar	(x,	1);
	create_insn	(0X80502A96);
	create_insn	(x=0X80502AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502ABE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502ACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502AE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502AEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B14);
	op_hex		(x,	1);
	create_insn	(0X80502B24);
	create_insn	(x=0X80502B2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502B8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BB4);
	op_stkvar	(x,	1);
	create_insn	(0X80502BBE);
	create_insn	(x=0X80502BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502BFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C4A);
	op_stkvar	(x,	1);
	create_insn	(0X80502C52);
	create_insn	(x=0X80502C5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502CA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502CBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502CDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502CEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502CEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D32);
	op_stkvar	(x,	1);
	create_insn	(0X80502D50);
	create_insn	(x=0X80502D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502D86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502D9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80502DA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502DAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502DAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502DAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502DE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502DFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502E84);
	op_stkvar	(x,	1);
	create_insn	(0X80502E90);
	create_insn	(x=0X80502ECE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502EE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502F70);
	op_stkvar	(x,	1);
	create_insn	(0X80502F84);
	create_insn	(x=0X80502F9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80502FD8);
	op_stkvar	(x,	1);
	set_cmt	(0X8050300C,	"int",	0);
	set_cmt	(0X8050300E,	"a2",	0);
	create_insn	(x=0X80503012);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503014);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050303E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503040);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503044);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503046);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503048);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050304E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050306C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503080);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503082);
	op_stkvar	(x,	1);
	create_insn	(x=0X805030B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805030B6,	"a2",	0);
	create_insn	(x=0X805030BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805030BE,	"a3",	0);
	set_cmt	(0X805030C6,	"result",	0);
	create_insn	(0X805030D6);
	set_cmt	(0X80503110,	"result",	0);
	set_cmt	(0X8050311C,	"a2",	0);
	set_cmt	(0X80503122,	"a3",	0);
	set_cmt	(0X8050312C,	"a2",	0);
	set_cmt	(0X8050313A,	"result",	0);
	set_cmt	(0X8050313E,	"a3",	0);
	create_insn	(0X8050314A);
	set_cmt	(0X8050314E,	"a2",	0);
	set_cmt	(0X80503150,	"a3",	0);
	create_insn	(0X80503178);
	create_insn	(x=0X805031A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805031E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050321E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80503222,	"a2",	0);
	create_insn	(x=0X80503226);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050322A,	"a3",	0);
	set_cmt	(0X80503232,	"result",	0);
	create_insn	(0X80503242);
	create_insn	(0X80503284);
	create_insn	(0X80503302);
	create_insn	(x=0X80503322);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503326);
	op_stkvar	(x,	1);
	create_insn	(0X80503344);
	create_insn	(0X8050335A);
	create_insn	(x=0X80503370);
	op_stkvar	(x,	1);
	create_insn	(0X80503396);
	create_insn	(x=0X805033A8);
	op_stkvar	(x,	1);
	create_insn	(0X805033F0);
	create_insn	(x=0X805033FC);
	op_stkvar	(x,	1);
	create_insn	(0X80503400);
	create_insn	(x=0X80503416);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050342A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503432);
	op_stkvar	(x,	1);
	create_insn	(x=0X80503476);
	op_stkvar	(x,	1);
	create_insn	(0X8050347C);
	create_insn	(0X805034D0);
	create_insn	(0X805034D6);
	create_insn	(x=0X805034E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805034E8);
	op_stkvar	(x,	1);
	create_insn	(0X805034F8);
	create_insn	(0X80503570);
	create_insn	(0X805041B0);
	create_insn	(0X80504320);
	create_insn	(0X8050458C);
	create_insn	(0X805045D8);
	create_insn	(0X805045DC);
	create_insn	(0X80504600);
	create_insn	(x=0X80504628);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050464E);
	create_insn	(x=0X8050465A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050469C);
	create_insn	(0X80504760);
	create_insn	(x=0X80504796);
	op_hex		(x,	1);
	create_insn	(0X805047E6);
	create_insn	(x=0X805047EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805047EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805047F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805047F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805047FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805047FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050480C);
	create_insn	(x=0X80504810);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504814);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504818);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050481C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504820);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504822);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504826);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504832);
	create_insn	(x=0X80504836);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050483A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050483E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504842);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504846);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504848);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050484C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805049A0);
	create_insn	(0X805049BC);
	set_name	(0X805049BC,	"AudioRender_Init");
	create_insn	(x=0X805049C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805049C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805049D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805049D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805049E4);
	set_name	(0X805049E4,	"AudioRender_Main");
	create_insn	(x=0X805049FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504A02,	"stack_size",	0);
	create_insn	(x=0X80504A02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504A04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504A0A,	"arg",	0);
	create_insn	(x=0X80504A0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504A12,	"func",	0);
	create_insn	(x=0X80504A12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504A16,	"prio",	0);
	create_insn	(x=0X80504A18);
	op_stkvar	(x,	1);
	set_cmt	(0X80504A20,	"a2",	0);
	create_insn	(x=0X80504A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504A32,	"adsp_mbx_t *",	0);
	create_insn	(x=0X80504A32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504A66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504A6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504A6E);
	op_stkvar	(x,	1);
	set_cmt	(0X80504A70,	"adsp_mbx_t *",	0);
	create_insn	(x=0X80504A8C);
	op_stkvar	(x,	1);
	set_cmt	(0X80504A96,	"header",	0);
	set_cmt	(0X80504AAA,	"commandSize",	0);
	set_cmt	(0X80504AAE,	"this",	0);
	create_insn	(x=0X80504AAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504AC0);
	op_stkvar	(x,	1);
	create_insn	(0X80504AD4);
	create_insn	(0X80504AF0);
	create_insn	(x=0X80504AF8);
	op_stkvar	(x,	1);
	create_insn	(0X80504AFC);
	create_insn	(0X80504B26);
	create_insn	(x=0X80504B34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504B3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504B60,	"commandListProcessor",	0);
	create_insn	(x=0X80504B66);
	op_stkvar	(x,	1);
	set_cmt	(0X80504BA4,	"header",	0);
	set_cmt	(0X80504BB2,	"commandSize",	0);
	set_cmt	(0X80504BB6,	"this",	0);
	create_insn	(x=0X80504BB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504BC2);
	op_stkvar	(x,	1);
	create_insn	(0X80504BD6);
	create_insn	(x=0X80504BD8);
	op_stkvar	(x,	1);
	create_insn	(0X80504BE2);
	create_insn	(x=0X80504C0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504C2A);
	op_stkvar	(x,	1);
	set_cmt	(0X80504C44,	"commandListProcessor",	0);
	create_insn	(x=0X80504C4A);
	op_stkvar	(x,	1);
	create_insn	(0X80504C94);
	create_insn	(x=0X80504C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504C9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504CAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504CBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504CC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504CCE);
	op_stkvar	(x,	1);
	create_insn	(0X80504CDE);
	create_insn	(x=0X80504CE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504CFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504D18);
	set_name	(0X80504D18,	"AudioRender_MemoryMapUnmapThreadFunc");
	create_insn	(x=0X80504D22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80504D32,	"adsp_mbx_t *",	0);
	set_cmt	(0X80504D38,	"switch 7 cases",	0);
	set_cmt	(0X80504D3E,	"switch jump",	0);
	set_cmt	(0X80504D42,	"jump table for switch statement",	0);
	create_byte	(0X80504D42);
	set_name	(0X80504D42,	"jpt_80504D3E");
	create_byte	(0X80504D43);
	create_byte	(0X80504D44);
	create_byte	(0X80504D45);
	create_byte	(0X80504D46);
	create_byte	(0X80504D47);
	create_byte	(0X80504D48);
	set_cmt	(0X80504D4A,	"jumptable 80504D3E case 5",	1);
	create_insn	(0X80504D4A);
	set_cmt	(0X80504D5C,	"jumptable 80504D3E case 1",	1);
	create_insn	(0X80504D5C);
	set_cmt	(0X80504D90,	"jumptable 80504D3E default case, cases 2,4,6",	1);
	create_insn	(0X80504D90);
	set_name	(0X80504D90,	"def_80504D3E");
	create_insn	(x=0X80504D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504D96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504D9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504D9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504DA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504DA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504DB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504DC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504DC8);
	op_stkvar	(x,	1);
	set_cmt	(0X80504DD2,	"jumptable 80504D3E case 3",	1);
	create_insn	(0X80504DD2);
	set_cmt	(0X80504E04,	"jumptable 80504D3E case 7",	1);
	create_insn	(x=0X80504E04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504E24);
	set_name	(0X80504E24,	"InitializeDevice");
	create_insn	(x=0X80504E3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504E9E);
	op_stkvar	(x,	1);
	create_insn	(0X80504F00);
	create_insn	(0X80504F0A);
	create_insn	(x=0X80504F10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80504F22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504F6C);
	create_insn	(x=0X80504F70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80504F78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80504F8C);
	create_insn	(0X80504FAC);
	create_insn	(0X80504FB2);
	create_insn	(0X8050501C);
	create_insn	(0X805050CA);
	create_insn	(x=0X805050D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805050FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505100);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505108);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050510C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050510E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505112);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050511E);
	create_insn	(x=0X80505122);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505126);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050512A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050512E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505132);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505134);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505138);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505144);
	create_insn	(x=0X8050514A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505152);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505176);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050517A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050517E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505182);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505186);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050518C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505198);
	create_insn	(x=0X8050519C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805051AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805051BE);
	create_insn	(x=0X805051C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805051FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505200);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505202);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505206);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505212);
	create_insn	(x=0X80505216);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050521A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050521E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505222);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505226);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050522C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505238);
	create_insn	(x=0X8050523E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505246);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505250);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505258);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505282);
	create_insn	(0X80505292);
	create_insn	(x=0X80505296);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050529A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050529E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805052A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805052A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805052A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805052AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805052B8);
	create_insn	(x=0X805052BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805052C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805052C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805052C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805052CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805052CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805052D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505384);
	create_insn	(x=0X8050538A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505392);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050539C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805053A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805053CE);
	create_insn	(0X805053DE);
	create_insn	(x=0X805053E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805053E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805053EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805053EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805053F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805053F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805053F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505404);
	create_insn	(x=0X80505408);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050540C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505410);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505414);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050541A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050541E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050542A);
	create_insn	(x=0X80505430);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505438);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505442);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050544A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505474);
	create_insn	(0X80505484);
	create_insn	(x=0X80505488);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050548C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505490);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505494);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505498);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050549A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050549E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805054AA);
	create_insn	(x=0X805054AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805054C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805054D0);
	create_insn	(x=0X805054DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805054F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505570);
	create_insn	(0X8050557A);
	create_insn	(x=0X8050557E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505582);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505586);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050558A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050558E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505590);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505594);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805055A0);
	create_insn	(x=0X805055A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805055A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805055AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805055B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805055B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805055B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805055BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805055C6);
	set_name	(0X805055C6,	"MixDevice_ClearSampleBuffer");
	create_insn	(x=0X805055CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805055D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805055EE);
	set_name	(0X805055EE,	"MixDevice_SinkSamples");
	create_insn	(x=0X805055F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805055FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8050562C,	"result",	0);
	set_cmt	(0X8050562E,	"a2",	0);
	set_cmt	(0X80505630,	"a3",	0);
	set_cmt	(0X80505636,	"result",	0);
	set_cmt	(0X80505638,	"a2",	0);
	set_cmt	(0X8050563E,	"a3",	0);
	create_insn	(0X80505646);
	set_cmt	(0X80505654,	"a3",	0);
	set_cmt	(0X80505656,	"result",	0);
	set_cmt	(0X80505658,	"a2",	0);
	create_insn	(0X80505672);
	set_name	(0X80505672,	"InitializeDevices");
	create_insn	(x=0X8050567A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050567E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505682);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505686);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805056D2);
	set_name	(0X805056D2,	"ShutdownAllMixDevices");
	create_insn	(x=0X805056DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805056E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505714);
	op_plain_offset	(x,	1,	0X807A7F58);
	op_plain_offset	(x,	129,	0X807A7F58);
	create_insn	(x=0X80505740);
	op_plain_offset	(x,	1,	0X807A7F58);
	op_plain_offset	(x,	129,	0X807A7F58);
	create_insn	(x=0X8050576C);
	op_plain_offset	(x,	1,	0X807A7F58);
	op_plain_offset	(x,	129,	0X807A7F58);
	create_insn	(x=0X80505798);
	op_plain_offset	(x,	1,	0X807A7F58);
	op_plain_offset	(x,	129,	0X807A7F58);
	create_insn	(x=0X805057C4);
	op_plain_offset	(x,	1,	0X807A7F58);
	op_plain_offset	(x,	129,	0X807A7F58);
	create_insn	(0X805057F8);
	create_insn	(0X80505804);
	create_insn	(x=0X80505808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505810);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050582C);
	create_insn	(x=0X80505836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050583C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505850);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505880);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505890);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505896);
	op_stkvar	(x,	1);
	create_insn	(0X8050589C);
	create_insn	(x=0X805058E6);
	op_hex		(x,	1);
	create_insn	(0X80505908);
	create_insn	(0X8050591E);
	create_insn	(x=0X80505928);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505932);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505934);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505944);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050594C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050595E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050596E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505988);
	op_stkvar	(x,	1);
	create_insn	(0X80505992);
	create_insn	(x=0X80505996);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050599A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050599E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805059A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805059B8);
	create_insn	(x=0X805059BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805059CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805059DE);
	create_insn	(x=0X805059E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805059F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805059F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505A04);
	create_insn	(x=0X80505A08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505A1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505A1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505A2A);
	create_insn	(x=0X80505A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505A7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505A90);
	op_stkvar	(x,	1);
	create_insn	(0X80505A96);
	create_insn	(x=0X80505AF4);
	op_hex		(x,	1);
	create_insn	(x=0X80505B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B72);
	op_stkvar	(x,	1);
	create_insn	(0X80505B80);
	create_insn	(x=0X80505B84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505B88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505B8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505B90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505B96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505B9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505BA6);
	create_insn	(x=0X80505BAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505BBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505BCC);
	create_insn	(x=0X80505BD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505BE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505BF2);
	create_insn	(x=0X80505BF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505BFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505C02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505C08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505C0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505C18);
	create_insn	(x=0X80505C36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505C3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505C3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505C42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505C46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505C48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80505C4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80505C58);
	set_name	(0X80505C58,	"Axfx2AllPassTick");
	create_insn	(0X80505D0C);
	create_insn	(x=0X80505D22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D32);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505D42);
	op_stkvar	(x,	1);
	create_insn	(0X80505D90);
	create_float	(0X80505D9C);
	create_insn	(0X80505DA0);
	create_insn	(x=0X80505DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505E82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505EA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505EAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505EB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505EEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505EFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505F7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80505FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506016);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050607A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050607E);
	op_hex		(x,	1);
	create_float	(0X8050608C);
	create_float	(0X80506090);
	create_insn	(0X80506094);
	create_insn	(x=0X8050609C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805060A0);
	op_hex		(x,	1);
	create_insn	(x=0X805060B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805060CE);
	op_hex		(x,	1);
	create_insn	(x=0X805060F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805060F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805060FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050610C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506112);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506118);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050611E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506124);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050612C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506134);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050613C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506144);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506148);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050614C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050614E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506152);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050615A);
	op_hex		(x,	1);
	create_insn	(x=0X80506162);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506168);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506178);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506182);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050618A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506198);
	op_stkvar	(x,	1);
	create_insn	(x=0X805061A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805061B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805061BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805061D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506226);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506228);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050622E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506280);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050628A);
	op_stkvar	(x,	1);
	create_float	(0X805062AC);
	create_insn	(0X805066A8);
	create_insn	(x=0X805066C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805066FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506754);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506776);
	op_stkvar	(x,	1);
	create_insn	(x=0X805067D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805067D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805067FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050680C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805068A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805068AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805068CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805068CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050691C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506930);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506950);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506960);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050699C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805069F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506A60);
	op_stkvar	(x,	1);
	create_float	(0X80506ABC);
	create_float	(0X80506AC0);
	create_insn	(0X80506AC4);
	create_insn	(x=0X80506AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506AEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506BEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506CA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506CB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506CB8);
	op_hex		(x,	1);
	create_insn	(x=0X80506CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506CD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506CEA);
	op_hex		(x,	1);
	create_insn	(x=0X80506D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506D90);
	op_hex		(x,	1);
	create_insn	(x=0X80506D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506EAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506EC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506EDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F0A);
	op_hex		(x,	1);
	create_insn	(x=0X80506F28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506F9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FC6);
	op_hex		(x,	1);
	create_insn	(x=0X80506FD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80506FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507004);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050700E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507016);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507028);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507032);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050703A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050704C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805070F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805070FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507104);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507106);
	op_stkvar	(x,	1);
	create_insn	(0X80507128);
	set_name	(0X80507128,	"CommandListProcessor::Setup");
	create_insn	(x=0X80507162);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80507166);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050716A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050716E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80507172);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507174);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80507178);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80507186);
	set_name	(0X80507186,	"CommandListProcessor::SetProcessTimeMax");
	create_insn	(0X8050718C);
	set_name	(0X8050718C,	"CommandListProcessor::Process");
	create_insn	(x=0X80507196);
	op_stkvar	(x,	1);
	create_insn	(x=0X805071A4);
	op_stkvar	(x,	1);
	create_insn	(0X805071F2);
	create_insn	(x=0X805071FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80507204);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80507218);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050721A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507222);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507224);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050722C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050722E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507234);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050723A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507240);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507244);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050724C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507252);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050729C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050729E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805072A6);
	op_stkvar	(x,	1);
	set_cmt	(0X805072C2,	"switch 30 cases",	0);
	set_cmt	(0X805072CC,	"switch jump",	0);
	set_cmt	(0X805072D0,	"jump table for switch statement",	0);
	create_word	(0X805072D0);
	set_name	(0X805072D0,	"jpt_805072CC");
	create_word	(0X805072D2);
	create_word	(0X805072D4);
	create_word	(0X805072D6);
	create_word	(0X805072D8);
	create_word	(0X805072DA);
	create_word	(0X805072DC);
	create_word	(0X805072DE);
	create_word	(0X805072E0);
	create_word	(0X805072E2);
	create_word	(0X805072E4);
	create_word	(0X805072E6);
	create_word	(0X805072E8);
	create_word	(0X805072EA);
	create_word	(0X805072EC);
	create_word	(0X805072EE);
	create_word	(0X805072F0);
	create_word	(0X805072F2);
	create_word	(0X805072F4);
	create_word	(0X805072F6);
	create_word	(0X805072F8);
	create_word	(0X805072FA);
	create_word	(0X805072FC);
	create_word	(0X805072FE);
	create_word	(0X80507300);
	create_word	(0X80507302);
	create_word	(0X80507304);
	create_word	(0X80507306);
	create_word	(0X80507308);
	create_word	(0X8050730A);
	set_cmt	(0X8050730C,	"jumptable 805072CC case 1",	1);
	create_insn	(0X8050730C);
	create_insn	(x=0X80507324);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050732E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050733A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507340);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507344);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507348);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050734A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050734C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507352);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507358);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050735E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507364);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050736A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050736C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050736E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507370);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507372);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507380);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507386);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050738C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507392);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073B6);
	op_hex		(x,	1);
	create_insn	(x=0X805073BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073E6);
	op_hex		(x,	1);
	create_insn	(x=0X805073EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805073F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507400);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507406);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050740C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507412);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507416);
	op_hex		(x,	1);
	create_insn	(x=0X80507420);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507422);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507424);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050742C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507436);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050743E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507440);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507446);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050744C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507452);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507458);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050745C);
	op_hex		(x,	1);
	create_insn	(x=0X80507466);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050746E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507478);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050747A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050747C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507486);
	op_stkvar	(x,	1);
	set_cmt	(0X8050748C,	"jumptable 805072CC case 28",	1);
	create_insn	(0X8050748C);
	create_insn	(x=0X805074A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805074E4);
	op_stkvar	(x,	1);
	create_insn	(0X805074F2);
	set_cmt	(0X80507512,	"jumptable 805072CC case 17",	1);
	create_insn	(0X80507512);
	create_insn	(x=0X8050752A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805075F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050760A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507612);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050761A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507620);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050762A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507630);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507632);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507638);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050763A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507640);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507648);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050764E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507650);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507656);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507658);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050765E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507672);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050768C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050768E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805076E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507706);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507722);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050772A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507734);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507740);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050774A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507758);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507762);
	op_stkvar	(x,	1);
	set_cmt	(0X80507768,	"jumptable 805072CC case 15",	1);
	create_insn	(0X80507768);
	set_cmt	(0X80507780,	"workBuffer",	0);
	create_insn	(x=0X80507786);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050778C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050778E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805077E0);
	op_stkvar	(x,	1);
	set_cmt	(0X805077FE,	"param",	0);
	set_cmt	(0X80507800,	"state",	0);
	set_cmt	(0X8050780A,	"jumptable 805072CC case 5",	1);
	create_insn	(0X8050780A);
	create_insn	(x=0X80507822);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507832);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507834);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507838);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050783A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507842);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507850);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507852);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050785A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050785C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507862);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507866);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050786A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050786C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050787A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507888);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507896);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050789A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078A8);
	op_hex		(x,	1);
	create_insn	(x=0X805078B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078E2);
	op_hex		(x,	1);
	create_insn	(x=0X805078E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805078F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507902);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050790C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050790E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507914);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507918);
	op_hex		(x,	1);
	create_insn	(x=0X80507922);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507924);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050792E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507938);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507940);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507942);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507948);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050794E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507954);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050795A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050795E);
	op_hex		(x,	1);
	create_insn	(x=0X80507968);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507970);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507980);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507986);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050798A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507990);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507994);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507996);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079B4);
	op_hex		(x,	1);
	create_insn	(x=0X805079B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805079C0);
	op_stkvar	(x,	1);
	set_cmt	(0X805079C6,	"jumptable 805072CC case 12",	1);
	create_insn	(0X805079C6);
	create_insn	(x=0X805079EE);
	op_stkvar	(x,	1);
	set_cmt	(0X805079F8,	"jumptable 805072CC case 2",	1);
	create_insn	(0X805079F8);
	create_insn	(x=0X80507A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A1A);
	op_stkvar	(x,	1);
	set_cmt	(0X80507A20,	"jumptable 805072CC case 3",	1);
	create_insn	(0X80507A20);
	create_insn	(x=0X80507A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A42);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507A9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507ACA);
	op_hex		(x,	1);
	create_insn	(x=0X80507AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507ADA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507ADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507AFA);
	op_hex		(x,	1);
	create_insn	(x=0X80507B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B2A);
	op_hex		(x,	1);
	create_insn	(x=0X80507B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B70);
	op_hex		(x,	1);
	create_insn	(x=0X80507B7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B82);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507B9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BCC);
	op_hex		(x,	1);
	create_insn	(x=0X80507BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507BDE);
	op_stkvar	(x,	1);
	set_cmt	(0X80507BE8,	"jumptable 805072CC case 4",	1);
	create_insn	(0X80507BE8);
	create_insn	(x=0X80507C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C4C);
	op_stkvar	(x,	1);
	set_cmt	(0X80507C52,	"jumptable 805072CC case 8",	1);
	create_insn	(0X80507C52);
	create_insn	(x=0X80507C6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507C9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507CB4);
	op_stkvar	(x,	1);
	set_cmt	(0X80507CC4,	"jumptable 805072CC case 10",	1);
	create_insn	(0X80507CC4);
	create_insn	(x=0X80507CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507CFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D0A);
	op_stkvar	(x,	1);
	set_cmt	(0X80507D20,	"jumptable 805072CC case 13",	1);
	create_insn	(0X80507D20);
	create_insn	(0X80507D44);
	set_cmt	(0X80507D68,	"jumptable 805072CC case 16",	1);
	create_insn	(0X80507D68);
	create_insn	(x=0X80507D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507DA0);
	op_stkvar	(x,	1);
	create_insn	(0X80507DA6);
	create_insn	(x=0X80507DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507DCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507DD0);
	op_stkvar	(x,	1);
	set_cmt	(0X80507DE8,	"jumptable 805072CC case 25",	1);
	create_insn	(0X80507DE8);
	create_insn	(x=0X80507E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507E26);
	op_stkvar	(x,	1);
	set_cmt	(0X80507E36,	"result",	0);
	set_cmt	(0X80507E3A,	"a2",	0);
	set_cmt	(0X80507E3E,	"a3",	0);
	set_cmt	(0X80507E48,	"jumptable 805072CC case 26",	1);
	create_insn	(0X80507E48);
	set_cmt	(0X80507E60,	"buffer",	0);
	create_insn	(x=0X80507E66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507E6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507EA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507EC0);
	op_stkvar	(x,	1);
	set_cmt	(0X80507EDE,	"param",	0);
	set_cmt	(0X80507EE0,	"state",	0);
	set_cmt	(0X80507EEA,	"jumptable 805072CC case 6",	1);
	create_insn	(0X80507EEA);
	create_insn	(x=0X80507F02);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F4C);
	op_hex		(x,	1);
	create_insn	(x=0X80507F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507F66);
	op_stkvar	(x,	1);
	set_cmt	(0X80507F70,	"jumptable 805072CC case 7",	1);
	create_insn	(0X80507F70);
	create_insn	(x=0X80507F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80507FB6);
	op_stkvar	(x,	1);
	set_cmt	(0X80507FCC,	"jumptable 805072CC case 9",	1);
	create_insn	(0X80507FCC);
	create_insn	(x=0X80507FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508000);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508006);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508044);
	op_stkvar	(x,	1);
	set_cmt	(0X80508056,	"jumptable 805072CC case 11",	1);
	create_insn	(0X80508056);
	create_insn	(x=0X8050806E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050808A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050809E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805080B8);
	op_stkvar	(x,	1);
	set_cmt	(0X805080CE,	"jumptable 805072CC case 14",	1);
	create_insn	(0X805080CE);
	create_insn	(x=0X805080DA);
	op_stkvar	(x,	1);
	create_insn	(0X805080F6);
	create_insn	(x=0X80508106);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508108);
	op_stkvar	(x,	1);
	set_cmt	(0X80508122,	"jumptable 805072CC case 18",	1);
	create_insn	(0X80508122);
	create_insn	(x=0X8050813A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508156);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508162);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508188);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050818E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508192);
	op_stkvar	(x,	1);
	create_insn	(x=0X805081A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805081A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805081AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805081B0);
	op_stkvar	(x,	1);
	set_cmt	(0X805081CE,	"jumptable 805072CC case 19",	1);
	create_insn	(0X805081CE);
	create_insn	(x=0X8050821C);
	op_stkvar	(x,	1);
	set_cmt	(0X80508282,	"jumptable 805072CC case 21",	1);
	create_insn	(0X80508282);
	create_insn	(x=0X80508296);
	op_stkvar	(x,	1);
	create_insn	(x=0X805082A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805082A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805082AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805082B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805082DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805082EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508306);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508326);
	op_stkvar	(x,	1);
	set_cmt	(0X80508328,	"param",	0);
	set_cmt	(0X8050832A,	"state",	0);
	set_cmt	(0X80508330,	"longSizepreDelaySupported",	0);
	set_cmt	(0X80508332,	"workBuffer",	0);
	create_insn	(x=0X80508332);
	op_stkvar	(x,	1);
	set_cmt	(0X8050833A,	"jumptable 805072CC case 22",	1);
	create_insn	(0X8050833A);
	set_cmt	(0X80508352,	"workBuffer",	0);
	create_insn	(x=0X80508358);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050835E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508360);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050838A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508398);
	op_stkvar	(x,	1);
	create_insn	(x=0X805083B2);
	op_stkvar	(x,	1);
	set_cmt	(0X805083D0,	"param",	0);
	set_cmt	(0X805083D2,	"state",	0);
	set_cmt	(0X805083DA,	"jumptable 805072CC case 20",	1);
	create_insn	(0X805083DA);
	create_insn	(x=0X805083FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050840C);
	op_stkvar	(x,	1);
	create_insn	(0X80508414);
	create_insn	(x=0X8050843A);
	op_stkvar	(x,	1);
	set_cmt	(0X80508460,	"jumptable 805072CC case 23",	1);
	create_insn	(0X80508460);
	create_insn	(x=0X805084A8);
	op_stkvar	(x,	1);
	set_cmt	(0X805084B8,	"jumptable 805072CC case 24",	1);
	create_insn	(0X805084B8);
	create_insn	(x=0X805084C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805084CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805084D0);
	op_stkvar	(x,	1);
	set_cmt	(0X805084E4,	"jumptable 805072CC case 29",	1);
	create_insn	(0X805084E4);
	create_insn	(x=0X805084FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508514);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508516);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050852A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050852E);
	op_stkvar	(x,	1);
	set_cmt	(0X80508540,	"jumptable 805072CC case 30",	1);
	create_insn	(0X80508540);
	create_insn	(x=0X8050855E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508564);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508566);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508590);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050859A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805085B8);
	op_stkvar	(x,	1);
	set_cmt	(0X805085D6,	"params",	0);
	set_cmt	(0X805085D8,	"a2",	0);
	set_cmt	(0X805085E0,	"jumptable 805072CC case 27",	1);
	create_insn	(0X805085E0);
	set_cmt	(0X805085F8,	"buffer",	0);
	create_insn	(x=0X805085FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508604);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508606);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508630);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050863E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508658);
	op_stkvar	(x,	1);
	set_cmt	(0X80508676,	"param",	0);
	set_cmt	(0X80508678,	"state",	0);
	create_insn	(0X80508680);
	create_insn	(x=0X80508682);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805086F8);
	op_stkvar	(x,	1);
	create_insn	(0X80508704);
	create_insn	(x=0X8050870C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508734);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508740);
	op_stkvar	(x,	1);
	create_insn	(0X80508750);
	create_insn	(0X8050875C);
	create_insn	(0X80508766);
	create_insn	(x=0X8050876E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508786);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050878C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508796);
	op_stkvar	(x,	1);
	set_cmt	(0X805087A4,	"param",	0);
	create_insn	(0X805087A4);
	set_cmt	(0X805087A6,	"state",	0);
	create_insn	(x=0X805087AE);
	op_stkvar	(x,	1);
	set_cmt	(0X805087B4,	"inputBuffers",	0);
	create_insn	(x=0X805087B4);
	op_stkvar	(x,	1);
	set_cmt	(0X805087B6,	"outputBuffers",	0);
	create_insn	(x=0X805087B6);
	op_stkvar	(x,	1);
	set_cmt	(0X805087C0,	"param",	0);
	set_cmt	(0X805087C2,	"state",	0);
	set_cmt	(0X805087C4,	"enabled",	0);
	create_insn	(0X805087CE);
	set_cmt	(0X805087DC,	"param",	0);
	create_insn	(0X805087DC);
	set_cmt	(0X805087DE,	"state",	0);
	create_insn	(x=0X805087E6);
	op_stkvar	(x,	1);
	set_cmt	(0X805087EA,	"inputs",	0);
	create_insn	(x=0X805087EA);
	op_stkvar	(x,	1);
	set_cmt	(0X805087EC,	"outputs",	0);
	create_insn	(x=0X805087EC);
	op_stkvar	(x,	1);
	set_cmt	(0X805087F4,	"params",	0);
	set_cmt	(0X805087F6,	"state",	0);
	set_cmt	(0X805087F8,	"enabled",	0);
	set_cmt	(0X80508802,	"param",	0);
	create_insn	(0X80508802);
	set_cmt	(0X80508804,	"state",	0);
	set_cmt	(0X80508806,	"doReset",	0);
	create_insn	(x=0X8050880E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508814);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508816);
	op_stkvar	(x,	1);
	set_cmt	(0X8050882E,	"params",	0);
	create_insn	(0X8050882E);
	set_cmt	(0X80508830,	"state",	0);
	create_insn	(x=0X80508838);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050883E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508840);
	op_stkvar	(x,	1);
	create_insn	(0X80508858);
	create_insn	(x=0X80508866);
	op_stkvar	(x,	1);
	set_cmt	(0X8050886C,	"outputBuffers",	0);
	create_insn	(x=0X8050886C);
	op_stkvar	(x,	1);
	set_cmt	(0X80508870,	"inputBuffers",	0);
	create_insn	(x=0X80508870);
	op_stkvar	(x,	1);
	set_cmt	(0X80508872,	"param",	0);
	set_cmt	(0X80508874,	"statistics",	0);
	create_insn	(x=0X80508874);
	op_stkvar	(x,	1);
	set_cmt	(0X8050887C,	"state",	0);
	set_cmt	(0X8050887E,	"enabled",	0);
	create_insn	(x=0X80508888);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508898);
	op_stkvar	(x,	1);
	create_insn	(x=0X805088A8);
	op_stkvar	(x,	1);
	create_insn	(0X805088BA);
	create_insn	(x=0X805088D0);
	op_stkvar	(x,	1);
	set_cmt	(0X805088D2,	"a2",	0);
	set_cmt	(0X805088D6,	"a3",	0);
	set_cmt	(0X805088D8,	"result",	0);
	create_insn	(0X805088E2);
	create_insn	(x=0X80508914);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508918);
	op_stkvar	(x,	1);
	create_insn	(0X80508924);
	create_insn	(x=0X80508928);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050892C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508930);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508934);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508938);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050893A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050893E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508940);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050894A);
	create_insn	(x=0X8050894E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508952);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508956);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050895A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050895E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508960);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508964);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508966);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508972);
	create_insn	(x=0X80508976);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050897A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050897E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508982);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508986);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508988);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050898C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050898E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050899A);
	create_insn	(x=0X8050899E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805089C2);
	create_insn	(x=0X805089C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805089DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805089EA);
	create_insn	(x=0X805089EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805089FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508A12);
	create_insn	(x=0X80508A16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508A3A);
	create_insn	(x=0X80508A3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508A62);
	create_insn	(x=0X80508A66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A72);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508A7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508A8A);
	create_insn	(x=0X80508A8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508A9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508AB2);
	create_insn	(x=0X80508AB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508ABA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508ABE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508ACE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508ADA);
	create_insn	(x=0X80508ADE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508AF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508B02);
	create_insn	(x=0X80508B06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508B2A);
	create_insn	(x=0X80508B2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508B52);
	create_insn	(x=0X80508B56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508B7A);
	create_insn	(x=0X80508B7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508B96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508BA2);
	create_insn	(x=0X80508BA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508BBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508BCA);
	create_insn	(x=0X80508BCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BDA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508BE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508BE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508BF2);
	create_insn	(x=0X80508BF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508BFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508C1A);
	create_insn	(x=0X80508C1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508C42);
	create_insn	(x=0X80508C46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C56);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508C6A);
	create_insn	(x=0X80508C6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C72);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508C86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508C92);
	create_insn	(x=0X80508C96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508C9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508CBA);
	create_insn	(x=0X80508CBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508CE2);
	create_insn	(x=0X80508CE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508CFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508D0A);
	create_insn	(x=0X80508D0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508D32);
	create_insn	(x=0X80508D36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508D5A);
	create_insn	(x=0X80508D5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80508D82,	"jumptable 805072CC default case",	1);
	create_insn	(0X80508D82);
	set_name	(0X80508D82,	"def_805072CC");
	create_insn	(x=0X80508D84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DDC);
	op_stkvar	(x,	1);
	create_insn	(0X80508DE6);
	create_insn	(x=0X80508DEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508DFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508DFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508E0E);
	create_insn	(x=0X80508E12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508E36);
	create_insn	(x=0X80508E3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508E5E);
	create_insn	(x=0X80508E62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508E86);
	create_insn	(x=0X80508E8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508E9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508E9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80508EC6);
	set_name	(0X80508EC6,	"CommandListProcessor::GetRemainCommandCount");
	create_insn	(0X80508ECE);
	create_insn	(x=0X80508EDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508F88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508FCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80508FD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80508FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509000);
	op_stkvar	(x,	1);
	create_insn	(0X80509004);
	create_insn	(x=0X80509026);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509032);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509036);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050903A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050903E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509042);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509070);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509086);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050908A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090A8);
	op_stkvar	(x,	1);
	create_insn	(0X805090C8);
	create_insn	(x=0X805090CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805090FC);
	op_stkvar	(x,	1);
	create_insn	(0X80509104);
	set_cmt	(0X8050910C,	"a2",	0);
	set_cmt	(0X80509112,	"result",	0);
	set_cmt	(0X80509114,	"a3",	0);
	create_insn	(x=0X8050911A);
	op_stkvar	(x,	1);
	create_insn	(0X80509120);
	create_insn	(x=0X80509122);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509126);
	op_stkvar	(x,	1);
	create_insn	(0X8050912E);
	create_insn	(x=0X80509138);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050913A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050913C);
	op_stkvar	(x,	1);
	create_insn	(0X80509144);
	create_insn	(x=0X80509146);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050914A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050914E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509152);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509156);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050915A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050915E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509160);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509168);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050916A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509172);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509174);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050917C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050917E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509188);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050918E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050919C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805091DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805091EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509218);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050921C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509226);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050922C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509236);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050925A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050925C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509262);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509266);
	op_stkvar	(x,	1);
	create_insn	(0X80509284);
	create_insn	(x=0X8050928C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509292);
	op_stkvar	(x,	1);
	create_insn	(0X80509298);
	create_insn	(x=0X8050929C);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805092DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805092E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509302);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050930C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509310);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509312);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509322);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509324);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050932E);
	op_hex		(x,	1);
	create_insn	(x=0X80509338);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050933C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050933E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509340);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509342);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509362);
	op_stkvar	(x,	1);
	create_insn	(0X80509368);
	create_insn	(x=0X8050936A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509384);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509386);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050938A);
	op_hex		(x,	1);
	create_insn	(x=0X8050938E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509394);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050939A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050939E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805093F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509400);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050940A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050940E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509414);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050941E);
	op_stkvar	(x,	1);
	create_insn	(0X80509422);
	create_insn	(x=0X80509426);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509432);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509434);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509446);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050944A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050944E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509452);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509456);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509458);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050945C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050945E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050946A);
	create_insn	(x=0X8050946C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509476);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509478);
	op_stkvar	(x,	1);
	create_insn	(0X8050948E);
	create_insn	(x=0X80509492);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509496);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050949A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050949E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805094A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805094AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805094B4);
	create_insn	(x=0X805094B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805094CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805094D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805094DC);
	create_insn	(x=0X805094E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805094F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805094F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509504);
	create_insn	(x=0X8050950A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050950E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509512);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509516);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050951A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050951C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509520);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050952C);
	create_insn	(x=0X80509532);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509536);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050953A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050953E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509542);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509544);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509548);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509554);
	create_insn	(x=0X8050955A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050955E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509562);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509566);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050956A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050956C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509570);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050957C);
	create_insn	(x=0X80509582);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509586);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050958A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050958E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509592);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509594);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509598);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805095A4);
	create_insn	(x=0X805095AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805095BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805095CC);
	create_insn	(x=0X805095D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805095E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805095F4);
	create_insn	(x=0X805095FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805095FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509602);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509606);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050960A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050960C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509610);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050961C);
	create_insn	(x=0X80509622);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509626);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050962A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050962E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509632);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509638);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509644);
	create_insn	(x=0X8050964A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050964E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509652);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509656);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050965A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050965C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509660);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050966C);
	create_insn	(x=0X80509672);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509676);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050967A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050967E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509682);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509684);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509688);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805098BC);
	create_insn	(0X8050992E);
	create_insn	(0X80509958);
	create_insn	(0X805099BC);
	create_insn	(0X80509BE4);
	create_insn	(0X80509C02);
	set_cmt	(0X80509C04,	"result",	0);
	create_insn	(0X80509C0E);
	set_cmt	(0X80509C38,	"a2",	0);
	set_cmt	(0X80509C3C,	"a3",	0);
	create_insn	(0X80509C4C);
	create_insn	(0X80509C82);
	create_insn	(x=0X80509C86);
	op_hex		(x,	1);
	create_insn	(0X80509CD6);
	create_insn	(x=0X80509CDA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509CDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509CE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509CE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509CEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509CEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509CF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509D00);
	create_insn	(0X80509D2E);
	create_insn	(x=0X80509D5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80509DAC);
	create_insn	(x=0X80509DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509DC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509DEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509DF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509E62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509E66);
	op_stkvar	(x,	1);
	create_insn	(0X80509E78);
	create_insn	(0X80509ECE);
	create_insn	(0X80509F1C);
	create_insn	(x=0X80509F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509F24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509F28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509F2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80509F32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80509F36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X80509F60);
	create_insn	(0X80509F64);
	create_insn	(0X80509FBC);
	create_insn	(x=0X8050A002);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A006);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A00A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A024);
	op_hex		(x,	1);
	create_insn	(x=0X8050A02C);
	op_hex		(x,	1);
	create_insn	(x=0X8050A034);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A038);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A04E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A1EA);
	op_stkvar	(x,	1);
	create_insn	(0X8050A22C);
	create_insn	(x=0X8050A23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A23E);
	op_hex		(x,	1);
	create_insn	(x=0X8050A242);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A25C);
	op_hex		(x,	1);
	create_insn	(x=0X8050A2A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2B0);
	op_stkvar	(x,	1);
	create_insn	(0X8050A2BA);
	set_name	(0X8050A2BA,	"ApplyDelayEffect6ch");
	create_insn	(x=0X8050A2C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A2FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A300);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A306);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A30C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A30E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A312);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A316);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	create_insn	(x=0X8050A31A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A31E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A322);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A326);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A32A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A32E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A332);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A336);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A33A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A33E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A342);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A346);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A348);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A34C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A354);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A356);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A368);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A372);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A37C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A382);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A396);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A39E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A3FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A406);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A408);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A412);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A41C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A41E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A420);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A42C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A430);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A436);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A438);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A442);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A450);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A454);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A456);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A46A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A47A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A484);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A486);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A488);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A49A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A4A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A4A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A4B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A4C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A4D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A4EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A4EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A504);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A506);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A516);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A51E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A520);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A524);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A52A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A538);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A550);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A562);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A568);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A570);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A5DA);
	op_stkvar	(x,	1);
	create_insn	(0X8050A5E6);
	set_name	(0X8050A5E6,	"nn::audio::InitializeDelayEffect");
	create_insn	(x=0X8050A6D0);
	op_hex		(x,	1);
	create_insn	(0X8050A70A);
	set_name	(0X8050A70A,	"nn::audio::SetDelayEffectParameter");
	create_insn	(x=0X8050A73A);
	op_hex		(x,	1);
	create_insn	(0X8050A774);
	set_name	(0X8050A774,	"ApplyDelayEffect");
	create_insn	(x=0X8050A78E);
	op_hex		(x,	1);
	create_insn	(x=0X8050A796);
	op_stkvar	(x,	1);
	set_cmt	(0X8050A79E,	"switch 6 cases",	0);
	set_cmt	(0X8050A7AA,	"switch jump",	0);
	set_cmt	(0X8050A7AE,	"jump table for switch statement",	0);
	create_word	(0X8050A7AE);
	set_name	(0X8050A7AE,	"jpt_8050A7AA");
	create_word	(0X8050A7B0);
	create_word	(0X8050A7B2);
	create_word	(0X8050A7B4);
	create_word	(0X8050A7B6);
	create_word	(0X8050A7B8);
	set_cmt	(0X8050A7BA,	"jumptable 8050A7AA case 1",	1);
	create_insn	(0X8050A7BA);
	create_insn	(x=0X8050A7CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A7FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A822);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A83A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A846);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A84C);
	op_stkvar	(x,	1);
	create_insn	(0X8050A87A);
	set_cmt	(0X8050A87E,	"a2",	0);
	set_cmt	(0X8050A880,	"result",	0);
	set_cmt	(0X8050A886,	"a3",	0);
	set_cmt	(0X8050A896,	"jumptable 8050A7AA case 4",	1);
	create_insn	(0X8050A896);
	create_insn	(x=0X8050A89E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A8FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A906);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A90E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A91A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A91E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A92A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A92C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A936);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A940);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A948);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A952);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A958);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A95A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A95E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A960);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A998);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050A9DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA24);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA76);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AA9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AADE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AAFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB80);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB88);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AB8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABDA);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ABDC,	"state",	0);
	create_insn	(x=0X8050ABDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ABEC);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ABF6,	"jumptable 8050A7AA case 2",	1);
	create_insn	(0X8050ABF6);
	create_insn	(x=0X8050AC00);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC14);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC24);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC48);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC58);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AC92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ACC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ACD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ACFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ACFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD58);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD86);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AD9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ADA0);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ADA2,	"param",	0);
	create_insn	(x=0X8050ADA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ADA4);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ADAE,	"jumptable 8050A7AA case 6",	1);
	create_insn	(0X8050ADAE);
	set_cmt	(0X8050ADB0,	"outputBuffers",	0);
	set_cmt	(0X8050ADB2,	"sampleCount",	0);
	create_insn	(x=0X8050ADB2);
	op_stkvar	(x,	1);
	set_cmt	(0X8050ADC2,	"jumptable 8050A7AA default case, cases 3,5",	1);
	create_insn	(0X8050ADC2);
	set_name	(0X8050ADC2,	"def_8050A7AA");
	set_cmt	(0X8050ADC6,	"a2",	0);
	set_cmt	(0X8050ADC8,	"result",	0);
	set_cmt	(0X8050ADCE,	"a3",	0);
	create_insn	(0X8050ADDE);
	create_insn	(x=0X8050ADE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050ADE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050ADEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050ADEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050ADF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ADF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050ADF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050AEBE);
	set_name	(0X8050AEBE,	"nn::audio::InitializeLightLimiterEffect");
	create_insn	(x=0X8050AF30);
	op_hex		(x,	1);
	create_insn	(0X8050AF56);
	create_insn	(0X8050AFA0);
	set_name	(0X8050AFA0,	"nn::audio::UpdateLightLimiterEffectParameter");
	create_insn	(0X8050AFB0);
	set_name	(0X8050AFB0,	"nn::audio::ApplyLightLimiterEffect");
	create_insn	(x=0X8050AFD8);
	op_hex		(x,	1);
	create_insn	(x=0X8050AFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050AFEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B00A);
	op_hex		(x,	1);
	set_cmt	(0X8050B046,	"switch 6 cases",	0);
	set_cmt	(0X8050B052,	"switch jump",	0);
	set_cmt	(0X8050B056,	"jump table for switch statement",	0);
	create_word	(0X8050B056);
	set_name	(0X8050B056,	"jpt_8050B052");
	create_word	(0X8050B058);
	create_word	(0X8050B05A);
	create_word	(0X8050B05C);
	create_word	(0X8050B05E);
	create_word	(0X8050B060);
	set_cmt	(0X8050B062,	"jumptable 8050B052 case 1",	1);
	create_insn	(x=0X8050B062);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B1A6);
	op_stkvar	(x,	1);
	create_insn	(0X8050B1B4);
	set_cmt	(0X8050B1B8,	"a2",	0);
	set_cmt	(0X8050B1BA,	"result",	0);
	set_cmt	(0X8050B1C0,	"a3",	0);
	create_insn	(x=0X8050B1CE);
	op_stkvar	(x,	1);
	set_cmt	(0X8050B1E0,	"jumptable 8050B052 case 4",	1);
	create_insn	(0X8050B1E0);
	create_insn	(x=0X8050B1EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B202);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B206);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B20A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B20E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B23C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B24A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B2EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B31C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B326);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B330);
	op_stkvar	(x,	1);
	create_float	(0X8050B344);
	create_float	(0X8050B348);
	create_double	(0X8050B350);
	set_cmt	(0X8050B358,	"jumptable 8050B052 case 2",	1);
	create_insn	(0X8050B358);
	create_insn	(x=0X8050B360);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B3A8);
	op_stkvar	(x,	1);
	set_cmt	(0X8050B47E,	"jumptable 8050B052 case 6",	1);
	create_insn	(0X8050B47E);
	create_insn	(x=0X8050B494);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B4FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B508);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B512);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B520);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B528);
	op_stkvar	(x,	1);
	create_insn	(0X8050B530);
	create_insn	(x=0X8050B534);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B542);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B54C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B556);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B560);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B56A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B576);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B57E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B590);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B5A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B5AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B5BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B626);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B6A6);
	op_stkvar	(x,	1);
	set_cmt	(0X8050B6FA,	"jumptable 8050B052 default case, cases 3,5",	1);
	create_insn	(0X8050B6FA);
	set_name	(0X8050B6FA,	"def_8050B052");
	create_insn	(x=0X8050B700);
	op_stkvar	(x,	1);
	set_cmt	(0X8050B706,	"a2",	0);
	set_cmt	(0X8050B708,	"result",	0);
	set_cmt	(0X8050B70E,	"a3",	0);
	create_insn	(0X8050B71E);
	create_insn	(0X8050B73C);
	create_insn	(x=0X8050B836);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B83E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050B840);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B8E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B8FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B908);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B912);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050B930);
	op_stkvar	(x,	1);
	create_insn	(0X8050B9FA);
	create_insn	(x=0X8050B9FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BA02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BA06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BA0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BA0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050BA10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BA14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_oword	(0X8050BA20);
	create_double	(0X8050BA30);
	create_float	(0X8050BA38);
	create_float	(0X8050BA3C);
	create_insn	(0X8050BA40);
	set_name	(0X8050BA40,	"nn::audio::InitializeReverbEffect");
	set_cmt	(0X8050BC68,	"state",	0);
	set_cmt	(0X8050BC72,	"param",	0);
	create_insn	(0X8050BD02);
	set_name	(0X8050BD02,	"nn::audio::UpdateReverbEffectParameter");
	create_insn	(x=0X8050BD0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050BD1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BD1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BD22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BD2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BF9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BFA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BFAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050BFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050BFF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C000);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C004);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C018);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C060);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C0CC);
	op_stkvar	(x,	1);
	create_insn	(0X8050C0DA);
	create_insn	(x=0X8050C0FA);
	op_hex		(x,	1);
	create_insn	(0X8050C110);
	create_insn	(0X8050C114);
	create_insn	(x=0X8050C184);
	op_hex		(x,	1);
	create_insn	(0X8050C1B4);
	create_insn	(x=0X8050C1D6);
	op_hex		(x,	1);
	create_insn	(0X8050C1E8);
	create_insn	(0X8050C26C);
	create_insn	(0X8050C286);
	create_insn	(0X8050C298);
	create_insn	(x=0X8050C2B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C2EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C2F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C2FA);
	op_plain_offset	(x,	1,	0X807B039C);
	op_plain_offset	(x,	129,	0X807B039C);
	create_insn	(x=0X8050C310);
	op_hex		(x,	1);
	create_insn	(0X8050C342);
	create_insn	(0X8050C352);
	create_insn	(0X8050C35E);
	create_insn	(0X8050C376);
	create_insn	(0X8050C386);
	create_insn	(0X8050C396);
	create_insn	(0X8050C3A6);
	create_insn	(0X8050C3B2);
	create_insn	(0X8050C3C0);
	create_insn	(0X8050C3CA);
	create_insn	(0X8050C3D4);
	create_insn	(0X8050C3DE);
	create_insn	(0X8050C3E8);
	create_insn	(0X8050C3F0);
	create_insn	(x=0X8050C482);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C48A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C4AE);
	op_hex		(x,	1);
	create_insn	(0X8050C4C0);
	create_insn	(x=0X8050C548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C558);
	op_stkvar	(x,	1);
	create_insn	(0X8050C560);
	create_insn	(0X8050C570);
	create_insn	(x=0X8050C58A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050C5C6);
	create_insn	(0X8050C5CE);
	create_insn	(x=0X8050C5F0);
	op_hex		(x,	1);
	create_insn	(0X8050C5FC);
	create_insn	(x=0X8050C638);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C640);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C644);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C660);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C66A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C678);
	op_plain_offset	(x,	1,	0X807B039C);
	op_plain_offset	(x,	129,	0X807B039C);
	create_insn	(0X8050C67C);
	create_insn	(x=0X8050C680);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C684);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C688);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C68C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C690);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C692);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050C696);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C698);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050C6A4);
	set_name	(0X8050C6A4,	"nn::audio::ApplyReverbEffect");
	create_insn	(x=0X8050C6BE);
	op_hex		(x,	1);
	create_insn	(x=0X8050C6DC);
	op_stkvar	(x,	1);
	set_cmt	(0X8050C6E6,	"switch 6 cases",	0);
	create_insn	(x=0X8050C6F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C6F6);
	op_stkvar	(x,	1);
	set_cmt	(0X8050C6FA,	"switch jump",	0);
	set_cmt	(0X8050C6FE,	"jump table for switch statement",	0);
	create_word	(0X8050C6FE);
	set_name	(0X8050C6FE,	"jpt_8050C6FA");
	create_word	(0X8050C700);
	create_word	(0X8050C702);
	create_word	(0X8050C704);
	create_word	(0X8050C706);
	create_word	(0X8050C708);
	set_cmt	(0X8050C70A,	"jumptable 8050C6FA case 1",	1);
	create_insn	(0X8050C70A);
	create_insn	(x=0X8050C714);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C722);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C72A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C730);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C734);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C73A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C740);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C746);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C74C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C752);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C758);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C75E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C764);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C76A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C772);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C77A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C786);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C796);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C7FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C810);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C824);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C826);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C840);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C844);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C848);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C84C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C850);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C854);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C858);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C85C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C860);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C86A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C87E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C8A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C8DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C8E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C91A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C950);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C952);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C980);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050C9FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA24);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CA9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB38);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB44);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB88);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CB9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CBCC);
	op_stkvar	(x,	1);
	create_insn	(0X8050CBDC);
	set_cmt	(0X8050CBE0,	"a2",	0);
	set_cmt	(0X8050CBE2,	"result",	0);
	set_cmt	(0X8050CBE8,	"a3",	0);
	set_cmt	(0X8050CBFE,	"jumptable 8050C6FA case 4",	1);
	create_insn	(0X8050CBFE);
	create_insn	(x=0X8050CC08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC76);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CC9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CCF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD88);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CDE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CEFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF08);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF76);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF80);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF88);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CF9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050CFFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D004);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D00E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D014);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D02A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D02E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D030);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D046);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D048);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D04E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D050);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D056);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D058);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D05E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D060);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D066);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D068);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D06E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D074);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D090);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D096);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D0FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D11A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D120);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D126);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D132);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D134);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D14E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D154);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D156);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D158);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D168);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D16E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D178);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D184);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D18A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1C2);
	op_stkvar	(x,	1);
	set_cmt	(0X8050D1D0,	"jumptable 8050C6FA case 2",	1);
	create_insn	(0X8050D1D0);
	create_insn	(x=0X8050D1DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D1FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D204);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D208);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D20E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D214);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D21A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D220);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D226);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D232);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D234);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D23A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D23E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D244);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D24E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D254);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D284);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D294);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D302);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D306);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D314);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D318);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D31C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D320);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D324);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D330);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D33A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D33E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D342);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D346);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D34E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D350);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D360);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D374);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D39C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D3EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D402);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D41C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D434);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D436);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D466);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D480);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D49A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D49C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D4FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D500);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D506);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D508);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D50A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D50C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D512);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D514);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D516);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D51E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D520);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D526);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D528);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D52A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D530);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D532);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D534);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D53A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D540);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D542);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D548);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D54A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D54C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D558);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D55A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D560);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D562);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D578);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D57E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D580);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D586);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D588);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D58E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D594);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D59A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D5FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D604);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D606);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D608);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D60E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D614);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D616);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D622);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D62A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D644);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D646);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D660);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D662);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D66A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D66C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D670);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D678);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D682);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D688);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D690);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D694);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D6F0);
	op_stkvar	(x,	1);
	set_cmt	(0X8050D6FE,	"jumptable 8050C6FA case 6",	1);
	create_insn	(0X8050D6FE);
	create_insn	(x=0X8050D708);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D714);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D718);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D71C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D722);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D728);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D72C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D730);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D734);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D738);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D73C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D740);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D744);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D74A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D750);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D756);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D75C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D762);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D768);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D76E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D774);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D784);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D788);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D78C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D7EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D80C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D81E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D830);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D842);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D868);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D87E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D88A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D88E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D892);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D896);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D8B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D8C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D8E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D904);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D906);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D910);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D912);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D922);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D924);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D928);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D92A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D932);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D934);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D93C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D93E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D952);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D95E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D970);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D97E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D994);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D99E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D9C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D9CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D9DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D9F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050D9FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA40);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA48);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DA9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DAA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DAAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DAC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DADA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DB2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DB2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DB90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DB92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DBFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DC9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DCDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DD0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DD14);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DD1E);
	op_stkvar	(x,	1);
	set_cmt	(0X8050DD2C,	"jumptable 8050C6FA default case, cases 3,5",	1);
	create_insn	(0X8050DD2C);
	set_name	(0X8050DD2C,	"def_8050C6FA");
	set_cmt	(0X8050DD30,	"a2",	0);
	set_cmt	(0X8050DD32,	"result",	0);
	set_cmt	(0X8050DD38,	"a3",	0);
	create_insn	(0X8050DD4A);
	create_insn	(x=0X8050DD4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DD60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050DD70);
	create_insn	(x=0X8050DD74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DD86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050DD96);
	create_insn	(x=0X8050DD9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DD9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DDA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DDA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DDAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DDAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DDB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050DEE0);
	set_name	(0X8050DEE0,	"DivQfQf");
	create_insn	(x=0X8050DF14);
	op_hex		(x,	1);
	create_insn	(x=0X8050DF34);
	op_hex		(x,	1);
	create_insn	(0X8050DF48);
	create_insn	(0X8050DFA0);
	create_insn	(x=0X8050DFA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DFAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DFAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DFB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DFB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050DFB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050DFBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050DFFC);
	set_name	(0X8050DFFC,	"nn::audio::detail::ApplyI3dl2ReverbEffect1ch");
	create_insn	(x=0X8050E010);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E022);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E024);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E026);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E036);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E08A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E08C);
	op_stkvar	(x,	1);
	create_float	(0X8050E090);
	create_float	(0X8050E094);
	create_float	(0X8050E098);
	create_float	(0X8050E09C);
	create_float	(0X8050E0A0);
	create_float	(0X8050E0A4);
	create_float	(0X8050E0A8);
	create_float	(0X8050E0AC);
	create_float	(0X8050E0B0);
	create_float	(0X8050E0B4);
	create_float	(0X8050E0B8);
	create_float	(0X8050E0BC);
	create_float	(0X8050E0C0);
	create_float	(0X8050E0C4);
	create_float	(0X8050E0C8);
	create_float	(0X8050E0CC);
	create_float	(0X8050E0D0);
	create_float	(0X8050E0D4);
	create_float	(0X8050E0D8);
	create_float	(0X8050E0DC);
	create_float	(0X8050E0E0);
	create_float	(0X8050E0E4);
	create_float	(0X8050E0E8);
	create_insn	(x=0X8050E0EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E0F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E12A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E12C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E138);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E13A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E142);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E14C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E424);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E454);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E486);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E516);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E51A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E522);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E526);
	op_stkvar	(x,	1);
	create_insn	(0X8050E620);
	create_float	(0X8050E630);
	create_insn	(0X8050E634);
	set_name	(0X8050E634,	"nn::audio::detail::ApplyI3dl2ReverbEffect2ch");
	create_insn	(x=0X8050E666);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E672);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E676);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E67E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E700);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E70A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E710);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E716);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E71C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E722);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E728);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E72E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E734);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E73A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E740);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E746);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E74C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E752);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E758);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E75E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E760);
	op_stkvar	(x,	1);
	create_float	(0X8050E764);
	create_float	(0X8050E768);
	create_float	(0X8050E76C);
	create_float	(0X8050E770);
	create_float	(0X8050E774);
	create_float	(0X8050E778);
	create_float	(0X8050E77C);
	create_float	(0X8050E780);
	create_float	(0X8050E784);
	create_insn	(x=0X8050E788);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E78A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E79E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E7AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E7BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E7C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E7DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E7FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E810);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E822);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E834);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E846);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E858);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E86A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E87C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E88E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E8E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E908);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E948);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E982);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E9A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050E9DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EA38);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EB2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EB38);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EB46);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EB56);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EBEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EBEC);
	op_stkvar	(x,	1);
	create_float	(0X8050EC0C);
	create_float	(0X8050EC10);
	create_float	(0X8050EC14);
	create_float	(0X8050EC18);
	create_float	(0X8050EC1C);
	create_float	(0X8050EC20);
	create_float	(0X8050EC24);
	create_float	(0X8050EC28);
	create_float	(0X8050EC2C);
	create_float	(0X8050EC30);
	create_float	(0X8050EC34);
	create_float	(0X8050EC38);
	create_float	(0X8050EC3C);
	create_float	(0X8050EC40);
	create_float	(0X8050EC44);
	create_insn	(0X8050EC48);
	set_name	(0X8050EC48,	"nn::audio::detail::ApplyI3dl2ReverbEffect4ch");
	create_insn	(x=0X8050EC5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EC78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EC84);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ECF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED06);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED10);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED20);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED34);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED42);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED48);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED54);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED66);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED74);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050ED84);
	op_stkvar	(x,	1);
	create_float	(0X8050ED88);
	create_float	(0X8050ED8C);
	create_float	(0X8050ED90);
	create_float	(0X8050ED94);
	create_float	(0X8050ED98);
	create_float	(0X8050ED9C);
	create_float	(0X8050EDA0);
	create_float	(0X8050EDA4);
	create_insn	(x=0X8050EDA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EDF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE28);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EE94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EEA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EEDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF12);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EF82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050EFDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F042);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F092);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F130);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F14E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F156);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F15E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F166);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F16E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F176);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F18A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F1D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F1DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F1EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F230);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F232);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F240);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F282);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F284);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F2D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F2DA);
	op_stkvar	(x,	1);
	create_float	(0X8050F2F0);
	create_float	(0X8050F2F4);
	create_float	(0X8050F2F8);
	create_float	(0X8050F2FC);
	create_float	(0X8050F300);
	create_float	(0X8050F304);
	create_float	(0X8050F308);
	create_float	(0X8050F30C);
	create_float	(0X8050F310);
	create_float	(0X8050F314);
	create_float	(0X8050F318);
	create_float	(0X8050F31C);
	create_float	(0X8050F320);
	create_float	(0X8050F324);
	create_float	(0X8050F328);
	create_float	(0X8050F32C);
	create_insn	(0X8050F330);
	set_name	(0X8050F330,	"nn::audio::detail::ApplyI3dl2ReverbEffect6ch");
	create_insn	(x=0X8050F342);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F368);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F374);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F37C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F380);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F384);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F388);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F392);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F396);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F3FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F406);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F412);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F41E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F426);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F42C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F432);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F438);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F43E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F446);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F44C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F452);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F45A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F460);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F462);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F464);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F468);
	op_stkvar	(x,	1);
	create_float	(0X8050F470);
	create_float	(0X8050F474);
	create_float	(0X8050F478);
	create_float	(0X8050F47C);
	create_float	(0X8050F480);
	create_float	(0X8050F484);
	create_float	(0X8050F488);
	create_float	(0X8050F48C);
	create_float	(0X8050F490);
	create_float	(0X8050F494);
	create_float	(0X8050F498);
	create_float	(0X8050F49C);
	create_float	(0X8050F4A0);
	create_float	(0X8050F4A4);
	create_float	(0X8050F4A8);
	create_float	(0X8050F4AC);
	create_float	(0X8050F4B0);
	create_float	(0X8050F4B4);
	create_float	(0X8050F4B8);
	create_float	(0X8050F4BC);
	create_float	(0X8050F4C0);
	create_float	(0X8050F4C4);
	create_float	(0X8050F4C8);
	create_float	(0X8050F4CC);
	create_insn	(x=0X8050F4D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F4EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F50A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F518);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F52A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F53C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F54E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F560);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F572);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F584);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F596);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F5A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F5BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F5FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F628);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F640);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F676);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F6A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F6C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F6E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F702);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F720);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F77A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F83A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F8D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F8F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F8FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F902);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F90A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F912);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F91A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F920);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F972);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F974);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050F9CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FA0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FA16);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FA60);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FA62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FABA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FB3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FB4C);
	op_stkvar	(x,	1);
	create_insn	(0X8050FB64);
	set_name	(0X8050FB64,	"nn::audio::InitializeI3dl2ReverbEffect");
	create_insn	(x=0X8050FB7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FB90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FBA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FBAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FBB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FBB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FBBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FBCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FBD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FBEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FC78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FC92);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FCDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FCF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FD00);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FD08);
	op_stkvar	(x,	1);
	set_cmt	(0X8050FD8C,	"param",	0);
	create_insn	(x=0X8050FD8C);
	op_stkvar	(x,	1);
	set_cmt	(0X8050FD8E,	"state",	0);
	set_cmt	(0X8050FD90,	"doReset",	0);
	create_float	(0X8050FDA4);
	create_insn	(0X8050FDA8);
	set_name	(0X8050FDA8,	"nn::audio::UpdateI3dl2ReverbEffectParameter");
	create_insn	(0X8050FE28);
	create_insn	(x=0X8050FE46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8050FED0);
	create_insn	(x=0X8050FEEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FF38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FF40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8050FF72);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FF76);
	op_stkvar	(x,	1);
	create_insn	(x=0X8050FF7C);
	op_stkvar	(x,	1);
	create_insn	(0X8050FF94);
	create_insn	(0X8050FFA6);
	create_insn	(x=0X8050FFC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510098);
	op_stkvar	(x,	1);
	create_insn	(0X805100AA);
	create_insn	(0X805100B6);
	create_insn	(0X805100BE);
	create_insn	(0X805100D2);
	create_insn	(0X805100DE);
	create_float	(0X805100EC);
	create_float	(0X805100F0);
	create_float	(0X805100F4);
	create_float	(0X805100F8);
	create_float	(0X805100FC);
	create_float	(0X80510100);
	create_float	(0X80510104);
	create_insn	(0X80510108);
	create_insn	(x=0X8051013A);
	op_hex		(x,	1);
	create_insn	(x=0X8051016A);
	op_hex		(x,	1);
	create_insn	(0X805101C6);
	create_insn	(0X805101EA);
	create_insn	(x=0X80510216);
	op_hex		(x,	1);
	create_insn	(0X80510222);
	create_insn	(0X80510270);
	create_insn	(x=0X80510298);
	op_hex		(x,	1);
	create_insn	(0X805102A4);
	create_insn	(x=0X805102F2);
	op_hex		(x,	1);
	create_insn	(0X805102FE);
	create_insn	(x=0X8051034C);
	op_hex		(x,	1);
	create_insn	(0X80510358);
	create_insn	(x=0X805103A6);
	op_hex		(x,	1);
	create_insn	(0X805103B2);
	create_insn	(x=0X80510400);
	op_hex		(x,	1);
	create_insn	(0X8051040C);
	create_insn	(0X8051041A);
	create_insn	(x=0X80510466);
	op_hex		(x,	1);
	create_insn	(0X80510472);
	create_insn	(0X80510480);
	create_insn	(x=0X805104C6);
	op_hex		(x,	1);
	create_insn	(0X805104D2);
	create_insn	(0X805104E2);
	create_insn	(x=0X80510502);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051050A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510534);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510538);
	op_stkvar	(x,	1);
	create_insn	(x=0X805105BC);
	op_stkvar	(x,	1);
	create_insn	(0X805105D6);
	create_insn	(x=0X80510622);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051062E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510636);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510640);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051068C);
	create_insn	(x=0X805106AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805106AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805106B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805107BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051085C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X805108A8);
	create_float	(0X805108AC);
	create_float	(0X805108B0);
	create_float	(0X805108B4);
	create_float	(0X805108B8);
	create_float	(0X805108BC);
	create_float	(0X805108C0);
	create_float	(0X805108C4);
	create_float	(0X805108C8);
	create_float	(0X805108CC);
	create_float	(0X805108D0);
	create_float	(0X805108D4);
	create_insn	(x=0X805108D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805109F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805109F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510A0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80510A6E);
	create_insn	(0X80510A7E);
	create_insn	(0X80510A8E);
	create_insn	(0X80510A9E);
	create_insn	(0X80510AAA);
	create_insn	(0X80510AC8);
	create_insn	(0X80510ACE);
	create_insn	(x=0X80510AD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510AD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510ADA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510ADE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510AE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510AEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X80510AF4);
	create_float	(0X80510AF8);
	create_insn	(0X80510AFC);
	set_name	(0X80510AFC,	"ApplyI3dl2ReverbEffect");
	create_insn	(x=0X80510B12);
	op_hex		(x,	1);
	set_cmt	(0X80510B1A,	"sampleCount",	0);
	create_insn	(x=0X80510B1A);
	op_stkvar	(x,	1);
	set_cmt	(0X80510B20,	"switch 6 cases",	0);
	set_cmt	(0X80510B26,	"switch jump",	0);
	set_cmt	(0X80510B2A,	"jump table for switch statement",	0);
	create_byte	(0X80510B2A);
	set_name	(0X80510B2A,	"jpt_80510B26");
	create_byte	(0X80510B2B);
	create_byte	(0X80510B2C);
	create_byte	(0X80510B2D);
	create_byte	(0X80510B2E);
	create_byte	(0X80510B2F);
	set_cmt	(0X80510B30,	"jumptable 80510B26 case 1",	1);
	create_insn	(0X80510B30);
	create_insn	(0X80510B42);
	set_cmt	(0X80510B46,	"a2",	0);
	set_cmt	(0X80510B48,	"result",	0);
	set_cmt	(0X80510B4E,	"a3",	0);
	set_cmt	(0X80510B5E,	"jumptable 80510B26 case 4",	1);
	create_insn	(0X80510B5E);
	set_cmt	(0X80510B70,	"jumptable 80510B26 case 2",	1);
	create_insn	(0X80510B70);
	set_cmt	(0X80510B82,	"jumptable 80510B26 case 6",	1);
	create_insn	(0X80510B82);
	set_cmt	(0X80510B84,	"inputs",	0);
	set_cmt	(0X80510B86,	"outputs",	0);
	set_cmt	(0X80510B94,	"jumptable 80510B26 default case, cases 3,5",	1);
	create_insn	(0X80510B94);
	set_name	(0X80510B94,	"def_80510B26");
	set_cmt	(0X80510B98,	"a2",	0);
	set_cmt	(0X80510B9A,	"result",	0);
	set_cmt	(0X80510BA0,	"a3",	0);
	create_insn	(0X80510BB0);
	create_insn	(x=0X80510BB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510BBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510BC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510BCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80510D34);
	set_name	(0X80510D34,	"nn::audio::InitializeCompressorEffect");
	create_insn	(0X80510D8C);
	create_insn	(x=0X80510E3A);
	op_hex		(x,	1);
	create_float	(0X80510E54);
	create_float	(0X80510E58);
	create_float	(0X80510E5C);
	create_float	(0X80510E60);
	create_float	(0X80510E64);
	create_float	(0X80510E68);
	create_float	(0X80510E6C);
	create_float	(0X80510E70);
	create_float	(0X80510E74);
	create_insn	(0X80510E78);
	set_name	(0X80510E78,	"nn::audio::SetCompressorEffectParameter");
	create_insn	(0X80510EAE);
	create_insn	(x=0X80510F5C);
	op_hex		(x,	1);
	create_float	(0X80510F74);
	create_float	(0X80510F78);
	create_float	(0X80510F7C);
	create_float	(0X80510F80);
	create_float	(0X80510F84);
	create_float	(0X80510F88);
	create_float	(0X80510F8C);
	create_float	(0X80510F90);
	create_float	(0X80510F94);
	create_insn	(0X80510F98);
	set_name	(0X80510F98,	"nn::audio::ApplyCompressorEffect");
	create_insn	(x=0X80510FB8);
	op_hex		(x,	1);
	create_insn	(x=0X80510FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80510FEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80510FFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80511060);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511064);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051111C);
	op_hex		(x,	1);
	create_insn	(x=0X8051112A);
	op_hex		(x,	1);
	create_insn	(x=0X8051116A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051127E);
	op_stkvar	(x,	1);
	create_insn	(0X80511284);
	create_insn	(0X8051129C);
	create_insn	(0X805112D6);
	create_insn	(x=0X80511346);
	op_hex		(x,	1);
	create_insn	(0X805113AC);
	create_float	(0X8051140C);
	create_float	(0X80511410);
	create_float	(0X80511414);
	create_float	(0X80511418);
	create_float	(0X8051141C);
	create_float	(0X80511420);
	create_float	(0X80511424);
	create_float	(0X80511428);
	create_float	(0X8051142C);
	create_float	(0X80511430);
	create_insn	(0X80511434);
	set_cmt	(0X80511438,	"a2",	0);
	set_cmt	(0X8051143A,	"result",	0);
	set_cmt	(0X80511440,	"a3",	0);
	create_insn	(0X80511450);
	create_insn	(0X8051147E);
	create_insn	(x=0X80511482);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80511486);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051148A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051148E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80511492);
	op_stkvar	(x,	1);
	create_insn	(x=0X80511494);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80511498);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_float	(0X805114A4);
	create_float	(0X805114A8);
	create_float	(0X805114AC);
	create_float	(0X805114B0);
	create_float	(0X805114B4);
	create_float	(0X805114B8);
	create_float	(0X805114BC);
	create_float	(0X805114C0);
	create_float	(0X805114C4);
	create_float	(0X805114C8);
	create_float	(0X805114CC);
	create_float	(0X805114D0);
	create_float	(0X805114D4);
	create_float	(0X805114D8);
	create_float	(0X805114DC);
	create_insn	(0X805125C0);
	create_insn	(x=0X805125CA);
	op_stkvar	(x,	1);
	create_insn	(0X80512608);
	create_insn	(0X8051263A);
	create_insn	(0X80512662);
	create_insn	(0X8051268A);
	create_insn	(x=0X805126B0);
	op_hex		(x,	1);
	create_insn	(x=0X805126B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805126BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805126C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805126D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805126D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805126E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805126F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512702);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512744);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512758);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512762);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512770);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051279A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051279C);
	op_stkvar	(x,	1);
	create_insn	(0X805127A6);
	create_insn	(x=0X805127CC);
	op_hex		(x,	1);
	create_insn	(x=0X805127D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805127DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805127DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805127F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805127F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512804);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512812);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512818);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512862);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512876);
	op_stkvar	(x,	1);
	create_insn	(x=0X80512880);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051288E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805128B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805128BA);
	op_stkvar	(x,	1);
	create_insn	(0X805128C2);
	create_insn	(0X805128F6);
	create_insn	(0X80512928);
	create_insn	(0X80512952);
	create_insn	(0X8051297C);
	create_insn	(0X805129AE);
	create_insn	(0X80512AB0);
	create_insn	(x=0X80512AB8);
	op_stkvar	(x,	1);
	create_insn	(0X80512B22);
	create_insn	(0X80512B7E);
	create_insn	(0X80512BE6);
	create_insn	(0X80512C4E);
	create_insn	(x=0X80512C78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512C84);
	op_hex		(x,	1);
	create_insn	(x=0X80512C98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80512CDC);
	create_insn	(x=0X80512D04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80512D10);
	op_hex		(x,	1);
	create_insn	(x=0X80512D24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80512D6C);
	create_insn	(0X80512D74);
	create_insn	(0X80512D9E);
	create_insn	(0X80512DC8);
	create_insn	(0X80512DF0);
	create_insn	(0X80512E18);
	create_insn	(0X80512E4E);
	create_insn	(0X80512E84);
	create_insn	(0X80512ECC);
	create_insn	(0X80512F14);
	create_insn	(0X80512F50);
	create_insn	(0X80513164);
	create_insn	(x=0X80513176);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051317A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051317E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513186);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051318C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513190);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051319A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805131A6);
	op_hex		(x,	1);
	create_insn	(x=0X805131AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805131B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805131F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513218);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051321E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805132B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805132CC);
	op_stkvar	(x,	1);
	create_insn	(0X8051331C);
	create_insn	(x=0X8051332C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051332E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513332);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051333C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513340);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513344);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051334C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513354);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051335C);
	op_hex		(x,	1);
	create_insn	(x=0X80513360);
	op_stkvar	(x,	1);
	create_insn	(x=0X805133F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051340A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513412);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051341C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051342E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805134D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805134D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805134DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805134EE);
	op_stkvar	(x,	1);
	create_insn	(0X80513500);
	create_insn	(x=0X8051350A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051351A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051352A);
	op_stkvar	(x,	1);
	create_insn	(0X80513538);
	create_insn	(0X8051356C);
	create_insn	(x=0X80513572);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513576);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051357A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051357E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513582);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513584);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513588);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805135C0);
	create_insn	(x=0X805135CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805135D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805135D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805135F6);
	op_stkvar	(x,	1);
	create_insn	(0X805135FE);
	create_insn	(x=0X80513638);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051364C);
	op_stkvar	(x,	1);
	create_insn	(0X80513650);
	create_insn	(x=0X8051365C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513668);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513682);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051368C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051368E);
	op_stkvar	(x,	1);
	create_insn	(0X805136C8);
	create_insn	(x=0X805136D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805136DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805136F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805136F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513702);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513726);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513736);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051374C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513762);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513788);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513798);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051379E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805137A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805137CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805137CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805137D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805137E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051383E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513844);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051384C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513872);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513880);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513886);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051388E);
	op_stkvar	(x,	1);
	create_insn	(x=0X805138AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805138B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513906);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051390C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513914);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513936);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513942);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513948);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513950);
	op_stkvar	(x,	1);
	create_insn	(0X8051397A);
	create_insn	(x=0X805139A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805139B6);
	op_stkvar	(x,	1);
	create_insn	(0X805139BA);
	create_insn	(x=0X805139C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805139D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805139EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805139F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805139F6);
	op_stkvar	(x,	1);
	create_insn	(0X80513A30);
	create_insn	(x=0X80513A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513A58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513A5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80513A92);
	create_insn	(x=0X80513A9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513ABE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513AC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513AF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513AFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513B26);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513B56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513B5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513B86);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513B94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513B9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513BA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513BC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513C22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513C28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513C52);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513C5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513C64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513C6E);
	op_stkvar	(x,	1);
	create_insn	(0X80513C96);
	create_insn	(x=0X80513CBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513CD2);
	op_stkvar	(x,	1);
	create_insn	(0X80513CD6);
	create_insn	(x=0X80513CE2);
	op_stkvar	(x,	1);
	set_cmt	(0X80513CEC,	"jumptable 80513CFE default case",	1);
	create_insn	(x=0X80513CEC);
	op_stkvar	(x,	1);
	set_name	(0X80513CEC,	"def_80513CFE");
	set_cmt	(0X80513CFA,	"switch 6 cases",	0);
	set_cmt	(0X80513CFE,	"switch jump",	0);
	set_cmt	(0X80513D02,	"jump table for switch statement",	0);
	create_word	(0X80513D02);
	set_name	(0X80513D02,	"jpt_80513CFE");
	create_word	(0X80513D04);
	create_word	(0X80513D06);
	create_word	(0X80513D08);
	create_word	(0X80513D0A);
	create_word	(0X80513D0C);
	set_cmt	(0X80513D0E,	"jumptable 80513CFE case 0",	1);
	create_insn	(x=0X80513D0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513D1A);
	op_stkvar	(x,	1);
	set_cmt	(0X80513D54,	"jumptable 80513CFE case 4",	1);
	create_insn	(0X80513D54);
	create_insn	(x=0X80513D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513D7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513D84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513D8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513DB0);
	op_stkvar	(x,	1);
	set_cmt	(0X80513DC0,	"jumptable 80513CFE case 2",	1);
	create_insn	(0X80513DC0);
	create_insn	(x=0X80513DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513DEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513DF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513DFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513E1C);
	op_stkvar	(x,	1);
	set_cmt	(0X80513E2C,	"jumptable 80513CFE case 3",	1);
	create_insn	(0X80513E2C);
	create_insn	(x=0X80513E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513E56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513E5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513E66);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513E88);
	op_stkvar	(x,	1);
	set_cmt	(0X80513E98,	"jumptable 80513CFE case 1",	1);
	create_insn	(0X80513E98);
	create_insn	(x=0X80513EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513EC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513EC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513ED2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513EF4);
	op_stkvar	(x,	1);
	set_cmt	(0X80513F04,	"jumptable 80513CFE case 5",	1);
	create_insn	(0X80513F04);
	create_insn	(x=0X80513F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513F34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80513F6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513F76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513FD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513FD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80513FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514000);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051400E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514014);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051401C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051403A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514042);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051409C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805140A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805140AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805140CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805140D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805140DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805140E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514110);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514118);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514172);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514178);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514180);
	op_stkvar	(x,	1);
	create_insn	(x=0X805141A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805141AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805141B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805141BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805141E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805141EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514248);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051424E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514256);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514278);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514284);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051428A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514292);
	op_stkvar	(x,	1);
	create_insn	(x=0X805142BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805142C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051431E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514324);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051432C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051434E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051435A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514360);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514368);
	op_stkvar	(x,	1);
	create_insn	(0X80514392);
	create_insn	(0X8051439A);
	create_insn	(x=0X805143A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805143A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805143A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805143AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805143B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805143B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805143B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80514A30);
	create_insn	(x=0X80514A3A);
	op_stkvar	(x,	1);
	create_insn	(0X80514A70);
	create_insn	(0X80514A9A);
	create_insn	(0X80514AC2);
	create_insn	(0X80514AEA);
	create_insn	(x=0X80514B10);
	op_hex		(x,	1);
	create_insn	(x=0X80514B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514B1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514B46);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514B62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514BC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514BF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514BF4);
	op_stkvar	(x,	1);
	create_insn	(0X80514BFE);
	create_insn	(x=0X80514C24);
	op_hex		(x,	1);
	create_insn	(x=0X80514C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514C32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514C4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514C62);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514CBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514CCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514CE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X80514D0A);
	op_stkvar	(x,	1);
	create_insn	(0X80514D12);
	create_insn	(0X80514D40);
	create_insn	(0X80514E20);
	create_insn	(x=0X80514E28);
	op_stkvar	(x,	1);
	create_insn	(0X80514E78);
	create_insn	(0X80514EBA);
	create_insn	(0X80514F08);
	create_insn	(0X80514F56);
	create_insn	(x=0X80514F7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80514F88);
	op_hex		(x,	1);
	create_insn	(x=0X80514F9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80514FD2);
	create_insn	(x=0X80514FF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515002);
	op_hex		(x,	1);
	create_insn	(x=0X80515016);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051504C);
	create_insn	(0X80515080);
	create_insn	(0X80515224);
	set_name	(0X80515224,	"Mailbox::Open");
	create_insn	(0X8051522E);
	set_name	(0X8051522E,	"Mailbox::Close");
	create_insn	(0X80515238);
	set_name	(0X80515238,	"Mailbox::Send");
	create_insn	(0X8051524C);
	create_insn	(x=0X80515252);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515256);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051525A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051525E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515262);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515264);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515268);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515274);
	set_name	(0X80515274,	"Mailbox::Receive_Wrap");
	create_insn	(0X80515282);
	create_insn	(x=0X80515296);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051529A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805152A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805152A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805152C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805152DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805152EA);
	create_insn	(x=0X805152EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805152FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515300);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515304);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515310);
	create_insn	(x=0X80515314);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515318);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051531C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515320);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515324);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515326);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051532A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515336);
	create_insn	(x=0X8051533A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051533E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515342);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515346);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051534A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051534C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515350);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051535C);
	create_insn	(x=0X80515374);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515378);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051537C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515380);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515384);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515386);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051538A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515396);
	create_insn	(0X805153BA);
	create_insn	(0X805153BC);
	create_insn	(x=0X805153C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805153D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805153DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805153F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805153F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515400);
	create_insn	(0X8051540A);
	create_insn	(0X80515414);
	create_insn	(0X80515438);
	create_insn	(0X80515444);
	create_insn	(0X80515450);
	create_insn	(0X8051545C);
	set_name	(0X8051545C,	"OpusDecoder_Init");
	create_insn	(0X80515460);
	set_name	(0X80515460,	"OpusDecoder_Main");
	create_insn	(0X80515486);
	create_insn	(x=0X8051548A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051548E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515492);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515496);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051549A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051549C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805154A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805154AC);
	create_insn	(x=0X805154B4);
	op_hex		(x,	1);
	create_insn	(x=0X805154B8);
	op_hex		(x,	1);
	create_insn	(x=0X805154C0);
	op_hex		(x,	1);
	create_insn	(x=0X805154C4);
	op_hex		(x,	1);
	create_insn	(x=0X805154E4);
	op_hex		(x,	1);
	create_insn	(x=0X805154F4);
	op_hex		(x,	1);
	create_insn	(x=0X805154FC);
	op_hex		(x,	1);
	create_insn	(x=0X80515500);
	op_hex		(x,	1);
	create_insn	(x=0X80515504);
	op_hex		(x,	1);
	create_insn	(x=0X80515508);
	op_hex		(x,	1);
	create_insn	(x=0X8051550C);
	op_hex		(x,	1);
	create_insn	(x=0X80515514);
	op_hex		(x,	1);
	create_insn	(x=0X80515524);
	op_hex		(x,	1);
	create_insn	(x=0X80515534);
	op_hex		(x,	1);
	create_insn	(0X80515540);
	create_dword	(0X80515544);
	create_insn	(x=0X80515578);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515584);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051558C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805155A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805155A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805155AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805155B0);
	set_name	(0X805155B0,	"Debug_Error1");
	create_insn	(0X805155C8);
	create_insn	(x=0X805155D0);
	op_hex		(x,	1);
	create_insn	(x=0X805155D8);
	op_hex		(x,	1);
	create_insn	(x=0X805155E0);
	op_hex		(x,	1);
	create_insn	(x=0X805155EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805155EE);
	op_plain_offset	(x,	1,	0X80306180);
	op_plain_offset	(x,	129,	0X80306180);
	create_insn	(x=0X805155FA);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805155FE);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515602);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	set_cmt	(0X80515620,	"char *",	0);
	create_insn	(x=0X80515622);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515624);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515626);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051562E);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515636);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051563E);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	set_cmt	(0X80515644,	"char *",	0);
	create_insn	(x=0X80515646);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051564E);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	set_cmt	(0X80515650,	"char *",	0);
	create_insn	(x=0X80515652);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515654);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515656);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515658);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X8051565E);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	set_cmt	(0X80515660,	"char *",	0);
	create_insn	(x=0X80515666);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051566C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051566E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515670);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515672);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515674);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515676);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515678);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X8051567A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051567C);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X8051567E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515680);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515682);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515684);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515686);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515688);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X8051568A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051568C);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X8051568E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515690);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515692);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515694);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515696);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515698);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X8051569A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051569C);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X8051569E);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805156A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805156A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156A4);
	op_hex		(x,	1);
	create_insn	(x=0X805156B4);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805156B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805156B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156BA);
	op_hex		(x,	1);
	create_insn	(x=0X805156BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805156CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805156D0);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805156D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X805156D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156D6);
	op_hex		(x,	1);
	create_insn	(x=0X805156DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805156E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805156EC);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X805156EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805156F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156F2);
	op_hex		(x,	1);
	create_insn	(x=0X805156F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805156F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515702);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515708);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X8051570A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051570C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051570E);
	op_hex		(x,	1);
	create_insn	(x=0X80515712);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515714);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051571E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515724);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515726);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051572A);
	op_hex		(x,	1);
	create_insn	(x=0X8051572E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515730);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051573A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515740);
	op_plain_offset	(x,	1,	0X80306080);
	op_plain_offset	(x,	129,	0X80306080);
	create_insn	(x=0X80515742);
	op_hex		(x,	1);
	set_cmt	(0X80515746,	"switch 15 cases",	0);
	set_cmt	(0X8051574C,	"switch jump",	0);
	set_cmt	(0X80515750,	"jump table for switch statement",	0);
	create_byte	(0X80515750);
	set_name	(0X80515750,	"jpt_8051574C");
	create_byte	(0X80515751);
	create_byte	(0X80515752);
	create_byte	(0X80515753);
	create_byte	(0X80515754);
	create_byte	(0X80515755);
	create_byte	(0X80515756);
	create_byte	(0X80515757);
	create_byte	(0X80515758);
	create_byte	(0X80515759);
	create_byte	(0X8051575A);
	create_byte	(0X8051575B);
	create_byte	(0X8051575C);
	create_byte	(0X8051575D);
	create_byte	(0X8051575E);
	set_cmt	(0X80515760,	"jumptable 8051574C case 17",	1);
	create_insn	(x=0X80515760);
	op_stkvar	(x,	1);
	set_cmt	(0X80515764,	"jumptable 8051574C case 18",	1);
	create_insn	(x=0X80515764);
	op_stkvar	(x,	1);
	set_cmt	(0X80515768,	"jumptable 8051574C case 19",	1);
	create_insn	(x=0X80515768);
	op_stkvar	(x,	1);
	set_cmt	(0X8051576C,	"jumptable 8051574C case 27",	1);
	create_insn	(x=0X8051576C);
	op_stkvar	(x,	1);
	set_cmt	(0X80515770,	"jumptable 8051574C case 31",	1);
	create_insn	(x=0X80515770);
	op_stkvar	(x,	1);
	set_cmt	(0X80515774,	"jumptable 8051574C default case, cases 20-26,28-30",	1);
	create_insn	(0X80515774);
	set_name	(0X80515774,	"def_8051574C");
	create_insn	(x=0X80515776);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051577E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515784,	"a2",	0);
	create_dword	(x=0X805157A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805157A8);
	create_dword	(0X805157AC);
	create_dword	(x=0X805157B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805157B4);
	create_dword	(0X805157B8);
	create_dword	(0X805157BC);
	create_dword	(x=0X805157C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805157E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805157E4);
	set_name	(0X805157E4,	"platform_mmu_map_pages");
	create_insn	(x=0X805157E6);
	op_hex		(x,	1);
	create_insn	(x=0X805157EA);
	op_hex		(x,	1);
	create_insn	(x=0X805157F0);
	op_hex		(x,	1);
	create_insn	(x=0X805157F4);
	op_hex		(x,	1);
	create_insn	(0X8051580C);
	create_insn	(0X8051580E);
	set_name	(0X8051580E,	"platform_mmu_unmap_pages");
	create_insn	(x=0X80515810);
	op_hex		(x,	1);
	create_insn	(x=0X80515814);
	op_hex		(x,	1);
	create_insn	(x=0X80515818);
	op_hex		(x,	1);
	create_insn	(x=0X8051581C);
	op_hex		(x,	1);
	create_insn	(0X80515830);
	create_insn	(0X80515832);
	create_insn	(0X80515852);
	create_insn	(0X80515880);
	set_cmt	(0X80515882,	"char *",	0);
	create_dword	(0X80515894);
	create_insn	(x=0X80515898);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051589C);
	op_hex		(x,	1);
	create_insn	(x=0X805158A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805158A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805158A8,	"char *",	0);
	create_insn	(x=0X805158AC);
	op_plain_offset	(x,	1,	0X81102108);
	op_plain_offset	(x,	129,	0X81102108);
	create_insn	(x=0X805158AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805158B6);
	op_plain_offset	(x,	1,	0X81102F60);
	op_plain_offset	(x,	129,	0X81102F60);
	create_insn	(x=0X805158B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805158BC);
	op_hex		(x,	1);
	create_insn	(x=0X805158C0);
	op_hex		(x,	1);
	create_dword	(x=0X805158CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805158D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805158D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805158D8);
	create_dword	(x=0X805158DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805158E0);
	create_dword	(x=0X805158E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515904);
	set_cmt	(0X80515916,	"char *",	0);
	create_insn	(x=0X80515916);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515924);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515928);
	op_stkvar	(x,	1);
	create_insn	(0X80515930);
	create_dword	(0X80515934);
	create_dword	(x=0X80515938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051593C);
	create_dword	(x=0X80515940);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515944);
	create_insn	(0X805159E8);
	set_name	(0X805159E8,	"nullsub_2");
	create_insn	(0X805159EC);
	create_insn	(x=0X805159F8);
	op_hex		(x,	1);
	create_insn	(x=0X805159FC);
	op_hex		(x,	1);
	create_insn	(x=0X80515A00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515A32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515A4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515A50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515A54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515A58);
	create_insn	(0X80515A5C);
	set_name	(0X80515A5C,	"platform_remap_mappings");
	create_insn	(x=0X80515A68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515A82,	"char *",	0);
	set_cmt	(0X80515A8E,	"char *",	0);
	create_insn	(x=0X80515A8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515ABA,	"char *",	0);
	create_insn	(x=0X80515ABA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515ACA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515ACE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515AD0,	"char *",	0);
	create_insn	(x=0X80515AD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515ADC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515AE8,	"char *",	0);
	create_insn	(x=0X80515AE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515AFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515B00,	"char *",	0);
	create_insn	(x=0X80515B00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515B06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515B0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515B16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515B18,	"char *",	0);
	create_insn	(x=0X80515B18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515B1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515B30,	"char *",	0);
	create_insn	(x=0X80515B30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515B48,	"char *",	0);
	create_insn	(x=0X80515B48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515B60,	"char *",	0);
	create_insn	(x=0X80515B60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515B6C,	"char *",	0);
	create_insn	(x=0X80515B6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515B8E);
	create_dword	(0X80515BD8);
	create_dword	(0X80515BDC);
	create_dword	(x=0X80515BE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515BE4);
	create_dword	(0X80515BE8);
	create_dword	(0X80515BEC);
	create_dword	(0X80515BF0);
	create_dword	(x=0X80515BF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515BF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515BFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515C00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515C04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515C08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515C0C);
	create_dword	(x=0X80515C10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515C14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515C18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515C1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515C20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515C24);
	create_dword	(x=0X80515C28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515C2C);
	create_dword	(0X80515C30);
	create_dword	(x=0X80515C34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515C38);
	create_dword	(0X80515C3C);
	create_dword	(0X80515C40);
	create_dword	(0X80515C44);
	create_dword	(0X80515C48);
	create_dword	(0X80515C4C);
	create_dword	(0X80515C50);
	create_dword	(0X80515C54);
	create_dword	(0X80515C58);
	create_dword	(0X80515C5C);
	create_dword	(0X80515C60);
	create_dword	(0X80515C64);
	create_dword	(0X80515C68);
	create_dword	(0X80515C6C);
	create_insn	(0X80515C70);
	set_name	(0X80515C70,	"platform_init");
	create_insn	(x=0X80515C76);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515C8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515C9C,	"char *",	0);
	set_cmt	(0X80515CA6,	"func",	0);
	set_cmt	(0X80515CA8,	"arg",	0);
	set_cmt	(0X80515CAA,	"prio",	0);
	set_cmt	(0X80515CAC,	"stack_size",	0);
	create_insn	(x=0X80515CAC);
	op_stkvar	(x,	1);
	set_cmt	(0X80515CAE,	"name",	0);
	create_insn	(x=0X80515CBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515CBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515CC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80515CC4);
	op_stkvar	(x,	1);
	set_cmt	(0X80515CE4,	"stack_size",	0);
	create_insn	(x=0X80515CE4);
	op_stkvar	(x,	1);
	set_cmt	(0X80515CE6,	"arg",	0);
	set_cmt	(0X80515CE8,	"name",	0);
	set_cmt	(0X80515CEA,	"prio",	0);
	set_cmt	(0X80515CEC,	"func",	0);
	create_insn	(x=0X80515CF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515CF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515D00,	"stack_size",	0);
	create_insn	(x=0X80515D00);
	op_stkvar	(x,	1);
	set_cmt	(0X80515D02,	"arg",	0);
	set_cmt	(0X80515D04,	"name",	0);
	set_cmt	(0X80515D06,	"prio",	0);
	set_cmt	(0X80515D08,	"func",	0);
	create_insn	(x=0X80515D10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515D14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515D1C,	"char *",	0);
	set_cmt	(0X80515D2C,	"a1",	0);
	create_insn	(0X80515D2C);
	create_dword	(x=0X80515D38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515D3C);
	create_dword	(0X80515D40);
	set_name	(0X80515D40,	"func");
	create_dword	(0X80515D44);
	create_dword	(0X80515D48);
	create_dword	(0X80515D4C);
	create_dword	(0X80515D50);
	create_dword	(x=0X80515D54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515D5C);
	create_dword	(0X80515D60);
	create_dword	(x=0X80515D64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515D68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515D6C);
	create_dword	(0X80515D70);
	set_name	(0X80515D70,	"a1");
	create_insn	(x=0X80515D74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515D76);
	op_plain_offset	(x,	1,	0XA47AD8);
	op_plain_offset	(x,	129,	0XA47AD8);
	create_insn	(x=0X80515D7C);
	op_plain_offset	(x,	1,	0XA47AD8);
	op_plain_offset	(x,	129,	0XA47AD8);
	create_insn	(x=0X80515D84);
	op_plain_offset	(x,	1,	0XA47AD8);
	op_plain_offset	(x,	129,	0XA47AD8);
	create_insn	(x=0X80515D8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515D8C);
	op_plain_offset	(x,	1,	0XA47AD8);
	op_plain_offset	(x,	129,	0XA47AD8);
	create_insn	(0X80515D9A);
	create_insn	(0X80515DA4);
	create_dword	(x=0X80515DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515DAC);
	create_insn	(x=0X80515DCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515DDA,	"char *",	0);
	create_insn	(0X80515DDA);
	create_insn	(0X80515DE6);
	create_dword	(0X80515DEC);
	create_dword	(x=0X80515DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515DF4);
	create_insn	(0X80515DF8);
	create_insn	(x=0X80515E18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80515E28,	"char *",	0);
	create_insn	(0X80515E28);
	create_insn	(0X80515E32);
	create_dword	(0X80515E38);
	create_dword	(x=0X80515E3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80515E40);
	create_insn	(0X80515E44);
	create_insn	(x=0X80515E6A);
	op_hex		(x,	1);
	create_insn	(0X80515E7E);
	create_insn	(0X80515E84);
	create_insn	(x=0X80515EAA);
	op_hex		(x,	1);
	create_insn	(0X80515EBE);
	create_insn	(0X80515EC4);
	create_insn	(x=0X80515ECA);
	op_hex		(x,	1);
	create_insn	(x=0X80515EE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80515F04);
	create_insn	(x=0X80515F1A);
	op_hex		(x,	1);
	create_insn	(0X80515F3E);
	create_insn	(0X80515F48);
	create_dword	(x=0X80515F60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80515FC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515FC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515FD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515FD8);
	create_insn	(x=0X80515FDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80515FE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80515FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80515FF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80515FF8);
	set_cmt	(0X80516002,	"char *",	0);
	create_insn	(x=0X80516002);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051600E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516030,	"char *",	0);
	create_dword	(x=0X80516050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516054);
	create_dword	(x=0X80516058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051605C);
	create_dword	(0X80516060);
	create_insn	(0X805160BC);
	create_insn	(x=0X805160EC);
	op_hex		(x,	1);
	create_insn	(0X80516100);
	create_insn	(0X80516108);
	create_insn	(x=0X8051612E);
	op_hex		(x,	1);
	set_cmt	(0X80516140,	"char *",	0);
	create_insn	(x=0X80516140);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051616A);
	op_hex		(x,	1);
	create_insn	(0X80516184);
	set_cmt	(0X805161A8,	"char *",	0);
	create_insn	(x=0X805161A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805161B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805161BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805161C0);
	set_cmt	(0X805161D4,	"char *",	0);
	create_dword	(0X805161E0);
	create_insn	(0X805161E4);
	create_insn	(0X80516206);
	create_insn	(0X8051620E);
	create_insn	(0X8051621C);
	create_insn	(x=0X8051621E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516220);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516236);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80516240);
	create_insn	(x=0X8051624A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051625A,	"char *",	0);
	create_insn	(x=0X8051626A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80516274);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516278);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051627C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516280);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516284);
	create_dword	(x=0X80516288);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051628C);
	create_insn	(x=0X8051628E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805162B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805162F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805162F4);
	op_hex		(x,	1);
	create_dword	(x=0X805162FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80516348);
	create_insn	(x=0X80516356);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051635C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516360);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051637E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516394);
	op_plain_offset	(x,	1,	0X81100604);
	op_plain_offset	(x,	129,	0X81100604);
	create_insn	(x=0X80516396);
	op_hex		(x,	1);
	create_insn	(x=0X8051639A);
	op_plain_offset	(x,	1,	0X81100604);
	op_plain_offset	(x,	129,	0X81100604);
	create_dword	(x=0X805163A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805163A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805163A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805163AC);
	create_dword	(x=0X805163B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805163B4);
	create_insn	(x=0X805163B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805163C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805163CA);
	op_hex		(x,	1);
	create_insn	(x=0X805163D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805163DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805163E8);
	op_hex		(x,	1);
	create_dword	(x=0X805163FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516400);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516404);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516408);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051640C);
	create_insn	(x=0X80516410);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516412);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516418);
	op_hex		(x,	1);
	create_insn	(x=0X80516422);
	op_hex		(x,	1);
	create_insn	(x=0X8051642A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051642E);
	op_hex		(x,	1);
	create_insn	(x=0X80516452);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516456);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516458);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051645C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051645E);
	op_plain_offset	(x,	1,	0X81100204);
	op_plain_offset	(x,	129,	0X81100204);
	create_insn	(x=0X80516464);
	op_hex		(x,	1);
	create_insn	(x=0X8051646A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051646E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516474);
	op_hex		(x,	1);
	create_dword	(x=0X80516484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051648C);
	create_dword	(x=0X80516490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516494);
	create_dword	(0X80516498);
	create_dword	(x=0X8051649C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805164A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805164A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805164F0);
	create_insn	(x=0X805164F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516556);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80516568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051656C);
	create_dword	(0X80516570);
	create_insn	(0X80516574);
	create_insn	(x=0X80516578);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805165DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805165F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805165F4);
	create_insn	(0X80516730);
	set_cmt	(0X80516736,	"char *",	0);
	create_dword	(0X80516748);
	create_dword	(0X8051674C);
	create_insn	(0X80516798);
	create_insn	(x=0X8051679A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805167A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805167B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805167D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805167D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805167FC);
	create_insn	(x=0X80516802);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516806);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516822);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516824);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516828);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051682A);
	op_stkvar	(x,	1);
	set_cmt	(0X80516836,	"char *",	0);
	create_insn	(x=0X8051683E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80516854);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516858);
	create_dword	(0X8051685C);
	create_dword	(0X80516860);
	create_dword	(0X80516864);
	create_dword	(0X80516868);
	create_dword	(x=0X8051686C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051687C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051687E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805168C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805168C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805168C8);
	create_insn	(0X805168CC);
	create_insn	(x=0X805168D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805168E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051690E);
	create_insn	(0X8051691C);
	create_dword	(x=0X80516934);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80516938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051693C);
	create_insn	(0X80516960);
	create_insn	(x=0X80516962);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051696C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516974,	"char *",	0);
	create_dword	(x=0X80516980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516984);
	create_dword	(x=0X80516988);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051698C);
	create_insn	(0X80516E4C);
	set_cmt	(0X80516E50,	"switch 4 cases",	0);
	set_cmt	(0X80516E54,	"switch jump",	0);
	set_cmt	(0X80516E58,	"jump table for switch statement",	0);
	create_byte	(0X80516E58);
	set_name	(0X80516E58,	"jpt_80516E54");
	create_byte	(0X80516E59);
	create_byte	(0X80516E5A);
	create_byte	(0X80516E5B);
	set_cmt	(0X80516E5C,	"jumptable 80516E54 case 2",	1);
	create_insn	(0X80516E5C);
	set_cmt	(0X80516E62,	"jumptable 80516E54 case 3",	1);
	create_insn	(0X80516E62);
	set_cmt	(0X80516E68,	"jumptable 80516E54 default case",	1);
	create_insn	(0X80516E68);
	set_name	(0X80516E68,	"def_80516E54");
	set_cmt	(0X80516E74,	"jumptable 80516E54 case 0",	1);
	create_insn	(0X80516E74);
	set_cmt	(0X80516E7A,	"jumptable 80516E54 case 1",	1);
	create_insn	(0X80516E7A);
	create_dword	(0X80516E8C);
	create_insn	(0X80516E90);
	set_cmt	(0X80516E92,	"a1",	0);
	create_insn	(x=0X80516E98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516EA0);
	op_hex		(x,	1);
	create_insn	(x=0X80516EA6);
	op_plain_offset	(x,	1,	0XF07EF000);
	op_plain_offset	(x,	129,	0XF07EF000);
	create_insn	(x=0X80516EA8);
	op_hex		(x,	1);
	create_insn	(x=0X80516EAC);
	op_plain_offset	(x,	1,	0XF07EF000);
	op_plain_offset	(x,	129,	0XF07EF000);
	set_cmt	(0X80516EB2,	"a2",	0);
	create_insn	(x=0X80516EB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516EB6,	"a1",	0);
	set_cmt	(0X80516EC4,	"a2",	0);
	create_insn	(x=0X80516EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516EC8,	"a1",	0);
	set_cmt	(0X80516ED6,	"a2",	0);
	create_insn	(x=0X80516ED6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516EDA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80516EE8,	"a1",	0);
	set_cmt	(0X80516EEA,	"a2",	0);
	create_insn	(x=0X80516EEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X80516EF8);
	create_dword	(x=0X80516EFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516F00);
	create_dword	(0X80516F04);
	create_dword	(x=0X80516F08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516F0C);
	create_insn	(x=0X80516F10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516F26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80516F38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516F3C);
	create_insn	(0X80516F88);
	create_insn	(x=0X80516F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516F9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516F9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80516FA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80516FA2);
	op_stkvar	(x,	1);
	set_cmt	(0X80516FA8,	"a3",	0);
	set_cmt	(0X80516FC0,	"a1",	0);
	create_insn	(0X80516FC0);
	create_dword	(0X80516FCC);
	create_dword	(0X80516FD0);
	create_dword	(x=0X80516FD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80516FD8);
	create_insn	(0X80516FDC);
	set_name	(0X80516FDC,	"get_cur_adsp_freq");
	create_dword	(0X80516FE4);
	create_insn	(x=0X80516FE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80516FF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805171B4);
	set_cmt	(0X805171BA,	"a3",	0);
	create_insn	(0X805171C6);
	set_cmt	(0X805171CE,	"a1",	0);
	set_cmt	(0X805171D0,	"a2",	0);
	create_insn	(0X805171DC);
	create_insn	(x=0X805171E2);
	op_hex		(x,	1);
	create_insn	(0X805171F6);
	create_insn	(0X8051720E);
	create_insn	(x=0X80517212);
	op_hex		(x,	1);
	create_insn	(0X8051721E);
	create_dword	(0X80517238);
	create_dword	(0X8051723C);
	create_dword	(0X80517240);
	create_dword	(0X80517244);
	create_dword	(0X80517248);
	create_insn	(x=0X8051724C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517252);
	op_hex		(x,	1);
	create_dword	(x=0X80517268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051726C);
	create_dword	(0X80517294);
	create_dword	(0X80517298);
	create_dword	(0X8051729C);
	create_insn	(0X805172A0);
	set_name	(0X805172A0,	"mbx_open");
	create_insn	(x=0X805172AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805172AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805172B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517308);
	op_stkvar	(x,	1);
	create_insn	(0X80517318);
	create_dword	(x=0X80517348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051734C);
	create_dword	(0X80517350);
	create_insn	(0X80517354);
	create_insn	(x=0X80517358);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517366);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517378);
	op_hex		(x,	1);
	create_insn	(0X80517396);
	create_insn	(x=0X805173A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805173C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805173C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805173C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805173CC);
	create_insn	(x=0X805173D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805173EA);
	create_insn	(x=0X80517418);
	op_hex		(x,	1);
	create_insn	(x=0X8051742A);
	op_hex		(x,	1);
	create_insn	(x=0X80517430);
	op_hex		(x,	1);
	create_insn	(x=0X8051743C);
	op_hex		(x,	1);
	create_insn	(x=0X80517442);
	op_hex		(x,	1);
	create_insn	(x=0X80517452);
	op_hex		(x,	1);
	create_insn	(x=0X80517458);
	op_hex		(x,	1);
	create_insn	(x=0X80517464);
	op_hex		(x,	1);
	create_insn	(x=0X8051746A);
	op_hex		(x,	1);
	create_dword	(x=0X80517484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80517488);
	create_dword	(0X8051748C);
	create_insn	(0X80517490);
	create_insn	(x=0X8051749C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805174AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805174C4);
	create_insn	(0X805174D2);
	create_insn	(0X805174DC);
	create_insn	(0X805174EC);
	create_insn	(x=0X80517504);
	op_hex		(x,	1);
	create_insn	(0X8051751E);
	create_dword	(x=0X80517530);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80517534);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80517538);
	create_insn	(x=0X80517540);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517554);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517564);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805175C8);
	create_insn	(0X805175DE);
	create_insn	(x=0X805175F0);
	op_hex		(x,	1);
	create_insn	(x=0X805175FC);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X80517604);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X80517606);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X80517608);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X8051760E);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X8051761C);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X8051761E);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X80517622);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(0X80517626);
	create_dword	(0X8051762C);
	create_dword	(0X80517630);
	create_dword	(0X80517634);
	create_insn	(0X80517638);
	create_insn	(x=0X80517644);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051766C);
	create_insn	(0X8051767A);
	create_insn	(0X80517684);
	create_dword	(x=0X805176A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805176AC);
	create_insn	(0X805176B0);
	create_insn	(x=0X805176EA);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X805176EE);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X805176F2);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(x=0X805176F6);
	op_plain_offset	(x,	1,	0XCB46C0);
	op_plain_offset	(x,	129,	0XCB46C0);
	create_insn	(0X805176FA);
	create_insn	(x=0X80517710);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X80517758);
	create_dword	(0X8051775C);
	create_dword	(0X80517760);
	create_dword	(0X80517764);
	create_dword	(x=0X80517768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051776C);
	create_dword	(0X80517770);
	create_insn	(0X80517854);
	set_cmt	(0X80517860,	"char *",	0);
	set_cmt	(0X8051786C,	"char *",	0);
	create_dword	(0X80517878);
	create_dword	(0X8051787C);
	create_insn	(0X80517880);
	create_insn	(x=0X805178A0);
	op_stkvar	(x,	1);
	create_insn	(0X805178C0);
	create_insn	(x=0X805178C4);
	op_hex		(x,	1);
	create_insn	(x=0X805178C8);
	op_hex		(x,	1);
	create_insn	(x=0X805178D8);
	op_hex		(x,	1);
	create_insn	(x=0X805178E8);
	op_hex		(x,	1);
	create_insn	(x=0X805178F8);
	op_hex		(x,	1);
	create_insn	(x=0X80517908);
	op_hex		(x,	1);
	create_insn	(x=0X80517918);
	op_hex		(x,	1);
	create_insn	(0X80517930);
	set_name	(0X80517930,	"arch_disable_cache");
	create_insn	(x=0X80517940);
	op_hex		(x,	1);
	create_insn	(x=0X8051794C);
	op_hex		(x,	1);
	create_insn	(x=0X80517954);
	op_hex		(x,	1);
	create_insn	(0X80517964);
	create_insn	(x=0X80517968);
	op_hex		(x,	1);
	create_insn	(x=0X80517974);
	op_hex		(x,	1);
	create_insn	(0X8051798C);
	create_insn	(x=0X805179A0);
	op_hex		(x,	1);
	create_insn	(x=0X805179A8);
	op_hex		(x,	1);
	create_insn	(x=0X805179B4);
	op_hex		(x,	1);
	create_insn	(x=0X805179C4);
	op_hex		(x,	1);
	create_insn	(x=0X805179CC);
	op_hex		(x,	1);
	create_insn	(x=0X805179E0);
	op_hex		(x,	1);
	create_insn	(0X805179F0);
	create_insn	(x=0X805179F4);
	op_hex		(x,	1);
	create_insn	(x=0X80517A0C);
	op_hex		(x,	1);
	create_insn	(x=0X80517A24);
	op_hex		(x,	1);
	create_insn	(0X80517A7C);
	create_insn	(x=0X80517A80);
	op_hex		(x,	1);
	create_insn	(x=0X80517A98);
	op_hex		(x,	1);
	create_insn	(x=0X80517AB0);
	op_hex		(x,	1);
	create_insn	(0X80517B08);
	create_insn	(x=0X80517B0C);
	op_hex		(x,	1);
	create_insn	(x=0X80517B24);
	op_hex		(x,	1);
	create_insn	(x=0X80517B3C);
	op_hex		(x,	1);
	create_insn	(0X80517B94);
	create_insn	(x=0X80517B98);
	op_hex		(x,	1);
	create_insn	(0X80517BB4);
	create_insn	(0X80517BC4);
	create_insn	(0X80517BD0);
	create_insn	(x=0X80517BD4);
	op_hex		(x,	1);
	create_insn	(0X80517BF0);
	create_insn	(0X80517C00);
	create_insn	(0X80517C0C);
	create_insn	(x=0X80517C10);
	op_hex		(x,	1);
	create_dword	(0X80517C44);
	create_dword	(0X80517C48);
	create_insn	(0X80517C4C);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	create_insn	(0X80517C54);
	create_insn	(0X80517C5C);
	create_insn	(0X80517C74);
	create_insn	(0X80517C7C);
	create_insn	(0X80517C84);
	create_insn	(0X80517CA4);
	create_insn	(0X80517CCC);
	create_insn	(x=0X80517CE8);
	op_hex		(x,	1);
	create_insn	(0X80517D10);
	create_insn	(x=0X80517D28);
	op_hex		(x,	1);
	create_insn	(0X80517D50);
	create_insn	(x=0X80517D6C);
	op_hex		(x,	1);
	create_insn	(0X80517D94);
	create_insn	(x=0X80517DB0);
	op_hex		(x,	1);
	create_insn	(0X80517DD8);
	create_insn	(0X80517DE8);
	create_insn	(x=0X80517DF8);
	op_hex		(x,	1);
	create_insn	(x=0X80517E04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517E20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80517E54);
	create_insn	(x=0X80517E64);
	op_hex		(x,	1);
	create_dword	(x=0X80517E8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517EB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80517EC8);
	create_dword	(x=0X80517ECC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517ED0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517EDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517F60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517F6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517F70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517F78);
	op_hex		(x,	1);
	create_dword	(x=0X80517F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80517F8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80517FA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80517FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80517FC4);
	create_dword	(x=0X80517FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805180B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X805180B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805180BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805180D6);
	create_insn	(x=0X805180DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805180E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805180E6);
	op_hex		(x,	1);
	create_insn	(x=0X80518108);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051810E);
	create_insn	(x=0X80518118);
	op_hex		(x,	1);
	create_insn	(0X80518128);
	create_insn	(x=0X80518132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051813E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518144);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051814C);
	op_hex		(x,	1);
	create_insn	(x=0X80518180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518186,	"char *",	0);
	create_insn	(x=0X80518186);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518188);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_insn	(x=0X8051818C);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_insn	(x=0X80518190);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_insn	(x=0X80518198);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_insn	(x=0X8051819A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051819C);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_insn	(x=0X805181A0);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_insn	(x=0X805181A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805181A4);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_insn	(x=0X805181A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805181A8);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	set_cmt	(0X805181BC,	"char *",	0);
	create_insn	(x=0X805181BE);
	op_stkvar	(x,	1);
	create_dword	(x=0X805181D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805181D4);
	create_dword	(x=0X805181D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805181DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805181E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805181E4);
	create_dword	(0X805181E8);
	create_dword	(0X805181EC);
	create_dword	(x=0X805181F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805181F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805181F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805181FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518208);
	create_dword	(0X8051820C);
	create_dword	(0X80518210);
	create_dword	(0X80518214);
	create_dword	(x=0X80518218);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051821C);
	create_dword	(x=0X80518220);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518224);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518228);
	create_insn	(0X8051822C);
	create_insn	(x=0X80518232);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518248);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051824A);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_dword	(x=0X80518260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518264);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805182A4);
	create_insn	(x=0X805182AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805182C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805182C2);
	op_plain_offset	(x,	1,	0X807B57AC);
	op_plain_offset	(x,	129,	0X807B57AC);
	create_dword	(x=0X805182D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805182DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805182E0);
	set_name	(0X805182E0,	"CleanAndInvalidateCache");
	create_insn	(0X8051830E);
	create_insn	(x=0X80518310);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80518314);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80518334);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_insn	(0X80518346);
	create_insn	(x=0X80518348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051834C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80518352);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051836A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051836C);
	op_plain_offset	(x,	1,	0XCB57AC);
	op_plain_offset	(x,	129,	0XCB57AC);
	create_dword	(x=0X80518380);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518384);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X805183F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518404);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518408,	"char *",	0);
	create_insn	(x=0X80518412);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518414);
	op_plain_offset	(x,	1,	0X806180);
	op_plain_offset	(x,	129,	0X806180);
	create_insn	(x=0X80518420);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80518424);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80518428);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	set_cmt	(0X80518446,	"char *",	0);
	create_insn	(x=0X80518446);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518448);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051844A);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051844C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518454);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	set_cmt	(0X8051845A,	"char *",	0);
	create_insn	(x=0X8051845A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051845C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518464);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	set_cmt	(0X8051846A,	"char *",	0);
	create_insn	(x=0X8051846C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518474);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	set_cmt	(0X80518476,	"char *",	0);
	create_insn	(x=0X80518476);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518478);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051847A);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051847C);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051847E);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80518484);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	set_cmt	(0X80518486,	"char *",	0);
	create_insn	(x=0X8051848C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518492);
	op_stkvar	(x,	1);
	set_cmt	(0X80518494,	"char *",	0);
	create_insn	(x=0X80518494);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518496);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80518498);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051849A);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051849C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051849E);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184A2);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184A6);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184AA);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184AE);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184B2);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184B6);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184BA);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184BE);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184C2);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184C4);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805184CA);
	op_hex		(x,	1);
	create_insn	(x=0X805184DA);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805184E0);
	op_hex		(x,	1);
	set_cmt	(0X805184E4,	"char *",	0);
	create_insn	(x=0X805184E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805184E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184F6);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X805184F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805184FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805184FC);
	op_hex		(x,	1);
	set_cmt	(0X80518500,	"char *",	0);
	create_insn	(x=0X80518500);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518502);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051850C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518512);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80518514);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518516);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518518);
	op_hex		(x,	1);
	set_cmt	(0X8051851C,	"char *",	0);
	create_insn	(x=0X8051851C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051851E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518528);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051852E);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80518530);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518532);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518534);
	op_hex		(x,	1);
	set_cmt	(0X80518538,	"char *",	0);
	create_insn	(x=0X80518538);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051853A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518544);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051854A);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X8051854C);
	op_stkvar	(x,	1);
	set_cmt	(0X8051854E,	"char *",	0);
	create_insn	(x=0X8051854E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518550);
	op_hex		(x,	1);
	create_insn	(x=0X80518554);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518556);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518560);
	op_stkvar	(x,	1);
	create_insn	(x=0X80518566);
	op_plain_offset	(x,	1,	0X806080);
	op_plain_offset	(x,	129,	0X806080);
	create_insn	(x=0X80518568);
	op_hex		(x,	1);
	set_cmt	(0X8051856C,	"switch 15 cases",	0);
	set_cmt	(0X80518572,	"switch jump",	0);
	set_cmt	(0X80518576,	"jump table for switch statement",	0);
	create_byte	(0X80518576);
	set_name	(0X80518576,	"jpt_80518572");
	create_byte	(0X80518577);
	create_byte	(0X80518578);
	create_byte	(0X80518579);
	create_byte	(0X8051857A);
	create_byte	(0X8051857B);
	create_byte	(0X8051857C);
	create_byte	(0X8051857D);
	create_byte	(0X8051857E);
	create_byte	(0X8051857F);
	create_byte	(0X80518580);
	create_byte	(0X80518581);
	create_byte	(0X80518582);
	create_byte	(0X80518583);
	create_byte	(0X80518584);
	set_cmt	(0X80518586,	"jumptable 80518572 case 17",	1);
	create_insn	(x=0X80518586);
	op_stkvar	(x,	1);
	set_cmt	(0X8051858A,	"jumptable 80518572 case 18",	1);
	create_insn	(x=0X8051858A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051858E,	"jumptable 80518572 case 19",	1);
	create_insn	(x=0X8051858E);
	op_stkvar	(x,	1);
	set_cmt	(0X80518592,	"jumptable 80518572 case 27",	1);
	create_insn	(x=0X80518592);
	op_stkvar	(x,	1);
	set_cmt	(0X80518596,	"jumptable 80518572 case 31",	1);
	create_insn	(x=0X80518596);
	op_stkvar	(x,	1);
	set_cmt	(0X8051859A,	"jumptable 80518572 default case, cases 20-26,28-30",	1);
	create_insn	(0X8051859A);
	set_name	(0X8051859A,	"def_80518572");
	create_insn	(x=0X8051859C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805185A6);
	set_cmt	(0X805185A8,	"char *",	0);
	create_insn	(x=0X805185A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805185AE,	"a2",	0);
	create_dword	(x=0X805185CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805185D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805185D4);
	create_dword	(x=0X805185D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805185DC);
	create_dword	(x=0X805185E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805185E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805185E8);
	create_dword	(x=0X805185EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805185F0);
	create_dword	(x=0X805185F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805185F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805185FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518600);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518604);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518608);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051860C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518610);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518614);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80518630);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80518650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80518654);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051865A);
	op_plain_offset	(x,	1,	0XCB1884);
	op_plain_offset	(x,	129,	0XCB1884);
	create_dword	(x=0X80518674);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80518678);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051867E);
	op_plain_offset	(x,	1,	0XCB1884);
	op_plain_offset	(x,	129,	0XCB1884);
	create_dword	(x=0X80518698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051869C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805186A2);
	op_plain_offset	(x,	1,	0XCB1884);
	op_plain_offset	(x,	129,	0XCB1884);
	create_dword	(x=0X805186BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805186E8);
	create_insn	(x=0X805186EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805186FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051870C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518710);
	create_insn	(x=0X80518712);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518724);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80518734);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518738);
	create_insn	(x=0X8051873A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051874C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051875C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518774);
	create_insn	(x=0X80518778);
	op_hex		(x,	1);
	create_insn	(x=0X8051877C);
	op_hex		(x,	1);
	create_insn	(x=0X80518784);
	op_hex		(x,	1);
	create_insn	(x=0X80518788);
	op_hex		(x,	1);
	create_insn	(x=0X8051878C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805187BA);
	create_dword	(x=0X805187C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805187CC);
	create_insn	(x=0X805187D0);
	op_hex		(x,	1);
	create_insn	(x=0X805187D6);
	op_hex		(x,	1);
	create_insn	(x=0X805187DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80518802);
	create_dword	(x=0X80518810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518814);
	create_insn	(x=0X8051882C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80518852);
	create_dword	(x=0X80518858);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051885C);
	create_insn	(x=0X80518884);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805188A2);
	op_hex		(x,	1);
	create_insn	(x=0X805188B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805188B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805188B6);
	op_stkvar	(x,	1);
	create_insn	(0X805188BE);
	create_insn	(x=0X805188C4);
	op_hex		(x,	1);
	create_insn	(x=0X805188C8);
	op_hex		(x,	1);
	set_cmt	(0X805188D4,	"char *",	0);
	create_insn	(x=0X805188DE);
	op_hex		(x,	1);
	create_insn	(x=0X805188E8);
	op_hex		(x,	1);
	create_insn	(x=0X805188F0);
	op_hex		(x,	1);
	create_insn	(x=0X80518900);
	op_hex		(x,	1);
	create_insn	(x=0X8051890C);
	op_hex		(x,	1);
	create_insn	(x=0X80518916);
	op_hex		(x,	1);
	create_insn	(x=0X8051891C);
	op_hex		(x,	1);
	create_insn	(x=0X80518922);
	op_hex		(x,	1);
	create_insn	(x=0X8051892C);
	op_hex		(x,	1);
	create_insn	(x=0X80518932);
	op_hex		(x,	1);
	create_insn	(0X8051893E);
	create_insn	(0X80518942);
	create_insn	(0X80518946);
	create_insn	(0X8051894C);
	create_insn	(0X80518950);
	create_insn	(0X80518954);
	create_insn	(0X8051895A);
	create_insn	(x=0X8051895C);
	op_hex		(x,	1);
	create_insn	(x=0X80518960);
	op_hex		(x,	1);
	create_insn	(x=0X80518964);
	op_hex		(x,	1);
	create_dword	(x=0X80518980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518984);
	create_dword	(0X80518988);
	create_dword	(x=0X8051898C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518994);
	create_dword	(0X80518998);
	create_insn	(x=0X8051899C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805189B2);
	op_hex		(x,	1);
	create_insn	(x=0X805189C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805189C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805189C6);
	op_stkvar	(x,	1);
	create_insn	(0X805189CE);
	create_insn	(x=0X805189D4);
	op_hex		(x,	1);
	create_insn	(x=0X805189D8);
	op_hex		(x,	1);
	create_insn	(x=0X805189E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805189E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805189EA);
	op_stkvar	(x,	1);
	create_insn	(0X805189F4);
	create_dword	(x=0X80518A04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518A08);
	create_dword	(0X80518A0C);
	create_dword	(x=0X80518A10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518A14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518A18);
	create_insn	(0X80518BC0);
	create_insn	(x=0X80518BC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518BD6);
	op_hex		(x,	1);
	create_insn	(x=0X80518BE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518BE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518BE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518BEA);
	op_stkvar	(x,	1);
	create_insn	(0X80518BF4);
	create_insn	(x=0X80518BF6);
	op_hex		(x,	1);
	create_dword	(x=0X80518C10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518C14);
	create_dword	(x=0X80518C18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80518C24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518C3A);
	op_hex		(x,	1);
	create_insn	(x=0X80518C46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518C4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518C4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518C4E);
	op_stkvar	(x,	1);
	create_insn	(0X80518C58);
	create_dword	(x=0X80518C6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518C70);
	create_dword	(x=0X80518C74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518C7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518C80);
	create_insn	(x=0X80518C86);
	op_hex		(x,	1);
	create_insn	(x=0X80518C8A);
	op_hex		(x,	1);
	create_insn	(x=0X80518C96);
	op_hex		(x,	1);
	create_insn	(x=0X80518C9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518CB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518CD8);
	op_hex		(x,	1);
	create_dword	(x=0X80518CE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518CE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518CE8);
	create_insn	(0X80518D10);
	create_insn	(x=0X80518D1E);
	op_hex		(x,	1);
	create_dword	(0X80518D38);
	create_insn	(0X80518D3C);
	create_insn	(0X80518DC8);
	create_insn	(x=0X80518DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518DE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518E00);
	op_hex		(x,	1);
	create_insn	(x=0X80518E0C);
	op_hex		(x,	1);
	create_insn	(x=0X80518E18);
	op_hex		(x,	1);
	create_insn	(x=0X80518E1C);
	op_hex		(x,	1);
	create_dword	(x=0X80518E30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518E34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518E38);
	set_name	(0X80518E38,	"nullsub_4");
	create_insn	(0X80518E54);
	create_insn	(x=0X80518E64);
	op_hex		(x,	1);
	create_insn	(0X80518E80);
	create_insn	(x=0X80518E90);
	op_hex		(x,	1);
	create_insn	(0X80518EAC);
	create_insn	(x=0X80518EDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518EE8);
	op_hex		(x,	1);
	create_dword	(x=0X80518F14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518F18);
	create_insn	(x=0X80518F1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518F22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80518F2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80518F62);
	create_insn	(0X80518F68);
	create_insn	(0X80518F6C);
	create_insn	(0X80518F7A);
	create_dword	(x=0X80518F84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80518F8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80518F90);
	set_name	(0X80518F90,	"bootstrap2");
	set_cmt	(0X80518F92,	"char *",	0);
	create_insn	(x=0X80518F92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518FA2,	"char *",	0);
	set_cmt	(0X80518FB2,	"char *",	0);
	create_insn	(x=0X80518FB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80518FC2,	"char *",	0);
	set_cmt	(0X80518FCC,	"char *",	0);
	set_cmt	(0X80518FDC,	"char *",	0);
	create_insn	(x=0X80518FDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80518FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80518FFC);
	create_dword	(0X80519000);
	create_dword	(0X80519004);
	create_dword	(x=0X80519008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051900C);
	create_dword	(0X80519010);
	create_dword	(0X80519014);
	create_dword	(0X80519018);
	create_dword	(x=0X8051901C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80519020);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X80519020,	"lk_main");
	create_insn	(x=0X8051902A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519054);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519056);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80519062,	"char *",	0);
	set_cmt	(0X80519068,	"char *",	0);
	set_cmt	(0X8051907A,	"char *",	0);
	create_insn	(0X8051907A);
	set_cmt	(0X8051909A,	"char *",	0);
	create_insn	(x=0X8051909A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805190A4,	"func",	0);
	create_insn	(x=0X805190A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805190A6,	"arg",	0);
	set_cmt	(0X805190A8,	"stack_size",	0);
	create_insn	(x=0X805190A8);
	op_stkvar	(x,	1);
	set_cmt	(0X805190AA,	"name",	0);
	set_cmt	(0X805190AC,	"prio",	0);
	set_cmt	(0X805190B8,	"a1",	0);
	create_dword	(x=0X805190C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805190C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805190CC);
	create_dword	(x=0X805190D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805190D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805190D8);
	create_dword	(0X805190DC);
	create_dword	(0X805190E0);
	create_dword	(0X805190E4);
	create_dword	(0X805190E8);
	create_dword	(0X805190EC);
	create_dword	(0X805190F0);
	create_dword	(x=0X805190F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805190F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805190FC);
	create_insn	(0X8051910C);
	create_insn	(x=0X8051910E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519110);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519114);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519124);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80519138,	"a3",	0);
	set_cmt	(0X8051913E,	"a2",	0);
	set_cmt	(0X8051914C,	"a1",	0);
	set_cmt	(0X80519152,	"arg",	0);
	set_cmt	(0X80519154,	"func",	0);
	set_cmt	(0X80519156,	"prio",	0);
	set_cmt	(0X80519158,	"stack_size",	0);
	create_insn	(x=0X80519158);
	op_stkvar	(x,	1);
	set_cmt	(0X8051915A,	"name",	0);
	set_cmt	(0X80519168,	"a1",	0);
	create_insn	(0X80519172);
	create_dword	(x=0X80519178);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051917C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519184);
	create_dword	(0X80519188);
	create_insn	(0X80519198);
	set_name	(0X80519198,	"queue_adsp_app");
	create_insn	(x=0X805191A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805191B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X805191B8);
	op_stkvar	(x,	1);
	set_cmt	(0X805191BE,	"result",	0);
	create_insn	(x=0X805191BE);
	op_stkvar	(x,	1);
	set_cmt	(0X805191C0,	"a2",	0);
	set_cmt	(0X805191C2,	"a3",	0);
	create_insn	(x=0X805191CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805191CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805191D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805191D4);
	op_stkvar	(x,	1);
	set_cmt	(0X805191D8,	"a2",	0);
	create_insn	(x=0X805191D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X805191DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X805191DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805191DE,	"int",	0);
	create_insn	(x=0X805191DE);
	op_plain_offset	(x,	1,	0XCB18A4);
	op_plain_offset	(x,	129,	0XCB18A4);
	set_cmt	(0X805191E6,	"char *",	0);
	create_insn	(x=0X805191F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805191F8);
	op_stkvar	(x,	1);
	create_insn	(0X80519202);
	create_dword	(x=0X80519208);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051920C);
	create_dword	(0X80519210);
	create_dword	(x=0X80519214);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519218);
	create_insn	(0X805192C0);
	create_insn	(0X80519320);
	create_insn	(0X80519404);
	set_name	(0X80519404,	"start_adsp_app");
	set_cmt	(0X80519410,	"prio",	0);
	set_cmt	(0X80519412,	"stack_size",	0);
	create_insn	(x=0X80519412);
	op_stkvar	(x,	1);
	set_cmt	(0X80519414,	"func",	0);
	set_cmt	(0X80519416,	"name",	0);
	set_cmt	(0X80519418,	"arg",	0);
	set_cmt	(0X80519422,	"a2",	0);
	create_insn	(x=0X80519424);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80519436);
	set_cmt	(0X8051943A,	"a1",	0);
	create_dword	(x=0X80519448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051955C);
	set_name	(0X8051955C,	"adsp_static_apps_init");
	create_insn	(x=0X8051955E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519560);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X805195A0);
	set_cmt	(0X805195AA,	"a1",	0);
	create_insn	(x=0X805195AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X805195AE,	"a3",	0);
	create_insn	(0X805195BA);
	create_dword	(x=0X805195C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805195C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X805195CC);
	create_dword	(0X805195D0);
	create_dword	(x=0X805195D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805195D8);
	create_insn	(x=0X805195DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805195E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X805195EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X805195EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X805195F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519622);
	op_plain_offset	(x,	1,	0XCB18A4);
	op_plain_offset	(x,	129,	0XCB18A4);
	create_insn	(x=0X8051962A);
	op_plain_offset	(x,	1,	0XCB18A4);
	op_plain_offset	(x,	129,	0XCB18A4);
	set_cmt	(0X80519638,	"name",	0);
	set_cmt	(0X8051963A,	"stack_size",	0);
	create_insn	(x=0X8051963A);
	op_stkvar	(x,	1);
	set_cmt	(0X8051963C,	"arg",	0);
	set_cmt	(0X8051963E,	"func",	0);
	set_cmt	(0X80519640,	"prio",	0);
	create_insn	(0X8051964E);
	set_cmt	(0X80519656,	"a1",	0);
	create_insn	(x=0X8051965C);
	op_plain_offset	(x,	1,	0X806000);
	op_plain_offset	(x,	129,	0X806000);
	set_cmt	(0X80519670,	"a1",	0);
	create_insn	(0X80519670);
	set_cmt	(0X80519672,	"a2",	0);
	create_dword	(x=0X8051967C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519680);
	create_dword	(0X80519684);
	create_dword	(0X80519688);
	create_dword	(0X8051968C);
	create_dword	(0X80519690);
	create_dword	(0X80519694);
	create_dword	(0X80519698);
	create_dword	(0X8051969C);
	create_insn	(0X805196A0);
	create_insn	(0X805196A4);
	create_insn	(0X805196A8);
	create_insn	(0X805196B0);
	create_insn	(0X805196B8);
	create_insn	(0X805196C0);
	create_insn	(0X805196C8);
	create_insn	(x=0X805196D0);
	op_hex		(x,	1);
	create_insn	(0X805196E0);
	create_insn	(x=0X805196E8);
	op_hex		(x,	1);
	create_insn	(0X805198E0);
	create_dword	(0X80519908);
	create_dword	(0X8051990C);
	create_insn	(0X80519980);
	create_insn	(x=0X80519992);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519996);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519998);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051999A);
	op_stkvar	(x,	1);
	create_insn	(x=0X805199A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X805199B8);
	op_hex		(x,	1);
	create_insn	(0X805199C4);
	create_dword	(0X805199DC);
	create_dword	(x=0X805199E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805199E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805199E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X805199EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X805199F0);
	create_insn	(0X805199F4);
	create_insn	(x=0X80519A06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519A0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519A0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519A16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519A2C);
	op_hex		(x,	1);
	create_insn	(0X80519A38);
	create_dword	(0X80519A4C);
	create_dword	(x=0X80519A50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519A54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519A58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519A5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519A60);
	create_insn	(x=0X80519A74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519A78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519A7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519A84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519A9C);
	op_hex		(x,	1);
	create_insn	(0X80519AB4);
	create_dword	(0X80519ADC);
	create_dword	(x=0X80519AE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519AE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519AE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519AEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519AF0);
	create_insn	(x=0X80519B02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519B06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519B08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519B0A);
	op_stkvar	(x,	1);
	create_insn	(0X80519B12);
	create_dword	(0X80519B1C);
	create_dword	(x=0X80519B20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519B24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519B28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519B2C);
	create_insn	(0X80519B32);
	create_insn	(0X80519B38);
	set_cmt	(0X80519B3A,	"char *",	0);
	create_insn	(x=0X80519B3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X80519B44,	"char *",	0);
	create_dword	(x=0X80519B54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519B58);
	create_insn	(0X80519B5C);
	create_dword	(0X80519B78);
	create_dword	(0X80519B7C);
	create_insn	(0X80519C14);
	create_insn	(x=0X80519C2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519C34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519C4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519C54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80519C8A);
	create_dword	(0X80519C9C);
	create_dword	(0X80519CA0);
	create_dword	(x=0X80519CA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519CA8);
	create_dword	(x=0X80519CAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519CB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80519CB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519CB8);
	create_insn	(x=0X80519CCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519CD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519CDA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80519CF8);
	create_insn	(x=0X80519CFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519D08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X80519D3C);
	create_dword	(0X80519D40);
	create_dword	(x=0X80519D44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519D48);
	create_dword	(x=0X80519D4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80519D50);
	create_dword	(0X80519D54);
	create_dword	(x=0X80519D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519D70);
	create_insn	(x=0X80519D72);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519D74);
	op_plain_offset	(x,	1,	0XCB19D8);
	op_plain_offset	(x,	129,	0XCB19D8);
	create_insn	(0X80519DA4);
	create_insn	(0X80519DA8);
	create_dword	(x=0X80519DB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80519F64);
	create_insn	(x=0X80519F82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519F86);
	op_stkvar	(x,	1);
	create_insn	(0X80519F8E);
	create_insn	(x=0X80519FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519FAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X80519FCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519FE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80519FE4);
	op_plain_offset	(x,	1,	0XCB19D8);
	op_plain_offset	(x,	129,	0XCB19D8);
	create_dword	(0X8051A010);
	create_dword	(0X8051A014);
	create_dword	(x=0X8051A018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A01C);
	create_dword	(0X8051A020);
	create_dword	(x=0X8051A024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A02C);
	create_insn	(0X8051A030);
	create_dword	(0X8051A044);
	create_insn	(0X8051A08C);
	create_insn	(x=0X8051A090);
	op_stkvar	(x,	1);
	create_insn	(0X8051A0A4);
	create_insn	(x=0X8051A0AE);
	op_stkvar	(x,	1);
	create_insn	(0X8051A0BC);
	create_insn	(x=0X8051A0D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A0D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A0DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A0EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A0EE);
	op_plain_offset	(x,	1,	0XCB19D8);
	op_plain_offset	(x,	129,	0XCB19D8);
	create_insn	(0X8051A0FC);
	create_insn	(x=0X8051A110);
	op_plain_offset	(x,	1,	0XCB19D8);
	op_plain_offset	(x,	129,	0XCB19D8);
	create_insn	(0X8051A122);
	create_insn	(0X8051A158);
	create_dword	(0X8051A168);
	create_dword	(0X8051A16C);
	create_dword	(x=0X8051A170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A174);
	create_dword	(x=0X8051A178);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A17C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A180);
	create_insn	(x=0X8051A184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A186);
	op_plain_offset	(x,	1,	0XCB19D8);
	op_plain_offset	(x,	129,	0XCB19D8);
	create_dword	(x=0X8051A18C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A190);
	create_dword	(0X8051A1B8);
	create_dword	(0X8051A1BC);
	create_insn	(0X8051A1C0);
	create_insn	(x=0X8051A1C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A1E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A1F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A1FC);
	create_insn	(x=0X8051A202);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051A228);
	create_dword	(x=0X8051A244);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051A280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A29C);
	op_plain_offset	(x,	1,	0X804FFFFD);
	op_plain_offset	(x,	129,	0X804FFFFD);
	create_dword	(x=0X8051A2AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A2B0);
	create_insn	(x=0X8051A2B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051A2F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A2F4);
	create_insn	(0X8051A300);
	create_insn	(0X8051A306);
	create_insn	(0X8051A30C);
	create_insn	(0X8051A3C8);
	create_insn	(x=0X8051A3DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A3E2);
	op_stkvar	(x,	1);
	create_insn	(0X8051A3E8);
	create_insn	(x=0X8051A3F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A3F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A3FA);
	op_stkvar	(x,	1);
	create_insn	(0X8051A402);
	create_insn	(x=0X8051A414);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A418);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A41E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A42E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A432);
	op_stkvar	(x,	1);
	create_insn	(0X8051A438);
	create_dword	(0X8051A46C);
	create_dword	(0X8051A470);
	create_dword	(x=0X8051A474);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A478);
	create_dword	(x=0X8051A47C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A480);
	create_dword	(x=0X8051A484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A488);
	create_dword	(0X8051A48C);
	create_dword	(0X8051A490);
	create_insn	(0X8051A494);
	create_insn	(x=0X8051A4AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4AE);
	op_stkvar	(x,	1);
	create_insn	(0X8051A4B4);
	create_insn	(x=0X8051A4BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4C6);
	op_stkvar	(x,	1);
	create_insn	(0X8051A4CE);
	create_insn	(x=0X8051A4E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A4EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A4FE);
	op_stkvar	(x,	1);
	create_insn	(0X8051A504);
	create_dword	(0X8051A534);
	create_dword	(0X8051A538);
	create_dword	(x=0X8051A53C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A540);
	create_dword	(x=0X8051A544);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A548);
	create_dword	(x=0X8051A54C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051A550);
	create_dword	(0X8051A554);
	create_dword	(0X8051A558);
	create_insn	(0X8051A55C);
	create_insn	(0X8051A582);
	create_insn	(x=0X8051A586);
	op_stkvar	(x,	1);
	create_insn	(0X8051A598);
	create_insn	(0X8051A5B0);
	create_insn	(0X8051A5BE);
	create_insn	(0X8051A5CA);
	create_dword	(0X8051A5D0);
	create_insn	(0X8051A638);
	create_insn	(x=0X8051A644);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A646);
	op_stkvar	(x,	1);
	create_insn	(0X8051A65C);
	create_insn	(x=0X8051A688);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A68A);
	op_hex		(x,	1);
	create_insn	(x=0X8051A69C);
	op_stkvar	(x,	1);
	create_insn	(0X8051A6A2);
	create_insn	(x=0X8051A6A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A6AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A700);
	op_hex		(x,	1);
	create_insn	(0X8051A71E);
	create_insn	(x=0X8051A72A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A738);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A73C);
	op_plain_offset	(x,	1,	0XCB1C38);
	op_plain_offset	(x,	129,	0XCB1C38);
	create_insn	(x=0X8051A744);
	op_plain_offset	(x,	1,	0XCB1C38);
	op_plain_offset	(x,	129,	0XCB1C38);
	create_insn	(x=0X8051A746);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X8051A758);
	create_dword	(0X8051A75C);
	create_dword	(0X8051A760);
	create_dword	(x=0X8051A764);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051A768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A7A8);
	set_name	(0X8051A7A8,	"thread_create");
	create_insn	(x=0X8051A7AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A7BA);
	op_plain_offset	(x,	1,	0XCB19E0);
	op_plain_offset	(x,	129,	0XCB19E0);
	create_insn	(x=0X8051A7CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A7D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A7D4);
	op_stkvar	(x,	1);
	create_dword	(x=0X8051A7E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051A7E4);
	create_insn	(x=0X8051A7EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A7FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A802);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A80A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A818);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A81C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A826);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A828);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(x=0X8051A82C);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(x=0X8051A834);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A836);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A83C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A850);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A854);
	op_stkvar	(x,	1);
	create_insn	(0X8051A85C);
	create_insn	(x=0X8051A860);
	op_stkvar	(x,	1);
	create_insn	(0X8051A870);
	create_insn	(x=0X8051A886);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A88A);
	op_stkvar	(x,	1);
	create_insn	(0X8051A892);
	create_insn	(x=0X8051A8C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A8C8);
	op_stkvar	(x,	1);
	create_insn	(0X8051A8D0);
	create_insn	(0X8051A8E4);
	create_insn	(x=0X8051A8E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A926);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A92A);
	op_stkvar	(x,	1);
	create_insn	(0X8051A932);
	create_insn	(0X8051A946);
	create_insn	(x=0X8051A96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A984);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(x=0X8051A988);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A98E);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(x=0X8051A992);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A9B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A9D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A9DA);
	op_stkvar	(x,	1);
	create_insn	(0X8051A9E2);
	create_insn	(x=0X8051A9F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051A9F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051A9FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051AA14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AA18);
	create_dword	(x=0X8051AA1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AA20);
	create_dword	(x=0X8051AA24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AA28);
	create_dword	(x=0X8051AA2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AA30);
	create_dword	(x=0X8051AA34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AA38);
	create_dword	(0X8051AA3C);
	create_dword	(0X8051AA40);
	create_dword	(0X8051AA44);
	create_dword	(0X8051AA48);
	create_dword	(0X8051AA4C);
	create_dword	(x=0X8051AA50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AA54);
	create_dword	(0X8051AA58);
	create_dword	(0X8051AA5C);
	create_dword	(0X8051AA60);
	create_insn	(0X8051AA64);
	create_insn	(x=0X8051AA6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AA8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AAA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AAC4);
	op_stkvar	(x,	1);
	create_dword	(0X8051AAE4);
	create_dword	(x=0X8051AAE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AAEC);
	create_dword	(0X8051AAF0);
	create_insn	(x=0X8051AAF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AB0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AB12);
	op_stkvar	(x,	1);
	create_insn	(0X8051AB1A);
	create_insn	(x=0X8051AB28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AB2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AB36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AB44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AB4C);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(x=0X8051AB50);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(0X8051AB6E);
	create_insn	(x=0X8051AB92);
	op_stkvar	(x,	1);
	create_dword	(x=0X8051ABC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051ABC4);
	create_dword	(0X8051ABC8);
	create_dword	(x=0X8051ABCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051ABD0);
	create_dword	(0X8051ABD4);
	create_dword	(x=0X8051ABD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ABDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051ABE0);
	create_insn	(0X8051ABE4);
	set_name	(0X8051ABE4,	"thread_resume");
	create_insn	(x=0X8051ABFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ABFE);
	op_stkvar	(x,	1);
	create_insn	(0X8051AC06);
	create_insn	(x=0X8051AC14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AC22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051AC46);
	create_insn	(0X8051AC50);
	create_dword	(0X8051AC78);
	create_dword	(0X8051AC7C);
	create_dword	(x=0X8051AC80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AC84);
	create_dword	(0X8051AC88);
	create_dword	(x=0X8051AC8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AC90);
	create_insn	(x=0X8051AC94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACB2);
	op_stkvar	(x,	1);
	create_insn	(0X8051ACBA);
	create_insn	(x=0X8051ACC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051ACD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051ACF0);
	op_plain_offset	(x,	1,	0X807B57E0);
	op_plain_offset	(x,	129,	0X807B57E0);
	create_insn	(x=0X8051ACF4);
	op_plain_offset	(x,	1,	0X807B57E0);
	op_plain_offset	(x,	129,	0X807B57E0);
	create_insn	(0X8051ACFC);
	create_insn	(0X8051AD1E);
	create_insn	(0X8051AD24);
	create_insn	(x=0X8051AD36);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AD60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051AD8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AD90);
	create_dword	(0X8051AD94);
	create_dword	(x=0X8051AD98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AD9C);
	create_dword	(0X8051ADA0);
	create_dword	(x=0X8051ADA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ADA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051ADAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051ADB0);
	create_insn	(x=0X8051AE84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AE9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AEA0);
	op_stkvar	(x,	1);
	create_insn	(0X8051AEA8);
	create_insn	(x=0X8051AEB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AEB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AEBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AEC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AED2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AED4);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(x=0X8051AED8);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(x=0X8051AEEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051AF14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AF18);
	create_dword	(0X8051AF1C);
	create_dword	(x=0X8051AF20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AF24);
	create_dword	(x=0X8051AF28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AF2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AF30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051AF34);
	create_insn	(x=0X8051AF38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF54);
	op_stkvar	(x,	1);
	create_insn	(0X8051AF5C);
	create_insn	(x=0X8051AF66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF6E);
	op_stkvar	(x,	1);
	create_insn	(0X8051AF78);
	create_insn	(x=0X8051AF7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF86);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AF8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051AF9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051AFB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051AFC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AFC4);
	create_dword	(x=0X8051AFC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AFCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AFD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AFD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AFD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051AFDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051AFE0);
	create_insn	(0X8051B008);
	create_insn	(x=0X8051B00A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B022);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B026);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B02C);
	op_plain_offset	(x,	1,	0XCB1C38);
	op_plain_offset	(x,	129,	0XCB1C38);
	create_insn	(x=0X8051B038);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B03C);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B046);
	op_plain_offset	(x,	1,	0XCB1C38);
	op_plain_offset	(x,	129,	0XCB1C38);
	create_insn	(x=0X8051B048);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B04C);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B050);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B052);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B056);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B058);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B05E);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B060);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B064);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B068);
	op_plain_offset	(x,	1,	0XCB1C40);
	op_plain_offset	(x,	129,	0XCB1C40);
	create_insn	(x=0X8051B06E);
	op_plain_offset	(x,	1,	0XCB1C38);
	op_plain_offset	(x,	129,	0XCB1C38);
	create_insn	(x=0X8051B070);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051B080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B084);
	create_dword	(x=0X8051B088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B08C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B090);
	create_dword	(x=0X8051B094);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B098);
	create_dword	(x=0X8051B09C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B0A0);
	create_insn	(0X8051B0A4);
	create_dword	(0X8051B0AC);
	create_insn	(x=0X8051B0B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051B0C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B0C4);
	set_name	(0X8051B0C4,	"thread_set_priority");
	create_insn	(0X8051B0D0);
	create_insn	(x=0X8051B0D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051B0DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B0EC);
	create_insn	(x=0X8051B0FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B0FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B102);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X8051B118);
	create_dword	(x=0X8051B11C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B124);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B270);
	set_name	(0X8051B270,	"thread_get_cycle_count");
	create_insn	(x=0X8051B272);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B284);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B286);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B2A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B2B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051B2BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B2C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B2C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B2C8);
	create_dword	(0X8051B2D8);
	create_insn	(0X8051B2DC);
	create_insn	(x=0X8051B2F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B2FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B302);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B314);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B318);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B322);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B332);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B336);
	op_stkvar	(x,	1);
	create_insn	(0X8051B33E);
	create_insn	(x=0X8051B374);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B37A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B37C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B390);
	op_stkvar	(x,	1);
	create_insn	(0X8051B39C);
	create_dword	(0X8051B3A4);
	create_dword	(0X8051B3A8);
	create_dword	(x=0X8051B3AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B3B0);
	create_dword	(x=0X8051B3B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B3B8);
	create_dword	(x=0X8051B3BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B3C0);
	create_dword	(0X8051B3C4);
	create_insn	(0X8051B3C8);
	set_name	(0X8051B3C8,	"thread_join");
	create_insn	(x=0X8051B3E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B3E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B3EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051B410);
	create_insn	(0X8051B430);
	create_insn	(x=0X8051B440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B444);
	op_stkvar	(x,	1);
	create_insn	(0X8051B44E);
	create_insn	(x=0X8051B45C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B460);
	op_stkvar	(x,	1);
	create_insn	(0X8051B468);
	create_insn	(x=0X8051B470);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B474);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B478);
	op_stkvar	(x,	1);
	create_insn	(0X8051B480);
	create_insn	(x=0X8051B490);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B494);
	op_stkvar	(x,	1);
	create_insn	(0X8051B49C);
	create_insn	(x=0X8051B4D4);
	op_hex		(x,	1);
	create_dword	(0X8051B4E8);
	create_dword	(0X8051B4EC);
	create_dword	(x=0X8051B4F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B4F4);
	create_dword	(x=0X8051B4F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B4FC);
	create_dword	(x=0X8051B500);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B504);
	create_insn	(0X8051B508);
	create_insn	(x=0X8051B524);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B528);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B530);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B540);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B544);
	op_stkvar	(x,	1);
	create_insn	(0X8051B54E);
	create_insn	(x=0X8051B552);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B556);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(x=0X8051B55A);
	op_plain_offset	(x,	1,	0XCB57E0);
	op_plain_offset	(x,	129,	0XCB57E0);
	create_insn	(0X8051B566);
	create_insn	(x=0X8051B588);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B58C);
	op_stkvar	(x,	1);
	create_insn	(0X8051B594);
	create_insn	(x=0X8051B5A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X8051B5DC);
	create_dword	(0X8051B5E0);
	create_dword	(x=0X8051B5E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B5E8);
	create_dword	(x=0X8051B5EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B5F0);
	create_dword	(x=0X8051B5F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B5F8);
	create_dword	(x=0X8051B5FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B600);
	create_insn	(x=0X8051B61E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B622);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B62A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B63A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B63E);
	op_stkvar	(x,	1);
	create_insn	(0X8051B648);
	create_insn	(x=0X8051B650);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B67E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B682);
	op_stkvar	(x,	1);
	create_insn	(0X8051B68A);
	create_insn	(x=0X8051B68C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B692);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B6B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B6B6);
	op_stkvar	(x,	1);
	create_insn	(0X8051B6BE);
	create_insn	(0X8051B6D6);
	create_dword	(0X8051B6E8);
	create_dword	(0X8051B6EC);
	create_dword	(x=0X8051B6F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B6F4);
	create_dword	(x=0X8051B6F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B6FC);
	create_dword	(x=0X8051B700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B704);
	create_dword	(0X8051B708);
	create_insn	(0X8051B70C);
	create_insn	(x=0X8051B722);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B726);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B730);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B754);
	op_hex		(x,	1);
	create_insn	(x=0X8051B774);
	op_hex		(x,	1);
	create_dword	(0X8051B78C);
	create_dword	(0X8051B790);
	create_dword	(x=0X8051B794);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051B798);
	create_dword	(x=0X8051B79C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051B7A0);
	set_cmt	(0X8051B7AC,	"a1",	0);
	create_insn	(0X8051B7B6);
	create_insn	(0X8051B8C4);
	create_insn	(x=0X8051B8D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B8DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B8DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B8DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051B8E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B8F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B8F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B8F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051B8FA);
	op_stkvar	(x,	1);
	create_insn	(0X8051B904);
	create_dword	(0X8051B914);
	create_dword	(x=0X8051B918);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B91C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B924);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051B928);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051BA60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051BA68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051BB4A);
	create_insn	(0X8051BB58);
	create_insn	(0X8051BB5A);
	create_insn	(0X8051BB6C);
	create_insn	(0X8051BB86);
	create_insn	(0X8051BB8C);
	create_insn	(0X8051BB9A);
	create_insn	(0X8051BB9C);
	set_cmt	(0X8051BBA8,	"char *",	0);
	create_insn	(x=0X8051BBA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051BBB2);
	op_stkvar	(x,	1);
	set_cmt	(0X8051BBC2,	"char *",	0);
	create_insn	(0X8051BBCA);
	create_insn	(x=0X8051BBD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051BBDC);
	op_stkvar	(x,	1);
	create_insn	(0X8051BBE6);
	create_insn	(0X8051BBF4);
	create_insn	(0X8051BBFA);
	create_insn	(0X8051BC10);
	create_insn	(0X8051BC1E);
	create_insn	(0X8051BC24);
	create_insn	(x=0X8051BC26);
	op_stkvar	(x,	1);
	create_insn	(0X8051BC3E);
	create_insn	(0X8051BC4C);
	create_insn	(0X8051BC52);
	create_insn	(0X8051BC5C);
	create_dword	(x=0X8051BC6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051BC70);
	create_insn	(0X8051BCB4);
	create_insn	(0X8051BCEC);
	create_insn	(0X8051BCF6);
	create_insn	(0X8051BCFC);
	create_insn	(0X8051BD18);
	create_insn	(0X8051BD6C);
	create_dword	(0X8051BD78);
	create_dword	(0X8051BD7C);
	create_insn	(0X8051BD80);
	create_dword	(0X8051BDE0);
	create_insn	(0X8051BDE4);
	create_insn	(0X8051BE00);
	create_dword	(0X8051BE20);
	create_insn	(0X8051BE4C);
	create_insn	(x=0X8051BE52);
	op_stkvar	(x,	1);
	create_insn	(0X8051BEAA);
	create_insn	(x=0X8051BEAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X8051BEF0);
	create_dword	(x=0X8051BEF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051BFFC);
	create_insn	(0X8051C016);
	create_insn	(0X8051C030);
	create_insn	(0X8051C03E);
	create_insn	(x=0X8051C070);
	op_stkvar	(x,	1);
	create_insn	(0X8051C098);
	create_insn	(0X8051C0C2);
	create_insn	(0X8051C0CA);
	create_insn	(0X8051C0DE);
	create_insn	(0X8051C102);
	create_insn	(0X8051C104);
	create_insn	(x=0X8051C110);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C13A);
	op_stkvar	(x,	1);
	create_insn	(0X8051C16E);
	create_insn	(0X8051C178);
	create_insn	(0X8051C184);
	create_insn	(0X8051C1A2);
	create_insn	(0X8051C1CE);
	create_dword	(x=0X8051C1E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051C1E4);
	create_dword	(0X8051C1E8);
	create_insn	(0X8051C1EC);
	create_insn	(x=0X8051C1F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C20A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051C224);
	create_insn	(0X8051C230);
	create_insn	(0X8051C23C);
	create_insn	(0X8051C270);
	create_dword	(x=0X8051C284);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C29C);
	create_insn	(0X8051C2C8);
	create_insn	(0X8051C2CE);
	create_insn	(0X8051C2DC);
	create_insn	(0X8051C2E6);
	create_insn	(0X8051C2EA);
	create_insn	(0X8051C2F0);
	create_insn	(0X8051C30C);
	create_insn	(0X8051C318);
	create_insn	(0X8051C350);
	create_insn	(0X8051C358);
	create_insn	(0X8051C370);
	create_insn	(x=0X8051C37A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051C398);
	create_insn	(0X8051C3A8);
	create_dword	(x=0X8051C3F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051C3F4);
	create_insn	(x=0X8051C404);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C408);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C40E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C41A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051C422);
	op_stkvar	(x,	1);
	create_insn	(0X8051C42C);
	create_insn	(0X8051C434);
	create_insn	(x=0X8051C440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C444);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C446);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C448);
	op_stkvar	(x,	1);
	create_insn	(0X8051C44E);
	create_insn	(x=0X8051C458);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C45A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C45C);
	op_stkvar	(x,	1);
	create_insn	(0X8051C464);
	create_insn	(x=0X8051C472);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C474);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051C476);
	op_stkvar	(x,	1);
	create_insn	(0X8051C47C);
	create_dword	(x=0X8051C49C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C4A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051C4A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051C4A8);
	create_dword	(0X8051C4AC);
	create_insn	(0X8051C4B0);
	create_insn	(0X8051C80E);
	set_name	(0X8051C80E,	"nullsub_3");
	create_insn	(0X8051C810);
	set_name	(0X8051C810,	"nullsub_5");
	create_insn	(0X8051CB48);
	create_insn	(x=0X8051CB4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051CB72);
	create_insn	(0X8051CB76);
	create_dword	(x=0X8051CB80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051CB84);
	create_insn	(x=0X8051CB8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CB90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CB94);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CB96);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CB98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CBBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CBC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CBC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CBC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CBCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CBCC);
	op_stkvar	(x,	1);
	create_insn	(0X8051CBE4);
	create_insn	(x=0X8051CBE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CBEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CBF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CBF8);
	op_stkvar	(x,	1);
	set_cmt	(0X8051CBFA,	"switch 9 cases",	0);
	set_cmt	(0X8051CC06,	"switch jump",	0);
	set_cmt	(0X8051CC0A,	"jump table for switch statement",	0);
	create_byte	(0X8051CC0A);
	set_name	(0X8051CC0A,	"jpt_8051CC06");
	create_byte	(0X8051CC0B);
	create_byte	(0X8051CC0C);
	create_byte	(0X8051CC0D);
	create_byte	(0X8051CC0E);
	create_byte	(0X8051CC0F);
	create_byte	(0X8051CC10);
	create_byte	(0X8051CC11);
	create_byte	(0X8051CC12);
	set_cmt	(0X8051CC14,	"jumptable 8051CC06 case 2",	1);
	create_insn	(0X8051CC14);
	set_cmt	(0X8051CC1A,	"jumptable 8051CC06 default case",	1);
	create_insn	(0X8051CC1A);
	set_name	(0X8051CC1A,	"def_8051CC06");
	create_insn	(0X8051CC2E);
	set_cmt	(0X8051CC3C,	"jumptable 8051CC06 case 3",	1);
	create_insn	(0X8051CC3C);
	create_insn	(0X8051CC4C);
	set_cmt	(0X8051CC5A,	"jumptable 8051CC06 case 4",	1);
	create_insn	(0X8051CC5A);
	create_insn	(x=0X8051CC60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CC62);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CC64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CC66);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CC6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051CC70);
	create_insn	(0X8051CC7A);
	create_insn	(0X8051CC84);
	set_cmt	(0X8051CC94,	"jumptable 8051CC06 case 5",	1);
	create_insn	(0X8051CC94);
	create_insn	(0X8051CCB2);
	set_cmt	(0X8051CCBE,	"jumptable 8051CC06 case 6",	1);
	create_insn	(0X8051CCBE);
	create_insn	(x=0X8051CCC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CCC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CCCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CCCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CCCE);
	op_stkvar	(x,	1);
	create_insn	(0X8051CCD8);
	set_cmt	(0X8051CCEC,	"jumptable 8051CC06 case 7",	1);
	create_insn	(0X8051CCEC);
	create_insn	(0X8051CCF4);
	set_cmt	(0X8051CD18,	"jumptable 8051CC06 case 8",	1);
	create_insn	(0X8051CD18);
	create_insn	(x=0X8051CD20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CD22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CD24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CD26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CD2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051CD30);
	set_cmt	(0X8051CD44,	"jumptable 8051CC06 case 9",	1);
	create_insn	(0X8051CD44);
	create_insn	(0X8051CD68);
	set_cmt	(0X8051CD78,	"jumptable 8051CC06 case 10",	1);
	create_insn	(0X8051CD78);
	create_insn	(x=0X8051CD80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CD82);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CD84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CD86);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CD8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CD90);
	op_stkvar	(x,	1);
	create_insn	(0X8051CD9A);
	create_insn	(x=0X8051CDCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CDD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051CDE8);
	create_insn	(x=0X8051CDEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CDF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051CE02);
	create_insn	(x=0X8051CE26);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CE2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051CE38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CE68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051CE6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CE70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CE7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CE8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CE9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CE9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051CEB2);
	create_insn	(x=0X8051CEB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CEBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051CECC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CED0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CED4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CED8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CEDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051CF28);
	create_insn	(x=0X8051CF2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CF34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CF50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051CF60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CF64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051CF68);
	create_dword	(x=0X8051CF6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051CF88);
	create_insn	(x=0X8051CF92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CF96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CF98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CF9A);
	op_stkvar	(x,	1);
	create_insn	(0X8051CFA2);
	create_insn	(x=0X8051CFAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CFAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CFB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CFB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051CFBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051CFC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CFCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CFD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CFD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051CFD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051CFDC);
	create_insn	(x=0X8051CFE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CFE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051CFEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051D000);
	create_insn	(x=0X8051D00A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D010);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051D018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D01C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D0B0);
	create_insn	(x=0X8051D0B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051D0C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D0E0);
	set_name	(0X8051D0E0,	"printf");
	create_insn	(x=0X8051D0E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D0F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D0F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D0FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D100);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051D118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D11C);
	create_insn	(0X8051D120);
	create_insn	(x=0X8051D126);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D13C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X8051D14C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D150);
	create_insn	(0X8051D154);
	set_name	(0X8051D154,	"Debug_Error2");
	create_insn	(x=0X8051D158);
	op_stkvar	(x,	1);
	set_cmt	(0X8051D160,	"char *",	0);
	create_insn	(x=0X8051D160);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D16A);
	op_stkvar	(x,	1);
	create_dword	(x=0X8051D174);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D180);
	set_cmt	(0X8051D190,	"a2",	0);
	create_insn	(x=0X8051D192);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051D19C,	"a1",	0);
	create_insn	(x=0X8051D19E);
	op_stkvar	(x,	1);
	set_cmt	(0X8051D1A0,	"a3",	0);
	set_cmt	(0X8051D1B2,	"a2",	0);
	set_cmt	(0X8051D1B4,	"a1",	0);
	create_insn	(x=0X8051D1B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051D1BC,	"a1",	0);
	create_insn	(x=0X8051D1BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051D1C8,	"a1",	0);
	create_insn	(0X8051D1D2);
	create_dword	(x=0X8051D1D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D1DC);
	create_dword	(x=0X8051D1E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D1E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D1E8);
	create_insn	(0X8051D230);
	create_insn	(0X8051D244);
	create_dword	(0X8051D250);
	create_insn	(0X8051D254);
	create_insn	(x=0X8051D260);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D264);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D266);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D26A);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D270);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D288);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D28C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D28E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D290);
	op_stkvar	(x,	1);
	create_insn	(0X8051D298);
	create_insn	(0X8051D2A6);
	create_insn	(x=0X8051D2AA);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D2B0);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D2B4);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_dword	(x=0X8051D2F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D2FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D300);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D304);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D308);
	create_insn	(0X8051D30C);
	create_insn	(x=0X8051D310);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D312);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D314);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D31A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D328);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D32E);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D346);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D362);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051D366);
	op_stkvar	(x,	1);
	create_insn	(0X8051D36A);
	create_dword	(x=0X8051D370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D374);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D424);
	create_insn	(x=0X8051D434);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D436);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D438);
	op_stkvar	(x,	1);
	create_insn	(0X8051D440);
	create_dword	(0X8051D448);
	create_dword	(x=0X8051D44C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D450);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051D454);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D466);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D480);
	op_hex		(x,	1);
	create_insn	(x=0X8051D492);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D4AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D4B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D4B2);
	op_stkvar	(x,	1);
	create_insn	(0X8051D4BA);
	create_insn	(x=0X8051D4F0);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D4F8);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D4FE);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D510);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D512);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D514);
	op_stkvar	(x,	1);
	create_insn	(0X8051D51E);
	create_insn	(0X8051D528);
	create_insn	(x=0X8051D53E);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D544);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D548);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D550);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D552);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(0X8051D556);
	create_insn	(0X8051D55A);
	create_insn	(0X8051D568);
	create_dword	(x=0X8051D570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D574);
	create_dword	(0X8051D578);
	create_dword	(x=0X8051D57C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D584);
	create_dword	(0X8051D588);
	create_dword	(0X8051D58C);
	create_insn	(0X8051D590);
	create_insn	(x=0X8051D5A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D5A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D5AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D5AC);
	op_stkvar	(x,	1);
	create_insn	(0X8051D5B6);
	create_insn	(0X8051D5C8);
	create_dword	(0X8051D5CC);
	create_dword	(x=0X8051D5D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D5D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X8051D5D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8051D6B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D6B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051D6C4);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D6C6);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D6C8);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D6D6);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D6D8);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D6DE);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_insn	(x=0X8051D6E0);
	op_plain_offset	(x,	1,	0XCB1D50);
	op_plain_offset	(x,	129,	0XCB1D50);
	create_dword	(x=0X8051D6F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051D6F4);
	create_dword	(x=0X8051D6F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051D708);
	set_name	(0X8051D708,	"memcpy");
	create_insn	(x=0X8051D730);
	op_hex		(x,	1);
	create_insn	(x=0X8051D738);
	op_hex		(x,	1);
	create_insn	(0X8051D7AC);
	create_insn	(0X8051D7E8);
	create_insn	(0X8051D814);
	set_name	(0X8051D814,	"memset");
	create_insn	(x=0X8051D828);
	op_hex		(x,	1);
	create_insn	(x=0X8051D834);
	op_hex		(x,	1);
	create_insn	(0X8051D880);
	create_insn	(0X8051D8A8);
	create_insn	(0X8051D8B6);
	create_insn	(0X8051D8C4);
	create_insn	(0X8051D8D4);
	create_insn	(0X8051D900);
	create_insn	(0X8051D90A);
	create_insn	(0X8051D91E);
	create_insn	(0X8051D932);
	create_insn	(0X8051D936);
	create_insn	(0X8051D93A);
	create_insn	(0X8051D94A);
	create_insn	(0X8051D96E);
	create_insn	(0X8051D98A);
	create_insn	(0X8051DA1A);
	create_insn	(0X8051DA22);
	create_insn	(0X8051DA44);
	create_insn	(x=0X8051DA50);
	op_hex		(x,	1);
	create_insn	(0X8051DA7C);
	create_insn	(x=0X8051DA84);
	op_hex		(x,	1);
	create_insn	(0X8051DA94);
	create_insn	(0X8051DB1C);
	create_insn	(x=0X8051DB22);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DB2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DB2E);
	op_hex		(x,	1);
	create_insn	(0X8051DB46);
	create_insn	(0X8051DB84);
	create_insn	(x=0X8051DB94);
	op_hex		(x,	1);
	create_insn	(x=0X8051DB9E);
	op_hex		(x,	1);
	create_insn	(0X8051DBAC);
	create_insn	(0X8051DBB4);
	create_insn	(x=0X8051DBCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DC20);
	op_hex		(x,	1);
	create_insn	(0X8051DC28);
	create_insn	(x=0X8051DC32);
	op_hex		(x,	1);
	create_insn	(0X8051DC38);
	create_insn	(0X8051DC46);
	create_insn	(0X8051DC52);
	create_insn	(0X8051DC6A);
	create_insn	(0X8051DC76);
	create_insn	(x=0X8051DC88);
	op_hex		(x,	1);
	create_insn	(0X8051DC8E);
	create_insn	(x=0X8051DC9A);
	op_hex		(x,	1);
	create_insn	(0X8051DCA0);
	create_insn	(x=0X8051DCA8);
	op_hex		(x,	1);
	create_insn	(x=0X8051DCB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DCB8);
	op_stkvar	(x,	1);
	create_insn	(0X8051DCCC);
	create_insn	(x=0X8051DCD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DCD6);
	op_stkvar	(x,	1);
	create_insn	(0X8051DCEA);
	create_insn	(x=0X8051DCEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051DCF4);
	op_hex		(x,	1);
	create_insn	(x=0X8051DD02);
	op_hex		(x,	1);
	create_insn	(x=0X8051DD08);
	op_hex		(x,	1);
	create_insn	(0X8051DD0E);
	create_insn	(x=0X8051DD12);
	op_hex		(x,	1);
	create_insn	(x=0X8051DD16);
	op_hex		(x,	1);
	create_insn	(0X8051DD1C);
	create_insn	(x=0X8051DD20);
	op_hex		(x,	1);
	create_insn	(x=0X8051DD24);
	op_hex		(x,	1);
	create_insn	(x=0X8051DD2A);
	op_hex		(x,	1);
	create_insn	(0X8051DD30);
	create_insn	(0X8051DD48);
	create_insn	(0X8051DD56);
	create_insn	(0X8051DD64);
	create_insn	(x=0X8051DD6C);
	op_hex		(x,	1);
	create_insn	(0X8051DD7A);
	create_insn	(x=0X8051DD84);
	op_hex		(x,	1);
	create_insn	(0X8051DD8A);
	create_insn	(0X8051DDA2);
	create_insn	(0X8051DDB0);
	create_insn	(0X8051DDBE);
	create_insn	(x=0X8051DDC6);
	op_hex		(x,	1);
	create_insn	(0X8051DDD4);
	create_insn	(x=0X8051DDDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DDE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DDE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DDE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DDF0);
	op_hex		(x,	1);
	create_insn	(x=0X8051DDF6);
	op_hex		(x,	1);
	create_insn	(0X8051DE12);
	create_insn	(0X8051DE20);
	create_insn	(0X8051DE2E);
	create_insn	(x=0X8051DE36);
	op_hex		(x,	1);
	create_insn	(0X8051DE44);
	create_insn	(x=0X8051DE50);
	op_hex		(x,	1);
	create_insn	(x=0X8051DE54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051DE5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DE68);
	op_hex		(x,	1);
	create_insn	(x=0X8051DE6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DE72);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DE98);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DE9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DEAC);
	op_hex		(x,	1);
	create_insn	(x=0X8051DEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DEBA);
	op_stkvar	(x,	1);
	create_insn	(0X8051DED0);
	create_insn	(0X8051DEE8);
	create_insn	(0X8051DEF4);
	create_insn	(0X8051DEFC);
	create_insn	(0X8051DF00);
	create_insn	(x=0X8051DF02);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF14);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF18);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF26);
	op_stkvar	(x,	1);
	create_insn	(0X8051DF34);
	create_insn	(0X8051DF38);
	create_insn	(x=0X8051DF58);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF5C);
	op_stkvar	(x,	1);
	create_insn	(0X8051DF72);
	create_insn	(x=0X8051DF76);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF88);
	op_hex		(x,	1);
	create_insn	(x=0X8051DF90);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DF94);
	op_stkvar	(x,	1);
	create_dword	(x=0X8051DFA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X8051DFAC);
	create_dword	(x=0X8051DFB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051DFB4);
	create_insn	(x=0X8051DFBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DFBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DFD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DFDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DFE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051DFE6);
	op_stkvar	(x,	1);
	create_insn	(0X8051E00A);
	create_insn	(0X8051E00E);
	create_insn	(0X8051E018);
	create_insn	(x=0X8051E020);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E022);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E024);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E028);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E02E);
	op_stkvar	(x,	1);
	create_dword	(0X8051E040);
	create_insn	(0X8051E044);
	create_insn	(x=0X8051E048);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E04E);
	op_stkvar	(x,	1);
	create_insn	(0X8051E08C);
	create_insn	(0X8051E09C);
	create_insn	(0X8051E0E6);
	create_insn	(0X8051E130);
	create_insn	(0X8051E178);
	create_insn	(0X8051E19C);
	set_name	(0X8051E19C,	"print_error");
	create_insn	(x=0X8051E1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E1A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051E1A8);
	op_stkvar	(x,	1);
	create_dword	(x=0X8051E1B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X8051E23C);
	create_insn	(x=0X8051E246);
	op_hex		(x,	1);
	create_insn	(0X8051E2E0);
	create_insn	(0X8051E2EA);
	create_insn	(0X8051E2F4);
	create_insn	(0X8051E30E);
	create_insn	(0X8051E318);
	create_insn	(0X8051E342);
	create_insn	(0X8051E356);
	create_insn	(x=0X8051E364);
	op_hex		(x,	1);
	create_insn	(0X8051E372);
	create_insn	(0X8051E4F0);
	set_cmt	(0X8051E4FE,	"char *",	0);
	create_dword	(0X8051E510);
	create_insn	(0X8051E514);
	set_cmt	(0X8051E534,	"result",	0);
	create_insn	(0X8051E54E);
	set_cmt	(0X8051E564,	"a2",	0);
	set_cmt	(0X8051E566,	"a3",	0);
	create_insn	(0X8051E578);
	set_cmt	(0X8051E57C,	"a2",	0);
	set_cmt	(0X8051E57E,	"a3",	0);
	set_cmt	(0X8051E588,	"result",	0);
	set_cmt	(0X8051E58A,	"a2",	0);
	set_cmt	(0X8051E58E,	"a3",	0);
	create_insn	(0X8051E5A6);
	create_insn	(0X8051E5AE);
	create_insn	(0X8051E5C8);
	set_cmt	(0X8051E5CE,	"a2",	0);
	create_insn	(0X8051E5E6);
	create_insn	(0X8051E5F6);
	set_cmt	(0X8051E610,	"result",	0);
	set_cmt	(0X8051E612,	"a3",	0);
	create_insn	(0X8051E624);
	set_cmt	(0X8051E628,	"result",	0);
	set_cmt	(0X8051E62A,	"a3",	0);
	set_cmt	(0X8051E634,	"result",	0);
	set_cmt	(0X8051E638,	"a2",	0);
	set_cmt	(0X8051E63C,	"a3",	0);
	create_insn	(0X8051E654);
	create_insn	(0X8051E660);
	create_insn	(0X8051E68C);
	create_insn	(x=0X8051E6B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051E6C4);
	create_insn	(x=0X8051E85C);
	op_hex		(x,	1);
	create_insn	(0X8051E880);
	create_insn	(0X8051E8B8);
	create_insn	(0X8051E8E0);
	create_insn	(0X8051E8E8);
	create_double	(0X8051E930);
	create_double	(0X8051E938);
	create_insn	(0X8051E998);
	set_name	(0X8051E998,	"nullsub_1");
	create_insn	(0X8051E9A0);
	create_insn	(x=0X8051E9B0);
	op_stkvar	(x,	1);
	create_insn	(0X8051E9BC);
	set_name	(0X8051E9BC,	"j_memcpy");
	create_insn	(0X8051E9C0);
	create_insn	(x=0X8051E9D0);
	op_stkvar	(x,	1);
	create_insn	(0X8051E9DC);
	set_name	(0X8051E9DC,	"Divide64");
	create_insn	(x=0X8051E9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E9F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051E9F4);
	op_stkvar	(x,	1);
	create_insn	(0X8051EA00);
	create_insn	(0X8051EA44);
	create_insn	(x=0X8051EA64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051EC04);
	create_insn	(0X8051EC10);
	create_insn	(0X8051EC1C);
	create_insn	(0X8051EC24);
	create_insn	(x=0X8051EC2C);
	op_stkvar	(x,	1);
	create_insn	(0X8051EC78);
	create_insn	(0X8051ECA4);
	create_insn	(0X8051ECE0);
	create_insn	(0X8051ED2C);
	create_insn	(0X8051ED58);
	create_insn	(0X8051ED7C);
	create_insn	(0X8051EDA4);
	create_insn	(0X8051EDAC);
	create_insn	(0X8051EDDC);
	create_insn	(0X8051EDF4);
	create_insn	(0X8051EE38);
	create_insn	(0X8051EE6C);
	create_insn	(0X8051EE98);
	create_insn	(x=0X8051EF04);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EF18);
	op_hex		(x,	1);
	create_insn	(0X8051EF62);
	create_insn	(x=0X8051EF66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EF6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EF70);
	op_plain_offset	(x,	1,	0X807B1D90);
	op_plain_offset	(x,	129,	0X807B1D90);
	create_insn	(x=0X8051EF76);
	op_plain_offset	(x,	1,	0X807B1D90);
	op_plain_offset	(x,	129,	0X807B1D90);
	create_insn	(0X8051EF88);
	create_insn	(x=0X8051EFA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EFA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EFBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EFBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EFCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EFD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EFD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EFD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051EFDC,	"a3",	0);
	create_insn	(x=0X8051EFE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051EFE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051EFEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F002);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F008);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F00C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F010);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051F014,	"a3",	0);
	create_insn	(x=0X8051F01C);
	op_stkvar	(x,	1);
	set_cmt	(0X8051F026,	"func",	0);
	set_cmt	(0X8051F02E,	"arg",	0);
	set_cmt	(0X8051F030,	"prio",	0);
	set_cmt	(0X8051F034,	"stack_size",	0);
	create_insn	(x=0X8051F034);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F036);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F048);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F04C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F04E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F05A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F06A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F070);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F074);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F076);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F078);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F090);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F0A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F0C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051F0D0,	"a1",	0);
	create_insn	(x=0X8051F0E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F0E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F0EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F0F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F0FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F0FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F102);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F106);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F110);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F114);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F118);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F11C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051F120,	"a3",	0);
	create_insn	(x=0X8051F132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F138);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F140);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F144);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051F14C,	"a2",	0);
	set_cmt	(0X8051F14E,	"a3",	0);
	create_insn	(x=0X8051F15A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F15E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F162);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F166);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F16A);
	op_stkvar	(x,	1);
	create_insn	(0X8051F178);
	create_insn	(x=0X8051F17C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F18C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F18E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F192);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051F8FA);
	create_insn	(x=0X8051F910);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F91A);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F922);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F926);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051F928);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F92C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051F932);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051F96C);
	create_insn	(x=0X8051F970);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051F980);
	create_insn	(x=0X8051F986);
	op_plain_offset	(x,	1,	0X807B1E20);
	op_plain_offset	(x,	129,	0X807B1E20);
	create_insn	(0X8051FC20);
	create_insn	(x=0X8051FC24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FC2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FC38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FC3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051FC52,	"a1",	0);
	create_insn	(x=0X8051FC52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X8051FC5A,	"a2",	0);
	create_insn	(0X8051FC6C);
	create_insn	(x=0X8051FC7C);
	op_stkvar	(x,	1);
	create_insn	(0X8051FC8C);
	create_insn	(x=0X8051FC92);
	op_hex		(x,	1);
	create_insn	(0X8051FCAA);
	create_insn	(0X8051FCC0);
	create_insn	(0X8051FCD6);
	create_insn	(x=0X8051FCE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FCE8);
	op_stkvar	(x,	1);
	create_insn	(0X8051FD00);
	create_insn	(0X8051FD1A);
	create_insn	(0X8051FD34);
	create_insn	(0X8051FD5A);
	create_insn	(x=0X8051FD60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FD64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FD68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FD6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X8051FD72);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8051FD76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X8051FD82);
	create_insn	(0X8051FDA0);
	create_insn	(0X80539A88);
	make_array	(0X80539A8A,	0X2);
	create_insn	(0X80539A8C);
	create_insn	(0X80539A90);
	make_array	(0X80539A92,	0X2);
	create_insn	(0X80539A94);
	create_insn	(x=0X80539A98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80539A9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80539AA8);
	make_array	(0X80539AAA,	0X2);
	create_insn	(0X80539AAC);
	create_insn	(x=0X80539AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X80539AB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X80539AB8);
	make_array	(0X80539ABA,	0X2);
	create_insn	(0X80539ABC);
	create_dword	(0X8053A000);
	create_strlit	(0X8053AF26,	0X24);
	set_name	(0X8053AF26,	"aDebugAssertFai");
	create_strlit	(0X8053B039,	0X5);
	set_name	(0X8053B039,	"aFabs");
	create_strlit	(0X8053B03E,	0X4);
	set_name	(0X8053B03E,	"aPow");
	create_strlit	(0X8053B094,	0X5);
	set_name	(0X8053B094,	"aGmix");
	create_strlit	(0X8053B099,	0XB);
	set_name	(0X8053B099,	"aInitialize");
	create_strlit	(0X8053B0A4,	0X9);
	set_name	(0X8053B0A4,	"a0Ret");
	create_strlit	(0X8053B0AD,	0XB);
	set_name	(0X8053B0AD,	"aGetsession");
	create_strlit	(0X8053B0B8,	0X1F);
	set_name	(0X8053B0B8,	"aPinNumaudioren");
	create_strlit	(0X8053B0D7,	0X1A);
	set_name	(0X8053B0D7,	"aPinNumaudioout");
	create_strlit	(0X8053B0F1,	0X21);
	set_name	(0X8053B0F1,	"aPinGmixNumnear");
	create_strlit	(0X8053B112,	0X22);
	set_name	(0X8053B112,	"aPinGmixNumgame");
	create_strlit	(0X8053B134,	0X2B);
	set_name	(0X8053B134,	"aUnknownMessage");
	create_strlit	(0X8053B15F,	0XF);
	set_name	(0X8053B15F,	"aProcessmessage");
	create_strlit	(0X8053B1A7,	0X11);
	set_name	(0X8053B1A7,	"aProcessoutdevi");
	create_strlit	(0X8053B1B8,	0X32);
	set_name	(0X8053B1B8,	"aSamplesSizeofM");
	create_strlit	(0X8053B1EA,	0X6);
	set_name	(0X8053B1EA,	"aClose");
	create_strlit	(0X8053B284,	0X6);
	set_name	(0X8053B284,	"aFalse");
	create_strlit	(0X8053B337,	0X5);
	set_name	(0X8053B337,	"aOpen");
	create_strlit	(0X8053B45A,	0X11);
	set_name	(0X8053B45A,	"aPreparenewbuff");
	create_strlit	(0X8053B46B,	0X15);
	set_name	(0X8053B46B,	"aCpuindexDspind");
	create_strlit	(0X8053B480,	0X35);
	set_name	(0X8053B480,	"aCpuindexDspind_0");
	create_strlit	(0X8053B4B5,	0X30);
	set_name	(0X8053B4B5,	"aSizebytestotal");
	create_strlit	(0X8053B8A4,	0XF);
	set_name	(0X8053B8A4,	"aMemorymapunmap");
	create_strlit	(0X8053B8B3,	0X64);
	set_name	(0X8053B8B3,	"aDHomeTeamcityW");
	create_strlit	(0X8053B917,	0X5);
	set_name	(0X8053B917,	"aMain");
	create_strlit	(0X8053B91C,	0X7);
	set_name	(0X8053B91C,	"aAudio");
	create_strlit	(0X8053B923,	0X2D);
	set_name	(0X8053B923,	"aReceivedInvali");
	create_strlit	(0X8053B950,	0XE);
	set_name	(0X8053B950,	"aAudiorenderer");
	create_strlit	(0X8053B95E,	0X19);
	set_name	(0X8053B95E,	"aMemorymapunmap_0");
	create_strlit	(0X8053B977,	0X15);
	set_name	(0X8053B977,	"aUnknownRpcComm");
	create_strlit	(0X8053B98C,	0X11);
	set_name	(0X8053B98C,	"aInitializedevi");
	create_strlit	(0X8053B99D,	0X1E);
	set_name	(0X8053B99D,	"aSessionidNumde");
	create_strlit	(0X8053B9BB,	0XD);
	set_name	(0X8053B9BB,	"aMainaudioout");
	create_strlit	(0X8053B9C8,	0X11);
	set_name	(0X8053B9C8,	"aCheckdevicesta");
	create_strlit	(0X8053B9D9,	0X17);
	set_name	(0X8053B9D9,	"aPgmixdeviceNul");
	create_strlit	(0X8053B9F0,	0X31);
	set_name	(0X8053B9F0,	"aPgmixdeviceSta");
	create_strlit	(0X8053BA21,	0X12);
	set_name	(0X8053BA21,	"aUpdatedevicest");
	create_strlit	(0X8053BA33,	0X11);
	set_name	(0X8053BA33,	"aReadauxbufferd");
	create_strlit	(0X8053BA44,	0X12);
	set_name	(0X8053BA44,	"aCountCountmax");
	create_strlit	(0X8053BA56,	0X1A);
	set_name	(0X8053BA56,	"aPoutbufferinfo");
	create_strlit	(0X8053BA70,	0X14);
	set_name	(0X8053BA70,	"aPoutdataNullpt");
	create_strlit	(0X8053BA84,	0X10);
	set_name	(0X8053BA84,	"aBufferaddr0");
	create_strlit	(0X8053BA94,	0X12);
	set_name	(0X8053BA94,	"aWriteauxbuffer");
	create_strlit	(0X8053BAA6,	0X17);
	set_name	(0X8053BAA6,	"aWritecountCoun");
	create_strlit	(0X8053BABD,	0X11);
	set_name	(0X8053BABD,	"aPdataNullptr");
	create_strlit	(0X8053BACE,	0X13);
	set_name	(0X8053BACE,	"aBufferaddress0");
	create_strlit	(0X8053BAE1,	0X12);
	set_name	(0X8053BAE1,	"aResetauxbuffer");
	create_strlit	(0X8053BAF3,	0X19);
	set_name	(0X8053BAF3,	"aPoutauxbufferN");
	create_strlit	(0X8053BB0C,	0X6);
	set_name	(0X8053BB0C,	"aSetup");
	create_strlit	(0X8053BB12,	0X2D);
	set_name	(0X8053BB12,	"aCommandlistsiz");
	create_strlit	(0X8053BB3F,	0X8);
	set_name	(0X8053BB3F,	"aProcess");
	create_strlit	(0X8053BB47,	0X32);
	set_name	(0X8053BB47,	"aPcommandheader");
	create_strlit	(0X8053BB79,	0X82);
	set_name	(0X8053BB79,	"aMCommandlistsi");
	create_strlit	(0X8053BBFB,	0X75);
	set_name	(0X8053BBFB,	"aDHomeTeamcityW_0");
	create_strlit	(0X8053BC70,	0X16);
	set_name	(0X8053BC70,	"aUnknownCommand");
	create_strlit	(0X8053BC86,	0X1D);
	set_name	(0X8053BC86,	"aProcessdatasou");
	create_strlit	(0X8053BCA3,	0X18);
	set_name	(0X8053BCA3,	"aVerifycommandP");
	create_strlit	(0X8053BCBB,	0XF);
	set_name	(0X8053BCBB,	"aProcesscommand");
	create_strlit	(0X8053BCCA,	0X12);
	set_name	(0X8053BCCA,	"aMSamplecount0");
	create_strlit	(0X8053BCDC,	0X3B);
	set_name	(0X8053BCDC,	"aMixbuffercount");
	create_strlit	(0X8053BD17,	0X1F);
	set_name	(0X8053BD17,	"aProcesslightli");
	create_strlit	(0X8053BD36,	0X57);
	set_name	(0X8053BD36,	"aFiltertapcount");
	create_strlit	(0X8053BD8D,	0X16);
	set_name	(0X8053BD8D,	"aDecodefromwave");
	create_strlit	(0X8053BDA3,	0X12);
	set_name	(0X8053BDA3,	"aOutputNullptr");
	create_strlit	(0X8053BDB5,	0X15);
	set_name	(0X8053BDB5,	"aTargetsamplera");
	create_strlit	(0X8053BDCA,	0X11);
	set_name	(0X8053BDCA,	"aSamplecount0");
	create_strlit	(0X8053BDDB,	0X11);
	set_name	(0X8053BDDB,	"aStateNullptr");
	create_strlit	(0X8053BDEC,	0X16);
	set_name	(0X8053BDEC,	"aWavebufferNull");
	create_strlit	(0X8053BE02,	0XD);
	set_name	(0X8053BE02,	"aChannel0");
	create_strlit	(0X8053BE0F,	0X12);
	set_name	(0X8053BE0F,	"aChannelcount1");
	create_strlit	(0X8053BE21,	0XA6);
	set_name	(0X8053BE21,	"aSrcqualityVoic");
	create_strlit	(0X8053BEC7,	0XB);
	set_name	(0X8053BEC7,	"aPitch0");
	create_strlit	(0X8053BED2,	0X15);
	set_name	(0X8053BED2,	"aSourcesamplera");
	create_strlit	(0X8053BEE7,	0XC);
	set_name	(0X8053BEE7,	"aOffset0");
	create_strlit	(0X8053BEF3,	0X6F);
	set_name	(0X8053BEF3,	"aDHomeTeamcityW_1");
	create_strlit	(0X8053BF62,	0X20);
	set_name	(0X8053BF62,	"aWavebufferinde");
	create_strlit	(0X8053BF82,	0X14);
	set_name	(0X8053BF82,	"aUnsupportedFor");
	create_strlit	(0X8053BF96,	0X31);
	set_name	(0X8053BF96,	"aTmp16bPPTmp16b");
	create_strlit	(0X8053BFC7,	0X2A);
	set_name	(0X8053BFC7,	"aRemainsampleco");
	create_strlit	(0X8053BFF1,	0XC);
	set_name	(0X8053BFF1,	"aDecodepcm16");
	create_strlit	(0X8053BFFD,	0X17);
	set_name	(0X8053BFFD,	"aReqTargetchann");
	create_strlit	(0X8053C014,	0XF);
	set_name	(0X8053C014,	"aDecodepcmfloat");
	create_strlit	(0X8053C023,	0X11);
	set_name	(0X8053C023,	"aApplydelayeffe");
	create_strlit	(0X8053C034,	0X89);
	set_name	(0X8053C034,	"aPparameterNumc");
	create_strlit	(0X8053C0BD,	0X18);
	set_name	(0X8053C0BD,	"aApplylightlimi");
	create_strlit	(0X8053C0D5,	0X8D);
	set_name	(0X8053C0D5,	"aPparameterChan");
	create_strlit	(0X8053C162,	0X12);
	set_name	(0X8053C162,	"aApplyreverbeff");
	create_strlit	(0X8053C174,	0X79);
	set_name	(0X8053C174,	"aReverbNumchann");
	create_strlit	(0X8053C1ED,	0X36);
	set_name	(0X8053C1ED,	"aReverbEarlymod");
	create_strlit	(0X8053C223,	0X34);
	set_name	(0X8053C223,	"aReverbLatemode");
	create_strlit	(0X8053C257,	0X8);
	set_name	(0X8053C257,	"aDivqfqf");
	create_strlit	(0X8053C25F,	0XD);
	set_name	(0X8053C25F,	"a0Divisor");
	create_strlit	(0X8053C26C,	0X17);
	set_name	(0X8053C26C,	"aApplyi3dl2reve");
	create_strlit	(0X8053C283,	0X16);
	set_name	(0X8053C283,	"aApplycompresso");
	create_strlit	(0X8053C299,	0X9);
	set_name	(0X8053C299,	"aResample");
	create_strlit	(0X8053C2A2,	0X10);
	set_name	(0X8053C2A2,	"aSrcprocessfram");
	create_strlit	(0X8053C2B2,	0X5);
	set_name	(0X8053C2B2,	"aSend");
	create_strlit	(0X8053C2B7,	0X23);
	set_name	(0X8053C2B7,	"aMessageMailbox");
	create_strlit	(0X8053C2DA,	0X11);
	set_name	(0X8053C2DA,	"aIsserverTrue");
	create_strlit	(0X8053C2EB,	0X2A);
	set_name	(0X8053C2EB,	"aIdStdNumericLi");
	create_strlit	(0X8053C315,	0XC);
	set_name	(0X8053C315,	"aResult0");
	create_strlit	(0X8053C321,	0X5);
	set_name	(0X8053C321,	"aRecv");
	create_dword	(0X8053C334);
	make_array	(0X8053C334,	0X14);
	create_dword	(0X8053C384);
	make_array	(0X8053C384,	0X14);
	create_dword	(0X8053C3D4);
	make_array	(0X8053C3D4,	0X37);
	create_dword	(0X8053C4B0);
	make_array	(0X8053C4B0,	0X32);
	create_dword	(0X8053C578);
	make_array	(0X8053C578,	0X101);
	create_dword	(0X8053CD80);
	make_array	(0X8053CD80,	0X101);
	create_word	(0X8053FA18);
	create_word	(0X8053FA2C);
	create_word	(0X8053FA40);
	create_word	(0X8053FA54);
	create_word	(0X8053FA68);
	create_strlit	(0X8053FA80,	0XC);
	set_name	(0X8053FA80,	"aOpusdecoder");
	create_strlit	(0X8053FA8C,	0XF);
	set_name	(0X8053FA8C,	"aStatusTrue");
	create_strlit	(0X8053FA9B,	0X2D);
	set_name	(0X8053FA9B,	"aR00x08xR10x08x_0");
	create_strlit	(0X8053FAC8,	0X2D);
	set_name	(0X8053FAC8,	"aR40x08xR50x08x_0");
	create_strlit	(0X8053FAF5,	0X2D);
	set_name	(0X8053FAF5,	"aR80x08xR90x08x");
	create_strlit	(0X8053FB22,	0X2D);
	set_name	(0X8053FB22,	"aR120x08xUsp0x0_0");
	create_strlit	(0X8053FB4F,	0XD);
	set_name	(0X8053FB4F,	"aSpsr0x08x");
	create_strlit	(0X8053FB5C,	0X1C);
	set_name	(0X8053FB5C,	"aCSR130x08xR140");
	create_strlit	(0X8053FB78,	0X4);
	set_name	(0X8053FB78,	"aFiq");
	create_strlit	(0X8053FB7C,	0X4);
	set_name	(0X8053FB7C,	"aIrq");
	create_strlit	(0X8053FB80,	0X4);
	set_name	(0X8053FB80,	"aSvc");
	create_strlit	(0X8053FB84,	0X4);
	set_name	(0X8053FB84,	"aUnd");
	create_strlit	(0X8053FB88,	0X4);
	set_name	(0X8053FB88,	"aSys");
	create_strlit	(0X8053FB8C,	0X4);
	set_name	(0X8053FB8C,	"aAbt");
	create_strlit	(0X8053FB90,	0X1D);
	set_name	(0X8053FB90,	"aBottomOfStackA_0");
	create_strlit	(0X8053FBAD,	0X1B);
	set_name	(0X8053FBAD,	"aHaltSpinningFo");
	create_strlit	(0X8053FBC8,	0X1A);
	set_name	(0X8053FBC8,	"aL2CacheAlready");
	create_strlit	(0X8053FBF4,	0X2A);
	set_name	(0X8053FBF4,	"aUnableToSendBo");
	create_strlit	(0X8053FCC5,	0X1F);
	set_name	(0X8053FCC5,	"aOsMemoryLayout");
	create_strlit	(0X8053FCE4,	0X11);
	set_name	(0X8053FCE4,	"a15sPP");
	create_byte	(0X8053FCF5);
	make_array	(0X8053FCF5,	0X1B);
	create_strlit	(0X8053FD10,	0XE);
	set_name	(0X8053FD10,	"aDataUncached");
	create_byte	(0X8053FD1E);
	make_array	(0X8053FD1E,	0X38);
	create_strlit	(0X8053FD56,	0X2B);
	set_name	(0X8053FD56,	"aUnableToSetInt");
	create_byte	(0X8053FD81);
	make_array	(0X8053FD81,	0X1B);
	set_name	(0X8053FD81,	"name");
	create_strlit	(0X8053FD9C,	0X26);
	set_name	(0X8053FD9C,	"aFailedToCreate");
	create_byte	(0X8053FDC2);
	make_array	(0X8053FDC2,	0X12);
	create_strlit	(0X8053FDD4,	0X2B);
	set_name	(0X8053FDD4,	"aFailedToCreate_0");
	create_strlit	(0X8053FDFF,	0X23);
	set_name	(0X8053FDFF,	"aInitializingAd");
	create_strlit	(0X8053FE47,	0X1A);
	set_name	(0X8053FE47,	"aVectorUHasNoHa");
	create_strlit	(0X8053FE80,	0X1B);
	set_name	(0X8053FE80,	"aSVectorOutOfRa");
	create_strlit	(0X8053FE9B,	0X31);
	set_name	(0X8053FE9B,	"aSTheInterruptU");
	create_strlit	(0X8053FECC,	0X20);
	set_name	(0X8053FECC,	"aSSupportsSecur");
	create_strlit	(0X8053FEEC,	0X1B);
	set_name	(0X8053FEEC,	"aSSupportsUInte");
	create_strlit	(0X8053FF07,	0X18);
	set_name	(0X8053FF07,	"aEnablingSInter");
	create_strlit	(0X8053FF1F,	0X23);
	set_name	(0X8053FF1F,	"aUnableToSetUIn");
	create_strlit	(0X8053FF46,	0X25);
	set_name	(0X8053FF46,	"aSCounterIsUsed");
	create_strlit	(0X8053FF6F,	0X1F);
	set_name	(0X8053FF6F,	"aFailedToOpenSt");
	create_strlit	(0X80540049,	0X15);
	set_name	(0X80540049,	"aInvalidAramAli");
	create_strlit	(0X805400D0,	0X37);
	set_name	(0X805400D0,	"aAramAlias20xXM");
	create_strlit	(0X80540178,	0X9);
	set_name	(0X80540178,	"aAdspDfs");
	create_strlit	(0X805402AF,	0X8);
	set_name	(0X805402AF,	"aInWfi");
	create_strlit	(0X805402B7,	0XC);
	set_name	(0X805402B7,	"aExitedWfi");
	create_strlit	(0X80540359,	0X10);
	set_name	(0X80540359,	"a2");
	create_strlit	(0X80540394,	0X5);
	set_name	(0X80540394,	"aL210");
	create_strlit	(0X805403CC,	0X1E);
	set_name	(0X805403CC,	"aSCacheControll");
	create_strlit	(0X805403EA,	0X35);
	set_name	(0X805403EA,	"aDWaysCacheId0x");
	create_strlit	(0X8054041F,	0XD);
	set_name	(0X8054041F,	"aSHalting");
	create_strlit	(0X8054042C,	0X2C);
	set_name	(0X8054042C,	"aR00x08xR10x08x");
	create_strlit	(0X80540458,	0X2C);
	set_name	(0X80540458,	"aR40x08xR50x08x");
	create_strlit	(0X80540484,	0X2C);
	set_name	(0X80540484,	"aR120x08xUsp0x0");
	create_strlit	(0X805404B0,	0X1C);
	set_name	(0X805404B0,	"aBottomOfStackA");
	create_strlit	(0X80540508,	0X19);
	set_name	(0X80540508,	"aArchArmArmMmuS");
	create_strlit	(0X8054054A,	0X27);
	set_name	(0X8054054A,	"aUnableToAlloca");
	create_strlit	(0X805405FC,	0X2D);
	set_name	(0X805405FC,	"aDescTypeMmuMem");
	create_strlit	(0X8054063C,	0X15);
	set_name	(0X8054063C,	"aTopOfBootstrap");
	create_strlit	(0X80540651,	0X17);
	set_name	(0X80540651,	"aInitializingPl");
	create_strlit	(0X80540668,	0X15);
	set_name	(0X80540668,	"aInitializingTa");
	create_strlit	(0X8054067D,	0X1E);
	set_name	(0X8054067D,	"aInitilizingAds");
	create_strlit	(0X8054069B,	0X15);
	set_name	(0X8054069B,	"aCallingAppsIni");
	create_strlit	(0X805406B0,	0X1A);
	set_name	(0X805406B0,	"aCallingStaticA");
	create_strlit	(0X805406CA,	0X15);
	set_name	(0X805406CA,	"aWelcomeToAdspO");
	create_strlit	(0X805406DF,	0X16);
	set_name	(0X805406DF,	"aCallingConstru");
	create_strlit	(0X805406F5,	0X13);
	set_name	(0X805406F5,	"aInitializingHe");
	create_strlit	(0X80540708,	0X26);
	set_name	(0X80540708,	"aCreatingBootst");
	create_strlit	(0X8054072E,	0XB);
	set_name	(0X8054072E,	"aBootstrap2");
	create_strlit	(0X8054074A,	0X25);
	set_name	(0X8054074A,	"aUnableToQueueA");
	create_strlit	(0X805407A8,	0X28);
	set_name	(0X805407A8,	"aUnableToCreate");
	create_strlit	(0X8054082E,	0X18);
	set_name	(0X8054082E,	"aRunAppMailboxR");
	create_strlit	(0X80540888,	0X16);
	set_name	(0X80540888,	"aAdspStaticApps");
	create_strlit	(0X8054089E,	0X15);
	set_name	(0X8054089E,	"aAdspAppModuleI");
	create_strlit	(0X805408B3,	0X6);
	set_name	(0X805408B3,	"aShell");
	create_strlit	(0X80540A19,	0XF);
	set_name	(0X80540A19,	"aKernelEventC");
	create_strlit	(0X80540A28,	0X18);
	set_name	(0X80540A28,	"aEMagicEventMag");
	create_strlit	(0X80540A40,	0X16);
	set_name	(0X80540A40,	"aInitializingTh");
	create_strlit	(0X80540A56,	0X15);
	set_name	(0X80540A56,	"aInitializingTi");
	create_strlit	(0X80540AEC,	0X52);
	set_name	(0X80540AEC,	"aMutexAcquireTi");
	create_strlit	(0X80540BF9,	0X16);
	set_name	(0X80540BF9,	"aInCriticalSect");
	create_strlit	(0X80540CE7,	0X10);
	set_name	(0X80540CE7,	"aKernelThreadC");
	create_strlit	(0X80540D10,	0X19);
	set_name	(0X80540D10,	"aTStateThreadRe");
	create_strlit	(0X80540D74,	0X5);
	set_name	(0X80540D74,	"aText");
	create_strlit	(0X80540DC5,	0X26);
	set_name	(0X80540DC5,	"aCurrentThreadM");
	create_strlit	(0X80540DEB,	0X28);
	set_name	(0X80540DEB,	"aCurrentThreadS_0");
	create_strlit	(0X80540E2C,	0X28);
	set_name	(0X80540E2C,	"aCurrentThreadS");
	create_strlit	(0X80540E54,	0X2C);
	set_name	(0X80540E54,	"aSleepingInDead");
	create_strlit	(0X80540E80,	0XA);
	set_name	(0X80540E80,	"aBootstrap");
	create_strlit	(0X80540FBB,	0X20);
	set_name	(0X80540FBB,	"aWaitMagicWaitQ");
	create_strlit	(0X80540FF4,	0X1F);
	set_name	(0X80540FF4,	"aTBlockingWaitQ");
	create_strlit	(0X805410D0,	0XF);
	set_name	(0X805410D0,	"aTreeIsEmpty");
	create_strlit	(0X805410DF,	0X10);
	set_name	(0X805410DF,	"aNoEdfThread");
	create_strlit	(0X805411E4,	0X10);
	set_name	(0X805411E4,	"aLibCbufCbufC");
	create_strlit	(0X805411F4,	0X5);
	set_name	(0X805411F4,	"aCbuf");
	create_strlit	(0X805412E5,	0X16);
	set_name	(0X805412E5,	"aLibConsoleCons");
	create_strlit	(0X805412FB,	0XA);
	set_name	(0X805412FB,	"aC0");
	create_strlit	(0X80541305,	0X9);
	set_name	(0X80541305,	"aC");
	create_strlit	(0X8054130E,	0X9);
	set_name	(0X8054130E,	"aC_0");
	create_strlit	(0X80541317,	0X9);
	set_name	(0X80541317,	"aC_1");
	create_strlit	(0X80541320,	0X4);
	set_name	(0X80541320,	"aOff");
	create_strlit	(0X80541324,	0X13);
	set_name	(0X80541324,	"aCommandNotFoun");
	create_strlit	(0X80541337,	0X17);
	set_name	(0X80541337,	"aSNotEnoughMemo");
	create_strlit	(0X8054134E,	0X1C);
	set_name	(0X8054134E,	"aEnteringMainCo");
	create_strlit	(0X8054136A,	0X1B);
	set_name	(0X8054136A,	"aExitingMainCon");
	create_strlit	(0X80541385,	0X6);
	set_name	(0X80541385,	"aBlock");
	create_strlit	(0X8054138B,	0X14);
	set_name	(0X8054138B,	"aBlockNextNull");
	create_strlit	(0X805413E3,	0XD);
	set_name	(0X805413E3,	"aCommandLoop");
	create_strlit	(0X805413F0,	0X14);
	set_name	(0X805413F0,	"aPanicCallerP");
	create_strlit	(0X80541404,	0XA);
	set_name	(0X80541404,	"a0x08lx");
	create_strlit	(0X80541434,	0X10);
	set_name	(0X80541434,	"aLibHeapHeapC");
	create_strlit	(0X80541444,	0X21);
	set_name	(0X80541444,	"aChunkEndVaddrT");
	create_strlit	(0X8054154C,	0X18);
	set_name	(0X8054154C,	"aAsMagicHeapMag");
	create_strlit	(0X80541594,	0X7);
	set_name	(0X80541594,	"aNull");
	create_strlit	(0X805415C2,	0X33);
	set_name	(0X805415C2,	"aMsgqInitDSizeC");
	create_strlit	(0X805415F5,	0X2B);
	set_name	(0X805415F5,	"aErrorSAtDCanno");
	create_strlit	(0X80541620,	0X37);
	set_name	(0X80541620,	"aErrorSAtDMailb");
	create_strlit	(0X80541657,	0X4E);
	set_name	(0X80541657,	"aErrorSAtDMailb_0");
	create_strlit	(0X805416A5,	0X33);
	set_name	(0X805416A5,	"aMsgNnCodecDeta");
	create_strlit	(0X805416D8,	0XB);
	set_name	(0X805416D8,	"aDispatcher");
	create_strlit	(0X805416E3,	0X37);
	set_name	(0X805416E3,	"aErrorSAtDCould");
	create_strlit	(0X8054171A,	0X36);
	set_name	(0X8054171A,	"aErrorSAtDAnErr");
	create_strlit	(0X80541750,	0X3C);
	set_name	(0X80541750,	"aErrorSAtDCould_0");
	create_strlit	(0X8054197F,	0X9);
	set_name	(0X8054197F,	"aSenddata");
	create_strlit	(0X80541988,	0X20);
	set_name	(0X80541988,	"aDataMailboxhea");
	create_dword	(0X805469B8);
	create_dword	(0X80547AD0);
	create_dword	(0X80547AD4);
	create_dword	(0X80547AE8);
	create_dword	(0X80547AEC);
	create_dword	(0X80547B7C);
	create_dword	(x=0X80547BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80547BF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X80547BF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80547BFC);
	create_dword	(0X80547C00);
	MakeStruct	(0X80547C08,	"adsp_app_descriptor");
	set_name	(0X80547C08,	"gMix_SetupInfo");
	MakeStruct	(0X80547C70,	"adsp_app_descriptor");
	set_name	(0X80547C70,	"AudioRenderer_SetupInfo");
	MakeStruct	(0X80547CD8,	"adsp_app_descriptor");
	create_dword	(x=0X80547D40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X80547D40,	"OpusSetupInfo");
	create_dword	(0X80548000);
	create_dword	(x=0X80548004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X80548008);
	MakeStruct	(0X80549000,	"gMixData");
	set_name	(0X80549000,	"gMix_Data");
	create_dword	(0X8077C004);
	create_dword	(0X8077C008);
	create_byte	(0X807A1C78);
	MakeStruct	(0X807A1C7C,	"adsp_mbx_t");
	set_name	(0X807A1C7C,	"gAudioRenderMailbox");
	MakeStruct	(0X807A1CFC,	"adsp_mbx_t");
	set_name	(0X807A1CFC,	"gAudioRenderMapMailbox");
	create_dword	(0X807A1D7C);
	set_name	(0X807A1D7C,	"gAudioRender_MapUnmapThread");
	MakeStruct	(0X807A1D80,	"nn::audio::dsp::CommandListProcessor");
	set_name	(0X807A1D80,	"gCommandListProcessor1");
	MakeStruct	(0X807A1DC0,	"nn::audio::dsp::CommandListProcessor");
	set_name	(0X807A1E00,	"AudioRenderer_Main_Data");
	MakeStruct	(0X807A7F58,	"MixDevice");
	make_array	(0X807A7F58,	0X6);
	set_name	(0X807A7F58,	"gMixDevices");
	create_dword	(0X807A8588);
	set_name	(0X807A8588,	"NumTimesProcessed");
	create_word	(0X807A858C);
	create_word	(0X807A858E);
	create_word	(0X807A8590);
	create_word	(0X807A8592);
	create_byte	(0X807B039C);
	create_dword	(0X807B03A0);
	create_dword	(0X807B1D38);
	create_dword	(0X807B1D3C);
	create_byte	(0X807B1D40);
	create_dword	(0X807B1D44);
	create_dword	(0X807B1D48);
	create_dword	(0X807B1D4C);
	create_word	(0X807B1D90);
	create_byte	(0X807B1E14);
	create_dword	(0X807B1E18);
	create_dword	(0X807B1E1C);
	create_byte	(0X807B1E20);
	create_byte	(0X807B1E2C);
	create_dword	(0X807B57AC);
	create_dword	(0X807B57C0);
	create_dword	(0X807B57D4);
	create_dword	(0X807B5848);
	create_dword	(0X807B5868);
}

static Functions_0(void) {

	add_func    (0X80500000,0X80500004);
	set_func_flags(0X80500000,0x1480);
	SetType(0X80500000, "void sub_80500000();");
	add_func    (0X80500020,0X80500134);
	set_func_flags(0X80500020,0x1400);
	SetType(0X80500020, "void sub_80500020();");
	add_func    (0X80500398,0X805003C6);
	set_func_flags(0X80500398,0x1411);
	SetType(0X80500398, "void __noreturn sub_80500398();");
	set_frame_size(0X80500398, 0X10, 8, 0);
	add_func    (0X805003C6,0X805003F4);
	set_func_flags(0X805003C6,0x1411);
	SetType(0X805003C6, "void __noreturn sub_805003C6();");
	set_frame_size(0X805003C6, 0X10, 8, 0);
	add_func    (0X8050060C,0X80500610);
	set_func_flags(0X8050060C,0x1400);
	add_func    (0X80500624,0X8050066C);
	set_func_flags(0X80500624,0x1410);
	SetType(0X80500624, "int SessionRegistry_Init(void);");
	set_frame_size(0X80500624, 0X8, 8, 0);
	add_func    (0X8050066E,0X80500682);
	set_func_flags(0X8050066E,0x1400);
	SetType(0X8050066E, "int __fastcall sub_8050066E(_DWORD);");
	set_frame_size(0X8050066E, 0X8, 0, 0);
	add_func    (0X805006DE,0X805006F4);
	set_func_flags(0X805006DE,0x1400);
	set_frame_size(0X805006DE, 0X8, 0, 0);
	add_func    (0X805006F4,0X8050070C);
	set_func_flags(0X805006F4,0x1400);
	set_frame_size(0X805006F4, 0X8, 0, 0);
	add_func    (0X80500766,0X805007A0);
	set_func_flags(0X80500766,0x1410);
	set_frame_size(0X80500766, 0X28, 8, 0);
	add_func    (0X805007A0,0X805007B6);
	set_func_flags(0X805007A0,0x1400);
	set_frame_size(0X805007A0, 0X8, 0, 0);
	add_func    (0X80500870,0X8050089A);
	set_func_flags(0X80500870,0x1400);
	SetType(0X80500870, "int __fastcall gMix_Main(int);");
	set_frame_size(0X80500870, 0X8, 0, 0);
	add_func    (0X8050089A,0X80500AA6);
	set_func_flags(0X8050089A,0x1410);
	set_frame_size(0X8050089A, 0X20, 8, 0);
	add_func    (0X80500AA6,0X80500B04);
	set_func_flags(0X80500AA6,0x1410);
	set_frame_size(0X80500AA6, 0X10, 8, 0);
	add_func    (0X80500B84,0X80500BF0);
	set_func_flags(0X80500B84,0x1410);
	SetType(0X80500B84, "int __fastcall sub_80500B84(_DWORD);");
	set_frame_size(0X80500B84, 0X28, 8, 0);
	add_func    (0X80500BF0,0X80500E9C);
	set_func_flags(0X80500BF0,0x1410);
	set_frame_size(0X80500BF0, 0X28, 8, 0);
	add_func    (0X80500EA4,0X80501B4A);
	set_func_flags(0X80500EA4,0x1410);
	set_frame_size(0X80500EA4, 0X1B0, 8, 0);
	define_local_var(0X80500EA4, 0X80501B4A, "[bp-0X1A0]", "a2");
	add_func    (0X80501B4A,0X80501B76);
	set_func_flags(0X80501B4A,0x1400);
	add_func    (0X80501B76,0X80501BD2);
	set_func_flags(0X80501B76,0x1410);
	set_frame_size(0X80501B76, 0X8, 8, 0);
	add_func    (0X80501BD2,0X80501C1A);
	set_func_flags(0X80501BD2,0x1410);
	set_frame_size(0X80501BD2, 0X8, 8, 0);
	add_func    (0X80501C96,0X80501CB0);
	set_func_flags(0X80501C96,0x1400);
	add_func    (0X80501CB0,0X80501CCA);
	set_func_flags(0X80501CB0,0x1400);
	add_func    (0X80501CCA,0X80501D08);
	set_func_flags(0X80501CCA,0x1410);
	set_frame_size(0X80501CCA, 0X20, 8, 0);
	add_func    (0X80501D08,0X80501E5E);
	set_func_flags(0X80501D08,0x1410);
	set_frame_size(0X80501D08, 0X10, 8, 0);
	add_func    (0X80501E5E,0X80501E6C);
	set_func_flags(0X80501E5E,0x1400);
	set_frame_size(0X80501E5E, 0X8, 0, 0);
	add_func    (0X80501FD6,0X8050208C);
	set_func_flags(0X80501FD6,0x1410);
	set_frame_size(0X80501FD6, 0X1C, 8, 0);
	add_func    (0X8050208C,0X8050213E);
	set_func_flags(0X8050208C,0x1410);
	set_frame_size(0X8050208C, 0X18, 8, 0);
	add_func    (0X8050213E,0X805021DA);
	set_func_flags(0X8050213E,0x1410);
	set_frame_size(0X8050213E, 0X1C, 8, 0);
	add_func    (0X805021DC,0X80502616);
	set_func_flags(0X805021DC,0x1410);
	set_frame_size(0X805021DC, 0X70, 8, 0);
	add_func    (0X80502620,0X80502650);
	set_func_flags(0X80502620,0x1400);
	set_frame_size(0X80502620, 0X8, 0, 0);
	add_func    (0X80502650,0X80502722);
	set_func_flags(0X80502650,0x1410);
	set_frame_size(0X80502650, 0X18, 8, 0);
	add_func    (0X80502722,0X80502768);
	set_func_flags(0X80502722,0x1410);
	set_frame_size(0X80502722, 0X10, 8, 0);
	add_func    (0X80502782,0X80502924);
	set_func_flags(0X80502782,0x1410);
	set_frame_size(0X80502782, 0X48, 8, 0);
	add_func    (0X80502924,0X80502A7C);
	set_func_flags(0X80502924,0x1410);
	set_frame_size(0X80502924, 0X38, 8, 0);
	add_func    (0X80502A96,0X80502D46);
	set_func_flags(0X80502A96,0x1410);
	set_frame_size(0X80502A96, 0X80, 8, 0);
	add_func    (0X80502D50,0X80502F84);
	set_func_flags(0X80502D50,0x1410);
	set_frame_size(0X80502D50, 0X68, 8, 0);
	add_func    (0X80502F84,0X805030D6);
	set_func_flags(0X80502F84,0x1410);
	set_frame_size(0X80502F84, 0X38, 8, 0);
	add_func    (0X805030D6,0X80503178);
	set_func_flags(0X805030D6,0x1410);
	SetType(0X805030D6, "int __fastcall sub_805030D6(int, int a2);");
	set_frame_size(0X805030D6, 0X20, 8, 0);
	add_func    (0X80503178,0X80503242);
	set_func_flags(0X80503178,0x1410);
	set_frame_size(0X80503178, 0X20, 8, 0);
	add_func    (0X80503242,0X80503302);
	set_func_flags(0X80503242,0x1410);
	set_frame_size(0X80503242, 0X20, 8, 0);
	add_func    (0X80503302,0X80503400);
	set_func_flags(0X80503302,0x1410);
	set_frame_size(0X80503302, 0X28, 8, 0);
	add_func    (0X80503400,0X805034F8);
	set_func_flags(0X80503400,0x1410);
	set_frame_size(0X80503400, 0X38, 8, 0);
	add_func    (0X805034F8,0X80503570);
	set_func_flags(0X805034F8,0x1410);
	set_frame_size(0X805034F8, 0X10, 8, 0);
	add_func    (0X80503570,0X805035D0);
	set_func_flags(0X80503570,0x1410);
	set_frame_size(0X80503570, 0X8, 8, 0);
	add_func    (0X805041B0,0X805041C0);
	set_func_flags(0X805041B0,0x1400);
	add_func    (0X80504320,0X80504330);
	set_func_flags(0X80504320,0x1400);
	add_func    (0X8050458C,0X805045D8);
	set_func_flags(0X8050458C,0x1410);
	set_frame_size(0X8050458C, 0X10, 8, 0);
	add_func    (0X805045D8,0X805045DC);
	set_func_flags(0X805045D8,0x1400);
	add_func    (0X805045DC,0X8050469C);
	set_func_flags(0X805045DC,0x1410);
	set_frame_size(0X805045DC, 0X20, 8, 0);
	add_func    (0X8050469C,0X805046BE);
	set_func_flags(0X8050469C,0x1400);
	add_func    (0X80504760,0X80504858);
	set_func_flags(0X80504760,0x1410);
	set_frame_size(0X80504760, 0X18, 8, 0);
	add_func    (0X805049A0,0X805049BA);
	set_func_flags(0X805049A0,0x1410);
	set_frame_size(0X805049A0, 0X8, 8, 0);
	add_func    (0X805049BC,0X805049E4);
	set_func_flags(0X805049BC,0x1400);
	SetType(0X805049BC, "int AudioRender_Init();");
	set_frame_size(0X805049BC, 0X8, 0, 0);
	add_func    (0X805049E4,0X80504D16);
	set_func_flags(0X805049E4,0x1410);
	SetType(0X805049E4, "int __fastcall AudioRender_Main(adsp_app_descriptor *a1);");
	set_frame_size(0X805049E4, 0X60, 8, 0);
	define_local_var(0X805049E4, 0X80504D16, "[bp-0X60]", "stack_size");
	define_local_var(0X805049E4, 0X80504D16, "[bp-0X58]", "Device1HasBeenReset");
	define_local_var(0X805049E4, 0X80504D16, "[bp-0X28]", "renderTimesTaken");
	add_func    (0X80504D18,0X80504E24);
	set_func_flags(0X80504D18,0x1410);
	set_frame_size(0X80504D18, 0X40, 8, 0);
	add_func    (0X80504E24,0X80504F32);
	set_func_flags(0X80504E24,0x1410);
	SetType(0X80504E24, "int __fastcall InitializeDevice(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80504E24, 0X28, 8, 0);
	add_func    (0X80504F6C,0X80504FAC);
	set_func_flags(0X80504F6C,0x1410);
	SetType(0X80504F6C, "int __fastcall sub_80504F6C(_DWORD);");
	set_frame_size(0X80504F6C, 0X8, 8, 0);
	add_func    (0X80504FAC,0X80504FB2);
	set_func_flags(0X80504FAC,0x1400);
	SetType(0X80504FAC, "int __fastcall sub_80504FAC(_DWORD);");
	add_func    (0X80504FB2,0X80504FB8);
	set_func_flags(0X80504FB2,0x1400);
	SetType(0X80504FB2, "int __fastcall sub_80504FB2(_DWORD);");
	add_func    (0X8050501C,0X80505022);
	set_func_flags(0X8050501C,0x1400);
	SetType(0X8050501C, "int __fastcall sub_8050501C(_DWORD);");
	add_func    (0X805050CA,0X80505144);
	set_func_flags(0X805050CA,0x1410);
	SetType(0X805050CA, "int __fastcall sub_805050CA(_DWORD);");
	set_frame_size(0X805050CA, 0X10, 8, 0);
	add_func    (0X80505144,0X805051BE);
	set_func_flags(0X80505144,0x1410);
	SetType(0X80505144, "int __fastcall sub_80505144(_DWORD);");
	set_frame_size(0X80505144, 0X10, 8, 0);
	add_func    (0X805051BE,0X80505238);
	set_func_flags(0X805051BE,0x1410);
	SetType(0X805051BE, "int __fastcall sub_805051BE(_DWORD);");
	set_frame_size(0X805051BE, 0X10, 8, 0);
	add_func    (0X80505238,0X805052DE);
	set_func_flags(0X80505238,0x1410);
	SetType(0X80505238, "int __fastcall sub_80505238(_DWORD);");
	set_frame_size(0X80505238, 0X10, 8, 0);
	add_func    (0X80505384,0X8050542A);
	set_func_flags(0X80505384,0x1410);
	SetType(0X80505384, "int __fastcall sub_80505384(_DWORD);");
	set_frame_size(0X80505384, 0X10, 8, 0);
	add_func    (0X8050542A,0X805054D0);
	set_func_flags(0X8050542A,0x1410);
	SetType(0X8050542A, "int __fastcall sub_8050542A(_DWORD);");
	set_frame_size(0X8050542A, 0X10, 8, 0);
	add_func    (0X805054D0,0X805055C6);
	set_func_flags(0X805054D0,0x1410);
	SetType(0X805054D0, "int __fastcall sub_805054D0(_DWORD, _DWORD);");
	set_frame_size(0X805054D0, 0X20, 8, 0);
	add_func    (0X805055C6,0X805055EE);
	set_func_flags(0X805055C6,0x1400);
	SetType(0X805055C6, "int __fastcall MixDevice_ClearSampleBuffer(_DWORD, _DWORD);");
	set_frame_size(0X805055C6, 0X8, 0, 0);
	add_func    (0X805055EE,0X80505672);
	set_func_flags(0X805055EE,0x1410);
	SetType(0X805055EE, "int __fastcall MixDevice_SinkSamples(_DWORD, _DWORD);");
	set_frame_size(0X805055EE, 0X10, 8, 0);
	add_func    (0X80505672,0X805056D2);
	set_func_flags(0X80505672,0x1410);
	SetType(0X80505672, "void __fastcall InitializeDevices();");
	set_frame_size(0X80505672, 0X8, 8, 0);
	add_func    (0X805056D2,0X80505804);
	set_func_flags(0X805056D2,0x1410);
	SetType(0X805056D2, "int __fastcall ShutdownAllMixDevices(_DWORD);");
	set_frame_size(0X805056D2, 0X10, 8, 0);
	add_func    (0X80505804,0X8050582C);
	set_func_flags(0X80505804,0x1410);
	SetType(0X80505804, "int __fastcall sub_80505804(_DWORD, _DWORD);");
	set_frame_size(0X80505804, 0X8, 8, 0);
	add_func    (0X8050582C,0X80505A2A);
	set_func_flags(0X8050582C,0x1410);
	SetType(0X8050582C, "int __fastcall sub_8050582C(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8050582C, 0X38, 8, 0);
	add_func    (0X80505A2A,0X80505C18);
	set_func_flags(0X80505A2A,0x1410);
	SetType(0X80505A2A, "int __fastcall sub_80505A2A(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80505A2A, 0X38, 8, 0);
	add_func    (0X80505C18,0X80505C58);
	set_func_flags(0X80505C18,0x1410);
	SetType(0X80505C18, "int __fastcall sub_80505C18(_DWORD);");
	set_frame_size(0X80505C18, 0X10, 8, 0);
	add_func    (0X80505C58,0X80505D0A);
	set_func_flags(0X80505C58,0x1410);
	SetType(0X80505C58, "int __fastcall Axfx2AllPassTick(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80505C58, 0X8, 8, 0);
	add_func    (0X80505D0C,0X80505D9C);
	set_func_flags(0X80505D0C,0x1410);
	SetType(0X80505D0C, "int __fastcall sub_80505D0C(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80505D0C, 0X10, 8, 0);
	add_func    (0X80505DA0,0X805062AC);
	set_func_flags(0X80505DA0,0x1410);
	SetType(0X80505DA0, "int __fastcall sub_80505DA0(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80505DA0, 0X1F8, 8, 0);
	add_func    (0X805066A8,0X80507128);
	set_func_flags(0X805066A8,0x1410);
	SetType(0X805066A8, "int __fastcall sub_805066A8(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805066A8, 0X418, 8, 0);
	add_func    (0X80507128,0X80507186);
	set_func_flags(0X80507128,0x1410);
	SetType(0X80507128, "void __fastcall CommandListProcessor__Setup(nn::audio::dsp::CommandListProcessor *this, nn::audio::CommandListHeader *header, unsigned int commandSize);");
	set_frame_size(0X80507128, 0X10, 8, 0);
	add_func    (0X80507186,0X8050718A);
	set_func_flags(0X80507186,0x1400);
	SetType(0X80507186, "int __fastcall CommandListProcessor__SetProcessTimeMax(_DWORD, _DWORD);");
	add_func    (0X8050718C,0X80508EAE);
	set_func_flags(0X8050718C,0x1410);
	SetType(0X8050718C, "unsigned __int64 __fastcall CommandListProcessor__Process(nn::audio::dsp::CommandListProcessor *commandListProcessor);");
	set_frame_size(0X8050718C, 0X150, 8, 0);
	define_local_var(0X8050718C, 0X80508EAE, "[bp-0X150]", "outputBuffers");
	define_local_var(0X8050718C, 0X80508EAE, "[bp-0X148]", "statistics");
	define_local_var(0X8050718C, 0X80508EAE, "[bp-0X124]", "workBuffer");
	define_local_var(0X8050718C, 0X80508EAE, "[bp-0XF0]", "outputs");
	define_local_var(0X8050718C, 0X80508EAE, "[bp-0XBC]", "inputBuffers");
	add_func    (0X80508EC6,0X80508ECE);
	set_func_flags(0X80508EC6,0x1400);
	SetType(0X80508EC6, "int __fastcall CommandListProcessor__GetRemainCommandCount(_DWORD);");
	add_func    (0X80508ECE,0X80509694);
	set_func_flags(0X80508ECE,0x1410);
	SetType(0X80508ECE, "int __fastcall sub_80508ECE(_DWORD);");
	set_frame_size(0X80508ECE, 0XC0, 8, 0);
	add_func    (0X805098BC,0X805099E6);
	set_func_flags(0X805098BC,0x1410);
	SetType(0X805098BC, "int __fastcall sub_805098BC(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805098BC, 0X8, 8, 0);
	add_func    (0X80509BE4,0X80509CFC);
	set_func_flags(0X80509BE4,0x1410);
	set_frame_size(0X80509BE4, 0X20, 8, 0);
	add_func    (0X80509D00,0X80509F42);
	set_func_flags(0X80509D00,0x1410);
	set_frame_size(0X80509D00, 0X38, 8, 0);
	add_func    (0X80509F64,0X8050A2BA);
	set_func_flags(0X80509F64,0x1410);
	set_frame_size(0X80509F64, 0X30, 8, 0);
	add_func    (0X8050A2BA,0X8050A5E6);
	set_func_flags(0X8050A2BA,0x1410);
	SetType(0X8050A2BA, "void __fastcall ApplyDelayEffect6ch(nn::audio::DelayParameter *param, nn::audio::DelayState *state, int **inputBuffers, int **outputBuffers, int sampleCount);");
	set_frame_size(0X8050A2BA, 0XEC, 8, 0);
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XE4]", "inputs5");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XE0]", "inputs4");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XDC]", "inputs3");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XD8]", "inputs2");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XD4]", "inputs1");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XD0]", "inputs0");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XCC]", "outputs5");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XC8]", "outputs4");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XC4]", "outputs3");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XC0]", "outputs2");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XBC]", "outputs1");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XB8]", "outputs0");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0XA0]", "line3Buffer");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0X90]", "input4Sample");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0X8C]", "input3Sample_1");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0X84]", "input5Sample");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0X60]", "lowPassSamples");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0X4C]", "line0Sample");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0X34]", "input0Sample");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp-0X30]", "input1Sample");
	define_local_var(0X8050A2BA, 0X8050A5E6, "[bp+0X8]", "sampleCount");
	add_func    (0X8050A5E6,0X8050A70A);
	set_func_flags(0X8050A5E6,0x1410);
	SetType(0X8050A5E6, "void __fastcall nn__audio__InitializeDelayEffect(nn::audio::DelayParameter *param, nn::audio::DelayState *state, char *workBuffer);");
	set_frame_size(0X8050A5E6, 0X20, 8, 0);
	add_func    (0X8050A70A,0X8050A772);
	set_func_flags(0X8050A70A,0x1410);
	SetType(0X8050A70A, "void __fastcall nn__audio__SetDelayEffectParameter(nn::audio::DelayParameter *param, nn::audio::DelayState *state);");
	set_frame_size(0X8050A70A, 0X8, 8, 0);
	add_func    (0X8050A774,0X8050AE04);
	set_func_flags(0X8050A774,0x1410);
	SetType(0X8050A774, "void __fastcall ApplyDelayEffect(nn::audio::DelayParameter *param, nn::audio::DelayState *state, bool enabled, int **inputBuffers, int **outputBuffers, int sampleCount);");
	set_frame_size(0X8050A774, 0XE8, 8, 0);
	define_local_var(0X8050A774, 0X8050AE04, "[bp-0XE0]", "lowPassCrossGain_1");
	define_local_var(0X8050A774, 0X8050AE04, "[bp-0XDC]", "delayFeedbackGain_1");
	define_local_var(0X8050A774, 0X8050AE04, "[bp-0XBC]", "line0Sample");
	define_local_var(0X8050A774, 0X8050AE04, "[bp-0XB8]", "line1Sample");
	define_local_var(0X8050A774, 0X8050AE04, "[bp-0XB0]", "line3Sample");
	define_local_var(0X8050A774, 0X8050AE04, "[bp-0XA0]", "param");
	define_local_var(0X8050A774, 0X8050AE04, "[bp-0X7C]", "state");
	define_local_var(0X8050A774, 0X8050AE04, "[bp+0X8]", "outputBuffers");
	define_local_var(0X8050A774, 0X8050AE04, "[bp+0XC]", "sampleCount");
	add_func    (0X8050AEBE,0X8050AFA0);
	set_func_flags(0X8050AEBE,0x1410);
	SetType(0X8050AEBE, "void __fastcall nn__audio__InitializeLightLimiterEffect(nn::audio::LightLimiterParameter *param, nn::audio::LightLimiterState *state, f32 *buffer);");
	set_frame_size(0X8050AEBE, 0X20, 8, 0);
	add_func    (0X8050AFA0,0X8050AFA2);
	set_func_flags(0X8050AFA0,0x1440);
	SetType(0X8050AFA0, "void nn__audio__UpdateLightLimiterEffectParameter();");
	add_func    (0X8050AFB0,0X8050BA20);
	set_func_flags(0X8050AFB0,0x1410);
	SetType(0X8050AFB0, "void __fastcall nn__audio__ApplyLightLimiterEffect(nn::audio::LightLimiterParameter *param, nn::audio::LightLimiterState *state, bool enabled, s32 **inputBuffers, s32 **outputBuffers, int sampleCount, nn::audio::LightLimiterStatisticsInternal *statistics);");
	set_frame_size(0X8050AFB0, 0XD8, 8, 0);
	define_local_var(0X8050AFB0, 0X8050BA20, "[bp+0X8]", "outputBuffers");
	define_local_var(0X8050AFB0, 0X8050BA20, "[bp+0XC]", "sampleCount");
	define_local_var(0X8050AFB0, 0X8050BA20, "[bp+0X10]", "statistics");
	add_func    (0X8050BA40,0X8050BD02);
	set_func_flags(0X8050BA40,0x1410);
	SetType(0X8050BA40, "void __fastcall nn__audio__InitializeReverbEffect(nn::audio::ReverbParameter *param, nn::audio::ReverbState *state, void *workBuffer, bool longSizepreDelaySupported);");
	set_frame_size(0X8050BA40, 0X18, 8, 0);
	add_func    (0X8050BD02,0X8050C6A2);
	set_func_flags(0X8050BD02,0x1410);
	SetType(0X8050BD02, "void __fastcall nn__audio__UpdateReverbEffectParameter(nn::audio::ReverbParameter *param, nn::audio::ReverbState *state);");
	set_frame_size(0X8050BD02, 0X38, 8, 0);
	add_func    (0X8050C6A4,0X8050DDBC);
	set_func_flags(0X8050C6A4,0x1410);
	SetType(0X8050C6A4, "void __fastcall nn__audio__ApplyReverbEffect(nn::audio::ReverbParameter *params, nn::audio::ReverbState *state, int enabled, int **inputs, int **outputs, int sampleCount);");
	set_frame_size(0X8050C6A4, 0X108, 8, 0);
	define_local_var(0X8050C6A4, 0X8050DDBC, "[bp+0X8]", "outputs");
	define_local_var(0X8050C6A4, 0X8050DDBC, "[bp+0XC]", "sampleCount");
	add_func    (0X8050DEE0,0X8050DFC8);
	set_func_flags(0X8050DEE0,0x1410);
	SetType(0X8050DEE0, "int __fastcall DivQfQf(_DWORD, _DWORD);");
	set_frame_size(0X8050DEE0, 0X10, 8, 0);
	add_func    (0X8050DFFC,0X8050E62E);
	set_func_flags(0X8050DFFC,0x1410);
	SetType(0X8050DFFC, "int __fastcall nn__audio__detail__ApplyI3dl2ReverbEffect1ch(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8050DFFC, 0XA0, 8, 0);
	add_func    (0X8050E634,0X8050EC0A);
	set_func_flags(0X8050E634,0x1410);
	SetType(0X8050E634, "int __fastcall nn__audio__detail__ApplyI3dl2ReverbEffect2ch(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8050E634, 0XF0, 8, 0);
	add_func    (0X8050EC48,0X8050F2EE);
	set_func_flags(0X8050EC48,0x1410);
	SetType(0X8050EC48, "int __fastcall nn__audio__detail__ApplyI3dl2ReverbEffect4ch(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8050EC48, 0X108, 8, 0);
	add_func    (0X8050F330,0X8050FB62);
	set_func_flags(0X8050F330,0x1410);
	SetType(0X8050F330, "void __fastcall nn__audio__detail__ApplyI3dl2ReverbEffect6ch(nn::audio::I3dl2ReverbState *state, int **inputs, int **outputs, int sampleCount);");
	set_frame_size(0X8050F330, 0X118, 8, 0);
	add_func    (0X8050FB64,0X8050FDA4);
	set_func_flags(0X8050FB64,0x1410);
	SetType(0X8050FB64, "void __fastcall nn__audio__InitializeI3dl2ReverbEffect(nn::audio::I3dl2ReverbParameter *param, nn::audio::I3dl2ReverbState *state, int *workBuffer);");
	set_frame_size(0X8050FB64, 0X40, 8, 0);
	define_local_var(0X8050FB64, 0X8050FDA4, "[bp-0X3C]", "param");
	add_func    (0X8050FDA8,0X80510AF4);
	set_func_flags(0X8050FDA8,0x1410);
	SetType(0X8050FDA8, "void __fastcall nn__audio__UpdateI3dl2ReverbEffectParameter(nn::audio::I3dl2ReverbParameter *param, nn::audio::I3dl2ReverbState *state, int doReset);");
	set_frame_size(0X8050FDA8, 0X78, 8, 0);
	add_func    (0X80510AFC,0X80510BD8);
	set_func_flags(0X80510AFC,0x1410);
	SetType(0X80510AFC, "void __fastcall ApplyI3dl2ReverbEffect(int, int, int, int *, int *, int);");
	set_frame_size(0X80510AFC, 0X18, 8, 0);
	add_func    (0X80510D34,0X80510E54);
	set_func_flags(0X80510D34,0x1410);
	SetType(0X80510D34, "void __fastcall nn__audio__InitializeCompressorEffect(nn::audio::CompressorParameter *params, nn::audio::CompressorState *state);");
	set_frame_size(0X80510D34, 0X10, 8, 0);
	add_func    (0X80510E78,0X80510F72);
	set_func_flags(0X80510E78,0x1400);
	SetType(0X80510E78, "void __fastcall nn__audio__SetCompressorEffectParameter(nn::audio::CompressorParameter *params, nn::audio::CompressorState *state);");
	add_func    (0X80510F98,0X805114A4);
	set_func_flags(0X80510F98,0x1410);
	SetType(0X80510F98, "void __fastcall nn__audio__ApplyCompressorEffect(nn::audio::CompressorParameter *params, nn::audio::CompressorState *state, int enabled, int **inputs, int **outputs, int sampleCount);");
	set_frame_size(0X80510F98, 0X70, 8, 0);
	define_local_var(0X80510F98, 0X805114A4, "[bp+0X8]", "outputs");
	add_func    (0X805125C0,0X805129E6);
	set_func_flags(0X805125C0,0x1410);
	SetType(0X805125C0, "int __fastcall sub_805125C0(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805125C0, 0X38, 8, 0);
	add_func    (0X80512AB0,0X80512F90);
	set_func_flags(0X80512AB0,0x1410);
	SetType(0X80512AB0, "int __fastcall sub_80512AB0(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80512AB0, 0X10, 8, 0);
	add_func    (0X80513164,0X805132DE);
	set_func_flags(0X80513164,0x1410);
	set_frame_size(0X80513164, 0X70, 8, 0);
	add_func    (0X8051331C,0X80513500);
	set_func_flags(0X8051331C,0x1410);
	set_frame_size(0X8051331C, 0X50, 8, 0);
	add_func    (0X80513500,0X80513594);
	set_func_flags(0X80513500,0x1410);
	set_frame_size(0X80513500, 0X18, 8, 0);
	add_func    (0X805135C0,0X805143C4);
	set_func_flags(0X805135C0,0x1410);
	SetType(0X805135C0, "int __fastcall sub_805135C0(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805135C0, 0X40, 8, 0);
	add_func    (0X80514A30,0X80514D74);
	set_func_flags(0X80514A30,0x1410);
	SetType(0X80514A30, "int __fastcall sub_80514A30(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80514A30, 0X38, 8, 0);
	add_func    (0X80514E20,0X805150B8);
	set_func_flags(0X80514E20,0x1410);
	SetType(0X80514E20, "int __fastcall sub_80514E20(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80514E20, 0X10, 8, 0);
	add_func    (0X80515224,0X8051522E);
	set_func_flags(0X80515224,0x1400);
	SetType(0X80515224, "int __fastcall Mailbox__Open(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80515224, 0X8, 0, 0);
	add_func    (0X8051522E,0X80515238);
	set_func_flags(0X8051522E,0x1400);
	SetType(0X8051522E, "int __fastcall Mailbox__Close(_DWORD);");
	set_frame_size(0X8051522E, 0X8, 0, 0);
	add_func    (0X80515238,0X80515274);
	set_func_flags(0X80515238,0x1410);
	SetType(0X80515238, "int __fastcall Mailbox__Send(_DWORD, _DWORD);");
	set_frame_size(0X80515238, 0X10, 8, 0);
	add_func    (0X80515274,0X8051527E);
	set_func_flags(0X80515274,0x1400);
	SetType(0X80515274, "int __fastcall Mailbox__Receive_Wrap(adsp_mbx_t *);");
	set_frame_size(0X80515274, 0X8, 0, 0);
	add_func    (0X80515282,0X8051535C);
	set_func_flags(0X80515282,0x1410);
	set_frame_size(0X80515282, 0X18, 8, 0);
	add_func    (0X8051535C,0X80515396);
	set_func_flags(0X8051535C,0x1410);
	set_frame_size(0X8051535C, 0X10, 8, 0);
	add_func    (0X80515396,0X805153BC);
	set_func_flags(0X80515396,0x1410);
	set_frame_size(0X80515396, 0X8, 8, 0);
	add_func    (0X805153BC,0X80515400);
	set_func_flags(0X805153BC,0x1410);
	set_frame_size(0X805153BC, 0X10, 8, 0);
	add_func    (0X80515400,0X8051540A);
	set_func_flags(0X80515400,0x1400);
	SetType(0X80515400, "int __fastcall sub_80515400(_DWORD, _DWORD);");
	set_frame_size(0X80515400, 0X8, 0, 0);
	add_func    (0X8051540A,0X80515414);
	set_func_flags(0X8051540A,0x1400);
	set_frame_size(0X8051540A, 0X8, 0, 0);
	add_func    (0X80515414,0X8051542E);
	set_func_flags(0X80515414,0x1400);
	add_func    (0X80515438,0X80515444);
	set_func_flags(0X80515438,0x1400);
	add_func    (0X80515444,0X80515450);
	set_func_flags(0X80515444,0x1400);
	add_func    (0X80515450,0X8051545C);
	set_func_flags(0X80515450,0x1400);
	add_func    (0X8051545C,0X80515460);
	set_func_flags(0X8051545C,0x1400);
	add_func    (0X80515460,0X805154AC);
	set_func_flags(0X80515460,0x1410);
	SetType(0X80515460, "int OpusDecoder_Main();");
	set_frame_size(0X80515460, 0X10, 8, 0);
	add_func    (0X805154AC,0X80515544);
	set_func_flags(0X805154AC,0x1400);
	SetType(0X805154AC, "int sub_805154AC(void);");
	add_func    (0X80515578,0X805155A4);
	set_func_flags(0X80515578,0x1400);
	SetType(0X80515578, "int __fastcall sub_80515578(_DWORD);");
	add_func    (0X805155B0,0X805155C8);
	set_func_flags(0X805155B0,0x1400);
	SetType(0X805155B0, "int __fastcall Debug_Error1(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805155B0, 0X44, 0, 0);
	add_func    (0X805155C8,0X805157A2);
	set_func_flags(0X805155C8,0x1400);
	set_frame_size(0X805155C8, 0X48, 0, 0);
	add_func    (0X805157E4,0X8051580E);
	set_func_flags(0X805157E4,0x1400);
	SetType(0X805157E4, "int __fastcall platform_mmu_map_pages(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805157E4, 0X10, 0, 0);
	add_func    (0X8051580E,0X80515832);
	set_func_flags(0X8051580E,0x1400);
	SetType(0X8051580E, "int __fastcall platform_mmu_unmap_pages(_DWORD, _DWORD);");
	set_frame_size(0X8051580E, 0X10, 0, 0);
	add_func    (0X80515832,0X80515854);
	set_func_flags(0X80515832,0x1400);
	SetType(0X80515832, "int __fastcall sub_80515832(_DWORD, _DWORD);");
	set_frame_size(0X80515832, 0X10, 0, 0);
	add_func    (0X80515880,0X80515894);
	set_func_flags(0X80515880,0x1401);
	set_frame_size(0X80515880, 0X8, 0, 0);
	add_func    (0X80515898,0X805158CA);
	set_func_flags(0X80515898,0x1400);
	add_func    (0X80515904,0X80515934);
	set_func_flags(0X80515904,0x1400);
	SetType(0X80515904, "int __fastcall sub_80515904(_DWORD);");
	set_frame_size(0X80515904, 0X10, 0, 0);
	add_func    (0X805159E8,0X805159EA);
	set_func_flags(0X805159E8,0x1440);
	add_func    (0X805159EC,0X80515A4A);
	set_func_flags(0X805159EC,0x1400);
	SetType(0X805159EC, "int sub_805159EC();");
	set_frame_size(0X805159EC, 0X8, 0, 0);
	add_func    (0X80515A5C,0X80515BD6);
	set_func_flags(0X80515A5C,0x1400);
	SetType(0X80515A5C, "int platform_remap_mappings();");
	set_frame_size(0X80515A5C, 0X18, 0, 0);
	add_func    (0X80515C70,0X80515D36);
	set_func_flags(0X80515C70,0x1400);
	SetType(0X80515C70, "int platform_init();");
	set_frame_size(0X80515C70, 0X28, 0, 0);
	define_local_var(0X80515C70, 0X80515D36, "[bp-0X28]", "stack_size");
	add_func    (0X80515D74,0X80515DA8);
	set_func_flags(0X80515D74,0x1400);
	add_func    (0X80515DAC,0X80515DEA);
	set_func_flags(0X80515DAC,0x1400);
	set_frame_size(0X80515DAC, 0X18, 0, 0);
	add_func    (0X80515DF8,0X80515E36);
	set_func_flags(0X80515DF8,0x1400);
	set_frame_size(0X80515DF8, 0X10, 0, 0);
	add_func    (0X80515E44,0X80515E84);
	set_func_flags(0X80515E44,0x1400);
	set_frame_size(0X80515E44, 0X10, 0, 0);
	add_func    (0X80515E84,0X80515EC4);
	set_func_flags(0X80515E84,0x1400);
	set_frame_size(0X80515E84, 0X10, 0, 0);
	add_func    (0X80515EC4,0X80515F5E);
	set_func_flags(0X80515EC4,0x1400);
	SetType(0X80515EC4, "int __fastcall sub_80515EC4(_DWORD, _DWORD);");
	set_frame_size(0X80515EC4, 0X20, 0, 0);
	add_func    (0X80515FC4,0X80515FD0);
	set_func_flags(0X80515FC4,0x1400);
	add_func    (0X80515FD8,0X80515FF0);
	set_func_flags(0X80515FD8,0x1400);
	set_frame_size(0X80515FD8, 0X8, 0, 0);
	add_func    (0X80515FF8,0X8051604E);
	set_func_flags(0X80515FF8,0x1400);
	SetType(0X80515FF8, "int __fastcall sub_80515FF8(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80515FF8, 0X18, 0, 0);
	add_func    (0X805160BC,0X80516106);
	set_func_flags(0X805160BC,0x1400);
	SetType(0X805160BC, "int __fastcall sub_805160BC(_DWORD);");
	set_frame_size(0X805160BC, 0X8, 0, 0);
	add_func    (0X80516108,0X805161B6);
	set_func_flags(0X80516108,0x1400);
	set_frame_size(0X80516108, 0X18, 0, 0);
	add_func    (0X805161C0,0X805161E0);
	set_func_flags(0X805161C0,0x1400);
	set_frame_size(0X805161C0, 0X8, 0, 0);
	add_func    (0X805161E4,0X8051620E);
	set_func_flags(0X805161E4,0x1400);
	set_frame_size(0X805161E4, 0XC, 0, 0);
	add_func    (0X8051620E,0X8051621C);
	set_func_flags(0X8051620E,0x1400);
	add_func    (0X8051621C,0X80516272);
	set_func_flags(0X8051621C,0x1400);
	SetType(0X8051621C, "int __fastcall sub_8051621C(_DWORD, _DWORD);");
	set_frame_size(0X8051621C, 0X10, 0, 0);
	add_func    (0X8051628C,0X805162AE);
	set_func_flags(0X8051628C,0x1400);
	set_frame_size(0X8051628C, 0X8, 0, 0);
	add_func    (0X805162F0,0X805162FC);
	set_func_flags(0X805162F0,0x1400);
	add_func    (0X80516348,0X8051639E);
	set_func_flags(0X80516348,0x1400);
	set_frame_size(0X80516348, 0X18, 0, 0);
	add_func    (0X805163B4,0X805163FA);
	set_func_flags(0X805163B4,0x1400);
	set_frame_size(0X805163B4, 0X8, 0, 0);
	add_func    (0X8051640C,0X80516484);
	set_func_flags(0X8051640C,0x1400);
	set_frame_size(0X8051640C, 0X18, 0, 0);
	add_func    (0X805164F0,0X80516566);
	set_func_flags(0X805164F0,0x1400);
	set_frame_size(0X805164F0, 0X20, 0, 0);
	add_func    (0X80516574,0X805165EE);
	set_func_flags(0X80516574,0x1400);
	SetType(0X80516574, "__int64 __fastcall sub_80516574(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80516574, 0X20, 0, 0);
	add_func    (0X80516730,0X80516746);
	set_func_flags(0X80516730,0x1400);
	SetType(0X80516730, "int __fastcall sub_80516730(_DWORD);");
	set_frame_size(0X80516730, 0X8, 0, 0);
	add_func    (0X80516798,0X805167CE);
	set_func_flags(0X80516798,0x1400);
	set_frame_size(0X80516798, 0XC, 0, 0);
	add_func    (0X805167FC,0X80516852);
	set_func_flags(0X805167FC,0x1400);
	SetType(0X805167FC, "int __fastcall sub_805167FC(_DWORD);");
	set_frame_size(0X805167FC, 0X20, 0, 0);
	add_func    (0X8051687C,0X805168BE);
	set_func_flags(0X8051687C,0x1400);
	add_func    (0X805168CC,0X80516934);
	set_func_flags(0X805168CC,0x1400);
	set_frame_size(0X805168CC, 0X28, 0, 0);
	add_func    (0X80516960,0X8051697E);
	set_func_flags(0X80516960,0x1400);
	SetType(0X80516960, "int sub_80516960(void);");
	set_frame_size(0X80516960, 0X8, 0, 0);
	add_func    (0X80516E4C,0X80516E8C);
	set_func_flags(0X80516E4C,0x1400);
	set_frame_size(0X80516E4C, 0X8, 0, 0);
	add_func    (0X80516E90,0X80516EF6);
	set_func_flags(0X80516E90,0x1400);
	SetType(0X80516E90, "int __fastcall sub_80516E90(_DWORD);");
	set_frame_size(0X80516E90, 0X8, 0, 0);
	add_func    (0X80516F88,0X80516FCA);
	set_func_flags(0X80516F88,0x1400);
	SetType(0X80516F88, "int __fastcall sub_80516F88(_DWORD);");
	set_frame_size(0X80516F88, 0X20, 0, 0);
	add_func    (0X80516FDC,0X80516FE4);
	set_func_flags(0X80516FDC,0x1400);
	SetType(0X80516FDC, "__int64 __fastcall get_cur_adsp_freq(_DWORD);");
	add_func    (0X80516FE8,0X80516FF2);
	set_func_flags(0X80516FE8,0x1400);
	SetType(0X80516FE8, "int __fastcall sub_80516FE8(_DWORD);");
	add_func    (0X805171B4,0X80517236);
	set_func_flags(0X805171B4,0x1400);
	set_frame_size(0X805171B4, 0X10, 0, 0);
	add_func    (0X8051724C,0X80517268);
	set_func_flags(0X8051724C,0x1400);
	add_func    (0X8051726C,0X80517294);
	set_func_flags(0X8051726C,0x1400);
	set_frame_size(0X8051726C, 0X8, 0, 0);
	add_func    (0X805172A0,0X80517346);
	set_func_flags(0X805172A0,0x1400);
	SetType(0X805172A0, "int __fastcall mbx_open(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805172A0, 0X28, 0, 0);
	add_func    (0X80517354,0X805173BE);
	set_func_flags(0X80517354,0x1400);
	set_frame_size(0X80517354, 0X18, 0, 0);
	add_func    (0X805173CC,0X80517482);
	set_func_flags(0X805173CC,0x1400);
	SetType(0X805173CC, "int __fastcall sub_805173CC(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X805173CC, 0X18, 0, 0);
	add_func    (0X80517490,0X80517530);
	set_func_flags(0X80517490,0x1400);
	set_frame_size(0X80517490, 0X20, 0, 0);
	add_func    (0X80517538,0X8051753E);
	set_func_flags(0X80517538,0x1400);
	add_func    (0X80517540,0X80517562);
	set_func_flags(0X80517540,0x1400);
	add_func    (0X805175C8,0X8051762A);
	set_func_flags(0X805175C8,0x1400);
	set_frame_size(0X805175C8, 0X10, 0, 0);
	add_func    (0X80517638,0X805176A6);
	set_func_flags(0X80517638,0x1400);
	set_frame_size(0X80517638, 0X20, 0, 0);
	add_func    (0X805176B0,0X80517758);
	set_func_flags(0X805176B0,0x1400);
	SetType(0X805176B0, "int __fastcall sub_805176B0(_DWORD);");
	set_frame_size(0X805176B0, 0X10, 0, 0);
	add_func    (0X80517854,0X80517878);
	set_func_flags(0X80517854,0x1401);
	set_frame_size(0X80517854, 0X8, 0, 0);
	add_func    (0X80517880,0X805178C0);
	set_func_flags(0X80517880,0x1400);
	set_frame_size(0X80517880, 0X28, 0, 0);
	add_func    (0X805178C0,0X80517930);
	set_func_flags(0X805178C0,0x1400);
	add_func    (0X80517930,0X8051798C);
	set_func_flags(0X80517930,0x1400);
	SetType(0X80517930, "int __fastcall arch_disable_cache(_DWORD);");
	set_frame_size(0X80517930, 0X24, 0, 0);
	add_func    (0X8051798C,0X805179F0);
	set_func_flags(0X8051798C,0x1400);
	SetType(0X8051798C, "int __fastcall sub_8051798C(_DWORD);");
	set_frame_size(0X8051798C, 0X24, 0, 0);
	add_func    (0X805179F0,0X80517A7C);
	set_func_flags(0X805179F0,0x1400);
	add_func    (0X80517A7C,0X80517B08);
	set_func_flags(0X80517A7C,0x1400);
	add_func    (0X80517B08,0X80517B94);
	set_func_flags(0X80517B08,0x1400);
	add_func    (0X80517B94,0X80517BC4);
	set_func_flags(0X80517B94,0x1400);
	SetType(0X80517B94, "int __fastcall sub_80517B94(_DWORD, _DWORD);");
	add_func    (0X80517BC4,0X80517BD0);
	set_func_flags(0X80517BC4,0x1400);
	add_func    (0X80517BD0,0X80517C00);
	set_func_flags(0X80517BD0,0x1400);
	add_func    (0X80517C00,0X80517C0C);
	set_func_flags(0X80517C00,0x1400);
	add_func    (0X80517C0C,0X80517C30);
	set_func_flags(0X80517C0C,0x1400);
	add_func    (0X80517C4C,0X80517C54);
	set_func_flags(0X80517C4C,0x1400);
	add_func    (0X80517C54,0X80517C5C);
	set_func_flags(0X80517C54,0x1400);
	add_func    (0X80517C5C,0X80517C64);
	set_func_flags(0X80517C5C,0x1400);
	add_func    (0X80517C74,0X80517C7C);
	set_func_flags(0X80517C74,0x1400);
	add_func    (0X80517C7C,0X80517C84);
	set_func_flags(0X80517C7C,0x1400);
	add_func    (0X80517C84,0X80517C8C);
	set_func_flags(0X80517C84,0x1400);
	add_func    (0X80517CA4,0X80517CC4);
	set_func_flags(0X80517CA4,0x1400);
	SetType(0X80517CA4, "int __fastcall sub_80517CA4(_DWORD);");
	add_func    (0X80517EB8,0X80517ECA);
	set_func_flags(0X80517EB8,0x1400);
	add_func    (0X80517ED0,0X80517EDC);
	set_func_flags(0X80517ED0,0x1400);
	add_func    (0X80517F60,0X80517F6C);
	set_func_flags(0X80517F60,0x1400);
	add_func    (0X80517F70,0X80517F86);
	set_func_flags(0X80517F70,0x1400);
	add_func    (0X80517F8C,0X80517FC0);
	set_func_flags(0X80517F8C,0x1400);
	set_frame_size(0X80517F8C, 0X8, 0, 0);
	add_func    (0X805180B0,0X805180B6);
	set_func_flags(0X805180B0,0x1400);
	SetType(0X805180B0, "int __fastcall sub_805180B0(_DWORD);");
	add_func    (0X805180BC,0X805181D0);
	set_func_flags(0X805180BC,0x1400);
	SetType(0X805180BC, "int __fastcall sub_805180BC(_DWORD);");
	set_frame_size(0X805180BC, 0X28, 0, 0);
	add_func    (0X8051822C,0X80518260);
	set_func_flags(0X8051822C,0x1400);
	set_frame_size(0X8051822C, 0X10, 0, 0);
	add_func    (0X805182A4,0X805182D8);
	set_func_flags(0X805182A4,0x1400);
	set_frame_size(0X805182A4, 0X10, 0, 0);
	add_func    (0X805182E0,0X8051830E);
	set_func_flags(0X805182E0,0x1400);
	SetType(0X805182E0, "int CleanAndInvalidateCache(void);");
	set_frame_size(0X805182E0, 0X8, 0, 0);
	add_func    (0X80518310,0X80518346);
	set_func_flags(0X80518310,0x1400);
	SetType(0X80518310, "int __fastcall sub_80518310(int, int, int, __int16);");
	set_frame_size(0X80518310, 0X8, 0, 0);
	add_func    (0X805183F0,0X805185CA);
	set_func_flags(0X805183F0,0x1400);
	set_frame_size(0X805183F0, 0X48, 0, 0);
	add_func    (0X80518630,0X80518650);
	set_func_flags(0X80518630,0x1400);
	set_frame_size(0X80518630, 0X8, 0, 0);
	add_func    (0X80518654,0X80518672);
	set_func_flags(0X80518654,0x1400);
	set_frame_size(0X80518654, 0X8, 0, 0);
	add_func    (0X80518678,0X80518698);
	set_func_flags(0X80518678,0x1400);
	set_frame_size(0X80518678, 0X8, 0, 0);
	add_func    (0X8051869C,0X805186BC);
	set_func_flags(0X8051869C,0x1400);
	set_frame_size(0X8051869C, 0X8, 0, 0);
	add_func    (0X805186E8,0X8051870A);
	set_func_flags(0X805186E8,0x1400);
	SetType(0X805186E8, "int __fastcall sub_805186E8(_DWORD);");
	set_frame_size(0X805186E8, 0X8, 0, 0);
	add_func    (0X80518710,0X80518732);
	set_func_flags(0X80518710,0x1400);
	set_frame_size(0X80518710, 0X8, 0, 0);
	add_func    (0X80518738,0X8051875A);
	set_func_flags(0X80518738,0x1400);
	set_frame_size(0X80518738, 0X8, 0, 0);
	add_func    (0X80518774,0X805187C8);
	set_func_flags(0X80518774,0x1400);
	set_frame_size(0X80518774, 0X20, 0, 0);
	add_func    (0X805187CC,0X80518810);
	set_func_flags(0X805187CC,0x1400);
	set_frame_size(0X805187CC, 0X18, 0, 0);
	add_func    (0X80518814,0X80518818);
	set_func_flags(0X80518814,0x1480);
	add_func    (0X8051882C,0X80518856);
	set_func_flags(0X8051882C,0x1400);
	set_frame_size(0X8051882C, 0X8, 0, 0);
	add_func    (0X80518884,0X80518980);
	set_func_flags(0X80518884,0x1400);
	set_frame_size(0X80518884, 0X20, 0, 0);
	add_func    (0X8051899C,0X80518A02);
	set_func_flags(0X8051899C,0x1400);
	set_frame_size(0X8051899C, 0X10, 0, 0);
	add_func    (0X80518BC0,0X80518C0E);
	set_func_flags(0X80518BC0,0x1400);
	set_frame_size(0X80518BC0, 0X18, 0, 0);
	add_func    (0X80518C24,0X80518C6A);
	set_func_flags(0X80518C24,0x1400);
	set_frame_size(0X80518C24, 0X10, 0, 0);
	add_func    (0X80518C80,0X80518CE0);
	set_func_flags(0X80518C80,0x1400);
	set_frame_size(0X80518C80, 0X8, 0, 0);
	add_func    (0X80518D10,0X80518D36);
	set_func_flags(0X80518D10,0x1400);
	set_frame_size(0X80518D10, 0X10, 0, 0);
	add_func    (0X80518D3C,0X80518D44);
	set_func_flags(0X80518D3C,0x1400);
	add_func    (0X80518DC8,0X80518E30);
	set_func_flags(0X80518DC8,0x1400);
	SetType(0X80518DC8, "int __fastcall sub_80518DC8(_DWORD);");
	set_frame_size(0X80518DC8, 0X8, 0, 0);
	add_func    (0X80518E38,0X80518E3C);
	set_func_flags(0X80518E38,0x1440);
	SetType(0X80518E38, "int __fastcall nullsub_4(_DWORD);");
	add_func    (0X80518E54,0X80518E80);
	set_func_flags(0X80518E54,0x1400);
	set_frame_size(0X80518E54, 0X8, 0, 0);
	add_func    (0X80518E80,0X80518EAC);
	set_func_flags(0X80518E80,0x1400);
	set_frame_size(0X80518E80, 0X8, 0, 0);
	add_func    (0X80518EAC,0X80518F14);
	set_func_flags(0X80518EAC,0x1400);
	add_func    (0X80518F18,0X80518F84);
	set_func_flags(0X80518F18,0x1400);
	SetType(0X80518F18, "int __fastcall sub_80518F18(_DWORD);");
	set_frame_size(0X80518F18, 0X20, 0, 0);
	add_func    (0X80518F90,0X80518FF8);
	set_func_flags(0X80518F90,0x1400);
	SetType(0X80518F90, "void __fastcall bootstrap2();");
	set_frame_size(0X80518F90, 0X8, 0, 0);
	add_func    (0X80519020,0X805190C2);
	set_func_flags(0X80519020,0x1401);
	SetType(0X80519020, "void __fastcall __noreturn lk_main(int, int, int);");
	set_frame_size(0X80519020, 0X10, 0, 0);
	define_local_var(0X80519020, 0X805190C2, "[bp-0X10]", "stack_size");
	add_func    (0X8051910C,0X80519176);
	set_func_flags(0X8051910C,0x1400);
	SetType(0X8051910C, "int __fastcall sub_8051910C(_DWORD);");
	set_frame_size(0X8051910C, 0X20, 0, 0);
	define_local_var(0X8051910C, 0X80519176, "[bp-0X20]", "stack_size");
	add_func    (0X80519198,0X80519206);
	set_func_flags(0X80519198,0x1400);
	SetType(0X80519198, "int __fastcall queue_adsp_app(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80519198, 0XE0, 0, 0);
	add_func    (0X805192C0,0X80519322);
	set_func_flags(0X805192C0,0x1400);
	set_frame_size(0X805192C0, 0X8, 0, 0);
	add_func    (0X80519404,0X80519446);
	set_func_flags(0X80519404,0x1400);
	SetType(0X80519404, "int __fastcall start_adsp_app(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X80519404, 0X18, 0, 0);
	define_local_var(0X80519404, 0X80519446, "[bp-0X18]", "stack_size");
	add_func    (0X8051955C,0X805195C4);
	set_func_flags(0X8051955C,0x1400);
	SetType(0X8051955C, "void __fastcall adsp_static_apps_init();");
	set_frame_size(0X8051955C, 0X18, 0, 0);
	add_func    (0X805195D8,0X8051967C);
	set_func_flags(0X805195D8,0x1400);
	SetType(0X805195D8, "int __fastcall sub_805195D8(_DWORD);");
	set_frame_size(0X805195D8, 0X28, 0, 0);
	define_local_var(0X805195D8, 0X8051967C, "[bp-0X28]", "stack_size");
	add_func    (0X805196A0,0X805196A4);
	set_func_flags(0X805196A0,0x1480);
	add_func    (0X805196A4,0X805196A8);
	set_func_flags(0X805196A4,0x1480);
	add_func    (0X805196A8,0X805196B0);
	set_func_flags(0X805196A8,0x1400);
	add_func    (0X805196B0,0X805196B8);
	set_func_flags(0X805196B0,0x1400);
	add_func    (0X805196B8,0X805196C0);
	set_func_flags(0X805196B8,0x1400);
	add_func    (0X805196C0,0X805196C8);
	set_func_flags(0X805196C0,0x1400);
	add_func    (0X805196C8,0X805196E0);
	set_func_flags(0X805196C8,0x1400);
	add_func    (0X805196E0,0X805196F8);
	set_func_flags(0X805196E0,0x1400);
	add_func    (0X805198E0,0X80519908);
	set_func_flags(0X805198E0,0x1400);
	set_frame_size(0X805198E0, 0XC, 0, 0);
	add_func    (0X80519980,0X805199DA);
	set_func_flags(0X80519980,0x1400);
	set_frame_size(0X80519980, 0X10, 0, 0);
	add_func    (0X805199F0,0X805199F4);
	set_func_flags(0X805199F0,0x1400);
	add_func    (0X805199F4,0X80519A4A);
	set_func_flags(0X805199F4,0x1400);
	set_frame_size(0X805199F4, 0X10, 0, 0);
	add_func    (0X80519A60,0X80519ADC);
	set_func_flags(0X80519A60,0x1400);
	set_frame_size(0X80519A60, 0X20, 0, 0);
	add_func    (0X80519AF0,0X80519B1A);
	set_func_flags(0X80519AF0,0x1400);
	set_frame_size(0X80519AF0, 0X10, 0, 0);
	add_func    (0X80519B2C,0X80519B32);
	set_func_flags(0X80519B2C,0x1400);
	add_func    (0X80519B32,0X80519B38);
	set_func_flags(0X80519B32,0x1400);
	add_func    (0X80519B38,0X80519B52);
	set_func_flags(0X80519B38,0x1400);
	SetType(0X80519B38, "int __fastcall sub_80519B38(_DWORD);");
	set_frame_size(0X80519B38, 0X8, 0, 0);
	add_func    (0X80519B5C,0X80519B76);
	set_func_flags(0X80519B5C,0x1400);
	add_func    (0X80519C14,0X80519C9C);
	set_func_flags(0X80519C14,0x1400);
	set_frame_size(0X80519C14, 0X20, 0, 0);
	add_func    (0X80519CB8,0X80519D3C);
	set_func_flags(0X80519CB8,0x1400);
	set_frame_size(0X80519CB8, 0X20, 0, 0);
	add_func    (0X80519D70,0X80519DB6);
	set_func_flags(0X80519D70,0x1400);
	set_frame_size(0X80519D70, 0X14, 0, 0);
	add_func    (0X80519F64,0X8051A00E);
	set_func_flags(0X80519F64,0x1400);
	set_frame_size(0X80519F64, 0X30, 0, 0);
	add_func    (0X8051A030,0X8051A042);
	set_func_flags(0X8051A030,0x1400);
	set_frame_size(0X8051A030, 0X8, 0, 0);
	add_func    (0X8051A08C,0X8051A0A4);
	set_func_flags(0X8051A08C,0x1400);
	set_frame_size(0X8051A08C, 0X10, 0, 0);
	add_func    (0X8051A0A4,0X8051A0BC);
	set_func_flags(0X8051A0A4,0x1400);
	set_frame_size(0X8051A0A4, 0X10, 0, 0);
	add_func    (0X8051A0BC,0X8051A166);
	set_func_flags(0X8051A0BC,0x1400);
	set_frame_size(0X8051A0BC, 0X20, 0, 0);
	add_func    (0X8051A184,0X8051A18C);
	set_func_flags(0X8051A184,0x1400);
	add_func    (0X8051A190,0X8051A1B6);
	set_func_flags(0X8051A190,0x1400);
	set_frame_size(0X8051A190, 0X8, 0, 0);
	add_func    (0X8051A1C0,0X8051A1F6);
	set_func_flags(0X8051A1C0,0x1400);
	set_frame_size(0X8051A1C0, 0X8, 0, 0);
	add_func    (0X8051A1FC,0X8051A242);
	set_func_flags(0X8051A1FC,0x1400);
	set_frame_size(0X8051A1FC, 0X8, 0, 0);
	add_func    (0X8051A280,0X8051A2AC);
	set_func_flags(0X8051A280,0x1400);
	add_func    (0X8051A2B0,0X8051A2F0);
	set_func_flags(0X8051A2B0,0x1400);
	set_frame_size(0X8051A2B0, 0X10, 0, 0);
	add_func    (0X8051A2F4,0X8051A300);
	set_func_flags(0X8051A2F4,0x1400);
	add_func    (0X8051A300,0X8051A306);
	set_func_flags(0X8051A300,0x1400);
	add_func    (0X8051A306,0X8051A30C);
	set_func_flags(0X8051A306,0x1400);
	add_func    (0X8051A30C,0X8051A31E);
	set_func_flags(0X8051A30C,0x1400);
	add_func    (0X8051A3C8,0X8051A46C);
	set_func_flags(0X8051A3C8,0x1400);
	SetType(0X8051A3C8, "int __fastcall sub_8051A3C8(_DWORD);");
	set_frame_size(0X8051A3C8, 0X18, 0, 0);
	add_func    (0X8051A494,0X8051A532);
	set_func_flags(0X8051A494,0x1400);
	SetType(0X8051A494, "int __fastcall sub_8051A494(_DWORD);");
	set_frame_size(0X8051A494, 0X10, 0, 0);
	add_func    (0X8051A55C,0X8051A5D0);
	set_func_flags(0X8051A55C,0x1400);
	set_frame_size(0X8051A55C, 0X20, 0, 0);
	add_func    (0X8051A638,0X8051A758);
	set_func_flags(0X8051A638,0x1400);
	set_frame_size(0X8051A638, 0X20, 0, 0);
	add_func    (0X8051A7A8,0X8051A7DE);
	set_func_flags(0X8051A7A8,0x1400);
	SetType(0X8051A7A8, "unsigned int __fastcall thread_create(char *name, int func, void *arg, int prio, int stack_size);");
	set_frame_size(0X8051A7A8, 0X40, 0, 0);
	define_local_var(0X8051A7A8, 0X8051A7DE, "[bp+0]", "stack_size");
	add_func    (0X8051A7E4,0X8051AAE4);
	set_func_flags(0X8051A7E4,0x1400);
	set_frame_size(0X8051A7E4, 0X50, 0, 0);
	add_func    (0X8051AAF4,0X8051ABC0);
	set_func_flags(0X8051AAF4,0x1400);
	SetType(0X8051AAF4, "int __fastcall sub_8051AAF4(_DWORD);");
	set_frame_size(0X8051AAF4, 0X20, 0, 0);
	add_func    (0X8051ABE4,0X8051AC78);
	set_func_flags(0X8051ABE4,0x1400);
	SetType(0X8051ABE4, "void __fastcall thread_resume(_DWORD *a1, int a2, int a3);");
	set_frame_size(0X8051ABE4, 0X18, 0, 0);
	add_func    (0X8051AC94,0X8051AD8C);
	set_func_flags(0X8051AC94,0x1400);
	set_frame_size(0X8051AC94, 0X20, 0, 0);
	add_func    (0X8051AE84,0X8051AF12);
	set_func_flags(0X8051AE84,0x1400);
	set_frame_size(0X8051AE84, 0X18, 0, 0);
	add_func    (0X8051AF34,0X8051AFC0);
	set_func_flags(0X8051AF34,0x1400);
	SetType(0X8051AF34, "int __fastcall sub_8051AF34(_DWORD);");
	set_frame_size(0X8051AF34, 0X48, 0, 0);
	add_func    (0X8051B008,0X8051B080);
	set_func_flags(0X8051B008,0x1400);
	SetType(0X8051B008, "int __fastcall sub_8051B008(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8051B008, 0X10, 0, 0);
	add_func    (0X8051B0A4,0X8051B0AA);
	set_func_flags(0X8051B0A4,0x1400);
	add_func    (0X8051B0B0,0X8051B0BE);
	set_func_flags(0X8051B0B0,0x1400);
	add_func    (0X8051B0C4,0X8051B0DA);
	set_func_flags(0X8051B0C4,0x1400);
	SetType(0X8051B0C4, "int __fastcall thread_set_priority(_DWORD);");
	add_func    (0X8051B0EC,0X8051B118);
	set_func_flags(0X8051B0EC,0x1401);
	SetType(0X8051B0EC, "void __fastcall __noreturn sub_8051B0EC(_DWORD);");
	set_frame_size(0X8051B0EC, 0X8, 0, 0);
	add_func    (0X8051B270,0X8051B2BC);
	set_func_flags(0X8051B270,0x1400);
	SetType(0X8051B270, "__int64 __fastcall thread_get_cycle_count(_DWORD);");
	set_frame_size(0X8051B270, 0X18, 0, 0);
	add_func    (0X8051B2C8,0X8051B2D8);
	set_func_flags(0X8051B2C8,0x1400);
	add_func    (0X8051B2DC,0X8051B3A4);
	set_func_flags(0X8051B2DC,0x1400);
	set_frame_size(0X8051B2DC, 0X48, 0, 0);
	add_func    (0X8051B3C8,0X8051B4E6);
	set_func_flags(0X8051B3C8,0x1400);
	SetType(0X8051B3C8, "int __fastcall thread_join(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8051B3C8, 0X20, 0, 0);
	add_func    (0X8051B508,0X8051B5DC);
	set_func_flags(0X8051B508,0x1400);
	set_frame_size(0X8051B508, 0X28, 0, 0);
	add_func    (0X8051B600,0X8051B6E6);
	set_func_flags(0X8051B600,0x1400);
	set_frame_size(0X8051B600, 0X38, 0, 0);
	add_func    (0X8051B70C,0X8051B78A);
	set_func_flags(0X8051B70C,0x1400);
	SetType(0X8051B70C, "int sub_8051B70C(void);");
	set_frame_size(0X8051B70C, 0X18, 0, 0);
	add_func    (0X8051B7A0,0X8051B7B8);
	set_func_flags(0X8051B7A0,0x1400);
	SetType(0X8051B7A0, "int __fastcall sub_8051B7A0(_DWORD);");
	set_frame_size(0X8051B7A0, 0X8, 0, 0);
	add_func    (0X8051B8C4,0X8051B914);
	set_func_flags(0X8051B8C4,0x1400);
	set_frame_size(0X8051B8C4, 0X18, 0, 0);
	add_func    (0X8051BA60,0X8051BA66);
	set_func_flags(0X8051BA60,0x1400);
	add_func    (0X8051BB4A,0X8051BB5A);
	set_func_flags(0X8051BB4A,0x1400);
	add_func    (0X8051BB5A,0X8051BB86);
	set_func_flags(0X8051BB5A,0x1400);
	set_frame_size(0X8051BB5A, 0X10, 0, 0);
	add_func    (0X8051BB86,0X8051BB9C);
	set_func_flags(0X8051BB86,0x1400);
	add_func    (0X8051BB9C,0X8051BC6C);
	set_func_flags(0X8051BB9C,0x1400);
	set_frame_size(0X8051BB9C, 0X28, 0, 0);
	add_func    (0X8051BCB4,0X8051BCFA);
	set_func_flags(0X8051BCB4,0x1400);
	set_frame_size(0X8051BCB4, 0X18, 0, 0);
	add_func    (0X8051BCFC,0X8051BD78);
	set_func_flags(0X8051BCFC,0x1400);
	set_frame_size(0X8051BCFC, 0X18, 0, 0);
	add_func    (0X8051BD80,0X8051BDDE);
	set_func_flags(0X8051BD80,0x1400);
	SetType(0X8051BD80, "int __fastcall sub_8051BD80(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8051BD80, 0X10, 0, 0);
	add_func    (0X8051BDE4,0X8051BE1E);
	set_func_flags(0X8051BDE4,0x1400);
	set_frame_size(0X8051BDE4, 0X10, 0, 0);
	add_func    (0X8051BE4C,0X8051BEEE);
	set_func_flags(0X8051BE4C,0x1400);
	set_frame_size(0X8051BE4C, 0X18, 0, 0);
	add_func    (0X8051BFFC,0X8051C016);
	set_func_flags(0X8051BFFC,0x1400);
	add_func    (0X8051C016,0X8051C030);
	set_func_flags(0X8051C016,0x1400);
	add_func    (0X8051C030,0X8051C0CA);
	set_func_flags(0X8051C030,0x1400);
	set_frame_size(0X8051C030, 0X28, 0, 0);
	add_func    (0X8051C0CA,0X8051C0DE);
	set_func_flags(0X8051C0CA,0x1400);
	set_frame_size(0X8051C0CA, 0X8, 0, 0);
	add_func    (0X8051C0DE,0X8051C104);
	set_func_flags(0X8051C0DE,0x1400);
	set_frame_size(0X8051C0DE, 0X10, 0, 0);
	add_func    (0X8051C104,0X8051C1DE);
	set_func_flags(0X8051C104,0x1400);
	set_frame_size(0X8051C104, 0X28, 0, 0);
	add_func    (0X8051C1EC,0X8051C282);
	set_func_flags(0X8051C1EC,0x1400);
	set_frame_size(0X8051C1EC, 0X20, 0, 0);
	add_func    (0X8051C29C,0X8051C2F0);
	set_func_flags(0X8051C29C,0x1400);
	set_frame_size(0X8051C29C, 0X18, 0, 0);
	add_func    (0X8051C2F0,0X8051C36E);
	set_func_flags(0X8051C2F0,0x1400);
	set_frame_size(0X8051C2F0, 0X20, 0, 0);
	add_func    (0X8051C370,0X8051C3F0);
	set_func_flags(0X8051C370,0x1400);
	set_frame_size(0X8051C370, 0X20, 0, 0);
	add_func    (0X8051C3F4,0X8051C434);
	set_func_flags(0X8051C3F4,0x1400);
	set_frame_size(0X8051C3F4, 0X120, 0, 0);
	add_func    (0X8051C434,0X8051C49A);
	set_func_flags(0X8051C434,0x1400);
	set_frame_size(0X8051C434, 0X18, 0, 0);
	add_func    (0X8051C4B0,0X8051C4CA);
	set_func_flags(0X8051C4B0,0x1400);
	set_frame_size(0X8051C4B0, 0X10, 0, 0);
	add_func    (0X8051C80E,0X8051C810);
	set_func_flags(0X8051C80E,0x1440);
	SetType(0X8051C80E, "int __fastcall nullsub_3(_DWORD);");
	add_func    (0X8051C810,0X8051C812);
	set_func_flags(0X8051C810,0x1440);
	SetType(0X8051C810, "int __fastcall nullsub_5(_DWORD);");
	add_func    (0X8051CB48,0X8051CB7E);
	set_func_flags(0X8051CB48,0x1400);
	set_frame_size(0X8051CB48, 0X20, 0, 0);
	add_func    (0X8051CB84,0X8051CECA);
	set_func_flags(0X8051CB84,0x1400);
	set_frame_size(0X8051CB84, 0X50, 0, 0);
	add_func    (0X8051CF28,0X8051CF60);
	set_func_flags(0X8051CF28,0x1400);
	set_frame_size(0X8051CF28, 0X8, 0, 0);
	add_func    (0X8051CF88,0X8051CFC8);
	set_func_flags(0X8051CF88,0x1400);
	set_frame_size(0X8051CF88, 0X10, 0, 0);
	add_func    (0X8051CFDC,0X8051D016);
	set_func_flags(0X8051CFDC,0x1400);
	set_frame_size(0X8051CFDC, 0X10, 0, 0);
	add_func    (0X8051D0B0,0X8051D0C4);
	set_func_flags(0X8051D0B0,0x1401);
	set_frame_size(0X8051D0B0, 0X8, 0, 0);
	add_func    (0X8051D0E0,0X8051D116);
	set_func_flags(0X8051D0E0,0x1400);
	SetType(0X8051D0E0, "int printf(const char *, ...);");
	set_frame_size(0X8051D0E0, 0X20, 0, 0);
	define_local_var(0X8051D0E0, 0X8051D116, "[bp-0X10]", "varg_r0");
	define_local_var(0X8051D0E0, 0X8051D116, "[bp-0XC]", "varg_r1");
	define_local_var(0X8051D0E0, 0X8051D116, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051D0E0, 0X8051D116, "[bp-0X4]", "varg_r3");
	add_func    (0X8051D120,0X8051D14A);
	set_func_flags(0X8051D120,0x1400);
	set_frame_size(0X8051D120, 0X10, 0, 0);
	add_func    (0X8051D154,0X8051D174);
	set_func_flags(0X8051D154,0x1401);
	SetType(0X8051D154, "void __fastcall __noreturn Debug_Error2(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8051D154, 0X18, 0, 0);
	define_local_var(0X8051D154, 0X8051D174, "[bp-0XC]", "varg_r1");
	define_local_var(0X8051D154, 0X8051D174, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051D154, 0X8051D174, "[bp-0X4]", "varg_r3");
	add_func    (0X8051D180,0X8051D1D8);
	set_func_flags(0X8051D180,0x1400);
	SetType(0X8051D180, "int __fastcall sub_8051D180(char *a2);");
	set_frame_size(0X8051D180, 0X20, 0, 0);
	add_func    (0X8051D230,0X8051D242);
	set_func_flags(0X8051D230,0x1400);
	add_func    (0X8051D244,0X8051D24E);
	set_func_flags(0X8051D244,0x1400);
	add_func    (0X8051D254,0X8051D2F6);
	set_func_flags(0X8051D254,0x1400);
	set_frame_size(0X8051D254, 0X20, 0, 0);
	add_func    (0X8051D30C,0X8051D370);
	set_func_flags(0X8051D30C,0x1400);
	set_frame_size(0X8051D30C, 0X20, 0, 0);
	add_func    (0X8051D424,0X8051D446);
	set_func_flags(0X8051D424,0x1400);
	set_frame_size(0X8051D424, 0X10, 0, 0);
	add_func    (0X8051D454,0X8051D570);
	set_func_flags(0X8051D454,0x1400);
	set_frame_size(0X8051D454, 0X28, 0, 0);
	add_func    (0X8051D590,0X8051D5CC);
	set_func_flags(0X8051D590,0x1400);
	set_frame_size(0X8051D590, 0X10, 0, 0);
	add_func    (0X8051D6B0,0X8051D6EE);
	set_func_flags(0X8051D6B0,0x1400);
	SetType(0X8051D6B0, "int __fastcall sub_8051D6B0(_DWORD);");
	set_frame_size(0X8051D6B0, 0X8, 0, 0);
	add_func    (0X8051D708,0X8051D80C);
	set_func_flags(0X8051D708,0x1400);
	SetType(0X8051D708, "void __fastcall memcpy(int result, int a2, int a3);");
	add_func    (0X8051D814,0X8051D8A8);
	set_func_flags(0X8051D814,0x1400);
	SetType(0X8051D814, "int __fastcall memset(_DWORD, _DWORD, _DWORD);");
	add_func    (0X8051D8A8,0X8051D8D4);
	set_func_flags(0X8051D8A8,0x1400);
	add_func    (0X8051D8D4,0X8051D936);
	set_func_flags(0X8051D8D4,0x1400);
	set_frame_size(0X8051D8D4, 0X18, 0, 0);
	add_func    (0X8051D936,0X8051D93A);
	set_func_flags(0X8051D936,0x1480);
	add_func    (0X8051D93A,0X8051D98A);
	set_func_flags(0X8051D93A,0x1400);
	set_frame_size(0X8051D93A, 0X10, 0, 0);
	add_func    (0X8051D98A,0X8051D98E);
	set_func_flags(0X8051D98A,0x1480);
	add_func    (0X8051DA1A,0X8051DA2C);
	set_func_flags(0X8051DA1A,0x1400);
	add_func    (0X8051DA44,0X8051DA50);
	set_func_flags(0X8051DA44,0x1400);
	add_func    (0X8051DA50,0X8051DA60);
	set_func_flags(0X8051DA50,0x1400);
	add_func    (0X8051DA7C,0X8051DA98);
	set_func_flags(0X8051DA7C,0x1400);
	add_func    (0X8051DB1C,0X8051DBB2);
	set_func_flags(0X8051DB1C,0x1400);
	set_frame_size(0X8051DB1C, 0X28, 0, 0);
	add_func    (0X8051DBB4,0X8051E016);
	set_func_flags(0X8051DBB4,0x1400);
	set_frame_size(0X8051DBB4, 0X60, 0, 0);
	add_func    (0X8051E018,0X8051E040);
	set_func_flags(0X8051E018,0x1400);
	set_frame_size(0X8051E018, 0X20, 0, 0);
	add_func    (0X8051E044,0X8051E05E);
	set_func_flags(0X8051E044,0x1400);
	set_frame_size(0X8051E044, 0X18, 0, 0);
	define_local_var(0X8051E044, 0X8051E05E, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051E044, 0X8051E05E, "[bp-0X4]", "varg_r3");
	add_func    (0X8051E08C,0X8051E092);
	set_func_flags(0X8051E08C,0x1400);
	add_func    (0X8051E09C,0X8051E0BA);
	set_func_flags(0X8051E09C,0x1400);
	set_frame_size(0X8051E09C, 0X10, 0, 0);
	add_func    (0X8051E0E6,0X8051E0EA);
	set_func_flags(0X8051E0E6,0x1480);
	add_func    (0X8051E130,0X8051E13E);
	set_func_flags(0X8051E130,0x1400);
	set_frame_size(0X8051E130, 0X8, 0, 0);
	add_func    (0X8051E178,0X8051E182);
	set_func_flags(0X8051E178,0x1400);
	set_frame_size(0X8051E178, 0X8, 0, 0);
	add_func    (0X8051E19C,0X8051E1B8);
	set_func_flags(0X8051E19C,0x1400);
	SetType(0X8051E19C, "int __cdecl print_error(int a1, char *a2, int a3);");
	set_frame_size(0X8051E19C, 0X20, 0, 0);
	define_local_var(0X8051E19C, 0X8051E1B8, "[bp-0X10]", "varg_r0");
	define_local_var(0X8051E19C, 0X8051E1B8, "[bp-0XC]", "varg_r1");
	define_local_var(0X8051E19C, 0X8051E1B8, "[bp-0X8]", "varg_r2");
	define_local_var(0X8051E19C, 0X8051E1B8, "[bp-0X4]", "varg_r3");
	add_func    (0X8051E23C,0X8051E256);
	set_func_flags(0X8051E23C,0x1400);
	set_frame_size(0X8051E23C, 0X8, 0, 0);
	add_func    (0X8051E2E0,0X8051E30E);
	set_func_flags(0X8051E2E0,0x1400);
	set_frame_size(0X8051E2E0, 0X8, 0, 0);
	add_func    (0X8051E30E,0X8051E31C);
	set_func_flags(0X8051E30E,0x1400);
	add_func    (0X8051E342,0X8051E356);
	set_func_flags(0X8051E342,0x1400);
	set_frame_size(0X8051E342, 0X8, 0, 0);
	add_func    (0X8051E356,0X8051E378);
	set_func_flags(0X8051E356,0x1400);
	set_frame_size(0X8051E356, 0XC, 0, 0);
	add_func    (0X8051E4F0,0X8051E510);
	set_func_flags(0X8051E4F0,0x1400);
	set_frame_size(0X8051E4F0, 0X10, 0, 0);
	add_func    (0X8051E514,0X8051E5AE);
	set_func_flags(0X8051E514,0x1400);
	SetType(0X8051E514, "int __fastcall sub_8051E514(int, int a2);");
	set_frame_size(0X8051E514, 0X20, 0, 0);
	add_func    (0X8051E5AE,0X8051E65C);
	set_func_flags(0X8051E5AE,0x1400);
	SetType(0X8051E5AE, "int __fastcall sub_8051E5AE(int, int result);");
	set_frame_size(0X8051E5AE, 0X20, 0, 0);
	add_func    (0X8051E660,0X8051E68C);
	set_func_flags(0X8051E660,0x1410);
	SetType(0X8051E660, "int __fastcall sub_8051E660(_DWORD, _DWORD);");
	set_frame_size(0X8051E660, 0X4, 8, 0);
	add_func    (0X8051E68C,0X8051E6D4);
	set_func_flags(0X8051E68C,0x1400);
	add_func    (0X8051E85C,0X8051E890);
	set_func_flags(0X8051E85C,0x1400);
	add_func    (0X8051E8B8,0X8051E8E4);
	set_func_flags(0X8051E8B8,0x1400);
	add_func    (0X8051E8E8,0X8051E92C);
	set_func_flags(0X8051E8E8,0x1400);
	add_func    (0X8051E998,0X8051E99C);
	set_func_flags(0X8051E998,0x1440);
	add_func    (0X8051E9A0,0X8051E9BC);
	set_func_flags(0X8051E9A0,0x1400);
	SetType(0X8051E9A0, "int __fastcall sub_8051E9A0(_DWORD, _DWORD);");
	set_frame_size(0X8051E9A0, 0X8, 0, 0);
	add_func    (0X8051E9BC,0X8051E9C0);
	set_func_flags(0X8051E9BC,0x14c0);
	SetType(0X8051E9BC, "void __fastcall j_memcpy(int result, int a2, int a3);");
	add_func    (0X8051E9C0,0X8051E9DC);
	set_func_flags(0X8051E9C0,0x1400);
	set_frame_size(0X8051E9C0, 0X8, 0, 0);
	add_func    (0X8051E9DC,0X8051EA00);
	set_func_flags(0X8051E9DC,0x1400);
	SetType(0X8051E9DC, "__int64 __fastcall Divide64(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8051E9DC, 0X18, 0, 0);
	add_func    (0X8051EA00,0X8051EA44);
	set_func_flags(0X8051EA00,0x1410);
	set_frame_size(0X8051EA00, 0XC, 8, 0);
	add_func    (0X8051EA44,0X8051EC24);
	set_func_flags(0X8051EA44,0x1400);
	add_func    (0X8051EC24,0X8051EF40);
	set_func_flags(0X8051EC24,0x1400);
	set_frame_size(0X8051EC24, 0X28, 0, 0);
	add_func    (0X8051EF62,0X8051EF88);
	set_func_flags(0X8051EF62,0x1400);
	set_frame_size(0X8051EF62, 0X8, 0, 0);
	add_func    (0X8051EF88,0X8051F1A0);
	set_func_flags(0X8051EF88,0x1410);
	SetType(0X8051EF88, "int __fastcall sub_8051EF88(int);");
	set_frame_size(0X8051EF88, 0X20, 8, 0);
	define_local_var(0X8051EF88, 0X8051F1A0, "[bp-0X20]", "stack_size");
	add_func    (0X8051F8FA,0X8051F96C);
	set_func_flags(0X8051F8FA,0x1410);
	SetType(0X8051F8FA, "int __fastcall sub_8051F8FA(_DWORD);");
	set_frame_size(0X8051F8FA, 0X18, 8, 0);
	add_func    (0X8051F96C,0X8051F9A0);
	set_func_flags(0X8051F96C,0x1410);
	SetType(0X8051F96C, "int __fastcall sub_8051F96C(_DWORD);");
	set_frame_size(0X8051F96C, 0X8, 8, 0);
	add_func    (0X8051FC20,0X8051FC6C);
	set_func_flags(0X8051FC20,0x1410);
	set_frame_size(0X8051FC20, 0X8, 8, 0);
	add_func    (0X8051FC6C,0X8051FC8C);
	set_func_flags(0X8051FC6C,0x1400);
	SetType(0X8051FC6C, "__int64 sub_8051FC6C(_DWORD, const char *, ...);");
	set_frame_size(0X8051FC6C, 0X18, 0, 0);
	add_func    (0X8051FC8C,0X8051FCAA);
	set_func_flags(0X8051FC8C,0x1410);
	SetType(0X8051FC8C, "int __fastcall sub_8051FC8C(_DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8051FC8C, 0X8, 8, 0);
	add_func    (0X8051FCAA,0X8051FCC0);
	set_func_flags(0X8051FCAA,0x1410);
	set_frame_size(0X8051FCAA, 0X8, 8, 0);
	add_func    (0X8051FCC0,0X8051FD1A);
	set_func_flags(0X8051FCC0,0x1410);
	SetType(0X8051FCC0, "int __fastcall sub_8051FCC0(_DWORD, _DWORD);");
	set_frame_size(0X8051FCC0, 0X20, 8, 0);
	add_func    (0X8051FD1A,0X8051FD34);
	set_func_flags(0X8051FD1A,0x1410);
	set_frame_size(0X8051FD1A, 0X8, 8, 0);
	add_func    (0X8051FD34,0X8051FD82);
	set_func_flags(0X8051FD34,0x1410);
	SetType(0X8051FD34, "int __fastcall sub_8051FD34(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8051FD34, 0X10, 8, 0);
	add_func    (0X8051FD82,0X8051FDA0);
	set_func_flags(0X8051FD82,0x1410);
	SetType(0X8051FD82, "int __fastcall sub_8051FD82(_DWORD, _DWORD, _DWORD, _DWORD);");
	set_frame_size(0X8051FD82, 0X8, 8, 0);
	add_func    (0X8051FDA0,0X8051FDB8);
	set_func_flags(0X8051FDA0,0x1410);
	SetType(0X8051FDA0, "int __fastcall sub_8051FDA0(_DWORD);");
	set_frame_size(0X8051FDA0, 0X8, 8, 0);
	add_func    (0X80539A88,0X80539A90);
	set_func_flags(0X80539A88,0x1480);
	add_func    (0X80539A90,0X80539A98);
	set_func_flags(0X80539A90,0x1480);
	add_func    (0X80539A98,0X80539A9C);
	set_func_flags(0X80539A98,0x1480);
	add_func    (0X80539AA8,0X80539AB0);
	set_func_flags(0X80539AA8,0x1480);
	add_func    (0X80539AB0,0X80539AB4);
	set_func_flags(0X80539AB0,0x1480);
	add_func    (0X80539AB8,0X80539AC0);
	set_func_flags(0X80539AB8,0x1480);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X80300000,"T",0,3);
	split_sreg_range(0X80500000,"T",0,3);
	split_sreg_range(0X80500020,"T",0,3);
	split_sreg_range(0X80500064,"T",0,3);
	split_sreg_range(0X8050008C,"T",0,3);
	split_sreg_range(0X80500108,"T",0,3);
	split_sreg_range(0X80500118,"T",0,3);
	split_sreg_range(0X80500124,"T",0,3);
	split_sreg_range(0X80500130,"T",0,3);
	split_sreg_range(0X80500134,"T",0,3);
	split_sreg_range(0X80500390,"T",0X1,2);
	split_sreg_range(0X8050060C,"T",0X1,3);
	split_sreg_range(0X80500624,"T",0X1,3);
	split_sreg_range(0X8050063C,"T",0X1,3);
	split_sreg_range(0X8050064E,"T",0X1,3);
	split_sreg_range(0X8050066E,"T",0X1,3);
	split_sreg_range(0X805006DE,"T",0X1,3);
	split_sreg_range(0X805006F4,"T",0X1,3);
	split_sreg_range(0X80500766,"T",0X1,3);
	split_sreg_range(0X805007A0,"T",0X1,3);
	split_sreg_range(0X80500870,"T",0X1,3);
	split_sreg_range(0X8050089A,"T",0X1,3);
	split_sreg_range(0X805008EC,"T",0X1,3);
	split_sreg_range(0X8050092A,"T",0X1,3);
	split_sreg_range(0X80500938,"T",0X1,3);
	split_sreg_range(0X80500958,"T",0X1,3);
	split_sreg_range(0X80500966,"T",0X1,3);
	split_sreg_range(0X80500986,"T",0X1,3);
	split_sreg_range(0X80500994,"T",0X1,3);
	split_sreg_range(0X805009C2,"T",0X1,3);
	split_sreg_range(0X805009DA,"T",0X1,3);
	split_sreg_range(0X805009FC,"T",0X1,3);
	split_sreg_range(0X80500A14,"T",0X1,3);
	split_sreg_range(0X80500AA6,"T",0X1,3);
	split_sreg_range(0X80500AC4,"T",0X1,3);
	split_sreg_range(0X80500AD8,"T",0X1,3);
	split_sreg_range(0X80500AE2,"T",0X1,3);
	split_sreg_range(0X80500AFE,"T",0X1,3);
	split_sreg_range(0X80500B84,"T",0X1,3);
	split_sreg_range(0X80500BAE,"T",0X1,3);
	split_sreg_range(0X80500BB6,"T",0X1,3);
	split_sreg_range(0X80500BBC,"T",0X1,3);
	split_sreg_range(0X80500BCE,"T",0X1,3);
	split_sreg_range(0X80500BD6,"T",0X1,3);
	split_sreg_range(0X80500BE8,"T",0X1,3);
	split_sreg_range(0X80500BF0,"T",0X1,3);
	split_sreg_range(0X80500C16,"T",0X1,3);
	split_sreg_range(0X80500C4A,"T",0X1,3);
	split_sreg_range(0X80500C88,"T",0X1,3);
	split_sreg_range(0X80500C92,"T",0X1,3);
	split_sreg_range(0X80500DAC,"T",0X1,3);
	split_sreg_range(0X80500E04,"T",0X1,3);
	split_sreg_range(0X80500E16,"T",0X1,3);
	split_sreg_range(0X80500E46,"T",0X1,3);
	split_sreg_range(0X80500E62,"T",0X1,3);
	split_sreg_range(0X80500E66,"T",0X1,3);
	split_sreg_range(0X80500EA4,"T",0X1,3);
	split_sreg_range(0X80500EC8,"T",0X1,3);
	split_sreg_range(0X80501060,"T",0X1,3);
	split_sreg_range(0X80501090,"T",0X1,3);
	split_sreg_range(0X80501170,"T",0X1,3);
	split_sreg_range(0X805011D2,"T",0X1,3);
	split_sreg_range(0X805012AC,"T",0X1,3);
	split_sreg_range(0X805012DE,"T",0X1,3);
	split_sreg_range(0X805013BE,"T",0X1,3);
	split_sreg_range(0X80501414,"T",0X1,3);
	split_sreg_range(0X80501446,"T",0X1,3);
	split_sreg_range(0X80501526,"T",0X1,3);
	split_sreg_range(0X80501592,"T",0X1,3);
	split_sreg_range(0X80501698,"T",0X1,3);
	split_sreg_range(0X805016F6,"T",0X1,3);
	split_sreg_range(0X805017FA,"T",0X1,3);
	split_sreg_range(0X80501B1C,"T",0X1,3);
	split_sreg_range(0X80501B24,"T",0X1,3);
	split_sreg_range(0X80501B76,"T",0X1,3);
	split_sreg_range(0X80501BBE,"T",0X1,3);
	split_sreg_range(0X80501BD2,"T",0X1,3);
	split_sreg_range(0X80501BD8,"T",0X1,3);
	split_sreg_range(0X80501C96,"T",0X1,3);
	split_sreg_range(0X80501CB0,"T",0X1,3);
	split_sreg_range(0X80501CC4,"T",0X1,3);
	split_sreg_range(0X80501CC6,"T",0X1,3);
	split_sreg_range(0X80501CCA,"T",0X1,3);
	split_sreg_range(0X80501D08,"T",0X1,3);
	split_sreg_range(0X80501D92,"T",0X1,3);
	split_sreg_range(0X80501D96,"T",0X1,3);
	split_sreg_range(0X80501DBE,"T",0X1,3);
	split_sreg_range(0X80501DE6,"T",0X1,3);
	split_sreg_range(0X80501E0E,"T",0X1,3);
	split_sreg_range(0X80501E36,"T",0X1,3);
	split_sreg_range(0X80501E5E,"T",0X1,3);
	split_sreg_range(0X80501FD6,"T",0X1,3);
	split_sreg_range(0X8050208C,"T",0X1,3);
	split_sreg_range(0X8050213E,"T",0X1,3);
	split_sreg_range(0X805021DC,"T",0X1,3);
	split_sreg_range(0X80502288,"T",0X1,3);
	split_sreg_range(0X80502292,"T",0X1,3);
	split_sreg_range(0X805022A0,"T",0X1,3);
	split_sreg_range(0X805022D0,"T",0X1,3);
	split_sreg_range(0X8050230C,"T",0X1,3);
	split_sreg_range(0X8050236E,"T",0X1,3);
	split_sreg_range(0X8050239C,"T",0X1,3);
	split_sreg_range(0X805023B6,"T",0X1,3);
	split_sreg_range(0X805023C8,"T",0X1,3);
	split_sreg_range(0X805023EC,"T",0X1,3);
	split_sreg_range(0X80502402,"T",0X1,3);
	split_sreg_range(0X80502460,"T",0X1,3);
	split_sreg_range(0X8050248E,"T",0X1,3);
	split_sreg_range(0X805024A8,"T",0X1,3);
	split_sreg_range(0X805024BA,"T",0X1,3);
	split_sreg_range(0X805024E4,"T",0X1,3);
	split_sreg_range(0X80502546,"T",0X1,3);
	split_sreg_range(0X80502554,"T",0X1,3);
	split_sreg_range(0X80502580,"T",0X1,3);
	split_sreg_range(0X80502588,"T",0X1,3);
	split_sreg_range(0X80502590,"T",0X1,3);
	split_sreg_range(0X805025C8,"T",0X1,3);
	split_sreg_range(0X805025CA,"T",0X1,3);
	split_sreg_range(0X805025E2,"T",0X1,3);
	split_sreg_range(0X805025E4,"T",0X1,3);
	split_sreg_range(0X805025EE,"T",0X1,3);
	split_sreg_range(0X80502620,"T",0X1,3);
	split_sreg_range(0X8050263E,"T",0X1,3);
	split_sreg_range(0X80502640,"T",0X1,3);
	split_sreg_range(0X80502644,"T",0X1,3);
	split_sreg_range(0X80502650,"T",0X1,3);
	split_sreg_range(0X80502672,"T",0X1,3);
	split_sreg_range(0X8050269A,"T",0X1,3);
	split_sreg_range(0X8050269C,"T",0X1,3);
	split_sreg_range(0X805026AA,"T",0X1,3);
	split_sreg_range(0X805026B8,"T",0X1,3);
	split_sreg_range(0X805026C0,"T",0X1,3);
	split_sreg_range(0X805026C2,"T",0X1,3);
	split_sreg_range(0X805026C4,"T",0X1,3);
	split_sreg_range(0X805026CA,"T",0X1,3);
	split_sreg_range(0X805026D4,"T",0X1,3);
	split_sreg_range(0X805026FC,"T",0X1,3);
	split_sreg_range(0X805026FE,"T",0X1,3);
	split_sreg_range(0X8050270C,"T",0X1,3);
	split_sreg_range(0X8050271A,"T",0X1,3);
	split_sreg_range(0X80502722,"T",0X1,3);
	split_sreg_range(0X8050274C,"T",0X1,3);
	split_sreg_range(0X80502758,"T",0X1,3);
	split_sreg_range(0X8050275C,"T",0X1,3);
	split_sreg_range(0X80502760,"T",0X1,3);
	split_sreg_range(0X80502762,"T",0X1,3);
	split_sreg_range(0X80502782,"T",0X1,3);
	split_sreg_range(0X805027B0,"T",0X1,3);
	split_sreg_range(0X80502804,"T",0X1,3);
	split_sreg_range(0X80502812,"T",0X1,3);
	split_sreg_range(0X80502836,"T",0X1,3);
	split_sreg_range(0X8050283A,"T",0X1,3);
	split_sreg_range(0X80502864,"T",0X1,3);
	split_sreg_range(0X80502884,"T",0X1,3);
	split_sreg_range(0X8050288C,"T",0X1,3);
	split_sreg_range(0X80502894,"T",0X1,3);
	split_sreg_range(0X805028BC,"T",0X1,3);
	split_sreg_range(0X805028C0,"T",0X1,3);
	split_sreg_range(0X805028D6,"T",0X1,3);
	split_sreg_range(0X80502924,"T",0X1,3);
	split_sreg_range(0X80502946,"T",0X1,3);
	split_sreg_range(0X8050299A,"T",0X1,3);
	split_sreg_range(0X805029A8,"T",0X1,3);
	split_sreg_range(0X805029C0,"T",0X1,3);
	split_sreg_range(0X805029F0,"T",0X1,3);
	split_sreg_range(0X80502A00,"T",0X1,3);
	split_sreg_range(0X80502A08,"T",0X1,3);
	split_sreg_range(0X80502A10,"T",0X1,3);
	split_sreg_range(0X80502A26,"T",0X1,3);
	split_sreg_range(0X80502A32,"T",0X1,3);
	split_sreg_range(0X80502A96,"T",0X1,3);
	split_sreg_range(0X80502AD2,"T",0X1,3);
	split_sreg_range(0X80502AE2,"T",0X1,3);
	split_sreg_range(0X80502AEE,"T",0X1,3);
	split_sreg_range(0X80502B0A,"T",0X1,3);
	split_sreg_range(0X80502B24,"T",0X1,3);
	split_sreg_range(0X80502B26,"T",0X1,3);
	split_sreg_range(0X80502B4E,"T",0X1,3);
	split_sreg_range(0X80502BA0,"T",0X1,3);
	split_sreg_range(0X80502BAC,"T",0X1,3);
	split_sreg_range(0X80502BBE,"T",0X1,3);
	split_sreg_range(0X80502BCE,"T",0X1,3);
	split_sreg_range(0X80502C52,"T",0X1,3);
	split_sreg_range(0X80502CD8,"T",0X1,3);
	split_sreg_range(0X80502CE8,"T",0X1,3);
	split_sreg_range(0X80502CEA,"T",0X1,3);
	split_sreg_range(0X80502D00,"T",0X1,3);
	split_sreg_range(0X80502D50,"T",0X1,3);
	split_sreg_range(0X80502D8C,"T",0X1,3);
	split_sreg_range(0X80502D9C,"T",0X1,3);
	split_sreg_range(0X80502DA8,"T",0X1,3);
	split_sreg_range(0X80502DB2,"T",0X1,3);
	split_sreg_range(0X80502E06,"T",0X1,3);
	split_sreg_range(0X80502E16,"T",0X1,3);
	split_sreg_range(0X80502E1C,"T",0X1,3);
	split_sreg_range(0X80502E2E,"T",0X1,3);
	split_sreg_range(0X80502E90,"T",0X1,3);
	split_sreg_range(0X80502F16,"T",0X1,3);
	split_sreg_range(0X80502F3C,"T",0X1,3);
	split_sreg_range(0X80502F3E,"T",0X1,3);
	split_sreg_range(0X80502F84,"T",0X1,3);
	split_sreg_range(0X80503050,"T",0X1,3);
	split_sreg_range(0X805030A4,"T",0X1,3);
	split_sreg_range(0X805030D6,"T",0X1,3);
	split_sreg_range(0X8050314A,"T",0X1,3);
	split_sreg_range(0X8050316C,"T",0X1,3);
	split_sreg_range(0X80503178,"T",0X1,3);
	split_sreg_range(0X805031D8,"T",0X1,3);
	split_sreg_range(0X80503214,"T",0X1,3);
	split_sreg_range(0X80503242,"T",0X1,3);
	split_sreg_range(0X80503284,"T",0X1,3);
	split_sreg_range(0X8050328E,"T",0X1,3);
	split_sreg_range(0X805032AE,"T",0X1,3);
	split_sreg_range(0X805032FA,"T",0X1,3);
	split_sreg_range(0X80503302,"T",0X1,3);
	split_sreg_range(0X80503340,"T",0X1,3);
	split_sreg_range(0X80503344,"T",0X1,3);
	split_sreg_range(0X8050335A,"T",0X1,3);
	split_sreg_range(0X80503360,"T",0X1,3);
	split_sreg_range(0X80503372,"T",0X1,3);
	split_sreg_range(0X80503396,"T",0X1,3);
	split_sreg_range(0X8050339E,"T",0X1,3);
	split_sreg_range(0X805033AA,"T",0X1,3);
	split_sreg_range(0X805033BC,"T",0X1,3);
	split_sreg_range(0X805033D0,"T",0X1,3);
	split_sreg_range(0X805033D4,"T",0X1,3);
	split_sreg_range(0X805033DE,"T",0X1,3);
	split_sreg_range(0X805033E0,"T",0X1,3);
	split_sreg_range(0X805033E8,"T",0X1,3);
	split_sreg_range(0X805033F0,"T",0X1,3);
	split_sreg_range(0X80503400,"T",0X1,3);
	split_sreg_range(0X8050347C,"T",0X1,3);
	split_sreg_range(0X80503486,"T",0X1,3);
	split_sreg_range(0X8050349A,"T",0X1,3);
	split_sreg_range(0X805034BA,"T",0X1,3);
	split_sreg_range(0X805034BE,"T",0X1,3);
	split_sreg_range(0X805034D0,"T",0X1,3);
	split_sreg_range(0X805034D6,"T",0X1,3);
	split_sreg_range(0X805034E4,"T",0X1,3);
	split_sreg_range(0X805034E8,"T",0X1,3);
	split_sreg_range(0X805034F0,"T",0X1,3);
	split_sreg_range(0X805034F8,"T",0X1,3);
	split_sreg_range(0X80503540,"T",0X1,3);
	split_sreg_range(0X8050354E,"T",0X1,3);
	split_sreg_range(0X8050356A,"T",0X1,3);
	split_sreg_range(0X80503570,"T",0X1,3);
	split_sreg_range(0X805035A0,"T",0X1,3);
	split_sreg_range(0X805035AE,"T",0X1,3);
	split_sreg_range(0X805035B6,"T",0X1,3);
	split_sreg_range(0X805041B0,"T",0X1,3);
	split_sreg_range(0X80504320,"T",0X1,3);
	split_sreg_range(0X8050458C,"T",0X1,3);
	split_sreg_range(0X805045D2,"T",0X1,3);
	split_sreg_range(0X805045D8,"T",0X1,3);
	split_sreg_range(0X805045DC,"T",0X1,3);
	split_sreg_range(0X80504600,"T",0X1,3);
	split_sreg_range(0X8050464E,"T",0X1,3);
	split_sreg_range(0X80504680,"T",0X1,3);
	split_sreg_range(0X80504694,"T",0X1,3);
	split_sreg_range(0X8050469C,"T",0X1,3);
	split_sreg_range(0X80504760,"T",0X1,3);
	split_sreg_range(0X80504796,"T",0X1,3);
	split_sreg_range(0X805047DE,"T",0X1,3);
	split_sreg_range(0X805047E6,"T",0X1,3);
	split_sreg_range(0X8050480C,"T",0X1,3);
	split_sreg_range(0X80504832,"T",0X1,3);
	split_sreg_range(0X805049A0,"T",0X1,3);
	split_sreg_range(0X805049B2,"T",0X1,3);
	split_sreg_range(0X805049BC,"T",0X1,3);
	split_sreg_range(0X805049E4,"T",0X1,3);
	split_sreg_range(0X80504A70,"T",0X1,3);
	split_sreg_range(0X80504ABA,"T",0X1,3);
	split_sreg_range(0X80504AD4,"T",0X1,3);
	split_sreg_range(0X80504AF0,"T",0X1,3);
	split_sreg_range(0X80504AFC,"T",0X1,3);
	split_sreg_range(0X80504B08,"T",0X1,3);
	split_sreg_range(0X80504B16,"T",0X1,3);
	split_sreg_range(0X80504B26,"T",0X1,3);
	split_sreg_range(0X80504B34,"T",0X1,3);
	split_sreg_range(0X80504BAC,"T",0X1,3);
	split_sreg_range(0X80504BBC,"T",0X1,3);
	split_sreg_range(0X80504BD6,"T",0X1,3);
	split_sreg_range(0X80504BE2,"T",0X1,3);
	split_sreg_range(0X80504BF0,"T",0X1,3);
	split_sreg_range(0X80504C20,"T",0X1,3);
	split_sreg_range(0X80504C86,"T",0X1,3);
	split_sreg_range(0X80504C94,"T",0X1,3);
	split_sreg_range(0X80504CDE,"T",0X1,3);
	split_sreg_range(0X80504D18,"T",0X1,3);
	split_sreg_range(0X80504D32,"T",0X1,3);
	split_sreg_range(0X80504D66,"T",0X1,3);
	split_sreg_range(0X80504D86,"T",0X1,3);
	split_sreg_range(0X80504D90,"T",0X1,3);
	split_sreg_range(0X80504DE0,"T",0X1,3);
	split_sreg_range(0X80504DFA,"T",0X1,3);
	split_sreg_range(0X80504E24,"T",0X1,3);
	split_sreg_range(0X80504E82,"T",0X1,3);
	split_sreg_range(0X80504F00,"T",0X1,3);
	split_sreg_range(0X80504F0A,"T",0X1,3);
	split_sreg_range(0X80504F6C,"T",0X1,3);
	split_sreg_range(0X80504F8C,"T",0X1,3);
	split_sreg_range(0X80504FAC,"T",0X1,3);
	split_sreg_range(0X80504FB2,"T",0X1,3);
	split_sreg_range(0X8050501C,"T",0X1,3);
	split_sreg_range(0X805050CA,"T",0X1,3);
	split_sreg_range(0X8050511E,"T",0X1,3);
	split_sreg_range(0X80505144,"T",0X1,3);
	split_sreg_range(0X80505198,"T",0X1,3);
	split_sreg_range(0X805051BE,"T",0X1,3);
	split_sreg_range(0X80505212,"T",0X1,3);
	split_sreg_range(0X80505238,"T",0X1,3);
	split_sreg_range(0X80505266,"T",0X1,3);
	split_sreg_range(0X80505282,"T",0X1,3);
	split_sreg_range(0X80505284,"T",0X1,3);
	split_sreg_range(0X8050528E,"T",0X1,3);
	split_sreg_range(0X80505292,"T",0X1,3);
	split_sreg_range(0X805052B8,"T",0X1,3);
	split_sreg_range(0X80505384,"T",0X1,3);
	split_sreg_range(0X805053B2,"T",0X1,3);
	split_sreg_range(0X805053CE,"T",0X1,3);
	split_sreg_range(0X805053D0,"T",0X1,3);
	split_sreg_range(0X805053DA,"T",0X1,3);
	split_sreg_range(0X805053DE,"T",0X1,3);
	split_sreg_range(0X80505404,"T",0X1,3);
	split_sreg_range(0X8050542A,"T",0X1,3);
	split_sreg_range(0X80505458,"T",0X1,3);
	split_sreg_range(0X80505474,"T",0X1,3);
	split_sreg_range(0X80505476,"T",0X1,3);
	split_sreg_range(0X80505480,"T",0X1,3);
	split_sreg_range(0X80505484,"T",0X1,3);
	split_sreg_range(0X805054AA,"T",0X1,3);
	split_sreg_range(0X805054D0,"T",0X1,3);
	split_sreg_range(0X805054FC,"T",0X1,3);
	split_sreg_range(0X8050550A,"T",0X1,3);
	split_sreg_range(0X80505520,"T",0X1,3);
	split_sreg_range(0X80505554,"T",0X1,3);
	split_sreg_range(0X8050556E,"T",0X1,3);
	split_sreg_range(0X80505570,"T",0X1,3);
	split_sreg_range(0X80505572,"T",0X1,3);
	split_sreg_range(0X8050557A,"T",0X1,3);
	split_sreg_range(0X805055A0,"T",0X1,3);
	split_sreg_range(0X805055C6,"T",0X1,3);
	split_sreg_range(0X805055EE,"T",0X1,3);
	split_sreg_range(0X80505624,"T",0X1,3);
	split_sreg_range(0X80505646,"T",0X1,3);
	split_sreg_range(0X80505652,"T",0X1,3);
	split_sreg_range(0X80505664,"T",0X1,3);
	split_sreg_range(0X8050566C,"T",0X1,3);
	split_sreg_range(0X80505672,"T",0X1,3);
	split_sreg_range(0X805056D2,"T",0X1,3);
	split_sreg_range(0X805056F4,"T",0X1,3);
	split_sreg_range(0X80505714,"T",0X1,3);
	split_sreg_range(0X80505720,"T",0X1,3);
	split_sreg_range(0X80505740,"T",0X1,3);
	split_sreg_range(0X8050574C,"T",0X1,3);
	split_sreg_range(0X8050576C,"T",0X1,3);
	split_sreg_range(0X80505778,"T",0X1,3);
	split_sreg_range(0X80505798,"T",0X1,3);
	split_sreg_range(0X805057A4,"T",0X1,3);
	split_sreg_range(0X805057C4,"T",0X1,3);
	split_sreg_range(0X805057D0,"T",0X1,3);
	split_sreg_range(0X805057F8,"T",0X1,3);
	split_sreg_range(0X80505804,"T",0X1,3);
	split_sreg_range(0X8050582C,"T",0X1,3);
	split_sreg_range(0X8050589C,"T",0X1,3);
	split_sreg_range(0X805058AE,"T",0X1,3);
	split_sreg_range(0X805058F4,"T",0X1,3);
	split_sreg_range(0X80505908,"T",0X1,3);
	split_sreg_range(0X8050590C,"T",0X1,3);
	split_sreg_range(0X80505910,"T",0X1,3);
	split_sreg_range(0X8050591E,"T",0X1,3);
	split_sreg_range(0X80505920,"T",0X1,3);
	split_sreg_range(0X80505928,"T",0X1,3);
	split_sreg_range(0X8050595E,"T",0X1,3);
	split_sreg_range(0X80505966,"T",0X1,3);
	split_sreg_range(0X80505988,"T",0X1,3);
	split_sreg_range(0X80505992,"T",0X1,3);
	split_sreg_range(0X805059B8,"T",0X1,3);
	split_sreg_range(0X805059DE,"T",0X1,3);
	split_sreg_range(0X80505A04,"T",0X1,3);
	split_sreg_range(0X80505A2A,"T",0X1,3);
	split_sreg_range(0X80505A96,"T",0X1,3);
	split_sreg_range(0X80505AB0,"T",0X1,3);
	split_sreg_range(0X80505ADE,"T",0X1,3);
	split_sreg_range(0X80505AE2,"T",0X1,3);
	split_sreg_range(0X80505AE6,"T",0X1,3);
	split_sreg_range(0X80505AF4,"T",0X1,3);
	split_sreg_range(0X80505B04,"T",0X1,3);
	split_sreg_range(0X80505B18,"T",0X1,3);
	split_sreg_range(0X80505B48,"T",0X1,3);
	split_sreg_range(0X80505B4E,"T",0X1,3);
	split_sreg_range(0X80505B68,"T",0X1,3);
	split_sreg_range(0X80505B72,"T",0X1,3);
	split_sreg_range(0X80505B80,"T",0X1,3);
	split_sreg_range(0X80505BA6,"T",0X1,3);
	split_sreg_range(0X80505BCC,"T",0X1,3);
	split_sreg_range(0X80505BF2,"T",0X1,3);
	split_sreg_range(0X80505C18,"T",0X1,3);
	split_sreg_range(0X80505C58,"T",0X1,3);
	split_sreg_range(0X80505D0C,"T",0X1,3);
	split_sreg_range(0X80505D60,"T",0X1,3);
	split_sreg_range(0X80505D90,"T",0X1,3);
	split_sreg_range(0X80505DA0,"T",0X1,3);
	split_sreg_range(0X80506012,"T",0X1,3);
	split_sreg_range(0X80506094,"T",0X1,3);
	split_sreg_range(0X805060AC,"T",0X1,3);
	split_sreg_range(0X805060BC,"T",0X1,3);
	split_sreg_range(0X8050614E,"T",0X1,3);
	split_sreg_range(0X8050628A,"T",0X1,3);
	split_sreg_range(0X805066A8,"T",0X1,3);
	split_sreg_range(0X80506AC4,"T",0X1,3);
	split_sreg_range(0X80506B9C,"T",0X1,3);
	split_sreg_range(0X80506CA6,"T",0X1,3);
	split_sreg_range(0X80506CD8,"T",0X1,3);
	split_sreg_range(0X80506D8A,"T",0X1,3);
	split_sreg_range(0X80506EC8,"T",0X1,3);
	split_sreg_range(0X80506EF8,"T",0X1,3);
	split_sreg_range(0X80506FBA,"T",0X1,3);
	split_sreg_range(0X805070F4,"T",0X1,3);
	split_sreg_range(0X80507104,"T",0X1,3);
	split_sreg_range(0X80507128,"T",0X1,3);
	split_sreg_range(0X80507186,"T",0X1,3);
	split_sreg_range(0X8050718C,"T",0X1,3);
	split_sreg_range(0X805071F2,"T",0X1,3);
	split_sreg_range(0X805071FE,"T",0X1,3);
	split_sreg_range(0X80507244,"T",0X1,3);
	split_sreg_range(0X80507252,"T",0X1,3);
	split_sreg_range(0X80507268,"T",0X1,3);
	split_sreg_range(0X805074F2,"T",0X1,3);
	split_sreg_range(0X805074FA,"T",0X1,3);
	split_sreg_range(0X805076AC,"T",0X1,3);
	split_sreg_range(0X80507734,"T",0X1,3);
	split_sreg_range(0X80507794,"T",0X1,3);
	split_sreg_range(0X805077E0,"T",0X1,3);
	split_sreg_range(0X80507B9E,"T",0X1,3);
	split_sreg_range(0X80507BDC,"T",0X1,3);
	split_sreg_range(0X80507C0E,"T",0X1,3);
	split_sreg_range(0X80507D44,"T",0X1,3);
	split_sreg_range(0X80507D4E,"T",0X1,3);
	split_sreg_range(0X80507DA6,"T",0X1,3);
	split_sreg_range(0X80507DB4,"T",0X1,3);
	split_sreg_range(0X80507E74,"T",0X1,3);
	split_sreg_range(0X80507EC0,"T",0X1,3);
	split_sreg_range(0X80507F4C,"T",0X1,3);
	split_sreg_range(0X8050803A,"T",0X1,3);
	split_sreg_range(0X805080F6,"T",0X1,3);
	split_sreg_range(0X805080FE,"T",0X1,3);
	split_sreg_range(0X80508226,"T",0X1,3);
	split_sreg_range(0X80508250,"T",0X1,3);
	split_sreg_range(0X80508264,"T",0X1,3);
	split_sreg_range(0X805082B8,"T",0X1,3);
	split_sreg_range(0X80508306,"T",0X1,3);
	split_sreg_range(0X80508366,"T",0X1,3);
	split_sreg_range(0X805083B2,"T",0X1,3);
	split_sreg_range(0X80508414,"T",0X1,3);
	split_sreg_range(0X8050841E,"T",0X1,3);
	split_sreg_range(0X80508426,"T",0X1,3);
	split_sreg_range(0X8050844E,"T",0X1,3);
	split_sreg_range(0X805084DA,"T",0X1,3);
	split_sreg_range(0X8050856C,"T",0X1,3);
	split_sreg_range(0X805085B8,"T",0X1,3);
	split_sreg_range(0X8050860C,"T",0X1,3);
	split_sreg_range(0X80508658,"T",0X1,3);
	split_sreg_range(0X80508680,"T",0X1,3);
	split_sreg_range(0X80508682,"T",0X1,3);
	split_sreg_range(0X80508688,"T",0X1,3);
	split_sreg_range(0X80508692,"T",0X1,3);
	split_sreg_range(0X80508704,"T",0X1,3);
	split_sreg_range(0X80508750,"T",0X1,3);
	split_sreg_range(0X8050875C,"T",0X1,3);
	split_sreg_range(0X80508766,"T",0X1,3);
	split_sreg_range(0X805087A4,"T",0X1,3);
	split_sreg_range(0X805087AC,"T",0X1,3);
	split_sreg_range(0X805087CE,"T",0X1,3);
	split_sreg_range(0X805087D6,"T",0X1,3);
	split_sreg_range(0X805087DC,"T",0X1,3);
	split_sreg_range(0X805087E4,"T",0X1,3);
	split_sreg_range(0X80508802,"T",0X1,3);
	split_sreg_range(0X8050880C,"T",0X1,3);
	split_sreg_range(0X8050882E,"T",0X1,3);
	split_sreg_range(0X80508836,"T",0X1,3);
	split_sreg_range(0X80508858,"T",0X1,3);
	split_sreg_range(0X80508860,"T",0X1,3);
	split_sreg_range(0X80508866,"T",0X1,3);
	split_sreg_range(0X80508888,"T",0X1,3);
	split_sreg_range(0X805088A8,"T",0X1,3);
	split_sreg_range(0X805088BA,"T",0X1,3);
	split_sreg_range(0X805088E2,"T",0X1,3);
	split_sreg_range(0X80508924,"T",0X1,3);
	split_sreg_range(0X8050894A,"T",0X1,3);
	split_sreg_range(0X80508972,"T",0X1,3);
	split_sreg_range(0X8050899A,"T",0X1,3);
	split_sreg_range(0X805089C2,"T",0X1,3);
	split_sreg_range(0X805089EA,"T",0X1,3);
	split_sreg_range(0X80508A12,"T",0X1,3);
	split_sreg_range(0X80508A3A,"T",0X1,3);
	split_sreg_range(0X80508A62,"T",0X1,3);
	split_sreg_range(0X80508A8A,"T",0X1,3);
	split_sreg_range(0X80508AB2,"T",0X1,3);
	split_sreg_range(0X80508ADA,"T",0X1,3);
	split_sreg_range(0X80508B02,"T",0X1,3);
	split_sreg_range(0X80508B2A,"T",0X1,3);
	split_sreg_range(0X80508B52,"T",0X1,3);
	split_sreg_range(0X80508B7A,"T",0X1,3);
	split_sreg_range(0X80508BA2,"T",0X1,3);
	split_sreg_range(0X80508BCA,"T",0X1,3);
	split_sreg_range(0X80508BF2,"T",0X1,3);
	split_sreg_range(0X80508C1A,"T",0X1,3);
	split_sreg_range(0X80508C42,"T",0X1,3);
	split_sreg_range(0X80508C6A,"T",0X1,3);
	split_sreg_range(0X80508C92,"T",0X1,3);
	split_sreg_range(0X80508CBA,"T",0X1,3);
	split_sreg_range(0X80508CE2,"T",0X1,3);
	split_sreg_range(0X80508D0A,"T",0X1,3);
	split_sreg_range(0X80508D32,"T",0X1,3);
	split_sreg_range(0X80508D5A,"T",0X1,3);
	split_sreg_range(0X80508D82,"T",0X1,3);
	split_sreg_range(0X80508DE6,"T",0X1,3);
	split_sreg_range(0X80508E0E,"T",0X1,3);
	split_sreg_range(0X80508E36,"T",0X1,3);
	split_sreg_range(0X80508E5E,"T",0X1,3);
	split_sreg_range(0X80508E86,"T",0X1,3);
	split_sreg_range(0X80508EC6,"T",0X1,3);
	split_sreg_range(0X80508ECE,"T",0X1,3);
	split_sreg_range(0X80508FD8,"T",0X1,3);
	split_sreg_range(0X80509004,"T",0X1,3);
	split_sreg_range(0X8050900E,"T",0X1,3);
	split_sreg_range(0X8050902E,"T",0X1,3);
	split_sreg_range(0X80509032,"T",0X1,3);
	split_sreg_range(0X80509042,"T",0X1,3);
	split_sreg_range(0X8050904A,"T",0X1,3);
	split_sreg_range(0X80509082,"T",0X1,3);
	split_sreg_range(0X805090C8,"T",0X1,3);
	split_sreg_range(0X805090CC,"T",0X1,3);
	split_sreg_range(0X80509104,"T",0X1,3);
	split_sreg_range(0X80509120,"T",0X1,3);
	split_sreg_range(0X8050912E,"T",0X1,3);
	split_sreg_range(0X80509144,"T",0X1,3);
	split_sreg_range(0X80509188,"T",0X1,3);
	split_sreg_range(0X805091B0,"T",0X1,3);
	split_sreg_range(0X80509226,"T",0X1,3);
	split_sreg_range(0X80509266,"T",0X1,3);
	split_sreg_range(0X80509274,"T",0X1,3);
	split_sreg_range(0X80509284,"T",0X1,3);
	split_sreg_range(0X80509298,"T",0X1,3);
	split_sreg_range(0X8050930A,"T",0X1,3);
	split_sreg_range(0X80509310,"T",0X1,3);
	split_sreg_range(0X80509356,"T",0X1,3);
	split_sreg_range(0X80509368,"T",0X1,3);
	split_sreg_range(0X8050936C,"T",0X1,3);
	split_sreg_range(0X80509374,"T",0X1,3);
	split_sreg_range(0X80509384,"T",0X1,3);
	split_sreg_range(0X805093A0,"T",0X1,3);
	split_sreg_range(0X805093D8,"T",0X1,3);
	split_sreg_range(0X805093E6,"T",0X1,3);
	split_sreg_range(0X805093F2,"T",0X1,3);
	split_sreg_range(0X805093F6,"T",0X1,3);
	split_sreg_range(0X805093F8,"T",0X1,3);
	split_sreg_range(0X80509400,"T",0X1,3);
	split_sreg_range(0X80509422,"T",0X1,3);
	split_sreg_range(0X80509432,"T",0X1,3);
	split_sreg_range(0X8050946A,"T",0X1,3);
	split_sreg_range(0X80509472,"T",0X1,3);
	split_sreg_range(0X80509486,"T",0X1,3);
	split_sreg_range(0X8050948E,"T",0X1,3);
	split_sreg_range(0X805094B4,"T",0X1,3);
	split_sreg_range(0X805094DC,"T",0X1,3);
	split_sreg_range(0X80509504,"T",0X1,3);
	split_sreg_range(0X8050952C,"T",0X1,3);
	split_sreg_range(0X80509554,"T",0X1,3);
	split_sreg_range(0X8050957C,"T",0X1,3);
	split_sreg_range(0X805095A4,"T",0X1,3);
	split_sreg_range(0X805095CC,"T",0X1,3);
	split_sreg_range(0X805095F4,"T",0X1,3);
	split_sreg_range(0X8050961C,"T",0X1,3);
	split_sreg_range(0X80509644,"T",0X1,3);
	split_sreg_range(0X8050966C,"T",0X1,3);
	split_sreg_range(0X805098BC,"T",0X1,3);
	split_sreg_range(0X8050990C,"T",0X1,3);
	split_sreg_range(0X80509926,"T",0X1,3);
	split_sreg_range(0X8050992E,"T",0X1,3);
	split_sreg_range(0X80509938,"T",0X1,3);
	split_sreg_range(0X80509954,"T",0X1,3);
	split_sreg_range(0X80509958,"T",0X1,3);
	split_sreg_range(0X80509996,"T",0X1,3);
	split_sreg_range(0X805099B0,"T",0X1,3);
	split_sreg_range(0X805099BC,"T",0X1,3);
	split_sreg_range(0X805099C4,"T",0X1,3);
	split_sreg_range(0X805099E0,"T",0X1,3);
	split_sreg_range(0X80509BE4,"T",0X1,3);
	split_sreg_range(0X80509C02,"T",0X1,3);
	split_sreg_range(0X80509C0E,"T",0X1,3);
	split_sreg_range(0X80509C4C,"T",0X1,3);
	split_sreg_range(0X80509C82,"T",0X1,3);
	split_sreg_range(0X80509C96,"T",0X1,3);
	split_sreg_range(0X80509CA6,"T",0X1,3);
	split_sreg_range(0X80509CC0,"T",0X1,3);
	split_sreg_range(0X80509CCC,"T",0X1,3);
	split_sreg_range(0X80509CD6,"T",0X1,3);
	split_sreg_range(0X80509D00,"T",0X1,3);
	split_sreg_range(0X80509D24,"T",0X1,3);
	split_sreg_range(0X80509D26,"T",0X1,3);
	split_sreg_range(0X80509D2E,"T",0X1,3);
	split_sreg_range(0X80509D6E,"T",0X1,3);
	split_sreg_range(0X80509DAC,"T",0X1,3);
	split_sreg_range(0X80509E0A,"T",0X1,3);
	split_sreg_range(0X80509E78,"T",0X1,3);
	split_sreg_range(0X80509E80,"T",0X1,3);
	split_sreg_range(0X80509EA6,"T",0X1,3);
	split_sreg_range(0X80509ECE,"T",0X1,3);
	split_sreg_range(0X80509ED6,"T",0X1,3);
	split_sreg_range(0X80509EF4,"T",0X1,3);
	split_sreg_range(0X80509F1C,"T",0X1,3);
	split_sreg_range(0X80509F64,"T",0X1,3);
	split_sreg_range(0X80509FB2,"T",0X1,3);
	split_sreg_range(0X80509FBC,"T",0X1,3);
	split_sreg_range(0X8050A038,"T",0X1,3);
	split_sreg_range(0X8050A224,"T",0X1,3);
	split_sreg_range(0X8050A22C,"T",0X1,3);
	split_sreg_range(0X8050A258,"T",0X1,3);
	split_sreg_range(0X8050A2A2,"T",0X1,3);
	split_sreg_range(0X8050A2BA,"T",0X1,3);
	split_sreg_range(0X8050A346,"T",0X1,3);
	split_sreg_range(0X8050A354,"T",0X1,3);
	split_sreg_range(0X8050A39E,"T",0X1,3);
	split_sreg_range(0X8050A56C,"T",0X1,3);
	split_sreg_range(0X8050A5DA,"T",0X1,3);
	split_sreg_range(0X8050A5DE,"T",0X1,3);
	split_sreg_range(0X8050A5E6,"T",0X1,3);
	split_sreg_range(0X8050A61A,"T",0X1,3);
	split_sreg_range(0X8050A6A2,"T",0X1,3);
	split_sreg_range(0X8050A70A,"T",0X1,3);
	split_sreg_range(0X8050A774,"T",0X1,3);
	split_sreg_range(0X8050A7E8,"T",0X1,3);
	split_sreg_range(0X8050A872,"T",0X1,3);
	split_sreg_range(0X8050A87A,"T",0X1,3);
	split_sreg_range(0X8050A87E,"T",0X1,3);
	split_sreg_range(0X8050A8E2,"T",0X1,3);
	split_sreg_range(0X8050AC32,"T",0X1,3);
	split_sreg_range(0X8050ADC2,"T",0X1,3);
	split_sreg_range(0X8050ADC6,"T",0X1,3);
	split_sreg_range(0X8050ADDE,"T",0X1,3);
	split_sreg_range(0X8050AEBE,"T",0X1,3);
	split_sreg_range(0X8050AF40,"T",0X1,3);
	split_sreg_range(0X8050AF56,"T",0X1,3);
	split_sreg_range(0X8050AF58,"T",0X1,3);
	split_sreg_range(0X8050AF6C,"T",0X1,3);
	split_sreg_range(0X8050AF7C,"T",0X1,3);
	split_sreg_range(0X8050AF80,"T",0X1,3);
	split_sreg_range(0X8050AF8C,"T",0X1,3);
	split_sreg_range(0X8050AF98,"T",0X1,3);
	split_sreg_range(0X8050AFA0,"T",0X1,3);
	split_sreg_range(0X8050AFB0,"T",0X1,3);
	split_sreg_range(0X8050B016,"T",0X1,3);
	split_sreg_range(0X8050B02C,"T",0X1,3);
	split_sreg_range(0X8050B03A,"T",0X1,3);
	split_sreg_range(0X8050B046,"T",0X1,3);
	split_sreg_range(0X8050B08E,"T",0X1,3);
	split_sreg_range(0X8050B106,"T",0X1,3);
	split_sreg_range(0X8050B144,"T",0X1,3);
	split_sreg_range(0X8050B1B4,"T",0X1,3);
	split_sreg_range(0X8050B1B8,"T",0X1,3);
	split_sreg_range(0X8050B1CE,"T",0X1,3);
	split_sreg_range(0X8050B24E,"T",0X1,3);
	split_sreg_range(0X8050B2AE,"T",0X1,3);
	split_sreg_range(0X8050B2E2,"T",0X1,3);
	split_sreg_range(0X8050B3B2,"T",0X1,3);
	split_sreg_range(0X8050B402,"T",0X1,3);
	split_sreg_range(0X8050B436,"T",0X1,3);
	split_sreg_range(0X8050B530,"T",0X1,3);
	split_sreg_range(0X8050B57E,"T",0X1,3);
	split_sreg_range(0X8050B618,"T",0X1,3);
	split_sreg_range(0X8050B69A,"T",0X1,3);
	split_sreg_range(0X8050B6FA,"T",0X1,3);
	split_sreg_range(0X8050B706,"T",0X1,3);
	split_sreg_range(0X8050B71E,"T",0X1,3);
	split_sreg_range(0X8050B720,"T",0X1,3);
	split_sreg_range(0X8050B73C,"T",0X1,3);
	split_sreg_range(0X8050B74A,"T",0X1,3);
	split_sreg_range(0X8050B7C2,"T",0X1,3);
	split_sreg_range(0X8050B800,"T",0X1,3);
	split_sreg_range(0X8050B83E,"T",0X1,3);
	split_sreg_range(0X8050B848,"T",0X1,3);
	split_sreg_range(0X8050B8A8,"T",0X1,3);
	split_sreg_range(0X8050B8DC,"T",0X1,3);
	split_sreg_range(0X8050B922,"T",0X1,3);
	split_sreg_range(0X8050B930,"T",0X1,3);
	split_sreg_range(0X8050B938,"T",0X1,3);
	split_sreg_range(0X8050B988,"T",0X1,3);
	split_sreg_range(0X8050B9BC,"T",0X1,3);
	split_sreg_range(0X8050B9EA,"T",0X1,3);
	split_sreg_range(0X8050B9FA,"T",0X1,3);
	split_sreg_range(0X8050BA40,"T",0X1,3);
	split_sreg_range(0X8050BC9C,"T",0X1,3);
	split_sreg_range(0X8050BD02,"T",0X1,3);
	split_sreg_range(0X8050BF9A,"T",0X1,3);
	split_sreg_range(0X8050BFE8,"T",0X1,3);
	split_sreg_range(0X8050C002,"T",0X1,3);
	split_sreg_range(0X8050C0DA,"T",0X1,3);
	split_sreg_range(0X8050C0F0,"T",0X1,3);
	split_sreg_range(0X8050C102,"T",0X1,3);
	split_sreg_range(0X8050C106,"T",0X1,3);
	split_sreg_range(0X8050C110,"T",0X1,3);
	split_sreg_range(0X8050C114,"T",0X1,3);
	split_sreg_range(0X8050C118,"T",0X1,3);
	split_sreg_range(0X8050C128,"T",0X1,3);
	split_sreg_range(0X8050C150,"T",0X1,3);
	split_sreg_range(0X8050C16C,"T",0X1,3);
	split_sreg_range(0X8050C17A,"T",0X1,3);
	split_sreg_range(0X8050C18C,"T",0X1,3);
	split_sreg_range(0X8050C194,"T",0X1,3);
	split_sreg_range(0X8050C1B4,"T",0X1,3);
	split_sreg_range(0X8050C1C8,"T",0X1,3);
	split_sreg_range(0X8050C1CC,"T",0X1,3);
	split_sreg_range(0X8050C1DE,"T",0X1,3);
	split_sreg_range(0X8050C1E8,"T",0X1,3);
	split_sreg_range(0X8050C1EC,"T",0X1,3);
	split_sreg_range(0X8050C21C,"T",0X1,3);
	split_sreg_range(0X8050C21E,"T",0X1,3);
	split_sreg_range(0X8050C22E,"T",0X1,3);
	split_sreg_range(0X8050C256,"T",0X1,3);
	split_sreg_range(0X8050C26C,"T",0X1,3);
	split_sreg_range(0X8050C26E,"T",0X1,3);
	split_sreg_range(0X8050C286,"T",0X1,3);
	split_sreg_range(0X8050C298,"T",0X1,3);
	split_sreg_range(0X8050C2EC,"T",0X1,3);
	split_sreg_range(0X8050C342,"T",0X1,3);
	split_sreg_range(0X8050C352,"T",0X1,3);
	split_sreg_range(0X8050C35E,"T",0X1,3);
	split_sreg_range(0X8050C376,"T",0X1,3);
	split_sreg_range(0X8050C386,"T",0X1,3);
	split_sreg_range(0X8050C396,"T",0X1,3);
	split_sreg_range(0X8050C3A6,"T",0X1,3);
	split_sreg_range(0X8050C3B2,"T",0X1,3);
	split_sreg_range(0X8050C3C0,"T",0X1,3);
	split_sreg_range(0X8050C3CA,"T",0X1,3);
	split_sreg_range(0X8050C3D4,"T",0X1,3);
	split_sreg_range(0X8050C3DE,"T",0X1,3);
	split_sreg_range(0X8050C3E8,"T",0X1,3);
	split_sreg_range(0X8050C3F0,"T",0X1,3);
	split_sreg_range(0X8050C3FA,"T",0X1,3);
	split_sreg_range(0X8050C3FE,"T",0X1,3);
	split_sreg_range(0X8050C476,"T",0X1,3);
	split_sreg_range(0X8050C494,"T",0X1,3);
	split_sreg_range(0X8050C4A4,"T",0X1,3);
	split_sreg_range(0X8050C4B6,"T",0X1,3);
	split_sreg_range(0X8050C4C0,"T",0X1,3);
	split_sreg_range(0X8050C4C2,"T",0X1,3);
	split_sreg_range(0X8050C4D2,"T",0X1,3);
	split_sreg_range(0X8050C4FA,"T",0X1,3);
	split_sreg_range(0X8050C514,"T",0X1,3);
	split_sreg_range(0X8050C518,"T",0X1,3);
	split_sreg_range(0X8050C560,"T",0X1,3);
	split_sreg_range(0X8050C570,"T",0X1,3);
	split_sreg_range(0X8050C5C6,"T",0X1,3);
	split_sreg_range(0X8050C5CE,"T",0X1,3);
	split_sreg_range(0X8050C5E4,"T",0X1,3);
	split_sreg_range(0X8050C5FC,"T",0X1,3);
	split_sreg_range(0X8050C5FE,"T",0X1,3);
	split_sreg_range(0X8050C604,"T",0X1,3);
	split_sreg_range(0X8050C67C,"T",0X1,3);
	split_sreg_range(0X8050C6A4,"T",0X1,3);
	split_sreg_range(0X8050C76C,"T",0X1,3);
	split_sreg_range(0X8050CBDC,"T",0X1,3);
	split_sreg_range(0X8050CBE0,"T",0X1,3);
	split_sreg_range(0X8050CBF6,"T",0X1,3);
	split_sreg_range(0X8050CC76,"T",0X1,3);
	split_sreg_range(0X8050D1C2,"T",0X1,3);
	split_sreg_range(0X8050D234,"T",0X1,3);
	split_sreg_range(0X8050D6F0,"T",0X1,3);
	split_sreg_range(0X8050D790,"T",0X1,3);
	split_sreg_range(0X8050DD1E,"T",0X1,3);
	split_sreg_range(0X8050DD2C,"T",0X1,3);
	split_sreg_range(0X8050DD30,"T",0X1,3);
	split_sreg_range(0X8050DD4A,"T",0X1,3);
	split_sreg_range(0X8050DD70,"T",0X1,3);
	split_sreg_range(0X8050DD96,"T",0X1,3);
	split_sreg_range(0X8050DEE0,"T",0X1,3);
	split_sreg_range(0X8050DF0A,"T",0X1,3);
	split_sreg_range(0X8050DF1E,"T",0X1,3);
	split_sreg_range(0X8050DF24,"T",0X1,3);
	split_sreg_range(0X8050DF28,"T",0X1,3);
	split_sreg_range(0X8050DF3E,"T",0X1,3);
	split_sreg_range(0X8050DF42,"T",0X1,3);
	split_sreg_range(0X8050DF48,"T",0X1,3);
	split_sreg_range(0X8050DF52,"T",0X1,3);
	split_sreg_range(0X8050DF58,"T",0X1,3);
	split_sreg_range(0X8050DF6A,"T",0X1,3);
	split_sreg_range(0X8050DF8A,"T",0X1,3);
	split_sreg_range(0X8050DFA0,"T",0X1,3);
	split_sreg_range(0X8050DFFC,"T",0X1,3);
	split_sreg_range(0X8050E0EC,"T",0X1,3);
	split_sreg_range(0X8050E142,"T",0X1,3);
	split_sreg_range(0X8050E160,"T",0X1,3);
	split_sreg_range(0X8050E17A,"T",0X1,3);
	split_sreg_range(0X8050E194,"T",0X1,3);
	split_sreg_range(0X8050E1BE,"T",0X1,3);
	split_sreg_range(0X8050E1E4,"T",0X1,3);
	split_sreg_range(0X8050E202,"T",0X1,3);
	split_sreg_range(0X8050E224,"T",0X1,3);
	split_sreg_range(0X8050E246,"T",0X1,3);
	split_sreg_range(0X8050E264,"T",0X1,3);
	split_sreg_range(0X8050E286,"T",0X1,3);
	split_sreg_range(0X8050E2A4,"T",0X1,3);
	split_sreg_range(0X8050E2C6,"T",0X1,3);
	split_sreg_range(0X8050E2E4,"T",0X1,3);
	split_sreg_range(0X8050E306,"T",0X1,3);
	split_sreg_range(0X8050E324,"T",0X1,3);
	split_sreg_range(0X8050E346,"T",0X1,3);
	split_sreg_range(0X8050E364,"T",0X1,3);
	split_sreg_range(0X8050E386,"T",0X1,3);
	split_sreg_range(0X8050E3A4,"T",0X1,3);
	split_sreg_range(0X8050E3CA,"T",0X1,3);
	split_sreg_range(0X8050E3F4,"T",0X1,3);
	split_sreg_range(0X8050E52A,"T",0X1,3);
	split_sreg_range(0X8050E620,"T",0X1,3);
	split_sreg_range(0X8050E634,"T",0X1,3);
	split_sreg_range(0X8050E788,"T",0X1,3);
	split_sreg_range(0X8050EBFC,"T",0X1,3);
	split_sreg_range(0X8050EC48,"T",0X1,3);
	split_sreg_range(0X8050EDA8,"T",0X1,3);
	split_sreg_range(0X8050F2E0,"T",0X1,3);
	split_sreg_range(0X8050F330,"T",0X1,3);
	split_sreg_range(0X8050F4D0,"T",0X1,3);
	split_sreg_range(0X8050FB54,"T",0X1,3);
	split_sreg_range(0X8050FB64,"T",0X1,3);
	split_sreg_range(0X8050FBC2,"T",0X1,3);
	split_sreg_range(0X8050FDA8,"T",0X1,3);
	split_sreg_range(0X8050FE28,"T",0X1,3);
	split_sreg_range(0X8050FE8A,"T",0X1,3);
	split_sreg_range(0X8050FE8C,"T",0X1,3);
	split_sreg_range(0X8050FED0,"T",0X1,3);
	split_sreg_range(0X8050FF32,"T",0X1,3);
	split_sreg_range(0X8050FF34,"T",0X1,3);
	split_sreg_range(0X8050FF86,"T",0X1,3);
	split_sreg_range(0X8050FF94,"T",0X1,3);
	split_sreg_range(0X8050FFA6,"T",0X1,3);
	split_sreg_range(0X80510016,"T",0X1,3);
	split_sreg_range(0X805100AA,"T",0X1,3);
	split_sreg_range(0X805100B6,"T",0X1,3);
	split_sreg_range(0X805100BE,"T",0X1,3);
	split_sreg_range(0X805100D2,"T",0X1,3);
	split_sreg_range(0X805100DE,"T",0X1,3);
	split_sreg_range(0X80510108,"T",0X1,3);
	split_sreg_range(0X80510114,"T",0X1,3);
	split_sreg_range(0X8051011A,"T",0X1,3);
	split_sreg_range(0X80510124,"T",0X1,3);
	split_sreg_range(0X80510130,"T",0X1,3);
	split_sreg_range(0X80510144,"T",0X1,3);
	split_sreg_range(0X8051015C,"T",0X1,3);
	split_sreg_range(0X80510174,"T",0X1,3);
	split_sreg_range(0X80510178,"T",0X1,3);
	split_sreg_range(0X8051018C,"T",0X1,3);
	split_sreg_range(0X805101AA,"T",0X1,3);
	split_sreg_range(0X805101C6,"T",0X1,3);
	split_sreg_range(0X805101CE,"T",0X1,3);
	split_sreg_range(0X805101DA,"T",0X1,3);
	split_sreg_range(0X805101EA,"T",0X1,3);
	split_sreg_range(0X805101F2,"T",0X1,3);
	split_sreg_range(0X8051020A,"T",0X1,3);
	split_sreg_range(0X80510222,"T",0X1,3);
	split_sreg_range(0X80510224,"T",0X1,3);
	split_sreg_range(0X8051022C,"T",0X1,3);
	split_sreg_range(0X80510270,"T",0X1,3);
	split_sreg_range(0X8051028C,"T",0X1,3);
	split_sreg_range(0X805102A4,"T",0X1,3);
	split_sreg_range(0X805102A6,"T",0X1,3);
	split_sreg_range(0X805102E6,"T",0X1,3);
	split_sreg_range(0X805102FE,"T",0X1,3);
	split_sreg_range(0X80510300,"T",0X1,3);
	split_sreg_range(0X80510340,"T",0X1,3);
	split_sreg_range(0X80510358,"T",0X1,3);
	split_sreg_range(0X8051035A,"T",0X1,3);
	split_sreg_range(0X8051039A,"T",0X1,3);
	split_sreg_range(0X805103B2,"T",0X1,3);
	split_sreg_range(0X805103B4,"T",0X1,3);
	split_sreg_range(0X805103F4,"T",0X1,3);
	split_sreg_range(0X8051040C,"T",0X1,3);
	split_sreg_range(0X8051041A,"T",0X1,3);
	split_sreg_range(0X8051041C,"T",0X1,3);
	split_sreg_range(0X8051045A,"T",0X1,3);
	split_sreg_range(0X80510472,"T",0X1,3);
	split_sreg_range(0X80510480,"T",0X1,3);
	split_sreg_range(0X80510482,"T",0X1,3);
	split_sreg_range(0X805104BA,"T",0X1,3);
	split_sreg_range(0X805104D2,"T",0X1,3);
	split_sreg_range(0X805104E2,"T",0X1,3);
	split_sreg_range(0X805104E4,"T",0X1,3);
	split_sreg_range(0X805104FE,"T",0X1,3);
	split_sreg_range(0X80510542,"T",0X1,3);
	split_sreg_range(0X805105D6,"T",0X1,3);
	split_sreg_range(0X8051062A,"T",0X1,3);
	split_sreg_range(0X8051068C,"T",0X1,3);
	split_sreg_range(0X805106BE,"T",0X1,3);
	split_sreg_range(0X80510804,"T",0X1,3);
	split_sreg_range(0X805108D8,"T",0X1,3);
	split_sreg_range(0X805109F4,"T",0X1,3);
	split_sreg_range(0X80510A26,"T",0X1,3);
	split_sreg_range(0X80510A6E,"T",0X1,3);
	split_sreg_range(0X80510A7E,"T",0X1,3);
	split_sreg_range(0X80510A8E,"T",0X1,3);
	split_sreg_range(0X80510A9E,"T",0X1,3);
	split_sreg_range(0X80510AAA,"T",0X1,3);
	split_sreg_range(0X80510ABE,"T",0X1,3);
	split_sreg_range(0X80510AC8,"T",0X1,3);
	split_sreg_range(0X80510ACE,"T",0X1,3);
	split_sreg_range(0X80510AFC,"T",0X1,3);
	split_sreg_range(0X80510B3A,"T",0X1,3);
	split_sreg_range(0X80510B42,"T",0X1,3);
	split_sreg_range(0X80510B46,"T",0X1,3);
	split_sreg_range(0X80510B94,"T",0X1,3);
	split_sreg_range(0X80510B98,"T",0X1,3);
	split_sreg_range(0X80510BB0,"T",0X1,3);
	split_sreg_range(0X80510D34,"T",0X1,3);
	split_sreg_range(0X80510D8C,"T",0X1,3);
	split_sreg_range(0X80510D90,"T",0X1,3);
	split_sreg_range(0X80510E78,"T",0X1,3);
	split_sreg_range(0X80510EAE,"T",0X1,3);
	split_sreg_range(0X80510EB2,"T",0X1,3);
	split_sreg_range(0X80510F98,"T",0X1,3);
	split_sreg_range(0X80511068,"T",0X1,3);
	split_sreg_range(0X80511072,"T",0X1,3);
	split_sreg_range(0X805110F8,"T",0X1,3);
	split_sreg_range(0X80511284,"T",0X1,3);
	split_sreg_range(0X80511296,"T",0X1,3);
	split_sreg_range(0X8051129C,"T",0X1,3);
	split_sreg_range(0X805112A8,"T",0X1,3);
	split_sreg_range(0X805112B0,"T",0X1,3);
	split_sreg_range(0X805112D6,"T",0X1,3);
	split_sreg_range(0X805112DE,"T",0X1,3);
	split_sreg_range(0X8051135A,"T",0X1,3);
	split_sreg_range(0X805113AC,"T",0X1,3);
	split_sreg_range(0X805113B0,"T",0X1,3);
	split_sreg_range(0X805113BC,"T",0X1,3);
	split_sreg_range(0X80511434,"T",0X1,3);
	split_sreg_range(0X80511438,"T",0X1,3);
	split_sreg_range(0X80511450,"T",0X1,3);
	split_sreg_range(0X80511460,"T",0X1,3);
	split_sreg_range(0X80511470,"T",0X1,3);
	split_sreg_range(0X8051147E,"T",0X1,3);
	split_sreg_range(0X805125C0,"T",0X1,3);
	split_sreg_range(0X805125F0,"T",0X1,3);
	split_sreg_range(0X80512608,"T",0X1,3);
	split_sreg_range(0X80512622,"T",0X1,3);
	split_sreg_range(0X8051263A,"T",0X1,3);
	split_sreg_range(0X8051264A,"T",0X1,3);
	split_sreg_range(0X80512662,"T",0X1,3);
	split_sreg_range(0X80512672,"T",0X1,3);
	split_sreg_range(0X8051268A,"T",0X1,3);
	split_sreg_range(0X805126CA,"T",0X1,3);
	split_sreg_range(0X805127A6,"T",0X1,3);
	split_sreg_range(0X805127E8,"T",0X1,3);
	split_sreg_range(0X805128C2,"T",0X1,3);
	split_sreg_range(0X805128CE,"T",0X1,3);
	split_sreg_range(0X805128F6,"T",0X1,3);
	split_sreg_range(0X80512900,"T",0X1,3);
	split_sreg_range(0X80512928,"T",0X1,3);
	split_sreg_range(0X80512932,"T",0X1,3);
	split_sreg_range(0X80512952,"T",0X1,3);
	split_sreg_range(0X8051295C,"T",0X1,3);
	split_sreg_range(0X8051297C,"T",0X1,3);
	split_sreg_range(0X8051297E,"T",0X1,3);
	split_sreg_range(0X80512988,"T",0X1,3);
	split_sreg_range(0X805129AE,"T",0X1,3);
	split_sreg_range(0X805129B0,"T",0X1,3);
	split_sreg_range(0X805129BA,"T",0X1,3);
	split_sreg_range(0X805129DE,"T",0X1,3);
	split_sreg_range(0X80512AB0,"T",0X1,3);
	split_sreg_range(0X80512AFC,"T",0X1,3);
	split_sreg_range(0X80512B22,"T",0X1,3);
	split_sreg_range(0X80512B58,"T",0X1,3);
	split_sreg_range(0X80512B7E,"T",0X1,3);
	split_sreg_range(0X80512BB8,"T",0X1,3);
	split_sreg_range(0X80512BE6,"T",0X1,3);
	split_sreg_range(0X80512C20,"T",0X1,3);
	split_sreg_range(0X80512C4E,"T",0X1,3);
	split_sreg_range(0X80512CA0,"T",0X1,3);
	split_sreg_range(0X80512CDC,"T",0X1,3);
	split_sreg_range(0X80512D2C,"T",0X1,3);
	split_sreg_range(0X80512D66,"T",0X1,3);
	split_sreg_range(0X80512D6C,"T",0X1,3);
	split_sreg_range(0X80512D74,"T",0X1,3);
	split_sreg_range(0X80512D84,"T",0X1,3);
	split_sreg_range(0X80512D9E,"T",0X1,3);
	split_sreg_range(0X80512DAE,"T",0X1,3);
	split_sreg_range(0X80512DC8,"T",0X1,3);
	split_sreg_range(0X80512DD6,"T",0X1,3);
	split_sreg_range(0X80512DF0,"T",0X1,3);
	split_sreg_range(0X80512DFE,"T",0X1,3);
	split_sreg_range(0X80512E18,"T",0X1,3);
	split_sreg_range(0X80512E24,"T",0X1,3);
	split_sreg_range(0X80512E4E,"T",0X1,3);
	split_sreg_range(0X80512E5A,"T",0X1,3);
	split_sreg_range(0X80512E84,"T",0X1,3);
	split_sreg_range(0X80512E90,"T",0X1,3);
	split_sreg_range(0X80512EB0,"T",0X1,3);
	split_sreg_range(0X80512ECC,"T",0X1,3);
	split_sreg_range(0X80512ED8,"T",0X1,3);
	split_sreg_range(0X80512EF8,"T",0X1,3);
	split_sreg_range(0X80512F14,"T",0X1,3);
	split_sreg_range(0X80512F18,"T",0X1,3);
	split_sreg_range(0X80512F24,"T",0X1,3);
	split_sreg_range(0X80512F50,"T",0X1,3);
	split_sreg_range(0X80512F54,"T",0X1,3);
	split_sreg_range(0X80512F60,"T",0X1,3);
	split_sreg_range(0X80512F8A,"T",0X1,3);
	split_sreg_range(0X80513164,"T",0X1,3);
	split_sreg_range(0X805131B6,"T",0X1,3);
	split_sreg_range(0X80513218,"T",0X1,3);
	split_sreg_range(0X80513228,"T",0X1,3);
	split_sreg_range(0X805132CC,"T",0X1,3);
	split_sreg_range(0X8051331C,"T",0X1,3);
	split_sreg_range(0X80513368,"T",0X1,3);
	split_sreg_range(0X8051340A,"T",0X1,3);
	split_sreg_range(0X80513418,"T",0X1,3);
	split_sreg_range(0X805134EE,"T",0X1,3);
	split_sreg_range(0X80513500,"T",0X1,3);
	split_sreg_range(0X8051352A,"T",0X1,3);
	split_sreg_range(0X80513538,"T",0X1,3);
	split_sreg_range(0X8051353E,"T",0X1,3);
	split_sreg_range(0X80513562,"T",0X1,3);
	split_sreg_range(0X8051356C,"T",0X1,3);
	split_sreg_range(0X805135C0,"T",0X1,3);
	split_sreg_range(0X805135FE,"T",0X1,3);
	split_sreg_range(0X80513640,"T",0X1,3);
	split_sreg_range(0X80513650,"T",0X1,3);
	split_sreg_range(0X8051365C,"T",0X1,3);
	split_sreg_range(0X8051365E,"T",0X1,3);
	split_sreg_range(0X80513668,"T",0X1,3);
	split_sreg_range(0X80513674,"T",0X1,3);
	split_sreg_range(0X805136C8,"T",0X1,3);
	split_sreg_range(0X80513706,"T",0X1,3);
	split_sreg_range(0X80513736,"T",0X1,3);
	split_sreg_range(0X805137AC,"T",0X1,3);
	split_sreg_range(0X805137D8,"T",0X1,3);
	split_sreg_range(0X805137E8,"T",0X1,3);
	split_sreg_range(0X805137EE,"T",0X1,3);
	split_sreg_range(0X8051380C,"T",0X1,3);
	split_sreg_range(0X80513850,"T",0X1,3);
	split_sreg_range(0X80513880,"T",0X1,3);
	split_sreg_range(0X8051388E,"T",0X1,3);
	split_sreg_range(0X80513896,"T",0X1,3);
	split_sreg_range(0X805138AC,"T",0X1,3);
	split_sreg_range(0X805138BA,"T",0X1,3);
	split_sreg_range(0X805138BC,"T",0X1,3);
	split_sreg_range(0X805138D6,"T",0X1,3);
	split_sreg_range(0X80513918,"T",0X1,3);
	split_sreg_range(0X80513942,"T",0X1,3);
	split_sreg_range(0X80513950,"T",0X1,3);
	split_sreg_range(0X80513958,"T",0X1,3);
	split_sreg_range(0X8051396C,"T",0X1,3);
	split_sreg_range(0X8051397A,"T",0X1,3);
	split_sreg_range(0X805139A2,"T",0X1,3);
	split_sreg_range(0X805139BA,"T",0X1,3);
	split_sreg_range(0X805139C6,"T",0X1,3);
	split_sreg_range(0X805139C8,"T",0X1,3);
	split_sreg_range(0X805139D0,"T",0X1,3);
	split_sreg_range(0X805139DC,"T",0X1,3);
	split_sreg_range(0X80513A30,"T",0X1,3);
	split_sreg_range(0X80513A66,"T",0X1,3);
	split_sreg_range(0X80513A92,"T",0X1,3);
	split_sreg_range(0X80513ACC,"T",0X1,3);
	split_sreg_range(0X80513AF8,"T",0X1,3);
	split_sreg_range(0X80513B06,"T",0X1,3);
	split_sreg_range(0X80513B0C,"T",0X1,3);
	split_sreg_range(0X80513B26,"T",0X1,3);
	split_sreg_range(0X80513B68,"T",0X1,3);
	split_sreg_range(0X80513B94,"T",0X1,3);
	split_sreg_range(0X80513BA2,"T",0X1,3);
	split_sreg_range(0X80513BAA,"T",0X1,3);
	split_sreg_range(0X80513BC0,"T",0X1,3);
	split_sreg_range(0X80513BD0,"T",0X1,3);
	split_sreg_range(0X80513BD6,"T",0X1,3);
	split_sreg_range(0X80513BF4,"T",0X1,3);
	split_sreg_range(0X80513C34,"T",0X1,3);
	split_sreg_range(0X80513C5E,"T",0X1,3);
	split_sreg_range(0X80513C6C,"T",0X1,3);
	split_sreg_range(0X80513C74,"T",0X1,3);
	split_sreg_range(0X80513C88,"T",0X1,3);
	split_sreg_range(0X80513C96,"T",0X1,3);
	split_sreg_range(0X80513CBE,"T",0X1,3);
	split_sreg_range(0X80513CD6,"T",0X1,3);
	split_sreg_range(0X80513CE2,"T",0X1,3);
	split_sreg_range(0X80513CE4,"T",0X1,3);
	split_sreg_range(0X80513CEC,"T",0X1,3);
	split_sreg_range(0X80513CF8,"T",0X1,3);
	split_sreg_range(0X80513D90,"T",0X1,3);
	split_sreg_range(0X80513DFC,"T",0X1,3);
	split_sreg_range(0X80513E68,"T",0X1,3);
	split_sreg_range(0X80513ED4,"T",0X1,3);
	split_sreg_range(0X80513F3E,"T",0X1,3);
	split_sreg_range(0X80513F6E,"T",0X1,3);
	split_sreg_range(0X80513F7E,"T",0X1,3);
	split_sreg_range(0X80513F84,"T",0X1,3);
	split_sreg_range(0X80513FA2,"T",0X1,3);
	split_sreg_range(0X80513FE2,"T",0X1,3);
	split_sreg_range(0X8051400E,"T",0X1,3);
	split_sreg_range(0X8051401C,"T",0X1,3);
	split_sreg_range(0X80514024,"T",0X1,3);
	split_sreg_range(0X8051403A,"T",0X1,3);
	split_sreg_range(0X8051404A,"T",0X1,3);
	split_sreg_range(0X80514050,"T",0X1,3);
	split_sreg_range(0X8051406E,"T",0X1,3);
	split_sreg_range(0X805140AE,"T",0X1,3);
	split_sreg_range(0X805140D8,"T",0X1,3);
	split_sreg_range(0X805140E6,"T",0X1,3);
	split_sreg_range(0X805140EE,"T",0X1,3);
	split_sreg_range(0X80514102,"T",0X1,3);
	split_sreg_range(0X80514110,"T",0X1,3);
	split_sreg_range(0X80514120,"T",0X1,3);
	split_sreg_range(0X80514126,"T",0X1,3);
	split_sreg_range(0X80514144,"T",0X1,3);
	split_sreg_range(0X80514184,"T",0X1,3);
	split_sreg_range(0X805141AE,"T",0X1,3);
	split_sreg_range(0X805141BC,"T",0X1,3);
	split_sreg_range(0X805141C4,"T",0X1,3);
	split_sreg_range(0X805141D8,"T",0X1,3);
	split_sreg_range(0X805141E6,"T",0X1,3);
	split_sreg_range(0X805141F6,"T",0X1,3);
	split_sreg_range(0X805141FC,"T",0X1,3);
	split_sreg_range(0X8051421A,"T",0X1,3);
	split_sreg_range(0X8051425A,"T",0X1,3);
	split_sreg_range(0X80514284,"T",0X1,3);
	split_sreg_range(0X80514292,"T",0X1,3);
	split_sreg_range(0X8051429A,"T",0X1,3);
	split_sreg_range(0X805142AE,"T",0X1,3);
	split_sreg_range(0X805142BC,"T",0X1,3);
	split_sreg_range(0X805142CC,"T",0X1,3);
	split_sreg_range(0X805142D2,"T",0X1,3);
	split_sreg_range(0X805142F0,"T",0X1,3);
	split_sreg_range(0X80514330,"T",0X1,3);
	split_sreg_range(0X8051435A,"T",0X1,3);
	split_sreg_range(0X80514368,"T",0X1,3);
	split_sreg_range(0X80514370,"T",0X1,3);
	split_sreg_range(0X80514384,"T",0X1,3);
	split_sreg_range(0X80514392,"T",0X1,3);
	split_sreg_range(0X8051439A,"T",0X1,3);
	split_sreg_range(0X80514A30,"T",0X1,3);
	split_sreg_range(0X80514A5A,"T",0X1,3);
	split_sreg_range(0X80514A70,"T",0X1,3);
	split_sreg_range(0X80514A84,"T",0X1,3);
	split_sreg_range(0X80514A9A,"T",0X1,3);
	split_sreg_range(0X80514AA4,"T",0X1,3);
	split_sreg_range(0X80514AC2,"T",0X1,3);
	split_sreg_range(0X80514ACC,"T",0X1,3);
	split_sreg_range(0X80514AEA,"T",0X1,3);
	split_sreg_range(0X80514B2A,"T",0X1,3);
	split_sreg_range(0X80514BFE,"T",0X1,3);
	split_sreg_range(0X80514C40,"T",0X1,3);
	split_sreg_range(0X80514D12,"T",0X1,3);
	split_sreg_range(0X80514D14,"T",0X1,3);
	split_sreg_range(0X80514D1E,"T",0X1,3);
	split_sreg_range(0X80514D40,"T",0X1,3);
	split_sreg_range(0X80514D42,"T",0X1,3);
	split_sreg_range(0X80514D4C,"T",0X1,3);
	split_sreg_range(0X80514D6C,"T",0X1,3);
	split_sreg_range(0X80514E20,"T",0X1,3);
	split_sreg_range(0X80514E5C,"T",0X1,3);
	split_sreg_range(0X80514E78,"T",0X1,3);
	split_sreg_range(0X80514E9E,"T",0X1,3);
	split_sreg_range(0X80514EBA,"T",0X1,3);
	split_sreg_range(0X80514EE4,"T",0X1,3);
	split_sreg_range(0X80514F08,"T",0X1,3);
	split_sreg_range(0X80514F32,"T",0X1,3);
	split_sreg_range(0X80514F56,"T",0X1,3);
	split_sreg_range(0X80514FA4,"T",0X1,3);
	split_sreg_range(0X80514FD2,"T",0X1,3);
	split_sreg_range(0X8051501E,"T",0X1,3);
	split_sreg_range(0X8051504C,"T",0X1,3);
	split_sreg_range(0X80515050,"T",0X1,3);
	split_sreg_range(0X8051505C,"T",0X1,3);
	split_sreg_range(0X80515080,"T",0X1,3);
	split_sreg_range(0X80515084,"T",0X1,3);
	split_sreg_range(0X80515090,"T",0X1,3);
	split_sreg_range(0X805150B2,"T",0X1,3);
	split_sreg_range(0X80515224,"T",0X1,3);
	split_sreg_range(0X8051522E,"T",0X1,3);
	split_sreg_range(0X80515238,"T",0X1,3);
	split_sreg_range(0X8051524C,"T",0X1,3);
	split_sreg_range(0X80515274,"T",0X1,3);
	split_sreg_range(0X80515282,"T",0X1,3);
	split_sreg_range(0X805152EA,"T",0X1,3);
	split_sreg_range(0X80515310,"T",0X1,3);
	split_sreg_range(0X80515336,"T",0X1,3);
	split_sreg_range(0X8051535C,"T",0X1,3);
	split_sreg_range(0X80515396,"T",0X1,3);
	split_sreg_range(0X8051539E,"T",0X1,3);
	split_sreg_range(0X805153BA,"T",0X1,3);
	split_sreg_range(0X805153BC,"T",0X1,3);
	split_sreg_range(0X80515400,"T",0X1,3);
	split_sreg_range(0X8051540A,"T",0X1,3);
	split_sreg_range(0X80515414,"T",0X1,3);
	split_sreg_range(0X80515438,"T",0X1,3);
	split_sreg_range(0X80515444,"T",0X1,3);
	split_sreg_range(0X80515450,"T",0X1,3);
	split_sreg_range(0X8051545C,"T",0X1,3);
	split_sreg_range(0X80515460,"T",0X1,3);
	split_sreg_range(0X80515486,"T",0X1,3);
	split_sreg_range(0X805154AC,"T",0,3);
	split_sreg_range(0X80515540,"T",0,3);
	split_sreg_range(0X80515578,"T",0,3);
	split_sreg_range(0X805155B0,"T",0,3);
	split_sreg_range(0X805155C8,"T",0X1,3);
	split_sreg_range(0X805155E0,"T",0X1,3);
	split_sreg_range(0X805155E8,"T",0X1,3);
	split_sreg_range(0X80515606,"T",0X1,3);
	split_sreg_range(0X80515774,"T",0X1,3);
	split_sreg_range(0X80515776,"T",0X1,3);
	split_sreg_range(0X8051578E,"T",0X1,3);
	split_sreg_range(0X8051579E,"T",0X1,3);
	split_sreg_range(0X805157E4,"T",0X1,3);
	split_sreg_range(0X805157F8,"T",0X1,3);
	split_sreg_range(0X8051580C,"T",0X1,3);
	split_sreg_range(0X8051580E,"T",0X1,3);
	split_sreg_range(0X80515820,"T",0X1,3);
	split_sreg_range(0X80515830,"T",0X1,3);
	split_sreg_range(0X80515832,"T",0X1,3);
	split_sreg_range(0X80515842,"T",0X1,3);
	split_sreg_range(0X80515852,"T",0X1,3);
	split_sreg_range(0X80515880,"T",0X1,3);
	split_sreg_range(0X8051588E,"T",0X1,3);
	split_sreg_range(0X80515898,"T",0X1,3);
	split_sreg_range(0X805158A6,"T",0X1,3);
	split_sreg_range(0X805158C6,"T",0X1,3);
	split_sreg_range(0X80515904,"T",0X1,3);
	split_sreg_range(0X80515930,"T",0X1,3);
	split_sreg_range(0X805159E8,"T",0X1,3);
	split_sreg_range(0X805159EC,"T",0X1,3);
	split_sreg_range(0X80515A08,"T",0X1,3);
	split_sreg_range(0X80515A20,"T",0X1,3);
	split_sreg_range(0X80515A3C,"T",0X1,3);
	split_sreg_range(0X80515A5C,"T",0X1,3);
	split_sreg_range(0X80515A70,"T",0X1,3);
	split_sreg_range(0X80515B7E,"T",0X1,3);
	split_sreg_range(0X80515B8E,"T",0X1,3);
	split_sreg_range(0X80515BA4,"T",0X1,3);
	split_sreg_range(0X80515BAC,"T",0X1,3);
	split_sreg_range(0X80515BB8,"T",0X1,3);
	split_sreg_range(0X80515BD2,"T",0X1,3);
	split_sreg_range(0X80515C70,"T",0X1,3);
	split_sreg_range(0X80515CA2,"T",0X1,3);
	split_sreg_range(0X80515CF8,"T",0X1,3);
	split_sreg_range(0X80515D14,"T",0X1,3);
	split_sreg_range(0X80515D2C,"T",0X1,3);
	split_sreg_range(0X80515D2E,"T",0X1,3);
	split_sreg_range(0X80515D32,"T",0X1,3);
	split_sreg_range(0X80515D74,"T",0X1,3);
	split_sreg_range(0X80515D84,"T",0X1,3);
	split_sreg_range(0X80515D9A,"T",0X1,3);
	split_sreg_range(0X80515D9C,"T",0X1,3);
	split_sreg_range(0X80515DA4,"T",0X1,3);
	split_sreg_range(0X80515DAC,"T",0X1,3);
	split_sreg_range(0X80515DDA,"T",0X1,3);
	split_sreg_range(0X80515DE2,"T",0X1,3);
	split_sreg_range(0X80515DE6,"T",0X1,3);
	split_sreg_range(0X80515DF8,"T",0X1,3);
	split_sreg_range(0X80515E28,"T",0X1,3);
	split_sreg_range(0X80515E32,"T",0X1,3);
	split_sreg_range(0X80515E44,"T",0X1,3);
	split_sreg_range(0X80515E6A,"T",0X1,3);
	split_sreg_range(0X80515E7E,"T",0X1,3);
	split_sreg_range(0X80515E84,"T",0X1,3);
	split_sreg_range(0X80515EAA,"T",0X1,3);
	split_sreg_range(0X80515EBE,"T",0X1,3);
	split_sreg_range(0X80515EC4,"T",0X1,3);
	split_sreg_range(0X80515EEA,"T",0X1,3);
	split_sreg_range(0X80515F04,"T",0X1,3);
	split_sreg_range(0X80515F06,"T",0X1,3);
	split_sreg_range(0X80515F2C,"T",0X1,3);
	split_sreg_range(0X80515F3E,"T",0X1,3);
	split_sreg_range(0X80515F48,"T",0X1,3);
	split_sreg_range(0X80515F50,"T",0X1,3);
	split_sreg_range(0X80515F5A,"T",0X1,3);
	split_sreg_range(0X80515FC4,"T",0X1,3);
	split_sreg_range(0X80515FD8,"T",0X1,3);
	split_sreg_range(0X80515FF8,"T",0X1,3);
	split_sreg_range(0X8051600E,"T",0X1,3);
	split_sreg_range(0X80516016,"T",0X1,3);
	split_sreg_range(0X80516042,"T",0X1,3);
	split_sreg_range(0X8051604C,"T",0X1,3);
	split_sreg_range(0X805160BC,"T",0X1,3);
	split_sreg_range(0X805160E2,"T",0X1,3);
	split_sreg_range(0X80516100,"T",0X1,3);
	split_sreg_range(0X80516108,"T",0X1,3);
	split_sreg_range(0X8051611C,"T",0X1,3);
	split_sreg_range(0X8051612A,"T",0X1,3);
	split_sreg_range(0X80516148,"T",0X1,3);
	split_sreg_range(0X80516156,"T",0X1,3);
	split_sreg_range(0X8051616A,"T",0X1,3);
	split_sreg_range(0X80516184,"T",0X1,3);
	split_sreg_range(0X8051619A,"T",0X1,3);
	split_sreg_range(0X805161A8,"T",0X1,3);
	split_sreg_range(0X805161B4,"T",0X1,3);
	split_sreg_range(0X805161C0,"T",0X1,3);
	split_sreg_range(0X805161DE,"T",0X1,3);
	split_sreg_range(0X805161E4,"T",0X1,3);
	split_sreg_range(0X805161F8,"T",0X1,3);
	split_sreg_range(0X80516206,"T",0X1,3);
	split_sreg_range(0X8051620C,"T",0X1,3);
	split_sreg_range(0X8051620E,"T",0X1,3);
	split_sreg_range(0X8051621A,"T",0X1,3);
	split_sreg_range(0X8051621C,"T",0X1,3);
	split_sreg_range(0X80516226,"T",0X1,3);
	split_sreg_range(0X80516240,"T",0X1,3);
	split_sreg_range(0X80516246,"T",0X1,3);
	split_sreg_range(0X80516262,"T",0X1,3);
	split_sreg_range(0X8051628C,"T",0X1,3);
	split_sreg_range(0X805162F0,"T",0X1,3);
	split_sreg_range(0X80516348,"T",0X1,3);
	split_sreg_range(0X805163B4,"T",0X1,3);
	split_sreg_range(0X805163BE,"T",0X1,3);
	split_sreg_range(0X805163F8,"T",0X1,3);
	split_sreg_range(0X8051640C,"T",0X1,3);
	split_sreg_range(0X805164F0,"T",0X1,3);
	split_sreg_range(0X805164FC,"T",0X1,3);
	split_sreg_range(0X80516562,"T",0X1,3);
	split_sreg_range(0X80516574,"T",0X1,3);
	split_sreg_range(0X80516580,"T",0X1,3);
	split_sreg_range(0X805165EA,"T",0X1,3);
	split_sreg_range(0X80516730,"T",0X1,3);
	split_sreg_range(0X80516798,"T",0X1,3);
	split_sreg_range(0X805167A2,"T",0X1,3);
	split_sreg_range(0X805167AA,"T",0X1,3);
	split_sreg_range(0X805167B8,"T",0X1,3);
	split_sreg_range(0X805167CC,"T",0X1,3);
	split_sreg_range(0X805167FC,"T",0X1,3);
	split_sreg_range(0X8051680E,"T",0X1,3);
	split_sreg_range(0X8051683E,"T",0X1,3);
	split_sreg_range(0X80516844,"T",0X1,3);
	split_sreg_range(0X8051684E,"T",0X1,3);
	split_sreg_range(0X8051687C,"T",0X1,3);
	split_sreg_range(0X8051689C,"T",0X1,3);
	split_sreg_range(0X805168B8,"T",0X1,3);
	split_sreg_range(0X805168CC,"T",0X1,3);
	split_sreg_range(0X805168DA,"T",0X1,3);
	split_sreg_range(0X805168FE,"T",0X1,3);
	split_sreg_range(0X8051690E,"T",0X1,3);
	split_sreg_range(0X80516912,"T",0X1,3);
	split_sreg_range(0X8051691C,"T",0X1,3);
	split_sreg_range(0X8051691E,"T",0X1,3);
	split_sreg_range(0X80516924,"T",0X1,3);
	split_sreg_range(0X8051692E,"T",0X1,3);
	split_sreg_range(0X80516960,"T",0X1,3);
	split_sreg_range(0X80516974,"T",0X1,3);
	split_sreg_range(0X80516E4C,"T",0X1,3);
	split_sreg_range(0X80516E68,"T",0X1,3);
	split_sreg_range(0X80516E7E,"T",0X1,3);
	split_sreg_range(0X80516E90,"T",0X1,3);
	split_sreg_range(0X80516F10,"T",0X1,3);
	split_sreg_range(0X80516F18,"T",0X1,3);
	split_sreg_range(0X80516F32,"T",0X1,3);
	split_sreg_range(0X80516F88,"T",0X1,3);
	split_sreg_range(0X80516FC0,"T",0X1,3);
	split_sreg_range(0X80516FC6,"T",0X1,3);
	split_sreg_range(0X80516FDC,"T",0X1,3);
	split_sreg_range(0X80516FE8,"T",0X1,3);
	split_sreg_range(0X805171B4,"T",0X1,3);
	split_sreg_range(0X805171C6,"T",0X1,3);
	split_sreg_range(0X805171D0,"T",0X1,3);
	split_sreg_range(0X805171DC,"T",0X1,3);
	split_sreg_range(0X805171F6,"T",0X1,3);
	split_sreg_range(0X805171FC,"T",0X1,3);
	split_sreg_range(0X8051720E,"T",0X1,3);
	split_sreg_range(0X80517212,"T",0X1,3);
	split_sreg_range(0X8051721E,"T",0X1,3);
	split_sreg_range(0X8051724C,"T",0X1,3);
	split_sreg_range(0X8051726C,"T",0X1,3);
	split_sreg_range(0X805172A0,"T",0X1,3);
	split_sreg_range(0X805172BA,"T",0X1,3);
	split_sreg_range(0X80517318,"T",0X1,3);
	split_sreg_range(0X80517322,"T",0X1,3);
	split_sreg_range(0X8051732C,"T",0X1,3);
	split_sreg_range(0X80517336,"T",0X1,3);
	split_sreg_range(0X80517340,"T",0X1,3);
	split_sreg_range(0X80517354,"T",0X1,3);
	split_sreg_range(0X80517360,"T",0X1,3);
	split_sreg_range(0X8051738A,"T",0X1,3);
	split_sreg_range(0X80517394,"T",0X1,3);
	split_sreg_range(0X80517396,"T",0X1,3);
	split_sreg_range(0X805173CC,"T",0X1,3);
	split_sreg_range(0X805173DC,"T",0X1,3);
	split_sreg_range(0X805173E4,"T",0X1,3);
	split_sreg_range(0X805173EA,"T",0X1,3);
	split_sreg_range(0X80517430,"T",0X1,3);
	split_sreg_range(0X80517436,"T",0X1,3);
	split_sreg_range(0X80517442,"T",0X1,3);
	split_sreg_range(0X80517448,"T",0X1,3);
	split_sreg_range(0X80517458,"T",0X1,3);
	split_sreg_range(0X8051745E,"T",0X1,3);
	split_sreg_range(0X8051746A,"T",0X1,3);
	split_sreg_range(0X80517470,"T",0X1,3);
	split_sreg_range(0X80517476,"T",0X1,3);
	split_sreg_range(0X80517480,"T",0X1,3);
	split_sreg_range(0X80517490,"T",0X1,3);
	split_sreg_range(0X805174A4,"T",0X1,3);
	split_sreg_range(0X805174BE,"T",0X1,3);
	split_sreg_range(0X805174C4,"T",0X1,3);
	split_sreg_range(0X805174D2,"T",0X1,3);
	split_sreg_range(0X805174DC,"T",0X1,3);
	split_sreg_range(0X805174EC,"T",0X1,3);
	split_sreg_range(0X805174F2,"T",0X1,3);
	split_sreg_range(0X8051751E,"T",0X1,3);
	split_sreg_range(0X80517522,"T",0X1,3);
	split_sreg_range(0X8051752C,"T",0X1,3);
	split_sreg_range(0X80517538,"T",0X1,3);
	split_sreg_range(0X80517540,"T",0X1,3);
	split_sreg_range(0X80517548,"T",0X1,3);
	split_sreg_range(0X80517560,"T",0X1,3);
	split_sreg_range(0X805175C8,"T",0X1,3);
	split_sreg_range(0X805175DE,"T",0X1,3);
	split_sreg_range(0X805175E4,"T",0X1,3);
	split_sreg_range(0X8051760E,"T",0X1,3);
	split_sreg_range(0X80517626,"T",0X1,3);
	split_sreg_range(0X80517628,"T",0X1,3);
	split_sreg_range(0X80517638,"T",0X1,3);
	split_sreg_range(0X8051764C,"T",0X1,3);
	split_sreg_range(0X80517666,"T",0X1,3);
	split_sreg_range(0X8051766C,"T",0X1,3);
	split_sreg_range(0X8051767A,"T",0X1,3);
	split_sreg_range(0X80517684,"T",0X1,3);
	split_sreg_range(0X80517698,"T",0X1,3);
	split_sreg_range(0X805176A2,"T",0X1,3);
	split_sreg_range(0X805176B0,"T",0X1,3);
	split_sreg_range(0X805176FA,"T",0X1,3);
	split_sreg_range(0X8051770A,"T",0X1,3);
	split_sreg_range(0X80517854,"T",0,3);
	split_sreg_range(0X80517860,"T",0,3);
	split_sreg_range(0X80517880,"T",0,3);
	split_sreg_range(0X805178C0,"T",0,3);
	split_sreg_range(0X80517930,"T",0,3);
	split_sreg_range(0X80517964,"T",0,3);
	split_sreg_range(0X80517968,"T",0,3);
	split_sreg_range(0X8051797C,"T",0,3);
	split_sreg_range(0X8051798C,"T",0,3);
	split_sreg_range(0X805179CC,"T",0,3);
	split_sreg_range(0X805179E8,"T",0,3);
	split_sreg_range(0X805179F0,"T",0,3);
	split_sreg_range(0X80517A04,"T",0,3);
	split_sreg_range(0X80517A40,"T",0,3);
	split_sreg_range(0X80517A44,"T",0,3);
	split_sreg_range(0X80517A60,"T",0,3);
	split_sreg_range(0X80517A6C,"T",0,3);
	split_sreg_range(0X80517A7C,"T",0,3);
	split_sreg_range(0X80517A90,"T",0,3);
	split_sreg_range(0X80517ACC,"T",0,3);
	split_sreg_range(0X80517AD0,"T",0,3);
	split_sreg_range(0X80517AEC,"T",0,3);
	split_sreg_range(0X80517AF8,"T",0,3);
	split_sreg_range(0X80517B08,"T",0,3);
	split_sreg_range(0X80517B1C,"T",0,3);
	split_sreg_range(0X80517B58,"T",0,3);
	split_sreg_range(0X80517B5C,"T",0,3);
	split_sreg_range(0X80517B78,"T",0,3);
	split_sreg_range(0X80517B84,"T",0,3);
	split_sreg_range(0X80517B94,"T",0,3);
	split_sreg_range(0X80517BB4,"T",0,3);
	split_sreg_range(0X80517BC4,"T",0,3);
	split_sreg_range(0X80517BD0,"T",0,3);
	split_sreg_range(0X80517BF0,"T",0,3);
	split_sreg_range(0X80517C00,"T",0,3);
	split_sreg_range(0X80517C0C,"T",0,3);
	split_sreg_range(0X80517C14,"T",0,3);
	split_sreg_range(0X80517C4C,"T",0,3);
	split_sreg_range(0X80517C54,"T",0,3);
	split_sreg_range(0X80517C5C,"T",0,3);
	split_sreg_range(0X80517C74,"T",0,3);
	split_sreg_range(0X80517C7C,"T",0,3);
	split_sreg_range(0X80517C84,"T",0,3);
	split_sreg_range(0X80517CA4,"T",0,3);
	split_sreg_range(0X80517CCC,"T",0,3);
	split_sreg_range(0X80517CD8,"T",0,3);
	split_sreg_range(0X80517D10,"T",0,3);
	split_sreg_range(0X80517D18,"T",0,3);
	split_sreg_range(0X80517D50,"T",0,3);
	split_sreg_range(0X80517D5C,"T",0,3);
	split_sreg_range(0X80517D94,"T",0,3);
	split_sreg_range(0X80517DA0,"T",0,3);
	split_sreg_range(0X80517DD8,"T",0,3);
	split_sreg_range(0X80517DE8,"T",0,3);
	split_sreg_range(0X80517E54,"T",0,3);
	split_sreg_range(0X80517EB8,"T",0X1,3);
	split_sreg_range(0X80517EBE,"T",0X1,3);
	split_sreg_range(0X80517EC8,"T",0X1,3);
	split_sreg_range(0X80517ED0,"T",0X1,3);
	split_sreg_range(0X80517F60,"T",0X1,3);
	split_sreg_range(0X80517F70,"T",0X1,3);
	split_sreg_range(0X80517F8C,"T",0X1,3);
	split_sreg_range(0X80517FA8,"T",0X1,3);
	split_sreg_range(0X805180B0,"T",0X1,3);
	split_sreg_range(0X805180BC,"T",0X1,3);
	split_sreg_range(0X805180D6,"T",0X1,3);
	split_sreg_range(0X8051810E,"T",0X1,3);
	split_sreg_range(0X80518118,"T",0X1,3);
	split_sreg_range(0X80518128,"T",0X1,3);
	split_sreg_range(0X8051812E,"T",0X1,3);
	split_sreg_range(0X80518156,"T",0X1,3);
	split_sreg_range(0X80518166,"T",0X1,3);
	split_sreg_range(0X8051822C,"T",0X1,3);
	split_sreg_range(0X8051823A,"T",0X1,3);
	split_sreg_range(0X80518254,"T",0X1,3);
	split_sreg_range(0X8051825E,"T",0X1,3);
	split_sreg_range(0X805182A4,"T",0X1,3);
	split_sreg_range(0X805182B2,"T",0X1,3);
	split_sreg_range(0X805182CC,"T",0X1,3);
	split_sreg_range(0X805182D6,"T",0X1,3);
	split_sreg_range(0X805182E0,"T",0X1,3);
	split_sreg_range(0X805182EA,"T",0X1,3);
	split_sreg_range(0X80518302,"T",0X1,3);
	split_sreg_range(0X8051830C,"T",0X1,3);
	split_sreg_range(0X80518318,"T",0X1,3);
	split_sreg_range(0X80518322,"T",0X1,3);
	split_sreg_range(0X8051833A,"T",0X1,3);
	split_sreg_range(0X80518344,"T",0X1,3);
	split_sreg_range(0X8051835A,"T",0X1,3);
	split_sreg_range(0X80518372,"T",0X1,3);
	split_sreg_range(0X8051837C,"T",0X1,3);
	split_sreg_range(0X805183F0,"T",0X1,3);
	split_sreg_range(0X8051842C,"T",0X1,3);
	split_sreg_range(0X8051859A,"T",0X1,3);
	split_sreg_range(0X8051859C,"T",0X1,3);
	split_sreg_range(0X805185A2,"T",0X1,3);
	split_sreg_range(0X805185A6,"T",0X1,3);
	split_sreg_range(0X805185B8,"T",0X1,3);
	split_sreg_range(0X80518630,"T",0X1,3);
	split_sreg_range(0X8051863A,"T",0X1,3);
	split_sreg_range(0X80518646,"T",0X1,3);
	split_sreg_range(0X80518654,"T",0X1,3);
	split_sreg_range(0X8051865E,"T",0X1,3);
	split_sreg_range(0X80518668,"T",0X1,3);
	split_sreg_range(0X80518678,"T",0X1,3);
	split_sreg_range(0X80518682,"T",0X1,3);
	split_sreg_range(0X8051868E,"T",0X1,3);
	split_sreg_range(0X8051869C,"T",0X1,3);
	split_sreg_range(0X805186A6,"T",0X1,3);
	split_sreg_range(0X805186B2,"T",0X1,3);
	split_sreg_range(0X805186E8,"T",0X1,3);
	split_sreg_range(0X805186F2,"T",0X1,3);
	split_sreg_range(0X80518708,"T",0X1,3);
	split_sreg_range(0X80518710,"T",0X1,3);
	split_sreg_range(0X8051871A,"T",0X1,3);
	split_sreg_range(0X80518730,"T",0X1,3);
	split_sreg_range(0X80518738,"T",0X1,3);
	split_sreg_range(0X80518742,"T",0X1,3);
	split_sreg_range(0X80518758,"T",0X1,3);
	split_sreg_range(0X80518774,"T",0X1,3);
	split_sreg_range(0X80518794,"T",0X1,3);
	split_sreg_range(0X8051879C,"T",0X1,3);
	split_sreg_range(0X805187BA,"T",0X1,3);
	split_sreg_range(0X805187C4,"T",0X1,3);
	split_sreg_range(0X805187CC,"T",0X1,3);
	split_sreg_range(0X805187E2,"T",0X1,3);
	split_sreg_range(0X805187EA,"T",0X1,3);
	split_sreg_range(0X80518802,"T",0X1,3);
	split_sreg_range(0X8051880C,"T",0X1,3);
	split_sreg_range(0X80518814,"T",0X1,3);
	split_sreg_range(0X8051882C,"T",0X1,3);
	split_sreg_range(0X80518852,"T",0X1,3);
	split_sreg_range(0X80518884,"T",0X1,3);
	split_sreg_range(0X805188BE,"T",0X1,3);
	split_sreg_range(0X805188CE,"T",0X1,3);
	split_sreg_range(0X805188DE,"T",0X1,3);
	split_sreg_range(0X805188E8,"T",0X1,3);
	split_sreg_range(0X805188F0,"T",0X1,3);
	split_sreg_range(0X8051893E,"T",0X1,3);
	split_sreg_range(0X80518942,"T",0X1,3);
	split_sreg_range(0X80518946,"T",0X1,3);
	split_sreg_range(0X8051894C,"T",0X1,3);
	split_sreg_range(0X80518950,"T",0X1,3);
	split_sreg_range(0X80518954,"T",0X1,3);
	split_sreg_range(0X80518956,"T",0X1,3);
	split_sreg_range(0X8051895A,"T",0X1,3);
	split_sreg_range(0X8051895C,"T",0X1,3);
	split_sreg_range(0X8051899C,"T",0X1,3);
	split_sreg_range(0X805189CE,"T",0X1,3);
	split_sreg_range(0X805189F0,"T",0X1,3);
	split_sreg_range(0X805189F4,"T",0X1,3);
	split_sreg_range(0X80518BC0,"T",0X1,3);
	split_sreg_range(0X80518BF4,"T",0X1,3);
	split_sreg_range(0X80518C24,"T",0X1,3);
	split_sreg_range(0X80518C58,"T",0X1,3);
	split_sreg_range(0X80518C80,"T",0X1,3);
	split_sreg_range(0X80518CA4,"T",0X1,3);
	split_sreg_range(0X80518CBE,"T",0X1,3);
	split_sreg_range(0X80518D10,"T",0X1,3);
	split_sreg_range(0X80518D3C,"T",0X1,3);
	split_sreg_range(0X80518DC8,"T",0,3);
	split_sreg_range(0X80518DF4,"T",0,3);
	split_sreg_range(0X80518E38,"T",0,3);
	split_sreg_range(0X80518E54,"T",0,3);
	split_sreg_range(0X80518E80,"T",0,3);
	split_sreg_range(0X80518EAC,"T",0,3);
	split_sreg_range(0X80518EC0,"T",0,3);
	split_sreg_range(0X80518EF8,"T",0,3);
	split_sreg_range(0X80518F18,"T",0X1,3);
	split_sreg_range(0X80518F28,"T",0X1,3);
	split_sreg_range(0X80518F32,"T",0X1,3);
	split_sreg_range(0X80518F4E,"T",0X1,3);
	split_sreg_range(0X80518F56,"T",0X1,3);
	split_sreg_range(0X80518F62,"T",0X1,3);
	split_sreg_range(0X80518F64,"T",0X1,3);
	split_sreg_range(0X80518F68,"T",0X1,3);
	split_sreg_range(0X80518F6C,"T",0X1,3);
	split_sreg_range(0X80518F6E,"T",0X1,3);
	split_sreg_range(0X80518F7A,"T",0X1,3);
	split_sreg_range(0X80519020,"T",0X1,3);
	split_sreg_range(0X80519032,"T",0X1,3);
	split_sreg_range(0X80519054,"T",0X1,3);
	split_sreg_range(0X8051906E,"T",0X1,3);
	split_sreg_range(0X8051907A,"T",0X1,3);
	split_sreg_range(0X8051910C,"T",0X1,3);
	split_sreg_range(0X80519112,"T",0X1,3);
	split_sreg_range(0X80519120,"T",0X1,3);
	split_sreg_range(0X80519124,"T",0X1,3);
	split_sreg_range(0X80519126,"T",0X1,3);
	split_sreg_range(0X8051916E,"T",0X1,3);
	split_sreg_range(0X80519172,"T",0X1,3);
	split_sreg_range(0X80519198,"T",0X1,3);
	split_sreg_range(0X805191D6,"T",0X1,3);
	split_sreg_range(0X80519202,"T",0X1,3);
	split_sreg_range(0X805192C0,"T",0X1,3);
	split_sreg_range(0X805192DC,"T",0X1,3);
	split_sreg_range(0X805192EE,"T",0X1,3);
	split_sreg_range(0X80519300,"T",0X1,3);
	split_sreg_range(0X80519316,"T",0X1,3);
	split_sreg_range(0X80519320,"T",0X1,3);
	split_sreg_range(0X80519404,"T",0X1,3);
	split_sreg_range(0X80519436,"T",0X1,3);
	split_sreg_range(0X80519442,"T",0X1,3);
	split_sreg_range(0X8051955C,"T",0X1,3);
	split_sreg_range(0X80519562,"T",0X1,3);
	split_sreg_range(0X8051958E,"T",0X1,3);
	split_sreg_range(0X805195A0,"T",0X1,3);
	split_sreg_range(0X805195B6,"T",0X1,3);
	split_sreg_range(0X805195BA,"T",0X1,3);
	split_sreg_range(0X805195D8,"T",0X1,3);
	split_sreg_range(0X8051964E,"T",0X1,3);
	split_sreg_range(0X80519670,"T",0X1,3);
	split_sreg_range(0X80519672,"T",0X1,3);
	split_sreg_range(0X80519678,"T",0X1,3);
	split_sreg_range(0X805196A8,"T",0,3);
	split_sreg_range(0X805196B0,"T",0,3);
	split_sreg_range(0X805196B8,"T",0,3);
	split_sreg_range(0X805196C0,"T",0,3);
	split_sreg_range(0X805196C8,"T",0,3);
	split_sreg_range(0X805196E0,"T",0,3);
	split_sreg_range(0X805198E0,"T",0X1,3);
	split_sreg_range(0X80519980,"T",0X1,3);
	split_sreg_range(0X805199A2,"T",0X1,3);
	split_sreg_range(0X805199AA,"T",0X1,3);
	split_sreg_range(0X805199C4,"T",0X1,3);
	split_sreg_range(0X805199CC,"T",0X1,3);
	split_sreg_range(0X805199D6,"T",0X1,3);
	split_sreg_range(0X805199F0,"T",0X1,3);
	split_sreg_range(0X805199F4,"T",0X1,3);
	split_sreg_range(0X80519A16,"T",0X1,3);
	split_sreg_range(0X80519A1E,"T",0X1,3);
	split_sreg_range(0X80519A38,"T",0X1,3);
	split_sreg_range(0X80519A3C,"T",0X1,3);
	split_sreg_range(0X80519A46,"T",0X1,3);
	split_sreg_range(0X80519A60,"T",0X1,3);
	split_sreg_range(0X80519A84,"T",0X1,3);
	split_sreg_range(0X80519A8C,"T",0X1,3);
	split_sreg_range(0X80519AB4,"T",0X1,3);
	split_sreg_range(0X80519ABE,"T",0X1,3);
	split_sreg_range(0X80519ACC,"T",0X1,3);
	split_sreg_range(0X80519AD6,"T",0X1,3);
	split_sreg_range(0X80519AF0,"T",0X1,3);
	split_sreg_range(0X80519B12,"T",0X1,3);
	split_sreg_range(0X80519B2C,"T",0X1,3);
	split_sreg_range(0X80519B32,"T",0X1,3);
	split_sreg_range(0X80519B38,"T",0X1,3);
	split_sreg_range(0X80519B5C,"T",0X1,3);
	split_sreg_range(0X80519C14,"T",0X1,3);
	split_sreg_range(0X80519C34,"T",0X1,3);
	split_sreg_range(0X80519C50,"T",0X1,3);
	split_sreg_range(0X80519C54,"T",0X1,3);
	split_sreg_range(0X80519C5C,"T",0X1,3);
	split_sreg_range(0X80519C8A,"T",0X1,3);
	split_sreg_range(0X80519C8E,"T",0X1,3);
	split_sreg_range(0X80519C98,"T",0X1,3);
	split_sreg_range(0X80519CB8,"T",0X1,3);
	split_sreg_range(0X80519CDA,"T",0X1,3);
	split_sreg_range(0X80519CF8,"T",0X1,3);
	split_sreg_range(0X80519CFA,"T",0X1,3);
	split_sreg_range(0X80519D08,"T",0X1,3);
	split_sreg_range(0X80519D10,"T",0X1,3);
	split_sreg_range(0X80519D2C,"T",0X1,3);
	split_sreg_range(0X80519D36,"T",0X1,3);
	split_sreg_range(0X80519D70,"T",0X1,3);
	split_sreg_range(0X80519D76,"T",0X1,3);
	split_sreg_range(0X80519DA4,"T",0X1,3);
	split_sreg_range(0X80519DA8,"T",0X1,3);
	split_sreg_range(0X80519F64,"T",0X1,3);
	split_sreg_range(0X80519F8E,"T",0X1,3);
	split_sreg_range(0X80519F96,"T",0X1,3);
	split_sreg_range(0X80519FA4,"T",0X1,3);
	split_sreg_range(0X80519FD6,"T",0X1,3);
	split_sreg_range(0X80519FFE,"T",0X1,3);
	split_sreg_range(0X8051A008,"T",0X1,3);
	split_sreg_range(0X8051A030,"T",0X1,3);
	split_sreg_range(0X8051A08C,"T",0X1,3);
	split_sreg_range(0X8051A0A4,"T",0X1,3);
	split_sreg_range(0X8051A0BC,"T",0X1,3);
	split_sreg_range(0X8051A0DE,"T",0X1,3);
	split_sreg_range(0X8051A0E6,"T",0X1,3);
	split_sreg_range(0X8051A0FC,"T",0X1,3);
	split_sreg_range(0X8051A0FE,"T",0X1,3);
	split_sreg_range(0X8051A106,"T",0X1,3);
	split_sreg_range(0X8051A11C,"T",0X1,3);
	split_sreg_range(0X8051A122,"T",0X1,3);
	split_sreg_range(0X8051A14A,"T",0X1,3);
	split_sreg_range(0X8051A154,"T",0X1,3);
	split_sreg_range(0X8051A158,"T",0X1,3);
	split_sreg_range(0X8051A184,"T",0X1,3);
	split_sreg_range(0X8051A190,"T",0X1,3);
	split_sreg_range(0X8051A1C0,"T",0X1,3);
	split_sreg_range(0X8051A1CC,"T",0X1,3);
	split_sreg_range(0X8051A1F4,"T",0X1,3);
	split_sreg_range(0X8051A1FC,"T",0X1,3);
	split_sreg_range(0X8051A20A,"T",0X1,3);
	split_sreg_range(0X8051A228,"T",0X1,3);
	split_sreg_range(0X8051A234,"T",0X1,3);
	split_sreg_range(0X8051A23E,"T",0X1,3);
	split_sreg_range(0X8051A280,"T",0X1,3);
	split_sreg_range(0X8051A288,"T",0X1,3);
	split_sreg_range(0X8051A2AA,"T",0X1,3);
	split_sreg_range(0X8051A2B0,"T",0X1,3);
	split_sreg_range(0X8051A2BC,"T",0X1,3);
	split_sreg_range(0X8051A2E4,"T",0X1,3);
	split_sreg_range(0X8051A2EE,"T",0X1,3);
	split_sreg_range(0X8051A2F4,"T",0X1,3);
	split_sreg_range(0X8051A300,"T",0X1,3);
	split_sreg_range(0X8051A306,"T",0X1,3);
	split_sreg_range(0X8051A30C,"T",0X1,3);
	split_sreg_range(0X8051A3C8,"T",0X1,3);
	split_sreg_range(0X8051A3E8,"T",0X1,3);
	split_sreg_range(0X8051A3FE,"T",0X1,3);
	split_sreg_range(0X8051A402,"T",0X1,3);
	split_sreg_range(0X8051A40C,"T",0X1,3);
	split_sreg_range(0X8051A41E,"T",0X1,3);
	split_sreg_range(0X8051A438,"T",0X1,3);
	split_sreg_range(0X8051A494,"T",0X1,3);
	split_sreg_range(0X8051A4B4,"T",0X1,3);
	split_sreg_range(0X8051A4CA,"T",0X1,3);
	split_sreg_range(0X8051A4CE,"T",0X1,3);
	split_sreg_range(0X8051A4D8,"T",0X1,3);
	split_sreg_range(0X8051A4EA,"T",0X1,3);
	split_sreg_range(0X8051A504,"T",0X1,3);
	split_sreg_range(0X8051A55C,"T",0X1,3);
	split_sreg_range(0X8051A582,"T",0X1,3);
	split_sreg_range(0X8051A586,"T",0X1,3);
	split_sreg_range(0X8051A598,"T",0X1,3);
	split_sreg_range(0X8051A59E,"T",0X1,3);
	split_sreg_range(0X8051A5B0,"T",0X1,3);
	split_sreg_range(0X8051A5BE,"T",0X1,3);
	split_sreg_range(0X8051A5CA,"T",0X1,3);
	split_sreg_range(0X8051A638,"T",0X1,3);
	split_sreg_range(0X8051A656,"T",0X1,3);
	split_sreg_range(0X8051A65C,"T",0X1,3);
	split_sreg_range(0X8051A65E,"T",0X1,3);
	split_sreg_range(0X8051A6A2,"T",0X1,3);
	split_sreg_range(0X8051A6E0,"T",0X1,3);
	split_sreg_range(0X8051A712,"T",0X1,3);
	split_sreg_range(0X8051A71E,"T",0X1,3);
	split_sreg_range(0X8051A732,"T",0X1,3);
	split_sreg_range(0X8051A752,"T",0X1,3);
	split_sreg_range(0X8051A7A8,"T",0X1,3);
	split_sreg_range(0X8051A7E4,"T",0X1,3);
	split_sreg_range(0X8051A80A,"T",0X1,3);
	split_sreg_range(0X8051A822,"T",0X1,3);
	split_sreg_range(0X8051A826,"T",0X1,3);
	split_sreg_range(0X8051A85C,"T",0X1,3);
	split_sreg_range(0X8051A870,"T",0X1,3);
	split_sreg_range(0X8051A876,"T",0X1,3);
	split_sreg_range(0X8051A892,"T",0X1,3);
	split_sreg_range(0X8051A8D0,"T",0X1,3);
	split_sreg_range(0X8051A8DE,"T",0X1,3);
	split_sreg_range(0X8051A8E4,"T",0X1,3);
	split_sreg_range(0X8051A8F8,"T",0X1,3);
	split_sreg_range(0X8051A918,"T",0X1,3);
	split_sreg_range(0X8051A932,"T",0X1,3);
	split_sreg_range(0X8051A946,"T",0X1,3);
	split_sreg_range(0X8051A952,"T",0X1,3);
	split_sreg_range(0X8051A956,"T",0X1,3);
	split_sreg_range(0X8051A984,"T",0X1,3);
	split_sreg_range(0X8051A9B6,"T",0X1,3);
	split_sreg_range(0X8051A9C6,"T",0X1,3);
	split_sreg_range(0X8051A9E2,"T",0X1,3);
	split_sreg_range(0X8051A9FE,"T",0X1,3);
	split_sreg_range(0X8051AA64,"T",0X1,3);
	split_sreg_range(0X8051AA6E,"T",0X1,3);
	split_sreg_range(0X8051AAB8,"T",0X1,3);
	split_sreg_range(0X8051AAF4,"T",0X1,3);
	split_sreg_range(0X8051AB1A,"T",0X1,3);
	split_sreg_range(0X8051AB32,"T",0X1,3);
	split_sreg_range(0X8051AB36,"T",0X1,3);
	split_sreg_range(0X8051AB3E,"T",0X1,3);
	split_sreg_range(0X8051AB64,"T",0X1,3);
	split_sreg_range(0X8051AB6E,"T",0X1,3);
	split_sreg_range(0X8051ABAC,"T",0X1,3);
	split_sreg_range(0X8051ABBA,"T",0X1,3);
	split_sreg_range(0X8051ABE4,"T",0X1,3);
	split_sreg_range(0X8051AC06,"T",0X1,3);
	split_sreg_range(0X8051AC1E,"T",0X1,3);
	split_sreg_range(0X8051AC22,"T",0X1,3);
	split_sreg_range(0X8051AC2A,"T",0X1,3);
	split_sreg_range(0X8051AC46,"T",0X1,3);
	split_sreg_range(0X8051AC50,"T",0X1,3);
	split_sreg_range(0X8051AC64,"T",0X1,3);
	split_sreg_range(0X8051AC68,"T",0X1,3);
	split_sreg_range(0X8051AC72,"T",0X1,3);
	split_sreg_range(0X8051AC94,"T",0X1,3);
	split_sreg_range(0X8051ACBA,"T",0X1,3);
	split_sreg_range(0X8051ACD2,"T",0X1,3);
	split_sreg_range(0X8051ACD6,"T",0X1,3);
	split_sreg_range(0X8051ACDE,"T",0X1,3);
	split_sreg_range(0X8051ACFC,"T",0X1,3);
	split_sreg_range(0X8051AD00,"T",0X1,3);
	split_sreg_range(0X8051AD18,"T",0X1,3);
	split_sreg_range(0X8051AD1E,"T",0X1,3);
	split_sreg_range(0X8051AD24,"T",0X1,3);
	split_sreg_range(0X8051AD50,"T",0X1,3);
	split_sreg_range(0X8051AD78,"T",0X1,3);
	split_sreg_range(0X8051AD86,"T",0X1,3);
	split_sreg_range(0X8051AE84,"T",0X1,3);
	split_sreg_range(0X8051AEA8,"T",0X1,3);
	split_sreg_range(0X8051AEC0,"T",0X1,3);
	split_sreg_range(0X8051AEC4,"T",0X1,3);
	split_sreg_range(0X8051AECC,"T",0X1,3);
	split_sreg_range(0X8051AF04,"T",0X1,3);
	split_sreg_range(0X8051AF0E,"T",0X1,3);
	split_sreg_range(0X8051AF34,"T",0X1,3);
	split_sreg_range(0X8051AF5C,"T",0X1,3);
	split_sreg_range(0X8051AF74,"T",0X1,3);
	split_sreg_range(0X8051AF78,"T",0X1,3);
	split_sreg_range(0X8051AF86,"T",0X1,3);
	split_sreg_range(0X8051AF94,"T",0X1,3);
	split_sreg_range(0X8051AFBC,"T",0X1,3);
	split_sreg_range(0X8051B008,"T",0X1,3);
	split_sreg_range(0X8051B014,"T",0X1,3);
	split_sreg_range(0X8051B07E,"T",0X1,3);
	split_sreg_range(0X8051B0A4,"T",0X1,3);
	split_sreg_range(0X8051B0B0,"T",0X1,3);
	split_sreg_range(0X8051B0C4,"T",0X1,3);
	split_sreg_range(0X8051B0D0,"T",0X1,3);
	split_sreg_range(0X8051B0D2,"T",0X1,3);
	split_sreg_range(0X8051B0EC,"T",0X1,3);
	split_sreg_range(0X8051B10E,"T",0X1,3);
	split_sreg_range(0X8051B112,"T",0X1,3);
	split_sreg_range(0X8051B270,"T",0X1,3);
	split_sreg_range(0X8051B27A,"T",0X1,3);
	split_sreg_range(0X8051B2B2,"T",0X1,3);
	split_sreg_range(0X8051B2C8,"T",0X1,3);
	split_sreg_range(0X8051B2DC,"T",0X1,3);
	split_sreg_range(0X8051B302,"T",0X1,3);
	split_sreg_range(0X8051B31E,"T",0X1,3);
	split_sreg_range(0X8051B322,"T",0X1,3);
	split_sreg_range(0X8051B33E,"T",0X1,3);
	split_sreg_range(0X8051B388,"T",0X1,3);
	split_sreg_range(0X8051B396,"T",0X1,3);
	split_sreg_range(0X8051B39C,"T",0X1,3);
	split_sreg_range(0X8051B3A0,"T",0X1,3);
	split_sreg_range(0X8051B3C8,"T",0X1,3);
	split_sreg_range(0X8051B3EC,"T",0X1,3);
	split_sreg_range(0X8051B3F4,"T",0X1,3);
	split_sreg_range(0X8051B40A,"T",0X1,3);
	split_sreg_range(0X8051B410,"T",0X1,3);
	split_sreg_range(0X8051B42E,"T",0X1,3);
	split_sreg_range(0X8051B430,"T",0X1,3);
	split_sreg_range(0X8051B44A,"T",0X1,3);
	split_sreg_range(0X8051B44E,"T",0X1,3);
	split_sreg_range(0X8051B468,"T",0X1,3);
	split_sreg_range(0X8051B480,"T",0X1,3);
	split_sreg_range(0X8051B488,"T",0X1,3);
	split_sreg_range(0X8051B49C,"T",0X1,3);
	split_sreg_range(0X8051B4A2,"T",0X1,3);
	split_sreg_range(0X8051B4B6,"T",0X1,3);
	split_sreg_range(0X8051B4C4,"T",0X1,3);
	split_sreg_range(0X8051B4D2,"T",0X1,3);
	split_sreg_range(0X8051B4E2,"T",0X1,3);
	split_sreg_range(0X8051B508,"T",0X1,3);
	split_sreg_range(0X8051B530,"T",0X1,3);
	split_sreg_range(0X8051B54A,"T",0X1,3);
	split_sreg_range(0X8051B54E,"T",0X1,3);
	split_sreg_range(0X8051B562,"T",0X1,3);
	split_sreg_range(0X8051B566,"T",0X1,3);
	split_sreg_range(0X8051B594,"T",0X1,3);
	split_sreg_range(0X8051B5AC,"T",0X1,3);
	split_sreg_range(0X8051B5D4,"T",0X1,3);
	split_sreg_range(0X8051B5D6,"T",0X1,3);
	split_sreg_range(0X8051B600,"T",0X1,3);
	split_sreg_range(0X8051B62A,"T",0X1,3);
	split_sreg_range(0X8051B644,"T",0X1,3);
	split_sreg_range(0X8051B648,"T",0X1,3);
	split_sreg_range(0X8051B65E,"T",0X1,3);
	split_sreg_range(0X8051B66A,"T",0X1,3);
	split_sreg_range(0X8051B670,"T",0X1,3);
	split_sreg_range(0X8051B68A,"T",0X1,3);
	split_sreg_range(0X8051B6BE,"T",0X1,3);
	split_sreg_range(0X8051B6D6,"T",0X1,3);
	split_sreg_range(0X8051B6DE,"T",0X1,3);
	split_sreg_range(0X8051B70C,"T",0X1,3);
	split_sreg_range(0X8051B730,"T",0X1,3);
	split_sreg_range(0X8051B738,"T",0X1,3);
	split_sreg_range(0X8051B764,"T",0X1,3);
	split_sreg_range(0X8051B774,"T",0X1,3);
	split_sreg_range(0X8051B784,"T",0X1,3);
	split_sreg_range(0X8051B7A0,"T",0X1,3);
	split_sreg_range(0X8051B7B6,"T",0X1,3);
	split_sreg_range(0X8051B8C4,"T",0X1,3);
	split_sreg_range(0X8051B8E6,"T",0X1,3);
	split_sreg_range(0X8051B900,"T",0X1,3);
	split_sreg_range(0X8051B904,"T",0X1,3);
	split_sreg_range(0X8051BA60,"T",0X1,3);
	split_sreg_range(0X8051BB4A,"T",0X1,3);
	split_sreg_range(0X8051BB4E,"T",0X1,3);
	split_sreg_range(0X8051BB58,"T",0X1,3);
	split_sreg_range(0X8051BB5A,"T",0X1,3);
	split_sreg_range(0X8051BB5C,"T",0X1,3);
	split_sreg_range(0X8051BB6C,"T",0X1,3);
	split_sreg_range(0X8051BB86,"T",0X1,3);
	split_sreg_range(0X8051BB8C,"T",0X1,3);
	split_sreg_range(0X8051BB9A,"T",0X1,3);
	split_sreg_range(0X8051BB9C,"T",0X1,3);
	split_sreg_range(0X8051BBB2,"T",0X1,3);
	split_sreg_range(0X8051BBCA,"T",0X1,3);
	split_sreg_range(0X8051BBE6,"T",0X1,3);
	split_sreg_range(0X8051BBF4,"T",0X1,3);
	split_sreg_range(0X8051BBFA,"T",0X1,3);
	split_sreg_range(0X8051BC10,"T",0X1,3);
	split_sreg_range(0X8051BC1E,"T",0X1,3);
	split_sreg_range(0X8051BC24,"T",0X1,3);
	split_sreg_range(0X8051BC3E,"T",0X1,3);
	split_sreg_range(0X8051BC4C,"T",0X1,3);
	split_sreg_range(0X8051BC52,"T",0X1,3);
	split_sreg_range(0X8051BC5C,"T",0X1,3);
	split_sreg_range(0X8051BC64,"T",0X1,3);
	split_sreg_range(0X8051BC66,"T",0X1,3);
	split_sreg_range(0X8051BCB4,"T",0X1,3);
	split_sreg_range(0X8051BCC2,"T",0X1,3);
	split_sreg_range(0X8051BCEC,"T",0X1,3);
	split_sreg_range(0X8051BCF0,"T",0X1,3);
	split_sreg_range(0X8051BCF6,"T",0X1,3);
	split_sreg_range(0X8051BCFC,"T",0X1,3);
	split_sreg_range(0X8051BD18,"T",0X1,3);
	split_sreg_range(0X8051BD4E,"T",0X1,3);
	split_sreg_range(0X8051BD6C,"T",0X1,3);
	split_sreg_range(0X8051BD72,"T",0X1,3);
	split_sreg_range(0X8051BD80,"T",0X1,3);
	split_sreg_range(0X8051BD94,"T",0X1,3);
	split_sreg_range(0X8051BDBA,"T",0X1,3);
	split_sreg_range(0X8051BDC4,"T",0X1,3);
	split_sreg_range(0X8051BDE4,"T",0X1,3);
	split_sreg_range(0X8051BE00,"T",0X1,3);
	split_sreg_range(0X8051BE1A,"T",0X1,3);
	split_sreg_range(0X8051BE4C,"T",0X1,3);
	split_sreg_range(0X8051BE7A,"T",0X1,3);
	split_sreg_range(0X8051BEAA,"T",0X1,3);
	split_sreg_range(0X8051BEAE,"T",0X1,3);
	split_sreg_range(0X8051BEE2,"T",0X1,3);
	split_sreg_range(0X8051BEE8,"T",0X1,3);
	split_sreg_range(0X8051BFFC,"T",0X1,3);
	split_sreg_range(0X8051C016,"T",0X1,3);
	split_sreg_range(0X8051C030,"T",0X1,3);
	split_sreg_range(0X8051C03E,"T",0X1,3);
	split_sreg_range(0X8051C040,"T",0X1,3);
	split_sreg_range(0X8051C04A,"T",0X1,3);
	split_sreg_range(0X8051C078,"T",0X1,3);
	split_sreg_range(0X8051C098,"T",0X1,3);
	split_sreg_range(0X8051C09A,"T",0X1,3);
	split_sreg_range(0X8051C0AC,"T",0X1,3);
	split_sreg_range(0X8051C0BE,"T",0X1,3);
	split_sreg_range(0X8051C0C2,"T",0X1,3);
	split_sreg_range(0X8051C0CA,"T",0X1,3);
	split_sreg_range(0X8051C0DE,"T",0X1,3);
	split_sreg_range(0X8051C0EC,"T",0X1,3);
	split_sreg_range(0X8051C0FC,"T",0X1,3);
	split_sreg_range(0X8051C102,"T",0X1,3);
	split_sreg_range(0X8051C104,"T",0X1,3);
	split_sreg_range(0X8051C118,"T",0X1,3);
	split_sreg_range(0X8051C144,"T",0X1,3);
	split_sreg_range(0X8051C16E,"T",0X1,3);
	split_sreg_range(0X8051C178,"T",0X1,3);
	split_sreg_range(0X8051C180,"T",0X1,3);
	split_sreg_range(0X8051C184,"T",0X1,3);
	split_sreg_range(0X8051C18C,"T",0X1,3);
	split_sreg_range(0X8051C1A2,"T",0X1,3);
	split_sreg_range(0X8051C1A6,"T",0X1,3);
	split_sreg_range(0X8051C1B0,"T",0X1,3);
	split_sreg_range(0X8051C1C6,"T",0X1,3);
	split_sreg_range(0X8051C1CE,"T",0X1,3);
	split_sreg_range(0X8051C1D8,"T",0X1,3);
	split_sreg_range(0X8051C1EC,"T",0X1,3);
	split_sreg_range(0X8051C1FA,"T",0X1,3);
	split_sreg_range(0X8051C210,"T",0X1,3);
	split_sreg_range(0X8051C224,"T",0X1,3);
	split_sreg_range(0X8051C230,"T",0X1,3);
	split_sreg_range(0X8051C23C,"T",0X1,3);
	split_sreg_range(0X8051C246,"T",0X1,3);
	split_sreg_range(0X8051C262,"T",0X1,3);
	split_sreg_range(0X8051C270,"T",0X1,3);
	split_sreg_range(0X8051C27E,"T",0X1,3);
	split_sreg_range(0X8051C29C,"T",0X1,3);
	split_sreg_range(0X8051C2AE,"T",0X1,3);
	split_sreg_range(0X8051C2C8,"T",0X1,3);
	split_sreg_range(0X8051C2CE,"T",0X1,3);
	split_sreg_range(0X8051C2D2,"T",0X1,3);
	split_sreg_range(0X8051C2DC,"T",0X1,3);
	split_sreg_range(0X8051C2E0,"T",0X1,3);
	split_sreg_range(0X8051C2E6,"T",0X1,3);
	split_sreg_range(0X8051C2EA,"T",0X1,3);
	split_sreg_range(0X8051C2F0,"T",0X1,3);
	split_sreg_range(0X8051C306,"T",0X1,3);
	split_sreg_range(0X8051C30C,"T",0X1,3);
	split_sreg_range(0X8051C318,"T",0X1,3);
	split_sreg_range(0X8051C33A,"T",0X1,3);
	split_sreg_range(0X8051C346,"T",0X1,3);
	split_sreg_range(0X8051C34A,"T",0X1,3);
	split_sreg_range(0X8051C350,"T",0X1,3);
	split_sreg_range(0X8051C358,"T",0X1,3);
	split_sreg_range(0X8051C35E,"T",0X1,3);
	split_sreg_range(0X8051C362,"T",0X1,3);
	split_sreg_range(0X8051C368,"T",0X1,3);
	split_sreg_range(0X8051C370,"T",0X1,3);
	split_sreg_range(0X8051C382,"T",0X1,3);
	split_sreg_range(0X8051C394,"T",0X1,3);
	split_sreg_range(0X8051C398,"T",0X1,3);
	split_sreg_range(0X8051C3A8,"T",0X1,3);
	split_sreg_range(0X8051C3AC,"T",0X1,3);
	split_sreg_range(0X8051C3B6,"T",0X1,3);
	split_sreg_range(0X8051C3BA,"T",0X1,3);
	split_sreg_range(0X8051C3E2,"T",0X1,3);
	split_sreg_range(0X8051C3EC,"T",0X1,3);
	split_sreg_range(0X8051C3F4,"T",0X1,3);
	split_sreg_range(0X8051C42C,"T",0X1,3);
	split_sreg_range(0X8051C430,"T",0X1,3);
	split_sreg_range(0X8051C434,"T",0X1,3);
	split_sreg_range(0X8051C44E,"T",0X1,3);
	split_sreg_range(0X8051C460,"T",0X1,3);
	split_sreg_range(0X8051C464,"T",0X1,3);
	split_sreg_range(0X8051C47C,"T",0X1,3);
	split_sreg_range(0X8051C4B0,"T",0X1,3);
	split_sreg_range(0X8051C80E,"T",0X1,3);
	split_sreg_range(0X8051C810,"T",0X1,3);
	split_sreg_range(0X8051CB48,"T",0X1,3);
	split_sreg_range(0X8051CB52,"T",0X1,3);
	split_sreg_range(0X8051CB5C,"T",0X1,3);
	split_sreg_range(0X8051CB72,"T",0X1,3);
	split_sreg_range(0X8051CB76,"T",0X1,3);
	split_sreg_range(0X8051CB78,"T",0X1,3);
	split_sreg_range(0X8051CB84,"T",0X1,3);
	split_sreg_range(0X8051CBBA,"T",0X1,3);
	split_sreg_range(0X8051CBBC,"T",0X1,3);
	split_sreg_range(0X8051CBC8,"T",0X1,3);
	split_sreg_range(0X8051CBD4,"T",0X1,3);
	split_sreg_range(0X8051CBE4,"T",0X1,3);
	split_sreg_range(0X8051CBE8,"T",0X1,3);
	split_sreg_range(0X8051CBEA,"T",0X1,3);
	split_sreg_range(0X8051CBF8,"T",0X1,3);
	split_sreg_range(0X8051CC1A,"T",0X1,3);
	split_sreg_range(0X8051CC2E,"T",0X1,3);
	split_sreg_range(0X8051CC4C,"T",0X1,3);
	split_sreg_range(0X8051CC70,"T",0X1,3);
	split_sreg_range(0X8051CC7A,"T",0X1,3);
	split_sreg_range(0X8051CC84,"T",0X1,3);
	split_sreg_range(0X8051CCA6,"T",0X1,3);
	split_sreg_range(0X8051CCB2,"T",0X1,3);
	split_sreg_range(0X8051CCB8,"T",0X1,3);
	split_sreg_range(0X8051CCD4,"T",0X1,3);
	split_sreg_range(0X8051CCD8,"T",0X1,3);
	split_sreg_range(0X8051CCEE,"T",0X1,3);
	split_sreg_range(0X8051CCF4,"T",0X1,3);
	split_sreg_range(0X8051CD0E,"T",0X1,3);
	split_sreg_range(0X8051CD30,"T",0X1,3);
	split_sreg_range(0X8051CD46,"T",0X1,3);
	split_sreg_range(0X8051CD5C,"T",0X1,3);
	split_sreg_range(0X8051CD68,"T",0X1,3);
	split_sreg_range(0X8051CD90,"T",0X1,3);
	split_sreg_range(0X8051CD9A,"T",0X1,3);
	split_sreg_range(0X8051CD9C,"T",0X1,3);
	split_sreg_range(0X8051CDAE,"T",0X1,3);
	split_sreg_range(0X8051CDDE,"T",0X1,3);
	split_sreg_range(0X8051CDE8,"T",0X1,3);
	split_sreg_range(0X8051CDFC,"T",0X1,3);
	split_sreg_range(0X8051CE02,"T",0X1,3);
	split_sreg_range(0X8051CE10,"T",0X1,3);
	split_sreg_range(0X8051CE6C,"T",0X1,3);
	split_sreg_range(0X8051CE7C,"T",0X1,3);
	split_sreg_range(0X8051CEA8,"T",0X1,3);
	split_sreg_range(0X8051CEB2,"T",0X1,3);
	split_sreg_range(0X8051CEB8,"T",0X1,3);
	split_sreg_range(0X8051CEC4,"T",0X1,3);
	split_sreg_range(0X8051CF28,"T",0X1,3);
	split_sreg_range(0X8051CF40,"T",0X1,3);
	split_sreg_range(0X8051CF88,"T",0X1,3);
	split_sreg_range(0X8051CFA2,"T",0X1,3);
	split_sreg_range(0X8051CFB8,"T",0X1,3);
	split_sreg_range(0X8051CFBC,"T",0X1,3);
	split_sreg_range(0X8051CFDC,"T",0X1,3);
	split_sreg_range(0X8051CFF2,"T",0X1,3);
	split_sreg_range(0X8051D000,"T",0X1,3);
	split_sreg_range(0X8051D0B0,"T",0X1,3);
	split_sreg_range(0X8051D0BA,"T",0X1,3);
	split_sreg_range(0X8051D0E0,"T",0X1,3);
	split_sreg_range(0X8051D0EC,"T",0X1,3);
	split_sreg_range(0X8051D10C,"T",0X1,3);
	split_sreg_range(0X8051D120,"T",0X1,3);
	split_sreg_range(0X8051D12E,"T",0X1,3);
	split_sreg_range(0X8051D148,"T",0X1,3);
	split_sreg_range(0X8051D154,"T",0X1,3);
	split_sreg_range(0X8051D180,"T",0X1,3);
	split_sreg_range(0X8051D18A,"T",0X1,3);
	split_sreg_range(0X8051D1A8,"T",0X1,3);
	split_sreg_range(0X8051D1BC,"T",0X1,3);
	split_sreg_range(0X8051D1C2,"T",0X1,3);
	split_sreg_range(0X8051D1D2,"T",0X1,3);
	split_sreg_range(0X8051D230,"T",0X1,3);
	split_sreg_range(0X8051D244,"T",0X1,3);
	split_sreg_range(0X8051D254,"T",0X1,3);
	split_sreg_range(0X8051D270,"T",0X1,3);
	split_sreg_range(0X8051D298,"T",0X1,3);
	split_sreg_range(0X8051D2A6,"T",0X1,3);
	split_sreg_range(0X8051D2AA,"T",0X1,3);
	split_sreg_range(0X8051D2B6,"T",0X1,3);
	split_sreg_range(0X8051D2D2,"T",0X1,3);
	split_sreg_range(0X8051D2E8,"T",0X1,3);
	split_sreg_range(0X8051D30C,"T",0X1,3);
	split_sreg_range(0X8051D322,"T",0X1,3);
	split_sreg_range(0X8051D32E,"T",0X1,3);
	split_sreg_range(0X8051D33C,"T",0X1,3);
	split_sreg_range(0X8051D346,"T",0X1,3);
	split_sreg_range(0X8051D35C,"T",0X1,3);
	split_sreg_range(0X8051D36A,"T",0X1,3);
	split_sreg_range(0X8051D424,"T",0X1,3);
	split_sreg_range(0X8051D440,"T",0X1,3);
	split_sreg_range(0X8051D454,"T",0X1,3);
	split_sreg_range(0X8051D470,"T",0X1,3);
	split_sreg_range(0X8051D48E,"T",0X1,3);
	split_sreg_range(0X8051D498,"T",0X1,3);
	split_sreg_range(0X8051D4BA,"T",0X1,3);
	split_sreg_range(0X8051D4F0,"T",0X1,3);
	split_sreg_range(0X8051D502,"T",0X1,3);
	split_sreg_range(0X8051D51A,"T",0X1,3);
	split_sreg_range(0X8051D51E,"T",0X1,3);
	split_sreg_range(0X8051D528,"T",0X1,3);
	split_sreg_range(0X8051D530,"T",0X1,3);
	split_sreg_range(0X8051D556,"T",0X1,3);
	split_sreg_range(0X8051D55A,"T",0X1,3);
	split_sreg_range(0X8051D55C,"T",0X1,3);
	split_sreg_range(0X8051D568,"T",0X1,3);
	split_sreg_range(0X8051D56A,"T",0X1,3);
	split_sreg_range(0X8051D590,"T",0X1,3);
	split_sreg_range(0X8051D5B6,"T",0X1,3);
	split_sreg_range(0X8051D5C8,"T",0X1,3);
	split_sreg_range(0X8051D6B0,"T",0X1,3);
	split_sreg_range(0X8051D708,"T",0,3);
	split_sreg_range(0X8051D748,"T",0,3);
	split_sreg_range(0X8051D750,"T",0,3);
	split_sreg_range(0X8051D77C,"T",0,3);
	split_sreg_range(0X8051D780,"T",0,3);
	split_sreg_range(0X8051D798,"T",0,3);
	split_sreg_range(0X8051D7A8,"T",0,3);
	split_sreg_range(0X8051D7AC,"T",0,3);
	split_sreg_range(0X8051D7E8,"T",0,3);
	split_sreg_range(0X8051D7F8,"T",0,3);
	split_sreg_range(0X8051D814,"T",0,3);
	split_sreg_range(0X8051D83C,"T",0,3);
	split_sreg_range(0X8051D850,"T",0,3);
	split_sreg_range(0X8051D86C,"T",0,3);
	split_sreg_range(0X8051D878,"T",0,3);
	split_sreg_range(0X8051D880,"T",0,3);
	split_sreg_range(0X8051D8A8,"T",0X1,3);
	split_sreg_range(0X8051D8B6,"T",0X1,3);
	split_sreg_range(0X8051D8C4,"T",0X1,3);
	split_sreg_range(0X8051D8D4,"T",0X1,3);
	split_sreg_range(0X8051D8E6,"T",0X1,3);
	split_sreg_range(0X8051D900,"T",0X1,3);
	split_sreg_range(0X8051D90A,"T",0X1,3);
	split_sreg_range(0X8051D90C,"T",0X1,3);
	split_sreg_range(0X8051D912,"T",0X1,3);
	split_sreg_range(0X8051D918,"T",0X1,3);
	split_sreg_range(0X8051D91E,"T",0X1,3);
	split_sreg_range(0X8051D932,"T",0X1,3);
	split_sreg_range(0X8051D936,"T",0X1,3);
	split_sreg_range(0X8051D93A,"T",0X1,3);
	split_sreg_range(0X8051D942,"T",0X1,3);
	split_sreg_range(0X8051D94A,"T",0X1,3);
	split_sreg_range(0X8051D954,"T",0X1,3);
	split_sreg_range(0X8051D96E,"T",0X1,3);
	split_sreg_range(0X8051D97E,"T",0X1,3);
	split_sreg_range(0X8051D986,"T",0X1,3);
	split_sreg_range(0X8051D98A,"T",0X1,3);
	split_sreg_range(0X8051DA1A,"T",0X1,3);
	split_sreg_range(0X8051DA1E,"T",0X1,3);
	split_sreg_range(0X8051DA22,"T",0X1,3);
	split_sreg_range(0X8051DA44,"T",0X1,3);
	split_sreg_range(0X8051DA50,"T",0X1,3);
	split_sreg_range(0X8051DA7C,"T",0X1,3);
	split_sreg_range(0X8051DA94,"T",0X1,3);
	split_sreg_range(0X8051DB1C,"T",0X1,3);
	split_sreg_range(0X8051DB46,"T",0X1,3);
	split_sreg_range(0X8051DB48,"T",0X1,3);
	split_sreg_range(0X8051DB50,"T",0X1,3);
	split_sreg_range(0X8051DB84,"T",0X1,3);
	split_sreg_range(0X8051DB94,"T",0X1,3);
	split_sreg_range(0X8051DB9E,"T",0X1,3);
	split_sreg_range(0X8051DBA6,"T",0X1,3);
	split_sreg_range(0X8051DBAC,"T",0X1,3);
	split_sreg_range(0X8051DBB4,"T",0X1,3);
	split_sreg_range(0X8051DBC4,"T",0X1,3);
	split_sreg_range(0X8051DBCE,"T",0X1,3);
	split_sreg_range(0X8051DBDC,"T",0X1,3);
	split_sreg_range(0X8051DBFA,"T",0X1,3);
	split_sreg_range(0X8051DC24,"T",0X1,3);
	split_sreg_range(0X8051DC28,"T",0X1,3);
	split_sreg_range(0X8051DC38,"T",0X1,3);
	split_sreg_range(0X8051DC46,"T",0X1,3);
	split_sreg_range(0X8051DC52,"T",0X1,3);
	split_sreg_range(0X8051DC6A,"T",0X1,3);
	split_sreg_range(0X8051DC76,"T",0X1,3);
	split_sreg_range(0X8051DC8E,"T",0X1,3);
	split_sreg_range(0X8051DCA0,"T",0X1,3);
	split_sreg_range(0X8051DCAC,"T",0X1,3);
	split_sreg_range(0X8051DCB4,"T",0X1,3);
	split_sreg_range(0X8051DCCC,"T",0X1,3);
	split_sreg_range(0X8051DCEA,"T",0X1,3);
	split_sreg_range(0X8051DD02,"T",0X1,3);
	split_sreg_range(0X8051DD08,"T",0X1,3);
	split_sreg_range(0X8051DD0E,"T",0X1,3);
	split_sreg_range(0X8051DD1C,"T",0X1,3);
	split_sreg_range(0X8051DD2A,"T",0X1,3);
	split_sreg_range(0X8051DD30,"T",0X1,3);
	split_sreg_range(0X8051DD44,"T",0X1,3);
	split_sreg_range(0X8051DD48,"T",0X1,3);
	split_sreg_range(0X8051DD56,"T",0X1,3);
	split_sreg_range(0X8051DD5A,"T",0X1,3);
	split_sreg_range(0X8051DD64,"T",0X1,3);
	split_sreg_range(0X8051DD68,"T",0X1,3);
	split_sreg_range(0X8051DD7A,"T",0X1,3);
	split_sreg_range(0X8051DD84,"T",0X1,3);
	split_sreg_range(0X8051DD8A,"T",0X1,3);
	split_sreg_range(0X8051DD9E,"T",0X1,3);
	split_sreg_range(0X8051DDA2,"T",0X1,3);
	split_sreg_range(0X8051DDB0,"T",0X1,3);
	split_sreg_range(0X8051DDB4,"T",0X1,3);
	split_sreg_range(0X8051DDBE,"T",0X1,3);
	split_sreg_range(0X8051DDC2,"T",0X1,3);
	split_sreg_range(0X8051DDD4,"T",0X1,3);
	split_sreg_range(0X8051DDDE,"T",0X1,3);
	split_sreg_range(0X8051DDF0,"T",0X1,3);
	split_sreg_range(0X8051DDF6,"T",0X1,3);
	split_sreg_range(0X8051DDFA,"T",0X1,3);
	split_sreg_range(0X8051DE0E,"T",0X1,3);
	split_sreg_range(0X8051DE12,"T",0X1,3);
	split_sreg_range(0X8051DE20,"T",0X1,3);
	split_sreg_range(0X8051DE24,"T",0X1,3);
	split_sreg_range(0X8051DE2E,"T",0X1,3);
	split_sreg_range(0X8051DE32,"T",0X1,3);
	split_sreg_range(0X8051DE44,"T",0X1,3);
	split_sreg_range(0X8051DE4E,"T",0X1,3);
	split_sreg_range(0X8051DE68,"T",0X1,3);
	split_sreg_range(0X8051DED0,"T",0X1,3);
	split_sreg_range(0X8051DEE4,"T",0X1,3);
	split_sreg_range(0X8051DEE8,"T",0X1,3);
	split_sreg_range(0X8051DEF4,"T",0X1,3);
	split_sreg_range(0X8051DEFC,"T",0X1,3);
	split_sreg_range(0X8051DF00,"T",0X1,3);
	split_sreg_range(0X8051DF30,"T",0X1,3);
	split_sreg_range(0X8051DF34,"T",0X1,3);
	split_sreg_range(0X8051DF38,"T",0X1,3);
	split_sreg_range(0X8051DF54,"T",0X1,3);
	split_sreg_range(0X8051DF72,"T",0X1,3);
	split_sreg_range(0X8051DF88,"T",0X1,3);
	split_sreg_range(0X8051DFB4,"T",0X1,3);
	split_sreg_range(0X8051DFD4,"T",0X1,3);
	split_sreg_range(0X8051DFF6,"T",0X1,3);
	split_sreg_range(0X8051E006,"T",0X1,3);
	split_sreg_range(0X8051E00A,"T",0X1,3);
	split_sreg_range(0X8051E00E,"T",0X1,3);
	split_sreg_range(0X8051E010,"T",0X1,3);
	split_sreg_range(0X8051E018,"T",0X1,3);
	split_sreg_range(0X8051E044,"T",0X1,3);
	split_sreg_range(0X8051E08C,"T",0X1,3);
	split_sreg_range(0X8051E09C,"T",0X1,3);
	split_sreg_range(0X8051E0B6,"T",0X1,3);
	split_sreg_range(0X8051E0E6,"T",0X1,3);
	split_sreg_range(0X8051E130,"T",0X1,3);
	split_sreg_range(0X8051E178,"T",0X1,3);
	split_sreg_range(0X8051E19C,"T",0X1,3);
	split_sreg_range(0X8051E23C,"T",0X1,3);
	split_sreg_range(0X8051E240,"T",0X1,3);
	split_sreg_range(0X8051E252,"T",0X1,3);
	split_sreg_range(0X8051E2E0,"T",0X1,3);
	split_sreg_range(0X8051E2EA,"T",0X1,3);
	split_sreg_range(0X8051E2F4,"T",0X1,3);
	split_sreg_range(0X8051E2FC,"T",0X1,3);
	split_sreg_range(0X8051E300,"T",0X1,3);
	split_sreg_range(0X8051E30E,"T",0X1,3);
	split_sreg_range(0X8051E310,"T",0X1,3);
	split_sreg_range(0X8051E318,"T",0X1,3);
	split_sreg_range(0X8051E342,"T",0X1,3);
	split_sreg_range(0X8051E346,"T",0X1,3);
	split_sreg_range(0X8051E354,"T",0X1,3);
	split_sreg_range(0X8051E356,"T",0X1,3);
	split_sreg_range(0X8051E35A,"T",0X1,3);
	split_sreg_range(0X8051E372,"T",0X1,3);
	split_sreg_range(0X8051E374,"T",0X1,3);
	split_sreg_range(0X8051E4F0,"T",0X1,3);
	split_sreg_range(0X8051E506,"T",0X1,3);
	split_sreg_range(0X8051E514,"T",0X1,3);
	split_sreg_range(0X8051E54E,"T",0X1,3);
	split_sreg_range(0X8051E554,"T",0X1,3);
	split_sreg_range(0X8051E578,"T",0X1,3);
	split_sreg_range(0X8051E5A0,"T",0X1,3);
	split_sreg_range(0X8051E5A6,"T",0X1,3);
	split_sreg_range(0X8051E5AE,"T",0X1,3);
	split_sreg_range(0X8051E5C8,"T",0X1,3);
	split_sreg_range(0X8051E5E6,"T",0X1,3);
	split_sreg_range(0X8051E5F6,"T",0X1,3);
	split_sreg_range(0X8051E624,"T",0X1,3);
	split_sreg_range(0X8051E64E,"T",0X1,3);
	split_sreg_range(0X8051E654,"T",0X1,3);
	split_sreg_range(0X8051E660,"T",0,3);
	split_sreg_range(0X8051E68C,"T",0,3);
	split_sreg_range(0X8051E6C4,"T",0,3);
	split_sreg_range(0X8051E85C,"T",0,3);
	split_sreg_range(0X8051E880,"T",0,3);
	split_sreg_range(0X8051E8B8,"T",0,3);
	split_sreg_range(0X8051E8E0,"T",0,3);
	split_sreg_range(0X8051E8E8,"T",0,3);
	split_sreg_range(0X8051E998,"T",0,3);
	split_sreg_range(0X8051E9A0,"T",0,3);
	split_sreg_range(0X8051E9BC,"T",0,3);
	split_sreg_range(0X8051E9C0,"T",0,3);
	split_sreg_range(0X8051E9DC,"T",0,3);
	split_sreg_range(0X8051EA00,"T",0,3);
	split_sreg_range(0X8051EA44,"T",0,3);
	split_sreg_range(0X8051EC04,"T",0,3);
	split_sreg_range(0X8051EC10,"T",0,3);
	split_sreg_range(0X8051EC1C,"T",0,3);
	split_sreg_range(0X8051EC24,"T",0,3);
	split_sreg_range(0X8051EC6C,"T",0,3);
	split_sreg_range(0X8051EC78,"T",0,3);
	split_sreg_range(0X8051EC94,"T",0,3);
	split_sreg_range(0X8051ECA4,"T",0,3);
	split_sreg_range(0X8051ECE0,"T",0,3);
	split_sreg_range(0X8051ED2C,"T",0,3);
	split_sreg_range(0X8051ED4C,"T",0,3);
	split_sreg_range(0X8051ED58,"T",0,3);
	split_sreg_range(0X8051ED7C,"T",0,3);
	split_sreg_range(0X8051EDA4,"T",0,3);
	split_sreg_range(0X8051EDAC,"T",0,3);
	split_sreg_range(0X8051EDDC,"T",0,3);
	split_sreg_range(0X8051EDF4,"T",0,3);
	split_sreg_range(0X8051EE14,"T",0,3);
	split_sreg_range(0X8051EE1C,"T",0,3);
	split_sreg_range(0X8051EE24,"T",0,3);
	split_sreg_range(0X8051EE38,"T",0,3);
	split_sreg_range(0X8051EE6C,"T",0,3);
	split_sreg_range(0X8051EE98,"T",0,3);
	split_sreg_range(0X8051EEB0,"T",0,3);
	split_sreg_range(0X8051EEB8,"T",0,3);
	split_sreg_range(0X8051EF0C,"T",0,3);
	split_sreg_range(0X8051EF62,"T",0X1,3);
	split_sreg_range(0X8051EF88,"T",0X1,3);
	split_sreg_range(0X8051EFA2,"T",0X1,3);
	split_sreg_range(0X8051EFE4,"T",0X1,3);
	split_sreg_range(0X8051F01C,"T",0X1,3);
	split_sreg_range(0X8051F0E4,"T",0X1,3);
	split_sreg_range(0X8051F0FA,"T",0X1,3);
	split_sreg_range(0X8051F110,"T",0X1,3);
	split_sreg_range(0X8051F124,"T",0X1,3);
	split_sreg_range(0X8051F132,"T",0X1,3);
	split_sreg_range(0X8051F178,"T",0X1,3);
	split_sreg_range(0X8051F8FA,"T",0X1,3);
	split_sreg_range(0X8051F964,"T",0X1,3);
	split_sreg_range(0X8051F96C,"T",0X1,3);
	split_sreg_range(0X8051F980,"T",0X1,3);
	split_sreg_range(0X8051FC20,"T",0X1,3);
	split_sreg_range(0X8051FC38,"T",0X1,3);
	split_sreg_range(0X8051FC60,"T",0X1,3);
	split_sreg_range(0X8051FC6A,"T",0X1,3);
	split_sreg_range(0X8051FC6C,"T",0X1,3);
	split_sreg_range(0X8051FC8C,"T",0X1,3);
	split_sreg_range(0X8051FCAA,"T",0X1,3);
	split_sreg_range(0X8051FCC0,"T",0X1,3);
	split_sreg_range(0X8051FCD6,"T",0X1,3);
	split_sreg_range(0X8051FD00,"T",0X1,3);
	split_sreg_range(0X8051FD10,"T",0X1,3);
	split_sreg_range(0X8051FD1A,"T",0X1,3);
	split_sreg_range(0X8051FD32,"T",0X1,3);
	split_sreg_range(0X8051FD34,"T",0X1,3);
	split_sreg_range(0X8051FD5A,"T",0X1,3);
	split_sreg_range(0X8051FD82,"T",0X1,3);
	split_sreg_range(0X8051FDA0,"T",0X1,3);
	split_sreg_range(0X80539A88,"T",0X1,3);
	split_sreg_range(0X80539A8C,"T",0,3);
	split_sreg_range(0X80539A90,"T",0X1,3);
	split_sreg_range(0X80539A94,"T",0,3);
	split_sreg_range(0X80539A98,"T",0,3);
	split_sreg_range(0X80539AA8,"T",0X1,3);
	split_sreg_range(0X80539AAC,"T",0,3);
	split_sreg_range(0X80539AB0,"T",0,3);
	split_sreg_range(0X80539AB8,"T",0X1,3);
	split_sreg_range(0X80539ABC,"T",0,3);
	split_sreg_range(0X8053A000,"T",0,3);
	split_sreg_range(0X80548000,"T",0,3);
	split_sreg_range(0X8054800C,"T",0,3);
	split_sreg_range(0X80549000,"T",0,3);
	split_sreg_range(0X80578000,"T",0,3);
	split_sreg_range(0X8077C000,"T",0,3);
	split_sreg_range(0X807B6000,"T",0,3);
	split_sreg_range(0X80300000,"DS",0X1,3);
	split_sreg_range(0X80500000,"DS",0,3);
	split_sreg_range(0X8053A000,"DS",0X1,3);
	split_sreg_range(0X80548000,"DS",0X1,3);
	split_sreg_range(0X8054800C,"DS",0X1,3);
	split_sreg_range(0X80549000,"DS",0X1,3);
	split_sreg_range(0X80578000,"DS",0X1,3);
	split_sreg_range(0X8077C000,"DS",0X1,3);
	split_sreg_range(0X807B6000,"DS",0X1,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
        end_type_updating(UTP_STRUCT);
}

// End of file.
