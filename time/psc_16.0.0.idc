#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("ARM", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 2);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("gnulnx_arm64");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {

	add_segm_ex(0X7100000000,0X710004B000,0,2,1,2,ADDSEG_NOSREG);
	SegRename(0X7100000000,".text");
	SegClass (0X7100000000,"CODE");
	SegDefReg(0x7100000000,"T",0x0);
	SegDefReg(0x7100000000,"DS",0x0);
	set_segm_type(0X7100000000,2);
	add_segm_ex(0X710004B000,0X710005D510,0,2,1,2,ADDSEG_NOSREG);
	SegRename(0X710004B000,".rodata");
	SegClass (0X710004B000,"CONST");
	SegDefReg(0x710004B000,"T",0x0);
	SegDefReg(0x710004B000,"DS",0x0);
	set_segm_type(0X710004B000,3);
	add_segm_ex(0X710005D510,0X7100060CFC,0,2,1,2,ADDSEG_NOSREG);
	SegRename(0X710005D510,".eh_frame_hdr");
	SegClass (0X710005D510,"CONST");
	SegDefReg(0x710005D510,"T",0x0);
	SegDefReg(0x710005D510,"DS",0x0);
	set_segm_type(0X710005D510,3);
	add_segm_ex(0X7100060CFC,0X710006F000,0,2,1,2,ADDSEG_NOSREG);
	SegRename(0X7100060CFC,".rodata");
	SegClass (0X7100060CFC,"CONST");
	SegDefReg(0x7100060CFC,"T",0x0);
	SegDefReg(0x7100060CFC,"DS",0x0);
	set_segm_type(0X7100060CFC,3);
	add_segm_ex(0X710006F000,0X7100076000,0,2,1,2,ADDSEG_NOSREG);
	SegRename(0X710006F000,".data");
	SegClass (0X710006F000,"DATA");
	SegDefReg(0x710006F000,"T",0x0);
	SegDefReg(0x710006F000,"DS",0x0);
	set_segm_type(0X710006F000,3);
	add_segm_ex(0X7100076000,0X71000FF308,0,2,1,2,ADDSEG_NOSREG);
	SegRename(0X7100076000,".bss");
	SegClass (0X7100076000,"BSS");
	SegDefReg(0x7100076000,"T",0x0);
	SegDefReg(0x7100076000,"DS",0x0);
	set_segm_type(0X7100076000,9);
	add_segm_ex(0X7100100008,0X7100100030,0,2,1,2,ADDSEG_NOSREG);
	SegRename(0X7100100008,"Imports");
	SegClass (0X7100100008,"XTRN");
	SegDefReg(0x7100100008,"T",0x0);
	SegDefReg(0x7100100008,"DS",0x0);
	set_segm_type(0X7100100008,1);
	set_inf_attr(INF_LOW_OFF, 0x7100000000);
	set_inf_attr(INF_HIGH_OFF, 0x7100100030);
}

static Enums_0(id) {

	id = add_enum(-1,"TimeType",0x1100000);
	add_enum_member(id,"UserSystemClock",	0,	-1);
	add_enum_member(id,"NetworkSystemClock",	0X1,	-1);
	add_enum_member(id,"LocalSystemClock",	0X2,	-1);
	id = add_enum(-1,"AlarmType",0x1100000);
	add_enum_member(id,"WakeupAlarm",	0,	-1);
	add_enum_member(id,"BackgroundTaskAlarm",	0X1,	-1);
	id = add_enum(-1,"r_type",0x1100000);
	add_enum_member(id,"JULIAN_DAY",	0,	-1);
	add_enum_member(id,"DAY_OF_YEAR",	0X1,	-1);
	add_enum_member(id,"MONTH_NTH_DAY_OF_WEEK",	0X2,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("gcc_va_list");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0x10), "void *");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "int");
	id = get_struc_id("nn::lmem::detail::HeapHead_Wrap");
	SetType(get_member_id(id, 0x0), "nn::lmem::detail::HeapHead *");
	SetType(get_member_id(id, 0x8), "s64");
	id = get_struc_id("nn::lmem::detail::HeapHead");
	SetType(get_member_id(id, 0x0), "uint");
	SetType(get_member_id(id, 0x8), "__int64");
	SetType(get_member_id(id, 0x10), "__int64");
	SetType(get_member_id(id, 0x18), "__int64");
	SetType(get_member_id(id, 0x20), "__int64");
	SetType(get_member_id(id, 0x28), "__int64");
	SetType(get_member_id(id, 0x30), "void *");
	SetType(get_member_id(id, 0x38), "void *");
	SetType(get_member_id(id, 0x40), "nn::os::SdkMutexType");
	SetType(get_member_id(id, 0x44), "char");
	SetType(get_member_id(id, 0x48), "__int64");
	SetType(get_member_id(id, 0x50), "__int64");
	SetType(get_member_id(id, 0x58), "__int64");
	SetType(get_member_id(id, 0x60), "__int64");
	SetType(get_member_id(id, 0x68), "__int64");
	id = get_struc_id("nn::os::MutexType");
	SetType(get_member_id(id, 0x0), "uint8_t");
	SetType(get_member_id(id, 0x1), "bool");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0x10), "nn::os::ThreadType *");
	SetType(get_member_id(id, 0x18), "union nn::os::MutexType::$08BC7EEE3E858AA1510DFCFE2DD2AE43");
	id = get_struc_id("nn::os::MutexType::$08BC7EEE3E858AA1510DFCFE2DD2AE43");
	SetType(get_member_id(id, 0x0), "int32_t[1]");
	SetType(get_member_id(id, 0x1), "nn::os::detail::InternalCriticalSectionStorage");
	id = get_struc_id("nn::os::detail::InternalCriticalSectionStorage");
	SetType(get_member_id(id, 0x0), "nn::os::detail::InternalCriticalSection");
	id = get_struc_id("nn::os::detail::InternalCriticalSection");
	SetType(get_member_id(id, 0x0), "u32");
	id = get_struc_id("nn::timesrv::detail::service::ITimeServiceManager::vtable");
	SetType(get_member_id(id, 0x0), "void (__fastcall *)(nn::ins::ISenderManager *)");
	SetType(get_member_id(id, 0x8), "void (__fastcall *)(nn::ins::ISenderManager *)");
	SetType(get_member_id(id, 0x10), "void (__fastcall *)(nn::ins::ISenderManager *)");
	SetType(get_member_id(id, 0x18), "void (__fastcall *)(nn::ins::ISenderManager *)");
	SetType(get_member_id(id, 0x20), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x28), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x30), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x38), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x40), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x48), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x50), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x58), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x60), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x68), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x70), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x78), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x80), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x88), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0x90), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *, s64)");
	SetType(get_member_id(id, 0x98), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0xA0), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	SetType(get_member_id(id, 0xA8), "nn::Result (__fastcall *)(nn::timesrv::detail::service::ITimeServiceManager *)");
	id = get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon");
	SetType(get_member_id(id, 0x0), "uint32_t");
	id = get_struc_id("SystemClockContext");
	SetType(get_member_id(id, 0x0), "s64");
	SetType(get_member_id(id, 0x8), "SteadyClockTimePoint");
	id = get_struc_id("SteadyClockTimePoint");
	SetType(get_member_id(id, 0x0), "s64");
	SetType(get_member_id(id, 0x8), "char[16]");
	id = get_struc_id("ClockSnapshot");
	SetType(get_member_id(id, 0x0), "SystemClockContext");
	SetType(get_member_id(id, 0x20), "SystemClockContext");
	SetType(get_member_id(id, 0x40), "s64");
	SetType(get_member_id(id, 0x48), "s64");
	SetType(get_member_id(id, 0x50), "TimeZone::CalendarTime");
	SetType(get_member_id(id, 0x58), "TimeZone::CalendarTime");
	SetType(get_member_id(id, 0x60), "TimeZone::CalendarAdditionalInfo");
	SetType(get_member_id(id, 0x78), "TimeZone::CalendarAdditionalInfo");
	SetType(get_member_id(id, 0x90), "SteadyClockTimePoint");
	SetType(get_member_id(id, 0xA8), "TimeZone::LocationName");
	SetType(get_member_id(id, 0xCC), "u8");
	SetType(get_member_id(id, 0xCD), "TimeType");
	SetType(get_member_id(id, 0xCE), "char[2]");
	id = get_struc_id("TimeZone::CalendarTime");
	SetType(get_member_id(id, 0x0), "s16");
	SetType(get_member_id(id, 0x2), "s8");
	SetType(get_member_id(id, 0x3), "s8");
	SetType(get_member_id(id, 0x4), "s8");
	SetType(get_member_id(id, 0x5), "s8");
	SetType(get_member_id(id, 0x6), "s8");
	SetType(get_member_id(id, 0x7), "char[1]");
	id = get_struc_id("TimeZone::CalendarAdditionalInfo");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "char[8]");
	SetType(get_member_id(id, 0x10), "bool");
	SetType(get_member_id(id, 0x14), "s32");
	id = get_struc_id("TimeZone::LocationName");
	SetType(get_member_id(id, 0x0), "char[36]");
	id = get_struc_id("nn::os::Thread");
	SetType(get_member_id(id, 0x0), "char[416]");
	SetType(get_member_id(id, 0x1A0), "char *");
	SetType(get_member_id(id, 0x1A8), "char[24]");
	id = get_struc_id("TimeServer");
	SetType(get_member_id(id, 0x0), "StandardSteadyClockCore");
	SetType(get_member_id(id, 0x78), "TickBasedSteadyClockCore");
	SetType(get_member_id(id, 0x98), "StandardLocalSystemClockCore");
	SetType(get_member_id(id, 0xD8), "StandardNetworkSystemClockCore");
	SetType(get_member_id(id, 0x120), "StandardUserSystemClockCore");
	SetType(get_member_id(id, 0x1C0), "TimeZone");
	SetType(get_member_id(id, 0x4220), "EphemeralNetworkSystemClockCore");
	SetType(get_member_id(id, 0x4260), "TimeSharedMemory");
	SetType(get_member_id(id, 0x42A8), "Unk42A8");
	SetType(get_member_id(id, 0x42F0), "Alarms");
	SetType(get_member_id(id, 0x4350), "LocalSystemClockContextWriter");
	SetType(get_member_id(id, 0x43A0), "NetworkSystemClockContextWriter");
	SetType(get_member_id(id, 0x43F8), "EphemeralNetworkSystemClockContextWriter");
	SetType(get_member_id(id, 0x4440), "Unk4440");
	id = get_struc_id("StandardSteadyClockCore");
	SetType(get_member_id(id, 0x0), "SteadyClockCore");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0x9), "bool");
	SetType(get_member_id(id, 0xC), "nn::os::SdkMutexType");
	SetType(get_member_id(id, 0x10), "s64");
	SetType(get_member_id(id, 0x18), "s64");
	SetType(get_member_id(id, 0x20), "char[16]");
	SetType(get_member_id(id, 0x30), "s64");
	SetType(get_member_id(id, 0x38), "s64");
	SetType(get_member_id(id, 0x40), "ContinuousAdjustmentTimePoint");
	id = get_struc_id("SteadyClockCore");
	SetType(get_member_id(id, 0x0), "struct SteadyClockCore::vtable *");
	id = get_struc_id("TickBasedSteadyClockCore");
	SetType(get_member_id(id, 0x0), "SteadyClockCore");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0x9), "bool");
	SetType(get_member_id(id, 0xA), "char[16]");
	SetType(get_member_id(id, 0x1A), "char[6]");
	id = get_struc_id("StandardLocalSystemClockCore");
	SetType(get_member_id(id, 0x0), "SystemClockCore");
	id = get_struc_id("SystemClockCore");
	SetType(get_member_id(id, 0x0), "struct SystemClockCore::vtable *");
	SetType(get_member_id(id, 0x8), "bool");
	SetType(get_member_id(id, 0x9), "char[6]");
	SetType(get_member_id(id, 0x10), "struct LocalSystemClockContextWriter *");
	SetType(get_member_id(id, 0x18), "SteadyClockCore *");
	SetType(get_member_id(id, 0x20), "SystemClockContext");
	id = get_struc_id("StandardNetworkSystemClockCore");
	SetType(get_member_id(id, 0x0), "SystemClockCore");
	SetType(get_member_id(id, 0x40), "s64");
	id = get_struc_id("Unk120");
	SetType(get_member_id(id, 0x0), "char[160]");
	id = get_struc_id("Unk1C0");
	SetType(get_member_id(id, 0x0), "bool");
	SetType(get_member_id(id, 0x4), "nn::os::SdkRecursiveMutexType");
	SetType(get_member_id(id, 0xC), "TimeZone::LocationName");
	SetType(get_member_id(id, 0x30), "TimeZone::Rule");
	SetType(get_member_id(id, 0x4030), "SteadyClockTimePoint");
	SetType(get_member_id(id, 0x4048), "u32");
	SetType(get_member_id(id, 0x404C), "TimeZone::TimeZoneRuleVersion");
	SetType(get_member_id(id, 0x405C), "char[4]");
	id = get_struc_id("EphemeralNetworkSystemClockCore");
	SetType(get_member_id(id, 0x0), "SystemClockCore");
	id = get_struc_id("Unk4260");
	SetType(get_member_id(id, 0x0), "nn::os::SharedMemoryType");
	SetType(get_member_id(id, 0x40), "char[8]");
	id = get_struc_id("nn::os::SharedMemoryType");
	SetType(get_member_id(id, 0x0), "u8");
	SetType(get_member_id(id, 0x1), "bool");
	SetType(get_member_id(id, 0x2), "bool");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0x10), "size_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "char[32]");
	SetType(get_member_id(id, 0x3C), "nn::os::detail::InternalCriticalSectionImplByHorizon");
	id = get_struc_id("nn::os::SystemEventType");
	SetType(get_member_id(id, 0x0), "union nn::os::SystemEventType::$F9FDA5A8B8A51F17058CC730098865AD");
	SetType(get_member_id(id, 0x28), "uint8_t");
	id = get_struc_id("nn::os::SystemEventType::$F9FDA5A8B8A51F17058CC730098865AD");
	SetType(get_member_id(id, 0x0), "nn::os::EventType");
	SetType(get_member_id(id, 0x1), "nn::os::detail::InterProcessEventType");
	id = get_struc_id("nn::os::EventType");
	SetType(get_member_id(id, 0x0), "nn::os::EventType *");
	SetType(get_member_id(id, 0x8), "nn::os::EventType *");
	SetType(get_member_id(id, 0x10), "bool");
	SetType(get_member_id(id, 0x11), "bool");
	SetType(get_member_id(id, 0x12), "bool");
	SetType(get_member_id(id, 0x13), "bool");
	SetType(get_member_id(id, 0x14), "uint32_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "nn::os::detail::InternalCriticalSectionImplByHorizon");
	SetType(get_member_id(id, 0x20), "nn::os::detail::InternalConditionVariableImplByHorizon");
	id = get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon");
	SetType(get_member_id(id, 0x0), "uint32_t");
	id = get_struc_id("nn::os::detail::InterProcessEventType");
	SetType(get_member_id(id, 0x0), "nn::os::EventType *");
	SetType(get_member_id(id, 0x8), "nn::os::EventType *");
	SetType(get_member_id(id, 0x10), "bool");
	SetType(get_member_id(id, 0x11), "bool");
	SetType(get_member_id(id, 0x12), "bool");
	SetType(get_member_id(id, 0x13), "bool");
	SetType(get_member_id(id, 0x14), "uint32_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "nn::os::detail::InternalCriticalSectionImplByHorizon");
	SetType(get_member_id(id, 0x20), "nn::os::detail::InternalConditionVariableImplByHorizon");
	id = get_struc_id("Unk42E8");
	SetType(get_member_id(id, 0x0), "StandardSteadyClockCore *");
	SetType(get_member_id(id, 0x8), "nn::os::SystemEventType *");
	SetType(get_member_id(id, 0x10), "void *");
	SetType(get_member_id(id, 0x18), "void *");
	SetType(get_member_id(id, 0x20), "nn::os::SystemEventType");
	SetType(get_member_id(id, 0x50), "char[16]");
	id = get_struc_id("LocalSystemClockContextWriter");
	SetType(get_member_id(id, 0x0), "nn::timesrv::detail::service::SystemClockContextWriter *");
	SetType(get_member_id(id, 0x8), "Node");
	SetType(get_member_id(id, 0x18), "nn::os::SdkMutexType");
	SetType(get_member_id(id, 0x20), "TimeSharedMemory *");
	SetType(get_member_id(id, 0x28), "bool");
	SetType(get_member_id(id, 0x30), "SystemClockContext");
	id = get_struc_id("NetworkSystemClockContextWriter");
	SetType(get_member_id(id, 0x0), "nn::timesrv::detail::service::SystemClockContextWriter *");
	SetType(get_member_id(id, 0x8), "Node");
	SetType(get_member_id(id, 0x18), "nn::os::SdkMutexType");
	SetType(get_member_id(id, 0x20), "TimeSharedMemory *");
	SetType(get_member_id(id, 0x28), "bool");
	SetType(get_member_id(id, 0x30), "SystemClockContext");
	SetType(get_member_id(id, 0x50), "SystemClockCore *");
	id = get_struc_id("EphemeralNetworkSystemClockContextWriter");
	SetType(get_member_id(id, 0x0), "nn::timesrv::detail::service::SystemClockContextWriter *");
	SetType(get_member_id(id, 0x8), "Node");
	SetType(get_member_id(id, 0x18), "nn::os::SdkMutexType");
	SetType(get_member_id(id, 0x1C), "char[4]");
	SetType(get_member_id(id, 0x20), "bool");
	SetType(get_member_id(id, 0x28), "SystemClockContext");
	id = get_struc_id("Unk4440");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "char[152]");
	SetType(get_member_id(id, 0xA0), "nn::os::EventType");
	SetType(get_member_id(id, 0xC8), "char[29456]");
	SetType(get_member_id(id, 0x73D8), "char[4096]");
	SetType(get_member_id(id, 0x83D8), "nn::lmem::detail::HeapHead *");
	SetType(get_member_id(id, 0x83E0), "nn::os::MutexType");
	SetType(get_member_id(id, 0x8400), "StaticService_Wrap");
	SetType(get_member_id(id, 0x8450), "StaticService_Wrap");
	SetType(get_member_id(id, 0x84A0), "AlarmService_Wrap");
	SetType(get_member_id(id, 0x84B8), "TimeServiceManager_Wrap");
	SetType(get_member_id(id, 0x85E8), "PowerStateRequestHandler_Wrap");
	SetType(get_member_id(id, 0x85F8), "bool");
	id = get_struc_id("StandardUserSystemClockCore");
	SetType(get_member_id(id, 0x0), "SystemClockCore");
	SetType(get_member_id(id, 0x40), "bool");
	SetType(get_member_id(id, 0x48), "StandardLocalSystemClockCore *");
	SetType(get_member_id(id, 0x50), "StandardNetworkSystemClockCore *");
	SetType(get_member_id(id, 0x58), "SteadyClockTimePoint");
	SetType(get_member_id(id, 0x70), "nn::os::SystemEventType");
	id = get_struc_id("TimeSharedMemory");
	SetType(get_member_id(id, 0x0), "nn::os::SharedMemoryType");
	SetType(get_member_id(id, 0x40), "SharedMemory *");
	id = get_struc_id("Unk42F0");
	SetType(get_member_id(id, 0x0), "SteadyClockCore *");
	SetType(get_member_id(id, 0x8), "nn::os::SystemEventType *");
	SetType(get_member_id(id, 0x10), "Node *");
	SetType(get_member_id(id, 0x18), "Node *");
	SetType(get_member_id(id, 0x20), "nn::os::SystemEventType");
	SetType(get_member_id(id, 0x50), "char[16]");
	id = get_struc_id("StaticService");
	SetType(get_member_id(id, 0x0), "StaticServiceSetupInfo");
	SetType(get_member_id(id, 0x8), "nn::lmem::detail::HeapHead *");
	SetType(get_member_id(id, 0x10), "StandardLocalSystemClockCore *");
	SetType(get_member_id(id, 0x18), "StandardUserSystemClockCore *");
	SetType(get_member_id(id, 0x20), "StandardNetworkSystemClockCore *");
	SetType(get_member_id(id, 0x28), "struct TimeServer *");
	SetType(get_member_id(id, 0x30), "TimeZone *");
	SetType(get_member_id(id, 0x38), "EphemeralNetworkSystemClockCore *");
	SetType(get_member_id(id, 0x40), "TimeSharedMemory *");
	id = get_struc_id("AlarmService");
	SetType(get_member_id(id, 0x0), "nn::lmem::detail::HeapHead **");
	SetType(get_member_id(id, 0x8), "Alarms *");
	id = get_struc_id("TimeServiceManager");
	SetType(get_member_id(id, 0x0), "struct TimeServer *");
	SetType(get_member_id(id, 0x8), "nn::lmem::detail::HeapHead **");
	SetType(get_member_id(id, 0x10), "StandardLocalSystemClockCore *");
	SetType(get_member_id(id, 0x18), "StandardUserSystemClockCore *");
	SetType(get_member_id(id, 0x20), "StandardNetworkSystemClockCore *");
	SetType(get_member_id(id, 0x28), "StandardSteadyClockCore *");
	SetType(get_member_id(id, 0x30), "TimeZone *");
	SetType(get_member_id(id, 0x38), "EphemeralNetworkSystemClockCore *");
	SetType(get_member_id(id, 0x40), "TimeSharedMemory *");
	SetType(get_member_id(id, 0x48), "Alarms *");
	SetType(get_member_id(id, 0x50), "LocalSystemClockContextWriter *");
	SetType(get_member_id(id, 0x58), "NetworkSystemClockContextWriter *");
	SetType(get_member_id(id, 0x60), "EphemeralNetworkSystemClockContextWriter *");
	SetType(get_member_id(id, 0x68), "Node");
	SetType(get_member_id(id, 0x78), "nn::os::SystemEventType");
	SetType(get_member_id(id, 0xA8), "Node");
	SetType(get_member_id(id, 0xB8), "nn::os::SystemEventType");
	SetType(get_member_id(id, 0xE8), "Node");
	SetType(get_member_id(id, 0xF8), "nn::os::SystemEventType");
	id = get_struc_id("StaticService_Wrap");
	SetType(get_member_id(id, 0x0), "nn::timesrv::detail::service::IStaticService::vtable *");
	SetType(get_member_id(id, 0x8), "StaticService");
	id = get_struc_id("AlarmService_Wrap");
	SetType(get_member_id(id, 0x0), "struct AlarmService_Wrap::nn::timesrv::detail::service::IAlarmService::vtable *");
	SetType(get_member_id(id, 0x8), "AlarmService");
	id = get_struc_id("TimeServiceManager_Wrap");
	SetType(get_member_id(id, 0x0), "nn::timesrv::detail::service::ITimeServiceManager::vtbl *");
	SetType(get_member_id(id, 0x8), "TimeServiceManager");
	id = get_struc_id("PowerStateRequestHandler_Wrap");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "PowerStateRequestHandler");
	id = get_struc_id("PowerStateRequestHandler");
	SetType(get_member_id(id, 0x0), "struct Unk42A8 *");
	id = get_struc_id("SystemClock_Wrap");
	SetType(get_member_id(id, 0x0), "nn::timesrv::detail::service::ISystemClock::vtbl *");
	SetType(get_member_id(id, 0x8), "SystemClock");
	SetType(get_member_id(id, 0x28), "u32");
	SetType(get_member_id(id, 0x30), "void *");
	id = get_struc_id("SystemClock");
	SetType(get_member_id(id, 0x0), "StandardUserSystemClockCore *");
	SetType(get_member_id(id, 0x8), "nn::lmem::detail::HeapHead *");
	SetType(get_member_id(id, 0x10), "u8");
	SetType(get_member_id(id, 0x11), "u8");
	SetType(get_member_id(id, 0x18), "OperationEvent *");
	id = get_struc_id("SteadyClock_Wrap");
	SetType(get_member_id(id, 0x0), "nn::timesrv::detail::service::ISteadyClock::vtbl *");
	SetType(get_member_id(id, 0x8), "SteadyClock");
	SetType(get_member_id(id, 0x18), "u32");
	SetType(get_member_id(id, 0x20), "void *");
	id = get_struc_id("SteadyClock");
	SetType(get_member_id(id, 0x0), "SteadyClockCore *");
	SetType(get_member_id(id, 0x8), "u8");
	SetType(get_member_id(id, 0x9), "u8");
	SetType(get_member_id(id, 0xA), "char[6]");
	id = get_struc_id("nn::os::SdkMutexType");
	SetType(get_member_id(id, 0x0), "u32");
	id = get_struc_id("Node");
	SetType(get_member_id(id, 0x0), "Node *");
	SetType(get_member_id(id, 0x8), "Node *");
	id = get_struc_id("SteadyClockCore::vtable");
	SetType(get_member_id(id, 0x0), "nn::Result (__fastcall *)(SteadyClockCore *, SteadyClockTimePoint *)");
	SetType(get_member_id(id, 0x8), "s64 (__fastcall *)(SteadyClockCore *)");
	SetType(get_member_id(id, 0x10), "s64 (__fastcall *)(SteadyClockCore *)");
	SetType(get_member_id(id, 0x18), "void (__fastcall *)(SteadyClockCore *, s64 *)");
	SetType(get_member_id(id, 0x20), "s64 (__fastcall *)(SteadyClockCore *)");
	SetType(get_member_id(id, 0x28), "s64 (__fastcall *)(SteadyClockCore *, s64 *)");
	SetType(get_member_id(id, 0x30), "nn::Result (__fastcall *)(SteadyClockCore *, s64 *)");
	SetType(get_member_id(id, 0x38), "nn::Result (__fastcall *)(SteadyClockCore *)");
	SetType(get_member_id(id, 0x40), "nn::Result (__fastcall *)(SteadyClockCore *)");
	SetType(get_member_id(id, 0x48), "nn::Result (__fastcall *)(SteadyClockCore *)");
	id = get_struc_id("nn::os::SdkRecursiveMutexType");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	id = get_struc_id("TimeZone::CalendarTimeInternal");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x4), "u32");
	SetType(get_member_id(id, 0x8), "u32");
	SetType(get_member_id(id, 0xC), "u32");
	SetType(get_member_id(id, 0x10), "u32");
	SetType(get_member_id(id, 0x14), "u32");
	SetType(get_member_id(id, 0x18), "u32");
	SetType(get_member_id(id, 0x1C), "u32");
	SetType(get_member_id(id, 0x20), "u32");
	SetType(get_member_id(id, 0x24), "char[16]");
	SetType(get_member_id(id, 0x34), "u32");
	SetType(get_member_id(id, 0x38), "u32");
	id = get_struc_id("TimeZoneService");
	SetType(get_member_id(id, 0x0), "StandardSteadyClockCore *");
	SetType(get_member_id(id, 0x8), "TimeZone *");
	SetType(get_member_id(id, 0x10), "u8");
	id = get_struc_id("TimeZone::TimeZoneRuleVersion");
	SetType(get_member_id(id, 0x0), "char[16]");
	id = get_struc_id("TimeZone::Rule");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "bool");
	SetType(get_member_id(id, 0xD), "bool");
	SetType(get_member_id(id, 0xE), "bool[2]");
	SetType(get_member_id(id, 0x10), "s64[1000]");
	SetType(get_member_id(id, 0x1F50), "u8[1000]");
	SetType(get_member_id(id, 0x2338), "ttinfo[128]");
	SetType(get_member_id(id, 0x2B38), "s8[512]");
	SetType(get_member_id(id, 0x2D38), "s32");
	SetType(get_member_id(id, 0x2D3C), "char[4804]");
	id = get_struc_id("ttinfo");
	SetType(get_member_id(id, 0x0), "s32");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "bool");
	SetType(get_member_id(id, 0xD), "bool");
	id = get_struc_id("nn::sf::detail::PointerAndSize");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "size_t");
	id = get_struc_id("TimeZone");
	SetType(get_member_id(id, 0x0), "bool");
	SetType(get_member_id(id, 0x4), "nn::os::SdkRecursiveMutexType");
	SetType(get_member_id(id, 0xC), "TimeZone::LocationName");
	SetType(get_member_id(id, 0x30), "TimeZone::Rule");
	SetType(get_member_id(id, 0x4030), "SteadyClockTimePoint");
	SetType(get_member_id(id, 0x4048), "u32");
	SetType(get_member_id(id, 0x404C), "TimeZone::TimeZoneRuleVersion");
	id = get_struc_id("SharedMemory");
	SetType(get_member_id(id, 0x0), "u32");
	SetType(get_member_id(id, 0x8), "SteadyClockTimePoint[2]");
	SetType(get_member_id(id, 0x38), "u32");
	SetType(get_member_id(id, 0x40), "SystemClockContext[2]");
	SetType(get_member_id(id, 0x80), "u32");
	SetType(get_member_id(id, 0x88), "SystemClockContext[2]");
	SetType(get_member_id(id, 0xC8), "u32");
	SetType(get_member_id(id, 0xCC), "bool[2]");
	SetType(get_member_id(id, 0xD0), "u32");
	SetType(get_member_id(id, 0xD8), "ContinuousAdjustmentTimePoint[2]");
	SetType(get_member_id(id, 0x148), "char[3768]");
	id = get_struc_id("StandardSteadyClockCore_7100032CCC");
	SetType(get_member_id(id, 0x0), "s64");
	SetType(get_member_id(id, 0x8), "s64");
	SetType(get_member_id(id, 0x10), "s64");
	SetType(get_member_id(id, 0x18), "s64");
	SetType(get_member_id(id, 0x20), "s64");
	SetType(get_member_id(id, 0x28), "char[16]");
	id = get_struc_id("SystemClockContextWriter");
	SetType(get_member_id(id, 0x0), "struct SystemClockContextWriter *");
	id = get_struc_id("ContinuousAdjustmentTimePoint");
	SetType(get_member_id(id, 0x0), "s64");
	SetType(get_member_id(id, 0x8), "s64");
	SetType(get_member_id(id, 0x10), "s64");
	SetType(get_member_id(id, 0x18), "s64");
	SetType(get_member_id(id, 0x20), "s64");
	SetType(get_member_id(id, 0x28), "char[16]");
	id = get_struc_id("Alarms");
	SetType(get_member_id(id, 0x0), "SteadyClockCore *");
	SetType(get_member_id(id, 0x8), "struct Unk42A8 *");
	SetType(get_member_id(id, 0x10), "Node");
	SetType(get_member_id(id, 0x20), "nn::os::SystemEventType");
	SetType(get_member_id(id, 0x50), "Node *");
	SetType(get_member_id(id, 0x58), "nn::os::SdkMutexType");
	id = get_struc_id("SteadyClockAlarm_Wrap");
	SetType(get_member_id(id, 0x0), "struct SteadyClockAlarm_Wrap::nn::timesrv::detail::service::ISteadyClockAlarm::vtable *");
	SetType(get_member_id(id, 0x8), "SteadyClockAlarm");
	SetType(get_member_id(id, 0x68), "bool");
	SetType(get_member_id(id, 0x70), "nn::lmem::detail::HeapHead **");
	id = get_struc_id("SteadyClockAlarm");
	SetType(get_member_id(id, 0x0), "Alarms *");
	SetType(get_member_id(id, 0x8), "Alarm");
	id = get_struc_id("Alarm");
	SetType(get_member_id(id, 0x0), "Node");
	SetType(get_member_id(id, 0x10), "u32");
	SetType(get_member_id(id, 0x18), "nn::os::SystemEventType");
	SetType(get_member_id(id, 0x48), "s64");
	SetType(get_member_id(id, 0x50), "nn::psc::sf::IPmStateLock *");
	id = get_struc_id("nn::timesrv::detail::service::ISteadyClockAlarm::vtable");
	SetType(get_member_id(id, 0x0), "void (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x8), "void (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x10), "void (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x18), "void (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x20), "nn::Result (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x28), "nn::Result (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x30), "nn::Result (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x38), "nn::Result (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x40), "nn::Result (__fastcall *)(SteadyClockAlarm *)");
	SetType(get_member_id(id, 0x48), "nn::Result (__fastcall *)(SteadyClockAlarm *)");
	id = get_struc_id("nn::psc::sf::IPmStateLock");
	SetType(get_member_id(id, 0x0), "struct nn::psc::sf::IPmStateLock::vtable *");
	id = get_struc_id("Unk42A8");
	SetType(get_member_id(id, 0x0), "nn::os::SystemEventType");
	SetType(get_member_id(id, 0x30), "bool");
	SetType(get_member_id(id, 0x34), "u32");
	SetType(get_member_id(id, 0x38), "bool");
	SetType(get_member_id(id, 0x3C), "u32");
	SetType(get_member_id(id, 0x40), "nn::os::SdkMutexType");
	SetType(get_member_id(id, 0x44), "char[4]");
	id = get_struc_id("nn::psc::sf::IPmStateLock::vtable");
	SetType(get_member_id(id, 0x0), "void (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	SetType(get_member_id(id, 0x8), "void (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	SetType(get_member_id(id, 0x10), "void (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	SetType(get_member_id(id, 0x18), "void (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	SetType(get_member_id(id, 0x20), "nn::Result (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	SetType(get_member_id(id, 0x28), "nn::Result (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	SetType(get_member_id(id, 0x30), "nn::Result (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	SetType(get_member_id(id, 0x38), "nn::Result (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	SetType(get_member_id(id, 0x40), "nn::Result (__fastcall *)(nn::psc::sf::IPmStateLock *)");
	id = get_struc_id("AlarmInfo");
	SetType(get_member_id(id, 0x0), "s64");
	SetType(get_member_id(id, 0x8), "u32");
	id = get_struc_id("TzifHeader");
	SetType(get_member_id(id, 0x0), "u8[4]");
	SetType(get_member_id(id, 0x4), "u8[1]");
	SetType(get_member_id(id, 0x5), "char[15]");
	SetType(get_member_id(id, 0x14), "u8[4]");
	SetType(get_member_id(id, 0x18), "u8[4]");
	SetType(get_member_id(id, 0x1C), "u8[4]");
	SetType(get_member_id(id, 0x20), "u8[4]");
	SetType(get_member_id(id, 0x24), "u8[4]");
	SetType(get_member_id(id, 0x28), "u8[4]");
	id = get_struc_id("rule");
	SetType(get_member_id(id, 0x0), "r_type");
	SetType(get_member_id(id, 0x4), "s32");
	SetType(get_member_id(id, 0x8), "s32");
	SetType(get_member_id(id, 0xC), "s32");
	SetType(get_member_id(id, 0x10), "s32");
	id = get_struc_id("nn::timesrv::detail::service::ITimeServiceManager::vtbl");
	SetType(get_member_id(id, 0x0), "void (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x8), "void (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x10), "void (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x18), "void (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x20), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x28), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x30), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x38), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x40), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x48), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x50), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x58), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x60), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x68), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x70), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x78), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x80), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x88), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x90), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0x98), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0xA0), "nn::Result (__fastcall *)(TimeServiceManager *)");
	SetType(get_member_id(id, 0xA8), "nn::Result (__fastcall *)(TimeServiceManager *)");
	id = get_struc_id("StaticServiceSetupInfo");
	SetType(get_member_id(id, 0x0), "bool");
	SetType(get_member_id(id, 0x1), "bool");
	SetType(get_member_id(id, 0x2), "bool");
	SetType(get_member_id(id, 0x3), "bool");
	SetType(get_member_id(id, 0x4), "bool");
	SetType(get_member_id(id, 0x5), "bool");
	id = get_struc_id("TimeZoneService_Wrap");
	SetType(get_member_id(id, 0x0), "nn::timesrv::detail::service::ITimeZoneService::vtable *");
	SetType(get_member_id(id, 0x8), "TimeZoneService");
	SetType(get_member_id(id, 0x20), "u32");
	SetType(get_member_id(id, 0x28), "void *");
	id = get_struc_id("SystemClockCore::vtable");
	SetType(get_member_id(id, 0x0), "nn::Result (__fastcall *)(SystemClockCore *, SystemClockContext *)");
	SetType(get_member_id(id, 0x8), "nn::Result (__fastcall *)(SystemClockCore *, SystemClockContext *)");
	SetType(get_member_id(id, 0x10), "nn::Result (__fastcall *)(SystemClockCore *)");
	SetType(get_member_id(id, 0x18), "nn::Result (__fastcall *)(SystemClockCore *)");
	id = get_struc_id("OperationEvent");
	SetType(get_member_id(id, 0x0), "Node");
	SetType(get_member_id(id, 0x10), "nn::os::SystemEventType");
	id = get_struc_id("nn::timesrv::detail::service::SystemClockContextWriter");
	SetType(get_member_id(id, 0x0), "nn::Result (__fastcall *)(struct LocalSystemClockContextWriter *, SystemClockContext *)");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"gcc_va_list",0);
	id = add_struc(-1,"nn::lmem::detail::HeapHead_Wrap",0);
	id = add_struc(-1,"nn::lmem::detail::HeapHead",0);
	id = add_struc(-1,"nn::os::MutexType",0);
	id = add_struc(-1,"nn::os::MutexType::$08BC7EEE3E858AA1510DFCFE2DD2AE43",1);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSectionStorage",0);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSection",0);
	id = add_struc(-1,"nn::timesrv::detail::service::ITimeServiceManager::vtable",0);
	id = add_struc(-1,"nn::os::detail::InternalCriticalSectionImplByHorizon",0);
	id = add_struc(-1,"SystemClockContext",0);
	id = add_struc(-1,"SteadyClockTimePoint",0);
	id = add_struc(-1,"ClockSnapshot",0);
	id = add_struc(-1,"TimeZone::CalendarTime",0);
	id = add_struc(-1,"TimeZone::CalendarAdditionalInfo",0);
	id = add_struc(-1,"TimeZone::LocationName",0);
	id = add_struc(-1,"nn::os::Thread",0);
	id = add_struc(-1,"TimeServer",0);
	id = add_struc(-1,"StandardSteadyClockCore",0);
	id = add_struc(-1,"SteadyClockCore",0);
	id = add_struc(-1,"TickBasedSteadyClockCore",0);
	id = add_struc(-1,"StandardLocalSystemClockCore",0);
	id = add_struc(-1,"SystemClockCore",0);
	id = add_struc(-1,"StandardNetworkSystemClockCore",0);
	id = add_struc(-1,"Unk120",0);
	id = add_struc(-1,"Unk1C0",0);
	id = add_struc(-1,"EphemeralNetworkSystemClockCore",0);
	id = add_struc(-1,"Unk4260",0);
	id = add_struc(-1,"nn::os::SharedMemoryType",0);
	id = add_struc(-1,"nn::os::SystemEventType",0);
	id = add_struc(-1,"nn::os::SystemEventType::$F9FDA5A8B8A51F17058CC730098865AD",1);
	id = add_struc(-1,"nn::os::EventType",0);
	id = add_struc(-1,"nn::os::detail::InternalConditionVariableImplByHorizon",0);
	id = add_struc(-1,"nn::os::detail::InterProcessEventType",0);
	id = add_struc(-1,"Unk42E8",0);
	id = add_struc(-1,"LocalSystemClockContextWriter",0);
	id = add_struc(-1,"NetworkSystemClockContextWriter",0);
	id = add_struc(-1,"EphemeralNetworkSystemClockContextWriter",0);
	id = add_struc(-1,"Unk4440",0);
	id = add_struc(-1,"StandardUserSystemClockCore",0);
	id = add_struc(-1,"TimeSharedMemory",0);
	id = add_struc(-1,"Unk42F0",0);
	id = add_struc(-1,"StaticService",0);
	id = add_struc(-1,"AlarmService",0);
	id = add_struc(-1,"TimeServiceManager",0);
	id = add_struc(-1,"StaticService_Wrap",0);
	id = add_struc(-1,"AlarmService_Wrap",0);
	id = add_struc(-1,"TimeServiceManager_Wrap",0);
	id = add_struc(-1,"PowerStateRequestHandler_Wrap",0);
	id = add_struc(-1,"PowerStateRequestHandler",0);
	id = add_struc(-1,"SystemClock_Wrap",0);
	id = add_struc(-1,"SystemClock",0);
	id = add_struc(-1,"SteadyClock_Wrap",0);
	id = add_struc(-1,"SteadyClock",0);
	id = add_struc(-1,"nn::os::SdkMutexType",0);
	id = add_struc(-1,"Node",0);
	id = add_struc(-1,"SteadyClockCore::vtable",0);
	id = add_struc(-1,"nn::os::SdkRecursiveMutexType",0);
	id = add_struc(-1,"TimeZone::CalendarTimeInternal",0);
	id = add_struc(-1,"TimeZoneService",0);
	id = add_struc(-1,"TimeZone::TimeZoneRuleVersion",0);
	id = add_struc(-1,"TimeZone::Rule",0);
	id = add_struc(-1,"ttinfo",0);
	id = add_struc(-1,"nn::sf::detail::PointerAndSize",0);
	id = add_struc(-1,"TimeZone",0);
	id = add_struc(-1,"SharedMemory",0);
	id = add_struc(-1,"StandardSteadyClockCore_7100032CCC",0);
	id = add_struc(-1,"SystemClockContextWriter",0);
	id = add_struc(-1,"ContinuousAdjustmentTimePoint",0);
	id = add_struc(-1,"Alarms",0);
	id = add_struc(-1,"SteadyClockAlarm_Wrap",0);
	id = add_struc(-1,"SteadyClockAlarm",0);
	id = add_struc(-1,"Alarm",0);
	id = add_struc(-1,"nn::timesrv::detail::service::ISteadyClockAlarm::vtable",0);
	id = add_struc(-1,"nn::psc::sf::IPmStateLock",0);
	id = add_struc(-1,"Unk42A8",0);
	id = add_struc(-1,"nn::psc::sf::IPmStateLock::vtable",0);
	id = add_struc(-1,"AlarmInfo",0);
	id = add_struc(-1,"TzifHeader",0);
	id = add_struc(-1,"rule",0);
	id = add_struc(-1,"nn::timesrv::detail::service::ITimeServiceManager::vtbl",0);
	id = add_struc(-1,"StaticServiceSetupInfo",0);
	id = add_struc(-1,"TimeZoneService_Wrap",0);
	id = add_struc(-1,"SystemClockCore::vtable",0);
	id = add_struc(-1,"OperationEvent",0);
	id = add_struc(-1,"nn::timesrv::detail::service::SystemClockContextWriter",0);
	
	id = get_struc_id("gcc_va_list");
	mid = add_struc_member(id,"__stack",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"__gr_top",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"__vr_top",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"__gr_offs",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"__vr_offs",	0X1C,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::lmem::detail::HeapHead_Wrap");
	mid = add_struc_member(id,"heapHead",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"size",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::SdkMutexType");
	mid = add_struc_member(id,"mutex",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::lmem::detail::HeapHead");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_10",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_18",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_20",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_28",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"heap_start",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"heap_end",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"mutex",	0X40,	0x60000400,	get_struc_id("nn::os::SdkMutexType"),	4);
	mid = add_struc_member(id,"option",	0X44,	0x000400,	-1,	1);
	mid = add_struc_member(id,"impl",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_70",	0X50,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_78",	0X58,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_80",	0X60,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_88",	0X68,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::timesrv::detail::service::ITimeServiceManager::vtable");
	mid = add_struc_member(id,"AddReference",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Release",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetProxyInfo",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetInterfaceTypeInfo",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStaticServiceAsUser",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStaticServiceAsAdmin",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStaticServiceAsRepair",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStaticServiceAsServiceManager",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupStandardSteadyClockCore",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupStandardLocalSystemClockCore",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupStandardNetworkSystemClockCore",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupStandardUserSystemClockCore",	0X58,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupTimeZoneServiceCore",	0X60,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupEphemeralNetworkSystemClockCore",	0X68,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStandardLocalClockOperationEvent",	0X70,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStandardNetworkClockOperationEventForServiceManager",	0X78,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetEphemeralNetworkClockOperationEventForServiceManager",	0X80,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStandardUserSystemClockAutomaticCorrectionUpdatedEvent",	0X88,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetStandardSteadyClockBaseTime",	0X90,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetClosestAlarmUpdatedEvent",	0X98,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"CheckAndSignalAlarms",	0XA0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetClosestAlarmInfo",	0XA8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("SteadyClockTimePoint");
	mid = add_struc_member(id,"time_point",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"clock_source_id",	0X8,	0x000400,	-1,	16);
	set_struc_align(id,3);
	
	id = get_struc_id("SystemClockContext");
	mid = add_struc_member(id,"offset",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"steady_time_point",	0X8,	0x60000400,	get_struc_id("SteadyClockTimePoint"),	24);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeZone::CalendarTime");
	mid = add_struc_member(id,"year",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"month",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"day",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"hour",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"minute",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"second",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad",	0X7,	0x000400,	-1,	1);
	set_struc_align(id,1);
	
	id = get_struc_id("TimeZone::CalendarAdditionalInfo");
	mid = add_struc_member(id,"day_of_week",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"day_of_year",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"name",	0X8,	0x000400,	-1,	8);
	mid = add_struc_member(id,"is_dst",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ut_off",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("TimeZone::LocationName");
	mid = add_struc_member(id,"name",	0,	0x000400,	-1,	36);
	
	id = get_struc_id("ClockSnapshot");
	mid = add_struc_member(id,"user_context",	0,	0x60000400,	get_struc_id("SystemClockContext"),	32);
	mid = add_struc_member(id,"network_context",	0X20,	0x60000400,	get_struc_id("SystemClockContext"),	32);
	mid = add_struc_member(id,"user_time",	0X40,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"network_time",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"user_calendar_time",	0X50,	0x60000400,	get_struc_id("TimeZone::CalendarTime"),	8);
	mid = add_struc_member(id,"network_calendar_time",	0X58,	0x60000400,	get_struc_id("TimeZone::CalendarTime"),	8);
	mid = add_struc_member(id,"user_calendar_additional_time",	0X60,	0x60000400,	get_struc_id("TimeZone::CalendarAdditionalInfo"),	24);
	mid = add_struc_member(id,"network_calendar_additional_time",	0X78,	0x60000400,	get_struc_id("TimeZone::CalendarAdditionalInfo"),	24);
	mid = add_struc_member(id,"steady_clock_time_point",	0X90,	0x60000400,	get_struc_id("SteadyClockTimePoint"),	24);
	mid = add_struc_member(id,"location_name",	0XA8,	0x60000400,	get_struc_id("TimeZone::LocationName"),	36);
	mid = add_struc_member(id,"is_automatic_correction_enabled",	0XCC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"type",	0XCD,	0x8800400,	get_enum("TimeType"),	1);
	mid = add_struc_member(id,"pad",	0XCE,	0x000400,	-1,	2);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::Thread");
	mid = add_struc_member(id,"unk000",	0,	0x000400,	-1,	416);
	mid = add_struc_member(id,"name",	0X1A0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"unk1A8",	0X1A8,	0x000400,	-1,	24);
	set_struc_align(id,3);
	
	id = get_struc_id("SteadyClockCore");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("ContinuousAdjustmentTimePoint");
	mid = add_struc_member(id,"rtc_offset",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"diff_scale",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"shift_amount",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"lower",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"upper",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"clock_source_id",	0X28,	0x000400,	-1,	16);
	set_struc_align(id,3);
	
	id = get_struc_id("StandardSteadyClockCore");
	mid = add_struc_member(id,"core",	0,	0x60000400,	get_struc_id("SteadyClockCore"),	8);
	mid = add_struc_member(id,"initialised",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"reset_detected",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"mutex",	0XC,	0x60000400,	get_struc_id("nn::os::SdkMutexType"),	4);
	mid = add_struc_member(id,"test_offset",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"internal_offset",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"clock_source_id",	0X20,	0x000400,	-1,	16);
	mid = add_struc_member(id,"rtc_offset",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"cached_time_point",	0X38,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"continuous_adjustment_time_point",	0X40,	0x60000400,	get_struc_id("ContinuousAdjustmentTimePoint"),	56);
	set_struc_align(id,3);
	
	id = get_struc_id("TickBasedSteadyClockCore");
	mid = add_struc_member(id,"core",	0,	0x60000400,	get_struc_id("SteadyClockCore"),	8);
	mid = add_struc_member(id,"initialised",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"reset_detected",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"clock_source_id",	0XA,	0x000400,	-1,	16);
	mid = add_struc_member(id,"unk1A",	0X1A,	0x000400,	-1,	6);
	set_struc_align(id,3);
	
	id = get_struc_id("SystemClockCore");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"initialised",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk09",	0X9,	0x000400,	-1,	6);
	mid = add_struc_member(id,"context_writer",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"steady_clock",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"context",	0X20,	0x60000400,	get_struc_id("SystemClockContext"),	32);
	set_struc_align(id,3);
	
	id = get_struc_id("StandardLocalSystemClockCore");
	mid = add_struc_member(id,"core",	0,	0x60000400,	get_struc_id("SystemClockCore"),	64);
	set_struc_align(id,3);
	
	id = get_struc_id("StandardNetworkSystemClockCore");
	mid = add_struc_member(id,"core",	0,	0x60000400,	get_struc_id("SystemClockCore"),	64);
	mid = add_struc_member(id,"sufficient_accuracy",	0X40,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("EphemeralNetworkSystemClockCore");
	mid = add_struc_member(id,"core",	0,	0x60000400,	get_struc_id("SystemClockCore"),	64);
	set_struc_align(id,3);
	
	id = get_struc_id("Node");
	mid = add_struc_member(id,"tail",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"head",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("LocalSystemClockContextWriter");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"node",	0X8,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"mutex",	0X18,	0x60000400,	get_struc_id("nn::os::SdkMutexType"),	4);
	mid = add_struc_member(id,"shared_memory",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"in_use",	0X28,	0x000400,	-1,	1);
	mid = add_struc_member(id,"context",	0X30,	0x60000400,	get_struc_id("SystemClockContext"),	32);
	set_struc_align(id,3);
	
	id = get_struc_id("NetworkSystemClockContextWriter");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"node",	0X8,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"mutex",	0X18,	0x60000400,	get_struc_id("nn::os::SdkMutexType"),	4);
	mid = add_struc_member(id,"shared_memory",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"in_use",	0X28,	0x000400,	-1,	1);
	mid = add_struc_member(id,"context",	0X30,	0x60000400,	get_struc_id("SystemClockContext"),	32);
	mid = add_struc_member(id,"system_clock",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("EphemeralNetworkSystemClockContextWriter");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"node",	0X8,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"mutex",	0X18,	0x60000400,	get_struc_id("nn::os::SdkMutexType"),	4);
	mid = add_struc_member(id,"pad",	0X1C,	0x000400,	-1,	4);
	mid = add_struc_member(id,"in_use",	0X20,	0x000400,	-1,	1);
	mid = add_struc_member(id,"context",	0X28,	0x60000400,	get_struc_id("SystemClockContext"),	32);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSection");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSectionStorage");
	mid = add_struc_member(id,"storage",	0,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSection"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::MutexType::$08BC7EEE3E858AA1510DFCFE2DD2AE43");
	mid = add_struc_member(id,"_mutexImage",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_mutex",	0,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionStorage"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::MutexType");
	mid = add_struc_member(id,"_state",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_isRecursive",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"_lockLevel",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_nestCount",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_ownerThread",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"anonymous_0",	0X18,	0x60000400,	get_struc_id("nn::os::MutexType::$08BC7EEE3E858AA1510DFCFE2DD2AE43"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon");
	mid = add_struc_member(id,"image",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::os::EventType");
	mid = add_struc_member(id,"field_0",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"field_8",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"is_signalled",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initially_signaled",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"should_autoclear",	0X12,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initialized",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"signal_counter",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signal_counter_2",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"crit",	0X1C,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon"),	4);
	mid = add_struc_member(id,"condvar",	0X20,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("StaticServiceSetupInfo");
	mid = add_struc_member(id,"unk_00",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_01",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_02",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_03",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_04",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_05",	0X5,	0x000400,	-1,	1);
	
	id = get_struc_id("StaticService");
	mid = add_struc_member(id,"setup_info",	0,	0x60000400,	get_struc_id("StaticServiceSetupInfo"),	6);
	mid = add_struc_member(id,"heap",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"local_system_clock",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"user_system_clock",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"network_system_clock",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"time",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"time_zone",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"ephemeral_network_clock",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"shared_memory",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("StaticService_Wrap");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"impl",	0X8,	0x60000400,	get_struc_id("StaticService"),	72);
	set_struc_align(id,3);
	
	id = get_struc_id("AlarmService");
	mid = add_struc_member(id,"heap",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"alarms",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("AlarmService_Wrap");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"impl",	0X8,	0x60000400,	get_struc_id("AlarmService"),	16);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::detail::InterProcessEventType");
	mid = add_struc_member(id,"field_0",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"field_8",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"unk2",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"is_initially_signaled",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"should_autoclear",	0X12,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk3",	0X13,	0x000400,	-1,	1);
	mid = add_struc_member(id,"readable_handle",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"writable_handle",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"crit",	0X1C,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon"),	4);
	mid = add_struc_member(id,"condvar",	0X20,	0x60000400,	get_struc_id("nn::os::detail::InternalConditionVariableImplByHorizon"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::SystemEventType::$F9FDA5A8B8A51F17058CC730098865AD");
	mid = add_struc_member(id,"event",	0,	0x60000400,	get_struc_id("nn::os::EventType"),	40);
	mid = add_struc_member(id,"ipe",	0,	0x60000400,	get_struc_id("nn::os::detail::InterProcessEventType"),	40);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::SystemEventType");
	mid = add_struc_member(id,"anonymous_0",	0,	0x60000400,	get_struc_id("nn::os::SystemEventType::$F9FDA5A8B8A51F17058CC730098865AD"),	40);
	mid = add_struc_member(id,"state",	0X28,	0x000400,	-1,	1);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeServiceManager");
	mid = add_struc_member(id,"time",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"heap",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"local_system_clock",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"user_system_clock",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"network_system_clock",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"steady_clock",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"time_zone",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"ephemeral_network_clock",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"shared_memory",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"alarms",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"local_system_context_writer",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"network_system_context_writer",	0X58,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"ephemeral_system_context_writer",	0X60,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"local_node",	0X68,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"local_event",	0X78,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	mid = add_struc_member(id,"network_node",	0XA8,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"network_event",	0XB8,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	mid = add_struc_member(id,"ephemeral_node",	0XE8,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"ephemeral_event",	0XF8,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeServiceManager_Wrap");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"impl",	0X8,	0x60000400,	get_struc_id("TimeServiceManager"),	296);
	set_struc_align(id,3);
	
	id = get_struc_id("PowerStateRequestHandler");
	mid = add_struc_member(id,"unk_42A8",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("PowerStateRequestHandler_Wrap");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"impl",	0X8,	0x60000400,	get_struc_id("PowerStateRequestHandler"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("Unk4440");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"unk0008",	0X8,	0x000400,	-1,	152);
	mid = add_struc_member(id,"event",	0XA0,	0x60000400,	get_struc_id("nn::os::EventType"),	40);
	mid = add_struc_member(id,"unk00C8",	0XC8,	0x000400,	-1,	29456);
	mid = add_struc_member(id,"heap_memory",	0X73D8,	0x000400,	-1,	4096);
	mid = add_struc_member(id,"heap",	0X83D8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"mutex",	0X83E0,	0x60000400,	get_struc_id("nn::os::MutexType"),	32);
	mid = add_struc_member(id,"static_service_su",	0X8400,	0x60000400,	get_struc_id("StaticService_Wrap"),	80);
	mid = add_struc_member(id,"static_service_s",	0X8450,	0x60000400,	get_struc_id("StaticService_Wrap"),	80);
	mid = add_struc_member(id,"alarm_service",	0X84A0,	0x60000400,	get_struc_id("AlarmService_Wrap"),	24);
	mid = add_struc_member(id,"time_service_manager",	0X84B8,	0x60000400,	get_struc_id("TimeServiceManager_Wrap"),	304);
	mid = add_struc_member(id,"power_state_service",	0X85E8,	0x60000400,	get_struc_id("PowerStateRequestHandler_Wrap"),	16);
	mid = add_struc_member(id,"service_s_p_setup",	0X85F8,	0x000400,	-1,	1);
	set_struc_align(id,3);
	
	id = get_struc_id("StandardUserSystemClockCore");
	mid = add_struc_member(id,"core",	0,	0x60000400,	get_struc_id("SystemClockCore"),	64);
	mid = add_struc_member(id,"automatic_correction",	0X40,	0x000400,	-1,	1);
	mid = add_struc_member(id,"local_system_clock",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"network_system_clock",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"time_point",	0X58,	0x60000400,	get_struc_id("SteadyClockTimePoint"),	24);
	mid = add_struc_member(id,"event",	0X70,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::SharedMemoryType");
	mid = add_struc_member(id,"state",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"managed",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"mapped",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"address",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"size",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"handle",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk1C",	0X1C,	0x000400,	-1,	32);
	mid = add_struc_member(id,"crit",	0X3C,	0x60000400,	get_struc_id("nn::os::detail::InternalCriticalSectionImplByHorizon"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeSharedMemory");
	mid = add_struc_member(id,"shared_memory",	0,	0x60000400,	get_struc_id("nn::os::SharedMemoryType"),	64);
	mid = add_struc_member(id,"memory",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::os::SdkRecursiveMutexType");
	mid = add_struc_member(id,"mutex",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_04",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("TimeZone::TimeZoneRuleVersion");
	mid = add_struc_member(id,"version",	0,	0x000400,	-1,	16);
	
	id = get_struc_id("ttinfo");
	mid = add_struc_member(id,"tt_utoff",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tt_isdst",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"tt_desigidx",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tt_ttisstd",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"tt_ttisut",	0XD,	0x000400,	-1,	1);
	set_struc_align(id,2);
	
	id = get_struc_id("TimeZone::Rule");
	mid = add_struc_member(id,"timecnt",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"typecnt",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"charcnt",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"goback",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"goahead",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad",	0XE,	0x000400,	-1,	2);
	mid = add_struc_member(id,"ats",	0X10,	0x30000400,	-1,	8000);
	mid = add_struc_member(id,"types",	0X1F50,	0x000400,	-1,	1000);
	mid = add_struc_member(id,"ttis",	0X2338,	0x60000400,	get_struc_id("ttinfo"),	2048);
	mid = add_struc_member(id,"chars",	0X2B38,	0x000400,	-1,	512);
	mid = add_struc_member(id,"defaulttype",	0X2D38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0X2D3C,	0x000400,	-1,	4804);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeZone");
	mid = add_struc_member(id,"initialised",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"mutex",	0X4,	0x60000400,	get_struc_id("nn::os::SdkRecursiveMutexType"),	8);
	mid = add_struc_member(id,"location",	0XC,	0x60000400,	get_struc_id("TimeZone::LocationName"),	36);
	mid = add_struc_member(id,"my_rule",	0X30,	0x60000400,	get_struc_id("TimeZone::Rule"),	16384);
	mid = add_struc_member(id,"steady_clock_time_point",	0X4030,	0x60000400,	get_struc_id("SteadyClockTimePoint"),	24);
	mid = add_struc_member(id,"total_location_name_count",	0X4048,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rule_version",	0X404C,	0x60000400,	get_struc_id("TimeZone::TimeZoneRuleVersion"),	16);
	set_struc_align(id,3);
	
	id = get_struc_id("Alarms");
	mid = add_struc_member(id,"steady_clock",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"unk_42A8",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"node",	0X10,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"event",	0X20,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	mid = add_struc_member(id,"unk_node",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"mutex",	0X58,	0x60000400,	get_struc_id("nn::os::SdkMutexType"),	4);
	set_struc_align(id,3);
	
	id = get_struc_id("Unk42A8");
	mid = add_struc_member(id,"event",	0,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	mid = add_struc_member(id,"unk_30",	0X30,	0x000400,	-1,	1);
	mid = add_struc_member(id,"priority1",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"unk_38",	0X38,	0x000400,	-1,	1);
	mid = add_struc_member(id,"priority2",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mutex",	0X40,	0x60000400,	get_struc_id("nn::os::SdkMutexType"),	4);
	mid = add_struc_member(id,"unk44",	0X44,	0x000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeServer");
	mid = add_struc_member(id,"standard_steady_clock",	0,	0x60000400,	get_struc_id("StandardSteadyClockCore"),	120);
	mid = add_struc_member(id,"tick_steady_clock",	0X78,	0x60000400,	get_struc_id("TickBasedSteadyClockCore"),	32);
	mid = add_struc_member(id,"local_system_clock",	0X98,	0x60000400,	get_struc_id("StandardLocalSystemClockCore"),	64);
	mid = add_struc_member(id,"network_system_clock",	0XD8,	0x60000400,	get_struc_id("StandardNetworkSystemClockCore"),	72);
	mid = add_struc_member(id,"user_system_clock",	0X120,	0x60000400,	get_struc_id("StandardUserSystemClockCore"),	160);
	mid = add_struc_member(id,"time_zone",	0X1C0,	0x60000400,	get_struc_id("TimeZone"),	16480);
	mid = add_struc_member(id,"ephemeral_network_clock",	0X4220,	0x60000400,	get_struc_id("EphemeralNetworkSystemClockCore"),	64);
	mid = add_struc_member(id,"shared_memory",	0X4260,	0x60000400,	get_struc_id("TimeSharedMemory"),	72);
	mid = add_struc_member(id,"unk_42A8",	0X42A8,	0x60000400,	get_struc_id("Unk42A8"),	72);
	mid = add_struc_member(id,"alarms",	0X42F0,	0x60000400,	get_struc_id("Alarms"),	96);
	mid = add_struc_member(id,"local_system_clock_context",	0X4350,	0x60000400,	get_struc_id("LocalSystemClockContextWriter"),	80);
	mid = add_struc_member(id,"network_system_clock_context",	0X43A0,	0x60000400,	get_struc_id("NetworkSystemClockContextWriter"),	88);
	mid = add_struc_member(id,"ephemeral_network_clock_context",	0X43F8,	0x60000400,	get_struc_id("EphemeralNetworkSystemClockContextWriter"),	72);
	mid = add_struc_member(id,"unk_4440",	0X4440,	0x60000400,	get_struc_id("Unk4440"),	34304);
	set_struc_align(id,3);
	
	id = get_struc_id("Unk120");
	mid = add_struc_member(id,"unk00",	0,	0x000400,	-1,	160);
	
	id = get_struc_id("Unk1C0");
	mid = add_struc_member(id,"initialised",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"mutex",	0X4,	0x60000400,	get_struc_id("nn::os::SdkRecursiveMutexType"),	8);
	mid = add_struc_member(id,"location",	0XC,	0x60000400,	get_struc_id("TimeZone::LocationName"),	36);
	mid = add_struc_member(id,"rule",	0X30,	0x60000400,	get_struc_id("TimeZone::Rule"),	16384);
	mid = add_struc_member(id,"steady_clock_time_point",	0X4030,	0x60000400,	get_struc_id("SteadyClockTimePoint"),	24);
	mid = add_struc_member(id,"total_location_name_count",	0X4048,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rule_version",	0X404C,	0x60000400,	get_struc_id("TimeZone::TimeZoneRuleVersion"),	16);
	mid = add_struc_member(id,"unk405C",	0X405C,	0x000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("Unk4260");
	mid = add_struc_member(id,"shared_memory",	0,	0x60000400,	get_struc_id("nn::os::SharedMemoryType"),	64);
	mid = add_struc_member(id,"unk40",	0X40,	0x000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("Unk42E8");
	mid = add_struc_member(id,"steady_clock",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"event_ptr",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"prev",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"next",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"event",	0X20,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	mid = add_struc_member(id,"unk50",	0X50,	0x000400,	-1,	16);
	set_struc_align(id,3);
	
	id = get_struc_id("Unk42F0");
	mid = add_struc_member(id,"steady_clock",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"event_ptr",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"tail",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"head",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"event",	0X20,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	mid = add_struc_member(id,"unk50",	0X50,	0x000400,	-1,	16);
	set_struc_align(id,3);
	
	id = get_struc_id("SystemClock");
	mid = add_struc_member(id,"system_clock_iface",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"heap",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"unk_10",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_11",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"operation_event",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("SystemClock_Wrap");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"impl",	0X8,	0x60000400,	get_struc_id("SystemClock"),	32);
	mid = add_struc_member(id,"heap_initialised",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"heap",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("SteadyClock");
	mid = add_struc_member(id,"steady_clock",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"unk_08",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"unk_09",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"pad",	0XA,	0x000400,	-1,	6);
	set_struc_align(id,3);
	
	id = get_struc_id("SteadyClock_Wrap");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"impl",	0X8,	0x60000400,	get_struc_id("SteadyClock"),	16);
	mid = add_struc_member(id,"heap_initialised",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"heap",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("SteadyClockCore::vtable");
	mid = add_struc_member(id,"GetCurrentTimePoint",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetCurrentRawTimePoint",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetTestOffset",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetTestOffset",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetInternalOffset",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetInternalOffset",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetRtcValue",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"_D0",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"_D1",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetSetupResultValue",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeZone::CalendarTimeInternal");
	mid = add_struc_member(id,"tm_sec",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_min",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_hour",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_mday",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_mon",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_year",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_wday",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_yday",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_isdst",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tm_zone",	0X24,	0x000400,	-1,	16);
	mid = add_struc_member(id,"tm_gmtoff",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"time_index",	0X38,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::sf::detail::PointerAndSize");
	mid = add_struc_member(id,"pointer",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"size",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("SharedMemory");
	mid = add_struc_member(id,"steady_time_index",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"steady_time_points",	0X8,	0x60000400,	get_struc_id("SteadyClockTimePoint"),	48);
	mid = add_struc_member(id,"local_systen_context_index",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"local_system_clock_contexts",	0X40,	0x60000400,	get_struc_id("SystemClockContext"),	64);
	mid = add_struc_member(id,"network_systen_context_index",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"network_system_clock_contexts",	0X88,	0x60000400,	get_struc_id("SystemClockContext"),	64);
	mid = add_struc_member(id,"automatic_correction_index",	0XC8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"automatic_corrections",	0XCC,	0x000400,	-1,	2);
	mid = add_struc_member(id,"continuous_index",	0XD0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"continuous_adjustment_time_points",	0XD8,	0x60000400,	get_struc_id("ContinuousAdjustmentTimePoint"),	112);
	mid = add_struc_member(id,"unk0148",	0X148,	0x000400,	-1,	3768);
	set_struc_align(id,3);
	
	id = get_struc_id("StandardSteadyClockCore_7100032CCC");
	mid = add_struc_member(id,"current_time",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"unk_08",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"unk_10",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time_diff1",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time_diff2",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"clock_source_id",	0X28,	0x000400,	-1,	16);
	set_struc_align(id,3);
	
	id = get_struc_id("SystemClockContextWriter");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("Alarm");
	mid = add_struc_member(id,"node",	0,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"priority",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"event",	0X18,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	mid = add_struc_member(id,"alert_time",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"psc_lock_service",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("SteadyClockAlarm");
	mid = add_struc_member(id,"alarms",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"alarm",	0X8,	0x60000400,	get_struc_id("Alarm"),	88);
	set_struc_align(id,3);
	
	id = get_struc_id("SteadyClockAlarm_Wrap");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"impl",	0X8,	0x60000400,	get_struc_id("SteadyClockAlarm"),	96);
	mid = add_struc_member(id,"heap_initialised",	0X68,	0x000400,	-1,	1);
	mid = add_struc_member(id,"heap",	0X70,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::timesrv::detail::service::ISteadyClockAlarm::vtable");
	mid = add_struc_member(id,"AddReference",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Release",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetProxyInfo",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetInterfaceTypeInfo",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetAlarmEvent",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Enable",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Disable",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"IsEnabled",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"CreateWakeLock",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"DestroyWakeLock",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::psc::sf::IPmStateLock");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::psc::sf::IPmStateLock::vtable");
	mid = add_struc_member(id,"AddReference",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Release",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetProxyInfo",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetInterfaceTypeInfo",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Initialize",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Lock",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Unlock",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"IsLocked",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetLockState",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("AlarmInfo");
	mid = add_struc_member(id,"alert_time",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"priority",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("TzifHeader");
	mid = add_struc_member(id,"tzh_magic",	0,	0x000400,	-1,	4);
	mid = add_struc_member(id,"tzh_version",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"tzh_reserved",	0X5,	0x000400,	-1,	15);
	mid = add_struc_member(id,"tzh_ttisutcnt",	0X14,	0x000400,	-1,	4);
	mid = add_struc_member(id,"tzh_ttisstdcnt",	0X18,	0x000400,	-1,	4);
	mid = add_struc_member(id,"tzh_leapcnt",	0X1C,	0x000400,	-1,	4);
	mid = add_struc_member(id,"tzh_timecnt",	0X20,	0x000400,	-1,	4);
	mid = add_struc_member(id,"tzh_typecnt",	0X24,	0x000400,	-1,	4);
	mid = add_struc_member(id,"tzh_charcnt",	0X28,	0x000400,	-1,	4);
	
	id = get_struc_id("rule");
	mid = add_struc_member(id,"type",	0,	0x28800400,	get_enum("r_type"),	4);
	mid = add_struc_member(id,"day",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"week",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"month",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"time",	0X10,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("nn::timesrv::detail::service::ITimeServiceManager::vtbl");
	mid = add_struc_member(id,"AddReference",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"Release",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetProxyInfo",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetInterfaceTypeInfo",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStaticServiceAsUser",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStaticServiceAsAdmin",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStaticServiceAsRepair",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStaticServiceAsServiceManager",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupStandardSteadyClockCore",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupStandardLocalSystemClockCore",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupStandardNetworkSystemClockCore",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupStandardUserSystemClockCore",	0X58,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupTimeZoneServiceCore",	0X60,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetupEphemeralNetworkSystemClockCore",	0X68,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStandardLocalClockOperationEvent",	0X70,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStandardNetworkClockOperationEventForServiceManager",	0X78,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetEphemeralNetworkClockOperationEventForServiceManager",	0X80,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetStandardUserSystemClockAutomaticCorrectionUpdatedEvent",	0X88,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetStandardSteadyClockBaseTime",	0X90,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetClosestAlarmUpdatedEvent",	0X98,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"CheckAndSignalAlarms",	0XA0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"GetClosestAlarmInfo",	0XA8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeZoneService");
	mid = add_struc_member(id,"standard_steady_clock",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"time_zone",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"unk_10",	0X10,	0x000400,	-1,	1);
	set_struc_align(id,3);
	
	id = get_struc_id("TimeZoneService_Wrap");
	mid = add_struc_member(id,"__vftable",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"impl",	0X8,	0x60000400,	get_struc_id("TimeZoneService"),	24);
	mid = add_struc_member(id,"heap_initialised",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"heap",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("SystemClockCore::vtable");
	mid = add_struc_member(id,"GetContext",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SetContext",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"_D1",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"_D0",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("OperationEvent");
	mid = add_struc_member(id,"node",	0,	0x60000400,	get_struc_id("Node"),	16);
	mid = add_struc_member(id,"event",	0X10,	0x60000400,	get_struc_id("nn::os::SystemEventType"),	48);
	set_struc_align(id,3);
	
	id = get_struc_id("nn::timesrv::detail::service::SystemClockContextWriter");
	mid = add_struc_member(id,"Write",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	create_insn	(0X7100000000);
	create_dword	(0X7100000004);
	create_insn	(0X7100000008);
	create_byte	(0X7100000018);
	make_array	(0X7100000018,	0X4);
	create_insn	(0X710000001C);
	create_dword	(0X710000002C);
	create_insn	(0X7100000030);
	create_dword	(0X710000004C);
	create_insn	(0X7100000050);
	create_byte	(0X7100000060);
	make_array	(0X7100000060,	0X4);
	create_insn	(0X7100000064);
	create_insn	(x=0X7100000090);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X7100000098);
	make_array	(0X7100000098,	0X4);
	create_insn	(0X710000009C);
	create_dword	(0X71000000AC);
	create_insn	(0X71000000B0);
	create_byte	(0X71000000C0);
	make_array	(0X71000000C0,	0X4);
	create_insn	(0X71000000C4);
	create_insn	(0X71000000D8);
	create_dword	(0X71000000DC);
	create_insn	(0X71000000E0);
	create_insn	(x=0X71000000F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000104);
	create_insn	(0X7100000110);
	create_insn	(x=0X7100000114);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000118);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000120);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000124);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000128);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000012C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000134);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000138);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000013C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000140);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000144);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000148);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000014C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000150);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000154);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000158);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000015C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000160);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000164);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000168);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000016C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000170);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000174);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000178);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000017C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000018C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000190);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000194);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000019C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000001B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000001C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000001D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000001E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000001EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000001F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000001FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000200);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000020C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000210);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000021C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000220);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000234);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000238);
	op_stkvar	(x,	1);
	make_array	(0X7100000244,	0XC);
	create_insn	(0X7100000250);
	create_insn	(x=0X710000025C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000264);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000268);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000026C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000274);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000278);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000027C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000028C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000290);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000002B0);
	create_insn	(x=0X71000002B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000002C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X71000002D4,	0XC);
	create_insn	(0X71000002E0);
	create_insn	(x=0X71000002E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000002E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000002EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000002F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000308);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000030C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000031C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000350);
	make_array	(0X7100000358,	0X8);
	create_insn	(0X7100000360);
	create_insn	(x=0X7100000364);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000368);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000036C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000370);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000388);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000038C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000039C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000003D0);
	make_array	(0X71000003D8,	0X8);
	create_insn	(0X71000003E0);
	make_array	(0X71000003E4,	0XC);
	create_insn	(x=0X71000003F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000003F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000003F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000003FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000404);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000408);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000040C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000410);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000448);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000454);
	create_insn	(x=0X710000046C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000048C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000494);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000498);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000049C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000004A0);
	op_stkvar	(x,	1);
	make_array	(0X71000004A8,	0X8);
	create_insn	(0X71000004B0);
	create_insn	(x=0X71000004B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X71000004BC,	0X4);
	create_insn	(0X71000004C0);
	create_insn	(x=0X71000004C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X71000004CC,	0X4);
	create_insn	(0X71000004D0);
	make_array	(0X71000004D4,	0XC);
	create_insn	(x=0X71000004E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000004E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000004F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000004F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000500);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000514);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000520);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000528);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000053C);
	op_stkvar	(x,	1);
	create_insn	(0X7100000544);
	create_dword	(0X710000054C);
	create_insn	(0X7100000550);
	create_insn	(x=0X7100000554);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000055C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000564);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000056C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000590);
	op_stkvar	(x,	1);
	make_array	(0X71000005B8,	0X8);
	create_insn	(0X71000005C0);
	make_array	(0X71000005C4,	0XC);
	create_insn	(x=0X71000005D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000005D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000005E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000005F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000005F4);
	op_stkvar	(x,	1);
	make_array	(0X71000005FC,	0X4);
	create_insn	(0X7100000600);
	make_array	(0X7100000604,	0XC);
	create_insn	(x=0X7100000610);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000620);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000628);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000630);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000644);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000650);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000654);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000668);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000066C);
	op_stkvar	(x,	1);
	create_insn	(0X7100000674);
	create_dword	(0X710000067C);
	create_qword	(0X7100000680);
	make_array	(0X7100000680,	0X10);
	create_insn	(0X7100000700);
	make_array	(0X7100000704,	0XC);
	create_insn	(x=0X7100000710);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000720);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000730);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000734);
	op_stkvar	(x,	1);
	make_array	(0X710000073C,	0X4);
	create_insn	(0X7100000740);
	make_array	(0X7100000744,	0XC);
	create_insn	(0X7100000750);
	create_insn	(x=0X7100000754);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X710000076C,	0X4);
	create_insn	(0X7100000770);
	set_name	(0X7100000770,	"delete");
	create_insn	(x=0X7100000774);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000790);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000794);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000798);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000007A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000007BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000007E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000007E8);
	op_plain_offset	(x,	1,	0X710007C000);
	op_plain_offset	(x,	129,	0X710007C000);
	create_insn	(x=0X71000007EC);
	op_plain_offset	(x,	1,	0X710007C000);
	op_plain_offset	(x,	129,	0X710007C000);
	create_insn	(x=0X71000007F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000007FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000800);
	op_stkvar	(x,	1);
	make_array	(0X7100000808,	0X8);
	create_insn	(0X7100000810);
	set_name	(0X7100000810,	"nullsub_1");
	make_array	(0X7100000814,	0XC);
	create_insn	(x=0X7100000820);
	op_stkvar	(x,	1);
	set_name	(0X7100000820,	"nnMain");
	create_insn	(x=0X7100000824);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000834);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000083C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100000844,	"__int64",	0);
	create_insn	(x=0X7100000870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000890);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000894);
	op_stkvar	(x,	1);
	create_insn	(0X710000089C);
	create_insn	(0X71000008A4);
	set_name	(0X71000008A4,	"nullsub_89");
	create_insn	(0X71000008A8);
	set_name	(0X71000008A8,	"_ZN2nn3err6detail11ExpHeapBaseD0Ev");
	create_insn	(x=0X71000008AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000008C8,	"a1",	0);
	create_insn	(0X71000008C8);
	set_name	(0X71000008C8,	"_ZN2nn3err6detail11ExpHeapBase11do_allocateEmm");
	create_insn	(0X71000008D0);
	set_name	(0X71000008D0,	"_ZN2nn3err6detail11ExpHeapBase13do_deallocateEPvmm");
	create_insn	(0X71000008D8);
	set_name	(0X71000008D8,	"_ZNK2nn3err6detail11ExpHeapBase11do_is_equalERKNS_14MemoryResourceE");
	create_insn	(x=0X71000008E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000008E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000008EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000008F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000008F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000008F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000008FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000904);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000090C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000092C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000934);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000938);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000093C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000940);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000944);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000094C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000950);
	op_stkvar	(x,	1);
	create_qword	(0X7100000958);
	create_byte	(0X7100000960);
	make_array	(0X7100000960,	0X4);
	create_insn	(0X7100000964);
	create_insn	(0X7100000980);
	make_array	(0X7100000984,	0XC);
	create_insn	(0X7100000990);
	create_insn	(x=0X7100000994);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000998);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000099C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000009A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000009A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000009A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000009B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000009B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000009BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000A10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000A28);
	op_hex		(x,	1);
	create_insn	(x=0X7100000A34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000A54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000A64);
	create_insn	(x=0X7100000A68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000A78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000A80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000B40);
	op_hex		(x,	1);
	create_insn	(x=0X7100000B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000B60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000BDC);
	create_insn	(0X7100000C20);
	create_insn	(x=0X7100000C24);
	op_plain_offset	(x,	1,	0X7100095020);
	op_plain_offset	(x,	129,	0X7100095020);
	create_insn	(x=0X7100000C30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000C34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000C3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000C48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000C50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000C58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000C60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000C6C);
	create_insn	(x=0X7100000CC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000CF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000D58);
	op_plain_offset	(x,	1,	0X7100095020);
	op_plain_offset	(x,	129,	0X7100095020);
	create_insn	(x=0X7100000D68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000D7C);
	create_insn	(x=0X7100000D90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000D94);
	op_plain_offset	(x,	1,	0X7100095000);
	op_plain_offset	(x,	129,	0X7100095000);
	create_insn	(x=0X7100000D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000DA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100000DEC);
	create_insn	(x=0X7100000E5C);
	op_hex		(x,	1);
	create_insn	(x=0X7100000E84);
	op_plain_offset	(x,	1,	0X7100095020);
	op_plain_offset	(x,	129,	0X7100095020);
	create_insn	(0X7100000E8C);
	create_insn	(x=0X7100000EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000ED4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000F04);
	create_insn	(x=0X7100000F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000F18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000F2C);
	op_hex		(x,	1);
	create_insn	(x=0X7100000F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100000F44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100000F78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100000F98);
	create_insn	(0X7100000FC0);
	create_insn	(x=0X7100001024);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100001058);
	create_insn	(x=0X7100001070);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000010B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000010BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000010C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000010FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001138);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100001170,	"jumptable 0000007100001194 case 14",	1);
	create_insn	(0X7100001170);
	set_cmt	(0X7100001178,	"jumptable 0000007100001194 cases 1,15,16,21,22",	1);
	set_cmt	(0X7100001180,	"switch 24 cases",	0);
	create_insn	(x=0X7100001188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100001194,	"switch jump",	0);
	set_cmt	(0X7100001198,	"jumptable 0000007100001194 cases 7,17",	1);
	create_insn	(0X7100001198);
	set_cmt	(0X71000011A8,	"jumptable 0000007100001194 default case",	1);
	create_insn	(0X71000011A8);
	set_name	(0X71000011A8,	"def_7100001194");
	set_cmt	(0X71000011C4,	"jumptable 0000007100001194 case 2",	1);
	create_insn	(0X71000011C4);
	set_cmt	(0X71000011D0,	"jumptable 0000007100001194 case 3",	1);
	create_insn	(0X71000011D0);
	set_cmt	(0X71000011E0,	"jumptable 0000007100001194 case 4",	1);
	create_insn	(0X71000011E0);
	set_cmt	(0X71000011FC,	"jumptable 0000007100001194 case 5",	1);
	create_insn	(0X71000011FC);
	set_cmt	(0X710000120C,	"jumptable 0000007100001194 case 6",	1);
	create_insn	(0X710000120C);
	set_cmt	(0X710000121C,	"jumptable 0000007100001194 case 8",	1);
	create_insn	(0X710000121C);
	set_cmt	(0X7100001228,	"jumptable 0000007100001194 case 9",	1);
	create_insn	(0X7100001228);
	set_cmt	(0X7100001244,	"jumptable 0000007100001194 case 10",	1);
	create_insn	(0X7100001244);
	set_cmt	(0X7100001250,	"jumptable 0000007100001194 case 11",	1);
	create_insn	(0X7100001250);
	set_cmt	(0X710000126C,	"jumptable 0000007100001194 case 12",	1);
	create_insn	(0X710000126C);
	set_cmt	(0X710000127C,	"jumptable 0000007100001194 case 13",	1);
	create_insn	(0X710000127C);
	set_cmt	(0X710000128C,	"jumptable 0000007100001194 case 18",	1);
	create_insn	(0X710000128C);
	set_cmt	(0X7100001298,	"jumptable 0000007100001194 case 19",	1);
	create_insn	(0X7100001298);
	set_cmt	(0X71000012B4,	"jumptable 0000007100001194 case 20",	1);
	create_insn	(0X71000012B4);
	set_cmt	(0X71000012E8,	"jumptable 0000007100001194 case 23",	1);
	create_insn	(0X71000012E8);
	create_insn	(0X71000012F4);
	set_cmt	(0X7100001300,	"jumptable 0000007100001194 case 0",	1);
	create_insn	(0X7100001300);
	create_insn	(x=0X7100001304);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000130C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001314);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000131C);
	op_stkvar	(x,	1);
	make_array	(0X7100001324,	0XC);
	create_insn	(x=0X7100001330);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001334);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001338);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000133C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001368);
	op_hex		(x,	1);
	create_insn	(x=0X710000136C);
	op_hex		(x,	1);
	create_insn	(0X7100001394);
	create_insn	(0X71000013B8);
	create_insn	(x=0X71000013DC);
	op_hex		(x,	1);
	create_insn	(x=0X7100001414);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000141C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001420);
	op_stkvar	(x,	1);
	create_insn	(0X7100001428);
	create_insn	(x=0X7100001430);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001434);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000143C);
	op_stkvar	(x,	1);
	make_array	(0X7100001444,	0XC);
	create_insn	(x=0X7100001450);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001454);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001458);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001460);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001468);
	op_plain_offset	(x,	1,	0X7100095020);
	op_plain_offset	(x,	129,	0X7100095020);
	create_insn	(0X710000147C);
	create_insn	(x=0X71000014B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000014B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000014BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000014C4);
	create_insn	(x=0X71000014C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000014CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000014D0);
	op_stkvar	(x,	1);
	make_array	(0X71000014D8,	0X8);
	create_insn	(0X71000014E0);
	create_insn	(x=0X71000014EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000014F4);
	op_plain_offset	(x,	1,	0X7100095020);
	op_plain_offset	(x,	129,	0X7100095020);
	create_insn	(x=0X7100001500);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001504);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100001510);
	create_insn	(x=0X7100001518);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100001548,	0X8);
	create_insn	(0X7100001550);
	create_insn	(x=0X710000155C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001564);
	op_plain_offset	(x,	1,	0X7100095020);
	op_plain_offset	(x,	129,	0X7100095020);
	create_insn	(0X710000156C);
	create_insn	(0X710000158C);
	make_array	(0X7100001598,	0X8);
	create_insn	(x=0X71000015A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000015A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000015A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000015AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000015B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000015EC);
	op_hex		(x,	1);
	create_insn	(x=0X7100001614);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001644);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001648);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000164C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001650);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001654);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000165C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001660);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000166C);
	op_plain_offset	(x,	1,	0X7100095020);
	op_plain_offset	(x,	129,	0X7100095020);
	create_insn	(0X7100001674);
	create_insn	(0X71000016AC);
	create_insn	(x=0X71000016D4);
	op_hex		(x,	1);
	create_insn	(x=0X71000016E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001718);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001744);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000174C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001750);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001754);
	op_stkvar	(x,	1);
	create_insn	(0X710000175C);
	create_insn	(0X710000176C);
	make_array	(0X710000177C,	0X4);
	create_insn	(0X7100001780);
	create_insn	(0X71000017B0);
	create_insn	(0X71000017DC);
	create_insn	(0X71000017F8);
	create_insn	(0X7100001804);
	create_insn	(0X7100001844);
	create_insn	(0X7100001848);
	make_array	(0X710000184C,	0X4);
	create_insn	(0X7100001850);
	make_array	(0X7100001854,	0XC);
	create_insn	(x=0X7100001860);
	op_stkvar	(x,	1);
	set_name	(0X7100001860,	"__cxa_pure_virtual");
	create_insn	(x=0X7100001870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001888);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001894);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000018A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000018A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000018A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000018AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000018B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000018BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000018CC);
	op_stkvar	(x,	1);
	create_insn	(0X71000018D4);
	create_qword	(0X71000018D8);
	create_insn	(x=0X71000018E0);
	op_stkvar	(x,	1);
	create_dword	(0X71000018EC);
	create_insn	(0X71000018F0);
	make_array	(0X71000018FC,	0X4);
	create_insn	(0X7100001900);
	set_name	(0X7100001900,	"nullsub_88");
	make_array	(0X7100001904,	0XC);
	create_insn	(0X7100001910);
	create_insn	(x=0X7100001928);
	op_hex		(x,	1);
	create_insn	(0X7100001944);
	make_array	(0X710000194C,	0X4);
	create_insn	(0X7100001950);
	create_insn	(x=0X7100001954);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001958);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000195C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001960);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001964);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001968);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000199C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000019B0);
	create_insn	(x=0X71000019B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000019C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000019C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000019D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000019FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001A0C);
	op_stkvar	(x,	1);
	make_array	(0X7100001A24,	0XC);
	create_qword	(0X7100001A30);
	make_array	(0X7100001A30,	0XA);
	create_insn	(0X7100001A80);
	create_insn	(x=0X7100001A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001AD0);
	op_stkvar	(x,	1);
	create_qword	(0X7100001AD8);
	create_insn	(0X7100001AE0);
	create_insn	(x=0X7100001AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B3C);
	op_stkvar	(x,	1);
	create_dword	(0X7100001B44);
	make_array	(0X7100001B48,	0X8);
	create_insn	(x=0X7100001B50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001B5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X7100001B64);
	make_array	(0X7100001B68,	0X8);
	create_insn	(x=0X7100001B70);
	op_stkvar	(x,	1);
	set_name	(0X7100001B70,	"_ZN2nn4diag6detail9AbortImplEPKcS3_S3_i");
	create_insn	(x=0X7100001B7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001B90);
	op_stkvar	(x,	1);
	set_name	(0X7100001B90,	"_ZN2nn4diag6detail9AbortImplEPKcS3_S3_iPKNS_6ResultES3_z");
	create_insn	(x=0X7100001BA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_qword	(0X7100001BB8);
	create_qword	(0X7100001BC0);
	make_array	(0X7100001BC0,	0X6);
	create_insn	(x=0X7100001BF0);
	op_stkvar	(x,	1);
	set_name	(0X7100001BF0,	"_ZN2nn4diag6detail5AbortEPKNS_6ResultE");
	make_array	(0X7100001C14,	0XC);
	create_insn	(0X7100001C20);
	create_insn	(0X7100001C38);
	make_array	(0X7100001C3C,	0X4);
	create_insn	(x=0X7100001C40);
	op_stkvar	(x,	1);
	set_name	(0X7100001C40,	"_ZN2nn4diag6detail19InvokeAbortObserverERKNS0_9AbortInfoE");
	create_insn	(x=0X7100001C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001C50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001C58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001CB0);
	op_stkvar	(x,	1);
	make_array	(0X7100001CB8,	0X8);
	create_insn	(x=0X7100001CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001D10);
	op_stkvar	(x,	1);
	make_array	(0X7100001D18,	0X8);
	create_insn	(0X7100001D20);
	make_array	(0X7100001D2C,	0X4);
	create_insn	(x=0X7100001D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001D80);
	op_stkvar	(x,	1);
	make_array	(0X7100001D88,	0X8);
	create_insn	(0X7100001D90);
	set_name	(0X7100001D90,	"nullsub_2");
	make_array	(0X7100001D94,	0XC);
	create_insn	(x=0X7100001DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001DB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001DC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001DC8);
	op_stkvar	(x,	1);
	create_insn	(0X7100001DD0);
	create_insn	(x=0X7100001DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001DEC);
	op_plain_offset	(x,	1,	0X7100095130);
	op_plain_offset	(x,	129,	0X7100095130);
	create_insn	(x=0X7100001DF0);
	op_plain_offset	(x,	1,	0X7100095130);
	op_plain_offset	(x,	129,	0X7100095130);
	create_insn	(x=0X7100001DF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001E00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001E04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001E1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001E24);
	op_stkvar	(x,	1);
	make_array	(0X7100001E2C,	0X4);
	create_insn	(x=0X7100001E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001E70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001E74);
	op_stkvar	(x,	1);
	make_array	(0X7100001E7C,	0X4);
	create_insn	(x=0X7100001E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001E8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001EA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001EB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001ECC);
	op_plain_offset	(x,	1,	0X7100095138);
	op_plain_offset	(x,	129,	0X7100095138);
	create_insn	(x=0X7100001ED0);
	op_plain_offset	(x,	1,	0X7100095138);
	op_plain_offset	(x,	129,	0X7100095138);
	create_insn	(x=0X7100001ED8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001EE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001EE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001EFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001F04);
	op_stkvar	(x,	1);
	make_array	(0X7100001F0C,	0X4);
	create_insn	(x=0X7100001F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001F54);
	op_stkvar	(x,	1);
	make_array	(0X7100001F5C,	0X4);
	create_insn	(0X7100001F60);
	set_name	(0X7100001F60,	"_ZN2nn6detail21UnexpectedDefaultImplEPKcS2_i_0");
	create_insn	(x=0X7100001F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001F7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100001F98);
	create_insn	(x=0X7100001F9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001FB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100001FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100001FCC);
	op_stkvar	(x,	1);
	make_array	(0X7100001FDC,	0X4);
	create_insn	(x=0X7100001FE0);
	op_stkvar	(x,	1);
	set_name	(0X7100001FE0,	"_ZN2nn6detail21UnexpectedDefaultImplEPKcS2_i");
	create_insn	(x=0X7100001FEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X7100001FFC);
	create_insn	(0X7100002000);
	set_name	(0X7100002000,	"ValidateNotNullptr");
	make_array	(0X710000200C,	0X4);
	create_insn	(0X7100002010);
	create_insn	(x=0X7100002014);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000201C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002020);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002024);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002028);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002030);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002038);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000203C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002040);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002048);
	op_stkvar	(x,	1);
	create_insn	(0X7100002054);
	create_insn	(x=0X7100002058);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002060);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002064);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000206C);
	op_hex		(x,	1);
	create_insn	(x=0X7100002070);
	op_stkvar	(x,	1);
	create_insn	(0X710000207C);
	create_insn	(x=0X7100002080);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002088);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000208C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002090);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002098);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000020A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000020A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000020B4);
	create_insn	(x=0X71000020B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000020BC);
	op_stkvar	(x,	1);
	create_insn	(0X7100002100);
	create_insn	(x=0X7100002104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000210C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002114);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000211C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002124);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002128);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002138);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002144);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100002158);
	create_insn	(x=0X710000215C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002164);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000216C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002170);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002178);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002180);
	op_stkvar	(x,	1);
	create_insn	(0X7100002190);
	create_insn	(0X7100002194);
	create_insn	(x=0X7100002198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000219C);
	op_stkvar	(x,	1);
	create_insn	(0X71000021A8);
	create_insn	(x=0X71000021AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000021CC);
	create_insn	(x=0X71000021D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000021F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002200);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002208);
	op_stkvar	(x,	1);
	create_insn	(0X7100002214);
	create_insn	(x=0X7100002218);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002220);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002224);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000222C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002234);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002240);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002244);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000225C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002280);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002284);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000228C);
	op_stkvar	(x,	1);
	create_insn	(0X7100002298);
	create_insn	(x=0X710000229C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000022A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000022A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000022B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000022C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000022D8);
	create_insn	(0X71000022DC);
	create_insn	(x=0X71000022E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000022E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000022F0);
	op_hex		(x,	1);
	create_insn	(0X71000022FC);
	create_insn	(x=0X7100002300);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002308);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002324);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002340);
	op_stkvar	(x,	1);
	create_insn	(0X7100002358);
	create_insn	(x=0X710000235C);
	op_stkvar	(x,	1);
	create_insn	(0X7100002364);
	create_insn	(x=0X7100002368);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002380);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002398);
	op_stkvar	(x,	1);
	create_insn	(0X71000023B0);
	create_insn	(x=0X71000023B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000023BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000023CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000023E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000023F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002404);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002408);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002430);
	op_stkvar	(x,	1);
	create_insn	(0X7100002438);
	create_insn	(x=0X710000243C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002444);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002448);
	op_stkvar	(x,	1);
	create_insn	(0X7100002454);
	create_insn	(x=0X7100002458);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000246C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002470);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002474);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000247C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002480);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002488);
	op_stkvar	(x,	1);
	make_array	(0X7100002494,	0XC);
	create_insn	(0X71000024A0);
	create_insn	(x=0X71000024A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000024FC);
	op_stkvar	(x,	1);
	create_insn	(0X710000250C);
	create_insn	(x=0X7100002514);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002518);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002520);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002524);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000252C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002530);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002534);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000253C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002540);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002544);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002548);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002558);
	op_stkvar	(x,	1);
	make_array	(0X7100002564,	0XC);
	create_insn	(0X7100002570);
	create_insn	(x=0X7100002574);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000257C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002584);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002588);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000259C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000025B8);
	create_insn	(x=0X71000025BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000025EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000025FC);
	create_insn	(x=0X7100002600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000260C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002610);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000261C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002630);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000263C);
	op_stkvar	(x,	1);
	make_array	(0X7100002648,	0X8);
	create_insn	(0X7100002650);
	create_insn	(x=0X7100002654);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002658);
	op_stkvar	(x,	1);
	create_insn	(0X7100002664);
	create_insn	(x=0X7100002668);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002670);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002674);
	op_hex		(x,	1);
	create_insn	(0X7100002680);
	create_insn	(x=0X7100002684);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000268C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002694);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000269C);
	op_stkvar	(x,	1);
	make_array	(0X71000026A8,	0X8);
	create_insn	(0X71000026B0);
	create_insn	(x=0X71000026B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000026B8);
	op_stkvar	(x,	1);
	make_array	(0X71000026C4,	0XC);
	create_insn	(0X71000026D0);
	create_insn	(x=0X71000026D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000026DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000026E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000026E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000026EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000026FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002700);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000271C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002720);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002724);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000272C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002730);
	op_stkvar	(x,	1);
	create_insn	(0X7100002740);
	create_insn	(x=0X7100002744);
	op_stkvar	(x,	1);
	create_insn	(0X710000274C);
	create_insn	(x=0X7100002750);
	op_stkvar	(x,	1);
	create_insn	(0X710000275C);
	create_insn	(x=0X7100002760);
	op_stkvar	(x,	1);
	create_insn	(0X7100002768);
	create_insn	(x=0X710000276C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002770);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002774);
	op_hex		(x,	1);
	create_insn	(0X7100002780);
	create_insn	(x=0X7100002784);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000278C);
	op_stkvar	(x,	1);
	create_insn	(0X71000027A0);
	create_insn	(x=0X71000027A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000027AC);
	create_insn	(x=0X71000027B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000027B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000027BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000027C8);
	create_insn	(x=0X71000027CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000027D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000027E0);
	create_insn	(x=0X71000027E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000027EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000027F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000027F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000027F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000027FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002800);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002804);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002808);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000280C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002810);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000281C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002820);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002828);
	op_stkvar	(x,	1);
	create_insn	(0X7100002834);
	create_insn	(x=0X7100002838);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002844);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000284C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000285C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002860);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002868);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002870);
	op_stkvar	(x,	1);
	create_insn	(0X710000287C);
	create_insn	(x=0X7100002880);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002888);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000288C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002898);
	op_hex		(x,	1);
	create_insn	(x=0X710000289C);
	op_stkvar	(x,	1);
	create_insn	(0X71000028A8);
	create_insn	(x=0X71000028AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000028B0);
	op_stkvar	(x,	1);
	make_array	(0X71000028C8,	0X8);
	create_insn	(x=0X71000028D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000028D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002910);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002914);
	op_stkvar	(x,	1);
	make_array	(0X710000291C,	0X4);
	create_insn	(x=0X7100002920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002924);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002928);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000292C);
	op_stkvar	(x,	1);
	create_insn	(0X7100002980);
	set_name	(0X7100002980,	"j_nullsub_10");
	make_array	(0X7100002984,	0XC);
	create_insn	(0X7100002990);
	make_array	(0X7100002994,	0XC);
	create_insn	(0X71000029A0);
	set_name	(0X71000029A0,	"j_nullsub_11");
	make_array	(0X71000029A4,	0XC);
	create_insn	(x=0X71000029B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000029BC);
	op_stkvar	(x,	1);
	make_array	(0X71000029C4,	0XC);
	create_insn	(0X71000029D0);
	set_name	(0X71000029D0,	"nullsub_3");
	make_array	(0X71000029D4,	0XC);
	create_insn	(x=0X71000029E0);
	op_stkvar	(x,	1);
	set_name	(0X71000029E0,	"_ZN2nn4lmem13CreateExpHeapEPvmi");
	create_insn	(x=0X71000029E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002A14);
	op_stkvar	(x,	1);
	make_array	(0X7100002A1C,	0X4);
	create_insn	(x=0X7100002A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002A24);
	op_stkvar	(x,	1);
	set_cmt	(0X7100002A38,	"result",	0);
	create_insn	(x=0X7100002A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002A50);
	op_stkvar	(x,	1);
	set_name	(0X7100002A50,	"_ZN2nn4lmem19AllocateFromExpHeapEPNS0_6detail8HeapHeadEm");
	create_insn	(x=0X7100002A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002AA0);
	op_stkvar	(x,	1);
	make_array	(0X7100002AA8,	0X8);
	create_insn	(x=0X7100002AB0);
	op_stkvar	(x,	1);
	set_name	(0X7100002AB0,	"_ZN2nn4lmem19AllocateFromExpHeapEPNS0_6detail8HeapHeadEmi");
	create_insn	(x=0X7100002AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002B0C);
	op_stkvar	(x,	1);
	make_array	(0X7100002B14,	0XC);
	create_insn	(x=0X7100002B20);
	op_stkvar	(x,	1);
	set_name	(0X7100002B20,	"_ZN2nn4lmem13FreeToExpHeapEPNS0_6detail8HeapHeadEPv");
	create_insn	(x=0X7100002B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002B5C);
	op_stkvar	(x,	1);
	create_insn	(0X7100002B64);
	create_insn	(x=0X7100002B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002B6C);
	op_stkvar	(x,	1);
	make_array	(0X7100002B74,	0XC);
	create_insn	(x=0X7100002B80);
	op_stkvar	(x,	1);
	set_name	(0X7100002B80,	"_ZN2nn4lmem18ResizeExpHeapBlockEPNS0_6detail8HeapHeadEPvm");
	create_insn	(x=0X7100002B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002BBC);
	op_stkvar	(x,	1);
	create_insn	(0X7100002BC4);
	create_insn	(x=0X7100002BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002BCC);
	op_stkvar	(x,	1);
	make_array	(0X7100002BD4,	0XC);
	create_insn	(x=0X7100002BE0);
	op_stkvar	(x,	1);
	set_name	(0X7100002BE0,	"_ZN2nn4lmem13AdjustExpHeapEPNS0_6detail8HeapHeadE");
	create_insn	(x=0X7100002BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002C04);
	op_hex		(x,	1);
	create_insn	(x=0X7100002C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002C1C);
	op_stkvar	(x,	1);
	create_insn	(0X7100002C24);
	create_insn	(x=0X7100002C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002C2C);
	op_stkvar	(x,	1);
	make_array	(0X7100002C34,	0XC);
	create_insn	(x=0X7100002C40);
	op_stkvar	(x,	1);
	set_name	(0X7100002C40,	"_ZN2nn4lmem6detail13CreateExpHeapEPvmi");
	create_insn	(x=0X7100002C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002C5C);
	op_hex		(x,	1);
	create_insn	(x=0X7100002C60);
	op_hex		(x,	1);
	create_insn	(x=0X7100002C78);
	op_hex		(x,	1);
	create_insn	(x=0X7100002CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002CC8);
	op_stkvar	(x,	1);
	create_insn	(0X7100002CD0);
	make_array	(0X7100002CD4,	0XC);
	create_insn	(x=0X7100002CE0);
	op_stkvar	(x,	1);
	set_name	(0X7100002CE0,	"_ZN2nn4lmem6detail16AllocFromExpHeapEPNS1_8HeapHeadEmi");
	create_insn	(x=0X7100002CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002D0C);
	op_hex		(x,	1);
	create_insn	(x=0X7100002D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002D84);
	op_stkvar	(x,	1);
	create_insn	(0X7100002D8C);
	create_insn	(x=0X7100002DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002DD4);
	op_stkvar	(x,	1);
	create_insn	(0X7100002DDC);
	create_insn	(0X7100002DEC);
	create_insn	(0X7100002E38);
	create_insn	(x=0X7100002E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002E48);
	op_stkvar	(x,	1);
	create_insn	(0X7100002E50);
	create_insn	(0X7100002E60);
	create_insn	(0X7100002EA0);
	create_insn	(x=0X7100002EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002EB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100002EC0);
	create_insn	(x=0X7100002ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002ED0);
	op_stkvar	(x,	1);
	create_insn	(0X7100002ED8);
	create_insn	(0X7100002EE0);
	create_insn	(x=0X7100002EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100002EFC);
	op_stkvar	(x,	1);
	make_array	(0X7100002F04,	0XC);
	create_insn	(0X7100002F10);
	set_name	(0X7100002F10,	"_ZN2nn4lmem6detail13FreeToExpHeapEPNS1_8HeapHeadEPv");
	create_insn	(0X7100002F94);
	create_insn	(0X7100002FA8);
	create_insn	(0X7100003054);
	create_insn	(0X7100003090);
	set_name	(0X7100003090,	"_ZN2nn4lmem6detail24ResizeExpHeapMemoryBlockEPNS1_8HeapHeadEPvm");
	create_insn	(x=0X7100003094);
	op_hex		(x,	1);
	make_array	(0X71000030A8,	0X8);
	create_insn	(0X71000030B0);
	set_name	(0X71000030B0,	"_ZN2nn4lmem6detail13AdjustExpHeapEPNS1_8HeapHeadE");
	create_insn	(0X71000030C0);
	create_insn	(0X7100003180);
	create_insn	(0X7100003250);
	set_name	(0X7100003250,	"_ZN2nn4lmem6detail12InitHeapHeadEPNS1_8HeapHeadEjPvS4_i");
	create_insn	(0X7100003260);
	make_array	(0X7100003264,	0XC);
	create_insn	(x=0X7100003270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003274);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000032B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000032B4);
	op_stkvar	(x,	1);
	make_array	(0X71000032BC,	0X4);
	create_insn	(x=0X71000032C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000032C4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000032D8,	"result",	0);
	create_insn	(x=0X71000032E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000032E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000032F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000032F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003320);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003324);
	op_stkvar	(x,	1);
	create_insn	(0X710000332C);
	create_insn	(x=0X7100003354);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003358);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003398);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000339C);
	op_stkvar	(x,	1);
	create_insn	(0X71000033A4);
	create_insn	(x=0X71000033A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000033AC);
	op_stkvar	(x,	1);
	make_array	(0X71000033B4,	0XC);
	create_insn	(x=0X71000033C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000033C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000033C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000033CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000033F4);
	op_hex		(x,	1);
	create_insn	(x=0X710000342C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003430);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003434);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003438);
	op_stkvar	(x,	1);
	create_insn	(0X7100003440);
	create_insn	(x=0X7100003464);
	op_hex		(x,	1);
	create_insn	(0X7100003480);
	create_insn	(x=0X7100003488);
	op_hex		(x,	1);
	create_insn	(x=0X7100003494);
	op_hex		(x,	1);
	create_insn	(0X71000034B8);
	create_insn	(x=0X71000034EC);
	op_hex		(x,	1);
	create_insn	(x=0X710000351C);
	op_hex		(x,	1);
	create_insn	(x=0X7100003524);
	op_hex		(x,	1);
	create_insn	(x=0X7100003584);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000358C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003590);
	op_stkvar	(x,	1);
	make_array	(0X7100003598,	0X8);
	create_insn	(0X71000035A0);
	create_insn	(0X71000035B0);
	make_array	(0X71000035D4,	0XC);
	create_insn	(0X71000035E0);
	create_insn	(x=0X7100003600);
	op_stkvar	(x,	1);
	set_name	(0X7100003600,	"_ZN2nn2os15InitializeMutexEPNS0_9MutexTypeEbi");
	create_insn	(x=0X7100003604);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003608);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003630);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000363C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003640);
	op_stkvar	(x,	1);
	make_array	(0X7100003648,	0X8);
	create_insn	(0X7100003650);
	set_name	(0X7100003650,	"_ZN2nn2os13FinalizeMutexEPNS0_9MutexTypeE");
	make_array	(0X7100003658,	0X8);
	create_insn	(x=0X7100003660);
	op_stkvar	(x,	1);
	set_name	(0X7100003660,	"_ZN2nn2os9LockMutexEPNS0_9MutexTypeE");
	create_insn	(x=0X7100003664);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000036A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000036A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000036B0);
	set_name	(0X71000036B0,	"_ZN2nn2os11UnlockMutexEPNS0_9MutexTypeE");
	create_insn	(0X71000036C4);
	create_insn	(0X71000036D0);
	make_array	(0X71000036E8,	0X8);
	create_insn	(x=0X71000036F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000036F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003728);
	op_stkvar	(x,	1);
	create_insn	(0X7100003730);
	make_array	(0X7100003738,	0X8);
	create_insn	(0X7100003740);
	make_array	(0X7100003744,	0XC);
	create_insn	(0X7100003750);
	make_array	(0X7100003754,	0XC);
	create_insn	(0X7100003760);
	make_array	(0X7100003764,	0XC);
	create_insn	(x=0X7100003770);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000378C);
	op_stkvar	(x,	1);
	create_insn	(0X7100003794);
	create_insn	(0X7100003798);
	set_name	(0X7100003798,	"j__ZNK2nn2os6detail36InternalCriticalSectionImplByHorizon23IsLockedByCurrentThreadEv");
	create_insn	(x=0X710000379C);
	op_stkvar	(x,	1);
	set_name	(0X710000379C,	"_ZN2nn2os12SdkMutexType4LockEv");
	create_insn	(x=0X71000037A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000037B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000037BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000037C4);
	create_insn	(x=0X71000037C8);
	op_stkvar	(x,	1);
	set_name	(0X71000037C8,	"_ZN2nn2os12SdkMutexType6UnlockEv");
	create_insn	(x=0X71000037CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000037E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000037E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000037F0);
	create_insn	(x=0X71000037F4);
	op_stkvar	(x,	1);
	set_name	(0X71000037F4,	"_ZN2nn2os21SdkRecursiveMutexType4LockEv");
	create_insn	(x=0X71000037F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003824);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003828);
	op_stkvar	(x,	1);
	create_insn	(0X7100003830);
	create_insn	(x=0X7100003834);
	op_stkvar	(x,	1);
	set_name	(0X7100003834,	"_ZN2nn2os21SdkRecursiveMutexType6UnlockEv");
	create_insn	(x=0X7100003838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000385C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003860);
	op_stkvar	(x,	1);
	create_insn	(0X7100003868);
	create_insn	(x=0X710000386C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003870);
	op_stkvar	(x,	1);
	create_insn	(0X7100003878);
	create_dword	(0X710000387C);
	create_insn	(x=0X7100003880);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X7100003880,	"_ZN2nn2os12CreateThreadEPNS0_10ThreadTypeEPFvPvES3_S3_mi");
	create_insn	(x=0X7100003888);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X71000038A8,	0X8);
	create_insn	(x=0X71000038B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000038B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X71000038C4,	0XC);
	create_insn	(x=0X71000038D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X71000038D0,	"_ZN2nn2os11StartThreadEPNS0_10ThreadTypeE");
	create_insn	(x=0X71000038D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X71000038E4,	0XC);
	create_insn	(0X71000038F0);
	set_name	(0X71000038F0,	"_ZN2nn2os20SetThreadNamePointerEPNS0_10ThreadTypeEPKc");
	create_insn	(x=0X7100003900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100003908);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100003914,	0XC);
	create_insn	(0X7100003920);
	make_array	(0X710000392C,	0X4);
	create_insn	(0X7100003930);
	make_array	(0X7100003934,	0XC);
	create_insn	(x=0X7100003940);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100003948);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100003954,	0XC);
	create_insn	(x=0X7100003960);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000396C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100003978);
	op_stkvar	(x,	1);
	create_dword	(0X7100003994);
	make_array	(0X7100003998,	0X8);
	create_insn	(0X71000039A0);
	create_dword	(0X71000039AC);
	create_insn	(x=0X71000039B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000039B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000039B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000039BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000039C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003B90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003B98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100003BDC);
	create_insn	(x=0X7100003BF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100003C14);
	create_insn	(x=0X7100003C24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100003C4C);
	op_plain_offset	(x,	1,	0X7100095310);
	op_plain_offset	(x,	129,	0X7100095310);
	create_insn	(x=0X7100003C58);
	op_plain_offset	(x,	1,	0X7100095310);
	op_plain_offset	(x,	129,	0X7100095310);
	create_insn	(x=0X7100003C60);
	op_plain_offset	(x,	1,	0X7100095310);
	op_plain_offset	(x,	129,	0X7100095310);
	create_insn	(x=0X7100003C64);
	op_plain_offset	(x,	1,	0X7100095310);
	op_plain_offset	(x,	129,	0X7100095310);
	create_insn	(x=0X7100003C68);
	op_plain_offset	(x,	1,	0X7100095310);
	op_plain_offset	(x,	129,	0X7100095310);
	create_insn	(x=0X7100003C70);
	op_plain_offset	(x,	1,	0X7100095310);
	op_plain_offset	(x,	129,	0X7100095310);
	create_insn	(x=0X7100003C7C);
	op_plain_offset	(x,	1,	0X7100095310);
	op_plain_offset	(x,	129,	0X7100095310);
	create_insn	(x=0X7100003C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003C9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100003CA4);
	create_qword	(0X7100003CA8);
	create_insn	(x=0X7100003CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003CB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100003D24);
	create_insn	(x=0X7100003D2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100003D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003D84);
	op_stkvar	(x,	1);
	create_insn	(0X7100003D8C);
	create_insn	(x=0X7100003D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003EC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003F8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003FB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100003FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100003FD8);
	op_stkvar	(x,	1);
	create_insn	(0X7100003FE0);
	create_insn	(x=0X7100003FE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000400C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004014);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004018);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000401C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004078);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000040A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000040CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000040D0);
	op_stkvar	(x,	1);
	make_array	(0X71000040D8,	0X8);
	create_insn	(0X71000040E0);
	create_insn	(x=0X7100004118);
	op_hex		(x,	1);
	make_array	(0X710000413C,	0X4);
	create_insn	(x=0X7100004140);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004144);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000414C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004150);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004154);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004180);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004184);
	op_stkvar	(x,	1);
	create_insn	(0X710000418C);
	create_insn	(x=0X71000041A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000041C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000041D4);
	create_insn	(x=0X71000041D8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000041E8,	"tick",	0);
	create_insn	(0X71000041E8);
	set_cmt	(0X7100004200,	"tick",	0);
	create_insn	(0X710000425C);
	create_insn	(x=0X7100004278);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000427C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004294);
	op_stkvar	(x,	1);
	set_cmt	(0X71000042B0,	"tick",	0);
	create_insn	(0X71000042D8);
	create_insn	(x=0X71000042E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000042EC);
	op_stkvar	(x,	1);
	create_insn	(0X7100004300);
	create_insn	(x=0X7100004308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000430C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004324);
	op_stkvar	(x,	1);
	create_insn	(0X7100004350);
	create_insn	(x=0X7100004358);
	op_stkvar	(x,	1);
	create_insn	(0X7100004364);
	create_insn	(x=0X710000436C);
	op_stkvar	(x,	1);
	create_insn	(0X7100004378);
	create_insn	(x=0X7100004380);
	op_stkvar	(x,	1);
	create_insn	(0X7100004390);
	create_insn	(x=0X7100004398);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000439C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043D4);
	op_stkvar	(x,	1);
	create_insn	(0X71000043DC);
	create_insn	(x=0X71000043E0);
	op_stkvar	(x,	1);
	set_name	(0X71000043E0,	"_ZN2nn2os6detail13MultiWaitImpl11WaitAnyImplILb0EEENS_6ResultEPPNS1_19MultiWaitHolderBaseEbNS_8TimeSpanEj");
	create_insn	(x=0X71000043E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000043F0);
	op_stkvar	(x,	1);
	create_insn	(0X710000445C);
	create_insn	(x=0X710000447C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004494);
	op_hex		(x,	1);
	create_insn	(0X71000044B8);
	create_insn	(x=0X71000044DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000044E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000044F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000044F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000044F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000044FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004504);
	op_stkvar	(x,	1);
	set_name	(0X7100004504,	"_ZN2nn2os6detail13MultiWaitImpl21NotifyAndWakeupThreadEPNS1_19MultiWaitHolderBaseE");
	create_insn	(x=0X7100004508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000450C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004534);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000453C);
	op_stkvar	(x,	1);
	create_insn	(0X7100004544);
	create_insn	(x=0X7100004554);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004558);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000455C);
	op_stkvar	(x,	1);
	make_array	(0X7100004564,	0XC);
	create_insn	(0X7100004570);
	set_name	(0X7100004570,	"_ZN2nn2os13GetSystemTickEv");
	make_array	(0X7100004578,	0X8);
	create_insn	(x=0X7100004580);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X7100004580,	"_ZNK2nn2os6detail11TickManager17ConvertToTimeSpanENS0_4TickE");
	create_insn	(x=0X7100004588);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100004594,	0XC);
	create_insn	(x=0X71000045A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000045A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000045B4);
	create_insn	(0X71000045D4);
	create_insn	(0X71000045F4);
	create_insn	(0X710000463C);
	create_insn	(0X71000046A8);
	create_insn	(0X71000046B0);
	create_insn	(x=0X71000046B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000046BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004718);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004720);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004728);
	op_stkvar	(x,	1);
	create_insn	(0X7100004748);
	create_insn	(0X7100004774);
	create_insn	(0X71000047A8);
	create_insn	(0X71000047D8);
	create_insn	(0X7100004808);
	create_insn	(0X7100004838);
	create_insn	(0X7100004868);
	create_insn	(0X7100004898);
	create_insn	(x=0X710000489C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000048A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000048A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000048AC);
	create_insn	(0X71000048B4);
	create_insn	(x=0X71000048E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000048E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000048E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004924);
	op_hex		(x,	1);
	create_insn	(x=0X7100004948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000494C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004950);
	op_stkvar	(x,	1);
	create_insn	(0X7100004958);
	create_insn	(x=0X710000495C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004960);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004980);
	op_hex		(x,	1);
	create_insn	(x=0X71000049A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000049AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000049B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000049BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000049C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000049CC);
	create_insn	(x=0X71000049D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000049DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000049E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000049F0);
	create_insn	(x=0X71000049F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A18);
	op_stkvar	(x,	1);
	create_insn	(0X7100004A20);
	create_insn	(x=0X7100004A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004A58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004AEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004AF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004B04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004B0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004B48);
	op_stkvar	(x,	1);
	create_insn	(0X7100004B50);
	create_insn	(0X7100004B5C);
	create_insn	(x=0X7100004B60);
	op_stkvar	(x,	1);
	set_name	(0X7100004B60,	"UnmapMemory_");
	create_insn	(x=0X7100004B80);
	op_stkvar	(x,	1);
	create_insn	(0X7100004B88);
	create_insn	(x=0X7100004B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004B90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004BCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004BE0);
	op_hex		(x,	1);
	create_insn	(x=0X7100004C08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004C2C);
	op_hex		(x,	1);
	create_insn	(x=0X7100004C48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004C6C);
	op_hex		(x,	1);
	create_insn	(x=0X7100004C88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004CAC);
	op_hex		(x,	1);
	create_insn	(x=0X7100004CC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004CEC);
	op_hex		(x,	1);
	create_insn	(x=0X7100004D08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004D2C);
	op_hex		(x,	1);
	create_insn	(x=0X7100004D48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004D6C);
	op_hex		(x,	1);
	create_insn	(x=0X7100004D88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004DAC);
	op_hex		(x,	1);
	create_insn	(x=0X7100004DC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004DEC);
	op_hex		(x,	1);
	create_insn	(x=0X7100004E08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004E2C);
	op_hex		(x,	1);
	create_insn	(x=0X7100004E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004E6C);
	op_stkvar	(x,	1);
	create_insn	(0X7100004E78);
	create_insn	(x=0X7100004EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004EB4);
	op_stkvar	(x,	1);
	create_insn	(0X7100004EBC);
	create_insn	(x=0X7100004ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004EDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100004EE4);
	create_dword	(0X7100004EEC);
	create_insn	(x=0X7100004EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004F0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004F14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004F48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100004F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004F5C);
	op_stkvar	(x,	1);
	create_insn	(0X7100004F64);
	create_insn	(x=0X7100004F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004F8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004F98);
	op_stkvar	(x,	1);
	set_cmt	(0X7100004FA0,	"__int64",	0);
	create_insn	(x=0X7100004FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004FBC);
	op_stkvar	(x,	1);
	create_insn	(0X7100004FC4);
	create_dword	(0X7100004FCC);
	create_insn	(0X7100004FD0);
	create_insn	(x=0X7100004FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100004FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005010);
	op_hex		(x,	1);
	create_insn	(x=0X7100005030);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000503C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005040);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005044);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005050);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005054);
	op_stkvar	(x,	1);
	create_insn	(0X710000505C);
	make_array	(0X7100005064,	0XC);
	create_insn	(0X7100005070);
	create_insn	(x=0X7100005094);
	op_hex		(x,	1);
	create_insn	(0X7100005144);
	create_insn	(0X7100005148);
	create_insn	(0X7100005150);
	make_array	(0X710000515C,	0X4);
	create_insn	(x=0X7100005160);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005164);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005168);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000516C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005170);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005174);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000517C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000051B0);
	create_insn	(0X7100005214);
	create_insn	(0X710000521C);
	create_insn	(0X7100005224);
	create_insn	(x=0X710000522C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005230);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005234);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005238);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000523C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005240);
	op_stkvar	(x,	1);
	make_array	(0X7100005248,	0X8);
	create_insn	(x=0X7100005250);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000525C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005264);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000526C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000052B8);
	create_insn	(x=0X7100005310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005314);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000531C);
	op_stkvar	(x,	1);
	make_array	(0X7100005324,	0XC);
	create_insn	(0X7100005330);
	create_insn	(x=0X7100005334);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005338);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000533C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005340);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005344);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005348);
	op_stkvar	(x,	1);
	create_insn	(0X71000053A0);
	create_insn	(x=0X71000053CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000053D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000053D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000053D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000053DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000053E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000053EC);
	create_insn	(x=0X71000053FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100005404);
	create_insn	(x=0X7100005460);
	op_stkvar	(x,	1);
	create_insn	(0X710000546C);
	create_insn	(0X7100005498);
	create_insn	(x=0X71000054A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000054AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000054B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005500);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005504);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005508);
	op_stkvar	(x,	1);
	create_insn	(0X7100005510);
	create_insn	(x=0X7100005514);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005518);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000551C);
	op_stkvar	(x,	1);
	make_array	(0X7100005524,	0XC);
	create_insn	(x=0X7100005530);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005534);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005544);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005550);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000555C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005564);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000556C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000055A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000055AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000055B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000055B8);
	set_name	(0X71000055B8,	"_ZN2nn2os6detail38InternalConditionVariableImplByHorizonC2Ev");
	create_insn	(0X71000055C0);
	create_insn	(0X71000055C8);
	set_name	(0X71000055C8,	"_ZN2nn2os6detail38InternalConditionVariableImplByHorizon6SignalEv");
	create_insn	(0X71000055D8);
	create_insn	(0X71000055DC);
	set_name	(0X71000055DC,	"_ZN2nn2os6detail38InternalConditionVariableImplByHorizon9BroadcastEv");
	create_insn	(0X71000055EC);
	create_insn	(x=0X71000055F0);
	op_stkvar	(x,	1);
	set_name	(0X71000055F0,	"_ZN2nn2os6detail38InternalConditionVariableImplByHorizon4WaitEPNS1_23InternalCriticalSectionE");
	create_insn	(x=0X71000055F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000055F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000560C);
	op_hex		(x,	1);
	create_insn	(x=0X7100005638);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005640);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005644);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005648);
	op_stkvar	(x,	1);
	create_insn	(0X7100005650);
	create_insn	(0X7100005654);
	create_insn	(0X710000565C);
	create_insn	(x=0X7100005660);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005664);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005668);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005680);
	op_hex		(x,	1);
	create_insn	(x=0X71000056C4);
	op_hex		(x,	1);
	create_insn	(x=0X71000056E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000056E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000056E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000056F4);
	create_insn	(x=0X71000056F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000056FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005700);
	op_stkvar	(x,	1);
	create_insn	(0X710000570C);
	create_insn	(x=0X7100005710);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005714);
	op_stkvar	(x,	1);
	create_insn	(0X710000571C);
	create_insn	(x=0X7100005738);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100005744);
	create_insn	(0X710000574C);
	create_insn	(0X7100005754);
	create_insn	(x=0X7100005758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100005764,	0XC);
	create_insn	(0X7100005770);
	create_insn	(x=0X7100005774);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005778);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000577C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005780);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005784);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000578C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005790);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005794);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000057A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000057D4);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X71000057D8);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X71000057DC);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X71000057E0);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X71000057E4);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X71000057FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005804);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005808);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000582C);
	op_hex		(x,	1);
	create_insn	(x=0X7100005848);
	op_hex		(x,	1);
	create_insn	(0X7100005860);
	set_cmt	(0X7100005868,	"dst",	0);
	set_cmt	(0X710000586C,	"src",	0);
	set_cmt	(0X7100005870,	"size",	0);
	create_insn	(0X7100005910);
	create_insn	(0X7100005944);
	create_insn	(0X7100005950);
	create_insn	(x=0X7100005968);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000596C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005970);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005978);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005980);
	op_stkvar	(x,	1);
	create_insn	(0X710000598C);
	create_insn	(x=0X7100005994);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000599C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000059A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000059A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000059AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000059B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000059B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000059C0);
	create_insn	(x=0X71000059C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000059C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000059CC);
	op_stkvar	(x,	1);
	set_cmt	(0X71000059DC,	"out",	0);
	set_cmt	(0X71000059E0,	"info_type",	0);
	set_cmt	(0X71000059E4,	"handle",	0);
	set_cmt	(0X71000059E8,	"info_subtype",	0);
	create_insn	(x=0X71000059F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000059F8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000059FC,	"out",	0);
	set_cmt	(0X7100005A00,	"info_type",	0);
	set_cmt	(0X7100005A04,	"handle",	0);
	set_cmt	(0X7100005A08,	"info_subtype",	0);
	create_insn	(x=0X7100005A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005A18);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005A1C,	"info_type",	0);
	set_cmt	(0X7100005A20,	"out",	0);
	set_cmt	(0X7100005A24,	"handle",	0);
	set_cmt	(0X7100005A28,	"info_subtype",	0);
	create_insn	(x=0X7100005A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005A5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005A7C);
	op_stkvar	(x,	1);
	create_insn	(0X7100005A84);
	create_insn	(x=0X7100005A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005A90);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005A9C,	"out",	0);
	set_cmt	(0X7100005AA0,	"info_type",	0);
	set_cmt	(0X7100005AA4,	"handle",	0);
	set_cmt	(0X7100005AA8,	"info_subtype",	0);
	create_insn	(x=0X7100005AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005AB8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005ABC,	"out",	0);
	set_cmt	(0X7100005AC0,	"info_type",	0);
	set_cmt	(0X7100005AC4,	"handle",	0);
	set_cmt	(0X7100005AC8,	"info_subtype",	0);
	create_insn	(x=0X7100005AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005AD8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005ADC,	"out",	0);
	set_cmt	(0X7100005AE0,	"info_type",	0);
	set_cmt	(0X7100005AE4,	"handle",	0);
	set_cmt	(0X7100005AE8,	"info_subtype",	0);
	create_insn	(x=0X7100005AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005B1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005B3C);
	op_stkvar	(x,	1);
	create_insn	(0X7100005B44);
	create_insn	(x=0X7100005B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005B4C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005B58,	"out",	0);
	set_cmt	(0X7100005B5C,	"info_type",	0);
	set_cmt	(0X7100005B60,	"handle",	0);
	set_cmt	(0X7100005B64,	"info_subtype",	0);
	create_insn	(x=0X7100005B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005B74);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005B78,	"info_type",	0);
	set_cmt	(0X7100005B7C,	"out",	0);
	set_cmt	(0X7100005B80,	"handle",	0);
	set_cmt	(0X7100005B84,	"info_subtype",	0);
	create_insn	(x=0X7100005B90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005B98);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005B9C,	"out",	0);
	set_cmt	(0X7100005BA0,	"info_type",	0);
	set_cmt	(0X7100005BA4,	"handle",	0);
	set_cmt	(0X7100005BA8,	"info_subtype",	0);
	create_insn	(x=0X7100005BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005BBC);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005BC0,	"out",	0);
	set_cmt	(0X7100005BC4,	"info_type",	0);
	set_cmt	(0X7100005BC8,	"handle",	0);
	set_cmt	(0X7100005BCC,	"info_subtype",	0);
	create_insn	(x=0X7100005BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005BF8);
	op_stkvar	(x,	1);
	create_insn	(0X7100005C74);
	create_insn	(x=0X7100005C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005C7C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005C90,	"out",	0);
	set_cmt	(0X7100005C94,	"info_type",	0);
	set_cmt	(0X7100005C9C,	"handle",	0);
	set_cmt	(0X7100005CA0,	"info_subtype",	0);
	create_insn	(x=0X7100005CA8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005CB0,	"out",	0);
	create_insn	(x=0X7100005CB0);
	op_stkvar	(x,	1);
	set_cmt	(0X7100005CB4,	"info_type",	0);
	set_cmt	(0X7100005CB8,	"handle",	0);
	set_cmt	(0X7100005CBC,	"info_subtype",	0);
	create_insn	(x=0X7100005CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005CE8);
	op_stkvar	(x,	1);
	create_insn	(0X7100005CF0);
	create_qword	(0X7100005CF8);
	create_insn	(0X7100005D00);
	create_insn	(x=0X7100005D04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005D40);
	op_stkvar	(x,	1);
	make_array	(0X7100005D4C,	0X4);
	create_insn	(0X7100005D50);
	create_insn	(x=0X7100005D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005D88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005D94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005DB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005DB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005DB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005DBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005DE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100005DE8);
	create_insn	(0X7100005DEC);
	create_insn	(x=0X7100005E3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005E40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005E48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005E4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005E54);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X7100005E58);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X7100005E64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005E70);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X7100005E7C);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X7100005E84);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(x=0X7100005E8C);
	op_plain_offset	(x,	1,	0X7100095230);
	op_plain_offset	(x,	129,	0X7100095230);
	create_insn	(0X7100005EA0);
	create_qword	(0X7100005EA8);
	create_insn	(0X7100005EB0);
	create_insn	(x=0X7100005EB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100005EC0);
	create_insn	(x=0X7100005EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005EC8);
	op_plain_offset	(x,	1,	0X710006F0E0);
	op_plain_offset	(x,	129,	0X710006F0E0);
	create_qword	(0X7100005ED0);
	make_array	(0X7100005ED0,	0X8);
	create_insn	(0X7100005F10);
	create_insn	(x=0X7100005F14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100005F64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100005F70);
	set_name	(0X7100005F70,	"_ZN2nn2os6detail36InternalCriticalSectionImplByHorizonC2Ev");
	create_insn	(0X7100005F78);
	set_name	(0X7100005F78,	"_ZN2nn2os6detail36InternalCriticalSectionImplByHorizon5EnterEv");
	create_insn	(x=0X7100005F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005F80);
	op_stkvar	(x,	1);
	create_insn	(0X7100005FB0);
	create_insn	(x=0X7100005FB4);
	op_hex		(x,	1);
	set_cmt	(0X7100005FC0,	"handle",	0);
	create_insn	(x=0X7100005FC0);
	op_hex		(x,	1);
	set_cmt	(0X7100005FC4,	"address",	0);
	set_cmt	(0X7100005FC8,	"tag",	0);
	create_insn	(x=0X7100005FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005FDC);
	op_hex		(x,	1);
	create_insn	(0X7100005FEC);
	create_insn	(0X7100005FF4);
	create_insn	(x=0X7100005FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100005FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006008);
	op_stkvar	(x,	1);
	create_insn	(0X7100006010);
	set_name	(0X7100006010,	"_ZN2nn2os6detail36InternalCriticalSectionImplByHorizon5LeaveEv");
	create_insn	(x=0X7100006014);
	op_stkvar	(x,	1);
	create_insn	(0X7100006048);
	create_insn	(x=0X7100006050);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006058);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006064);
	op_stkvar	(x,	1);
	create_insn	(0X710000606C);
	set_name	(0X710000606C,	"_ZNK2nn2os6detail36InternalCriticalSectionImplByHorizon23IsLockedByCurrentThreadEv");
	create_insn	(x=0X7100006078);
	op_hex		(x,	1);
	make_array	(0X710000608C,	0X4);
	create_insn	(0X7100006090);
	create_insn	(x=0X7100006094);
	op_stkvar	(x,	1);
	set_cmt	(0X710000609C,	"info_type",	0);
	set_cmt	(0X71000060A0,	"out",	0);
	create_insn	(x=0X71000060A0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000060A4,	"handle",	0);
	set_cmt	(0X71000060A8,	"info_subtype",	0);
	create_insn	(x=0X71000060B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000060B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000060C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000060D0);
	create_insn	(0X71000060D8);
	create_insn	(x=0X71000060DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000060E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000060E4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000060F8,	"out",	0);
	set_cmt	(0X71000060FC,	"handle",	0);
	set_cmt	(0X7100006100,	"info_type",	0);
	set_cmt	(0X7100006104,	"info_subtype",	0);
	set_cmt	(0X7100006110,	"out",	0);
	set_cmt	(0X7100006114,	"info_type",	0);
	set_cmt	(0X7100006118,	"handle",	0);
	set_cmt	(0X710000611C,	"info_subtype",	0);
	create_insn	(x=0X7100006134);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000613C);
	op_stkvar	(x,	1);
	make_array	(0X7100006148,	0X8);
	create_insn	(0X7100006150);
	create_insn	(x=0X7100006154);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006158);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000615C);
	op_stkvar	(x,	1);
	create_insn	(0X7100006190);
	create_insn	(x=0X71000061A4);
	op_hex		(x,	1);
	create_insn	(x=0X71000061A8);
	op_hex		(x,	1);
	create_insn	(x=0X71000061AC);
	op_hex		(x,	1);
	create_insn	(x=0X71000061B0);
	op_hex		(x,	1);
	create_insn	(x=0X71000061D0);
	op_hex		(x,	1);
	create_insn	(x=0X71000061E4);
	op_hex		(x,	1);
	create_insn	(x=0X71000061F0);
	op_hex		(x,	1);
	create_insn	(x=0X71000061F4);
	op_hex		(x,	1);
	create_insn	(0X7100006234);
	create_insn	(x=0X7100006240);
	op_hex		(x,	1);
	create_insn	(x=0X7100006254);
	op_hex		(x,	1);
	set_cmt	(0X7100006260,	"handle",	0);
	create_insn	(x=0X7100006260);
	op_hex		(x,	1);
	set_cmt	(0X7100006264,	"address",	0);
	set_cmt	(0X7100006268,	"tag",	0);
	create_insn	(x=0X7100006270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006284);
	op_hex		(x,	1);
	create_insn	(0X710000629C);
	create_insn	(0X71000062A8);
	create_insn	(0X71000062B0);
	create_insn	(x=0X71000062CC);
	op_hex		(x,	1);
	create_insn	(0X7100006304);
	create_insn	(0X7100006320);
	create_insn	(x=0X7100006340);
	op_hex		(x,	1);
	create_insn	(x=0X7100006384);
	op_hex		(x,	1);
	create_insn	(0X71000063B4);
	create_insn	(0X71000063C8);
	set_cmt	(0X71000063D8,	"__int64",	0);
	create_insn	(x=0X71000063E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000063E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000063EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000063F0);
	op_stkvar	(x,	1);
	create_insn	(0X71000063FC);
	create_insn	(x=0X7100006404);
	op_stkvar	(x,	1);
	create_dword	(0X710000640C);
	create_insn	(0X7100006410);
	create_insn	(x=0X7100006414);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006418);
	op_stkvar	(x,	1);
	create_insn	(0X710000642C);
	create_insn	(x=0X710000644C);
	op_hex		(x,	1);
	create_insn	(x=0X71000064A4);
	op_hex		(x,	1);
	create_insn	(0X71000064B8);
	create_insn	(0X71000064CC);
	create_insn	(x=0X7100006510);
	op_hex		(x,	1);
	create_insn	(0X7100006534);
	set_cmt	(0X7100006540,	"__int64",	0);
	create_insn	(x=0X7100006548);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006550);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006554);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006560);
	op_stkvar	(x,	1);
	create_qword	(0X7100006568);
	create_insn	(0X7100006570);
	create_insn	(x=0X7100006574);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006578);
	op_stkvar	(x,	1);
	create_insn	(0X71000065A0);
	create_insn	(x=0X71000065CC);
	op_hex		(x,	1);
	create_insn	(0X7100006604);
	create_insn	(x=0X7100006608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000660C);
	op_stkvar	(x,	1);
	create_insn	(0X7100006618);
	create_insn	(x=0X7100006624);
	op_hex		(x,	1);
	create_insn	(x=0X7100006628);
	op_hex		(x,	1);
	create_insn	(0X7100006660);
	set_cmt	(0X7100006674,	"handle",	0);
	create_insn	(x=0X7100006674);
	op_hex		(x,	1);
	set_cmt	(0X7100006678,	"address",	0);
	set_cmt	(0X710000667C,	"tag",	0);
	create_insn	(x=0X7100006684);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006694);
	op_hex		(x,	1);
	create_insn	(0X71000066A4);
	create_insn	(x=0X71000066C4);
	op_hex		(x,	1);
	create_insn	(0X71000066FC);
	create_insn	(x=0X7100006714);
	op_hex		(x,	1);
	set_cmt	(0X7100006744,	"__int64",	0);
	create_insn	(x=0X710000674C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006758);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006764);
	op_stkvar	(x,	1);
	create_insn	(0X710000676C);
	create_dword	(0X7100006774);
	make_array	(0X7100006778,	0X8);
	create_insn	(0X7100006780);
	create_insn	(x=0X7100006784);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000678C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006790);
	op_stkvar	(x,	1);
	create_insn	(0X71000067D0);
	create_insn	(x=0X71000067E0);
	op_hex		(x,	1);
	create_insn	(x=0X71000067F0);
	op_hex		(x,	1);
	create_insn	(x=0X7100006800);
	op_hex		(x,	1);
	create_insn	(x=0X7100006824);
	op_hex		(x,	1);
	create_insn	(x=0X7100006834);
	op_hex		(x,	1);
	create_insn	(x=0X710000683C);
	op_hex		(x,	1);
	set_cmt	(0X7100006864,	"handle",	0);
	create_insn	(x=0X7100006864);
	op_hex		(x,	1);
	set_cmt	(0X7100006868,	"address",	0);
	set_cmt	(0X710000686C,	"tag",	0);
	create_insn	(x=0X7100006874);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006888);
	op_hex		(x,	1);
	create_insn	(0X7100006898);
	create_insn	(0X71000068B4);
	create_insn	(0X71000068BC);
	create_insn	(0X71000068C8);
	create_insn	(x=0X71000068E0);
	op_hex		(x,	1);
	create_insn	(x=0X71000068EC);
	op_hex		(x,	1);
	create_insn	(x=0X71000068F8);
	op_hex		(x,	1);
	create_insn	(0X7100006924);
	create_insn	(x=0X7100006944);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000694C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006950);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000695C);
	op_stkvar	(x,	1);
	create_dword	(0X7100006964);
	make_array	(0X7100006968,	0X8);
	create_insn	(0X7100006970);
	create_insn	(x=0X7100006974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006978);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000069B0);
	op_hex		(x,	1);
	create_insn	(0X71000069C4);
	create_insn	(0X71000069D8);
	create_insn	(x=0X7100006A20);
	op_hex		(x,	1);
	create_insn	(0X7100006A44);
	set_cmt	(0X7100006A50,	"__int64",	0);
	create_insn	(x=0X7100006A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100006AD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100006AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006AE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100006B08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100006B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100006D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006DA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100006DB0);
	create_insn	(x=0X7100006DC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100006DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100006E10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X7100006E24);
	create_insn	(0X7100006E28);
	create_insn	(x=0X7100006E44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100006E6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100006E9C);
	make_array	(0X7100006EA4,	0XC);
	create_insn	(x=0X7100006EB0);
	op_stkvar	(x,	1);
	set_name	(0X7100006EB0,	"_ZN2nn2os17CreateSystemEventEPNS0_15SystemEventTypeENS0_14EventClearModeEb");
	create_insn	(x=0X7100006EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006ED8);
	op_stkvar	(x,	1);
	create_insn	(0X7100006EE0);
	create_insn	(x=0X7100006EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006EFC);
	op_stkvar	(x,	1);
	create_insn	(0X7100006F04);
	create_insn	(x=0X7100006F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006F14);
	op_stkvar	(x,	1);
	make_array	(0X7100006F1C,	0X4);
	create_insn	(x=0X7100006F20);
	op_stkvar	(x,	1);
	set_name	(0X7100006F20,	"_ZN2nn2os18DestroySystemEventEPNS0_15SystemEventTypeE");
	create_insn	(x=0X7100006F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006F48);
	op_stkvar	(x,	1);
	create_insn	(0X7100006F50);
	create_dword	(0X7100006F54);
	make_array	(0X7100006F58,	0X8);
	create_insn	(x=0X7100006F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006F84);
	op_stkvar	(x,	1);
	create_insn	(0X7100006F8C);
	create_insn	(x=0X7100006F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006FB4);
	op_stkvar	(x,	1);
	create_insn	(0X7100006FBC);
	create_insn	(x=0X7100006FC0);
	op_stkvar	(x,	1);
	set_name	(0X7100006FC0,	"_ZN2nn2os17SignalSystemEventEPNS0_15SystemEventTypeE");
	create_insn	(x=0X7100006FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100006FE4);
	op_stkvar	(x,	1);
	create_insn	(0X7100006FEC);
	create_insn	(x=0X7100006FF0);
	op_stkvar	(x,	1);
	set_name	(0X7100006FF0,	"_ZN2nn2os16ClearSystemEventEPNS0_15SystemEventTypeE");
	create_insn	(x=0X710000700C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007014);
	op_stkvar	(x,	1);
	create_insn	(0X710000701C);
	create_insn	(0X7100007020);
	set_name	(0X7100007020,	"j__ZN2nn2os6detail36GetReadableHandleOfInterProcessEventEPKNS1_21InterProcessEventTypeE");
	make_array	(0X7100007024,	0XC);
	create_insn	(0X7100007030);
	set_name	(0X7100007030,	"j__ZN2nn2os30GetWritableHandleOfSystemEventEPKNS0_15SystemEventTypeE");
	make_array	(0X7100007034,	0XC);
	create_insn	(x=0X7100007040);
	op_stkvar	(x,	1);
	set_name	(0X7100007040,	"_ZN2nn2os25InitializeMultiWaitHolderEPNS0_19MultiWaitHolderTypeEPNS0_15SystemEventTypeE");
	create_insn	(x=0X7100007070);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007080);
	op_stkvar	(x,	1);
	create_insn	(0X7100007088);
	create_insn	(x=0X710000709C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000070AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000070B4);
	create_qword	(0X71000070B8);
	create_insn	(0X71000070C0);
	set_name	(0X71000070C0,	"_ZN2nn2os6detail23CreateInterProcessEventEPNS1_21InterProcessEventTypeENS0_14EventClearModeE");
	create_insn	(x=0X71000070C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000070C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000070D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000070DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000070E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000070EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000070F8);
	create_insn	(x=0X7100007100);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007124);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007128);
	op_stkvar	(x,	1);
	make_array	(0X7100007134,	0XC);
	create_insn	(x=0X7100007140);
	op_stkvar	(x,	1);
	set_name	(0X7100007140,	"_ZN2nn2os6detail24DestroyInterProcessEventEPNS1_21InterProcessEventTypeE");
	create_insn	(x=0X7100007144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000718C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007190);
	op_stkvar	(x,	1);
	make_array	(0X7100007198,	0X8);
	create_insn	(0X71000071A0);
	create_insn	(0X71000071B0);
	create_insn	(0X71000071C0);
	make_array	(0X71000071C8,	0X8);
	create_insn	(0X71000071D0);
	set_name	(0X71000071D0,	"_ZN2nn2os6detail22ClearInterProcessEventEPNS1_21InterProcessEventTypeE");
	create_insn	(0X71000071E0);
	make_array	(0X71000071E8,	0X8);
	create_insn	(0X71000071F0);
	set_name	(0X71000071F0,	"_ZN2nn2os6detail36GetReadableHandleOfInterProcessEventEPKNS1_21InterProcessEventTypeE");
	make_array	(0X71000071F8,	0X8);
	create_insn	(0X7100007200);
	set_name	(0X7100007200,	"_ZN2nn2os30GetWritableHandleOfSystemEventEPKNS0_15SystemEventTypeE");
	create_insn	(0X7100007208);
	set_name	(0X7100007208,	"CreateEvent_w");
	create_insn	(x=0X710000720C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007210);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007220);
	op_stkvar	(x,	1);
	set_cmt	(0X7100007224,	"out_write_handle",	0);
	create_insn	(x=0X7100007224);
	op_stkvar	(x,	1);
	set_cmt	(0X7100007228,	"out_read_handle",	0);
	create_insn	(x=0X7100007228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000722C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007238);
	op_hex		(x,	1);
	create_insn	(x=0X710000724C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007250);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000725C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000726C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007270);
	op_stkvar	(x,	1);
	create_insn	(0X710000727C);
	create_insn	(x=0X710000728C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007290);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000729C);
	op_stkvar	(x,	1);
	create_insn	(0X71000072A4);
	create_insn	(x=0X71000072A8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000072B4,	"__int64",	0);
	create_insn	(x=0X71000072BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000072C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000072D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000072D8);
	create_insn	(x=0X71000072DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000072EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000072F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007300);
	op_stkvar	(x,	1);
	create_insn	(0X7100007308);
	create_insn	(x=0X710000730C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000731C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007324);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007330);
	op_stkvar	(x,	1);
	create_qword	(0X7100007338);
	create_insn	(0X7100007340);
	create_insn	(x=0X7100007344);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007348);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007350);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007378);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007380);
	op_hex		(x,	1);
	create_insn	(x=0X710000738C);
	op_stkvar	(x,	1);
	create_insn	(0X710000739C);
	create_insn	(x=0X71000073A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000073A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000073C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000073C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000073D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000073DC);
	op_stkvar	(x,	1);
	make_array	(0X71000073E8,	0X8);
	create_insn	(x=0X71000073F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000073F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000073FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007414);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007418);
	op_stkvar	(x,	1);
	create_insn	(0X7100007420);
	create_insn	(x=0X710000743C);
	op_hex		(x,	1);
	create_insn	(x=0X710000744C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007450);
	op_stkvar	(x,	1);
	create_insn	(0X7100007458);
	create_insn	(x=0X710000745C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007460);
	op_stkvar	(x,	1);
	make_array	(0X7100007468,	0X8);
	create_insn	(x=0X7100007470);
	op_stkvar	(x,	1);
	set_name	(0X7100007470,	"_ZN2nn2os15InitializeEventEPNS0_9EventTypeEbNS0_14EventClearModeE");
	create_insn	(x=0X7100007474);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007478);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000074B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000074BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000074C0);
	op_stkvar	(x,	1);
	make_array	(0X71000074C8,	0X8);
	create_insn	(0X71000074D0);
	set_name	(0X71000074D0,	"_ZN2nn2os13FinalizeEventEPNS0_9EventTypeE");
	make_array	(0X71000074D8,	0X8);
	create_insn	(x=0X71000074E0);
	op_stkvar	(x,	1);
	set_name	(0X71000074E0,	"_ZN2nn2os11SignalEventEPNS0_9EventTypeE");
	create_insn	(x=0X71000074E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000074E8);
	op_stkvar	(x,	1);
	create_insn	(0X7100007528);
	create_insn	(0X7100007554);
	create_insn	(x=0X7100007570);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007574);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007578);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007580);
	op_stkvar	(x,	1);
	set_name	(0X7100007580,	"_ZN2nn2os10ClearEventEPNS0_9EventTypeE");
	create_insn	(x=0X7100007584);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000075A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000075A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000075B0);
	op_stkvar	(x,	1);
	set_name	(0X71000075B0,	"_ZN2nn2os9WaitEventEPNS0_9EventTypeE");
	create_insn	(x=0X71000075B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000075B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000761C);
	op_stkvar	(x,	1);
	make_array	(0X7100007624,	0XC);
	create_insn	(x=0X7100007630);
	op_stkvar	(x,	1);
	set_name	(0X7100007630,	"_ZN2nn2os12TryWaitEventEPNS0_9EventTypeE");
	create_insn	(x=0X7100007634);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007674);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007678);
	op_stkvar	(x,	1);
	create_insn	(0X7100007680);
	set_name	(0X7100007680,	"_ZN2nn2os25InitializeMultiWaitHolderEPNS0_19MultiWaitHolderTypeEPNS0_9EventTypeE");
	create_insn	(x=0X7100007688);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007690);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000076A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000076AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000076DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000076E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000076E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000076EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007740);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007744);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000774C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007750);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000779C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000077A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000077A8);
	create_insn	(0X71000077B0);
	create_insn	(0X71000077C4);
	create_insn	(0X71000077CC);
	set_name	(0X71000077CC,	"nullsub_12");
	create_insn	(0X71000077D0);
	set_name	(0X71000077D0,	"_ZN2nn2os17CloseNativeHandleEj");
	create_insn	(x=0X71000077D4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000077E0,	"__int64",	0);
	create_insn	(x=0X71000077E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000077F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000077FC);
	op_stkvar	(x,	1);
	create_dword	(0X7100007804);
	make_array	(0X7100007808,	0X8);
	create_insn	(x=0X7100007810);
	op_stkvar	(x,	1);
	set_name	(0X7100007810,	"_ZN2nn2os19InitializeMultiWaitEPNS0_13MultiWaitTypeE");
	create_insn	(x=0X7100007814);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007844);
	op_stkvar	(x,	1);
	make_array	(0X710000784C,	0X4);
	create_insn	(0X7100007850);
	set_name	(0X7100007850,	"_ZN2nn2os17FinalizeMultiWaitEPNS0_13MultiWaitTypeE");
	make_array	(0X7100007858,	0X8);
	create_insn	(0X7100007860);
	set_name	(0X7100007860,	"_ZN2nn2os7WaitAnyEPNS0_13MultiWaitTypeE");
	create_insn	(x=0X7100007864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007888);
	op_stkvar	(x,	1);
	make_array	(0X7100007894,	0XC);
	create_insn	(0X71000078A0);
	set_name	(0X71000078A0,	"_ZN2nn2os10TryWaitAnyEPNS0_13MultiWaitTypeE");
	create_insn	(x=0X71000078A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000078B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000078C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000078C8);
	op_stkvar	(x,	1);
	make_array	(0X71000078D4,	0XC);
	create_insn	(0X71000078E0);
	set_name	(0X71000078E0,	"_ZN2nn2os23FinalizeMultiWaitHolderEPNS0_19MultiWaitHolderTypeE");
	make_array	(0X71000078E4,	0XC);
	create_insn	(0X71000078F0);
	set_name	(0X71000078F0,	"_ZN2nn2os19LinkMultiWaitHolderEPNS0_13MultiWaitTypeEPNS0_19MultiWaitHolderTypeE");
	make_array	(0X7100007914,	0XC);
	create_insn	(0X7100007920);
	set_name	(0X7100007920,	"_ZN2nn2os21UnlinkMultiWaitHolderEPNS0_19MultiWaitHolderTypeE");
	make_array	(0X7100007954,	0XC);
	create_insn	(0X7100007960);
	set_name	(0X7100007960,	"_ZN2nn2os24UnlinkAllMultiWaitHolderEPNS0_13MultiWaitTypeE");
	make_array	(0X71000079A4,	0XC);
	create_insn	(0X71000079B0);
	set_name	(0X71000079B0,	"_ZN2nn2os22MoveAllMultiWaitHolderEPNS0_13MultiWaitTypeES2_");
	make_array	(0X7100007A18,	0X8);
	create_insn	(0X7100007A20);
	set_name	(0X7100007A20,	"_ZN2nn2os26SetMultiWaitHolderUserDataEPNS0_19MultiWaitHolderTypeEm");
	make_array	(0X7100007A28,	0X8);
	create_insn	(0X7100007A30);
	set_name	(0X7100007A30,	"_ZN2nn2os26GetMultiWaitHolderUserDataEPNS0_19MultiWaitHolderTypeEm");
	make_array	(0X7100007A38,	0X8);
	create_insn	(0X7100007A40);
	set_name	(0X7100007A40,	"_ZN2nn2os25InitializeMultiWaitHolderEPNS0_19MultiWaitHolderTypeEj");
	create_insn	(x=0X7100007A48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007A50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100007A6C);
	create_insn	(0X7100007A74);
	make_array	(0X7100007A84,	0XC);
	create_insn	(x=0X7100007A90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007A94);
	op_hex		(x,	1);
	create_insn	(x=0X7100007A98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100007AA4,	0XC);
	create_insn	(0X7100007AB0);
	make_array	(0X7100007AC4,	0XC);
	create_insn	(0X7100007AD0);
	create_insn	(x=0X7100007AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B10);
	op_stkvar	(x,	1);
	create_insn	(0X7100007B18);
	create_insn	(0X7100007B1C);
	create_insn	(x=0X7100007B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007B58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007B9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100007BA8);
	create_insn	(x=0X7100007BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007BC4);
	op_stkvar	(x,	1);
	create_insn	(0X7100007BD0);
	create_dword	(0X7100007BD4);
	make_array	(0X7100007BD8,	0X8);
	create_insn	(0X7100007BE0);
	create_insn	(0X7100007BF0);
	create_insn	(0X7100007C38);
	create_insn	(x=0X7100007C50);
	op_stkvar	(x,	1);
	set_name	(0X7100007C50,	"GenRandomBytes");
	create_insn	(x=0X7100007C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007C68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007C74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007C78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007C84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007C98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007CB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007CBC);
	op_stkvar	(x,	1);
	make_array	(0X7100007CC4,	0XC);
	create_insn	(0X7100007CD0);
	set_name	(0X7100007CD0,	"SeedRandom");
	create_insn	(x=0X7100007CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007CDC);
	op_stkvar	(x,	1);
	set_cmt	(0X7100007CEC,	"out",	0);
	set_cmt	(0X7100007CF0,	"info_type",	0);
	set_cmt	(0X7100007CF4,	"handle",	0);
	set_cmt	(0X7100007CF8,	"info_subtype",	0);
	set_cmt	(0X7100007D04,	"out",	0);
	set_cmt	(0X7100007D08,	"info_type",	0);
	set_cmt	(0X7100007D0C,	"handle",	0);
	set_cmt	(0X7100007D10,	"info_subtype",	0);
	create_insn	(x=0X7100007D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007D30);
	op_stkvar	(x,	1);
	make_array	(0X7100007D3C,	0X4);
	create_insn	(x=0X7100007D40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007D74);
	op_stkvar	(x,	1);
	make_array	(0X7100007D7C,	0X4);
	create_insn	(x=0X7100007D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007E04);
	op_stkvar	(x,	1);
	make_array	(0X7100007E0C,	0X4);
	create_insn	(x=0X7100007E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007EA8);
	op_stkvar	(x,	1);
	create_insn	(0X7100007EB0);
	create_insn	(x=0X7100007EB4);
	op_stkvar	(x,	1);
	set_cmt	(0X7100007EBC,	"__int64",	0);
	create_insn	(x=0X7100007EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100007ED8);
	op_stkvar	(x,	1);
	create_insn	(0X7100007EE0);
	create_insn	(x=0X7100007F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007F24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007F28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007F2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007FA8);
	op_hex		(x,	1);
	create_insn	(x=0X7100007FC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007FCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007FD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100007FD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100008028);
	op_hex		(x,	1);
	create_insn	(0X7100008044);
	create_insn	(0X7100008078);
	create_insn	(x=0X71000080A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000080AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000080EC);
	create_insn	(0X71000080FC);
	create_insn	(0X7100008124);
	create_insn	(0X7100008130);
	create_insn	(0X710000813C);
	create_insn	(0X7100008140);
	create_insn	(0X7100008148);
	create_insn	(x=0X710000814C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000815C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008164);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008170);
	op_stkvar	(x,	1);
	create_qword	(0X7100008178);
	create_insn	(x=0X7100008180);
	op_stkvar	(x,	1);
	set_name	(0X7100008180,	"_ZN2nn2os18CreateSharedMemoryEPNS0_16SharedMemoryTypeEmNS0_16MemoryPermissionES3_");
	create_insn	(x=0X7100008184);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008188);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000081AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000081B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000081B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000081BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000081E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000081E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000081E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000081F0);
	op_stkvar	(x,	1);
	set_name	(0X71000081F0,	"_ZN2nn2os19DestroySharedMemoryEPNS0_16SharedMemoryTypeE");
	create_insn	(x=0X71000081F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008274);
	op_stkvar	(x,	1);
	make_array	(0X710000827C,	0X4);
	create_insn	(0X7100008280);
	set_name	(0X7100008280,	"_ZN2nn2os15MapSharedMemoryEPNS0_16SharedMemoryTypeENS0_16MemoryPermissionE");
	create_insn	(x=0X7100008284);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008288);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000828C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000082C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000082DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000830C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008310);
	op_stkvar	(x,	1);
	make_array	(0X710000831C,	0X4);
	create_insn	(0X7100008320);
	set_name	(0X7100008320,	"TimeSharedMemory::GetHandle");
	create_insn	(0X7100008328);
	set_name	(0X7100008328,	"_ZN2nn2os6detail25SharedMemoryImplByHorizon6CreateEPjmNS0_16MemoryPermissionES4_");
	create_insn	(x=0X710000832C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008330);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008338);
	op_hex		(x,	1);
	create_insn	(x=0X7100008344);
	op_hex		(x,	1);
	set_cmt	(0X7100008354,	"out_handle",	0);
	create_insn	(x=0X7100008358);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008364);
	op_hex		(x,	1);
	create_insn	(x=0X7100008384);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008388);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008394);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000839C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000083A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000083AC);
	create_insn	(x=0X71000083B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000083B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000083C0);
	create_insn	(x=0X71000083C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000083C8);
	op_stkvar	(x,	1);
	create_insn	(0X71000083D0);
	set_name	(0X71000083D0,	"_ZN2nn2os6detail25SharedMemoryImplByHorizon5CloseEj");
	create_insn	(x=0X71000083D4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000083DC,	"__int64",	0);
	create_insn	(x=0X71000083E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000083EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000083F8);
	op_stkvar	(x,	1);
	create_insn	(0X7100008400);
	set_name	(0X7100008400,	"_ZN2nn2os6detail25SharedMemoryImplByHorizon3MapEPPvjmNS0_16MemoryPermissionE");
	create_insn	(x=0X7100008404);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000840C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008414);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008418);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008420);
	op_hex		(x,	1);
	create_insn	(x=0X7100008444);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100008448);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000844C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100008450);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000084A0,	"shmem_handle",	0);
	set_cmt	(0X71000084A4,	"address",	0);
	set_cmt	(0X71000084A8,	"size",	0);
	set_cmt	(0X71000084AC,	"map_perm",	0);
	create_insn	(x=0X71000084B8);
	op_hex		(x,	1);
	create_insn	(x=0X71000084D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000084D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000084D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000084DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100008510,	"shmem_handle",	0);
	set_cmt	(0X7100008514,	"size",	0);
	set_cmt	(0X7100008518,	"address",	0);
	set_cmt	(0X710000851C,	"map_perm",	0);
	create_insn	(x=0X7100008528);
	op_hex		(x,	1);
	create_insn	(x=0X7100008548);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100008550);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100008568,	"shmem_handle",	0);
	set_cmt	(0X710000856C,	"address",	0);
	set_cmt	(0X7100008570,	"size",	0);
	create_insn	(x=0X7100008578);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000858C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008590);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008594);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000859C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000085A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000085AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000085B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000085B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000085C0);
	create_insn	(x=0X71000085C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000085CC);
	set_name	(0X71000085CC,	"_ZN2nn2os6detail25SharedMemoryImplByHorizon5UnmapEjPvm");
	create_insn	(x=0X71000085D0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000085D8,	"shmem_handle",	0);
	create_insn	(x=0X71000085E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000085E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000085F4);
	op_stkvar	(x,	1);
	create_insn	(0X71000085FC);
	create_insn	(x=0X7100008600);
	op_hex		(x,	1);
	create_insn	(x=0X7100008624);
	op_hex		(x,	1);
	create_insn	(x=0X710000862C);
	op_hex		(x,	1);
	create_insn	(x=0X7100008658);
	op_hex		(x,	1);
	create_insn	(x=0X710000866C);
	op_hex		(x,	1);
	create_insn	(x=0X7100008688);
	op_hex		(x,	1);
	create_insn	(x=0X710000869C);
	op_hex		(x,	1);
	create_insn	(x=0X71000086B8);
	op_hex		(x,	1);
	create_insn	(x=0X71000086CC);
	op_hex		(x,	1);
	create_insn	(x=0X71000086E8);
	op_hex		(x,	1);
	create_insn	(x=0X71000086FC);
	op_hex		(x,	1);
	create_insn	(x=0X7100008718);
	op_hex		(x,	1);
	create_insn	(x=0X710000872C);
	op_hex		(x,	1);
	create_insn	(x=0X7100008748);
	op_hex		(x,	1);
	create_insn	(x=0X710000875C);
	op_hex		(x,	1);
	create_insn	(x=0X7100008778);
	op_hex		(x,	1);
	create_insn	(x=0X71000087A4);
	op_hex		(x,	1);
	create_insn	(0X71000087C0);
	make_array	(0X71000087D8,	0X8);
	create_insn	(0X71000087E0);
	create_insn	(0X7100008830);
	create_insn	(x=0X710000883C);
	op_hex		(x,	1);
	create_insn	(x=0X7100008840);
	op_hex		(x,	1);
	create_insn	(x=0X7100008844);
	op_hex		(x,	1);
	create_insn	(x=0X710000885C);
	op_hex		(x,	1);
	create_insn	(0X71000088B8);
	create_insn	(x=0X71000088C4);
	op_hex		(x,	1);
	create_insn	(x=0X71000088C8);
	op_hex		(x,	1);
	create_insn	(x=0X71000088CC);
	op_hex		(x,	1);
	create_insn	(x=0X71000088E0);
	op_hex		(x,	1);
	create_insn	(0X71000089D4);
	create_insn	(x=0X71000089EC);
	op_hex		(x,	1);
	create_insn	(x=0X7100008A0C);
	op_hex		(x,	1);
	create_insn	(x=0X7100008A34);
	op_hex		(x,	1);
	make_array	(0X7100008A44,	0XC);
	create_insn	(x=0X7100008A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008A74);
	op_hex		(x,	1);
	set_cmt	(0X7100008A94,	"size",	0);
	set_cmt	(0X7100008AA0,	"src",	0);
	create_insn	(x=0X7100008AA8);
	op_hex		(x,	1);
	create_insn	(x=0X7100008AC8);
	op_hex		(x,	1);
	create_insn	(x=0X7100008AE8);
	op_hex		(x,	1);
	create_insn	(x=0X7100008AF8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100008B00,	"dst",	0);
	create_insn	(x=0X7100008B0C);
	op_hex		(x,	1);
	create_insn	(x=0X7100008B24);
	op_hex		(x,	1);
	create_insn	(x=0X7100008B48);
	op_hex		(x,	1);
	create_insn	(x=0X7100008B68);
	op_hex		(x,	1);
	create_insn	(x=0X7100008B8C);
	op_hex		(x,	1);
	create_insn	(x=0X7100008B98);
	op_hex		(x,	1);
	create_insn	(x=0X7100008BB8);
	op_hex		(x,	1);
	create_insn	(x=0X7100008BD8);
	op_hex		(x,	1);
	create_insn	(x=0X7100008BE4);
	op_stkvar	(x,	1);
	set_cmt	(0X7100008BEC,	"dst",	0);
	create_insn	(0X7100008BEC);
	set_cmt	(0X7100008BF0,	"size",	0);
	create_insn	(x=0X7100008BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008C08);
	op_stkvar	(x,	1);
	create_insn	(0X7100008C10);
	create_insn	(0X7100008C18);
	create_insn	(0X7100008C28);
	create_insn	(0X7100008C30);
	create_insn	(0X7100008C38);
	create_insn	(0X7100008C40);
	create_insn	(0X7100008C48);
	create_insn	(0X7100008C50);
	create_insn	(0X7100008C58);
	create_insn	(0X7100008C60);
	create_insn	(0X7100008C68);
	create_insn	(0X7100008C70);
	create_insn	(0X7100008C78);
	create_insn	(x=0X7100008C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008C84);
	op_stkvar	(x,	1);
	set_cmt	(0X7100008C9C,	"jumptable 0000007100008FAC default case, cases 193,204-211",	1);
	create_insn	(x=0X7100008C9C);
	op_stkvar	(x,	1);
	set_name	(0X7100008C9C,	"def_7100008FAC");
	create_insn	(x=0X7100008CA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100008CA8);
	create_insn	(x=0X7100008CC0);
	op_hex		(x,	1);
	create_insn	(x=0X7100008CCC);
	op_hex		(x,	1);
	create_insn	(0X7100008D30);
	create_insn	(x=0X7100008D34);
	op_hex		(x,	1);
	create_insn	(x=0X7100008D40);
	op_hex		(x,	1);
	create_insn	(x=0X7100008D68);
	op_hex		(x,	1);
	create_insn	(x=0X7100008D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008D88);
	op_stkvar	(x,	1);
	create_insn	(0X7100008D90);
	create_insn	(x=0X7100008DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008DE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100008DE8);
	create_insn	(0X7100008E2C);
	create_insn	(x=0X7100008E74);
	op_hex		(x,	1);
	create_insn	(0X7100008EB0);
	create_insn	(x=0X7100008EC8);
	op_hex		(x,	1);
	create_insn	(x=0X7100008ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008ED8);
	op_stkvar	(x,	1);
	create_insn	(0X7100008EE0);
	create_insn	(x=0X7100008EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008EF8);
	op_stkvar	(x,	1);
	create_insn	(0X7100008F00);
	create_insn	(x=0X7100008F08);
	op_hex		(x,	1);
	set_cmt	(0X7100008F0C,	"switch 4 cases",	0);
	create_insn	(x=0X7100008F18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100008F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100008F2C,	"switch jump",	0);
	set_cmt	(0X7100008F30,	"jumptable 0000007100008F2C case 208",	1);
	create_insn	(0X7100008F30);
	set_cmt	(0X7100008F4C,	"jumptable 0000007100008F2C default case",	1);
	set_name	(0X7100008F4C,	"def_7100008F2C");
	create_insn	(x=0X7100008F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008F58);
	op_stkvar	(x,	1);
	create_insn	(0X7100008F60);
	create_insn	(x=0X7100008F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008F84);
	op_hex		(x,	1);
	set_cmt	(0X7100008F8C,	"switch 25 cases",	0);
	create_insn	(x=0X7100008F9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100008FA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100008FAC,	"switch jump",	0);
	set_cmt	(0X7100008FB0,	"jumptable 0000007100008FAC cases 199-201,212-216",	1);
	create_insn	(0X7100008FB0);
	create_insn	(x=0X7100008FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100008FBC);
	op_stkvar	(x,	1);
	set_cmt	(0X7100008FC4,	"jumptable 0000007100008F2C case 209",	1);
	create_insn	(0X7100008FC4);
	set_cmt	(0X7100008FF0,	"jumptable 0000007100008F2C case 210",	1);
	create_insn	(0X7100008FF0);
	set_cmt	(0X7100009018,	"jumptable 0000007100008F2C case 211",	1);
	create_insn	(0X7100009018);
	create_insn	(x=0X710000903C);
	op_hex		(x,	1);
	create_insn	(x=0X7100009040);
	op_hex		(x,	1);
	create_insn	(x=0X7100009060);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009064);
	op_stkvar	(x,	1);
	set_cmt	(0X710000906C,	"jumptable 0000007100008FAC cases 196-198",	1);
	create_insn	(0X710000906C);
	create_insn	(x=0X7100009078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000907C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100009084,	"jumptable 0000007100008FAC case 192",	1);
	create_insn	(0X7100009084);
	create_insn	(x=0X710000908C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009090);
	op_stkvar	(x,	1);
	set_cmt	(0X7100009098,	"jumptable 0000007100008FAC case 194",	1);
	create_insn	(0X7100009098);
	create_insn	(x=0X71000090A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000090A8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000090B0,	"jumptable 0000007100008FAC case 195",	1);
	create_insn	(0X71000090B0);
	create_insn	(x=0X71000090BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000090C0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000090C8,	"jumptable 0000007100008FAC case 202",	1);
	create_insn	(0X71000090C8);
	create_insn	(x=0X7100009100);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009104);
	op_stkvar	(x,	1);
	set_cmt	(0X710000910C,	"jumptable 0000007100008FAC case 203",	1);
	create_insn	(0X710000910C);
	make_array	(0X7100009128,	0X8);
	create_insn	(0X7100009130);
	create_insn	(x=0X7100009138);
	op_hex		(x,	1);
	set_cmt	(0X710000913C,	"switch 4 cases",	0);
	create_insn	(x=0X710000914C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100009150);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000915C,	"switch jump",	0);
	set_cmt	(0X7100009160,	"jumptable 000000710000915C case 204",	1);
	create_insn	(0X7100009160);
	set_cmt	(0X7100009174,	"jumptable 000000710000915C case 206",	1);
	create_insn	(0X7100009174);
	set_cmt	(0X710000918C,	"jumptable 000000710000915C case 207",	1);
	create_insn	(0X710000918C);
	set_cmt	(0X710000919C,	"jumptable 000000710000915C default case",	1);
	set_name	(0X710000919C,	"def_710000915C");
	set_cmt	(0X71000091A4,	"jumptable 000000710000915C case 205",	1);
	create_insn	(0X71000091A4);
	create_insn	(0X71000091BC);
	create_insn	(0X71000091D8);
	create_insn	(0X71000091FC);
	create_insn	(x=0X7100009210);
	op_hex		(x,	1);
	create_insn	(x=0X7100009214);
	op_hex		(x,	1);
	create_insn	(0X7100009238);
	create_insn	(0X7100009260);
	create_insn	(x=0X7100009268);
	op_hex		(x,	1);
	create_insn	(0X7100009298);
	create_insn	(0X71000092C4);
	create_insn	(0X7100009310);
	create_insn	(0X7100009350);
	create_insn	(x=0X710000935C);
	op_hex		(x,	1);
	set_cmt	(0X7100009360,	"switch 18 cases",	0);
	create_insn	(x=0X7100009370);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100009374);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100009380,	"switch jump",	0);
	set_cmt	(0X7100009384,	"jumptable 0000007100009380 case 199",	1);
	create_insn	(0X7100009384);
	set_cmt	(0X7100009398,	"jumptable 0000007100009380 case 200",	1);
	create_insn	(0X7100009398);
	set_cmt	(0X71000093B0,	"jumptable 0000007100009380 case 201",	1);
	create_insn	(0X71000093B0);
	set_cmt	(0X71000093C8,	"jumptable 0000007100009380 case 214",	1);
	create_insn	(0X71000093C8);
	set_cmt	(0X71000093D0,	"jumptable 0000007100009380 case 215",	1);
	create_insn	(0X71000093D0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	set_cmt	(0X71000093D8,	"jumptable 0000007100009380 case 216",	1);
	create_insn	(0X71000093D8);
	set_cmt	(0X71000093E0,	"jumptable 0000007100009380 case 212",	1);
	create_insn	(0X71000093E0);
	set_cmt	(0X71000093E8,	"jumptable 0000007100009380 case 213",	1);
	create_insn	(0X71000093E8);
	create_insn	(0X71000093F0);
	create_insn	(0X7100009420);
	create_insn	(0X7100009478);
	set_cmt	(0X710000948C,	"jumptable 0000007100009380 default case, cases 202-211",	1);
	set_name	(0X710000948C,	"def_7100009380");
	create_insn	(0X7100009494);
	make_array	(0X71000094BC,	0X4);
	create_insn	(0X71000094C0);
	create_insn	(0X7100009510);
	create_insn	(x=0X7100009560);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009564);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009568);
	op_stkvar	(x,	1);
	set_cmt	(0X7100009594,	"src",	0);
	create_insn	(x=0X7100009598);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000095A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000095A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000095AC);
	create_insn	(x=0X71000095BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000095C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000095C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000095CC);
	create_insn	(x=0X71000095E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000095E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000095EC);
	op_stkvar	(x,	1);
	make_array	(0X71000095F4,	0XC);
	create_insn	(x=0X7100009600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000964C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009650);
	op_stkvar	(x,	1);
	create_insn	(0X7100009658);
	create_insn	(0X71000096A4);
	create_insn	(0X71000096F8);
	create_insn	(x=0X7100009708);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000970C);
	op_stkvar	(x,	1);
	create_insn	(0X7100009714);
	set_cmt	(0X7100009748,	"size",	0);
	set_cmt	(0X7100009750,	"dst",	0);
	create_insn	(x=0X7100009768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000976C);
	op_stkvar	(x,	1);
	make_array	(0X7100009774,	0XC);
	create_insn	(0X7100009780);
	create_insn	(x=0X7100009784);
	op_hex		(x,	1);
	make_array	(0X71000097D8,	0X8);
	create_insn	(x=0X71000097E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000097E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009810);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009814);
	op_stkvar	(x,	1);
	create_insn	(0X710000981C);
	create_insn	(x=0X710000983C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009840);
	op_stkvar	(x,	1);
	create_insn	(0X7100009848);
	create_insn	(x=0X7100009878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000987C);
	op_stkvar	(x,	1);
	create_insn	(0X7100009884);
	create_insn	(x=0X7100009898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000989C);
	op_stkvar	(x,	1);
	create_insn	(0X71000098A4);
	create_insn	(0X71000098D4);
	set_cmt	(0X7100009910,	"size",	0);
	set_cmt	(0X7100009918,	"dst",	0);
	create_insn	(x=0X7100009930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009934);
	op_stkvar	(x,	1);
	make_array	(0X710000993C,	0X4);
	create_insn	(0X7100009940);
	create_insn	(0X7100009964);
	create_insn	(0X7100009988);
	create_insn	(0X71000099D0);
	create_insn	(0X71000099E8);
	create_insn	(0X7100009A30);
	make_array	(0X7100009A74,	0XC);
	create_insn	(x=0X7100009A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009A88);
	op_stkvar	(x,	1);
	set_cmt	(0X7100009A94,	"switch 16 cases",	0);
	create_insn	(x=0X7100009AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100009AB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100009AC0,	"switch jump",	0);
	set_cmt	(0X7100009AC4,	"jumptable 0000007100009AC0 case 1",	1);
	create_insn	(0X7100009AC4);
	set_cmt	(0X7100009AE8,	"jumptable 0000007100009AC0 case 2",	1);
	create_insn	(0X7100009AE8);
	set_cmt	(0X7100009B0C,	"jumptable 0000007100009AC0 default case, cases 3,5-7,9-15",	1);
	create_insn	(0X7100009B0C);
	set_name	(0X7100009B0C,	"def_7100009AC0");
	set_cmt	(0X7100009B24,	"jumptable 0000007100009AC0 case 4",	1);
	create_insn	(0X7100009B24);
	set_cmt	(0X7100009B48,	"jumptable 0000007100009AC0 case 8",	1);
	create_insn	(0X7100009B48);
	set_cmt	(0X7100009B6C,	"jumptable 0000007100009AC0 case 16",	1);
	create_insn	(0X7100009B6C);
	create_insn	(x=0X7100009B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009B88);
	op_stkvar	(x,	1);
	create_insn	(0X7100009B90);
	set_cmt	(0X7100009BC4,	"src",	0);
	set_cmt	(0X7100009BCC,	"size",	0);
	set_cmt	(0X7100009BD0,	"dst",	0);
	create_insn	(x=0X7100009BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009BF0);
	op_stkvar	(x,	1);
	make_array	(0X7100009BF8,	0X8);
	create_insn	(0X7100009C00);
	create_insn	(x=0X7100009C10);
	op_hex		(x,	1);
	make_array	(0X7100009C34,	0XC);
	create_insn	(0X7100009C40);
	create_insn	(0X7100009C60);
	create_insn	(0X7100009CAC);
	create_insn	(0X7100009CC4);
	create_insn	(0X7100009D1C);
	create_insn	(0X7100009D70);
	create_insn	(x=0X7100009D9C);
	op_hex		(x,	1);
	create_insn	(x=0X7100009DA0);
	op_hex		(x,	1);
	make_array	(0X7100009DCC,	0X4);
	create_insn	(0X7100009DD0);
	create_insn	(x=0X7100009E04);
	op_hex		(x,	1);
	create_insn	(x=0X7100009E08);
	op_hex		(x,	1);
	make_array	(0X7100009E34,	0XC);
	create_insn	(0X7100009E40);
	create_insn	(0X7100009E5C);
	create_insn	(0X7100009EA8);
	create_insn	(0X7100009EC0);
	create_insn	(0X7100009F18);
	create_insn	(0X7100009F6C);
	create_insn	(x=0X7100009F98);
	op_hex		(x,	1);
	create_insn	(x=0X7100009F9C);
	op_hex		(x,	1);
	make_array	(0X7100009FC8,	0X8);
	create_insn	(0X7100009FD0);
	create_insn	(0X7100009FD8);
	make_array	(0X7100009FDC,	0X4);
	create_insn	(x=0X7100009FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100009FF4);
	op_stkvar	(x,	1);
	make_array	(0X7100009FFC,	0X4);
	create_insn	(0X710000A000);
	create_insn	(x=0X710000A010);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000A01C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000A024,	"jumptable 000000710000A06C case 2",	1);
	create_insn	(0X710000A024);
	create_insn	(x=0X710000A028);
	op_hex		(x,	1);
	set_cmt	(0X710000A034,	"jumptable 000000710000A06C case 1",	1);
	set_cmt	(0X710000A054,	"switch 4 cases",	0);
	create_insn	(x=0X710000A060);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000A06C,	"switch jump",	0);
	set_cmt	(0X710000A070,	"jumptable 000000710000A06C case 3",	1);
	create_insn	(0X710000A070);
	create_insn	(0X710000A08C);
	set_cmt	(0X710000A090,	"jumptable 000000710000A06C case 4",	1);
	create_insn	(x=0X710000A0A4);
	op_hex		(x,	1);
	create_insn	(0X710000A0B0);
	create_insn	(0X710000A0BC);
	create_insn	(x=0X710000A0C0);
	op_hex		(x,	1);
	create_insn	(x=0X710000A0D0);
	op_hex		(x,	1);
	create_insn	(0X710000A0E0);
	create_insn	(x=0X710000A0E4);
	op_hex		(x,	1);
	create_insn	(0X710000A0F0);
	create_insn	(x=0X710000A0F4);
	op_hex		(x,	1);
	create_insn	(x=0X710000A104);
	op_hex		(x,	1);
	create_insn	(x=0X710000A114);
	op_hex		(x,	1);
	set_cmt	(0X710000A120,	"jumptable 000000710000A06C default case",	1);
	set_name	(0X710000A120,	"def_710000A06C");
	create_insn	(0X710000A128);
	create_insn	(0X710000A130);
	create_insn	(x=0X710000A134);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A13C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A140);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A160);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A170);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000A178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A190);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A198);
	op_stkvar	(x,	1);
	create_insn	(0X710000A1AC);
	set_cmt	(0X710000A1C0,	"jumptable 000000710000A1EC case 48",	1);
	create_insn	(0X710000A1C0);
	set_cmt	(0X710000A1C4,	"jumptable 000000710000A1EC case 43",	1);
	set_cmt	(0X710000A1D0,	"switch 17 cases",	0);
	create_insn	(x=0X710000A1DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000A1EC,	"switch jump",	0);
	set_cmt	(0X710000A1F0,	"jumptable 000000710000A1EC case 32",	1);
	create_insn	(0X710000A1F0);
	set_cmt	(0X710000A1F8,	"jumptable 000000710000A1EC case 35",	1);
	create_insn	(0X710000A1F8);
	set_cmt	(0X710000A200,	"jumptable 000000710000A1EC case 45",	1);
	create_insn	(0X710000A200);
	create_insn	(0X710000A208);
	set_cmt	(0X710000A210,	"jumptable 000000710000A1EC case 42",	1);
	create_insn	(x=0X710000A210);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A234);
	op_stkvar	(x,	1);
	create_insn	(0X710000A248);
	set_cmt	(0X710000A250,	"jumptable 000000710000A1EC default case, cases 33,34,36-41,44,46,47",	1);
	set_name	(0X710000A250,	"def_710000A1EC");
	create_insn	(x=0X710000A298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A2B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A2EC);
	op_hex		(x,	1);
	create_insn	(0X710000A31C);
	create_insn	(0X710000A358);
	create_insn	(x=0X710000A368);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A38C,	"switch 47 cases",	0);
	create_insn	(x=0X710000A398);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000A3A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000A3AC,	"switch jump",	0);
	set_cmt	(0X710000A3B0,	"jumptable 000000710000A3AC cases 106,116,122",	1);
	create_insn	(0X710000A3B0);
	set_cmt	(0X710000A3BC,	"jumptable 000000710000A3AC case 76",	1);
	create_insn	(x=0X710000A3BC);
	op_hex		(x,	1);
	set_cmt	(0X710000A3C4,	"jumptable 000000710000A3AC default case, cases 77-103,105,107,109-115,117-121",	1);
	set_name	(0X710000A3C4,	"def_710000A3AC");
	set_cmt	(0X710000A3C8,	"switch 84 cases",	0);
	create_insn	(x=0X710000A3D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A3D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A3E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000A3F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A3F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000A410,	"switch jump",	0);
	set_cmt	(0X710000A414,	"jumptable 000000710000A410 cases 69-71,101-103",	1);
	create_insn	(0X710000A414);
	create_insn	(x=0X710000A418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A420);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A430,	"jumptable 000000710000A3AC case 104",	1);
	create_insn	(0X710000A430);
	create_insn	(x=0X710000A444);
	op_hex		(x,	1);
	set_cmt	(0X710000A44C,	"jumptable 000000710000A3AC case 108",	1);
	create_insn	(0X710000A44C);
	create_insn	(x=0X710000A460);
	op_hex		(x,	1);
	create_insn	(0X710000A468);
	set_cmt	(0X710000A47C,	"jumptable 000000710000A410 cases 67,99",	1);
	create_insn	(0X710000A47C);
	create_insn	(x=0X710000A480);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A48C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A4A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A4BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A4E0);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A4F4,	"jumptable 000000710000A410 cases 79,111",	1);
	create_insn	(x=0X710000A4F4);
	op_hex		(x,	1);
	create_insn	(x=0X710000A4FC);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A514,	"jumptable 000000710000A410 cases 83,115",	1);
	create_insn	(x=0X710000A514);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A524);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A538);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A548,	"jumptable 000000710000A410 cases 85,117",	1);
	create_insn	(x=0X710000A548);
	op_hex		(x,	1);
	create_insn	(x=0X710000A550);
	op_stkvar	(x,	1);
	create_insn	(0X710000A568);
	create_insn	(x=0X710000A56C);
	op_hex		(x,	1);
	create_insn	(0X710000A574);
	create_insn	(x=0X710000A578);
	op_hex		(x,	1);
	set_cmt	(0X710000A580,	"jumptable 000000710000A410 case 37",	1);
	create_insn	(0X710000A580);
	create_insn	(x=0X710000A590);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A598,	"jumptable 000000710000A410 default case, cases 38-66,72,74-78,81,82,84,86,87,89-98,104,106-110,113,114,116,118,119",	1);
	create_insn	(0X710000A598);
	set_name	(0X710000A598,	"def_710000A410");
	create_insn	(x=0X710000A5A0);
	op_hex		(x,	1);
	create_insn	(x=0X710000A5A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A5B4);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A5C8,	"jumptable 000000710000A410 case 80",	1);
	create_insn	(0X710000A5C8);
	set_cmt	(0X710000A5CC,	"jumptable 000000710000A410 case 112",	1);
	create_insn	(x=0X710000A5DC);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A5F0,	"jumptable 000000710000A410 cases 68,73,100,105",	1);
	create_insn	(x=0X710000A5F4);
	op_hex		(x,	1);
	create_insn	(x=0X710000A5F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A614);
	op_hex		(x,	1);
	create_insn	(x=0X710000A618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A630);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A640);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A654);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A664);
	op_stkvar	(x,	1);
	create_insn	(0X710000A674);
	create_insn	(x=0X710000A678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A690);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A6A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A6E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A704);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A718);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A728);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A74C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A760);
	op_stkvar	(x,	1);
	create_insn	(0X710000A778);
	create_insn	(0X710000A784);
	create_insn	(x=0X710000A794);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A7A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A7C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A7D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A7E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A7F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A804);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A814);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A820);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A834);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A844);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A88C);
	op_stkvar	(x,	1);
	set_cmt	(0X710000A89C,	"jumptable 000000710000A410 case 88",	1);
	create_insn	(0X710000A89C);
	set_cmt	(0X710000A8A0,	"jumptable 000000710000A410 case 120",	1);
	create_insn	(x=0X710000A8A0);
	op_hex		(x,	1);
	create_insn	(x=0X710000A8A8);
	op_stkvar	(x,	1);
	create_insn	(0X710000A8BC);
	create_insn	(x=0X710000A8C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A8D4);
	op_stkvar	(x,	1);
	create_insn	(0X710000A8E4);
	create_insn	(0X710000A918);
	create_insn	(0X710000A958);
	create_insn	(0X710000A960);
	create_insn	(x=0X710000A98C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A99C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A9A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000A9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A9EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000A9F4);
	op_hex		(x,	1);
	create_insn	(x=0X710000AA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AA10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AA34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AA40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AA54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AA64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AA70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000AAA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AAB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AACC);
	op_hex		(x,	1);
	create_insn	(x=0X710000AAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AAEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AB10);
	op_stkvar	(x,	1);
	create_insn	(0X710000AB18);
	create_insn	(x=0X710000AB1C);
	op_stkvar	(x,	1);
	create_insn	(0X710000AB34);
	create_insn	(x=0X710000AB38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AB6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AB80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AB90);
	op_hex		(x,	1);
	create_insn	(x=0X710000AB94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ABC4);
	op_hex		(x,	1);
	create_insn	(0X710000ABF8);
	create_insn	(x=0X710000AC48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AC68);
	op_hex		(x,	1);
	create_insn	(x=0X710000AC94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AC9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ACD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ACDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AD04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AD0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AD3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AD48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AD74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AD7C);
	op_stkvar	(x,	1);
	create_insn	(0X710000AD90);
	create_insn	(0X710000AD9C);
	create_insn	(x=0X710000ADB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ADB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ADD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ADE0);
	op_stkvar	(x,	1);
	create_insn	(0X710000ADF4);
	create_insn	(x=0X710000AE10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AE18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AE20);
	op_hex		(x,	1);
	create_insn	(x=0X710000AE34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AE3C);
	op_stkvar	(x,	1);
	create_insn	(0X710000AE5C);
	create_insn	(x=0X710000AE78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AE80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AE90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AEA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AEB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AEC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AEDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AEE8);
	op_hex		(x,	1);
	create_insn	(0X710000AEFC);
	create_insn	(x=0X710000AF08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AF10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AF28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AF34);
	op_hex		(x,	1);
	create_insn	(0X710000AF48);
	create_insn	(x=0X710000AF4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AF54);
	op_stkvar	(x,	1);
	create_insn	(0X710000AF60);
	create_insn	(x=0X710000AF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AF6C);
	op_stkvar	(x,	1);
	create_insn	(0X710000AF84);
	create_insn	(x=0X710000AF9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AFA4);
	op_stkvar	(x,	1);
	create_insn	(0X710000AFB4);
	create_insn	(x=0X710000AFC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AFCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AFE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AFE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AFEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AFF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000AFF4);
	op_stkvar	(x,	1);
	create_insn	(0X710000B000);
	create_insn	(x=0X710000B004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B008);
	op_stkvar	(x,	1);
	set_cmt	(0X710000B020,	"dst",	0);
	set_cmt	(0X710000B044,	"size",	0);
	create_insn	(x=0X710000B05C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B060);
	op_stkvar	(x,	1);
	make_array	(0X710000B068,	0X8);
	create_insn	(0X710000B070);
	create_insn	(x=0X710000B074);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B088);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B090);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B094);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000B0F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B0FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000B100);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B108);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B114);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B118);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B11C);
	op_stkvar	(x,	1);
	make_array	(0X710000B128,	0X8);
	create_insn	(0X710000B130);
	create_insn	(x=0X710000B134);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B150);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B154);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B168);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B16C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B170);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B180);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B184);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B188);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B18C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B190);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B19C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B1AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000B1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B1B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B1BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000B1C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B1C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B1D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B1D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000B1DC);
	op_stkvar	(x,	1);
	make_array	(0X710000B1E8,	0X8);
	create_insn	(0X710000B1F0);
	create_insn	(x=0X710000B23C);
	op_hex		(x,	1);
	create_insn	(0X710000B288);
	create_insn	(0X710000B2A8);
	create_insn	(0X710000B2CC);
	create_insn	(x=0X710000B2D4);
	op_hex		(x,	1);
	create_insn	(0X710000B31C);
	create_insn	(0X710000B324);
	create_insn	(x=0X710000B35C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000B360);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710000B36C);
	create_insn	(x=0X710000B378);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000B380);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000B38C);
	op_hex		(x,	1);
	create_insn	(x=0X710000B394);
	op_hex		(x,	1);
	create_insn	(x=0X710000B424);
	op_hex		(x,	1);
	create_insn	(0X710000B4E0);
	create_insn	(0X710000B55C);
	create_insn	(x=0X710000B568);
	op_hex		(x,	1);
	create_insn	(0X710000B578);
	create_insn	(0X710000B580);
	create_insn	(0X710000B5EC);
	create_insn	(x=0X710000B63C);
	op_hex		(x,	1);
	create_insn	(x=0X710000B65C);
	op_hex		(x,	1);
	create_insn	(x=0X710000B67C);
	op_hex		(x,	1);
	create_insn	(x=0X710000B704);
	op_hex		(x,	1);
	create_insn	(x=0X710000B800);
	op_hex		(x,	1);
	create_insn	(0X710000B830);
	create_insn	(0X710000B960);
	create_insn	(x=0X710000B968);
	op_hex		(x,	1);
	create_insn	(0X710000B980);
	create_insn	(0X710000B988);
	create_insn	(x=0X710000B990);
	op_hex		(x,	1);
	create_insn	(0X710000BA40);
	make_array	(0X710000BA8C,	0X4);
	create_insn	(0X710000BA90);
	create_insn	(x=0X710000BA94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BA9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BAA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BACC);
	op_hex		(x,	1);
	create_insn	(x=0X710000BAEC);
	op_hex		(x,	1);
	create_insn	(x=0X710000BB08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BB68);
	op_hex		(x,	1);
	create_insn	(x=0X710000BB84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BBCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BBD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BBF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BC00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BC34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BC3C);
	op_stkvar	(x,	1);
	create_insn	(0X710000BC50);
	create_insn	(x=0X710000BC60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BC88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BC90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BCC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BCCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BD9C);
	op_stkvar	(x,	1);
	create_insn	(0X710000BDA8);
	create_insn	(0X710000BDD4);
	create_insn	(x=0X710000BDF0);
	op_hex		(x,	1);
	make_array	(0X710000BE04,	0XC);
	create_insn	(0X710000BE10);
	create_insn	(x=0X710000BE18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000BE20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BE24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000BE2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000BFFC,	"result",	0);
	create_insn	(x=0X710000C008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C00C);
	op_stkvar	(x,	1);
	make_array	(0X710000C014,	0XC);
	create_insn	(0X710000C020);
	create_insn	(x=0X710000C024);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C02C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C074);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C090);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C0C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C0D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C0E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C0EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C110);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C114);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C12C);
	op_stkvar	(x,	1);
	make_array	(0X710000C138,	0X8);
	create_insn	(0X710000C140);
	create_insn	(x=0X710000C144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C16C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C174);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C178);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C188);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C19C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C1D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C1DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C1E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C1E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C1F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C204);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C218);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C224);
	op_stkvar	(x,	1);
	create_insn	(0X710000C230);
	create_qword	(0X710000C238);
	create_insn	(x=0X710000C240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C250);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C258);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C260);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C274);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C284);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000C298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C29C);
	op_stkvar	(x,	1);
	create_insn	(0X710000C2A4);
	create_dword	(0X710000C2AC);
	create_insn	(0X710000C2B0);
	create_insn	(x=0X710000C2B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710000C2BC);
	create_insn	(x=0X710000C2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C2CC);
	op_stkvar	(x,	1);
	create_insn	(0X710000C38C);
	create_insn	(0X710000C398);
	create_insn	(0X710000C3A4);
	create_insn	(0X710000C3B0);
	create_insn	(0X710000C3BC);
	create_insn	(0X710000C3C8);
	create_insn	(0X710000C3D4);
	create_insn	(0X710000C3E0);
	create_insn	(0X710000C3EC);
	create_insn	(0X710000C3F8);
	create_insn	(0X710000C404);
	create_insn	(0X710000C410);
	create_insn	(0X710000C41C);
	create_insn	(0X710000C428);
	create_insn	(0X710000C434);
	create_insn	(0X710000C440);
	create_insn	(0X710000C44C);
	create_insn	(0X710000C458);
	create_insn	(0X710000C464);
	create_insn	(0X710000C470);
	create_insn	(x=0X710000C498);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C49C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C4A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C4A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C4AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C4EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C4F0);
	op_stkvar	(x,	1);
	create_insn	(0X710000C4F8);
	create_insn	(0X710000C504);
	set_name	(0X710000C504,	"nullsub_13");
	create_insn	(x=0X710000C508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C524);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C52C);
	op_stkvar	(x,	1);
	create_insn	(0X710000C5C0);
	create_insn	(0X710000C5C8);
	set_name	(0X710000C5C8,	"nullsub_14");
	create_insn	(x=0X710000C5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C5D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C5D4);
	op_stkvar	(x,	1);
	create_insn	(0X710000C69C);
	create_insn	(0X710000C6A4);
	create_insn	(0X710000C6AC);
	create_insn	(0X710000C6B4);
	create_insn	(0X710000C6BC);
	create_insn	(0X710000C6C4);
	create_insn	(0X710000C6CC);
	create_insn	(0X710000C6D4);
	create_insn	(0X710000C6DC);
	create_insn	(0X710000C6E4);
	create_insn	(0X710000C6EC);
	create_insn	(0X710000C6F4);
	create_insn	(0X710000C6FC);
	create_insn	(0X710000C704);
	create_insn	(0X710000C70C);
	create_insn	(0X710000C714);
	create_insn	(0X710000C71C);
	create_insn	(0X710000C724);
	create_insn	(0X710000C72C);
	create_insn	(0X710000C734);
	create_insn	(x=0X710000C758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C75C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C760);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C770);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C79C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C7C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C7C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C7D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C7DC);
	op_stkvar	(x,	1);
	create_insn	(0X710000C7E4);
	create_insn	(0X710000C7F0);
	set_name	(0X710000C7F0,	"nullsub_15");
	create_insn	(0X710000C7F4);
	create_insn	(x=0X710000C7FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C800);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C804);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C844);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C84C);
	op_stkvar	(x,	1);
	create_insn	(0X710000C854);
	create_insn	(0X710000C860);
	set_name	(0X710000C860,	"nullsub_16");
	create_insn	(0X710000C864);
	create_insn	(x=0X710000C868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C86C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C884);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C88C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C8AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C8BC);
	op_hex		(x,	1);
	create_insn	(0X710000C8CC);
	create_insn	(x=0X710000C8D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C8D8);
	op_stkvar	(x,	1);
	create_insn	(0X710000C8E4);
	create_insn	(x=0X710000C8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C8F0);
	op_stkvar	(x,	1);
	create_insn	(0X710000C8FC);
	create_insn	(x=0X710000C910);
	op_hex		(x,	1);
	create_insn	(x=0X710000C92C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C960);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C964);
	op_stkvar	(x,	1);
	create_insn	(0X710000C970);
	create_insn	(0X710000C978);
	create_insn	(x=0X710000C97C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C980);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C984);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C994);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000C9F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CA14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CA24);
	op_hex		(x,	1);
	create_insn	(x=0X710000CA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CA64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CA78);
	op_stkvar	(x,	1);
	create_insn	(0X710000CA84);
	create_insn	(x=0X710000CA88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CAA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CAB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CAC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CAC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000CACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CAE0);
	op_stkvar	(x,	1);
	create_insn	(0X710000CAEC);
	create_insn	(x=0X710000CAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB2C);
	op_stkvar	(x,	1);
	create_insn	(0X710000CB38);
	create_insn	(x=0X710000CB40);
	op_stkvar	(x,	1);
	create_insn	(0X710000CB4C);
	create_insn	(x=0X710000CB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CB94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CBAC);
	op_stkvar	(x,	1);
	set_cmt	(0X710000CBB0,	"switch 5 cases",	0);
	create_insn	(x=0X710000CBBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000CBC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000CBD0,	"switch jump",	0);
	set_cmt	(0X710000CBD4,	"jumptable 000000710000CBD0 case 0",	1);
	create_insn	(0X710000CBD4);
	create_insn	(x=0X710000CBDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CBE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CBEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CBF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CBF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CBFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC54);
	op_hex		(x,	1);
	create_insn	(0X710000CC68);
	set_cmt	(0X710000CC74,	"jumptable 000000710000CBD0 default case",	1);
	create_insn	(0X710000CC74);
	set_name	(0X710000CC74,	"def_710000CBD0");
	set_cmt	(0X710000CC7C,	"jumptable 000000710000CBD0 case 1",	1);
	create_insn	(0X710000CC7C);
	create_insn	(x=0X710000CC84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CC98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CCFC);
	op_hex		(x,	1);
	create_insn	(x=0X710000CD24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD40);
	op_stkvar	(x,	1);
	set_cmt	(0X710000CD4C,	"jumptable 000000710000CBD0 case 2",	1);
	create_insn	(0X710000CD4C);
	create_insn	(x=0X710000CD50);
	op_stkvar	(x,	1);
	set_cmt	(0X710000CD68,	"jumptable 000000710000CBD0 case 3",	1);
	create_insn	(0X710000CD68);
	create_insn	(x=0X710000CD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CD9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CDF4);
	op_hex		(x,	1);
	create_insn	(x=0X710000CE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CE84);
	op_stkvar	(x,	1);
	set_cmt	(0X710000CE94,	"jumptable 000000710000CBD0 case 4",	1);
	create_insn	(0X710000CE94);
	create_insn	(x=0X710000CE9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CEF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF2C);
	op_hex		(x,	1);
	create_insn	(x=0X710000CF58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CF80);
	op_stkvar	(x,	1);
	create_insn	(0X710000CF8C);
	create_insn	(x=0X710000CF94);
	op_hex		(x,	1);
	create_insn	(x=0X710000CFB0);
	op_stkvar	(x,	1);
	create_insn	(0X710000CFE8);
	create_insn	(x=0X710000CFF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CFF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000CFFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D000);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D008);
	op_stkvar	(x,	1);
	create_insn	(0X710000D014);
	create_insn	(x=0X710000D018);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D034);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D040);
	op_stkvar	(x,	1);
	set_cmt	(0X710000D048,	"dst",	0);
	set_cmt	(0X710000D04C,	"size",	0);
	set_cmt	(0X710000D050,	"src",	0);
	create_insn	(x=0X710000D050);
	op_stkvar	(x,	1);
	create_insn	(0X710000D060);
	create_insn	(0X710000D070);
	create_insn	(0X710000D074);
	create_insn	(x=0X710000D078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D07C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D080);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D084);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D090);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D09C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D0E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D100);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D11C);
	op_hex		(x,	1);
	create_insn	(x=0X710000D15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D168);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D170);
	op_stkvar	(x,	1);
	create_insn	(0X710000D17C);
	create_insn	(x=0X710000D190);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D19C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D1C4);
	op_stkvar	(x,	1);
	create_insn	(0X710000D1D0);
	create_insn	(x=0X710000D1D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D1E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D1EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D1F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D1F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D1F8);
	op_stkvar	(x,	1);
	create_insn	(0X710000D204);
	create_insn	(x=0X710000D20C);
	op_stkvar	(x,	1);
	create_insn	(0X710000D218);
	create_insn	(x=0X710000D21C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D238);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D260);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D270);
	op_hex		(x,	1);
	create_insn	(0X710000D280);
	create_insn	(x=0X710000D288);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D28C);
	op_stkvar	(x,	1);
	create_insn	(0X710000D298);
	create_insn	(x=0X710000D2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D2A4);
	op_stkvar	(x,	1);
	create_insn	(0X710000D2B0);
	create_insn	(x=0X710000D2C4);
	op_hex		(x,	1);
	create_insn	(x=0X710000D2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D314);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D318);
	op_stkvar	(x,	1);
	create_insn	(0X710000D324);
	create_insn	(0X710000D32C);
	create_insn	(x=0X710000D330);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D334);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D338);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D33C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D34C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D350);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D364);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D374);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D378);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D37C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D384);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D390);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D394);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D398);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D3BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D3C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D3D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D3E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D3E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D3E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D3F8);
	op_hex		(x,	1);
	create_insn	(x=0X710000D424);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D444);
	op_stkvar	(x,	1);
	create_insn	(0X710000D450);
	create_insn	(0X710000D45C);
	create_insn	(x=0X710000D460);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D470);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D480);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D490);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D494);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D498);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D4A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000D4A4);
	op_stkvar	(x,	1);
	create_insn	(0X710000D4BC);
	create_insn	(x=0X710000D4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D4F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D4FC);
	op_stkvar	(x,	1);
	create_qword	(0X710000D508);
	make_array	(0X710000D508,	0X71);
	create_insn	(x=0X710000D890);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D894);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D8A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000D8A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000D8BC);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	set_cmt	(0X710000D8C0,	"a2",	0);
	set_cmt	(0X710000D8C4,	"a1",	0);
	set_cmt	(0X710000D8C8,	"a3",	0);
	create_insn	(x=0X710000D8E0);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000D8EC);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000D8F4);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000D8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000D900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000D904);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000D90C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000D914);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000D918);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA0C);
	op_hex		(x,	1);
	create_insn	(x=0X710000DA10);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA18);
	op_hex		(x,	1);
	create_insn	(x=0X710000DA1C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000DA34);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA38);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA3C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA40);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA44);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA48);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA4C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA50);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA54);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA58);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA5C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA60);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA64);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA68);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA6C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA70);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA74);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA78);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA7C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA80);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA84);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA88);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA8C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA90);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA94);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA98);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DA9C);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DAA0);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DAA4);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DAA8);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DAAC);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DAB0);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DAB4);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DAB8);
	op_plain_offset	(x,	1,	0X7100095710);
	op_plain_offset	(x,	129,	0X7100095710);
	create_insn	(x=0X710000DABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DAC0);
	op_stkvar	(x,	1);
	make_array	(0X710000DAC8,	0X8);
	create_insn	(x=0X710000DAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DAD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DAFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000DB08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000DB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DB28);
	op_stkvar	(x,	1);
	create_insn	(0X710000DB30);
	make_array	(0X710000DB3C,	0X4);
	create_insn	(0X710000DB40);
	create_insn	(0X710000DB4C);
	set_name	(0X710000DB4C,	"nullsub_17");
	create_insn	(0X710000DB50);
	set_name	(0X710000DB50,	"nullsub_18");
	create_insn	(0X710000DB54);
	set_name	(0X710000DB54,	"_ZN2nn2sf14IServiceObject12GetProxyInfoEv");
	create_insn	(0X710000DB5C);
	set_name	(0X710000DB5C,	"_ZN2nn2sf14IServiceObject20GetInterfaceTypeInfoEv");
	create_insn	(x=0X710000DB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DB6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DB70);
	op_stkvar	(x,	1);
	set_cmt	(0X710000DBBC,	"clearMode",	0);
	set_cmt	(0X710000DBC0,	"type",	0);
	set_cmt	(0X710000DBD0,	"event",	0);
	create_insn	(x=0X710000DBD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710000DC28);
	create_insn	(0X710000DC30);
	create_insn	(x=0X710000DC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DC44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DC48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DC4C);
	op_stkvar	(x,	1);
	create_dword	(0X710000DC54);
	create_insn	(0X710000DC58);
	make_array	(0X710000DC5C,	0X4);
	create_insn	(x=0X710000DC60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DCC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DCC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DCCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DCD0);
	op_stkvar	(x,	1);
	create_insn	(0X710000DCD8);
	create_insn	(0X710000DCE0);
	create_insn	(0X710000DD54);
	create_insn	(x=0X710000DD6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DD78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DD84);
	op_stkvar	(x,	1);
	create_insn	(0X710000DD8C);
	create_insn	(x=0X710000DD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DDB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DDC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DDC8);
	op_stkvar	(x,	1);
	create_insn	(0X710000DDEC);
	create_insn	(0X710000DE0C);
	create_insn	(x=0X710000DE60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DE68);
	op_stkvar	(x,	1);
	create_insn	(0X710000DE74);
	create_insn	(x=0X710000DE78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DE80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DEA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DEA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DEB0);
	op_stkvar	(x,	1);
	create_insn	(0X710000DEC4);
	create_insn	(0X710000DEDC);
	create_insn	(x=0X710000DF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DF70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DF74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DF78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DFC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DFC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DFCC);
	op_stkvar	(x,	1);
	create_insn	(0X710000DFD4);
	create_insn	(x=0X710000DFD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DFE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000DFEC);
	op_stkvar	(x,	1);
	create_insn	(0X710000DFF8);
	create_insn	(x=0X710000E000);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E00C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E09C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000E0CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000E0FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E100);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E108);
	op_stkvar	(x,	1);
	create_insn	(0X710000E110);
	create_insn	(0X710000E138);
	create_insn	(x=0X710000E13C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E140);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E148);
	op_stkvar	(x,	1);
	create_qword	(0X710000E150);
	create_insn	(x=0X710000E158);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E174);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000E1B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000E1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E1D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E1E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E1E4);
	op_stkvar	(x,	1);
	make_array	(0X710000E1EC,	0X4);
	create_insn	(x=0X710000E1F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E1F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E1F8);
	op_stkvar	(x,	1);
	create_insn	(0X710000E234);
	create_insn	(0X710000E24C);
	create_insn	(0X710000E28C);
	create_insn	(0X710000E350);
	create_insn	(x=0X710000E360);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E364);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E368);
	op_stkvar	(x,	1);
	create_insn	(0X710000E370);
	set_name	(0X710000E370,	"nullsub_19");
	create_insn	(0X710000E374);
	set_name	(0X710000E374,	"nullsub_20");
	make_array	(0X710000E378,	0X8);
	create_insn	(0X710000E380);
	create_insn	(x=0X710000E384);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E390);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E394);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E398);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E3B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E3C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E3F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E41C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E428);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000E43C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E440);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E46C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E494);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E4B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E4E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E4E4);
	op_stkvar	(x,	1);
	create_insn	(0X710000E4F4);
	create_insn	(0X710000E4FC);
	create_insn	(x=0X710000E500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E504);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E548);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E574);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E58C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E648);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E64C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E650);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E654);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E65C);
	op_stkvar	(x,	1);
	create_qword	(0X710000E668);
	create_insn	(x=0X710000E670);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E674);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E744);
	op_hex		(x,	1);
	create_insn	(0X710000E7E4);
	set_cmt	(0X710000E7E8,	"switch 4 cases",	0);
	create_insn	(x=0X710000E7F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000E7F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000E808,	"switch jump",	0);
	set_cmt	(0X710000E80C,	"jumptable 000000710000E808 case 1",	1);
	create_insn	(0X710000E80C);
	set_cmt	(0X710000E818,	"jumptable 000000710000E808 default case",	1);
	create_insn	(0X710000E818);
	set_name	(0X710000E818,	"def_710000E808");
	set_cmt	(0X710000E820,	"jumptable 000000710000E808 case 2",	1);
	create_insn	(0X710000E820);
	create_insn	(x=0X710000E858);
	op_hex		(x,	1);
	set_cmt	(0X710000E930,	"jumptable 000000710000E808 case 0",	1);
	create_insn	(x=0X710000E93C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E940);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E944);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E94C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E950);
	op_stkvar	(x,	1);
	set_cmt	(0X710000E958,	"jumptable 000000710000E808 case 3",	1);
	create_insn	(0X710000E958);
	create_insn	(x=0X710000E960);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E964);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E968);
	op_stkvar	(x,	1);
	create_insn	(0X710000E9B4);
	create_insn	(x=0X710000E9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E9D0);
	op_stkvar	(x,	1);
	make_array	(0X710000E9D8,	0X8);
	create_insn	(x=0X710000E9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000E9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000EB3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000EB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000EB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000EB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000EB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000EB58);
	op_stkvar	(x,	1);
	create_insn	(0X710000EB60);
	create_insn	(x=0X710000EB64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710000EB6C);
	set_name	(0X710000EB6C,	"j_Heap_Deallocate");
	create_insn	(0X710000EB70);
	create_insn	(0X710000EB78);
	create_insn	(0X710000EB80);
	create_insn	(0X710000EB8C);
	create_insn	(x=0X710000EBA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710000EBC0);
	create_insn	(x=0X710000EBD0);
	op_hex		(x,	1);
	create_insn	(x=0X710000EC5C);
	op_hex		(x,	1);
	make_array	(0X710000ECC8,	0X8);
	create_insn	(0X710000ECD0);
	create_insn	(x=0X710000ECD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X710000ECDC,	0X4);
	create_insn	(x=0X710000ECE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ECF4);
	op_stkvar	(x,	1);
	make_array	(0X710000ECFC,	0X4);
	create_insn	(x=0X710000ED00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ED04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ED2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000ED30);
	op_stkvar	(x,	1);
	make_array	(0X710000ED38,	0X8);
	create_insn	(x=0X710000ED40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000ED44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000ED4C);
	op_hex		(x,	1);
	create_insn	(0X710000ED54);
	make_array	(0X710000ED58,	0X8);
	create_insn	(x=0X710000ED60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000ED64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000ED6C);
	op_hex		(x,	1);
	create_insn	(0X710000ED74);
	create_insn	(0X710000ED78);
	create_insn	(0X710000EE9C);
	create_insn	(x=0X710000EEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000EEB4);
	op_stkvar	(x,	1);
	set_cmt	(0X710000EED8,	"switch 4 cases",	0);
	create_insn	(x=0X710000EEE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000EEE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000EEF4,	"switch jump",	0);
	set_cmt	(0X710000EEF8,	"jumptable 000000710000EEF4 case 0",	1);
	create_insn	(0X710000EEF8);
	set_cmt	(0X710000EF04,	"jumptable 000000710000EEF4 case 2",	1);
	create_insn	(0X710000EF04);
	set_cmt	(0X710000EF18,	"jumptable 000000710000EEF4 case 1",	1);
	create_insn	(0X710000EF18);
	set_cmt	(0X710000EF28,	"jumptable 000000710000EEF4 case 3",	1);
	create_insn	(0X710000EF28);
	create_insn	(x=0X710000EF58);
	op_hex		(x,	1);
	create_insn	(x=0X710000EF70);
	op_hex		(x,	1);
	create_insn	(x=0X710000EF88);
	op_hex		(x,	1);
	create_insn	(x=0X710000EFC0);
	op_hex		(x,	1);
	create_insn	(x=0X710000EFD4);
	op_hex		(x,	1);
	create_insn	(x=0X710000EFEC);
	op_hex		(x,	1);
	create_insn	(x=0X710000F008);
	op_hex		(x,	1);
	create_insn	(x=0X710000F020);
	op_hex		(x,	1);
	create_insn	(x=0X710000F038);
	op_hex		(x,	1);
	create_insn	(x=0X710000F044);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F048);
	op_hex		(x,	1);
	create_insn	(x=0X710000F04C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F054);
	op_hex		(x,	1);
	create_insn	(x=0X710000F05C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F060);
	op_hex		(x,	1);
	create_insn	(x=0X710000F064);
	op_stkvar	(x,	1);
	create_insn	(0X710000F06C);
	set_cmt	(0X710000F070,	"jumptable 000000710000EEF4 default case",	1);
	create_insn	(0X710000F070);
	set_name	(0X710000F070,	"def_710000EEF4");
	create_insn	(0X710000F074);
	create_insn	(0X710000F080);
	create_insn	(x=0X710000F09C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F0A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F0A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F0B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F0B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F0C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F0D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F180);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F184);
	op_stkvar	(x,	1);
	make_array	(0X710000F18C,	0X4);
	create_insn	(x=0X710000F190);
	op_stkvar	(x,	1);
	set_name	(0X710000F190,	"_ZN2nn2sf4hipc6server2v16detail29HipcAllInOneServerManagerBaseD2Ev");
	create_insn	(x=0X710000F194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F1A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F1A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710000F1C8);
	create_insn	(0X710000F210);
	set_cmt	(0X710000F254,	"result",	0);
	set_cmt	(0X710000F25C,	"result",	0);
	create_insn	(x=0X710000F274);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F27C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710000F28C,	"result",	0);
	create_insn	(x=0X710000F290);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F294);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F298);
	op_stkvar	(x,	1);
	create_insn	(0X710000F2A0);
	create_insn	(x=0X710000F2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F2A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F2BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F2E4);
	op_stkvar	(x,	1);
	create_insn	(0X710000F2F0);
	create_insn	(x=0X710000F2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F300);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F320);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F328);
	op_stkvar	(x,	1);
	create_insn	(0X710000F344);
	create_insn	(x=0X710000F368);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F370);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F378);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F37C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710000F3B8);
	create_insn	(x=0X710000F3BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F410);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F414);
	op_stkvar	(x,	1);
	create_insn	(0X710000F420);
	set_name	(0X710000F420,	"Unk4440::ClearEvent");
	create_insn	(0X710000F428);
	create_insn	(x=0X710000F430);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F434);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F43C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F440);
	op_stkvar	(x,	1);
	set_cmt	(0X710000F480,	"a1",	0);
	set_cmt	(0X710000F4CC,	"a1",	0);
	create_insn	(0X710000F4E8);
	create_insn	(x=0X710000F4FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F504);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F50C);
	op_stkvar	(x,	1);
	create_insn	(0X710000F514);
	create_insn	(x=0X710000F518);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F520);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F544);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F548);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F54C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F554);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F56C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F590);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F59C);
	op_stkvar	(x,	1);
	create_insn	(0X710000F5B4);
	create_insn	(x=0X710000F5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F600);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F604);
	op_stkvar	(x,	1);
	create_insn	(0X710000F610);
	create_insn	(x=0X710000F614);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F660);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F664);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F668);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F670);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F674);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F6CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F6D8);
	op_stkvar	(x,	1);
	create_insn	(0X710000F6E0);
	create_insn	(x=0X710000F6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F6F0);
	op_stkvar	(x,	1);
	create_insn	(0X710000F6F8);
	create_insn	(x=0X710000F714);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F718);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F71C);
	op_stkvar	(x,	1);
	create_insn	(0X710000F724);
	create_insn	(0X710000F730);
	create_dword	(0X710000F734);
	make_array	(0X710000F738,	0X8);
	create_insn	(x=0X710000F740);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F744);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F768);
	op_stkvar	(x,	1);
	set_cmt	(0X710000F770,	"this",	0);
	create_insn	(x=0X710000F780);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F784);
	op_stkvar	(x,	1);
	create_insn	(0X710000F78C);
	create_insn	(0X710000F7A0);
	set_name	(0X710000F7A0,	"nullsub_21");
	create_insn	(0X710000F7A4);
	set_name	(0X710000F7A4,	"nullsub_75");
	create_insn	(0X710000F7A8);
	set_name	(0X710000F7A8,	"nullsub_74");
	make_array	(0X710000F7AC,	0X4);
	create_insn	(x=0X710000F7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F81C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F828);
	op_stkvar	(x,	1);
	create_insn	(0X710000F830);
	create_insn	(x=0X710000F834);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F83C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F840);
	op_stkvar	(x,	1);
	make_array	(0X710000F848,	0X8);
	create_insn	(x=0X710000F850);
	op_stkvar	(x,	1);
	set_name	(0X710000F850,	"_ZN2nn2sf4cmif6server23CmifServerDomainManager14EntryAllocatorD2Ev");
	create_insn	(x=0X710000F854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F858);
	op_stkvar	(x,	1);
	create_insn	(0X710000F87C);
	set_cmt	(0X710000F8B0,	"result",	0);
	create_insn	(0X710000F8B0);
	create_insn	(x=0X710000F8B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F8C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F8CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710000F8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F8F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F8FC);
	op_stkvar	(x,	1);
	create_insn	(0X710000F91C);
	create_insn	(x=0X710000F9AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F9B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F9B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F9C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000F9D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA5C);
	op_stkvar	(x,	1);
	create_insn	(0X710000FA64);
	create_insn	(x=0X710000FA74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA84);
	op_stkvar	(x,	1);
	make_array	(0X710000FA8C,	0X4);
	create_insn	(x=0X710000FA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FA9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FAA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB2C);
	op_stkvar	(x,	1);
	create_insn	(0X710000FB34);
	create_insn	(x=0X710000FB44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB54);
	op_stkvar	(x,	1);
	make_array	(0X710000FB5C,	0X4);
	create_insn	(x=0X710000FB60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FB70);
	op_stkvar	(x,	1);
	create_insn	(0X710000FB94);
	create_insn	(x=0X710000FBEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FBF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FBF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FBF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FBFC);
	op_stkvar	(x,	1);
	make_array	(0X710000FC04,	0XC);
	create_insn	(x=0X710000FC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FC14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FC1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FC20);
	op_stkvar	(x,	1);
	create_insn	(0X710000FC44);
	create_insn	(x=0X710000FC9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FCA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FCA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FCA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FCAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FCB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FCB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FCBC);
	op_stkvar	(x,	1);
	create_insn	(0X710000FCF4);
	create_insn	(x=0X710000FD44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FD74);
	op_stkvar	(x,	1);
	create_insn	(0X710000FDB0);
	create_insn	(x=0X710000FE00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FE80);
	op_stkvar	(x,	1);
	create_insn	(0X710000FE88);
	create_insn	(x=0X710000FEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FEB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FEBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FEC0);
	op_stkvar	(x,	1);
	create_insn	(0X710000FEC8);
	create_insn	(x=0X710000FF30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF40);
	op_stkvar	(x,	1);
	create_insn	(0X710000FF48);
	create_insn	(x=0X710000FF4C);
	op_hex		(x,	1);
	create_insn	(x=0X710000FF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FF9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FFA0);
	op_stkvar	(x,	1);
	create_insn	(0X710000FFA8);
	create_insn	(x=0X710000FFD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FFD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FFD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710000FFDC);
	op_stkvar	(x,	1);
	create_insn	(0X710000FFE4);
	create_insn	(x=0X710001000C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010010);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010014);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010018);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010020);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010024);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001002C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001005C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010060);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010064);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010068);
	op_stkvar	(x,	1);
	create_insn	(0X7100010070);
	create_insn	(x=0X710001009C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000100B0);
	create_insn	(x=0X71000100D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000100FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010130);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001013C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010144);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010148);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001017C);
	op_stkvar	(x,	1);
	create_dword	(0X7100010184);
	create_insn	(0X7100010188);
	create_insn	(x=0X710001018C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010190);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000101C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000101C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000101D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000101D4);
	op_stkvar	(x,	1);
	create_insn	(0X71000101DC);
	create_insn	(0X71000101E4);
	create_insn	(x=0X71000101E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000101EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000101F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000101F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010214);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001021C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010230);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010234);
	op_stkvar	(x,	1);
	create_insn	(0X7100010254);
	create_insn	(x=0X710001025C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001026C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010294);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001029C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000102A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000102AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000102B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000102B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000102BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000102C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000102CC);
	op_stkvar	(x,	1);
	set_name	(0X71000102CC,	"_ZN2nn2sf4hipc6server2v128HipcServerSessionManagerBase14ProcessRequestEPNS3_21HipcServerSessionBaseEPvm");
	create_insn	(x=0X71000102D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000102D4);
	op_stkvar	(x,	1);
	create_insn	(0X7100010304);
	create_insn	(0X710001033C);
	create_insn	(x=0X710001035C);
	op_hex		(x,	1);
	create_insn	(x=0X7100010378);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001037C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010380);
	op_stkvar	(x,	1);
	create_insn	(0X7100010388);
	create_insn	(x=0X71000103A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000103A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000103A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000103B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000103B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000103B8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000103E0,	"int",	0);
	create_insn	(x=0X71000103E0);
	op_hex		(x,	1);
	create_insn	(x=0X710001040C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010414);
	op_stkvar	(x,	1);
	create_insn	(0X710001041C);
	create_insn	(x=0X7100010420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010424);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010428);
	op_stkvar	(x,	1);
	create_insn	(0X7100010430);
	create_insn	(x=0X7100010434);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001043C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010454);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010470);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010478);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010494);
	op_hex		(x,	1);
	create_insn	(x=0X7100010498);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000104C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000104C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000104CC);
	op_stkvar	(x,	1);
	create_insn	(0X71000104D8);
	create_insn	(x=0X71000104E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000104E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000104E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000104F4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000104F8,	"result",	0);
	set_cmt	(0X71000104FC,	"int",	0);
	create_insn	(x=0X7100010528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001052C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010530);
	op_stkvar	(x,	1);
	make_array	(0X710001053C,	0X4);
	create_insn	(x=0X7100010540);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010544);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010548);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001054C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010550);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010564);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001057C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010584);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001059C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000105A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000105A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000105AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000105B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000105BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000105C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000105C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000105CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000105D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000105D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000105DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000105E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000105F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010610);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010614);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001061C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010638);
	op_hex		(x,	1);
	create_insn	(x=0X710001063C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010664);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010670);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010678);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010694);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000106E8);
	create_insn	(0X71000106F0);
	create_insn	(x=0X71000106F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000106FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010700);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010704);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010728);
	op_hex		(x,	1);
	create_insn	(x=0X710001072C);
	op_hex		(x,	1);
	create_insn	(0X7100010750);
	set_cmt	(0X7100010758,	"switch 4 cases",	0);
	create_insn	(x=0X710001076C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010770);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710001077C,	"switch jump",	0);
	set_cmt	(0X7100010780,	"jumptable 000000710001077C cases 4,6",	1);
	create_insn	(0X7100010780);
	create_insn	(x=0X7100010784);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000107B0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000107DC,	"jumptable 000000710001077C cases 5,7",	1);
	create_insn	(0X71000107DC);
	create_insn	(0X7100010804);
	create_insn	(x=0X7100010808);
	op_hex		(x,	1);
	create_insn	(x=0X7100010850);
	op_hex		(x,	1);
	create_insn	(x=0X7100010858);
	op_hex		(x,	1);
	create_insn	(x=0X7100010874);
	op_hex		(x,	1);
	set_cmt	(0X7100010898,	"jumptable 000000710001077C default case",	1);
	set_name	(0X7100010898,	"def_710001077C");
	create_insn	(0X71000108A4);
	create_insn	(x=0X71000108B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000108DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000108E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000108E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000108E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000108EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000108F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000108FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001098C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010990);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010998);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001099C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010A28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010A34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010A44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100010A48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100010A54);
	create_insn	(x=0X7100010A58);
	op_stkvar	(x,	1);
	set_cmt	(0X7100010A78,	"int",	0);
	create_insn	(x=0X7100010A78);
	op_hex		(x,	1);
	create_insn	(x=0X7100010AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010AAC);
	op_stkvar	(x,	1);
	create_insn	(0X7100010AB4);
	create_insn	(x=0X7100010AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010AC0);
	op_stkvar	(x,	1);
	make_array	(0X7100010AC8,	0X8);
	create_insn	(x=0X7100010AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010AE8);
	op_hex		(x,	1);
	create_insn	(0X7100010B24);
	create_insn	(0X7100010B88);
	create_insn	(x=0X7100010BDC);
	op_hex		(x,	1);
	create_insn	(0X7100010C08);
	create_insn	(0X7100010C38);
	create_insn	(0X7100010C64);
	create_insn	(0X7100010C6C);
	create_insn	(x=0X7100010C8C);
	op_hex		(x,	1);
	create_insn	(0X7100010CB8);
	create_insn	(0X7100010CD8);
	create_insn	(0X7100010CF0);
	create_insn	(x=0X7100010D80);
	op_hex		(x,	1);
	set_cmt	(0X7100010D8C,	"dst",	0);
	set_cmt	(0X7100010D90,	"size",	0);
	create_insn	(x=0X7100010DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010DA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100010DAC);
	make_array	(0X7100010DCC,	0X4);
	create_insn	(x=0X7100010DD0);
	op_stkvar	(x,	1);
	create_insn	(0X7100010E18);
	create_insn	(x=0X7100010EAC);
	op_hex		(x,	1);
	create_insn	(x=0X7100010EB0);
	op_hex		(x,	1);
	create_insn	(x=0X7100010EDC);
	op_hex		(x,	1);
	create_insn	(x=0X7100010EEC);
	op_hex		(x,	1);
	create_insn	(x=0X7100010EF4);
	op_hex		(x,	1);
	create_insn	(x=0X7100010F00);
	op_hex		(x,	1);
	create_insn	(0X7100010F14);
	create_insn	(0X7100010F34);
	create_insn	(x=0X7100010F3C);
	op_hex		(x,	1);
	create_insn	(x=0X7100010F5C);
	op_hex		(x,	1);
	create_insn	(x=0X7100010F78);
	op_hex		(x,	1);
	create_insn	(x=0X7100010F80);
	op_hex		(x,	1);
	create_insn	(x=0X7100010F8C);
	op_hex		(x,	1);
	create_insn	(0X7100010FA8);
	create_insn	(x=0X7100010FB4);
	op_hex		(x,	1);
	create_insn	(0X7100010FC4);
	create_insn	(x=0X7100010FD8);
	op_stkvar	(x,	1);
	create_insn	(0X7100010FE0);
	create_insn	(x=0X7100010FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100010FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011000);
	op_stkvar	(x,	1);
	create_insn	(0X7100011034);
	create_insn	(0X71000110A0);
	create_insn	(x=0X71000110D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000110D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000110DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000110E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000110E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000110EC);
	make_array	(0X71000110F8,	0X8);
	create_qword	(0X7100011100);
	make_array	(0X7100011100,	0X2A);
	create_insn	(0X7100011250);
	create_insn	(0X7100011280);
	create_insn	(x=0X7100011298);
	op_hex		(x,	1);
	create_insn	(x=0X71000112F4);
	op_hex		(x,	1);
	create_insn	(x=0X71000112F8);
	op_hex		(x,	1);
	create_insn	(0X7100011310);
	create_insn	(x=0X7100011328);
	op_hex		(x,	1);
	create_insn	(x=0X710001132C);
	op_hex		(x,	1);
	create_insn	(0X7100011340);
	make_array	(0X7100011344,	0XC);
	create_insn	(x=0X7100011350);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011354);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011358);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000113A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000113A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000113AC);
	op_stkvar	(x,	1);
	make_array	(0X71000113B4,	0XC);
	create_insn	(x=0X71000113C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000113F4);
	create_insn	(0X7100011470);
	create_insn	(x=0X7100011490);
	op_stkvar	(x,	1);
	create_insn	(0X7100011498);
	make_array	(0X7100011574,	0XC);
	create_insn	(x=0X7100011580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011584);
	op_stkvar	(x,	1);
	set_cmt	(0X7100011590,	"switch 4 cases",	0);
	create_insn	(x=0X71000115A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000115AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000115B8,	"switch jump",	0);
	set_cmt	(0X71000115BC,	"jumptable 00000071000115B8 case 1",	1);
	create_insn	(0X71000115BC);
	create_insn	(x=0X71000115C4);
	op_hex		(x,	1);
	set_cmt	(0X71000115D0,	"jumptable 00000071000115B8 case 2",	1);
	create_insn	(0X71000115D0);
	set_cmt	(0X71000115D4,	"jumptable 00000071000115B8 case 0",	1);
	create_insn	(x=0X71000115D8);
	op_hex		(x,	1);
	set_cmt	(0X71000115E0,	"jumptable 00000071000115B8 default case",	1);
	create_insn	(x=0X71000115E0);
	op_stkvar	(x,	1);
	set_name	(0X71000115E0,	"def_71000115B8");
	create_insn	(x=0X71000115E4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000115EC,	"jumptable 00000071000115B8 case 3",	1);
	create_insn	(0X71000115EC);
	create_insn	(x=0X71000115FC);
	op_hex		(x,	1);
	create_insn	(x=0X7100011608);
	op_hex		(x,	1);
	create_insn	(0X7100011640);
	create_insn	(x=0X7100011728);
	op_hex		(x,	1);
	create_insn	(x=0X710001172C);
	op_hex		(x,	1);
	create_insn	(x=0X710001173C);
	op_hex		(x,	1);
	create_insn	(x=0X7100011744);
	op_hex		(x,	1);
	create_insn	(x=0X7100011760);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011764);
	op_stkvar	(x,	1);
	create_insn	(0X710001176C);
	create_insn	(x=0X7100011778);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001177C);
	op_stkvar	(x,	1);
	create_insn	(0X7100011784);
	create_insn	(x=0X7100011788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001178C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011790);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011798);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000117A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000117C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000117CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000117D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000117D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000117E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000117F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011800);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011810);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001181C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011820);
	op_stkvar	(x,	1);
	create_insn	(0X710001182C);
	create_insn	(x=0X7100011838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001183C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011840);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001184C);
	op_stkvar	(x,	1);
	create_insn	(0X7100011854);
	create_insn	(x=0X7100011858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001185C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011864);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001186C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100011870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011888);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011894);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001189C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000118A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000118AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000118C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000118C8);
	op_stkvar	(x,	1);
	create_insn	(0X71000118D4);
	set_name	(0X71000118D4,	"nullsub_22");
	create_insn	(0X71000118D8);
	set_name	(0X71000118D8,	"nullsub_23");
	create_insn	(x=0X71000118DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000118E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000118E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000118E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011944);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001194C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011950);
	op_stkvar	(x,	1);
	create_insn	(0X7100011958);
	create_insn	(x=0X7100011964);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011968);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001196C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011970);
	op_stkvar	(x,	1);
	create_insn	(0X7100011978);
	create_insn	(x=0X7100011988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001199C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000119B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000119C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000119CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000119D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000119D4);
	op_stkvar	(x,	1);
	create_insn	(0X71000119DC);
	create_insn	(x=0X71000119E0);
	op_hex		(x,	1);
	create_insn	(0X71000119E8);
	create_insn	(0X71000119F0);
	create_insn	(x=0X7100011A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A88);
	op_stkvar	(x,	1);
	create_insn	(0X7100011A90);
	create_insn	(x=0X7100011A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011B0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100011B10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100011B14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100011B1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100011B30,	"size",	0);
	create_insn	(0X7100011B48);
	create_insn	(0X7100011B50);
	create_insn	(x=0X7100011B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011B64);
	op_stkvar	(x,	1);
	create_insn	(0X7100011B80);
	create_insn	(0X7100011B8C);
	set_cmt	(0X7100011B9C,	"src",	0);
	set_cmt	(0X7100011BA0,	"dst",	0);
	create_insn	(x=0X7100011BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100011BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011BB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100011BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011BCC);
	op_stkvar	(x,	1);
	create_insn	(0X7100011BE8);
	create_insn	(x=0X7100011C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C18);
	op_stkvar	(x,	1);
	create_insn	(0X7100011C24);
	create_insn	(x=0X7100011C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C38);
	op_stkvar	(x,	1);
	set_cmt	(0X7100011C6C,	"size",	0);
	set_cmt	(0X7100011C70,	"dst",	0);
	set_cmt	(0X7100011C74,	"src",	0);
	create_insn	(x=0X7100011C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011CBC);
	op_stkvar	(x,	1);
	create_insn	(0X7100011CC8);
	create_insn	(x=0X7100011CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011CD8);
	op_stkvar	(x,	1);
	create_insn	(0X7100011CE4);
	create_insn	(x=0X7100011D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011D1C);
	op_stkvar	(x,	1);
	create_insn	(0X7100011D28);
	create_insn	(0X7100011D38);
	create_insn	(0X7100011D48);
	make_array	(0X7100011D58,	0X8);
	create_insn	(0X7100011D60);
	create_insn	(x=0X7100011D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011D70);
	op_stkvar	(x,	1);
	create_insn	(0X7100011D90);
	create_insn	(x=0X7100011DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E00);
	op_stkvar	(x,	1);
	create_insn	(0X7100011E0C);
	create_insn	(x=0X7100011E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E6C);
	op_stkvar	(x,	1);
	create_insn	(0X7100011E78);
	make_array	(0X7100011E88,	0X8);
	create_insn	(x=0X7100011E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011EB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100011EBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100011ED0);
	set_cmt	(0X7100011F40,	"dst",	0);
	set_cmt	(0X7100011F44,	"src",	0);
	set_cmt	(0X7100011F48,	"size",	0);
	create_insn	(x=0X7100011F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011F58);
	op_stkvar	(x,	1);
	create_insn	(0X7100011F60);
	create_insn	(0X7100011F70);
	create_insn	(x=0X7100011F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011F9C);
	op_hex		(x,	1);
	create_insn	(x=0X7100011FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100011FDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100011FE8);
	create_insn	(0X7100011FF8);
	create_insn	(x=0X7100011FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012000);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012004);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012008);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012010);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012018);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001203C);
	op_hex		(x,	1);
	create_insn	(x=0X7100012044);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012050);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012054);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012084);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012088);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001208C);
	op_stkvar	(x,	1);
	create_insn	(0X7100012098);
	create_insn	(x=0X710001209C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000120A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000120AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000120B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000120C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000120D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000120F0);
	op_stkvar	(x,	1);
	create_insn	(0X7100012100);
	create_insn	(0X7100012108);
	create_insn	(x=0X710001210C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012114);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012118);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001211C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012134);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001214C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012154);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001215C);
	create_insn	(x=0X7100012168);
	op_hex		(x,	1);
	create_insn	(x=0X710001217C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000121C0);
	create_insn	(x=0X71000121C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000121FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001221C);
	op_stkvar	(x,	1);
	create_insn	(0X710001222C);
	create_insn	(0X71000125C0);
	create_insn	(x=0X71000125C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000125C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000125CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000125D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000125E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000125E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000125F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000125F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012608);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012610);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012618);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001262C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012630);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012634);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012670);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012674);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012680);
	op_hex		(x,	1);
	create_insn	(x=0X71000126C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000126CC);
	op_stkvar	(x,	1);
	create_insn	(0X71000126D8);
	create_insn	(0X71000126E4);
	create_insn	(x=0X71000126F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012704);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012718);
	op_stkvar	(x,	1);
	create_insn	(0X7100012730);
	create_insn	(x=0X7100012738);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012740);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001274C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012750);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012758);
	op_stkvar	(x,	1);
	create_insn	(0X7100012764);
	create_insn	(x=0X7100012768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001276C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012770);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012774);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012780);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001278C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012790);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000127F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012810);
	op_hex		(x,	1);
	create_insn	(x=0X7100012850);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001285C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012864);
	op_stkvar	(x,	1);
	create_insn	(0X7100012870);
	create_insn	(x=0X7100012884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012890);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000128A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000128B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000128C4);
	create_insn	(x=0X71000128CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000128D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000128E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000128E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000128E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000128EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000128F8);
	create_insn	(x=0X7100012900);
	op_stkvar	(x,	1);
	create_insn	(0X710001290C);
	create_insn	(x=0X7100012910);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001291C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001292C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012930);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001293C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012944);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012954);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001295C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012960);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012964);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001296C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012970);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012978);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001297C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012980);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000129BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000129C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000129CC);
	op_hex		(x,	1);
	create_insn	(x=0X7100012A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012A18);
	op_stkvar	(x,	1);
	create_insn	(0X7100012A24);
	create_insn	(0X7100012A30);
	create_insn	(x=0X7100012A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012A64);
	op_stkvar	(x,	1);
	create_insn	(0X7100012A7C);
	create_insn	(x=0X7100012A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012AD8);
	op_stkvar	(x,	1);
	create_insn	(0X7100012AE0);
	create_dword	(0X7100012AE4);
	make_array	(0X7100012AE8,	0X8);
	create_insn	(x=0X7100012AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012B1C);
	op_stkvar	(x,	1);
	create_insn	(0X7100012B24);
	create_qword	(0X7100012B28);
	create_insn	(0X7100012B30);
	set_name	(0X7100012B30,	"_ZN2nn2sf4hipc24CloseClientSessionHandleENS_3svc6HandleE");
	create_insn	(x=0X7100012B34);
	op_stkvar	(x,	1);
	set_cmt	(0X7100012B3C,	"__int64",	0);
	create_insn	(x=0X7100012B3C);
	op_hex		(x,	1);
	create_insn	(x=0X7100012B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012B58);
	op_stkvar	(x,	1);
	create_insn	(0X7100012B60);
	set_name	(0X7100012B60,	"_ZN2nn2sf4hipc21GetMessageBufferOnTlsEv");
	make_array	(0X7100012B68,	0X8);
	create_insn	(x=0X7100012B70);
	op_stkvar	(x,	1);
	set_name	(0X7100012B70,	"_ZN2nn2sf4hipc15SendSyncRequestENS_3svc6HandleEPvm");
	create_insn	(x=0X7100012B7C);
	op_hex		(x,	1);
	create_insn	(0X7100012B9C);
	create_insn	(x=0X7100012BA4);
	op_hex		(x,	1);
	create_insn	(x=0X7100012BC4);
	op_stkvar	(x,	1);
	make_array	(0X7100012BCC,	0X4);
	create_insn	(x=0X7100012BD0);
	op_stkvar	(x,	1);
	set_name	(0X7100012BD0,	"_ZN2nn2sf4hipc21CloseServerPortHandleENS_3svc6HandleE");
	create_insn	(x=0X7100012BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012BDC);
	op_hex		(x,	1);
	create_insn	(x=0X7100012BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012BFC);
	op_stkvar	(x,	1);
	set_cmt	(0X7100012C04,	"__int64",	0);
	create_insn	(0X7100012C04);
	create_insn	(x=0X7100012C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012C18);
	op_stkvar	(x,	1);
	create_insn	(0X7100012C20);
	create_qword	(0X7100012C28);
	create_insn	(0X7100012C30);
	set_name	(0X7100012C30,	"j__ZN2nn2os25InitializeMultiWaitHolderEPNS0_19MultiWaitHolderTypeEj");
	make_array	(0X7100012C34,	0XC);
	create_insn	(x=0X7100012C40);
	op_stkvar	(x,	1);
	set_name	(0X7100012C40,	"_ZN2nn2sf4hipc13AcceptSessionEPNS_3svc6HandleES3_");
	create_insn	(x=0X7100012C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012C4C);
	op_hex		(x,	1);
	create_insn	(x=0X7100012C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012C74);
	op_stkvar	(x,	1);
	create_insn	(0X7100012C7C);
	create_insn	(x=0X7100012C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012C90);
	op_stkvar	(x,	1);
	set_name	(0X7100012C90,	"_ZN2nn2sf4hipc13CreateSessionEPNS_3svc6HandleES4_");
	create_insn	(x=0X7100012CA4);
	op_hex		(x,	1);
	create_insn	(x=0X7100012CC4);
	op_stkvar	(x,	1);
	make_array	(0X7100012CCC,	0X4);
	create_insn	(0X7100012CD0);
	set_name	(0X7100012CD0,	"_ZN2nn2sf4hipc24CloseServerSessionHandleENS_3svc6HandleE");
	create_insn	(x=0X7100012CD4);
	op_stkvar	(x,	1);
	set_cmt	(0X7100012CDC,	"__int64",	0);
	create_insn	(x=0X7100012CDC);
	op_hex		(x,	1);
	create_insn	(x=0X7100012CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012CEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012CF8);
	op_stkvar	(x,	1);
	create_insn	(0X7100012D00);
	set_name	(0X7100012D00,	"j__ZN2nn2os25InitializeMultiWaitHolderEPNS0_19MultiWaitHolderTypeEj_0");
	make_array	(0X7100012D04,	0XC);
	create_insn	(0X7100012D10);
	set_name	(0X7100012D10,	"_ZN2nn2sf4hipc7ReceiveEPbNS_3svc6HandleEPvm");
	create_insn	(x=0X7100012D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012D5C);
	op_hex		(x,	1);
	create_insn	(0X7100012D90);
	create_insn	(0X7100012DB4);
	create_insn	(x=0X7100012DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012DC4);
	op_stkvar	(x,	1);
	create_insn	(0X7100012DD0);
	set_name	(0X7100012DD0,	"_ZN2nn2sf4hipc5ReplyENS_3svc6HandleEPvm");
	create_insn	(x=0X7100012DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012DEC);
	op_hex		(x,	1);
	create_insn	(x=0X7100012DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012E14);
	op_hex		(x,	1);
	create_insn	(x=0X7100012E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012E3C);
	op_hex		(x,	1);
	create_insn	(x=0X7100012E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012E44);
	op_stkvar	(x,	1);
	create_dword	(0X7100012E5C);
	create_insn	(x=0X7100012E60);
	op_stkvar	(x,	1);
	set_name	(0X7100012E60,	"_ZN2nn2sf4hipc16GetPortProcessorENS_3svc6HandleE");
	create_insn	(x=0X7100012E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012E6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012E74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012E80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012E84);
	op_hex		(x,	1);
	create_insn	(x=0X7100012E88);
	op_plain_offset	(x,	1,	0X710009C018);
	op_plain_offset	(x,	129,	0X710009C018);
	create_insn	(x=0X7100012E98);
	op_hex		(x,	1);
	create_insn	(x=0X7100012EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012EA4);
	op_stkvar	(x,	1);
	make_array	(0X7100012EAC,	0X4);
	create_insn	(x=0X7100012EB0);
	op_stkvar	(x,	1);
	set_name	(0X7100012EB0,	"_ZN2nn2sf4hipc16GetPortProcessorEPKc");
	create_insn	(x=0X7100012EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012EBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012ED0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100012ED4);
	op_plain_offset	(x,	1,	0X710009C018);
	op_plain_offset	(x,	129,	0X710009C018);
	create_insn	(x=0X7100012EE4);
	op_hex		(x,	1);
	create_insn	(x=0X7100012EEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012EF0);
	op_stkvar	(x,	1);
	make_array	(0X7100012EF8,	0X8);
	create_insn	(0X7100012F00);
	create_insn	(x=0X7100012F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F24);
	op_stkvar	(x,	1);
	create_dword	(0X7100012F2C);
	create_insn	(0X7100012F30);
	set_name	(0X7100012F30,	"_ZN2nn2sf4hipc29FinalizeHipcServiceResolutionEv");
	create_insn	(x=0X7100012F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F54);
	op_stkvar	(x,	1);
	create_dword	(0X7100012F5C);
	create_insn	(x=0X7100012F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012FA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100012FAC);
	create_insn	(x=0X7100012FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012FCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100012FD0);
	op_stkvar	(x,	1);
	make_array	(0X7100012FD8,	0X8);
	create_insn	(x=0X7100012FE0);
	op_stkvar	(x,	1);
	set_name	(0X7100012FE0,	"_ZN2nn2sf4hipc21UnregisterHipcServiceEPKc");
	create_insn	(x=0X7100012FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013000);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013008);
	op_stkvar	(x,	1);
	create_insn	(0X7100013010);
	create_insn	(x=0X7100013024);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001302C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013030);
	op_stkvar	(x,	1);
	create_insn	(0X7100013038);
	create_insn	(x=0X7100013040);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013044);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001306C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013074);
	op_stkvar	(x,	1);
	create_insn	(0X710001307C);
	create_insn	(x=0X7100013090);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013094);
	op_stkvar	(x,	1);
	make_array	(0X710001309C,	0X4);
	create_insn	(x=0X71000130A0);
	op_stkvar	(x,	1);
	set_name	(0X71000130A0,	"GetSM");
	create_insn	(x=0X71000130A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000130A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000130AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000130B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000130C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000130C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000130DC);
	create_insn	(x=0X71000130E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000130E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013108);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013110);
	op_hex		(x,	1);
	create_insn	(x=0X7100013138);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013140);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013168);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001316C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013194);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001319C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000131A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000131AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000131B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000131B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000131BC);
	create_insn	(x=0X71000131C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000131D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000131D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000131E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000131E8);
	op_plain_offset	(x,	1,	0X710009C0F4);
	op_plain_offset	(x,	129,	0X710009C0F4);
	create_insn	(x=0X71000131EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100013200);
	make_array	(0X7100013208,	0X8);
	create_insn	(x=0X7100013210);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013214);
	op_stkvar	(x,	1);
	create_insn	(0X7100013240);
	create_insn	(x=0X7100013290);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013294);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000132A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000132A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000132B0);
	create_insn	(x=0X71000132D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000132D4);
	op_stkvar	(x,	1);
	create_insn	(0X71000132DC);
	create_insn	(0X7100013308);
	create_insn	(0X7100013318);
	create_insn	(0X7100013340);
	create_insn	(0X710001334C);
	create_insn	(0X7100013378);
	create_insn	(x=0X7100013380);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013384);
	op_stkvar	(x,	1);
	create_insn	(0X71000133B0);
	create_insn	(x=0X7100013404);
	op_hex		(x,	1);
	create_insn	(x=0X710001340C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013410);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013424);
	op_stkvar	(x,	1);
	create_insn	(0X710001342C);
	create_insn	(x=0X710001344C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013450);
	op_stkvar	(x,	1);
	create_insn	(0X7100013458);
	create_insn	(0X7100013484);
	create_insn	(0X7100013494);
	create_insn	(0X71000134BC);
	create_insn	(0X71000134C8);
	create_insn	(0X71000134F4);
	make_array	(0X71000134FC,	0X4);
	create_insn	(x=0X7100013500);
	op_stkvar	(x,	1);
	set_name	(0X7100013500,	"_ZN2nn2sm17UnregisterServiceEPKcm");
	create_insn	(x=0X7100013504);
	op_stkvar	(x,	1);
	create_insn	(0X710001352C);
	create_insn	(x=0X710001357C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013580);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001358C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013590);
	op_stkvar	(x,	1);
	create_insn	(0X7100013598);
	create_insn	(x=0X71000135A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000135AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000135B4);
	create_insn	(0X71000135E0);
	create_insn	(0X71000135F0);
	create_insn	(0X7100013618);
	create_insn	(0X7100013624);
	create_insn	(0X7100013650);
	create_insn	(x=0X7100013658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001365C);
	op_stkvar	(x,	1);
	set_cmt	(0X710001367C,	"__int64",	0);
	create_insn	(x=0X7100013680);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013684);
	op_stkvar	(x,	1);
	create_insn	(0X710001368C);
	create_insn	(0X7100013694);
	set_name	(0X7100013694,	"UnmapMemory");
	create_insn	(x=0X710001369C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000136A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000136B4);
	create_insn	(x=0X71000136BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000136C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000136D4);
	create_insn	(0X71000136DC);
	create_insn	(0X71000136E4);
	create_insn	(x=0X71000136EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000136F4);
	op_stkvar	(x,	1);
	create_insn	(0X7100013704);
	set_name	(0X7100013704,	"_ZN2nn2os6detail23SignalInterProcessEventEPNS1_21InterProcessEventTypeE");
	create_insn	(0X710001370C);
	create_insn	(0X7100013714);
	set_name	(0X7100013714,	"MapSharedMemory");
	create_insn	(0X710001371C);
	set_name	(0X710001371C,	"UnmapSharedMemory");
	create_insn	(0X7100013724);
	set_name	(0X7100013724,	"CloseHandle");
	create_insn	(0X710001372C);
	create_insn	(x=0X7100013734);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001373C);
	op_stkvar	(x,	1);
	create_insn	(0X710001374C);
	create_insn	(0X7100013754);
	set_name	(0X7100013754,	"ArbitrateLock");
	create_insn	(0X710001375C);
	set_name	(0X710001375C,	"ArbitrateUnlock");
	create_insn	(0X7100013764);
	create_insn	(0X710001376C);
	create_insn	(x=0X7100013774);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001377C);
	op_stkvar	(x,	1);
	create_insn	(0X710001378C);
	create_insn	(0X7100013794);
	create_insn	(x=0X710001379C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000137A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000137B4);
	create_insn	(0X71000137BC);
	create_insn	(0X71000137C4);
	create_insn	(x=0X71000137CC);
	op_stkvar	(x,	1);
	set_name	(0X71000137CC,	"GetInfo");
	create_insn	(x=0X71000137D4);
	op_stkvar	(x,	1);
	create_insn	(0X71000137E4);
	create_insn	(x=0X71000137EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000137F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000137FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001380C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013814);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013824);
	op_stkvar	(x,	1);
	set_name	(0X7100013824,	"ReplyAndReceive");
	create_insn	(x=0X710001382C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001383C);
	op_stkvar	(x,	1);
	set_name	(0X710001383C,	"ReplyAndReceiveWithUserBuffer");
	create_insn	(x=0X7100013844);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013854);
	op_stkvar	(x,	1);
	set_name	(0X7100013854,	"CreateEvent");
	create_insn	(x=0X710001385C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013874);
	op_stkvar	(x,	1);
	set_name	(0X7100013874,	"CreateSharedMemory");
	create_insn	(x=0X710001387C);
	op_stkvar	(x,	1);
	create_insn	(0X710001388C);
	create_insn	(0X7100013894);
	make_array	(0X710001389C,	0X4);
	create_insn	(x=0X71000138A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000138A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000138B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000138B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000138C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000138CC);
	op_stkvar	(x,	1);
	make_array	(0X71000138D4,	0XC);
	create_insn	(0X71000138E0);
	create_insn	(0X71000138F0);
	create_insn	(x=0X71000138F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000138F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000138FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013904);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001390C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001391C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013934);
	op_plain_offset	(x,	1,	0X7100070B80);
	op_plain_offset	(x,	129,	0X7100070B80);
	create_insn	(x=0X710001393C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013940);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013948);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001394C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013954);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013964);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013968);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001396C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013980);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013990);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013994);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000139B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000139E8);
	op_plain_offset	(x,	1,	0X7100070B80);
	op_plain_offset	(x,	129,	0X7100070B80);
	create_insn	(x=0X71000139F0);
	op_plain_offset	(x,	1,	0X7100070B80);
	op_plain_offset	(x,	129,	0X7100070B80);
	create_insn	(x=0X71000139F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013A10);
	op_plain_offset	(x,	1,	0X7100070B78);
	op_plain_offset	(x,	129,	0X7100070B78);
	create_insn	(x=0X7100013A1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013A28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100013A38);
	create_insn	(x=0X7100013A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013A60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013A74);
	op_stkvar	(x,	1);
	create_insn	(0X7100013A80);
	create_insn	(x=0X7100013A84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013A88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013A94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013AA0);
	op_plain_offset	(x,	1,	0X7100070B78);
	op_plain_offset	(x,	129,	0X7100070B78);
	create_insn	(x=0X7100013AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013AB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100013AC0);
	create_insn	(x=0X7100013ADC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013AE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013B50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013BB0);
	op_stkvar	(x,	1);
	create_insn	(0X7100013BB8);
	create_insn	(x=0X7100013BDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100013C08);
	create_insn	(x=0X7100013C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013C40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013C9C);
	op_stkvar	(x,	1);
	create_dword	(0X7100013CA4);
	create_insn	(0X7100013CA8);
	create_insn	(0X7100013CAC);
	create_insn	(x=0X7100013CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013CEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013D50);
	op_stkvar	(x,	1);
	create_insn	(0X7100013D5C);
	create_insn	(0X7100013D64);
	create_insn	(x=0X7100013D68);
	op_hex		(x,	1);
	create_insn	(0X7100013D74);
	create_insn	(x=0X7100013D78);
	op_hex		(x,	1);
	create_insn	(0X7100013D88);
	create_insn	(x=0X7100013D8C);
	op_hex		(x,	1);
	create_insn	(0X7100013DA0);
	create_insn	(0X7100013DA8);
	create_insn	(0X7100013DB0);
	create_insn	(x=0X7100013DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013E08);
	op_hex		(x,	1);
	create_insn	(x=0X7100013E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013E60);
	op_hex		(x,	1);
	create_insn	(0X7100013E84);
	create_insn	(x=0X7100013E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013E9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100013EA8);
	create_insn	(x=0X7100013EAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013F04);
	op_hex		(x,	1);
	create_insn	(x=0X7100013F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013F5C);
	op_hex		(x,	1);
	create_insn	(0X7100013F80);
	create_insn	(x=0X7100013F8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013F98);
	op_stkvar	(x,	1);
	create_insn	(0X7100013FA4);
	create_insn	(x=0X7100013FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013FE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100013FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100013FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014010);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014014);
	op_stkvar	(x,	1);
	create_insn	(0X7100014088);
	create_insn	(x=0X71000140A8);
	op_hex		(x,	1);
	create_insn	(x=0X71000140E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000140F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000140FC);
	op_hex		(x,	1);
	create_insn	(0X7100014120);
	create_insn	(x=0X710001412C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014130);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014134);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001413C);
	op_stkvar	(x,	1);
	make_array	(0X7100014148,	0X8);
	create_insn	(0X7100014150);
	create_insn	(x=0X7100014154);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014158);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001415C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014160);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014164);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014168);
	op_stkvar	(x,	1);
	create_insn	(0X71000141CC);
	create_insn	(x=0X71000141D8);
	op_hex		(x,	1);
	create_insn	(x=0X71000141DC);
	op_hex		(x,	1);
	create_insn	(x=0X71000141F0);
	op_hex		(x,	1);
	create_insn	(x=0X71000141F4);
	op_hex		(x,	1);
	create_insn	(x=0X7100014204);
	op_hex		(x,	1);
	create_insn	(x=0X710001427C);
	op_hex		(x,	1);
	create_insn	(x=0X7100014284);
	op_hex		(x,	1);
	create_insn	(x=0X7100014290);
	op_hex		(x,	1);
	create_insn	(x=0X71000142A4);
	op_hex		(x,	1);
	create_insn	(x=0X71000142A8);
	op_hex		(x,	1);
	create_insn	(0X710001430C);
	create_insn	(x=0X7100014320);
	op_hex		(x,	1);
	create_insn	(x=0X7100014324);
	op_hex		(x,	1);
	create_insn	(x=0X7100014338);
	op_hex		(x,	1);
	create_insn	(x=0X710001433C);
	op_hex		(x,	1);
	create_insn	(x=0X710001434C);
	op_hex		(x,	1);
	create_insn	(0X7100014364);
	create_insn	(x=0X710001436C);
	op_hex		(x,	1);
	create_insn	(0X71000143D4);
	create_insn	(x=0X71000143E8);
	op_hex		(x,	1);
	create_insn	(x=0X71000143EC);
	op_hex		(x,	1);
	create_insn	(x=0X71000143F4);
	op_hex		(x,	1);
	create_insn	(x=0X710001440C);
	op_hex		(x,	1);
	create_insn	(x=0X7100014410);
	op_hex		(x,	1);
	create_insn	(0X710001447C);
	create_insn	(x=0X7100014490);
	op_hex		(x,	1);
	create_insn	(x=0X7100014494);
	op_hex		(x,	1);
	create_insn	(0X71000144D0);
	create_insn	(0X71000144F0);
	create_insn	(0X710001451C);
	create_insn	(x=0X7100014530);
	op_hex		(x,	1);
	create_insn	(0X710001453C);
	create_insn	(x=0X710001455C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000145AC);
	op_hex		(x,	1);
	create_insn	(x=0X71000145CC);
	op_hex		(x,	1);
	create_insn	(x=0X71000145D0);
	op_hex		(x,	1);
	create_insn	(0X7100014668);
	create_insn	(0X7100014680);
	create_insn	(x=0X71000146C4);
	op_hex		(x,	1);
	create_insn	(x=0X71000146C8);
	op_hex		(x,	1);
	create_insn	(0X7100014718);
	create_insn	(x=0X7100014728);
	op_hex		(x,	1);
	create_insn	(0X7100014730);
	create_insn	(x=0X710001473C);
	op_hex		(x,	1);
	create_insn	(x=0X7100014748);
	op_hex		(x,	1);
	create_insn	(x=0X7100014750);
	op_hex		(x,	1);
	create_insn	(x=0X71000147A8);
	op_hex		(x,	1);
	create_insn	(x=0X71000147E0);
	op_hex		(x,	1);
	create_insn	(x=0X71000147E4);
	op_hex		(x,	1);
	create_insn	(x=0X7100014804);
	op_hex		(x,	1);
	create_insn	(x=0X7100014808);
	op_hex		(x,	1);
	create_insn	(x=0X7100014810);
	op_hex		(x,	1);
	create_insn	(x=0X7100014850);
	op_hex		(x,	1);
	create_insn	(0X710001486C);
	create_insn	(x=0X7100014870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001487C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014880);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014888);
	op_stkvar	(x,	1);
	create_insn	(0X7100014894);
	create_insn	(0X710001489C);
	make_array	(0X71000148FC,	0X4);
	create_insn	(x=0X7100014900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014904);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014934);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001493C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014940);
	op_stkvar	(x,	1);
	make_array	(0X7100014948,	0X8);
	create_insn	(x=0X7100014950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014954);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014BF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014C04);
	op_stkvar	(x,	1);
	make_array	(0X7100014C0C,	0X4);
	create_insn	(x=0X7100014C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014C20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014C54);
	op_plain_offset	(x,	1,	0X7100070E88);
	op_plain_offset	(x,	129,	0X7100070E88);
	create_insn	(x=0X7100014C64);
	op_plain_offset	(x,	1,	0X7100070E88);
	op_plain_offset	(x,	129,	0X7100070E88);
	create_insn	(x=0X7100014C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014C88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014C90);
	op_plain_offset	(x,	1,	0X710009C370);
	op_plain_offset	(x,	129,	0X710009C370);
	create_insn	(x=0X7100014C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014C9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014CA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014CB0);
	op_plain_offset	(x,	1,	0X7100070E88);
	op_plain_offset	(x,	129,	0X7100070E88);
	create_insn	(0X7100014CC0);
	create_insn	(x=0X7100014CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014CFC);
	op_hex		(x,	1);
	create_insn	(x=0X7100014D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014D40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014D58);
	op_hex		(x,	1);
	create_insn	(0X7100014D7C);
	create_insn	(0X7100014D88);
	create_insn	(x=0X7100014D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014DA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100014DAC);
	create_insn	(x=0X7100014DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014DE8);
	op_hex		(x,	1);
	create_insn	(x=0X7100014E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014E48);
	op_hex		(x,	1);
	create_insn	(0X7100014E6C);
	create_insn	(x=0X7100014E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014EA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014ED4);
	op_plain_offset	(x,	1,	0X71000710F8);
	op_plain_offset	(x,	129,	0X71000710F8);
	create_insn	(x=0X7100014EE4);
	op_plain_offset	(x,	1,	0X71000710F8);
	op_plain_offset	(x,	129,	0X71000710F8);
	create_insn	(x=0X7100014F00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014F08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014F10);
	op_plain_offset	(x,	1,	0X710009C378);
	op_plain_offset	(x,	129,	0X710009C378);
	create_insn	(x=0X7100014F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014F1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014F30);
	op_plain_offset	(x,	1,	0X71000710F8);
	op_plain_offset	(x,	129,	0X71000710F8);
	create_insn	(0X7100014F40);
	create_insn	(0X7100014F48);
	create_insn	(x=0X7100014F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100014F5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100014F64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100015130,	"result",	0);
	create_insn	(x=0X710001513C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015140);
	op_stkvar	(x,	1);
	make_array	(0X7100015148,	0X8);
	create_insn	(0X7100015150);
	create_insn	(x=0X7100015154);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100015160);
	create_insn	(x=0X7100015164);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100015170);
	create_insn	(x=0X7100015174);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015178);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100015188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001518C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100015194);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001519C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000151A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000151B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000151CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000151D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000151DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000151E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000151E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000151F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000151F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001520C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015220);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001522C);
	op_stkvar	(x,	1);
	create_insn	(0X7100015238);
	create_insn	(0X7100015240);
	create_insn	(x=0X7100015244);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X710001524C,	0X4);
	create_insn	(0X7100015250);
	create_insn	(x=0X7100015254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015258);
	op_stkvar	(x,	1);
	set_cmt	(0X7100015264,	"this",	0);
	create_insn	(x=0X7100015264);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100015284);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001529C);
	op_stkvar	(x,	1);
	set_cmt	(0X71000152A4,	"this",	0);
	create_insn	(x=0X71000152C4);
	op_stkvar	(x,	1);
	create_dword	(0X71000152CC);
	create_insn	(0X71000152D0);
	create_insn	(x=0X71000152D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000152DC);
	set_name	(0X71000152DC,	"nullsub_24");
	create_insn	(0X71000152E0);
	set_name	(0X71000152E0,	"nullsub_25");
	create_insn	(0X71000152E4);
	create_insn	(0X71000152EC);
	create_insn	(0X71000152F4);
	create_insn	(x=0X71000152F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001530C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015314);
	op_stkvar	(x,	1);
	create_insn	(0X7100015320);
	create_insn	(0X7100015328);
	create_insn	(0X7100015330);
	create_insn	(x=0X7100015334);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015344);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015348);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015350);
	op_stkvar	(x,	1);
	create_insn	(0X710001535C);
	create_insn	(0X7100015364);
	create_insn	(x=0X7100015368);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015378);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001537C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015384);
	op_stkvar	(x,	1);
	create_insn	(0X7100015390);
	create_insn	(0X7100015398);
	set_name	(0X7100015398,	"nullsub_26");
	create_insn	(0X710001539C);
	set_name	(0X710001539C,	"nullsub_27");
	create_insn	(0X71000153A0);
	set_name	(0X71000153A0,	"nullsub_28");
	create_insn	(0X71000153A4);
	set_name	(0X71000153A4,	"nullsub_29");
	create_insn	(0X71000153A8);
	create_insn	(x=0X71000153AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000153BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000153C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000153C8);
	op_stkvar	(x,	1);
	create_insn	(0X71000153D4);
	create_insn	(x=0X71000153D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000153E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000153EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000153F4);
	op_stkvar	(x,	1);
	create_insn	(0X7100015400);
	create_insn	(0X7100015408);
	set_name	(0X7100015408,	"nullsub_30");
	create_insn	(0X710001540C);
	set_name	(0X710001540C,	"nullsub_31");
	create_insn	(x=0X7100015410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015414);
	op_stkvar	(x,	1);
	create_insn	(0X71000154D4);
	create_insn	(0X71000154E0);
	create_insn	(0X71000154EC);
	create_insn	(0X71000154F8);
	create_insn	(0X7100015504);
	create_insn	(0X7100015510);
	create_insn	(0X710001551C);
	create_insn	(0X7100015528);
	create_insn	(0X7100015534);
	create_insn	(0X7100015540);
	create_insn	(0X710001554C);
	create_insn	(0X7100015558);
	create_insn	(0X7100015564);
	create_insn	(0X7100015570);
	create_insn	(0X710001557C);
	create_insn	(0X7100015588);
	create_insn	(0X7100015594);
	create_insn	(0X71000155A0);
	create_insn	(0X71000155AC);
	create_insn	(0X71000155B8);
	create_insn	(x=0X71000155E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000155E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000155EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000155F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000155F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015634);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015638);
	op_stkvar	(x,	1);
	create_insn	(0X7100015640);
	create_insn	(0X710001564C);
	set_name	(0X710001564C,	"nullsub_32");
	create_insn	(x=0X7100015650);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001566C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015674);
	op_stkvar	(x,	1);
	create_insn	(0X7100015708);
	create_insn	(0X7100015710);
	set_name	(0X7100015710,	"nullsub_33");
	create_insn	(x=0X7100015714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015718);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015734);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001573C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015744);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001576C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015770);
	op_stkvar	(x,	1);
	create_insn	(0X7100015778);
	create_insn	(0X7100015780);
	set_name	(0X7100015780,	"nullsub_34");
	create_insn	(x=0X7100015784);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015788);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000157A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000157AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000157B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000157CC);
	create_insn	(x=0X71000157D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000157D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000157E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000157EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000157F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015820);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001582C);
	op_hex		(x,	1);
	create_insn	(x=0X7100015848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001584C);
	op_stkvar	(x,	1);
	create_insn	(0X7100015858);
	create_insn	(x=0X7100015860);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015864);
	op_stkvar	(x,	1);
	create_insn	(0X7100015870);
	create_insn	(x=0X7100015878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001587C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015888);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000158BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000158C0);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	create_insn	(0X71000158CC);
	set_cmt	(0X71000158D4,	"switch 9 cases",	0);
	create_insn	(0X71000158D4);
	create_insn	(x=0X71000158E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000158E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000158F4,	"switch jump",	0);
	set_cmt	(0X71000158F8,	"jumptable 00000071000158F4 case 0",	1);
	create_insn	(0X71000158F8);
	set_cmt	(0X71000158FC,	"jumptable 00000071000158F4 default case",	1);
	create_insn	(0X71000158FC);
	set_name	(0X71000158FC,	"def_71000158F4");
	set_cmt	(0X7100015908,	"jumptable 00000071000158F4 case 1",	1);
	create_insn	(0X7100015908);
	set_cmt	(0X710001590C,	"jumptable 00000071000158F4 case 2",	1);
	create_insn	(0X710001590C);
	set_cmt	(0X7100015910,	"jumptable 00000071000158F4 case 3",	1);
	create_insn	(0X7100015910);
	set_cmt	(0X7100015914,	"jumptable 00000071000158F4 case 4",	1);
	create_insn	(0X7100015914);
	set_cmt	(0X7100015918,	"jumptable 00000071000158F4 case 5",	1);
	create_insn	(0X7100015918);
	set_cmt	(0X710001591C,	"jumptable 00000071000158F4 case 6",	1);
	create_insn	(0X710001591C);
	set_cmt	(0X7100015920,	"jumptable 00000071000158F4 case 7",	1);
	create_insn	(0X7100015920);
	set_cmt	(0X7100015924,	"jumptable 00000071000158F4 case 8",	1);
	create_insn	(0X7100015924);
	create_insn	(0X7100015928);
	create_insn	(x=0X710001592C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015934);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015938);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001593C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001594C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015958);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015960);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015970);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015978);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001597C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015980);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015984);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001598C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000159C4);
	op_hex		(x,	1);
	create_insn	(x=0X7100015A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015A10);
	op_stkvar	(x,	1);
	create_insn	(0X7100015A1C);
	create_insn	(x=0X7100015A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015A40);
	op_hex		(x,	1);
	create_insn	(0X7100015A5C);
	create_insn	(x=0X7100015A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015A74);
	op_stkvar	(x,	1);
	create_insn	(0X7100015A80);
	create_insn	(0X7100015A90);
	create_insn	(x=0X7100015A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015B2C);
	op_hex		(x,	1);
	create_insn	(x=0X7100015B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015B78);
	op_stkvar	(x,	1);
	create_insn	(0X7100015B84);
	create_insn	(x=0X7100015B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015BA8);
	op_hex		(x,	1);
	create_insn	(0X7100015BC4);
	create_insn	(x=0X7100015BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015BDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100015BE8);
	create_insn	(0X7100015BF8);
	create_insn	(x=0X7100015BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015CA4);
	op_hex		(x,	1);
	create_insn	(x=0X7100015CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015CF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100015D04);
	create_insn	(x=0X7100015D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015D48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100015D4C);
	op_stkvar	(x,	1);
	create_insn	(0X7100015D6C);
	create_insn	(x=0X7100015D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DAC);
	op_stkvar	(x,	1);
	create_insn	(0X7100015DB8);
	create_insn	(0X7100015DCC);
	create_insn	(x=0X7100015DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015E68);
	op_hex		(x,	1);
	create_insn	(x=0X7100015EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015EB4);
	op_stkvar	(x,	1);
	create_insn	(0X7100015EC0);
	create_insn	(x=0X7100015ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015EE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015EE4);
	op_hex		(x,	1);
	create_insn	(0X7100015F00);
	create_insn	(x=0X7100015F0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F18);
	op_stkvar	(x,	1);
	create_insn	(0X7100015F24);
	create_insn	(0X7100015F34);
	create_insn	(x=0X7100015F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100015FD0);
	op_hex		(x,	1);
	create_insn	(x=0X7100016010);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001601C);
	op_stkvar	(x,	1);
	create_insn	(0X7100016028);
	create_insn	(x=0X710001603C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016048);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001604C);
	op_hex		(x,	1);
	create_insn	(0X7100016068);
	create_insn	(x=0X7100016074);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001607C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016080);
	op_stkvar	(x,	1);
	create_insn	(0X710001608C);
	create_insn	(0X710001609C);
	create_insn	(x=0X71000160A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000160FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016100);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001611C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016124);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016138);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016148);
	op_hex		(x,	1);
	create_insn	(x=0X7100016174);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016188);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016194);
	op_stkvar	(x,	1);
	create_insn	(0X71000161A8);
	create_insn	(x=0X71000161AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000161BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000161C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000161CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000161DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000161EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000161F0);
	op_stkvar	(x,	1);
	create_insn	(0X7100016210);
	create_insn	(x=0X710001622C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016244);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001624C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016250);
	op_stkvar	(x,	1);
	create_insn	(0X710001625C);
	create_insn	(0X7100016270);
	create_insn	(x=0X7100016274);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016278);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001627C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016280);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016284);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016290);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016294);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000162D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001630C);
	op_hex		(x,	1);
	create_insn	(x=0X710001634C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016358);
	op_stkvar	(x,	1);
	create_insn	(0X7100016364);
	create_insn	(x=0X7100016378);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016384);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016388);
	op_hex		(x,	1);
	create_insn	(0X71000163A4);
	create_insn	(x=0X71000163B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000163C8);
	create_insn	(0X71000163D8);
	create_insn	(x=0X71000163DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000163FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016408);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016424);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016428);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016430);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016434);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001643C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016444);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016468);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016480);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016488);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016498);
	op_hex		(x,	1);
	create_insn	(x=0X71000164C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000164D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000164E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000164F0);
	create_insn	(0X71000164FC);
	create_insn	(x=0X7100016500);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016510);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001651C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016520);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016530);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016540);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100016544);
	op_stkvar	(x,	1);
	create_insn	(0X710001655C);
	create_insn	(x=0X7100016578);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016590);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016594);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001659C);
	op_stkvar	(x,	1);
	create_insn	(0X71000165A8);
	create_insn	(x=0X71000165AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000165FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016604);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001660C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001663C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016654);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016660);
	op_hex		(x,	1);
	create_insn	(x=0X710001668C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000166A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000166AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000166B8);
	create_insn	(x=0X71000166BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000166CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000166D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000166DC);
	op_hex		(x,	1);
	create_insn	(0X71000166F4);
	create_insn	(x=0X7100016700);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016704);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016708);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001670C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016718);
	op_stkvar	(x,	1);
	create_insn	(0X7100016728);
	create_insn	(x=0X710001672C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016730);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001673C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016748);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016750);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001677C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016788);
	op_hex		(x,	1);
	create_insn	(x=0X71000167A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000167A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000167B4);
	create_insn	(x=0X71000167BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000167C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000167CC);
	create_insn	(x=0X71000167D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000167D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000167E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001681C);
	op_stkvar	(x,	1);
	create_insn	(0X7100016828);
	create_insn	(0X7100016830);
	create_insn	(x=0X7100016834);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001683C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016874);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001687C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016880);
	op_stkvar	(x,	1);
	create_insn	(0X710001688C);
	create_insn	(x=0X7100016894);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001689C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000168C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016908);
	op_hex		(x,	1);
	create_insn	(x=0X7100016948);
	op_stkvar	(x,	1);
	create_insn	(0X7100016958);
	create_insn	(x=0X7100016964);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016968);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001696C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016970);
	op_stkvar	(x,	1);
	create_insn	(0X710001697C);
	create_insn	(0X7100016984);
	create_insn	(x=0X7100016998);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000169A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000169B4);
	create_insn	(0X71000169BC);
	create_insn	(x=0X71000169C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000169C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000169C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000169CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000169D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000169E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000169E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000169FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016A64);
	op_hex		(x,	1);
	create_insn	(x=0X7100016AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016AB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100016AC4);
	create_insn	(x=0X7100016AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B0C);
	op_stkvar	(x,	1);
	create_insn	(0X7100016B18);
	create_insn	(x=0X7100016B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B40);
	op_stkvar	(x,	1);
	create_insn	(0X7100016B4C);
	create_insn	(x=0X7100016B54);
	op_stkvar	(x,	1);
	create_insn	(0X7100016B60);
	create_insn	(x=0X7100016B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016BC0);
	op_hex		(x,	1);
	create_insn	(x=0X7100016BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016BE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100016BEC);
	create_insn	(x=0X7100016BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016BF8);
	op_stkvar	(x,	1);
	create_insn	(0X7100016C04);
	create_insn	(x=0X7100016C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016C54);
	op_stkvar	(x,	1);
	create_insn	(0X7100016C60);
	create_insn	(0X7100016C68);
	create_insn	(x=0X7100016C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016C74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100016CC4);
	create_insn	(x=0X7100016CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016D40);
	op_hex		(x,	1);
	create_insn	(x=0X7100016D80);
	op_stkvar	(x,	1);
	create_insn	(0X7100016D90);
	create_insn	(x=0X7100016D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016DA8);
	op_stkvar	(x,	1);
	create_insn	(0X7100016DB4);
	create_insn	(0X7100016DBC);
	create_insn	(x=0X7100016DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016DE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100016DEC);
	create_insn	(0X7100016DF4);
	create_insn	(x=0X7100016DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016E9C);
	op_hex		(x,	1);
	create_insn	(x=0X7100016EDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016EF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100016EFC);
	create_insn	(x=0X7100016F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016F1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016F44);
	op_stkvar	(x,	1);
	create_insn	(0X7100016F50);
	create_insn	(x=0X7100016F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016F78);
	op_stkvar	(x,	1);
	create_insn	(0X7100016F84);
	create_insn	(x=0X7100016F8C);
	op_stkvar	(x,	1);
	create_insn	(0X7100016F98);
	create_insn	(x=0X7100016F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100016FF0);
	op_hex		(x,	1);
	create_insn	(0X7100017000);
	create_insn	(x=0X7100017008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001700C);
	op_stkvar	(x,	1);
	create_insn	(0X7100017018);
	create_insn	(x=0X7100017020);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017024);
	op_stkvar	(x,	1);
	create_insn	(0X7100017030);
	create_insn	(x=0X7100017044);
	op_hex		(x,	1);
	create_insn	(x=0X7100017060);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017094);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017098);
	op_stkvar	(x,	1);
	create_insn	(0X71000170A4);
	create_insn	(0X71000170AC);
	create_insn	(x=0X71000170B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000170F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017100);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017104);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017108);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001710C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017114);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017118);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001713C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017154);
	op_hex		(x,	1);
	create_insn	(x=0X7100017194);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000171A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000171A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000171B4);
	create_insn	(x=0X71000171C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000171D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000171E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000171FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100017208);
	create_insn	(x=0X7100017210);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017218);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017224);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001722C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017230);
	op_stkvar	(x,	1);
	create_insn	(0X710001723C);
	create_insn	(x=0X7100017244);
	op_stkvar	(x,	1);
	create_insn	(0X7100017250);
	create_insn	(x=0X7100017254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001725C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017260);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001727C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017284);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017294);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000172B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000172C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000172CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000172E0);
	op_hex		(x,	1);
	create_insn	(0X71000172F0);
	create_insn	(0X71000172FC);
	create_insn	(x=0X7100017304);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001730C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017314);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017318);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017320);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017324);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017328);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001732C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017330);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017334);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017338);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017378);
	op_hex		(x,	1);
	create_insn	(x=0X71000173A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000173B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000173C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000173D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000173D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000173E8);
	op_hex		(x,	1);
	create_insn	(0X71000173F8);
	create_insn	(x=0X7100017400);
	op_hex		(x,	1);
	create_insn	(x=0X710001741C);
	op_stkvar	(x,	1);
	create_insn	(0X7100017454);
	create_insn	(x=0X7100017460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001746C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017470);
	op_stkvar	(x,	1);
	create_insn	(0X710001747C);
	create_insn	(0X7100017484);
	create_insn	(x=0X7100017488);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017498);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174B4);
	op_hex		(x,	1);
	create_insn	(0X71000174C4);
	create_insn	(0X71000174C8);
	create_insn	(x=0X71000174CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000174F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017500);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017510);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017514);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017518);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017520);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017524);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001752C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017530);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017534);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017558);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017570);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017578);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001757C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017588);
	op_hex		(x,	1);
	create_insn	(x=0X71000175B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000175C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000175D4);
	op_stkvar	(x,	1);
	create_insn	(0X71000175E0);
	create_insn	(0X71000175EC);
	create_insn	(x=0X71000175F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017600);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001760C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017610);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017628);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017630);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017634);
	op_stkvar	(x,	1);
	create_insn	(0X710001764C);
	create_insn	(x=0X7100017654);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017668);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017680);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017684);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017688);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001768C);
	op_stkvar	(x,	1);
	create_insn	(0X7100017698);
	create_insn	(x=0X710001769C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000176FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017700);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017704);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017728);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017740);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001774C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017758);
	op_hex		(x,	1);
	create_insn	(x=0X7100017784);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017798);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000177A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000177B0);
	create_insn	(0X71000177BC);
	create_insn	(x=0X71000177C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000177D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000177DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000177E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000177F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000177F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000177F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017804);
	op_stkvar	(x,	1);
	create_insn	(0X710001781C);
	create_insn	(x=0X7100017824);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017838);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017854);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001785C);
	op_stkvar	(x,	1);
	create_insn	(0X7100017868);
	create_insn	(x=0X710001786C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017870);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001787C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017888);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017890);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000178BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000178C8);
	op_hex		(x,	1);
	create_insn	(x=0X71000178E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000178E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000178F4);
	create_insn	(x=0X71000178FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017900);
	op_stkvar	(x,	1);
	create_insn	(0X710001790C);
	create_insn	(x=0X7100017914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017918);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017924);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017958);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001795C);
	op_stkvar	(x,	1);
	create_insn	(0X7100017968);
	create_insn	(0X7100017970);
	create_insn	(x=0X7100017974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017978);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001797C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017980);
	op_stkvar	(x,	1);
	set_cmt	(0X7100017988,	"switch 4 cases",	0);
	create_insn	(x=0X7100017998);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001799C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000179B8,	"switch jump",	0);
	set_cmt	(0X71000179BC,	"jumptable 00000071000179B8 case 0",	1);
	create_insn	(0X71000179BC);
	create_insn	(x=0X71000179C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000179F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017A38);
	op_hex		(x,	1);
	create_insn	(x=0X7100017A78);
	op_stkvar	(x,	1);
	set_cmt	(0X7100017A88,	"jumptable 00000071000179B8 default case",	1);
	create_insn	(0X7100017A88);
	set_name	(0X7100017A88,	"def_71000179B8");
	set_cmt	(0X7100017A94,	"jumptable 00000071000179B8 case 1",	1);
	create_insn	(0X7100017A94);
	create_insn	(x=0X7100017A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017AD0);
	op_stkvar	(x,	1);
	set_cmt	(0X7100017B0C,	"jumptable 00000071000179B8 case 2",	1);
	create_insn	(0X7100017B0C);
	create_insn	(x=0X7100017B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B48);
	op_stkvar	(x,	1);
	set_cmt	(0X7100017B8C,	"jumptable 00000071000179B8 case 3",	1);
	create_insn	(0X7100017B8C);
	create_insn	(x=0X7100017B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017C08);
	op_hex		(x,	1);
	create_insn	(x=0X7100017C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017C5C);
	op_stkvar	(x,	1);
	create_insn	(0X7100017C68);
	create_insn	(0X7100017C74);
	create_insn	(x=0X7100017C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017CB4);
	op_stkvar	(x,	1);
	create_insn	(0X7100017CC0);
	create_insn	(x=0X7100017CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017CE4);
	op_stkvar	(x,	1);
	create_insn	(0X7100017CF0);
	create_dword	(0X7100017CFC);
	create_qword	(0X7100017D00);
	make_array	(0X7100017D00,	0X3E);
	create_insn	(x=0X7100017EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100017F00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F48);
	op_plain_offset	(x,	1,	0X710009C380);
	op_plain_offset	(x,	129,	0X710009C380);
	create_insn	(x=0X7100017F4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017F94);
	op_plain_offset	(x,	1,	0X710009D3D0);
	op_plain_offset	(x,	129,	0X710009D3D0);
	create_insn	(x=0X7100017F98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017FA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017FA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017FAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100017FB0,	"a2",	0);
	set_cmt	(0X7100017FB4,	"a1",	0);
	set_cmt	(0X7100017FB8,	"a3",	0);
	create_insn	(x=0X7100017FC8);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100017FE0);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100017FEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100017FF4);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100017FF8);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018000);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018004);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001800C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018104);
	op_hex		(x,	1);
	create_insn	(x=0X7100018108);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018110);
	op_hex		(x,	1);
	create_insn	(x=0X7100018114);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001811C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018120);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018124);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018128);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001812C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018130);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018134);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018138);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001813C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018140);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018144);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018148);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001814C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018150);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018154);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018158);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001815C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018160);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018164);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018168);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001816C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018170);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018174);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018178);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001817C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018180);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018184);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018188);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001818C);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X7100018194);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X710001819C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000181A0);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X71000181A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000181A8);
	op_plain_offset	(x,	1,	0X710009E420);
	op_plain_offset	(x,	129,	0X710009E420);
	create_insn	(x=0X71000181AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000181B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000181B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000181BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000181C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000181CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000181F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000181FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100018204);
	create_insn	(x=0X7100018208);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001821C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001823C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018240);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018248);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018250);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018254);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001825C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018260);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001827C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018280);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018288);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018290);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018294);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001829C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000182FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018300);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018308);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018314);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001831C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018320);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018324);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018328);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018370);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100018378);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100018388);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100018390);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000183A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000183AC);
	op_hex		(x,	1);
	create_insn	(0X71000183C4);
	create_insn	(x=0X71000183D0);
	op_hex		(x,	1);
	create_insn	(x=0X7100018404);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001840C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018414);
	op_stkvar	(x,	1);
	create_insn	(0X710001841C);
	create_insn	(x=0X7100018420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018424);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018444);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001844C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018454);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018458);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001846C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000184B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000184BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000184CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000184D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000184E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000184F0);
	op_hex		(x,	1);
	create_insn	(0X7100018508);
	create_insn	(x=0X7100018514);
	op_hex		(x,	1);
	create_insn	(x=0X7100018548);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018550);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018554);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018558);
	op_stkvar	(x,	1);
	create_insn	(0X7100018560);
	create_insn	(x=0X7100018564);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001856C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018570);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000185BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000185C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000185D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000185E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000185F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000185FC);
	op_hex		(x,	1);
	create_insn	(0X7100018614);
	create_insn	(x=0X7100018620);
	op_hex		(x,	1);
	create_insn	(x=0X7100018654);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001865C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018660);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018664);
	op_stkvar	(x,	1);
	create_insn	(0X710001866C);
	create_insn	(0X7100018670);
	create_insn	(x=0X7100018674);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018678);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018690);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001869C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000186A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000186AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000186B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000186B8);
	op_stkvar	(x,	1);
	create_dword	(0X71000186C4);
	create_insn	(0X71000186C8);
	create_insn	(x=0X71000186CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000186D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000186D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018718);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001871C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018728);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001872C);
	op_stkvar	(x,	1);
	create_insn	(0X7100018734);
	create_insn	(0X710001873C);
	create_insn	(x=0X7100018740);
	op_hex		(x,	1);
	create_insn	(0X7100018748);
	set_name	(0X7100018748,	"nullsub_76");
	create_dword	(0X710001874C);
	create_insn	(0X7100018750);
	create_insn	(x=0X7100018754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001875C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001879C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000187A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000187A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000187AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000187B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000187B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000187BC);
	create_insn	(0X71000187C4);
	create_insn	(x=0X71000187C8);
	op_hex		(x,	1);
	create_insn	(0X71000187D0);
	set_name	(0X71000187D0,	"nullsub_77");
	create_dword	(0X71000187D4);
	create_insn	(0X71000187D8);
	create_insn	(x=0X71000187DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000187E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000187E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018824);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001882C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018834);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001883C);
	op_stkvar	(x,	1);
	create_insn	(0X7100018844);
	create_insn	(0X710001884C);
	set_name	(0X710001884C,	"nullsub_78");
	create_insn	(x=0X7100018850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018854);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001888C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018890);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018894);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001889C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000188A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000188B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000188BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000188C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000188C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000188CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018904);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018908);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018910);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018914);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001892C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018930);
	op_stkvar	(x,	1);
	make_array	(0X7100018938,	0X8);
	create_insn	(x=0X7100018940);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018944);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001894C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018978);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001897C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018980);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018984);
	op_stkvar	(x,	1);
	create_insn	(0X710001898C);
	create_insn	(x=0X71000189B4);
	op_hex		(x,	1);
	create_insn	(x=0X71000189BC);
	op_hex		(x,	1);
	create_insn	(x=0X71000189E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000189E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000189E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000189EC);
	op_stkvar	(x,	1);
	make_array	(0X71000189F4,	0XC);
	create_insn	(x=0X7100018A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A44);
	op_hex		(x,	1);
	create_insn	(x=0X7100018A4C);
	op_hex		(x,	1);
	create_insn	(x=0X7100018A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A7C);
	op_stkvar	(x,	1);
	make_array	(0X7100018A84,	0XC);
	create_insn	(x=0X7100018A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018AD4);
	op_stkvar	(x,	1);
	create_insn	(0X7100018ADC);
	create_insn	(x=0X7100018B04);
	op_hex		(x,	1);
	create_insn	(x=0X7100018B0C);
	op_hex		(x,	1);
	create_insn	(x=0X7100018B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018B3C);
	op_stkvar	(x,	1);
	make_array	(0X7100018B44,	0XC);
	create_insn	(x=0X7100018B50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018B94);
	op_hex		(x,	1);
	create_insn	(x=0X7100018B9C);
	op_hex		(x,	1);
	create_insn	(x=0X7100018BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018BDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100018C0C);
	create_insn	(x=0X7100018C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C34);
	op_stkvar	(x,	1);
	create_insn	(0X7100018C60);
	create_insn	(x=0X7100018C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018C88);
	op_stkvar	(x,	1);
	create_insn	(0X7100018CB4);
	create_insn	(x=0X7100018CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018CDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100018D08);
	create_insn	(x=0X7100018D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018DF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100018DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018E00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100018E08);
	op_stkvar	(x,	1);
	create_insn	(0X7100018E10);
	create_insn	(x=0X7100018E14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100018E2C);
	op_plain_offset	(x,	1,	0X710009F280);
	op_plain_offset	(x,	129,	0X710009F280);
	create_insn	(x=0X7100018E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018E44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100018E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018EAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018F0C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100018F24,	"event",	0);
	set_cmt	(0X7100018F28,	"clearMode",	0);
	set_cmt	(0X7100018F30,	"type",	0);
	create_insn	(x=0X7100018F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018F78);
	op_stkvar	(x,	1);
	create_insn	(0X7100018F80);
	create_insn	(x=0X7100018F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018F8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018FB8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100018FC0,	"event",	0);
	create_insn	(0X7100018FC0);
	set_cmt	(0X7100018FC4,	"clearMode",	0);
	set_cmt	(0X7100018FCC,	"type",	0);
	create_insn	(x=0X7100018FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100018FF4);
	op_stkvar	(x,	1);
	create_insn	(0X7100018FFC);
	create_insn	(0X7100019004);
	create_insn	(0X7100019020);
	create_insn	(x=0X7100019024);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019028);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019074);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019078);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019080);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019084);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000190C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000190CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000190D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000190D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000190E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000190E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000190E8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100019100,	"event",	0);
	set_cmt	(0X7100019104,	"clearMode",	0);
	set_cmt	(0X710001910C,	"type",	0);
	create_insn	(x=0X7100019118);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019148);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019150);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019154);
	op_stkvar	(x,	1);
	create_insn	(0X710001915C);
	create_insn	(0X7100019164);
	create_insn	(x=0X710001916C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019170);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019174);
	op_stkvar	(x,	1);
	create_insn	(0X7100019194);
	create_insn	(0X71000191A8);
	create_insn	(x=0X71000191DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000191E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000191E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000191EC);
	create_insn	(x=0X71000191F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000191F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000191F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019200);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019204);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019208);
	op_stkvar	(x,	1);
	create_insn	(0X7100019240);
	create_insn	(0X710001929C);
	create_insn	(x=0X71000192EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000192F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000192F4);
	op_stkvar	(x,	1);
	create_insn	(0X71000192FC);
	create_insn	(0X7100019358);
	create_insn	(x=0X710001935C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019364);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001936C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019370);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019374);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000193C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000193E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000193E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000193EC);
	create_insn	(x=0X710001946C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019470);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019474);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001947C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019480);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019484);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000194F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000194F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000194FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100019504);
	create_insn	(x=0X7100019594);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001959C);
	op_stkvar	(x,	1);
	create_insn	(0X71000195A4);
	make_array	(0X71000195BC,	0X4);
	create_insn	(x=0X71000195C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000195C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000195D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000195DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000195E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000195E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000195F0);
	create_insn	(x=0X71000195F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019624);
	op_hex		(x,	1);
	create_insn	(x=0X7100019638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001963C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019644);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001964C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019650);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019658);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019660);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001968C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019690);
	op_stkvar	(x,	1);
	create_insn	(0X7100019698);
	create_insn	(x=0X710001969C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000196B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000196B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000196B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000196BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019718);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019720);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019734);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001973C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019750);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019758);
	op_hex		(x,	1);
	create_insn	(0X7100019770);
	create_insn	(x=0X7100019774);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019778);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001977C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019780);
	op_stkvar	(x,	1);
	create_insn	(0X7100019788);
	create_insn	(x=0X7100019794);
	op_hex		(x,	1);
	create_insn	(x=0X71000197CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000197D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000197D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000197D8);
	op_stkvar	(x,	1);
	create_insn	(0X71000197E0);
	create_insn	(x=0X71000197E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000197E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000197EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000197F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001984C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019854);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019870);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019884);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001988C);
	op_hex		(x,	1);
	create_insn	(0X71000198A4);
	create_insn	(x=0X71000198A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000198AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000198B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000198B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000198BC);
	create_insn	(x=0X71000198C8);
	op_hex		(x,	1);
	create_insn	(x=0X7100019900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019904);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001990C);
	op_stkvar	(x,	1);
	create_insn	(0X7100019914);
	create_insn	(x=0X7100019918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001991C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019938);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001993C);
	op_stkvar	(x,	1);
	create_dword	(0X7100019944);
	create_insn	(0X7100019948);
	create_insn	(x=0X710001994C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019954);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019994);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019998);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001999C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000199A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000199A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000199AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000199B4);
	create_insn	(0X71000199BC);
	create_insn	(0X71000199C4);
	create_insn	(0X71000199CC);
	create_insn	(0X71000199D4);
	set_name	(0X71000199D4,	"nullsub_79");
	create_qword	(0X71000199D8);
	create_insn	(x=0X71000199E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000199E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000199E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019A40);
	op_stkvar	(x,	1);
	create_insn	(0X7100019A48);
	create_insn	(x=0X7100019A4C);
	op_hex		(x,	1);
	create_insn	(x=0X7100019A50);
	op_hex		(x,	1);
	create_insn	(0X7100019A58);
	set_name	(0X7100019A58,	"nullsub_80");
	create_insn	(x=0X7100019A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019AB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019AE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019B54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019B60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019BD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019BE4);
	op_stkvar	(x,	1);
	make_array	(0X7100019BEC,	0X4);
	create_insn	(x=0X7100019BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019C00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019C0C);
	op_stkvar	(x,	1);
	create_insn	(0X7100019C14);
	create_insn	(x=0X7100019C1C);
	op_plain_offset	(x,	1,	0X710009F340);
	op_plain_offset	(x,	129,	0X710009F340);
	make_array	(0X7100019C28,	0X8);
	create_insn	(x=0X7100019C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019C48);
	op_plain_offset	(x,	1,	0X710009F340);
	op_plain_offset	(x,	129,	0X710009F340);
	create_insn	(x=0X7100019C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019C9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100019CA4);
	create_insn	(x=0X7100019CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019D68);
	op_stkvar	(x,	1);
	create_insn	(0X7100019D70);
	create_insn	(x=0X7100019D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019D84);
	op_stkvar	(x,	1);
	make_array	(0X7100019D8C,	0X4);
	create_insn	(x=0X7100019D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019DD8);
	op_stkvar	(x,	1);
	create_insn	(0X7100019DE0);
	create_insn	(x=0X7100019DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019DF4);
	op_stkvar	(x,	1);
	make_array	(0X7100019DFC,	0X4);
	create_insn	(x=0X7100019E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019E48);
	op_stkvar	(x,	1);
	create_insn	(0X7100019E50);
	create_insn	(x=0X7100019E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019E64);
	op_stkvar	(x,	1);
	make_array	(0X7100019E6C,	0X4);
	create_insn	(x=0X7100019E70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019EB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100019EC0);
	create_insn	(x=0X7100019ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019ED4);
	op_stkvar	(x,	1);
	make_array	(0X7100019EDC,	0X4);
	create_insn	(0X7100019EE0);
	create_insn	(0X7100019F0C);
	make_array	(0X7100019F14,	0XC);
	create_insn	(x=0X7100019F20);
	op_stkvar	(x,	1);
	create_insn	(0X7100019F60);
	create_insn	(x=0X7100019F68);
	op_stkvar	(x,	1);
	create_insn	(0X7100019F70);
	make_array	(0X7100019F78,	0X8);
	create_insn	(x=0X7100019F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019F90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019FA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019FA8);
	op_stkvar	(x,	1);
	create_insn	(0X7100019FB0);
	create_insn	(x=0X7100019FB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019FCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100019FE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100019FEC);
	op_stkvar	(x,	1);
	make_array	(0X7100019FF4,	0XC);
	create_insn	(x=0X710001A000);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A00C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A01C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A020);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A030);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A04C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A060);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A064);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A06C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A074);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A0C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A0C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A108);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A110);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A118);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A11C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A124);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A128);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A12C);
	op_stkvar	(x,	1);
	set_cmt	(0X710001A144,	"event",	0);
	set_cmt	(0X710001A148,	"clearMode",	0);
	set_cmt	(0X710001A150,	"type",	0);
	create_insn	(x=0X710001A15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A18C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A198);
	op_stkvar	(x,	1);
	create_insn	(0X710001A1A0);
	create_insn	(x=0X710001A1A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A1AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A1CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A1D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A1D8);
	op_stkvar	(x,	1);
	set_cmt	(0X710001A1E0,	"event",	0);
	create_insn	(0X710001A1E0);
	set_cmt	(0X710001A1E4,	"clearMode",	0);
	set_cmt	(0X710001A1EC,	"type",	0);
	create_insn	(x=0X710001A1F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A208);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A20C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A214);
	op_stkvar	(x,	1);
	create_insn	(0X710001A21C);
	create_insn	(0X710001A224);
	create_insn	(0X710001A240);
	create_insn	(x=0X710001A244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A290);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A2A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A2AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A2B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A2BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A2E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A2EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A300);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A310);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A31C);
	op_stkvar	(x,	1);
	make_array	(0X710001A324,	0XC);
	create_insn	(x=0X710001A330);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A340);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A34C);
	op_stkvar	(x,	1);
	create_insn	(0X710001A354);
	create_insn	(x=0X710001A35C);
	op_plain_offset	(x,	1,	0X710009F390);
	op_plain_offset	(x,	129,	0X710009F390);
	make_array	(0X710001A368,	0X8);
	create_insn	(x=0X710001A370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A374);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A388);
	op_plain_offset	(x,	1,	0X710009F390);
	op_plain_offset	(x,	129,	0X710009F390);
	create_insn	(x=0X710001A3D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A3DC);
	op_stkvar	(x,	1);
	create_insn	(0X710001A3E4);
	create_insn	(x=0X710001A404);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A410);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A414);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A454);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A460);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A464);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A4C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A4C4);
	op_stkvar	(x,	1);
	create_insn	(0X710001A4CC);
	create_insn	(x=0X710001A4DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A4E0);
	op_stkvar	(x,	1);
	make_array	(0X710001A4E8,	0X8);
	create_insn	(x=0X710001A4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A4F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A4FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A540);
	op_hex		(x,	1);
	create_insn	(x=0X710001A56C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A570);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A574);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A578);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A580);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A584);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A5A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A5B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A5B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A5BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A5C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A610);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A614);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A660);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A664);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A668);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A670);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A674);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A680);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A68C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A690);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A698);
	op_stkvar	(x,	1);
	create_insn	(0X710001A6A0);
	create_insn	(x=0X710001A6A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A6C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A6DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A700);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A704);
	op_stkvar	(x,	1);
	create_insn	(0X710001A70C);
	create_insn	(0X710001A714);
	make_array	(0X710001A71C,	0X4);
	create_insn	(0X710001A720);
	create_insn	(x=0X710001A724);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A728);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A734);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A740);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A760);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A76C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A774);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A79C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A7BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A7D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A7DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A7E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A7E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A804);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A834);
	op_stkvar	(x,	1);
	create_insn	(0X710001A840);
	create_insn	(0X710001A848);
	create_insn	(x=0X710001A84C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A860);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A870);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A87C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001A888);
	create_insn	(x=0X710001A88C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A8A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A8A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A8B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A8BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X710001A8C8,	0X8);
	create_insn	(x=0X710001A8D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A8D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A8D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A8EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A904);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001A908);
	op_stkvar	(x,	1);
	create_insn	(0X710001A910);
	create_insn	(x=0X710001A914);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A924);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A928);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A93C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	set_cmt	(0X710001A940,	"a2",	0);
	set_cmt	(0X710001A944,	"a1",	0);
	set_cmt	(0X710001A948,	"a3",	0);
	create_insn	(x=0X710001A960);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001A96C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A974);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001A978);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001A980);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001A988);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A98C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001A998);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001A9FC);
	op_hex		(x,	1);
	create_insn	(x=0X710001AA00);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA0C);
	op_hex		(x,	1);
	create_insn	(x=0X710001AA10);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA18);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA1C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA24);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA28);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA2C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA30);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA34);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA38);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA3C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA40);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA44);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA48);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA4C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA50);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA54);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA58);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA5C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA64);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AA70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AA78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AA80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AA84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AA88);
	op_stkvar	(x,	1);
	create_insn	(0X710001AA90);
	make_array	(0X710001AAA4,	0XC);
	create_qword	(0X710001AAB0);
	make_array	(0X710001AAB0,	0X6A);
	create_insn	(x=0X710001AE00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AE04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AE08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AE14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AE20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AE28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AE2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AE30);
	op_stkvar	(x,	1);
	create_insn	(0X710001AE38);
	create_insn	(x=0X710001AE3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AE4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AE50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AE64);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	set_cmt	(0X710001AE68,	"a2",	0);
	set_cmt	(0X710001AE6C,	"a1",	0);
	set_cmt	(0X710001AE70,	"a3",	0);
	create_insn	(x=0X710001AE88);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AE94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AE9C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AEA0);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AEA8);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AEB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AEB4);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AEC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AF24);
	op_hex		(x,	1);
	create_insn	(x=0X710001AF28);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF34);
	op_hex		(x,	1);
	create_insn	(x=0X710001AF38);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF40);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF44);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF4C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF50);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF54);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF58);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF5C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF60);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF64);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF68);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF6C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF70);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF74);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF78);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF7C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF80);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF84);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF8C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001AF98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AFA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AFA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001AFAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AFB0);
	op_stkvar	(x,	1);
	create_insn	(0X710001AFB8);
	set_name	(0X710001AFB8,	"nullsub_35");
	create_insn	(0X710001AFBC);
	set_name	(0X710001AFBC,	"nullsub_36");
	create_insn	(0X710001AFC0);
	create_insn	(0X710001AFC8);
	create_insn	(0X710001AFD0);
	set_name	(0X710001AFD0,	"nullsub_37");
	create_insn	(0X710001AFD4);
	set_name	(0X710001AFD4,	"nullsub_38");
	create_insn	(0X710001AFD8);
	set_name	(0X710001AFD8,	"nullsub_39");
	create_insn	(0X710001AFDC);
	set_name	(0X710001AFDC,	"nullsub_40");
	create_insn	(0X710001AFE0);
	create_insn	(0X710001AFE8);
	set_name	(0X710001AFE8,	"nullsub_41");
	create_insn	(0X710001AFEC);
	set_name	(0X710001AFEC,	"nullsub_42");
	create_insn	(x=0X710001AFF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AFF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001AFF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B004);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001B008);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001B01C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	set_cmt	(0X710001B020,	"a2",	0);
	set_cmt	(0X710001B024,	"a1",	0);
	set_cmt	(0X710001B028,	"a3",	0);
	create_insn	(x=0X710001B040);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B04C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001B054);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B058);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B060);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B064);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B068);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B0CC);
	op_hex		(x,	1);
	create_insn	(x=0X710001B0D0);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B0DC);
	op_hex		(x,	1);
	create_insn	(x=0X710001B0E0);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B0E4);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B0E8);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B0EC);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B0F0);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B0F8);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B0FC);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B104);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B108);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B10C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B110);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B114);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B118);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B11C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B120);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B124);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B128);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B12C);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B134);
	op_plain_offset	(x,	1,	0X710009F3D8);
	op_plain_offset	(x,	129,	0X710009F3D8);
	create_insn	(x=0X710001B138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B13C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B150);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710001B230,	"result",	0);
	create_insn	(x=0X710001B23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B2B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B2B8);
	op_stkvar	(x,	1);
	create_insn	(0X710001B2C0);
	create_insn	(0X710001B2CC);
	create_insn	(0X710001B2D8);
	create_insn	(0X710001B2E4);
	create_insn	(0X710001B2F0);
	create_insn	(0X710001B2FC);
	create_insn	(0X710001B308);
	create_insn	(0X710001B314);
	create_insn	(x=0X710001B33C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B340);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B348);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B34C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B350);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B37C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B390);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B394);
	op_stkvar	(x,	1);
	create_insn	(0X710001B39C);
	create_insn	(0X710001B3C4);
	set_name	(0X710001B3C4,	"nullsub_43");
	create_insn	(x=0X710001B3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B3E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B3EC);
	op_stkvar	(x,	1);
	create_insn	(0X710001B480);
	create_insn	(0X710001B488);
	set_name	(0X710001B488,	"nullsub_44");
	create_insn	(x=0X710001B48C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B490);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B4AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B4B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B4BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B4CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B4D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B4E8);
	op_stkvar	(x,	1);
	create_insn	(0X710001B4F0);
	create_insn	(0X710001B4FC);
	set_name	(0X710001B4FC,	"nullsub_45");
	create_insn	(x=0X710001B500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B504);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B520);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B530);
	op_stkvar	(x,	1);
	create_insn	(0X710001B54C);
	create_insn	(x=0X710001B550);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B554);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B560);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B56C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B574);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B5B8);
	op_hex		(x,	1);
	create_insn	(0X710001B5C8);
	create_insn	(x=0X710001B5D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B5D4);
	op_stkvar	(x,	1);
	create_insn	(0X710001B5E0);
	create_insn	(x=0X710001B5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B5EC);
	op_stkvar	(x,	1);
	create_insn	(0X710001B5F8);
	create_insn	(x=0X710001B608);
	op_hex		(x,	1);
	create_insn	(0X710001B618);
	create_insn	(x=0X710001B620);
	op_hex		(x,	1);
	create_insn	(x=0X710001B63C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B670);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B674);
	op_stkvar	(x,	1);
	create_insn	(0X710001B680);
	create_insn	(0X710001B688);
	create_insn	(x=0X710001B68C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B690);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B694);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B698);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B71C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B734);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B740);
	op_hex		(x,	1);
	create_insn	(x=0X710001B76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B780);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B78C);
	op_stkvar	(x,	1);
	create_insn	(0X710001B798);
	create_insn	(x=0X710001B79C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B7AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B7BC);
	op_hex		(x,	1);
	create_insn	(0X710001B7D4);
	create_insn	(x=0X710001B7E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B7E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B7F8);
	op_stkvar	(x,	1);
	create_insn	(0X710001B808);
	create_insn	(x=0X710001B80C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B810);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B814);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B840);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B850);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B85C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B864);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B86C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B870);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B874);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B8C8);
	op_hex		(x,	1);
	create_insn	(x=0X710001B908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B914);
	op_stkvar	(x,	1);
	create_insn	(0X710001B920);
	create_insn	(0X710001B92C);
	create_insn	(x=0X710001B940);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B94C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B960);
	op_stkvar	(x,	1);
	create_insn	(0X710001B978);
	create_insn	(x=0X710001B980);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B994);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B998);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B99C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B9A0);
	op_stkvar	(x,	1);
	create_insn	(0X710001B9AC);
	create_insn	(x=0X710001B9B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B9D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001B9F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BA04);
	op_hex		(x,	1);
	create_insn	(0X710001BA14);
	create_insn	(x=0X710001BA1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BA20);
	op_stkvar	(x,	1);
	create_insn	(0X710001BA2C);
	create_insn	(x=0X710001BA34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BA38);
	op_stkvar	(x,	1);
	create_insn	(0X710001BA44);
	create_insn	(x=0X710001BA58);
	op_hex		(x,	1);
	create_insn	(x=0X710001BA74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BAA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BAAC);
	op_stkvar	(x,	1);
	create_insn	(0X710001BAB8);
	create_insn	(0X710001BAC0);
	create_insn	(x=0X710001BAC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BAF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BB80);
	op_hex		(x,	1);
	create_insn	(x=0X710001BBC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BBCC);
	op_stkvar	(x,	1);
	create_insn	(0X710001BBD8);
	create_insn	(0X710001BBE4);
	create_insn	(x=0X710001BBF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC18);
	op_stkvar	(x,	1);
	create_insn	(0X710001BC30);
	create_insn	(x=0X710001BC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC58);
	op_stkvar	(x,	1);
	make_array	(0X710001BC64,	0XC);
	create_insn	(x=0X710001BC70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BC7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BC80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BC88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BC9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCD8);
	op_plain_offset	(x,	1,	0X71000A0BD0);
	op_plain_offset	(x,	129,	0X71000A0BD0);
	create_insn	(x=0X710001BCE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BCF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001BD08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD0C);
	op_stkvar	(x,	1);
	create_insn	(0X710001BD14);
	create_insn	(x=0X710001BD18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001BD28);
	create_insn	(0X710001BD2C);
	create_insn	(x=0X710001BD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD70);
	op_stkvar	(x,	1);
	create_insn	(0X710001BD7C);
	create_insn	(x=0X710001BD80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BD9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BDA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BDAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BDB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BDF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BDF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BDFC);
	op_stkvar	(x,	1);
	create_insn	(0X710001BE04);
	create_insn	(x=0X710001BE0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BE10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BE14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BE3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BE40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BE44);
	op_stkvar	(x,	1);
	create_insn	(0X710001BE4C);
	create_insn	(x=0X710001BE50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001BE60);
	create_insn	(x=0X710001BE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BE68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BE6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BEB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BEB8);
	op_stkvar	(x,	1);
	create_insn	(0X710001BEC0);
	create_insn	(x=0X710001BEC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BEF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BEFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BF00);
	op_stkvar	(x,	1);
	create_insn	(0X710001BF08);
	create_insn	(0X710001BF10);
	set_name	(0X710001BF10,	"nullsub_81");
	create_insn	(x=0X710001BF14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BF18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BF1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001BF20);
	op_stkvar	(x,	1);
	set_cmt	(0X710001BF48,	"clearMode",	0);
	set_cmt	(0X710001BF4C,	"type",	0);
	set_cmt	(0X710001BF54,	"event",	0);
	set_cmt	(0X710001BF94,	"clearMode",	0);
	set_cmt	(0X710001BF9C,	"event",	0);
	set_cmt	(0X710001BFA0,	"type",	0);
	set_cmt	(0X710001BFE4,	"event",	0);
	set_cmt	(0X710001BFE8,	"clearMode",	0);
	set_cmt	(0X710001BFEC,	"type",	0);
	set_cmt	(0X710001C030,	"event",	0);
	set_cmt	(0X710001C034,	"clearMode",	0);
	set_cmt	(0X710001C038,	"type",	0);
	set_cmt	(0X710001C07C,	"event",	0);
	set_cmt	(0X710001C080,	"clearMode",	0);
	set_cmt	(0X710001C084,	"type",	0);
	set_cmt	(0X710001C0C8,	"event",	0);
	set_cmt	(0X710001C0CC,	"clearMode",	0);
	set_cmt	(0X710001C0D0,	"type",	0);
	set_cmt	(0X710001C114,	"event",	0);
	set_cmt	(0X710001C118,	"clearMode",	0);
	set_cmt	(0X710001C11C,	"type",	0);
	set_cmt	(0X710001C160,	"event",	0);
	set_cmt	(0X710001C164,	"clearMode",	0);
	set_cmt	(0X710001C168,	"type",	0);
	set_cmt	(0X710001C1AC,	"event",	0);
	set_cmt	(0X710001C1B0,	"clearMode",	0);
	set_cmt	(0X710001C1B4,	"type",	0);
	set_cmt	(0X710001C1F8,	"event",	0);
	set_cmt	(0X710001C1FC,	"clearMode",	0);
	set_cmt	(0X710001C200,	"type",	0);
	set_cmt	(0X710001C244,	"event",	0);
	set_cmt	(0X710001C248,	"clearMode",	0);
	set_cmt	(0X710001C24C,	"type",	0);
	set_cmt	(0X710001C290,	"event",	0);
	set_cmt	(0X710001C294,	"clearMode",	0);
	set_cmt	(0X710001C298,	"type",	0);
	set_cmt	(0X710001C2DC,	"event",	0);
	set_cmt	(0X710001C2E0,	"clearMode",	0);
	set_cmt	(0X710001C2E4,	"type",	0);
	set_cmt	(0X710001C31C,	"event",	0);
	set_cmt	(0X710001C320,	"clearMode",	0);
	set_cmt	(0X710001C328,	"type",	0);
	set_cmt	(0X710001C33C,	"event",	0);
	set_cmt	(0X710001C340,	"clearMode",	0);
	set_cmt	(0X710001C348,	"type",	0);
	set_cmt	(0X710001C35C,	"event",	0);
	set_cmt	(0X710001C364,	"clearMode",	0);
	set_cmt	(0X710001C368,	"type",	0);
	set_cmt	(0X710001C37C,	"event",	0);
	set_cmt	(0X710001C384,	"clearMode",	0);
	set_cmt	(0X710001C388,	"type",	0);
	set_cmt	(0X710001C39C,	"event",	0);
	set_cmt	(0X710001C3A4,	"clearMode",	0);
	set_cmt	(0X710001C3A8,	"type",	0);
	create_insn	(x=0X710001C3C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C3C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C3CC);
	op_stkvar	(x,	1);
	make_array	(0X710001C3D4,	0XC);
	create_insn	(0X710001C3E0);
	create_insn	(0X710001C404);
	create_insn	(x=0X710001C44C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C450);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C454);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C45C);
	op_stkvar	(x,	1);
	create_insn	(0X710001C494);
	create_insn	(0X710001C4A8);
	create_insn	(0X710001C4BC);
	create_insn	(0X710001C4D0);
	create_insn	(0X710001C4E4);
	create_insn	(0X710001C4F8);
	create_insn	(0X710001C50C);
	create_insn	(0X710001C520);
	create_insn	(0X710001C534);
	create_insn	(0X710001C548);
	create_insn	(0X710001C55C);
	create_insn	(0X710001C570);
	create_insn	(0X710001C5E4);
	create_insn	(0X710001C5FC);
	create_insn	(0X710001C63C);
	create_insn	(0X710001C660);
	create_insn	(0X710001C684);
	create_insn	(0X710001C69C);
	create_insn	(0X710001C6E8);
	create_insn	(0X710001C70C);
	create_insn	(0X710001C730);
	create_insn	(0X710001C77C);
	create_insn	(0X710001C7A0);
	create_insn	(0X710001C7C4);
	create_insn	(0X710001C80C);
	create_insn	(0X710001C830);
	create_insn	(0X710001C854);
	create_insn	(x=0X710001C880);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C884);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C888);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C88C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C890);
	op_stkvar	(x,	1);
	create_insn	(0X710001C898);
	create_insn	(x=0X710001C8A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C8A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C8A8);
	op_stkvar	(x,	1);
	create_insn	(0X710001C8DC);
	create_insn	(0X710001C8F0);
	create_insn	(0X710001C904);
	create_insn	(0X710001C918);
	create_insn	(0X710001C92C);
	create_insn	(0X710001C940);
	create_insn	(0X710001C954);
	create_insn	(0X710001C968);
	create_insn	(0X710001C97C);
	create_insn	(0X710001C990);
	create_insn	(0X710001C9A4);
	create_insn	(0X710001C9B8);
	create_insn	(x=0X710001C9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001C9EC);
	op_stkvar	(x,	1);
	create_insn	(0X710001C9F4);
	create_insn	(x=0X710001C9FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CA04);
	op_stkvar	(x,	1);
	create_insn	(0X710001CA38);
	create_insn	(0X710001CA4C);
	create_insn	(0X710001CA60);
	create_insn	(0X710001CA74);
	create_insn	(x=0X710001CA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CAA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CAA4);
	op_stkvar	(x,	1);
	make_array	(0X710001CAAC,	0X4);
	create_insn	(0X710001CAB0);
	create_insn	(x=0X710001CAB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CAB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CAF4);
	op_stkvar	(x,	1);
	create_insn	(0X710001CB48);
	create_insn	(0X710001CB8C);
	create_insn	(0X710001CBA0);
	create_insn	(0X710001CBB0);
	create_insn	(0X710001CBC0);
	create_insn	(0X710001CBD0);
	create_insn	(0X710001CBE0);
	create_insn	(0X710001CBF0);
	create_insn	(0X710001CC00);
	create_insn	(0X710001CC10);
	create_insn	(0X710001CC20);
	create_insn	(0X710001CC30);
	create_insn	(0X710001CC38);
	create_insn	(x=0X710001CC48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CC54);
	op_stkvar	(x,	1);
	create_insn	(0X710001CC60);
	create_insn	(0X710001CCD0);
	create_insn	(0X710001CCE4);
	create_insn	(0X710001CCF8);
	create_insn	(0X710001CD0C);
	create_insn	(0X710001CD20);
	create_insn	(x=0X710001CD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CD34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CD40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CD50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CD58);
	op_stkvar	(x,	1);
	create_insn	(0X710001CD60);
	create_insn	(x=0X710001CD64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CD80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CD88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CD8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CDA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CDA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CDAC);
	op_stkvar	(x,	1);
	make_array	(0X710001CDB4,	0XC);
	create_insn	(0X710001CDC0);
	create_insn	(x=0X710001CDCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001CDE4);
	make_array	(0X710001CDEC,	0X4);
	create_insn	(0X710001CDF0);
	create_insn	(x=0X710001CDFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001CE28);
	create_insn	(0X710001CE30);
	make_array	(0X710001CE5C,	0X4);
	create_insn	(x=0X710001CE60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CE6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CEA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001CEC0);
	create_insn	(0X710001CEE4);
	set_cmt	(0X710001CF20,	"result",	0);
	create_insn	(x=0X710001CF2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CF30);
	op_stkvar	(x,	1);
	make_array	(0X710001CF38,	0X8);
	create_insn	(0X710001CF40);
	create_insn	(x=0X710001CF44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CF48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CF54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CF58);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710001CF64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CF6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CF84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CF90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CF98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CFA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CFB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CFBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001CFD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001CFEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D00C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D020);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D034);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D03C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D044);
	op_stkvar	(x,	1);
	create_dword	(0X710001D04C);
	create_insn	(x=0X710001D050);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D05C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D060);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D064);
	op_stkvar	(x,	1);
	create_insn	(0X710001D324);
	create_insn	(0X710001D32C);
	create_insn	(0X710001D338);
	create_insn	(0X710001D344);
	create_insn	(0X710001D350);
	create_insn	(0X710001D35C);
	create_insn	(0X710001D368);
	create_insn	(0X710001D374);
	create_insn	(0X710001D380);
	create_insn	(0X710001D38C);
	create_insn	(0X710001D398);
	create_insn	(0X710001D3A4);
	create_insn	(0X710001D3B0);
	create_insn	(0X710001D3BC);
	create_insn	(0X710001D3C8);
	create_insn	(0X710001D3D4);
	create_insn	(0X710001D3E0);
	create_insn	(0X710001D3EC);
	create_insn	(0X710001D3F8);
	create_insn	(0X710001D404);
	create_insn	(0X710001D410);
	create_insn	(0X710001D41C);
	create_insn	(0X710001D428);
	create_insn	(0X710001D434);
	create_insn	(0X710001D440);
	create_insn	(0X710001D44C);
	create_insn	(0X710001D458);
	create_insn	(0X710001D464);
	create_insn	(0X710001D470);
	create_insn	(0X710001D47C);
	create_insn	(0X710001D488);
	create_insn	(0X710001D494);
	create_insn	(0X710001D4A0);
	create_insn	(0X710001D4AC);
	create_insn	(0X710001D4B8);
	create_insn	(0X710001D4C4);
	create_insn	(0X710001D4D0);
	create_insn	(0X710001D4DC);
	create_insn	(0X710001D4E8);
	create_insn	(0X710001D4F4);
	create_insn	(0X710001D500);
	create_insn	(0X710001D50C);
	create_insn	(0X710001D518);
	create_insn	(0X710001D524);
	create_insn	(0X710001D530);
	create_insn	(0X710001D53C);
	create_insn	(0X710001D548);
	create_insn	(0X710001D554);
	create_insn	(0X710001D560);
	create_insn	(0X710001D56C);
	create_insn	(0X710001D578);
	create_insn	(0X710001D584);
	create_insn	(0X710001D590);
	create_insn	(0X710001D59C);
	create_insn	(0X710001D5A8);
	create_insn	(0X710001D5B4);
	create_insn	(x=0X710001D5D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D5DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D5E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D5F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D630);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D638);
	op_stkvar	(x,	1);
	create_insn	(0X710001D640);
	create_insn	(0X710001D64C);
	set_name	(0X710001D64C,	"nullsub_46");
	create_insn	(x=0X710001D650);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D66C);
	op_stkvar	(x,	1);
	create_insn	(0X710001D674);
	create_insn	(x=0X710001D678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D680);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D684);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D6E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D6FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D704);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D71C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D724);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001D72C);
	create_insn	(x=0X710001D76C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D788);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D79C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D7A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001D7AC);
	create_insn	(x=0X710001D7E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001D814);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D820);
	op_stkvar	(x,	1);
	create_insn	(0X710001D84C);
	create_insn	(x=0X710001D854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D85C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D860);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D86C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D870);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D8B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D8B4);
	op_stkvar	(x,	1);
	create_insn	(0X710001D8BC);
	create_insn	(0X710001D8C8);
	create_insn	(0X710001D8D4);
	create_insn	(x=0X710001D8FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D900);
	op_stkvar	(x,	1);
	create_insn	(0X710001D908);
	create_insn	(0X710001D910);
	set_name	(0X710001D910,	"nullsub_47");
	create_insn	(x=0X710001D914);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001D91C);
	op_stkvar	(x,	1);
	create_insn	(0X710001DB04);
	create_insn	(0X710001DB0C);
	create_insn	(0X710001DB14);
	create_insn	(0X710001DB1C);
	create_insn	(0X710001DB24);
	create_insn	(0X710001DB2C);
	create_insn	(0X710001DB34);
	create_insn	(0X710001DB3C);
	create_insn	(0X710001DB44);
	create_insn	(0X710001DB4C);
	create_insn	(0X710001DB54);
	create_insn	(0X710001DB5C);
	create_insn	(0X710001DB64);
	create_insn	(0X710001DB6C);
	create_insn	(0X710001DB74);
	create_insn	(0X710001DB7C);
	create_insn	(0X710001DB84);
	create_insn	(0X710001DB8C);
	create_insn	(0X710001DB94);
	create_insn	(0X710001DB9C);
	create_insn	(0X710001DBA4);
	create_insn	(0X710001DBAC);
	create_insn	(0X710001DBB4);
	create_insn	(0X710001DBBC);
	create_insn	(0X710001DBC4);
	create_insn	(0X710001DBCC);
	create_insn	(0X710001DBD4);
	create_insn	(0X710001DBDC);
	create_insn	(0X710001DBE4);
	create_insn	(0X710001DBEC);
	create_insn	(0X710001DBF4);
	create_insn	(0X710001DBFC);
	create_insn	(0X710001DC04);
	create_insn	(0X710001DC0C);
	create_insn	(0X710001DC14);
	create_insn	(0X710001DC1C);
	create_insn	(0X710001DC24);
	create_insn	(0X710001DC2C);
	create_insn	(0X710001DC34);
	create_insn	(0X710001DC3C);
	create_insn	(0X710001DC44);
	create_insn	(0X710001DC4C);
	create_insn	(0X710001DC54);
	create_insn	(0X710001DC5C);
	create_insn	(0X710001DC64);
	create_insn	(0X710001DC6C);
	create_insn	(0X710001DC74);
	create_insn	(0X710001DC7C);
	create_insn	(0X710001DC84);
	create_insn	(0X710001DC8C);
	create_insn	(0X710001DC94);
	create_insn	(0X710001DC9C);
	create_insn	(0X710001DCA4);
	create_insn	(0X710001DCAC);
	create_insn	(0X710001DCB4);
	create_insn	(0X710001DCBC);
	create_insn	(x=0X710001DCE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DCE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DCF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DCF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DCFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DD28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DD3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DD48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DD50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DD54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DD5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001DD94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710001DDB0);
	create_insn	(0X710001DDD4);
	set_cmt	(0X710001DE10,	"result",	0);
	create_insn	(x=0X710001DE24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DE28);
	op_stkvar	(x,	1);
	create_insn	(0X710001DE30);
	create_insn	(0X710001DE3C);
	set_name	(0X710001DE3C,	"nullsub_48");
	create_insn	(0X710001DE40);
	create_insn	(x=0X710001DE48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DE4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DE50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DE90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DE9C);
	op_stkvar	(x,	1);
	create_insn	(0X710001DEA4);
	create_insn	(0X710001DEB0);
	create_insn	(x=0X710001DEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DEBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DEEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DEFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DF04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DF08);
	op_stkvar	(x,	1);
	create_insn	(0X710001DF10);
	create_insn	(0X710001DF18);
	create_insn	(x=0X710001DF1C);
	op_hex		(x,	1);
	create_insn	(0X710001DF24);
	create_insn	(0X710001DF2C);
	create_insn	(0X710001DF34);
	create_insn	(0X710001DF3C);
	create_insn	(0X710001DF44);
	create_insn	(0X710001DF4C);
	create_insn	(0X710001DF54);
	create_insn	(x=0X710001DF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DF98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFBC);
	op_stkvar	(x,	1);
	create_insn	(0X710001DFC4);
	create_insn	(x=0X710001DFC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001DFEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E018);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E024);
	op_hex		(x,	1);
	create_insn	(x=0X710001E040);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E044);
	op_stkvar	(x,	1);
	create_insn	(0X710001E050);
	create_insn	(x=0X710001E058);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E05C);
	op_stkvar	(x,	1);
	create_insn	(0X710001E068);
	create_insn	(x=0X710001E070);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E074);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E080);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E0B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E0B8);
	op_stkvar	(x,	1);
	create_insn	(0X710001E0C4);
	create_insn	(0X710001E0CC);
	create_insn	(x=0X710001E0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E0D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E0DC);
	op_stkvar	(x,	1);
	set_cmt	(0X710001E0EC,	"switch 12 cases",	0);
	create_insn	(x=0X710001E0FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001E100);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710001E11C,	"switch jump",	0);
	set_cmt	(0X710001E120,	"jumptable 000000710001E11C case 0",	1);
	create_insn	(0X710001E120);
	create_insn	(x=0X710001E128);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E134);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E13C);
	op_stkvar	(x,	1);
	set_cmt	(0X710001E148,	"jumptable 000000710001E11C case 1",	1);
	create_insn	(0X710001E148);
	create_insn	(x=0X710001E150);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E160);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E164);
	op_stkvar	(x,	1);
	set_cmt	(0X710001E170,	"jumptable 000000710001E11C case 2",	1);
	create_insn	(0X710001E170);
	create_insn	(x=0X710001E174);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E180);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E184);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E188);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E190);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E19C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E1A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E1A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E1D8);
	op_hex		(x,	1);
	create_insn	(x=0X710001E220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E22C);
	op_stkvar	(x,	1);
	set_cmt	(0X710001E238,	"jumptable 000000710001E11C case 3",	1);
	create_insn	(0X710001E238);
	create_insn	(x=0X710001E240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E250);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E254);
	op_stkvar	(x,	1);
	set_cmt	(0X710001E260,	"jumptable 000000710001E11C case 4",	1);
	create_insn	(0X710001E260);
	create_insn	(x=0X710001E264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E270);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E274);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E278);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E280);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E284);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E288);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E28C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E290);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E294);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E2C8);
	op_hex		(x,	1);
	create_insn	(x=0X710001E308);
	op_stkvar	(x,	1);
	set_cmt	(0X710001E318,	"jumptable 000000710001E11C case 6",	1);
	create_insn	(0X710001E318);
	create_insn	(x=0X710001E320);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E32C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E330);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E334);
	op_stkvar	(x,	1);
	set_cmt	(0X710001E340,	"jumptable 000000710001E11C case 10",	1);
	create_insn	(0X710001E340);
	create_insn	(x=0X710001E348);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E354);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E358);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E35C);
	op_stkvar	(x,	1);
	set_cmt	(0X710001E368,	"jumptable 000000710001E11C case 11",	1);
	create_insn	(0X710001E368);
	create_insn	(x=0X710001E370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E37C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E380);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E384);
	op_stkvar	(x,	1);
	create_insn	(0X710001E390);
	create_insn	(x=0X710001E3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E3B0);
	op_stkvar	(x,	1);
	create_insn	(0X710001E3C4);
	create_insn	(x=0X710001E3D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E3E8);
	op_stkvar	(x,	1);
	create_insn	(0X710001E3F4);
	set_cmt	(0X710001E3FC,	"jumptable 000000710001E11C default case, cases 5,7-9",	1);
	set_name	(0X710001E3FC,	"def_710001E11C");
	create_insn	(x=0X710001E400);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E404);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E40C);
	op_stkvar	(x,	1);
	create_insn	(0X710001E418);
	create_insn	(x=0X710001E41C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E420);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E424);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E428);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E434);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E440);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E444);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E45C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E460);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E464);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E46C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E470);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E474);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E478);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E480);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E484);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E4A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E4A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E4C0);
	op_hex		(x,	1);
	create_insn	(x=0X710001E500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E50C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E514);
	op_stkvar	(x,	1);
	create_insn	(0X710001E520);
	create_insn	(x=0X710001E534);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E540);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E554);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E568);
	op_stkvar	(x,	1);
	create_insn	(0X710001E574);
	create_insn	(x=0X710001E57C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E584);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E590);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E594);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E59C);
	op_stkvar	(x,	1);
	create_insn	(0X710001E5A8);
	create_insn	(x=0X710001E5B0);
	op_stkvar	(x,	1);
	create_insn	(0X710001E5BC);
	create_insn	(x=0X710001E5C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E5C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E5C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E5DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E5E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E5F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E60C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E610);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E614);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E620);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E664);
	op_hex		(x,	1);
	create_insn	(x=0X710001E6A4);
	op_stkvar	(x,	1);
	create_insn	(0X710001E6B4);
	create_insn	(x=0X710001E6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E6C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E6CC);
	op_stkvar	(x,	1);
	create_insn	(0X710001E6D8);
	create_insn	(x=0X710001E6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E6FC);
	op_stkvar	(x,	1);
	create_insn	(0X710001E708);
	create_insn	(0X710001E710);
	create_insn	(x=0X710001E714);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E718);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E71C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E720);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E730);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E734);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E740);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E75C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E760);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E764);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E770);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E774);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E794);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E7AC);
	op_hex		(x,	1);
	create_insn	(x=0X710001E7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E7F8);
	op_stkvar	(x,	1);
	create_insn	(0X710001E804);
	create_insn	(x=0X710001E818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E828);
	op_hex		(x,	1);
	create_insn	(0X710001E844);
	create_insn	(x=0X710001E850);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E85C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E868);
	op_stkvar	(x,	1);
	create_insn	(0X710001E878);
	create_insn	(x=0X710001E87C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E880);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E884);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E888);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E894);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E90C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E91C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E938);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E93C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E944);
	op_hex		(x,	1);
	create_insn	(x=0X710001E948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E94C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E950);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E958);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E95C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E960);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E970);
	op_hex		(x,	1);
	create_insn	(x=0X710001E99C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E9B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E9BC);
	op_stkvar	(x,	1);
	create_insn	(0X710001E9C8);
	create_insn	(x=0X710001E9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001E9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA28);
	op_stkvar	(x,	1);
	create_insn	(0X710001EA38);
	create_insn	(x=0X710001EA44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA50);
	op_stkvar	(x,	1);
	create_insn	(0X710001EA5C);
	create_insn	(0X710001EA64);
	create_insn	(x=0X710001EA68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EB0C);
	op_hex		(x,	1);
	create_insn	(x=0X710001EB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EB60);
	op_stkvar	(x,	1);
	create_insn	(0X710001EB6C);
	create_insn	(x=0X710001EB80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EBA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EBB4);
	op_stkvar	(x,	1);
	create_insn	(0X710001EBC0);
	create_insn	(x=0X710001EBC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EBD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EBDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EBE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EBE8);
	op_stkvar	(x,	1);
	create_insn	(0X710001EBF4);
	create_insn	(x=0X710001EBFC);
	op_stkvar	(x,	1);
	create_insn	(0X710001EC08);
	create_insn	(x=0X710001EC0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EC9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ECB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ECC0);
	op_hex		(x,	1);
	create_insn	(x=0X710001ECEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED0C);
	op_stkvar	(x,	1);
	create_insn	(0X710001ED18);
	create_insn	(x=0X710001ED1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED38);
	op_stkvar	(x,	1);
	create_insn	(0X710001ED50);
	create_insn	(x=0X710001ED5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED74);
	op_stkvar	(x,	1);
	create_insn	(0X710001ED84);
	create_insn	(x=0X710001ED8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001ED90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EDB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EDC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EDCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EDD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EDD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EDDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EDE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EE24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001EE3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001EE44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001EE60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001EE68);
	op_hex		(x,	1);
	create_insn	(0X710001EE80);
	create_insn	(x=0X710001EE8C);
	op_hex		(x,	1);
	create_insn	(0X710001EEB0);
	create_insn	(x=0X710001EEF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EEFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EF00);
	op_stkvar	(x,	1);
	create_insn	(0X710001EF08);
	create_insn	(x=0X710001EF10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EF14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EF48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EF50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EF54);
	op_stkvar	(x,	1);
	create_insn	(0X710001EF5C);
	create_insn	(x=0X710001EF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EF68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EF98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EFA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EFB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EFB4);
	op_stkvar	(x,	1);
	create_insn	(0X710001EFBC);
	create_insn	(0X710001EFC4);
	create_insn	(0X710001EFCC);
	create_insn	(0X710001EFD4);
	create_insn	(0X710001EFDC);
	create_insn	(0X710001EFE4);
	create_insn	(x=0X710001EFEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EFF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001EFF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F030);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F03C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F044);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F048);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F04C);
	op_stkvar	(x,	1);
	create_insn	(0X710001F054);
	set_name	(0X710001F054,	"nullsub_82");
	create_insn	(0X710001F058);
	create_insn	(x=0X710001F05C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F060);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F06C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F080);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F0A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F0B0);
	op_hex		(x,	1);
	create_insn	(0X710001F0C0);
	create_insn	(x=0X710001F0C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F0CC);
	op_stkvar	(x,	1);
	create_insn	(0X710001F0D8);
	create_insn	(x=0X710001F0E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F0E4);
	op_stkvar	(x,	1);
	create_insn	(0X710001F0F0);
	create_insn	(x=0X710001F104);
	op_hex		(x,	1);
	create_insn	(x=0X710001F120);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F154);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F158);
	op_stkvar	(x,	1);
	create_insn	(0X710001F164);
	create_insn	(0X710001F16C);
	create_insn	(x=0X710001F170);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F174);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F188);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F1FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F208);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F218);
	op_hex		(x,	1);
	create_insn	(x=0X710001F244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F26C);
	op_stkvar	(x,	1);
	create_insn	(0X710001F278);
	create_insn	(x=0X710001F27C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F28C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F29C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F2AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F2B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F2B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F2BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001F2C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F2D4);
	op_stkvar	(x,	1);
	create_insn	(0X710001F2E0);
	create_insn	(x=0X710001F2E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F314);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F31C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F320);
	op_stkvar	(x,	1);
	create_insn	(0X710001F32C);
	create_insn	(x=0X710001F334);
	op_stkvar	(x,	1);
	create_insn	(0X710001F340);
	create_insn	(x=0X710001F344);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F348);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F354);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F360);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F368);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F394);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F3A0);
	op_hex		(x,	1);
	create_insn	(x=0X710001F3BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F3C0);
	op_stkvar	(x,	1);
	create_insn	(0X710001F3CC);
	create_insn	(x=0X710001F3D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F3D8);
	op_stkvar	(x,	1);
	create_insn	(0X710001F3E4);
	create_insn	(x=0X710001F3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F3F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F3FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F430);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F434);
	op_stkvar	(x,	1);
	create_insn	(0X710001F440);
	create_insn	(0X710001F448);
	create_insn	(x=0X710001F44C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F450);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F454);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F458);
	op_stkvar	(x,	1);
	set_cmt	(0X710001F460,	"switch 5 cases",	0);
	create_insn	(x=0X710001F470);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001F474);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710001F490,	"switch jump",	0);
	set_cmt	(0X710001F494,	"jumptable 000000710001F490 case 0",	1);
	create_insn	(0X710001F494);
	create_insn	(x=0X710001F4A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F4A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F4AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F4B0);
	op_stkvar	(x,	1);
	set_cmt	(0X710001F4BC,	"jumptable 000000710001F490 default case",	1);
	create_insn	(0X710001F4BC);
	set_name	(0X710001F4BC,	"def_710001F490");
	set_cmt	(0X710001F4C8,	"jumptable 000000710001F490 case 1",	1);
	create_insn	(0X710001F4C8);
	create_insn	(x=0X710001F4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F4DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F4E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F4E4);
	op_stkvar	(x,	1);
	set_cmt	(0X710001F4F0,	"jumptable 000000710001F490 case 2",	1);
	create_insn	(0X710001F4F0);
	create_insn	(x=0X710001F4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F4F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F504);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F510);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F514);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F518);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F520);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F524);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F558);
	op_hex		(x,	1);
	create_insn	(x=0X710001F598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5A4);
	op_stkvar	(x,	1);
	set_cmt	(0X710001F5B4,	"jumptable 000000710001F490 case 3",	1);
	create_insn	(0X710001F5B4);
	create_insn	(x=0X710001F5B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F61C);
	op_hex		(x,	1);
	create_insn	(x=0X710001F664);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F670);
	op_stkvar	(x,	1);
	set_cmt	(0X710001F67C,	"jumptable 000000710001F490 case 4",	1);
	create_insn	(0X710001F67C);
	create_insn	(x=0X710001F684);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F688);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F68C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F694);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F698);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F6A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F6A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F6A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F6B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F6B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F6F8);
	op_hex		(x,	1);
	create_insn	(x=0X710001F738);
	op_stkvar	(x,	1);
	create_insn	(0X710001F748);
	create_insn	(0X710001F750);
	create_insn	(0X710001F758);
	create_insn	(x=0X710001F76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F77C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F78C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F790);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F794);
	op_stkvar	(x,	1);
	create_insn	(0X710001F7A0);
	create_insn	(0X710001F7A8);
	create_insn	(x=0X710001F7AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F7FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F800);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F808);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F80C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F810);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F814);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F81C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F820);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F860);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F864);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F88C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F89C);
	op_hex		(x,	1);
	create_insn	(x=0X710001F8DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F8E8);
	op_stkvar	(x,	1);
	create_insn	(0X710001F8F4);
	create_insn	(0X710001F900);
	create_insn	(x=0X710001F914);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F920);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F924);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F934);
	op_stkvar	(x,	1);
	create_insn	(0X710001F960);
	create_insn	(x=0X710001F968);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F970);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F97C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F980);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F984);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F988);
	op_stkvar	(x,	1);
	create_insn	(0X710001F994);
	create_insn	(x=0X710001F998);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F99C);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	create_insn	(x=0X710001F9A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001F9F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FA28);
	op_hex		(x,	1);
	create_insn	(x=0X710001FA38);
	op_hex		(x,	1);
	create_insn	(x=0X710001FA78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FA84);
	op_stkvar	(x,	1);
	create_insn	(0X710001FA90);
	create_insn	(x=0X710001FAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FAB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FAB4);
	op_hex		(x,	1);
	create_insn	(0X710001FAD0);
	create_insn	(x=0X710001FADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FAE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FAF4);
	op_stkvar	(x,	1);
	create_insn	(0X710001FB04);
	create_insn	(x=0X710001FB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FB5C);
	op_stkvar	(x,	1);
	create_insn	(0X710001FB64);
	create_insn	(0X710001FB6C);
	create_insn	(0X710001FB74);
	create_insn	(0X710001FB7C);
	create_insn	(0X710001FB84);
	create_insn	(0X710001FB8C);
	create_insn	(x=0X710001FB90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FB94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FBA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FBAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FBB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FBEC);
	op_hex		(x,	1);
	create_insn	(x=0X710001FC08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FC0C);
	op_stkvar	(x,	1);
	create_insn	(0X710001FC18);
	create_insn	(x=0X710001FC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FC24);
	op_stkvar	(x,	1);
	create_insn	(0X710001FC30);
	create_insn	(x=0X710001FC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FC3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FC48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FC7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FC80);
	op_stkvar	(x,	1);
	create_insn	(0X710001FC8C);
	create_insn	(0X710001FC94);
	create_insn	(x=0X710001FC98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FC9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FCA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FCA4);
	op_stkvar	(x,	1);
	set_cmt	(0X710001FCAC,	"switch 5 cases",	0);
	create_insn	(x=0X710001FCBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710001FCC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710001FCDC,	"switch jump",	0);
	set_cmt	(0X710001FCE0,	"jumptable 000000710001FCDC case 0",	1);
	create_insn	(0X710001FCE0);
	create_insn	(x=0X710001FCE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FCF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FCF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FCFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FD04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FD08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FD0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FD10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FD14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FD18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FD1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FD5C);
	op_hex		(x,	1);
	create_insn	(x=0X710001FD9C);
	op_stkvar	(x,	1);
	set_cmt	(0X710001FDAC,	"jumptable 000000710001FCDC default case",	1);
	create_insn	(0X710001FDAC);
	set_name	(0X710001FDAC,	"def_710001FCDC");
	set_cmt	(0X710001FDB8,	"jumptable 000000710001FCDC case 1",	1);
	create_insn	(0X710001FDB8);
	create_insn	(x=0X710001FDBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FDF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FE20);
	op_hex		(x,	1);
	create_insn	(x=0X710001FE60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FE6C);
	op_stkvar	(x,	1);
	set_cmt	(0X710001FE7C,	"jumptable 000000710001FCDC case 2",	1);
	create_insn	(0X710001FE7C);
	create_insn	(x=0X710001FE80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FE84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FE8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FE90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FE94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FE9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FEA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FEA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FEA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FEAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FEB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FEE4);
	op_hex		(x,	1);
	create_insn	(x=0X710001FF2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FF38);
	op_stkvar	(x,	1);
	set_cmt	(0X710001FF44,	"jumptable 000000710001FCDC case 3",	1);
	create_insn	(0X710001FF44);
	create_insn	(x=0X710001FF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FF58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FF60);
	op_stkvar	(x,	1);
	set_cmt	(0X710001FF6C,	"jumptable 000000710001FCDC case 4",	1);
	create_insn	(0X710001FF6C);
	create_insn	(x=0X710001FF7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FF80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FF84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FF88);
	op_stkvar	(x,	1);
	create_insn	(0X710001FF94);
	create_insn	(0X710001FF9C);
	create_insn	(0X710001FFA4);
	create_insn	(x=0X710001FFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FFC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FFD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FFD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FFDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FFE0);
	op_stkvar	(x,	1);
	create_insn	(0X710001FFEC);
	create_insn	(0X710001FFF4);
	create_insn	(x=0X710001FFF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710001FFFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020000);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020004);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020014);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020018);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020024);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002002C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002003C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020040);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020044);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020048);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002004C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020050);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020054);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020058);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020078);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020090);
	op_hex		(x,	1);
	create_insn	(x=0X71000200D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000200DC);
	op_stkvar	(x,	1);
	create_insn	(0X71000200E8);
	create_insn	(x=0X71000200FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020108);
	op_stkvar	(x,	1);
	create_insn	(0X7100020124);
	create_insn	(x=0X7100020130);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020134);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002013C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020148);
	op_stkvar	(x,	1);
	create_insn	(0X7100020158);
	create_insn	(x=0X710002015C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020160);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020164);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020168);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002017C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020188);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020190);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000201F4);
	op_hex		(x,	1);
	create_insn	(x=0X7100020234);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020240);
	op_stkvar	(x,	1);
	create_insn	(0X710002024C);
	create_insn	(x=0X7100020260);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002026C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020270);
	op_hex		(x,	1);
	create_insn	(0X710002028C);
	create_insn	(x=0X7100020298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002029C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000202A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000202A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000202B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000202C0);
	make_array	(0X71000202C4,	0XC);
	create_insn	(x=0X71000202D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000202D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000202D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000202E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000202E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000202FC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	set_cmt	(0X7100020300,	"a2",	0);
	set_cmt	(0X7100020304,	"a3",	0);
	set_cmt	(0X7100020308,	"a1",	0);
	create_insn	(x=0X7100020320);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002032C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020330);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020334);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020338);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020340);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020344);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002034C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020350);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020488);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002048C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000204A0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000204A4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000204B8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000204BC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000204D0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000204D4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000204E8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000204EC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020500);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020504);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020518);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002051C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020530);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020534);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020548);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002054C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020560);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020564);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020578);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002057C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020590);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020594);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000205A8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000205AC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000205C0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000205C4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000205D8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000205DC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000205F0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000205F4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020608);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002060C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020620);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020624);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020638);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002063C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020650);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020654);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020668);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002066C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020680);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020684);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020698);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002069C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000206B0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000206B4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000206C8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000206CC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000206E0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000206E4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000206F8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000206FC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020710);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020714);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020728);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002072C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020740);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020744);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020758);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002075C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020778);
	op_hex		(x,	1);
	create_insn	(x=0X710002077C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020780);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020784);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020788);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002078C);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X7100020790);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X710002079C);
	op_hex		(x,	1);
	create_insn	(x=0X71000207A0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207A4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207A8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207AC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207B0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207B4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000207CC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207D8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207DC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207E0);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207E4);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207E8);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207EC);
	op_plain_offset	(x,	1,	0X71000A2000);
	op_plain_offset	(x,	129,	0X71000A2000);
	create_insn	(x=0X71000207F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000207FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020804);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002080C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020810);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002081C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020820);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020834);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002084C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002085C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002088C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020890);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020894);
	op_stkvar	(x,	1);
	create_insn	(0X710002089C);
	create_insn	(x=0X71000208A4);
	op_hex		(x,	1);
	create_insn	(x=0X71000208AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000208B4);
	create_insn	(x=0X71000208BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000208C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000208D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000208E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000208F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000208F4);
	op_stkvar	(x,	1);
	create_insn	(0X71000208FC);
	create_insn	(x=0X7100020900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020904);
	op_stkvar	(x,	1);
	create_insn	(0X710002090C);
	create_insn	(x=0X7100020918);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100020920);
	create_insn	(0X7100020928);
	create_insn	(x=0X7100020934);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710002093C);
	create_insn	(0X7100020944);
	create_insn	(x=0X7100020948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002094C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020954);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002097C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000209A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000209BC);
	create_insn	(x=0X71000209C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000209FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020A6C);
	op_hex		(x,	1);
	create_insn	(x=0X7100020A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020A7C);
	op_stkvar	(x,	1);
	create_insn	(0X7100020A84);
	create_insn	(x=0X7100020A8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020AB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020AC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020AEC);
	op_stkvar	(x,	1);
	make_array	(0X7100020AF4,	0XC);
	create_insn	(x=0X7100020B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020B1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020B24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020B34);
	op_stkvar	(x,	1);
	make_array	(0X7100020B3C,	0X4);
	create_insn	(x=0X7100020B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020B68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020B6C);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(x=0X7100020B7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020B8C);
	op_stkvar	(x,	1);
	create_insn	(0X7100020B94);
	create_insn	(0X7100020C10);
	create_insn	(x=0X7100020C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020C2C);
	op_hex		(x,	1);
	create_insn	(x=0X7100020C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020C3C);
	op_hex		(x,	1);
	create_insn	(x=0X7100020C68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020CB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100020CC4);
	create_qword	(0X7100020CC8);
	create_insn	(x=0X7100020CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020CE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020D18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020D1C);
	op_hex		(x,	1);
	create_insn	(x=0X7100020D20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100020D28);
	set_cmt	(0X7100020D38,	"retstr",	0);
	set_cmt	(0X7100020D40,	"a1",	0);
	create_insn	(x=0X7100020DAC);
	op_hex		(x,	1);
	create_insn	(0X7100020DD4);
	create_insn	(0X7100020DEC);
	create_insn	(0X7100020DF4);
	create_insn	(0X7100020DFC);
	create_insn	(x=0X7100020E04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E34);
	op_stkvar	(x,	1);
	create_insn	(0X7100020E3C);
	create_insn	(0X7100020E40);
	create_insn	(x=0X7100020E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020E84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020E8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020E90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100020E9C);
	create_insn	(x=0X7100020EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020EE0);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(0X7100020EE8);
	create_insn	(x=0X7100020F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020F1C);
	op_hex		(x,	1);
	create_insn	(x=0X7100020F48);
	op_stkvar	(x,	1);
	create_insn	(0X7100020F8C);
	create_insn	(x=0X7100020F90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020F94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020FB0);
	op_hex		(x,	1);
	create_insn	(x=0X7100020FB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100020FCC);
	create_insn	(x=0X7100020FD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020FD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100020FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100020FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021000);
	op_stkvar	(x,	1);
	create_insn	(0X710002100C);
	create_insn	(x=0X7100021010);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021014);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002104C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021054);
	op_stkvar	(x,	1);
	make_array	(0X710002105C,	0X4);
	create_insn	(0X7100021060);
	create_insn	(x=0X7100021064);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021068);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002106C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021070);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021074);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021078);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021080);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002108C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000210B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000210B4);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(x=0X71000210E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000210E4);
	op_hex		(x,	1);
	create_insn	(x=0X71000210FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021108);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(0X7100021178);
	create_insn	(x=0X7100021184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021190);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(x=0X71000211A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000211B0);
	create_insn	(x=0X71000211CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000211E4);
	op_stkvar	(x,	1);
	create_insn	(0X7100021228);
	create_insn	(x=0X7100021238);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021244);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002124C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021250);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021258);
	op_stkvar	(x,	1);
	create_insn	(0X7100021264);
	create_insn	(0X7100021268);
	create_insn	(x=0X7100021278);
	op_plain_offset	(x,	1,	0X71000AC000);
	op_plain_offset	(x,	129,	0X71000AC000);
	create_insn	(x=0X7100021280);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021294);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002129C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000212A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000212A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000212B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000212BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000212C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000212C8);
	create_insn	(x=0X7100021310);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021318);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021334);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021350);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021354);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021358);
	op_stkvar	(x,	1);
	create_insn	(0X7100021360);
	set_name	(0X7100021360,	"nn.psc.PmControl_ThreadFunc");
	create_insn	(x=0X7100021364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021368);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000213B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000213BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000213C4);
	create_insn	(x=0X71000213C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000213CC);
	op_stkvar	(x,	1);
	set_cmt	(0X71000213D8,	"event",	0);
	set_cmt	(0X71000213DC,	"clearMode",	0);
	set_cmt	(0X71000213E0,	"type",	0);
	create_insn	(x=0X71000213E8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000213F0,	"event",	0);
	set_cmt	(0X71000213F4,	"clearMode",	0);
	set_cmt	(0X71000213F8,	"type",	0);
	create_insn	(x=0X7100021400);
	op_stkvar	(x,	1);
	set_cmt	(0X7100021408,	"event",	0);
	set_cmt	(0X710002140C,	"clearMode",	0);
	set_cmt	(0X7100021410,	"type",	0);
	create_insn	(x=0X7100021418);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021430);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021438);
	op_stkvar	(x,	1);
	create_insn	(0X7100021448);
	create_insn	(x=0X7100021450);
	op_stkvar	(x,	1);
	create_insn	(0X7100021458);
	create_insn	(x=0X7100021460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021464);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000214E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000214E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000214EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000214F0);
	op_stkvar	(x,	1);
	create_insn	(0X71000214F8);
	set_name	(0X71000214F8,	"j__ZN2nn2os13FinalizeMutexEPNS0_9MutexTypeE");
	make_array	(0X71000214FC,	0X4);
	create_insn	(x=0X7100021500);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021504);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021514);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021524);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021528);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(x=0X7100021564);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021568);
	op_stkvar	(x,	1);
	create_insn	(0X7100021570);
	create_dword	(0X7100021574);
	make_array	(0X7100021578,	0X8);
	create_insn	(x=0X7100021580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021584);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002159C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000215A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000215A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000215AC);
	make_array	(0X71000215E4,	0XC);
	create_insn	(x=0X71000215F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000215F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000215F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021634);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002163C);
	op_stkvar	(x,	1);
	create_insn	(0X7100021644);
	create_insn	(x=0X7100021668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021670);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021674);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002167C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021690);
	op_stkvar	(x,	1);
	make_array	(0X7100021698,	0X8);
	create_insn	(x=0X71000216A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000216A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000216A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000216AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000216C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000216C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000216CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000216D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000216D8);
	create_insn	(x=0X710002172C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021730);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021734);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021738);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021740);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021744);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002174C);
	op_stkvar	(x,	1);
	make_array	(0X7100021754,	0XC);
	create_insn	(x=0X7100021760);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021768);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000217B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000217B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000217B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000217C0);
	create_insn	(x=0X71000217D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000217D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000217DC);
	op_stkvar	(x,	1);
	make_array	(0X71000217E4,	0XC);
	create_insn	(x=0X71000217F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000217F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000217F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021844);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021848);
	op_stkvar	(x,	1);
	create_insn	(0X7100021850);
	create_insn	(x=0X7100021864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002186C);
	op_stkvar	(x,	1);
	make_array	(0X7100021874,	0XC);
	create_insn	(x=0X7100021880);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021888);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002188C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021890);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021894);
	op_stkvar	(x,	1);
	create_insn	(0X71000218B0);
	create_insn	(x=0X71000218E8);
	op_hex		(x,	1);
	create_insn	(x=0X71000218F0);
	op_hex		(x,	1);
	create_insn	(0X710002195C);
	create_insn	(0X7100021970);
	create_insn	(x=0X7100021984);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002198C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021990);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021994);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021998);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000219A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000219A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000219A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000219AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000219B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000219B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000219D0);
	create_insn	(x=0X7100021A08);
	op_hex		(x,	1);
	create_insn	(x=0X7100021A10);
	op_hex		(x,	1);
	create_insn	(0X7100021A7C);
	create_insn	(0X7100021A90);
	create_insn	(x=0X7100021AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021AB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100021AC0);
	create_insn	(x=0X7100021AD4);
	op_hex		(x,	1);
	create_insn	(0X7100021AE0);
	create_insn	(x=0X7100021AE8);
	op_hex		(x,	1);
	create_insn	(0X7100021AF0);
	create_insn	(0X7100021AF8);
	create_insn	(x=0X7100021B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B70);
	op_stkvar	(x,	1);
	create_insn	(0X7100021B78);
	create_insn	(0X7100021B80);
	create_insn	(x=0X7100021B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021BDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021BEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021BF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021C00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021C0C);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(x=0X7100021C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021D5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021D64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021DDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021DE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100021E30);
	create_insn	(0X7100021E58);
	create_insn	(x=0X7100021E74);
	op_stkvar	(x,	1);
	create_insn	(0X7100021E88);
	create_insn	(0X7100021E90);
	create_insn	(0X7100021E98);
	create_insn	(0X7100021EA0);
	create_insn	(0X7100021EA8);
	create_insn	(0X7100021EB0);
	create_insn	(x=0X7100021EC0);
	op_stkvar	(x,	1);
	create_insn	(0X7100021EE4);
	create_insn	(x=0X7100021EF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100021F5C);
	create_insn	(x=0X7100021F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021F78);
	op_stkvar	(x,	1);
	create_insn	(0X7100021F84);
	create_qword	(0X7100021F88);
	create_insn	(x=0X7100021F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021FAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100021FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100021FE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100021FE8);
	create_insn	(x=0X7100021FFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022070);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022074);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002207C);
	op_stkvar	(x,	1);
	create_insn	(0X7100022084);
	create_insn	(0X7100022088);
	create_insn	(x=0X710002208C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022090);
	op_stkvar	(x,	1);
	set_cmt	(0X71000220C8,	"event",	0);
	set_cmt	(0X71000220CC,	"clearMode",	0);
	set_cmt	(0X71000220D0,	"type",	0);
	create_insn	(x=0X71000220D8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000220E0,	"event",	0);
	set_cmt	(0X71000220E4,	"clearMode",	0);
	set_cmt	(0X71000220E8,	"type",	0);
	create_insn	(x=0X71000220F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022100);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022114);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022118);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002211C);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(x=0X7100022128);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(x=0X7100022130);
	op_plain_offset	(x,	1,	0X7100072470);
	op_plain_offset	(x,	129,	0X7100072470);
	create_insn	(x=0X7100022134);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022140);
	op_stkvar	(x,	1);
	create_insn	(0X7100022148);
	create_insn	(x=0X7100022150);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022154);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022164);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022194);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000221DC,	"result",	0);
	create_insn	(x=0X71000221E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000221E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000221EC);
	create_insn	(x=0X71000221F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000221F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000221FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022204);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022214);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002221C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022220);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002222C);
	op_stkvar	(x,	1);
	make_array	(0X7100022234,	0XC);
	create_insn	(0X7100022240);
	create_insn	(x=0X7100022244);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002224C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022250);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002225C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000222A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000222E0);
	create_insn	(x=0X71000222E8);
	op_stkvar	(x,	1);
	create_insn	(0X7100022314);
	create_insn	(x=0X7100022334);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022340);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022344);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022348);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022354);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022358);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022368);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100022384);
	create_insn	(x=0X710002238C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022398);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002239C);
	op_stkvar	(x,	1);
	create_insn	(0X71000223A4);
	create_insn	(x=0X71000223A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000223AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000223B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000223C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000223D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000223D8);
	op_stkvar	(x,	1);
	create_insn	(0X71000223E4);
	create_insn	(x=0X71000223E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000223EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000223F8);
	create_insn	(x=0X7100022400);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002240C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022418);
	op_stkvar	(x,	1);
	create_insn	(0X7100022424);
	create_insn	(0X7100022430);
	create_insn	(0X7100022438);
	create_insn	(x=0X710002243C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X710002244C,	0X4);
	create_insn	(x=0X7100022450);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022454);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002245C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022464);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022474);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022490);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022494);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022498);
	op_stkvar	(x,	1);
	create_insn	(0X71000224A0);
	create_insn	(0X71000224D0);
	create_insn	(x=0X71000224EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000224F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000224F4);
	op_stkvar	(x,	1);
	make_array	(0X71000224FC,	0X4);
	create_insn	(x=0X7100022500);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022504);
	op_stkvar	(x,	1);
	set_cmt	(0X7100022514,	"event",	0);
	set_cmt	(0X7100022518,	"clearMode",	0);
	set_cmt	(0X710002251C,	"type",	0);
	create_insn	(x=0X7100022524);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002256C);
	op_stkvar	(x,	1);
	create_insn	(0X7100022574);
	create_dword	(0X710002257C);
	create_insn	(x=0X7100022580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022584);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002258C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002262C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022630);
	op_stkvar	(x,	1);
	create_insn	(0X7100022638);
	create_insn	(x=0X7100022658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002265C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022660);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022664);
	op_stkvar	(x,	1);
	make_array	(0X710002266C,	0X4);
	create_insn	(x=0X7100022670);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022674);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002267C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022718);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002271C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022720);
	op_stkvar	(x,	1);
	make_array	(0X7100022728,	0X8);
	create_insn	(x=0X7100022730);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022734);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002273C);
	op_stkvar	(x,	1);
	create_insn	(0X7100022788);
	create_insn	(x=0X7100022798);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002279C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000227A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000227A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000227AC);
	create_insn	(0X71000227B4);
	create_insn	(0X71000227C0);
	set_name	(0X71000227C0,	"nullsub_49");
	create_insn	(0X71000227C4);
	create_insn	(0X71000227D4);
	create_insn	(0X71000227E8);
	create_insn	(0X71000227F8);
	create_insn	(0X7100022800);
	create_insn	(0X7100022808);
	make_array	(0X7100022818,	0X8);
	create_insn	(x=0X7100022820);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002287C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022880);
	op_stkvar	(x,	1);
	create_insn	(0X7100022888);
	create_insn	(x=0X7100022890);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022894);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000228C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000228D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000228D8);
	create_insn	(x=0X71000228E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000228E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022934);
	op_stkvar	(x,	1);
	create_insn	(0X710002293C);
	create_insn	(x=0X7100022940);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022944);
	op_stkvar	(x,	1);
	create_insn	(0X710002294C);
	create_insn	(x=0X7100022950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022954);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002295C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022960);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000229A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000229A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000229AC);
	create_insn	(x=0X71000229B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000229B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000229BC);
	create_insn	(x=0X71000229CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000229D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000229D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000229DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022A00);
	op_hex		(x,	1);
	create_insn	(x=0X7100022A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022A0C);
	op_stkvar	(x,	1);
	create_insn	(0X7100022A14);
	create_insn	(x=0X7100022A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022A54);
	op_stkvar	(x,	1);
	create_insn	(0X7100022A5C);
	create_insn	(x=0X7100022A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022A64);
	op_stkvar	(x,	1);
	make_array	(0X7100022A6C,	0X4);
	create_insn	(x=0X7100022A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022AA8);
	op_stkvar	(x,	1);
	create_insn	(0X7100022AB0);
	create_dword	(0X7100022AB4);
	make_array	(0X7100022AB8,	0X8);
	create_insn	(x=0X7100022AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022AC4);
	op_stkvar	(x,	1);
	create_insn	(0X7100022AF4);
	create_insn	(x=0X7100022B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022B18);
	op_stkvar	(x,	1);
	create_insn	(0X7100022B20);
	create_insn	(0X7100022B2C);
	create_insn	(0X7100022B34);
	create_insn	(0X7100022B3C);
	create_insn	(0X7100022B44);
	create_insn	(x=0X7100022B48);
	op_hex		(x,	1);
	create_insn	(0X7100022B50);
	create_insn	(x=0X7100022B54);
	op_hex		(x,	1);
	create_insn	(0X7100022B5C);
	create_insn	(0X7100022B64);
	make_array	(0X7100022B6C,	0X4);
	create_insn	(0X7100022B70);
	create_insn	(x=0X7100022B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022B84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022B90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022B98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022BDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022BE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022BF4);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	set_cmt	(0X7100022BF8,	"a2",	0);
	set_cmt	(0X7100022BFC,	"a1",	0);
	set_cmt	(0X7100022C00,	"a3",	0);
	create_insn	(x=0X7100022C18);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022C2C);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C30);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C38);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C44);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C58);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C5C);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C60);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C64);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C68);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C6C);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C70);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C74);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C78);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C7C);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C80);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C84);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C88);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C8C);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C90);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C94);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C98);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022C9C);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CA0);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CA4);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CA8);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CAC);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CB0);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CB4);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CB8);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CBC);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CC0);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CC4);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CC8);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CCC);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CD0);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CD4);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CD8);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CDC);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CE0);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CE4);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CE8);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CEC);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CF0);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CF4);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CF8);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022CFC);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022D00);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022D04);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022D08);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022D0C);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022D10);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022E34);
	op_hex		(x,	1);
	create_insn	(x=0X7100022E38);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022E44);
	op_hex		(x,	1);
	create_insn	(x=0X7100022E48);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022E4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022E60);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022E64);
	op_plain_offset	(x,	1,	0X71000B4000);
	op_plain_offset	(x,	129,	0X71000B4000);
	create_insn	(x=0X7100022E70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022E94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022E9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022EB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022EC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022EDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022EE8);
	op_stkvar	(x,	1);
	create_insn	(0X7100022EF0);
	create_qword	(0X7100022EF8);
	create_insn	(0X7100022F00);
	create_insn	(x=0X7100022F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022F34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022FB4);
	op_stkvar	(x,	1);
	create_dword	(0X7100022FBC);
	create_insn	(x=0X7100022FC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100022FC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100022FCC,	0X4);
	create_insn	(x=0X7100022FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100022FE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100023000);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100023008);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100023018);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002301C);
	op_stkvar	(x,	1);
	create_insn	(0X7100023024);
	create_insn	(x=0X7100023028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002302C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023030);
	op_stkvar	(x,	1);
	create_insn	(0X71000231D0);
	create_insn	(0X71000231D8);
	create_insn	(0X71000231E4);
	create_insn	(0X71000231F0);
	create_insn	(0X71000231FC);
	create_insn	(0X7100023208);
	create_insn	(0X7100023214);
	create_insn	(0X7100023220);
	create_insn	(0X710002322C);
	create_insn	(0X7100023238);
	create_insn	(0X7100023244);
	create_insn	(0X7100023250);
	create_insn	(0X710002325C);
	create_insn	(0X7100023268);
	create_insn	(0X7100023274);
	create_insn	(0X7100023280);
	create_insn	(0X710002328C);
	create_insn	(0X7100023298);
	create_insn	(0X71000232A4);
	create_insn	(0X71000232B0);
	create_insn	(0X71000232BC);
	create_insn	(0X71000232C8);
	create_insn	(0X71000232D4);
	create_insn	(0X71000232E0);
	create_insn	(0X71000232EC);
	create_insn	(0X71000232F8);
	create_insn	(0X7100023304);
	create_insn	(0X7100023310);
	create_insn	(0X710002331C);
	create_insn	(0X7100023328);
	create_insn	(0X7100023334);
	create_insn	(0X7100023340);
	create_insn	(x=0X7100023364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023368);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002336C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023374);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023378);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002337C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000233A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000233BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000233C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000233CC);
	create_insn	(0X71000233F4);
	set_name	(0X71000233F4,	"nullsub_50");
	create_insn	(x=0X71000233F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023414);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002341C);
	op_stkvar	(x,	1);
	create_insn	(0X71000234B0);
	create_insn	(0X71000234B8);
	set_name	(0X71000234B8,	"nullsub_51");
	create_insn	(x=0X71000234BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000234C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000234C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000235EC);
	create_insn	(0X71000235F4);
	create_insn	(0X71000235FC);
	create_insn	(0X7100023604);
	create_insn	(0X710002360C);
	create_insn	(0X7100023614);
	create_insn	(0X710002361C);
	create_insn	(0X7100023624);
	create_insn	(0X710002362C);
	create_insn	(0X7100023634);
	create_insn	(0X710002363C);
	create_insn	(0X7100023644);
	create_insn	(0X710002364C);
	create_insn	(0X7100023654);
	create_insn	(0X710002365C);
	create_insn	(0X7100023664);
	create_insn	(0X710002366C);
	create_insn	(0X7100023674);
	create_insn	(0X710002367C);
	create_insn	(0X7100023684);
	create_insn	(0X710002368C);
	create_insn	(0X7100023694);
	create_insn	(0X710002369C);
	create_insn	(0X71000236A4);
	create_insn	(0X71000236AC);
	create_insn	(0X71000236B4);
	create_insn	(0X71000236BC);
	create_insn	(0X71000236C4);
	create_insn	(0X71000236CC);
	create_insn	(0X71000236D4);
	create_insn	(0X71000236DC);
	create_insn	(0X71000236E4);
	create_insn	(x=0X710002370C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023710);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023714);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002371C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023720);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023750);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023770);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023778);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002377C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023790);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023794);
	op_stkvar	(x,	1);
	create_insn	(0X710002379C);
	create_insn	(0X71000237A8);
	set_name	(0X71000237A8,	"nullsub_52");
	create_insn	(0X71000237AC);
	create_insn	(x=0X71000237B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000237B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000237BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000237E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000237FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023808);
	op_stkvar	(x,	1);
	create_insn	(0X7100023810);
	create_insn	(x=0X710002381C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023820);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023828);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100023AE8,	"result",	0);
	create_insn	(x=0X7100023AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023AF8);
	op_stkvar	(x,	1);
	create_insn	(0X7100023B00);
	create_insn	(x=0X7100023B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023B60);
	op_hex		(x,	1);
	create_insn	(x=0X7100023B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023B80);
	op_stkvar	(x,	1);
	create_insn	(0X7100023B8C);
	create_insn	(x=0X7100023B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023B98);
	op_stkvar	(x,	1);
	create_insn	(0X7100023BA4);
	create_insn	(x=0X7100023BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023BF4);
	op_stkvar	(x,	1);
	create_insn	(0X7100023C00);
	create_insn	(0X7100023C08);
	create_insn	(x=0X7100023C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023C98);
	op_stkvar	(x,	1);
	create_insn	(0X7100023CA4);
	set_cmt	(0X7100023CC4,	"switch 12 cases",	0);
	create_insn	(x=0X7100023CCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100023CD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100023CE0,	"switch jump",	0);
	set_cmt	(0X7100023CE4,	"jumptable 0000007100023CE0 case 0",	1);
	create_insn	(0X7100023CE4);
	create_insn	(x=0X7100023CEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023D00);
	op_stkvar	(x,	1);
	create_insn	(0X7100023D0C);
	create_insn	(x=0X7100023D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023D58);
	op_stkvar	(x,	1);
	create_insn	(0X7100023D64);
	create_insn	(x=0X7100023D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023DA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023DAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023DB0);
	op_stkvar	(x,	1);
	create_insn	(0X7100023DBC);
	set_cmt	(0X7100023DC4,	"switch 7 cases",	0);
	create_insn	(x=0X7100023DD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100023DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100023DE0,	"switch jump",	0);
	set_cmt	(0X7100023DE4,	"jumptable 0000007100023DE0 case 0",	1);
	create_insn	(0X7100023DE4);
	create_insn	(x=0X7100023DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E00);
	op_stkvar	(x,	1);
	create_insn	(0X7100023E0C);
	create_insn	(x=0X7100023E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023EAC);
	op_hex		(x,	1);
	create_insn	(0X7100023EC0);
	create_insn	(x=0X7100023EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023EFC);
	op_stkvar	(x,	1);
	create_insn	(0X7100023F08);
	create_insn	(x=0X7100023F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F48);
	op_stkvar	(x,	1);
	create_insn	(0X7100023F54);
	create_insn	(x=0X7100023F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100023FE8);
	op_hex		(x,	1);
	create_insn	(x=0X7100024030);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002403C);
	op_stkvar	(x,	1);
	create_insn	(0X7100024048);
	create_insn	(x=0X7100024064);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024070);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024074);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024078);
	op_stkvar	(x,	1);
	create_insn	(0X7100024084);
	create_insn	(x=0X71000240A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000240B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000240B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000240B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000240C4);
	create_insn	(x=0X71000240E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000240F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000240F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000240F8);
	op_stkvar	(x,	1);
	create_insn	(0X7100024104);
	create_insn	(x=0X7100024124);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024130);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024134);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024138);
	op_stkvar	(x,	1);
	create_insn	(0X7100024144);
	create_insn	(x=0X710002414C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024158);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002415C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024160);
	op_stkvar	(x,	1);
	create_insn	(0X710002416C);
	create_insn	(x=0X7100024174);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024180);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024184);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024188);
	op_stkvar	(x,	1);
	set_cmt	(0X7100024194,	"jumptable 0000007100023DE0 default case",	1);
	create_insn	(0X7100024194);
	set_name	(0X7100024194,	"def_7100023DE0");
	create_insn	(x=0X71000241B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000241C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000241C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000241C8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000241D4,	"jumptable 0000007100023CE0 default case",	1);
	create_insn	(0X71000241D4);
	set_name	(0X71000241D4,	"def_7100023CE0");
	create_insn	(x=0X71000241E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000241F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000241F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000241FC);
	op_stkvar	(x,	1);
	set_cmt	(0X7100024208,	"jumptable 0000007100023CE0 case 1",	1);
	create_insn	(0X7100024208);
	create_insn	(x=0X7100024210);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002421C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024220);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024224);
	op_stkvar	(x,	1);
	set_cmt	(0X7100024230,	"jumptable 0000007100023CE0 case 10",	1);
	create_insn	(0X7100024230);
	create_insn	(x=0X7100024238);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024244);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002424C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100024258,	"jumptable 0000007100023CE0 case 11",	1);
	create_insn	(0X7100024258);
	create_insn	(x=0X7100024260);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002426C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024274);
	op_stkvar	(x,	1);
	create_insn	(0X7100024280);
	create_insn	(x=0X7100024288);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024294);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002429C);
	op_stkvar	(x,	1);
	create_insn	(0X71000242A8);
	create_insn	(x=0X71000242B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000242BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000242C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000242C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000242D0);
	create_insn	(x=0X71000242D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000242E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000242E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000242EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000242F8);
	create_insn	(x=0X7100024300);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024304);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024308);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024314);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002431C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024320);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024324);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024328);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002432C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024330);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024334);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024374);
	op_hex		(x,	1);
	create_insn	(0X7100024388);
	create_insn	(x=0X7100024390);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002439C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000243B0);
	create_insn	(x=0X71000243B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000243EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002442C);
	op_hex		(x,	1);
	create_insn	(0X7100024440);
	create_insn	(x=0X7100024444);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024448);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024450);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024454);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024458);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002446C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024470);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024474);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024478);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000244A8);
	op_hex		(x,	1);
	create_insn	(x=0X71000244E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000244F8);
	create_insn	(x=0X7100024500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002450C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024510);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024514);
	op_stkvar	(x,	1);
	create_insn	(0X7100024520);
	create_insn	(x=0X7100024528);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024534);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002453C);
	op_stkvar	(x,	1);
	create_insn	(0X7100024548);
	create_insn	(x=0X7100024550);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002455C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024560);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024564);
	op_stkvar	(x,	1);
	set_cmt	(0X7100024570,	"jumptable 0000007100023DE0 case 1",	1);
	create_insn	(0X7100024570);
	create_insn	(x=0X7100024578);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024584);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002458C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100024598,	"jumptable 0000007100023DE0 case 2",	1);
	create_insn	(0X7100024598);
	create_insn	(x=0X71000245A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000245AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000245B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000245B4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000245C0,	"jumptable 0000007100023DE0 case 5",	1);
	create_insn	(0X71000245C0);
	create_insn	(x=0X71000245C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000245D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000245D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000245DC);
	op_stkvar	(x,	1);
	set_cmt	(0X71000245E8,	"jumptable 0000007100023DE0 case 6",	1);
	create_insn	(0X71000245E8);
	create_insn	(x=0X71000245F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000245FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024604);
	op_stkvar	(x,	1);
	create_insn	(0X7100024610);
	create_insn	(x=0X7100024618);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002462C);
	op_stkvar	(x,	1);
	create_insn	(0X7100024638);
	create_insn	(0X7100024644);
	create_insn	(x=0X7100024658);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024668);
	op_stkvar	(x,	1);
	create_insn	(0X7100024674);
	create_insn	(0X7100024680);
	create_insn	(x=0X7100024694);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246A0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000246B0,	"jumptable 0000007100023CE0 cases 2-9\njumptable 0000007100023DE0 cases 3,4",	1);
	create_insn	(x=0X71000246B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000246CC);
	create_insn	(x=0X71000246D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000246F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002470C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024720);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024728);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002472C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024730);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002473C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024740);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024744);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002476C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024794);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024798);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000247A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000247AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000247B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000247C0);
	op_hex		(x,	1);
	create_insn	(x=0X71000247EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024800);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002480C);
	op_stkvar	(x,	1);
	create_insn	(0X7100024818);
	create_insn	(x=0X7100024824);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002482C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024830);
	op_stkvar	(x,	1);
	create_insn	(0X710002483C);
	create_insn	(x=0X7100024840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024850);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002485C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024860);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024870);
	op_stkvar	(x,	1);
	create_insn	(0X7100024888);
	create_insn	(0X7100024890);
	create_insn	(x=0X7100024894);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002489C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000248FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024904);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002490C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024948);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024964);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024968);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002496C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024970);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024974);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002497C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024980);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024984);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024994);
	op_hex		(x,	1);
	create_insn	(x=0X71000249C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000249D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000249E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000249EC);
	create_insn	(x=0X71000249F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000249FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A04);
	op_stkvar	(x,	1);
	create_insn	(0X7100024A10);
	create_insn	(x=0X7100024A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A44);
	op_stkvar	(x,	1);
	create_insn	(0X7100024A5C);
	create_insn	(0X7100024A64);
	create_insn	(x=0X7100024A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024B58);
	op_hex		(x,	1);
	create_insn	(x=0X7100024B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024BA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100024BB0);
	create_insn	(x=0X7100024BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024BC8);
	op_stkvar	(x,	1);
	create_insn	(0X7100024BD4);
	create_insn	(x=0X7100024BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C08);
	op_stkvar	(x,	1);
	create_insn	(0X7100024C20);
	create_insn	(0X7100024C28);
	create_insn	(x=0X7100024C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024CA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024CA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024CE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024CFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D2C);
	op_hex		(x,	1);
	create_insn	(x=0X7100024D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D78);
	op_stkvar	(x,	1);
	create_insn	(0X7100024D84);
	create_insn	(x=0X7100024D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024D9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100024DA8);
	create_insn	(x=0X7100024DAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024DDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100024DF4);
	create_insn	(0X7100024DFC);
	create_insn	(x=0X7100024E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E0C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100024E24,	"src",	0);
	create_insn	(x=0X7100024E24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100024E28,	"size",	0);
	set_cmt	(0X7100024E2C,	"dst",	0);
	create_insn	(x=0X7100024E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024EDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024EEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024EF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024F00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024F10);
	op_hex		(x,	1);
	create_insn	(x=0X7100024F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024F5C);
	op_stkvar	(x,	1);
	create_insn	(0X7100024F68);
	create_insn	(0X7100024F74);
	create_insn	(x=0X7100024F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024FB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100024FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100024FD0);
	op_stkvar	(x,	1);
	create_insn	(0X7100024FE8);
	create_insn	(x=0X7100024FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002500C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025014);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002502C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025030);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025034);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025038);
	op_stkvar	(x,	1);
	create_insn	(0X7100025044);
	create_insn	(x=0X7100025048);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002504C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025050);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025054);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025060);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002506C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025070);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025084);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025088);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025090);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025094);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002509C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000250FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002510C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025120);
	op_hex		(x,	1);
	create_insn	(0X7100025130);
	create_insn	(x=0X7100025134);
	op_hex		(x,	1);
	create_insn	(x=0X7100025170);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002517C);
	op_stkvar	(x,	1);
	create_insn	(0X7100025188);
	create_insn	(x=0X710002519C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000251A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000251AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000251BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000251D4);
	create_insn	(x=0X71000251E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000251E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000251E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000251EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000251F8);
	create_insn	(x=0X71000251FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025200);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025204);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025208);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025218);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002521C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025228);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025230);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025240);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025244);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002524C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025250);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002525C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025280);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025294);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000252A4);
	op_hex		(x,	1);
	create_insn	(x=0X71000252E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000252F4);
	create_insn	(x=0X7100025300);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025304);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002530C);
	op_stkvar	(x,	1);
	create_insn	(0X7100025318);
	create_insn	(x=0X710002532C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002533C);
	op_stkvar	(x,	1);
	create_insn	(0X7100025348);
	create_insn	(0X7100025350);
	create_insn	(x=0X7100025354);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025358);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002535C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025370);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025374);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025380);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025388);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025398);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002539C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000253FC);
	op_hex		(x,	1);
	create_insn	(x=0X710002543C);
	op_stkvar	(x,	1);
	create_insn	(0X710002544C);
	create_insn	(x=0X7100025458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002545C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025464);
	op_stkvar	(x,	1);
	create_insn	(0X7100025470);
	create_insn	(x=0X7100025484);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025494);
	op_stkvar	(x,	1);
	create_insn	(0X71000254A0);
	create_insn	(0X71000254A8);
	create_insn	(x=0X71000254AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000254FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025500);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025504);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002550C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025530);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025548);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025550);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002555C);
	op_hex		(x,	1);
	create_insn	(x=0X7100025588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002559C);
	op_stkvar	(x,	1);
	create_insn	(0X71000255AC);
	create_insn	(x=0X71000255B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000255BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000255C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000255C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000255D0);
	create_insn	(x=0X71000255D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000255E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000255F4);
	op_stkvar	(x,	1);
	create_insn	(0X7100025600);
	create_insn	(0X7100025608);
	create_insn	(x=0X710002560C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025610);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025618);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002562C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025638);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025640);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025650);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025654);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002565C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025660);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025664);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025668);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002566C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025690);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000256A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000256B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000256BC);
	op_hex		(x,	1);
	create_insn	(x=0X71000256E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000256FC);
	op_stkvar	(x,	1);
	create_insn	(0X710002570C);
	create_insn	(x=0X7100025718);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002571C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025720);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025724);
	op_stkvar	(x,	1);
	create_insn	(0X7100025730);
	create_insn	(x=0X7100025734);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025744);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025754);
	op_stkvar	(x,	1);
	create_insn	(0X7100025760);
	create_insn	(0X7100025768);
	create_insn	(x=0X710002576C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025770);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025774);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025778);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002578C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025798);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000257CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025804);
	op_hex		(x,	1);
	create_insn	(x=0X7100025814);
	op_hex		(x,	1);
	create_insn	(x=0X7100025854);
	op_stkvar	(x,	1);
	create_insn	(0X7100025864);
	create_insn	(x=0X7100025870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025874);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002587C);
	op_stkvar	(x,	1);
	create_insn	(0X7100025888);
	create_insn	(x=0X710002589C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000258AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000258B8);
	create_insn	(0X71000258C0);
	create_insn	(x=0X71000258C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000258C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000258CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000258D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000258E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000258E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000258F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000258F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002590C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025910);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002591C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025924);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002595C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025960);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025964);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025978);
	op_hex		(x,	1);
	create_insn	(x=0X71000259A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000259B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000259C8);
	create_insn	(x=0X71000259D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000259D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000259DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000259E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000259EC);
	create_insn	(x=0X71000259F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A10);
	op_stkvar	(x,	1);
	create_insn	(0X7100025A1C);
	create_insn	(0X7100025A24);
	create_insn	(x=0X7100025A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025AD0);
	op_hex		(x,	1);
	create_insn	(x=0X7100025B10);
	op_stkvar	(x,	1);
	create_insn	(0X7100025B20);
	create_insn	(x=0X7100025B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025B38);
	op_stkvar	(x,	1);
	create_insn	(0X7100025B44);
	create_insn	(x=0X7100025B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025B68);
	op_stkvar	(x,	1);
	create_insn	(0X7100025B74);
	create_insn	(0X7100025B7C);
	create_insn	(x=0X7100025B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025B8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025C28);
	op_hex		(x,	1);
	create_insn	(x=0X7100025C68);
	op_stkvar	(x,	1);
	create_insn	(0X7100025C78);
	create_insn	(x=0X7100025C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025C90);
	op_stkvar	(x,	1);
	create_insn	(0X7100025C9C);
	create_insn	(x=0X7100025CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025CC0);
	op_stkvar	(x,	1);
	create_insn	(0X7100025CCC);
	create_insn	(0X7100025CD4);
	create_insn	(x=0X7100025CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025CE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025D80);
	op_hex		(x,	1);
	create_insn	(x=0X7100025DC0);
	op_stkvar	(x,	1);
	create_insn	(0X7100025DD0);
	create_insn	(x=0X7100025DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025DE8);
	op_stkvar	(x,	1);
	create_insn	(0X7100025DF4);
	create_insn	(x=0X7100025E08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E18);
	op_stkvar	(x,	1);
	create_insn	(0X7100025E24);
	create_insn	(0X7100025E2C);
	create_insn	(x=0X7100025E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025ED8);
	op_hex		(x,	1);
	create_insn	(x=0X7100025F18);
	op_stkvar	(x,	1);
	create_insn	(0X7100025F28);
	create_insn	(x=0X7100025F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025F40);
	op_stkvar	(x,	1);
	create_insn	(0X7100025F4C);
	create_insn	(x=0X7100025F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025F70);
	op_stkvar	(x,	1);
	create_insn	(0X7100025F7C);
	create_insn	(0X7100025F84);
	create_insn	(x=0X7100025F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025F8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100025FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002601C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026044);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026050);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026060);
	op_stkvar	(x,	1);
	create_insn	(0X7100026078);
	create_insn	(x=0X7100026084);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026088);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002608C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026090);
	op_stkvar	(x,	1);
	create_insn	(0X710002609C);
	create_insn	(x=0X71000260A0);
	op_hex		(x,	1);
	create_insn	(x=0X71000260DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000260E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000260F4);
	create_insn	(x=0X7100026108);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026114);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026118);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026128);
	op_stkvar	(x,	1);
	create_insn	(0X7100026140);
	create_insn	(0X7100026148);
	create_insn	(x=0X710002614C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026150);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026154);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026158);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026168);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002616C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026178);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026180);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026190);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002619C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000261A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000261A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000261AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000261B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000261B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000261B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000261BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000261E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026208);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026214);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026224);
	op_stkvar	(x,	1);
	create_insn	(0X710002623C);
	create_insn	(x=0X7100026248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002624C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026250);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026254);
	op_stkvar	(x,	1);
	create_insn	(0X7100026260);
	create_insn	(x=0X7100026264);
	op_hex		(x,	1);
	create_insn	(x=0X71000262A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000262AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000262B8);
	create_insn	(x=0X71000262CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000262D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000262DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000262EC);
	op_stkvar	(x,	1);
	create_insn	(0X7100026304);
	create_insn	(0X710002630C);
	create_insn	(x=0X7100026310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026314);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002631C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002632C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026330);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002633C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026344);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026354);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026358);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002635C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026368);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002636C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026370);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000263B4);
	op_hex		(x,	1);
	create_insn	(x=0X71000263F4);
	op_stkvar	(x,	1);
	create_insn	(0X7100026404);
	create_insn	(x=0X7100026410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026414);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002641C);
	op_stkvar	(x,	1);
	create_insn	(0X7100026428);
	create_insn	(x=0X710002643C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002644C);
	op_stkvar	(x,	1);
	create_insn	(0X7100026458);
	create_insn	(0X7100026460);
	create_insn	(x=0X7100026464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002646C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026470);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026480);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026484);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026490);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026498);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000264A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000264AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000264B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000264B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000264B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000264BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000264C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000264C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026508);
	op_hex		(x,	1);
	create_insn	(x=0X7100026548);
	op_stkvar	(x,	1);
	create_insn	(0X7100026558);
	create_insn	(x=0X7100026564);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002656C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026570);
	op_stkvar	(x,	1);
	create_insn	(0X710002657C);
	create_insn	(x=0X7100026590);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000265AC);
	create_insn	(0X71000265B4);
	create_insn	(x=0X71000265B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000265F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002660C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002661C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002662C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002665C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026674);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026690);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002669C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000266A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000266A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000266B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000266C8);
	op_hex		(x,	1);
	create_insn	(x=0X71000266F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026704);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026710);
	op_stkvar	(x,	1);
	create_insn	(0X710002671C);
	create_insn	(x=0X7100026720);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026730);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002673C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026740);
	op_hex		(x,	1);
	create_insn	(0X7100026758);
	create_insn	(x=0X7100026764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002676C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026770);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026774);
	op_stkvar	(x,	1);
	create_insn	(0X7100026780);
	create_insn	(x=0X7100026788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002678C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000267B0);
	create_insn	(x=0X71000267B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000267FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026800);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026804);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026808);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002680C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026814);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002681C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026820);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002683C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026844);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002684C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026854);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026858);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026860);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026864);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002686C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026874);
	op_hex		(x,	1);
	create_insn	(x=0X7100026880);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026888);
	op_hex		(x,	1);
	create_insn	(x=0X71000268B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000268C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000268D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000268DC);
	op_stkvar	(x,	1);
	create_insn	(0X71000268E8);
	create_insn	(x=0X71000268EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000268FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026908);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026928);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002692C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026938);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002693C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026960);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026968);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026974);
	op_stkvar	(x,	1);
	create_insn	(0X7100026980);
	create_insn	(x=0X7100026988);
	op_stkvar	(x,	1);
	create_insn	(0X7100026994);
	create_insn	(x=0X710002699C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000269B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000269B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000269C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000269D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000269DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000269E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000269E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000269F0);
	create_insn	(x=0X71000269F8);
	op_stkvar	(x,	1);
	create_insn	(0X7100026A04);
	create_insn	(x=0X7100026A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026AB0);
	op_hex		(x,	1);
	create_insn	(x=0X7100026AF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100026B00);
	create_insn	(x=0X7100026B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B18);
	op_stkvar	(x,	1);
	create_insn	(0X7100026B24);
	create_insn	(x=0X7100026B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B48);
	op_stkvar	(x,	1);
	create_insn	(0X7100026B54);
	create_insn	(0X7100026B5C);
	create_insn	(x=0X7100026B60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026C70);
	op_hex		(x,	1);
	create_insn	(x=0X7100026C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026CBC);
	op_stkvar	(x,	1);
	create_insn	(0X7100026CC8);
	create_insn	(x=0X7100026CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D30);
	op_stkvar	(x,	1);
	create_insn	(0X7100026D40);
	create_insn	(x=0X7100026D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D58);
	op_stkvar	(x,	1);
	create_insn	(0X7100026D64);
	create_insn	(0X7100026D6C);
	create_insn	(x=0X7100026D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026E14);
	op_hex		(x,	1);
	create_insn	(x=0X7100026E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026E68);
	op_stkvar	(x,	1);
	create_insn	(0X7100026E74);
	create_insn	(x=0X7100026E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026EBC);
	op_stkvar	(x,	1);
	create_insn	(0X7100026EC8);
	create_insn	(x=0X7100026ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026EEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026EF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100026EFC);
	create_insn	(x=0X7100026F04);
	op_stkvar	(x,	1);
	create_insn	(0X7100026F10);
	create_insn	(x=0X7100026F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100026FD0);
	op_hex		(x,	1);
	create_insn	(x=0X7100027010);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002701C);
	op_stkvar	(x,	1);
	create_insn	(0X7100027028);
	create_insn	(x=0X710002703C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027048);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002704C);
	op_hex		(x,	1);
	create_insn	(0X7100027064);
	create_insn	(x=0X7100027070);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027074);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002707C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027088);
	op_stkvar	(x,	1);
	create_insn	(0X7100027098);
	create_insn	(x=0X710002709C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000270FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027114);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002711C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027128);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002713C);
	op_hex		(x,	1);
	create_insn	(x=0X710002717C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027188);
	op_stkvar	(x,	1);
	create_insn	(0X7100027194);
	create_insn	(x=0X71000271A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000271B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000271B8);
	op_hex		(x,	1);
	create_insn	(0X71000271D4);
	create_insn	(x=0X71000271E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000271E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000271E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000271EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000271F8);
	op_stkvar	(x,	1);
	create_insn	(0X7100027208);
	create_insn	(x=0X710002720C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027210);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027214);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027218);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002722C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027238);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027240);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027250);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002725C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027260);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027264);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002726C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000272AC);
	op_hex		(x,	1);
	create_insn	(x=0X71000272EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000272FC);
	create_insn	(x=0X7100027308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002730C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027314);
	op_stkvar	(x,	1);
	create_insn	(0X7100027320);
	create_insn	(x=0X7100027334);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027344);
	op_stkvar	(x,	1);
	create_insn	(0X7100027350);
	create_insn	(0X7100027358);
	create_insn	(x=0X710002735C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027368);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027378);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002737C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027388);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027390);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000273F4);
	op_hex		(x,	1);
	create_insn	(x=0X7100027434);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027440);
	op_stkvar	(x,	1);
	create_insn	(0X710002744C);
	create_insn	(x=0X7100027460);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002746C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027470);
	op_hex		(x,	1);
	create_insn	(0X710002748C);
	create_insn	(x=0X7100027498);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002749C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000274C0);
	create_insn	(x=0X71000274C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000274F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002750C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027510);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027514);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027518);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002751C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027520);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027524);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027548);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027560);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027568);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027574);
	op_hex		(x,	1);
	create_insn	(x=0X71000275A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000275B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000275C4);
	create_insn	(x=0X71000275D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000275D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000275D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000275DC);
	op_stkvar	(x,	1);
	create_insn	(0X71000275E8);
	create_insn	(x=0X71000275EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000275FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002760C);
	op_stkvar	(x,	1);
	create_insn	(0X7100027618);
	create_insn	(0X7100027620);
	create_insn	(x=0X7100027624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027628);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027634);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027640);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027648);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027674);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027680);
	op_hex		(x,	1);
	create_insn	(x=0X710002769C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000276A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000276AC);
	create_insn	(x=0X71000276B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000276B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000276C4);
	create_insn	(x=0X71000276CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000276D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000276DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027710);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027714);
	op_stkvar	(x,	1);
	create_insn	(0X7100027720);
	create_insn	(0X7100027728);
	create_insn	(x=0X710002772C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027730);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027734);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027738);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027774);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027778);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002777C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027780);
	op_stkvar	(x,	1);
	create_insn	(0X710002778C);
	create_insn	(x=0X7100027790);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027794);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002779C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000277F4);
	op_hex		(x,	1);
	create_insn	(x=0X7100027834);
	op_stkvar	(x,	1);
	create_insn	(0X7100027844);
	create_insn	(x=0X7100027848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002784C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027854);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002785C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002786C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027874);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002787C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000278AC);
	op_hex		(x,	1);
	create_insn	(x=0X71000278F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027900);
	op_stkvar	(x,	1);
	create_insn	(0X7100027910);
	create_insn	(x=0X710002791C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027924);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027928);
	op_stkvar	(x,	1);
	create_insn	(0X7100027934);
	create_insn	(x=0X7100027948);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027954);
	op_stkvar	(x,	1);
	create_insn	(0X7100027968);
	create_insn	(x=0X710002797C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002798C);
	op_stkvar	(x,	1);
	create_insn	(0X7100027998);
	create_insn	(0X71000279A0);
	create_insn	(x=0X71000279A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000279FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A48);
	op_hex		(x,	1);
	create_insn	(x=0X7100027A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027A9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100027AA8);
	create_insn	(x=0X7100027ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027AF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100027AFC);
	create_insn	(x=0X7100027B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027B24);
	op_stkvar	(x,	1);
	create_insn	(0X7100027B30);
	create_insn	(x=0X7100027B38);
	op_stkvar	(x,	1);
	create_dword	(0X7100027B44);
	create_qword	(0X7100027B48);
	make_array	(0X7100027B48,	0X45);
	create_insn	(x=0X7100027D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027D88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027DAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027DB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027DCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027E1C);
	op_plain_offset	(x,	1,	0X71000BD390);
	op_plain_offset	(x,	129,	0X71000BD390);
	create_insn	(x=0X7100027E2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027E30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027E34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027E38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027E48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100027E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027EA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100027EA8);
	set_name	(0X7100027EA8,	"nullsub_53");
	create_insn	(0X7100027EAC);
	set_name	(0X7100027EAC,	"nullsub_54");
	create_insn	(0X7100027EB0);
	create_insn	(0X7100027EB8);
	create_insn	(0X7100027EC0);
	create_insn	(0X7100027EC8);
	create_insn	(0X7100027ED0);
	create_insn	(x=0X7100027ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027F34);
	op_stkvar	(x,	1);
	create_insn	(0X7100027F40);
	create_insn	(0X7100027F48);
	create_insn	(0X7100027F50);
	create_insn	(0X7100027F58);
	create_insn	(0X7100027F60);
	create_insn	(0X7100027F68);
	create_insn	(0X7100027F70);
	create_insn	(0X7100027F78);
	create_insn	(0X7100027F80);
	create_insn	(0X7100027F88);
	create_insn	(0X7100027F90);
	create_insn	(0X7100027F98);
	create_insn	(0X7100027FA0);
	create_insn	(0X7100027FA8);
	create_insn	(0X7100027FB0);
	create_insn	(0X7100027FB8);
	create_insn	(0X7100027FC0);
	create_insn	(0X7100027FC8);
	create_insn	(0X7100027FD0);
	create_insn	(x=0X7100027FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100027FEC);
	op_stkvar	(x,	1);
	create_insn	(0X7100027FF8);
	create_insn	(0X7100028000);
	create_insn	(x=0X7100028004);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028014);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028018);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028020);
	op_stkvar	(x,	1);
	create_insn	(0X710002802C);
	create_insn	(x=0X7100028034);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002803C);
	op_stkvar	(x,	1);
	create_insn	(0X7100028044);
	create_insn	(0X710002804C);
	create_insn	(0X7100028054);
	create_insn	(0X710002805C);
	create_insn	(0X7100028064);
	create_insn	(x=0X7100028068);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028070);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028078);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028080);
	op_stkvar	(x,	1);
	create_insn	(0X710002808C);
	create_insn	(0X7100028094);
	create_insn	(x=0X710002809C);
	op_hex		(x,	1);
	create_insn	(0X71000280AC);
	create_insn	(0X71000280B8);
	create_insn	(0X71000280BC);
	create_insn	(x=0X71000280C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000280C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000280D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000280EC);
	op_plain_offset	(x,	1,	0X71000BF4D0);
	op_plain_offset	(x,	129,	0X71000BF4D0);
	create_insn	(x=0X71000280F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000280FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028100);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028108);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002810C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028118);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002811C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028120);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028124);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002812C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028134);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028138);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028140);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002814C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028150);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002815C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028160);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028168);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002816C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100028178);
	set_name	(0X7100028178,	"nullsub_5");
	create_insn	(0X710002817C);
	create_insn	(x=0X7100028180);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028184);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028188);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002819C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000281A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000281AC);
	create_insn	(x=0X71000281D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000281D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000281E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028208);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002821C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028220);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028230);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028238);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002824C);
	op_stkvar	(x,	1);
	create_insn	(0X7100028258);
	create_insn	(x=0X710002825C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028260);
	op_stkvar	(x,	1);
	create_insn	(0X710002826C);
	create_insn	(x=0X7100028270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028274);
	op_stkvar	(x,	1);
	create_insn	(0X7100028280);
	create_insn	(x=0X7100028284);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028294);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000282A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000282AC);
	create_insn	(x=0X71000282B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000282B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000282B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000282BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000282D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000282D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000282D8);
	op_stkvar	(x,	1);
	create_insn	(0X71000282E4);
	create_insn	(x=0X710002833C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028350);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028354);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002835C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028378);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002837C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028380);
	op_stkvar	(x,	1);
	create_insn	(0X710002838C);
	create_insn	(x=0X7100028390);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028394);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028398);
	op_stkvar	(x,	1);
	create_insn	(0X71000283A4);
	create_insn	(x=0X71000283A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000283AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000283B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000283BC);
	create_insn	(x=0X71000283C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000283C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000283C8);
	op_stkvar	(x,	1);
	create_insn	(0X71000283D4);
	create_insn	(x=0X71000283D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000283E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000283F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100028400);
	create_insn	(x=0X7100028404);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002840C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028424);
	op_stkvar	(x,	1);
	create_insn	(0X7100028430);
	create_insn	(x=0X7100028458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002845C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002848C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000284A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000284A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000284AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000284B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000284BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000284CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000284D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000284DC);
	create_insn	(x=0X71000284E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000284E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000284F0);
	create_insn	(x=0X71000284F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000284F8);
	op_stkvar	(x,	1);
	create_insn	(0X7100028504);
	create_insn	(x=0X7100028508);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028518);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028524);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100028530);
	create_insn	(x=0X7100028534);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002853C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028540);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028554);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028558);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002855C);
	op_stkvar	(x,	1);
	create_insn	(0X7100028568);
	create_insn	(x=0X71000285C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000285D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000285D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000285E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000285FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028604);
	op_stkvar	(x,	1);
	create_insn	(0X7100028610);
	create_insn	(x=0X7100028614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002861C);
	op_stkvar	(x,	1);
	create_insn	(0X7100028628);
	create_insn	(x=0X710002862C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028630);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028634);
	op_stkvar	(x,	1);
	create_insn	(0X7100028640);
	create_insn	(x=0X7100028644);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028648);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002864C);
	op_stkvar	(x,	1);
	create_insn	(0X7100028658);
	create_insn	(x=0X710002865C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002866C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028678);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100028684);
	create_insn	(x=0X7100028688);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002868C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028690);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028694);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028698);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002869C);
	op_stkvar	(x,	1);
	create_insn	(0X71000286B4);
	create_insn	(x=0X71000286EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002870C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028710);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028714);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028720);
	op_plain_offset	(x,	1,	0X71000BD420);
	op_plain_offset	(x,	129,	0X71000BD420);
	create_insn	(x=0X7100028738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002873C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028740);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002874C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028768);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028778);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002877C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028784);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002878C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028794);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000287DC);
	op_hex		(x,	1);
	create_insn	(x=0X71000287E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000287E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000287E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000287EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000287F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000287F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000287F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000287FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028804);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028808);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028818);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028828);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002883C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002884C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028854);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028860);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028878);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028894);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002889C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000288A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000288B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000288C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000288CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000288DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000288E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000288F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028908);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028924);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002892C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028938);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028948);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028950);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002895C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002896C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028980);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028990);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028998);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000289A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000289B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000289BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000289C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000289D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000289E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000289EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000289FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A3C);
	op_stkvar	(x,	1);
	create_insn	(0X7100028A44);
	create_insn	(x=0X7100028A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028A60);
	op_stkvar	(x,	1);
	create_insn	(0X7100028A6C);
	create_insn	(0X7100028A74);
	create_insn	(0X7100028A7C);
	create_insn	(0X7100028A94);
	create_insn	(0X7100028AA0);
	create_insn	(0X7100028AA8);
	create_insn	(0X7100028AB0);
	create_insn	(0X7100028AB8);
	create_insn	(0X7100028AC0);
	create_insn	(0X7100028AC8);
	create_insn	(0X7100028AD0);
	create_insn	(0X7100028AD8);
	create_insn	(0X7100028AE0);
	create_insn	(0X7100028AE8);
	create_insn	(0X7100028AF0);
	create_insn	(0X7100028AF8);
	create_insn	(0X7100028B00);
	create_insn	(0X7100028B08);
	create_insn	(0X7100028B10);
	create_insn	(0X7100028B18);
	create_insn	(0X7100028B20);
	create_insn	(0X7100028B28);
	create_insn	(0X7100028B30);
	create_insn	(0X7100028B38);
	create_insn	(0X7100028B40);
	create_insn	(0X7100028B48);
	create_insn	(0X7100028B50);
	create_insn	(0X7100028B58);
	create_insn	(0X7100028B60);
	create_insn	(0X7100028B68);
	create_insn	(0X7100028B70);
	create_insn	(0X7100028B78);
	create_insn	(0X7100028B80);
	create_insn	(0X7100028B88);
	create_insn	(x=0X7100028BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028BB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100028BE4);
	create_qword	(0X7100028BE8);
	create_insn	(0X7100028BF0);
	create_insn	(x=0X7100028BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C0C);
	op_stkvar	(x,	1);
	create_insn	(0X7100028C20);
	create_insn	(x=0X7100028C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028C6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028C70);
	op_plain_offset	(x,	1,	0X71000BD420);
	op_plain_offset	(x,	129,	0X71000BD420);
	create_insn	(x=0X7100028C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028CA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028CA8);
	op_stkvar	(x,	1);
	create_insn	(0X7100028CB4);
	create_insn	(x=0X7100028CB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028CC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028CCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028CE4);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_4(void) {
        auto x;
#define id x

	create_insn	(x=0X7100028CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028D98);
	op_stkvar	(x,	1);
	create_insn	(0X7100028DA4);
	create_insn	(x=0X7100028DA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028DB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028DC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100028DD0);
	create_insn	(0X7100028DD4);
	set_name	(0X7100028DD4,	"nullsub_55");
	create_insn	(x=0X7100028DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028DFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028E04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E30);
	op_stkvar	(x,	1);
	create_insn	(0X7100028E38);
	create_insn	(x=0X7100028E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028E54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028E58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028E80);
	op_stkvar	(x,	1);
	create_insn	(0X7100028E8C);
	create_insn	(x=0X7100028E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028F30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100028F48);
	op_stkvar	(x,	1);
	create_insn	(0X7100028F60);
	create_insn	(0X7100028F88);
	create_insn	(x=0X7100028F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028FCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100028FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029008);
	op_stkvar	(x,	1);
	set_cmt	(0X710002900C,	"dst",	0);
	set_cmt	(0X7100029010,	"src",	0);
	set_cmt	(0X7100029018,	"size",	0);
	create_insn	(x=0X7100029050);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029054);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029058);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029078);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029090);
	op_stkvar	(x,	1);
	set_cmt	(0X7100029094,	"dst",	0);
	set_cmt	(0X7100029098,	"src",	0);
	set_cmt	(0X71000290A0,	"size",	0);
	create_insn	(0X71000290CC);
	create_insn	(x=0X71000290F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000290F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000290F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029118);
	op_stkvar	(x,	1);
	create_insn	(0X7100029144);
	create_insn	(x=0X7100029148);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029188);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002918C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029190);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029194);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002919C);
	op_stkvar	(x,	1);
	create_insn	(0X71000291A8);
	create_insn	(x=0X71000291B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000291B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000291BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000291C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000291C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000291D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000291E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000291E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000291F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000291FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029204);
	op_stkvar	(x,	1);
	create_insn	(0X7100029210);
	create_insn	(0X7100029218);
	create_insn	(x=0X710002921C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029220);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029228);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029234);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029240);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029248);
	op_stkvar	(x,	1);
	create_insn	(0X7100029250);
	create_insn	(x=0X7100029254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002925C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029260);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029268);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029278);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002927C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002928C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002929C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000292A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000292B0);
	create_insn	(x=0X71000292B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000292C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000292D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000292DC);
	create_insn	(x=0X71000292E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000292F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000292F4);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X71000292F8);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X71000292FC);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029300);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029304);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029308);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002930C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029310);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029314);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029318);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002931C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029320);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029324);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029328);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002932C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029330);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029334);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029338);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002933C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029340);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029344);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X7100029348);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002934C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(0X7100029354);
	make_array	(0X710002935C,	0X4);
	create_insn	(0X7100029360);
	create_insn	(x=0X7100029364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029368);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002936C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029370);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029374);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029384);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002938C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000293FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029404);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002940C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029418);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029420);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029428);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029438);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029444);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029458);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029460);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029478);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029480);
	op_stkvar	(x,	1);
	create_insn	(0X7100029488);
	create_insn	(x=0X710002948C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029490);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029494);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029498);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002949C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000294A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029540);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002954C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029560);
	op_stkvar	(x,	1);
	create_insn	(0X7100029588);
	create_insn	(x=0X7100029590);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029594);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000295B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000295B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000295D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000295DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000295E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000295FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029618);
	op_stkvar	(x,	1);
	set_cmt	(0X710002961C,	"dst",	0);
	set_cmt	(0X7100029620,	"src",	0);
	set_cmt	(0X7100029628,	"size",	0);
	create_insn	(x=0X7100029644);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029648);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029668);
	op_stkvar	(x,	1);
	set_cmt	(0X710002968C,	"src",	0);
	set_cmt	(0X7100029694,	"dst",	0);
	create_insn	(x=0X7100029698);
	op_stkvar	(x,	1);
	set_cmt	(0X710002969C,	"size",	0);
	create_insn	(x=0X71000296D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029704);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029708);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002970C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029710);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029718);
	op_stkvar	(x,	1);
	create_insn	(0X7100029724);
	create_insn	(x=0X7100029728);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002972C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029730);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029748);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029760);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029764);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002977C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029780);
	op_stkvar	(x,	1);
	create_insn	(0X710002978C);
	create_insn	(x=0X7100029790);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029794);
	op_stkvar	(x,	1);
	create_insn	(0X71000297A0);
	create_insn	(x=0X71000297A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000297A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000297AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000297C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000297D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000297D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000297E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000297E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000297FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029800);
	op_stkvar	(x,	1);
	create_insn	(0X710002980C);
	create_insn	(x=0X7100029810);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029814);
	op_stkvar	(x,	1);
	create_insn	(0X7100029820);
	create_insn	(x=0X7100029824);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002982C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002983C);
	op_hex		(x,	1);
	create_insn	(x=0X7100029858);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029864);
	op_hex		(x,	1);
	create_insn	(x=0X710002986C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002987C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029880);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002988C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029894);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002989C);
	op_stkvar	(x,	1);
	create_insn	(0X71000298A8);
	create_insn	(x=0X71000298AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000298C0);
	create_insn	(x=0X71000298C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298CC);
	op_stkvar	(x,	1);
	create_insn	(0X71000298D8);
	create_insn	(x=0X71000298DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000298F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002997C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002999C);
	op_stkvar	(x,	1);
	create_insn	(0X71000299C4);
	create_insn	(0X71000299EC);
	create_insn	(x=0X71000299F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000299FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029A6C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100029A70,	"dst",	0);
	set_cmt	(0X7100029A74,	"src",	0);
	set_cmt	(0X7100029A7C,	"size",	0);
	create_insn	(x=0X7100029AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029AF4);
	op_stkvar	(x,	1);
	set_cmt	(0X7100029AF8,	"dst",	0);
	set_cmt	(0X7100029AFC,	"src",	0);
	set_cmt	(0X7100029B04,	"size",	0);
	create_insn	(0X7100029B30);
	create_insn	(x=0X7100029B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029B7C);
	op_stkvar	(x,	1);
	create_insn	(0X7100029BA8);
	create_insn	(x=0X7100029BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C08);
	op_stkvar	(x,	1);
	create_insn	(0X7100029C14);
	create_insn	(x=0X7100029C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C30);
	op_hex		(x,	1);
	create_insn	(x=0X7100029C50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029C5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029C64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C84);
	op_stkvar	(x,	1);
	create_insn	(0X7100029C90);
	create_insn	(x=0X7100029C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029C9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100029CA8);
	create_insn	(x=0X7100029CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029CB4);
	op_stkvar	(x,	1);
	create_insn	(0X7100029CC0);
	create_insn	(x=0X7100029CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029D78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029D84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029D98);
	op_stkvar	(x,	1);
	create_insn	(0X7100029DC0);
	create_insn	(x=0X7100029DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029E08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029E50);
	op_stkvar	(x,	1);
	set_cmt	(0X7100029E54,	"dst",	0);
	set_cmt	(0X7100029E58,	"src",	0);
	set_cmt	(0X7100029E60,	"size",	0);
	create_insn	(x=0X7100029E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029EA0);
	op_stkvar	(x,	1);
	set_cmt	(0X7100029EC4,	"src",	0);
	set_cmt	(0X7100029ECC,	"dst",	0);
	create_insn	(x=0X7100029ED0);
	op_stkvar	(x,	1);
	set_cmt	(0X7100029ED4,	"size",	0);
	create_insn	(x=0X7100029F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F50);
	op_stkvar	(x,	1);
	create_insn	(0X7100029F5C);
	create_insn	(x=0X7100029F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F70);
	op_hex		(x,	1);
	create_insn	(x=0X7100029F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029F8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029F98);
	op_hex		(x,	1);
	create_insn	(x=0X7100029F9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029FB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100029FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029FC4);
	op_stkvar	(x,	1);
	create_insn	(0X7100029FD0);
	create_insn	(x=0X7100029FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029FD8);
	op_stkvar	(x,	1);
	create_insn	(0X7100029FE4);
	create_insn	(x=0X7100029FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100029FEC);
	op_stkvar	(x,	1);
	create_insn	(0X7100029FF8);
	create_insn	(x=0X7100029FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A000);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A00C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A010);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A094);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A0B0);
	op_stkvar	(x,	1);
	create_insn	(0X710002A0C8);
	create_insn	(0X710002A0F0);
	create_insn	(x=0X710002A0FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A100);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A10C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A110);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A128);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A130);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A134);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A154);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A170);
	op_stkvar	(x,	1);
	set_cmt	(0X710002A174,	"dst",	0);
	set_cmt	(0X710002A178,	"src",	0);
	set_cmt	(0X710002A180,	"size",	0);
	create_insn	(x=0X710002A1B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A1C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A1E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A1F8);
	op_stkvar	(x,	1);
	set_cmt	(0X710002A1FC,	"dst",	0);
	set_cmt	(0X710002A200,	"src",	0);
	set_cmt	(0X710002A208,	"size",	0);
	create_insn	(0X710002A234);
	create_insn	(x=0X710002A258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A25C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A260);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A280);
	op_stkvar	(x,	1);
	create_insn	(0X710002A2AC);
	create_insn	(x=0X710002A2B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A300);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A304);
	op_stkvar	(x,	1);
	create_insn	(0X710002A310);
	create_insn	(x=0X710002A314);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A31C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A324);
	op_hex		(x,	1);
	create_insn	(x=0X710002A334);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A338);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A344);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A350);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A354);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A358);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A36C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A370);
	op_stkvar	(x,	1);
	create_insn	(0X710002A37C);
	create_insn	(x=0X710002A380);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A384);
	op_stkvar	(x,	1);
	create_insn	(0X710002A390);
	create_insn	(x=0X710002A394);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A398);
	op_stkvar	(x,	1);
	create_insn	(0X710002A3A4);
	create_insn	(x=0X710002A3A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A3AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A3B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A3B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A3BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A45C);
	op_stkvar	(x,	1);
	create_insn	(0X710002A474);
	create_insn	(0X710002A49C);
	create_insn	(x=0X710002A4A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A4AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A4B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A4BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A4D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A4DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A4E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A51C);
	op_stkvar	(x,	1);
	set_cmt	(0X710002A520,	"dst",	0);
	set_cmt	(0X710002A524,	"src",	0);
	set_cmt	(0X710002A52C,	"size",	0);
	create_insn	(x=0X710002A564);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A56C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A58C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A5A4);
	op_stkvar	(x,	1);
	set_cmt	(0X710002A5A8,	"dst",	0);
	set_cmt	(0X710002A5AC,	"src",	0);
	set_cmt	(0X710002A5B4,	"size",	0);
	create_insn	(0X710002A5E0);
	create_insn	(x=0X710002A604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A60C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A62C);
	op_stkvar	(x,	1);
	create_insn	(0X710002A658);
	create_insn	(x=0X710002A65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A69C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6B0);
	op_stkvar	(x,	1);
	create_insn	(0X710002A6BC);
	create_insn	(x=0X710002A6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6D0);
	op_hex		(x,	1);
	create_insn	(x=0X710002A6E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A6FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A708);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A70C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A710);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A714);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A724);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A728);
	op_stkvar	(x,	1);
	create_insn	(0X710002A734);
	create_insn	(x=0X710002A738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A73C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A74C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A760);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A768);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A77C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A78C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A790);
	op_stkvar	(x,	1);
	create_insn	(0X710002A798);
	create_insn	(x=0X710002A79C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A7A0);
	op_stkvar	(x,	1);
	create_insn	(0X710002A7A8);
	create_insn	(x=0X710002A7AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A7C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A7C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A7C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A7EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A7F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A800);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A804);
	op_stkvar	(x,	1);
	create_insn	(0X710002A810);
	create_insn	(x=0X710002A818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A834);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A83C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A844);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A848);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A864);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A868);
	op_stkvar	(x,	1);
	create_insn	(0X710002A874);
	create_insn	(x=0X710002A878);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A888);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A894);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A8A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A8A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A8C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A8D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A8E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A8E8);
	op_stkvar	(x,	1);
	create_insn	(0X710002A8F0);
	create_insn	(x=0X710002A8F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A8F8);
	op_stkvar	(x,	1);
	create_insn	(0X710002A900);
	create_insn	(x=0X710002A904);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A90C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A924);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A934);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A94C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A950);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002A958);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A95C);
	op_stkvar	(x,	1);
	create_insn	(0X710002A968);
	create_insn	(x=0X710002A96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A970);
	op_stkvar	(x,	1);
	make_array	(0X710002A97C,	0X4);
	create_insn	(0X710002A980);
	create_insn	(x=0X710002A984);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A98C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A990);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A994);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002A998);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AA1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002AA2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AA34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AA68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AA80);
	op_stkvar	(x,	1);
	create_insn	(0X710002AA98);
	create_insn	(x=0X710002AAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AAA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AAB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AAB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AB18);
	op_stkvar	(x,	1);
	set_cmt	(0X710002AB1C,	"dst",	0);
	set_cmt	(0X710002AB20,	"src",	0);
	set_cmt	(0X710002AB28,	"size",	0);
	create_insn	(x=0X710002AB60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AB88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ABA0);
	op_stkvar	(x,	1);
	set_cmt	(0X710002ABA4,	"dst",	0);
	set_cmt	(0X710002ABA8,	"src",	0);
	set_cmt	(0X710002ABB0,	"size",	0);
	create_insn	(0X710002ABDC);
	create_insn	(x=0X710002AC00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AC04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AC08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AC28);
	op_stkvar	(x,	1);
	create_insn	(0X710002AC54);
	create_insn	(x=0X710002AC58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AC80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AC88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACC8);
	op_stkvar	(x,	1);
	create_insn	(0X710002ACD4);
	create_insn	(x=0X710002ACD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ACE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002AD1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002AD28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002AD40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD48);
	op_stkvar	(x,	1);
	create_insn	(0X710002AD54);
	create_insn	(x=0X710002AD58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD60);
	op_stkvar	(x,	1);
	create_insn	(0X710002AD6C);
	create_insn	(x=0X710002AD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD78);
	op_stkvar	(x,	1);
	make_array	(0X710002AD84,	0XC);
	create_insn	(0X710002AD90);
	create_insn	(x=0X710002AD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AD9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ADA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ADA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ADA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AE28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002AE38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002AE50);
	op_stkvar	(x,	1);
	create_insn	(0X710002AE84);
	create_insn	(0X710002AEAC);
	create_insn	(x=0X710002AEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AEBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AEC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AEE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AEEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AEF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AEF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AF10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AF2C);
	op_stkvar	(x,	1);
	set_cmt	(0X710002AF30,	"dst",	0);
	set_cmt	(0X710002AF34,	"src",	0);
	set_cmt	(0X710002AF3C,	"size",	0);
	create_insn	(x=0X710002AF74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AF78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AF7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AF9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002AFB4);
	op_stkvar	(x,	1);
	set_cmt	(0X710002AFB8,	"dst",	0);
	set_cmt	(0X710002AFBC,	"src",	0);
	set_cmt	(0X710002AFC4,	"size",	0);
	create_insn	(0X710002AFF0);
	create_insn	(x=0X710002B014);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B018);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B01C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B03C);
	op_stkvar	(x,	1);
	create_insn	(0X710002B068);
	create_insn	(x=0X710002B06C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B070);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0C8);
	op_stkvar	(x,	1);
	create_insn	(0X710002B0D4);
	create_insn	(x=0X710002B0D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B0FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B110);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B114);
	op_stkvar	(x,	1);
	create_insn	(0X710002B120);
	create_insn	(x=0X710002B124);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B128);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B130);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B134);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B138);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B13C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B14C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002B15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B164);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B16C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B170);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B18C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B190);
	op_stkvar	(x,	1);
	create_insn	(0X710002B19C);
	create_insn	(x=0X710002B1A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B1A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B1AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B1C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B1C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B1D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B1D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B1E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B1E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B1F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B1F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B200);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B204);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B210);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B214);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B21C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B220);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710002B22C);
	create_insn	(x=0X710002B230);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B234);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B238);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B250);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B254);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B25C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B26C);
	op_stkvar	(x,	1);
	create_insn	(0X710002B278);
	create_insn	(x=0X710002B27C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B280);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B284);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B28C);
	op_hex		(x,	1);
	create_insn	(x=0X710002B2B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B2C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B2D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B2E4);
	op_stkvar	(x,	1);
	create_insn	(0X710002B2F0);
	create_insn	(x=0X710002B2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B300);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B304);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B38C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B39C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B3E0);
	op_stkvar	(x,	1);
	create_insn	(0X710002B3F8);
	create_insn	(x=0X710002B404);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B414);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B430);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B43C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B440);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B45C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B478);
	op_stkvar	(x,	1);
	set_cmt	(0X710002B47C,	"dst",	0);
	set_cmt	(0X710002B480,	"src",	0);
	set_cmt	(0X710002B488,	"size",	0);
	create_insn	(x=0X710002B4BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B4C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B4FC);
	op_stkvar	(x,	1);
	set_cmt	(0X710002B500,	"dst",	0);
	set_cmt	(0X710002B504,	"src",	0);
	set_cmt	(0X710002B50C,	"size",	0);
	create_insn	(0X710002B538);
	create_insn	(x=0X710002B55C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B560);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B564);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B584);
	op_stkvar	(x,	1);
	create_insn	(0X710002B5B0);
	create_insn	(x=0X710002B5B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B5DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B610);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B614);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B620);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B624);
	op_stkvar	(x,	1);
	create_insn	(0X710002B630);
	create_insn	(x=0X710002B634);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B63C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B658);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B67C);
	op_stkvar	(x,	1);
	create_insn	(0X710002B688);
	create_insn	(0X710002B690);
	create_insn	(0X710002B698);
	create_insn	(x=0X710002B69C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B6A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B6BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B6CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B72C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B730);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B734);
	op_stkvar	(x,	1);
	create_insn	(0X710002B73C);
	create_insn	(x=0X710002B740);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B744);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B750);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B764);
	op_stkvar	(x,	1);
	create_insn	(0X710002B76C);
	create_insn	(x=0X710002B770);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B784);
	op_stkvar	(x,	1);
	create_insn	(0X710002B78C);
	make_array	(0X710002B794,	0XC);
	create_insn	(0X710002B7A0);
	create_insn	(x=0X710002B7A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B7A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B7AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B7BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B7CC);
	op_plain_offset	(x,	1,	0X71000BD420);
	op_plain_offset	(x,	129,	0X71000BD420);
	create_insn	(x=0X710002B7DC);
	op_hex		(x,	1);
	create_insn	(x=0X710002B7F0);
	op_stkvar	(x,	1);
	create_insn	(0X710002B814);
	create_insn	(x=0X710002B824);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B834);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B844);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B864);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B8CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B8D0);
	op_stkvar	(x,	1);
	create_insn	(0X710002B8D8);
	create_insn	(x=0X710002B8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B8F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B8FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B900);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B914);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B91C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B920);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B924);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B92C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B950);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B960);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B97C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B984);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002B9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B9EC);
	op_stkvar	(x,	1);
	create_insn	(0X710002B9F4);
	create_insn	(x=0X710002B9F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002B9FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BA04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BA10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BA20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BA28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BA38);
	op_plain_offset	(x,	1,	0X71000E7530);
	op_plain_offset	(x,	129,	0X71000E7530);
	create_insn	(x=0X710002BA4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BA5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BA7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BA84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BA88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BAA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BAC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BAC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BACC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BAD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BAEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BB0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BB14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BB18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710002BB30);
	create_insn	(0X710002BB40);
	make_array	(0X710002BB48,	0X8);
	create_insn	(0X710002BB50);
	create_insn	(x=0X710002BB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BB60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BB84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BB90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BB98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BBA4);
	op_plain_offset	(x,	1,	0X7100072A00);
	op_plain_offset	(x,	129,	0X7100072A00);
	create_insn	(x=0X710002BBA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BBAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BBB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BBB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BBBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BBCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BBDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BC54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BC88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BC90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BCA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BCB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BCB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BCC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BCCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BCDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BCE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BCF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BCF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BD1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710002BD24);
	create_insn	(x=0X710002BD50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BD54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BD98);
	op_stkvar	(x,	1);
	create_insn	(0X710002BDA0);
	create_insn	(0X710002BDAC);
	create_insn	(x=0X710002BDB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BDC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BDC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BDD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BDDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BDE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BDEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BDF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BDFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BE04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BE14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BE28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BE30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BE34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BE60);
	op_stkvar	(x,	1);
	create_insn	(0X710002BE6C);
	create_insn	(x=0X710002BE70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BE94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BE9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BEA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BEBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BEC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BECC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BED0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BED8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BEDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002BEE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BEEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BF2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BF34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BF80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BF84);
	op_stkvar	(x,	1);
	create_insn	(0X710002BF8C);
	create_insn	(x=0X710002BF94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BF98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BFC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BFD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002BFE4);
	op_stkvar	(x,	1);
	create_insn	(0X710002BFEC);
	create_insn	(0X710002BFF4);
	create_insn	(0X710002BFFC);
	create_insn	(x=0X710002C004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C00C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C020);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C024);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C028);
	op_stkvar	(x,	1);
	create_insn	(0X710002C030);
	set_cmt	(0X710002C094,	"src",	0);
	set_cmt	(0X710002C098,	"size",	0);
	set_cmt	(0X710002C09C,	"dst",	0);
	create_insn	(x=0X710002C0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C0D4);
	op_stkvar	(x,	1);
	create_insn	(0X710002C0DC);
	set_name	(0X710002C0DC,	"j_Heap_Deallocate_0");
	create_insn	(0X710002C0E0);
	create_insn	(x=0X710002C0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C0E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C0EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C0F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C0FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C138);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C150);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C19C);
	op_stkvar	(x,	1);
	create_insn	(0X710002C1A8);
	create_insn	(x=0X710002C1B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C1B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C1D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C1E8);
	op_hex		(x,	1);
	create_insn	(x=0X710002C1FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C21C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C224);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C230);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C234);
	op_stkvar	(x,	1);
	create_insn	(0X710002C23C);
	create_insn	(x=0X710002C240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C270);
	op_hex		(x,	1);
	create_insn	(x=0X710002C29C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C2D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C2D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C2DC);
	op_stkvar	(x,	1);
	create_insn	(0X710002C2EC);
	create_insn	(0X710002C2F0);
	create_insn	(0X710002C4E4);
	make_array	(0X710002C4FC,	0X4);
	create_insn	(0X710002C500);
	create_insn	(x=0X710002C504);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C50C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C514);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002C518,	"clearMode",	0);
	set_cmt	(0X710002C51C,	"event",	0);
	create_insn	(x=0X710002C51C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002C520,	"type",	0);
	create_insn	(x=0X710002C52C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C534);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C538);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C53C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C540);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C548);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C554);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C55C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C584);
	op_plain_offset	(x,	1,	0X71000BD420);
	op_plain_offset	(x,	129,	0X71000BD420);
	create_insn	(x=0X710002C588);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C590);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C594);
	op_plain_offset	(x,	1,	0X71000BD420);
	op_plain_offset	(x,	129,	0X71000BD420);
	create_insn	(x=0X710002C598);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C5A4);
	op_plain_offset	(x,	1,	0X71000BD420);
	op_plain_offset	(x,	129,	0X71000BD420);
	create_insn	(x=0X710002C5A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C5B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C5BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C5C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C5D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C5DC);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C5F0);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C5F4);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C5F8);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C5FC);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C600);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C604);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C608);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C60C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C610);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C614);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C618);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C61C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C620);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C624);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C628);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C62C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C634);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C638);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C63C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C644);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C64C);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C650);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C654);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C65C);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C660);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C664);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C66C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C670);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C678);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C67C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C680);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C688);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C690);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C694);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C698);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C6A0);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C6A8);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C6AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C6B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C6B8);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C6BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C6C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002C6C4);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C6D0);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C6E8);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C6F4);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C6F8);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C700);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C70C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C710);
	op_plain_offset	(x,	1,	0X71000BF418);
	op_plain_offset	(x,	129,	0X71000BF418);
	create_insn	(x=0X710002C714);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C718);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C71C);
	op_plain_offset	(x,	1,	0X71000BF418);
	op_plain_offset	(x,	129,	0X71000BF418);
	create_insn	(x=0X710002C720);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C724);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C728);
	op_plain_offset	(x,	1,	0X71000BF418);
	op_plain_offset	(x,	129,	0X71000BF418);
	create_insn	(x=0X710002C72C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C730);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C734);
	op_plain_offset	(x,	1,	0X71000BF418);
	op_plain_offset	(x,	129,	0X71000BF418);
	create_insn	(x=0X710002C738);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C73C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C740);
	op_plain_offset	(x,	1,	0X71000BF418);
	op_plain_offset	(x,	129,	0X71000BF418);
	create_insn	(x=0X710002C744);
	op_plain_offset	(x,	1,	0X71000BF418);
	op_plain_offset	(x,	129,	0X71000BF418);
	create_insn	(x=0X710002C748);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C74C);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C750);
	op_plain_offset	(x,	1,	0X71000BF418);
	op_plain_offset	(x,	129,	0X71000BF418);
	create_insn	(x=0X710002C754);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C758);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C760);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C764);
	op_plain_offset	(x,	1,	0X71000BF058);
	op_plain_offset	(x,	129,	0X71000BF058);
	create_insn	(x=0X710002C768);
	op_plain_offset	(x,	1,	0X71000BDFF0);
	op_plain_offset	(x,	129,	0X71000BDFF0);
	create_insn	(x=0X710002C76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C770);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C774);
	op_stkvar	(x,	1);
	create_insn	(0X710002C780);
	create_insn	(0X710002C788);
	create_insn	(x=0X710002C7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C7F0);
	op_stkvar	(x,	1);
	create_insn	(0X710002C7F8);
	create_insn	(x=0X710002C7FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C804);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C814);
	op_stkvar	(x,	1);
	create_insn	(0X710002C820);
	create_insn	(x=0X710002C824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C834);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C840);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C87C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C880);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C890);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002C8A0);
	op_stkvar	(x,	1);
	create_insn	(0X710002C9A4);
	create_insn	(0X710002C9AC);
	create_insn	(0X710002C9B4);
	create_insn	(0X710002C9BC);
	create_insn	(0X710002C9C4);
	create_insn	(0X710002C9CC);
	create_insn	(0X710002C9D4);
	create_insn	(0X710002C9DC);
	create_insn	(0X710002C9E4);
	create_insn	(0X710002C9EC);
	create_insn	(0X710002C9F4);
	create_insn	(0X710002C9FC);
	create_insn	(0X710002CA04);
	create_insn	(0X710002CA0C);
	create_insn	(0X710002CA14);
	create_insn	(0X710002CA1C);
	create_insn	(0X710002CA24);
	create_insn	(0X710002CA2C);
	create_insn	(0X710002CA34);
	create_insn	(0X710002CA3C);
	create_insn	(0X710002CA44);
	create_insn	(0X710002CA4C);
	create_insn	(0X710002CA54);
	create_insn	(0X710002CA5C);
	create_insn	(0X710002CA64);
	create_insn	(0X710002CA6C);
	create_insn	(0X710002CA74);
	create_insn	(0X710002CA7C);
	create_insn	(0X710002CA84);
	create_insn	(0X710002CA8C);
	create_insn	(0X710002CAA4);
	create_insn	(0X710002CAB4);
	create_insn	(x=0X710002CAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB68);
	op_hex		(x,	1);
	create_insn	(x=0X710002CB6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB80);
	op_hex		(x,	1);
	create_insn	(x=0X710002CB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CB90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CBA0);
	op_stkvar	(x,	1);
	set_cmt	(0X710002CBDC,	"this",	0);
	create_insn	(0X710002CBDC);
	create_insn	(x=0X710002CC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC3C);
	op_stkvar	(x,	1);
	create_insn	(0X710002CC48);
	create_insn	(x=0X710002CC4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CC9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CCFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CDF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CE04);
	op_stkvar	(x,	1);
	create_insn	(0X710002CE18);
	create_insn	(x=0X710002CE20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CE28);
	op_stkvar	(x,	1);
	set_cmt	(0X710002CE2C,	"dst",	0);
	set_cmt	(0X710002CE30,	"size",	0);
	set_cmt	(0X710002CE38,	"src",	0);
	create_insn	(x=0X710002CE3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CE40);
	op_stkvar	(x,	1);
	set_cmt	(0X710002CE58,	"dst",	0);
	create_insn	(x=0X710002CE58);
	op_stkvar	(x,	1);
	set_cmt	(0X710002CE5C,	"src",	0);
	create_insn	(x=0X710002CE64);
	op_stkvar	(x,	1);
	set_cmt	(0X710002CE68,	"size",	0);
	create_insn	(x=0X710002CE74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CE84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CE88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CEB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CEBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CEC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CEC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CEC8);
	op_stkvar	(x,	1);
	create_insn	(0X710002CED4);
	create_insn	(x=0X710002CED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CEDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CEE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002CF78);
	op_stkvar	(x,	1);
	create_insn	(0X710002CF80);
	create_insn	(0X710002CF98);
	create_insn	(0X710002CFF0);
	create_insn	(0X710002CFFC);
	make_array	(0X710002D014,	0XC);
	create_insn	(0X710002D020);
	create_insn	(0X710002D050);
	create_insn	(0X710002D0B0);
	make_array	(0X710002D0BC,	0X4);
	create_insn	(0X710002D0C0);
	create_insn	(0X710002D0E0);
	create_insn	(0X710002D0E8);
	create_insn	(0X710002D104);
	create_insn	(0X710002D148);
	create_insn	(0X710002D150);
	make_array	(0X710002D184,	0XC);
	create_insn	(0X710002D190);
	create_insn	(x=0X710002D194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D19C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D1F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002D204,	"jumptable 000000710002D2E0 case 5",	1);
	create_insn	(0X710002D204);
	set_cmt	(0X710002D210,	"jumptable 000000710002D29C case 4",	1);
	create_insn	(x=0X710002D210);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D22C,	"jumptable 000000710002D29C default case, cases 6-9",	1);
	set_name	(0X710002D22C,	"def_710002D29C");
	create_insn	(x=0X710002D244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D254);
	op_stkvar	(x,	1);
	create_insn	(0X710002D26C);
	set_cmt	(0X710002D284,	"switch 8 cases",	0);
	create_insn	(x=0X710002D290);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002D29C,	"switch jump",	0);
	set_cmt	(0X710002D2A0,	"jumptable 000000710002D29C case 3",	1);
	create_insn	(x=0X710002D2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D2A8);
	op_stkvar	(x,	1);
	create_insn	(0X710002D2BC);
	set_cmt	(0X710002D2C0,	"switch 4 cases",	0);
	create_insn	(x=0X710002D2D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002D2D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002D2E0,	"switch jump",	0);
	set_cmt	(0X710002D2E4,	"jumptable 000000710002D2E0 case 4",	1);
	create_insn	(0X710002D2E4);
	set_cmt	(0X710002D2F0,	"jumptable 000000710002D29C case 5",	1);
	create_insn	(x=0X710002D2F0);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D310,	"jumptable 000000710002D29C case 10",	1);
	create_insn	(x=0X710002D310);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D314);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D320);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D330);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D334);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D340);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D34C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D354);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D360);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D364);
	op_stkvar	(x,	1);
	create_insn	(0X710002D36C);
	set_cmt	(0X710002D380,	"jumptable 000000710002D2E0 case 6",	1);
	create_insn	(0X710002D380);
	set_cmt	(0X710002D390,	"jumptable 000000710002D2E0 case 7",	1);
	create_insn	(0X710002D390);
	create_insn	(x=0X710002D3A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D3AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D3B8);
	op_stkvar	(x,	1);
	create_insn	(0X710002D3C4);
	create_insn	(x=0X710002D3C8);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D3D0,	"jumptable 000000710002D2E0 default case",	1);
	set_name	(0X710002D3D0,	"def_710002D2E0");
	create_insn	(x=0X710002D3D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D3D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D3DC);
	op_hex		(x,	1);
	create_insn	(x=0X710002D3E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D3E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D3E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D3EC);
	op_stkvar	(x,	1);
	make_array	(0X710002D3F8,	0X8);
	create_insn	(0X710002D400);
	create_insn	(x=0X710002D404);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D410);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D414);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D428);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D42C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D430);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D434);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D444);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D448);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D45C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002D460);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D464);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D470);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D484);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D494);
	op_stkvar	(x,	1);
	create_insn	(0X710002D4BC);
	create_insn	(0X710002D4FC);
	create_insn	(0X710002D51C);
	create_insn	(x=0X710002D534);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D53C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D540);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D548);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D54C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D560);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D570);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D574);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D590);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D5B8);
	op_hex		(x,	1);
	create_insn	(x=0X710002D5E8);
	op_stkvar	(x,	1);
	create_insn	(0X710002D60C);
	create_insn	(x=0X710002D614);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D624);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D628,	"switch 8 cases",	0);
	create_insn	(x=0X710002D634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002D640,	"switch jump",	0);
	set_cmt	(0X710002D644,	"jumptable 000000710002D640 cases 1,6-8",	1);
	create_insn	(0X710002D644);
	set_cmt	(0X710002D658,	"jumptable 000000710002D640 case 3",	1);
	create_insn	(x=0X710002D658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D660);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D670,	"jumptable 000000710002D640 case 4",	1);
	create_insn	(x=0X710002D670);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D690,	"jumptable 000000710002D640 case 5",	1);
	create_insn	(x=0X710002D690);
	op_stkvar	(x,	1);
	create_insn	(0X710002D6B0);
	create_insn	(x=0X710002D6B4);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D6BC,	"jumptable 000000710002D640 default case, case 2",	1);
	set_name	(0X710002D6BC,	"def_710002D640");
	create_insn	(x=0X710002D6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D6C8);
	op_hex		(x,	1);
	create_insn	(x=0X710002D6CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D6D8);
	op_stkvar	(x,	1);
	create_insn	(0X710002D6E4);
	create_qword	(0X710002D6E8);
	create_insn	(0X710002D6F0);
	create_insn	(x=0X710002D6FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D700);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D704);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D708);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D72C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D730);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D734);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D74C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710002D754);
	set_cmt	(0X710002D75C,	"jumptable 000000710002D834 case 5",	1);
	create_insn	(0X710002D75C);
	create_insn	(x=0X710002D798);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D79C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D7C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D7D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D7DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D7FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D800);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D810);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D81C,	"switch 4 cases",	0);
	create_insn	(x=0X710002D828);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002D834,	"switch jump",	0);
	set_cmt	(0X710002D838,	"jumptable 000000710002D834 case 4",	1);
	create_insn	(0X710002D838);
	set_cmt	(0X710002D844,	"jumptable 000000710002D834 case 6",	1);
	create_insn	(0X710002D844);
	set_cmt	(0X710002D850,	"jumptable 000000710002D834 case 7",	1);
	create_insn	(0X710002D850);
	set_cmt	(0X710002D858,	"jumptable 000000710002D834 default case",	1);
	set_name	(0X710002D858,	"def_710002D834");
	create_insn	(x=0X710002D85C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D860);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D864);
	op_stkvar	(x,	1);
	create_insn	(0X710002D870);
	create_insn	(x=0X710002D874);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D87C);
	op_stkvar	(x,	1);
	make_array	(0X710002D888,	0X8);
	create_insn	(x=0X710002D890);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D894);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D8F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D904);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D90C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D91C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002D92C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002D934,	"jumptable 000000710002DA78 case 10",	1);
	create_insn	(x=0X710002D934);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D938);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D93C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D944);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D954);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D958);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D960);
	op_stkvar	(x,	1);
	set_cmt	(0X710002D964,	"jumptable 000000710002DA78 default case, cases 1,6-8",	1);
	set_name	(0X710002D964,	"def_710002DA78");
	create_insn	(x=0X710002D970);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D974);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D994);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D9A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002D9B0);
	op_stkvar	(x,	1);
	create_insn	(0X710002D9E4);
	create_insn	(0X710002D9F4);
	create_insn	(0X710002DA30);
	create_insn	(x=0X710002DA48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DA5C);
	op_stkvar	(x,	1);
	set_cmt	(0X710002DA60,	"switch 11 cases",	0);
	create_insn	(x=0X710002DA68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002DA78,	"switch jump",	0);
	set_cmt	(0X710002DA7C,	"jumptable 000000710002DA78 case 2",	1);
	create_insn	(x=0X710002DA7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DA84);
	op_stkvar	(x,	1);
	set_cmt	(0X710002DA90,	"jumptable 000000710002DA78 case 3",	1);
	create_insn	(x=0X710002DA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DA9C);
	op_hex		(x,	1);
	create_insn	(x=0X710002DAAC);
	op_stkvar	(x,	1);
	set_cmt	(0X710002DAC0,	"jumptable 000000710002DA78 case 4",	1);
	create_insn	(x=0X710002DAC0);
	op_stkvar	(x,	1);
	set_cmt	(0X710002DAE0,	"jumptable 000000710002DA78 case 5",	1);
	create_insn	(x=0X710002DAE0);
	op_stkvar	(x,	1);
	set_cmt	(0X710002DB00,	"jumptable 000000710002DA78 case 9",	1);
	create_insn	(x=0X710002DB00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB48);
	op_stkvar	(x,	1);
	create_insn	(0X710002DB64);
	set_cmt	(0X710002DB68,	"jumptable 000000710002DA78 case 0",	1);
	create_insn	(x=0X710002DB6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DB7C);
	op_stkvar	(x,	1);
	create_insn	(0X710002DB84);
	create_insn	(0X710002DBE4);
	create_insn	(0X710002DC00);
	create_insn	(x=0X710002DC58);
	op_hex		(x,	1);
	create_insn	(0X710002DC84);
	create_insn	(0X710002DCAC);
	create_insn	(0X710002DCC8);
	create_insn	(0X710002DCD0);
	create_insn	(0X710002DCE0);
	create_insn	(x=0X710002DCE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DCE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DCF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DD98);
	op_stkvar	(x,	1);
	create_insn	(0X710002DDA0);
	create_insn	(x=0X710002DDA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DDAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DDC4);
	op_hex		(x,	1);
	create_insn	(x=0X710002DDEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DDF0);
	op_stkvar	(x,	1);
	create_insn	(0X710002DDF8);
	create_insn	(0X710002DDFC);
	create_insn	(0X710002DE08);
	create_insn	(0X710002DE3C);
	create_insn	(0X710002DE44);
	create_insn	(0X710002DE4C);
	create_insn	(x=0X710002DE54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DE58);
	op_stkvar	(x,	1);
	set_cmt	(0X710002DE60,	"clearMode",	0);
	set_cmt	(0X710002DE64,	"type",	0);
	create_insn	(x=0X710002DE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DE80);
	op_stkvar	(x,	1);
	create_insn	(0X710002DE88);
	create_insn	(x=0X710002DE90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DE94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DEC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DEC8);
	op_stkvar	(x,	1);
	create_insn	(0X710002DED0);
	create_insn	(x=0X710002DED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DEDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DEF0);
	op_hex		(x,	1);
	create_insn	(x=0X710002DEF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DF00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DF08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DF0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DF2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DF30);
	op_stkvar	(x,	1);
	create_insn	(0X710002DF38);
	create_dword	(0X710002DF3C);
	create_insn	(0X710002DF40);
	make_array	(0X710002DF58,	0X8);
	create_insn	(x=0X710002DF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DF88);
	op_stkvar	(x,	1);
	create_insn	(0X710002DF90);
	create_insn	(0X710002DF94);
	create_insn	(x=0X710002DF98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710002DFA4);
	create_insn	(x=0X710002DFA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002DFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DFBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DFE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DFE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DFF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002DFF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E004);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E024);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E030);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E034);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E044);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E064);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E068);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E070);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E074);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E084);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E0A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E0B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E0B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E0C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E0E8);
	op_stkvar	(x,	1);
	create_insn	(0X710002E0F0);
	create_insn	(x=0X710002E0F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E0FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E100);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E10C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E11C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E140);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E150);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E164);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E16C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E170);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E174);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E180);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E190);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E1B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E200);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E204);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E208);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E20C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E210);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E214);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E218);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E21C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E224);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E230);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E234);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E26C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E270);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E2A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E2AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E2B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E2D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E2E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E300);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E310);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E324);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E32C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E334);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E348);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E350);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E358);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E36C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E37C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E384);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E394);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E398);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E3A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E3A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E3BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E3C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E3D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E3D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E3E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E3E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E3FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E400);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E414);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E418);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E420);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E428);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E43C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E448);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E454);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E458);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E460);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E480);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E488);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E494);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E498);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E4A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E4A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E4BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E4C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E4C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E4D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E4D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E4E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E4E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E4FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E500);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E514);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E518);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E520);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E53C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E544);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E548);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E54C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E550);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E554);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E560);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E564);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E5F0);
	op_stkvar	(x,	1);
	create_insn	(0X710002E5F8);
	create_insn	(x=0X710002E5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E600);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E60C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E614);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E654);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E670);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E694);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E69C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E6A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E6AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E6B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E6C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E6C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E6D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E6F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710002E704);
	create_insn	(x=0X710002E708);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E72C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E740);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E74C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E75C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E774);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E7B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E7B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E7CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E7DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E7F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E7F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E81C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E84C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E850);
	op_stkvar	(x,	1);
	create_insn	(0X710002E85C);
	create_insn	(x=0X710002E864);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E870);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E87C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E884);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E888);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E88C);
	op_stkvar	(x,	1);
	create_insn	(0X710002E898);
	create_insn	(x=0X710002E89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E8A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E8A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E8A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E8AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E8B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E91C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E934);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E944);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E954);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E95C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E964);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E978);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E980);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E984);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E994);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E9A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E9AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002E9C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002E9D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EA84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EAB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EAC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EAE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EAEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EB34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EB70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EB90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EB98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EBB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EBE8);
	op_stkvar	(x,	1);
	create_insn	(0X710002EBF4);
	create_insn	(0X710002EBF8);
	create_insn	(x=0X710002EBFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EC00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EC20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EC38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EC40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EC44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EC4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EC68);
	op_stkvar	(x,	1);
	create_insn	(0X710002EC74);
	create_insn	(x=0X710002EC78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EC88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EC94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710002ECA0);
	create_insn	(x=0X710002ECA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ECA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ECAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ECC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ECC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002ECD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002ECE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ECE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002ECEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002ED10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ED14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ED18);
	op_stkvar	(x,	1);
	create_insn	(0X710002ED24);
	create_insn	(x=0X710002ED28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002ED38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002ED44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002ED50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002ED54);
	op_stkvar	(x,	1);
	create_insn	(0X710002EDC0);
	create_insn	(x=0X710002EE08);
	op_hex		(x,	1);
	create_insn	(x=0X710002EE1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EE3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EE48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EE4C);
	op_stkvar	(x,	1);
	create_insn	(0X710002EE54);
	create_insn	(x=0X710002EE58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EE5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EE64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EE68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EE70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EE74);
	op_hex		(x,	1);
	create_insn	(x=0X710002EE78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EE98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EEA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EEA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EEC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EEC4);
	op_stkvar	(x,	1);
	create_insn	(0X710002EED0);
	create_insn	(x=0X710002EED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EEE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EEF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EEF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EEF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EEFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EF04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EF08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EF10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EF14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EF28);
	op_stkvar	(x,	1);
	create_insn	(0X710002EF34);
	create_insn	(x=0X710002EF38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EF48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EF54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EF80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EF84);
	op_stkvar	(x,	1);
	make_array	(0X710002EF8C,	0X4);
	create_insn	(x=0X710002EF90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002EF94);
	op_stkvar	(x,	1);
	set_cmt	(0X710002EFA0,	"switch 11 cases",	0);
	create_insn	(x=0X710002EFAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EFB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002EFC0,	"switch jump",	0);
	set_cmt	(0X710002EFC4,	"jumptable 000000710002EFC0 case 0",	1);
	create_insn	(0X710002EFC4);
	create_insn	(x=0X710002EFC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002EFD4,	"jumptable 000000710002EFC0 case 1",	1);
	create_insn	(0X710002EFD4);
	create_insn	(x=0X710002EFD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002EFDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710002EFE8,	"jumptable 000000710002EFC0 case 2",	1);
	create_insn	(0X710002EFE8);
	create_insn	(x=0X710002F02C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F030);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F038,	"jumptable 000000710002EFC0 case 3",	1);
	create_insn	(x=0X710002F038);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F040);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F058);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F05C);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F064,	"jumptable 000000710002EFC0 case 4",	1);
	create_insn	(0X710002F064);
	create_insn	(x=0X710002F068);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F090);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F098,	"jumptable 000000710002EFC0 case 5",	1);
	create_insn	(0X710002F098);
	create_insn	(x=0X710002F0A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F0B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F0B4);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F0BC,	"jumptable 000000710002EFC0 case 6",	1);
	create_insn	(0X710002F0BC);
	create_insn	(x=0X710002F0C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F0D8);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F0E0,	"jumptable 000000710002EFC0 case 7",	1);
	create_insn	(0X710002F0E0);
	create_insn	(x=0X710002F0E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F0FC);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F104,	"jumptable 000000710002EFC0 case 8",	1);
	create_insn	(x=0X710002F104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F10C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F114);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F134);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F138);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F140,	"jumptable 000000710002EFC0 case 9",	1);
	create_insn	(0X710002F140);
	create_insn	(x=0X710002F158);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F174);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F178);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F180,	"jumptable 000000710002EFC0 case 10",	1);
	create_insn	(x=0X710002F180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F190);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F1B4);
	op_stkvar	(x,	1);
	create_insn	(0X710002F1BC);
	create_insn	(x=0X710002F1C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F1DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F1E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F1E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002F204);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F208);
	op_stkvar	(x,	1);
	set_cmt	(0X710002F210,	"jumptable 000000710002EFC0 default case",	1);
	create_insn	(0X710002F210);
	set_name	(0X710002F210,	"def_710002EFC0");
	create_insn	(0X710002F214);
	create_insn	(x=0X710002F218);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F21C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F230);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F234);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F250);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F254);
	op_stkvar	(x,	1);
	create_insn	(0X710002F260);
	create_insn	(x=0X710002F264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F26C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F270);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F280);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F2B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F2B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F2BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F2C0);
	op_stkvar	(x,	1);
	create_insn	(0X710002F2CC);
	create_insn	(x=0X710002F2EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F300);
	op_hex		(x,	1);
	create_insn	(x=0X710002F314);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F328);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F32C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F330);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F334);
	op_stkvar	(x,	1);
	create_insn	(0X710002F340);
	create_insn	(x=0X710002F350);
	op_stkvar	(x,	1);
	create_insn	(0X710002F364);
	create_insn	(x=0X710002F368);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F36C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F374);
	op_stkvar	(x,	1);
	create_insn	(0X710002F380);
	create_insn	(x=0X710002F394);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F3B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F3C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F3C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F3CC);
	op_stkvar	(x,	1);
	create_insn	(0X710002F3D8);
	create_insn	(x=0X710002F3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F3E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F3E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F3E8);
	op_stkvar	(x,	1);
	make_array	(0X710002F3F4,	0XC);
	create_insn	(0X710002F400);
	create_insn	(x=0X710002F404);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F410);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F414);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F420);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F428);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F430);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F434);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F43C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F44C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F450);
	op_stkvar	(x,	1);
	create_insn	(0X710002F45C);
	create_insn	(x=0X710002F460);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F46C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F478);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F484);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F48C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F4B8);
	op_hex		(x,	1);
	create_insn	(x=0X710002F4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F514);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F518);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F520);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F524);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F534);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F540);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F544);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F558);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F55C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F56C);
	op_stkvar	(x,	1);
	create_insn	(0X710002F57C);
	create_insn	(x=0X710002F580);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F584);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F590);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F5A0);
	op_stkvar	(x,	1);
	create_insn	(0X710002F5A8);
	create_insn	(x=0X710002F5B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F5C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F5C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F5D0);
	op_stkvar	(x,	1);
	create_insn	(0X710002F5E0);
	create_insn	(x=0X710002F5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F5E8);
	op_stkvar	(x,	1);
	create_insn	(0X710002F5F4);
	create_insn	(0X710002F5F8);
	create_insn	(x=0X710002F5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F600);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F640);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F644);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F648);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F64C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F660);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F664);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F668);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F680);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F690);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F694);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F698);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F69C);
	op_stkvar	(x,	1);
	create_insn	(0X710002F6A8);
	create_insn	(x=0X710002F6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F6B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F6B8);
	op_stkvar	(x,	1);
	create_insn	(0X710002F6C4);
	create_insn	(x=0X710002F6F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F6F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F6FC);
	op_stkvar	(x,	1);
	create_insn	(0X710002F708);
	create_insn	(x=0X710002F70C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F710);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F714);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F718);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F728);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F750);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F754);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F75C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F770);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F774);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F778);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F784);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7A0);
	op_hex		(x,	1);
	create_insn	(x=0X710002F7A4);
	op_hex		(x,	1);
	create_insn	(x=0X710002F7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7D8);
	op_stkvar	(x,	1);
	create_insn	(0X710002F7E4);
	create_insn	(x=0X710002F7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F7F4);
	op_stkvar	(x,	1);
	create_insn	(0X710002F800);
	create_insn	(x=0X710002F82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F834);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F838);
	op_stkvar	(x,	1);
	create_insn	(0X710002F844);
	create_insn	(x=0X710002F84C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F850);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F890);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F894);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F89C);
	op_stkvar	(x,	1);
	create_insn	(0X710002F8A8);
	create_insn	(x=0X710002F8B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F90C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F910);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F914);
	op_stkvar	(x,	1);
	create_insn	(0X710002F920);
	create_insn	(x=0X710002F924);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F928);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F92C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F930);
	op_stkvar	(x,	1);
	create_insn	(0X710002F93C);
	create_insn	(x=0X710002F940);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F944);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F94C);
	op_stkvar	(x,	1);
	create_insn	(0X710002F958);
	create_insn	(x=0X710002F984);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F98C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F990);
	op_stkvar	(x,	1);
	make_array	(0X710002F99C,	0X4);
	create_insn	(0X710002F9A0);
	create_insn	(x=0X710002F9A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002F9FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FA98);
	op_stkvar	(x,	1);
	create_insn	(0X710002FAA4);
	create_insn	(0X710002FAFC);
	create_insn	(x=0X710002FB18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FB1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FB20);
	op_stkvar	(x,	1);
	create_insn	(0X710002FB8C);
	create_insn	(x=0X710002FB94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002FBB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002FBC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002FBD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002FBE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710002FC0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710002FC14);
	op_stkvar	(x,	1);
	create_insn	(0X710002FC1C);
	create_insn	(0X710002FC24);
	create_insn	(0X710002FC2C);
	create_insn	(0X710002FC34);
	create_insn	(0X710002FC3C);
	create_insn	(0X710002FC68);
	create_insn	(0X710002FC90);
	create_insn	(0X710002FCB8);
	create_insn	(0X710002FCE0);
	create_insn	(0X710002FD08);
	create_insn	(0X710002FD30);
	create_insn	(0X710002FD58);
	create_insn	(0X710002FD80);
	create_insn	(0X710002FD88);
	create_insn	(0X710002FDB4);
	create_insn	(0X710002FE24);
	create_insn	(0X710002FE4C);
	create_insn	(0X710002FE74);
	create_insn	(0X710002FE9C);
	create_insn	(0X710002FEC8);
	create_insn	(0X710002FF94);
	create_insn	(0X710002FFF8);
	create_insn	(0X71000300DC);
	create_insn	(0X7100030108);
	create_insn	(0X7100030178);
	create_insn	(0X71000301A0);
	create_insn	(0X71000301C8);
	create_insn	(0X71000301F0);
	create_insn	(x=0X710003022C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030260);
	op_stkvar	(x,	1);
	create_insn	(0X7100030268);
	create_insn	(x=0X71000302D8);
	op_stkvar	(x,	1);
	create_insn	(0X71000302E0);
	create_insn	(x=0X7100030308);
	op_stkvar	(x,	1);
	create_insn	(0X7100030310);
	create_insn	(x=0X7100030338);
	op_stkvar	(x,	1);
	create_insn	(0X7100030340);
	create_insn	(x=0X7100030368);
	op_stkvar	(x,	1);
	create_insn	(0X7100030370);
	create_insn	(x=0X7100030398);
	op_stkvar	(x,	1);
	create_insn	(0X71000303A0);
	create_insn	(0X71000303A4);
	make_array	(0X71000303A8,	0X8);
	create_insn	(0X71000303B0);
	create_insn	(0X71000303D0);
	create_insn	(x=0X71000303D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000303D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000303DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000303E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000303E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000303EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000303FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030418);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030420);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030424);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003043C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030448);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030458);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030468);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030470);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003049C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000304A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000304A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000304C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000304CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000304D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000304EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000304F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000304F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003052C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030534);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003053C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030544);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030554);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030560);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030564);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003056C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030570);
	op_stkvar	(x,	1);
	create_insn	(0X710003057C);
	create_insn	(x=0X7100030580);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003058C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030594);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000305A0);
	op_stkvar	(x,	1);
	make_array	(0X71000305AC,	0X4);
	create_insn	(0X71000305B0);
	create_insn	(x=0X71000305B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000305B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000305BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000305C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000305C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000305CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000305DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000305F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030600);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003061C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030620);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003062C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030638);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030644);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030648);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030650);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003067C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030680);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030684);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000306A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000306AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000306B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000306CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000306D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000306D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000306E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003070C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030714);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003071C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030734);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030738);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030740);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003074C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030768);
	op_stkvar	(x,	1);
	set_cmt	(0X7100030774,	"dst",	0);
	create_insn	(x=0X7100030774);
	op_stkvar	(x,	1);
	set_cmt	(0X7100030778,	"src",	0);
	set_cmt	(0X710003077C,	"size",	0);
	create_insn	(x=0X7100030784);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030788);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030790);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030794);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307C0);
	op_stkvar	(x,	1);
	make_array	(0X71000307CC,	0X4);
	create_insn	(0X71000307D0);
	create_insn	(x=0X71000307D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000307FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030818);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003083C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030840);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030848);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030858);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030888);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003089C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000308A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000308A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000308CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000308D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000308D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000308F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000308F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000308FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030924);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003092C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003094C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030954);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030960);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030968);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003096C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030970);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030978);
	op_stkvar	(x,	1);
	make_array	(0X7100030984,	0XC);
	create_insn	(x=0X7100030990);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030994);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030998);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003099C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000309A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000309A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000309B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000309C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000309CC);
	op_plain_offset	(x,	1,	0X71000E8B48);
	op_plain_offset	(x,	129,	0X71000E8B48);
	create_insn	(x=0X71000309D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000309DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000309EC);
	create_insn	(x=0X71000309F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000309F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000309F8,	"tick",	0);
	create_insn	(x=0X7100030A04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030A14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030A18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030A38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030A40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030AA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030AB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030ACC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030AE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030AFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030B20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030B24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100030B2C);
	create_insn	(0X7100030B3C);
	create_insn	(0X7100030B60);
	create_insn	(x=0X7100030B64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030B74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100030B8C);
	create_insn	(x=0X7100030B98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030B9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030BA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100030BB4);
	create_insn	(x=0X7100030BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030BC0);
	op_plain_offset	(x,	1,	0X71000E8B58);
	op_plain_offset	(x,	129,	0X71000E8B58);
	create_insn	(0X7100030BD0);
	create_insn	(x=0X7100030BD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030BE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030BE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030BF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030C10);
	op_stkvar	(x,	1);
	make_array	(0X7100030C18,	0X8);
	create_insn	(x=0X7100030C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030C2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030C38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030C48);
	op_stkvar	(x,	1);
	create_insn	(0X7100030C50);
	create_insn	(x=0X7100030C54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030C60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030C70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030C74);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C78);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C7C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C80);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C84);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C88);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C8C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C90);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C94);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C98);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030C9C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CA0);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CA4);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CA8);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CAC);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CB0);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CB4);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CB8);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CBC);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CC0);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CC4);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CC8);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CCC);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CD0);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CD4);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CD8);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CDC);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CE0);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CE4);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CE8);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CEC);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CF0);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CF4);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CF8);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030CFC);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D00);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D04);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D08);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D0C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D10);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D14);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D18);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D1C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D20);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D24);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D28);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D2C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D30);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D34);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D38);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D3C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D40);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D44);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D48);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D4C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D50);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D54);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D58);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D5C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D60);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D64);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D68);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D6C);
	op_plain_offset	(x,	1,	0X71000E7B50);
	op_plain_offset	(x,	129,	0X71000E7B50);
	create_insn	(x=0X7100030D78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030D8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030D94);
	op_stkvar	(x,	1);
	make_array	(0X7100030D9C,	0X4);
	create_insn	(x=0X7100030DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030DB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030DC8);
	op_plain_offset	(x,	1,	0X71000E8B48);
	op_plain_offset	(x,	129,	0X71000E8B48);
	create_insn	(x=0X7100030DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100030E0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030E20);
	op_plain_offset	(x,	1,	0X71000E8B48);
	op_plain_offset	(x,	129,	0X71000E8B48);
	create_insn	(x=0X7100030E30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100030E38);
	op_plain_offset	(x,	1,	0X71000E8B80);
	op_plain_offset	(x,	129,	0X71000E8B80);
	create_insn	(0X7100031098);
	create_insn	(0X71000310A4);
	create_insn	(0X71000310AC);
	create_insn	(0X71000310B4);
	create_insn	(0X71000310BC);
	create_insn	(0X71000310C4);
	create_insn	(0X71000310CC);
	create_insn	(0X71000310D4);
	create_insn	(0X71000310DC);
	create_insn	(0X71000310E4);
	create_insn	(0X71000310EC);
	create_insn	(0X71000310F4);
	create_insn	(0X71000310FC);
	create_insn	(0X7100031104);
	create_insn	(0X710003110C);
	create_insn	(0X7100031114);
	create_insn	(0X710003111C);
	create_insn	(0X7100031124);
	create_insn	(0X710003112C);
	create_insn	(0X7100031134);
	create_insn	(0X710003113C);
	create_insn	(0X7100031144);
	create_insn	(0X710003114C);
	create_insn	(0X7100031154);
	create_insn	(0X710003115C);
	create_insn	(0X7100031164);
	create_insn	(0X710003116C);
	create_insn	(0X7100031174);
	create_insn	(0X710003117C);
	create_insn	(0X7100031184);
	create_insn	(x=0X710003119C);
	op_plain_offset	(x,	1,	0X71000E8B80);
	op_plain_offset	(x,	129,	0X71000E8B80);
	create_insn	(x=0X71000311A8);
	op_plain_offset	(x,	1,	0X71000E8B80);
	op_plain_offset	(x,	129,	0X71000E8B80);
	create_insn	(x=0X71000311B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000311BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000311C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000311D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000311DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000311F0);
	create_insn	(x=0X71000311FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031208);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003120C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031210);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031214);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031218);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031220);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031224);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003122C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031244);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031258);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031274);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100031294);
	create_insn	(x=0X71000312D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000312E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000312E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000312F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000312F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031304);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031308);
	op_stkvar	(x,	1);
	set_cmt	(0X7100031318,	"tick",	0);
	create_insn	(x=0X710003132C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003133C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031340);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031350);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003135C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031364);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003136C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031374);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031384);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003138C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031398);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000313A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000313B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000313B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000313C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000313C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000313C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000313D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000313E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000313EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003140C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100031434);
	create_insn	(x=0X7100031484);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000314CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000314D4);
	create_insn	(x=0X71000314E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000314EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000314F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000314F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000314F8);
	op_stkvar	(x,	1);
	create_insn	(0X7100031500);
	create_insn	(0X7100031514);
	create_insn	(x=0X7100031558);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100031560);
	create_insn	(x=0X7100031564);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031574);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031580);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X710003158C,	0X4);
	create_insn	(x=0X7100031590);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031594);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000315A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000315B4);
	op_plain_offset	(x,	1,	0X71000E8B48);
	op_plain_offset	(x,	129,	0X71000E8B48);
	create_insn	(x=0X71000315C0);
	op_plain_offset	(x,	1,	0X71000E8B48);
	op_plain_offset	(x,	129,	0X71000E8B48);
	create_insn	(x=0X71000315C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000315CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000315D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000315D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000315E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000315EC);
	op_plain_offset	(x,	1,	0X71000E8B48);
	op_plain_offset	(x,	129,	0X71000E8B48);
	create_insn	(x=0X71000315F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000315FC);
	op_plain_offset	(x,	1,	0X71000E8B48);
	op_plain_offset	(x,	129,	0X71000E8B48);
	create_insn	(x=0X7100031610);
	op_plain_offset	(x,	1,	0X71000E8B68);
	op_plain_offset	(x,	129,	0X71000E8B68);
	create_insn	(x=0X710003161C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003162C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003165C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031660);
	op_stkvar	(x,	1);
	make_array	(0X7100031668,	0X8);
	create_insn	(0X7100031670);
	create_insn	(x=0X7100031674);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031678);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031684);
	op_stkvar	(x,	1);
	create_insn	(0X7100031890);
	create_insn	(x=0X7100031894);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031898);
	op_stkvar	(x,	1);
	create_insn	(0X71000318A4);
	create_insn	(0X71000318B0);
	create_insn	(0X71000318B8);
	create_insn	(0X71000318C0);
	create_insn	(0X71000318C8);
	create_insn	(0X71000318D0);
	create_insn	(0X71000318D8);
	create_insn	(0X71000318E0);
	create_insn	(0X71000318E8);
	create_insn	(0X71000318F0);
	create_insn	(0X71000318F8);
	create_insn	(0X7100031900);
	create_insn	(0X7100031908);
	create_insn	(0X7100031910);
	create_insn	(0X7100031918);
	create_insn	(0X7100031920);
	create_insn	(0X7100031928);
	create_insn	(0X7100031930);
	create_insn	(0X7100031938);
	create_insn	(0X7100031940);
	create_insn	(0X7100031948);
	create_insn	(0X7100031950);
	create_insn	(0X7100031958);
	create_insn	(0X7100031960);
	create_insn	(0X7100031968);
	create_insn	(0X7100031970);
	create_insn	(0X7100031978);
	create_insn	(0X7100031980);
	create_insn	(0X7100031988);
	create_insn	(0X7100031990);
	create_insn	(x=0X71000319AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000319B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000319BC);
	create_insn	(0X71000319C8);
	create_insn	(0X71000319D8);
	create_insn	(0X71000319E8);
	create_insn	(0X71000319F8);
	create_insn	(0X7100031A08);
	create_insn	(0X7100031A10);
	create_insn	(0X7100031A24);
	create_insn	(x=0X7100031A30);
	op_hex		(x,	1);
	make_array	(0X7100031A48,	0X8);
	create_insn	(x=0X7100031A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031A74);
	op_hex		(x,	1);
	set_cmt	(0X7100031A9C,	"src",	0);
	set_cmt	(0X7100031AA0,	"dst",	0);
	set_cmt	(0X7100031AA4,	"size",	0);
	create_insn	(x=0X7100031AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031AC0);
	op_stkvar	(x,	1);
	make_array	(0X7100031AC8,	0X8);
	create_insn	(0X7100031AD0);
	create_insn	(x=0X7100031AD4);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_5(void) {
        auto x;
#define id x

	create_insn	(x=0X7100031AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B68);
	op_hex		(x,	1);
	create_insn	(x=0X7100031B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031B88);
	op_hex		(x,	1);
	create_insn	(x=0X7100031B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031BA8);
	op_hex		(x,	1);
	create_insn	(0X7100031BBC);
	create_insn	(x=0X7100031BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031BF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100031C04);
	create_insn	(x=0X7100031C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C24);
	op_stkvar	(x,	1);
	create_insn	(0X7100031C30);
	create_insn	(x=0X7100031C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C40);
	op_stkvar	(x,	1);
	make_array	(0X7100031C4C,	0X4);
	create_insn	(0X7100031C50);
	set_name	(0X7100031C50,	"GetRandom");
	create_insn	(x=0X7100031C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C70);
	op_hex		(x,	1);
	create_insn	(x=0X7100031C74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031C78);
	op_hex		(x,	1);
	create_insn	(x=0X7100031C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031CA0);
	op_hex		(x,	1);
	create_insn	(x=0X7100031CA4);
	op_hex		(x,	1);
	create_insn	(x=0X7100031CB0);
	op_hex		(x,	1);
	make_array	(0X7100031CBC,	0X4);
	create_insn	(0X7100031CC0);
	make_array	(0X7100031CCC,	0X4);
	create_insn	(0X7100031CD0);
	make_array	(0X7100031CE8,	0X8);
	create_insn	(x=0X7100031CF0);
	op_stkvar	(x,	1);
	set_name	(0X7100031CF0,	"Setup_TimeServerIPC");
	create_insn	(x=0X7100031CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031D04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031D0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031D14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031D34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031D3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031D50);
	op_stkvar	(x,	1);
	create_insn	(0X7100031D58);
	create_insn	(0X7100031D60);
	set_name	(0X7100031D60,	"gTimeServer_ThreadFunc");
	create_insn	(0X7100031D64);
	create_insn	(0X7100031D74);
	make_array	(0X7100031D78,	0X8);
	create_insn	(x=0X7100031D80);
	op_stkvar	(x,	1);
	set_name	(0X7100031D80,	"Setup_TimeServer");
	create_insn	(x=0X7100031D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031D8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031D90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031D98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031DA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100031DB0,	"a1",	0);
	create_insn	(x=0X7100031DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031DC4);
	op_stkvar	(x,	1);
	make_array	(0X7100031DCC,	0X4);
	create_insn	(x=0X7100031DD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100031DDC,	0X4);
	create_insn	(x=0X7100031DE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031DE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031DEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031DF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031DFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X7100031DFC,	"nn::timesrv::detail::service::LocalSystemClockContextWriter::LocalSystemClockContextWriter");
	create_insn	(x=0X7100031E04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100031E28,	0X8);
	create_insn	(x=0X7100031E30);
	op_stkvar	(x,	1);
	set_name	(0X7100031E30,	"LocalSystemClockContextWriter::Write");
	create_insn	(x=0X7100031E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031E38);
	op_stkvar	(x,	1);
	create_insn	(0X7100031E9C);
	set_cmt	(0X7100031EB4,	"this",	0);
	create_insn	(x=0X7100031EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031F08);
	op_stkvar	(x,	1);
	create_insn	(0X7100031F10);
	set_name	(0X7100031F10,	"nn::timesrv::detail::service::NetworkSystemClockContextWriter::NetworkSystemClockContextWriter");
	create_insn	(x=0X7100031F14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031F1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100031F40);
	op_stkvar	(x,	1);
	set_name	(0X7100031F40,	"NetworkSystemClockContextWriter::Write");
	create_insn	(x=0X7100031F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100031F48);
	op_stkvar	(x,	1);
	create_insn	(0X7100031FBC);
	create_insn	(x=0X710003201C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032024);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032028);
	op_stkvar	(x,	1);
	create_insn	(0X7100032030);
	set_name	(0X7100032030,	"nn::timesrv::detail::service::EphemeralNetworkSystemClockContextWriter::EphemeralNetworkSystemClockContextWriter");
	create_insn	(x=0X7100032034);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003203C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X710003205C,	0X4);
	create_insn	(x=0X7100032060);
	op_stkvar	(x,	1);
	set_name	(0X7100032060,	"EphemeralNetworkSystemClockContextWriter::Write");
	create_insn	(x=0X7100032064);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032068);
	op_stkvar	(x,	1);
	create_insn	(0X71000320CC);
	create_insn	(x=0X710003211C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032124);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032128);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032130);
	op_stkvar	(x,	1);
	set_name	(0X7100032130,	"TimeServer_Initialize");
	create_insn	(x=0X7100032134);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003213C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032144);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003214C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000321FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710003221C,	"clearMode",	0);
	set_cmt	(0X7100032228,	"type",	0);
	set_cmt	(0X7100032230,	"event",	0);
	create_insn	(x=0X7100032254);
	op_stkvar	(x,	1);
	set_cmt	(0X7100032260,	"steady_clock",	0);
	set_cmt	(0X7100032270,	"this",	0);
	set_cmt	(0X7100032274,	"event",	0);
	create_insn	(x=0X71000322B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000322C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000322C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000322C8);
	op_stkvar	(x,	1);
	create_insn	(0X71000322D0);
	create_insn	(x=0X71000322D8);
	op_stkvar	(x,	1);
	set_name	(0X71000322D8,	"TimeServer_Shutdown");
	create_insn	(x=0X71000322DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032338);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100032350);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032354);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003235C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032360);
	op_stkvar	(x,	1);
	create_insn	(0X7100032368);
	set_name	(0X7100032368,	"nullsub_56");
	create_insn	(x=0X710003236C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032384);
	op_stkvar	(x,	1);
	create_insn	(0X710003238C);
	set_name	(0X710003238C,	"j_Heap_Deallocate_1");
	create_insn	(0X7100032390);
	set_name	(0X7100032390,	"TimeSharedMemory::TimeSharedMemory");
	create_insn	(x=0X7100032394);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032398);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000323B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000323E8);
	op_hex		(x,	1);
	create_insn	(x=0X710003240C);
	op_hex		(x,	1);
	create_insn	(x=0X7100032430);
	op_hex		(x,	1);
	create_insn	(x=0X7100032454);
	op_hex		(x,	1);
	create_insn	(x=0X7100032468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003246C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032478);
	op_stkvar	(x,	1);
	create_insn	(0X7100032480);
	create_insn	(0X7100032484);
	set_name	(0X7100032484,	"TImeSharedMemory::SetSteadyClockTimePoint");
	create_insn	(x=0X710003248C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000324A0);
	op_hex		(x,	1);
	create_insn	(0X71000324C0);
	set_name	(0X71000324C0,	"TimeSharedMemory::UpdateBaseTime");
	create_insn	(x=0X71000324D4);
	op_hex		(x,	1);
	create_insn	(x=0X71000324E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032508);
	op_hex		(x,	1);
	create_insn	(x=0X7100032510);
	op_stkvar	(x,	1);
	create_insn	(0X710003252C);
	set_name	(0X710003252C,	"TimeSharedMemory::SetLocalSystemContext");
	create_insn	(x=0X710003253C);
	op_hex		(x,	1);
	create_insn	(0X710003255C);
	set_name	(0X710003255C,	"TimeSharedMemory::SetNetworkSystemContext");
	create_insn	(x=0X710003256C);
	op_hex		(x,	1);
	create_insn	(0X710003258C);
	set_name	(0X710003258C,	"TImeSharedMemory::SetAutomaticCorrection");
	create_insn	(x=0X7100032598);
	op_hex		(x,	1);
	create_insn	(0X71000325B0);
	set_name	(0X71000325B0,	"TImeSharedMemory::SetContinuousAdjustment");
	create_insn	(x=0X71000325C4);
	op_hex		(x,	1);
	create_insn	(0X71000325F4);
	set_name	(0X71000325F4,	"nn::timesrv::detail::core::SystemClockCore::SystemClockCore");
	create_insn	(x=0X71000325F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100032618);
	set_name	(0X7100032618,	"StandardUserSystemClockCore::SetInitialised");
	create_insn	(0X7100032624);
	set_name	(0X7100032624,	"SystemClockCore_IsInitialised");
	create_insn	(0X710003262C);
	set_name	(0X710003262C,	"SystemClockCore::GetCurrentTime");
	create_insn	(x=0X7100032634);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003264C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003265C);
	op_stkvar	(x,	1);
	create_insn	(0X7100032668);
	create_insn	(0X7100032674);
	create_insn	(x=0X7100032678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003268C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032690);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000326A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000326AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000326B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000326C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000326CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000326D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000326DC);
	set_name	(0X71000326DC,	"StandardLocalSystemClockCore::GetSteadyClock");
	create_insn	(0X71000326E4);
	set_name	(0X71000326E4,	"SystemClockCore::GetContext");
	create_insn	(0X71000326F0);
	set_name	(0X71000326F0,	"GetTimeFromTimePointAndContext");
	create_insn	(0X7100032714);
	create_insn	(0X7100032720);
	create_insn	(0X710003273C);
	set_name	(0X710003273C,	"SystemClockCore::SetCurrentTime");
	create_insn	(x=0X7100032740);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032744);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032758);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032768);
	op_stkvar	(x,	1);
	create_insn	(0X7100032774);
	create_insn	(x=0X7100032778);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032780);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003278C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032790);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000327B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000327BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000327C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000327CC);
	op_stkvar	(x,	1);
	set_name	(0X71000327CC,	"SystemClockCore::SetContextAndWrite");
	create_insn	(x=0X71000327D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000327F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000327F4);
	op_stkvar	(x,	1);
	create_insn	(0X71000327FC);
	create_insn	(x=0X7100032810);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032814);
	op_stkvar	(x,	1);
	create_insn	(0X710003281C);
	set_name	(0X710003281C,	"SystemClockCore::GetSteadyClock");
	create_insn	(0X7100032824);
	set_name	(0X7100032824,	"SystemClockCore::CheckClockSourceMatches");
	create_insn	(x=0X7100032828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003282C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032838);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032854);
	op_stkvar	(x,	1);
	create_insn	(0X7100032860);
	create_insn	(x=0X7100032864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032874);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032878);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032888);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000328A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000328A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000328B0);
	set_name	(0X71000328B0,	"SystemClockCore::SetContextWriter");
	create_insn	(x=0X71000328B8);
	op_stkvar	(x,	1);
	set_name	(0X71000328B8,	"SystemClockCore::LinkOperationEvent");
	create_insn	(x=0X71000328BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000328C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032900);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032904);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032908);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032910);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032918);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032924);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032928);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032978);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003297C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032984);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003298C);
	op_stkvar	(x,	1);
	create_insn	(0X7100032994);
	set_name	(0X7100032994,	"SystemClockCore_GetContext");
	create_insn	(0X71000329AC);
	set_name	(0X71000329AC,	"SystemClockCore_SetContext");
	create_insn	(0X71000329C4);
	set_name	(0X71000329C4,	"j_Heap_Deallocate_2");
	create_insn	(0X71000329C8);
	set_name	(0X71000329C8,	"SteadyClockCore::SetInitialised");
	create_insn	(0X71000329D4);
	set_name	(0X71000329D4,	"SteadyClockCore::IsInitialised");
	create_insn	(x=0X71000329DC);
	op_stkvar	(x,	1);
	set_name	(0X71000329DC,	"SteadyClockCore::GetCurrentTimePoint");
	create_insn	(x=0X71000329E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000329E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032A14);
	op_stkvar	(x,	1);
	create_insn	(0X7100032A1C);
	create_insn	(x=0X7100032A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032A88);
	op_stkvar	(x,	1);
	create_insn	(0X7100032A90);
	set_name	(0X7100032A90,	"SteadyClockCore::GetTestOffset");
	create_insn	(0X7100032A9C);
	set_name	(0X7100032A9C,	"SteadyClockCore::GetInternalOffset");
	create_insn	(x=0X7100032AA8);
	op_stkvar	(x,	1);
	set_name	(0X7100032AA8,	"SteadyClockCore::GetRawTime");
	create_insn	(x=0X7100032AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032AF4);
	op_stkvar	(x,	1);
	create_insn	(0X7100032AFC);
	set_name	(0X7100032AFC,	"SteadyClockCore::SetTestOffset");
	create_insn	(0X7100032B08);
	set_name	(0X7100032B08,	"SteadyClockCore::GetRtcValue");
	create_insn	(0X7100032B14);
	set_name	(0X7100032B14,	"SteadyClockCore::IsResetDetected");
	create_insn	(0X7100032B1C);
	set_name	(0X7100032B1C,	"SteadyClockCore::SetResetDetected");
	create_insn	(0X7100032B28);
	set_name	(0X7100032B28,	"TickBasedSteadyClockCore::GetCurrentRawTimePoint");
	create_insn	(x=0X7100032B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032B58);
	op_stkvar	(x,	1);
	create_insn	(0X7100032B68);
	create_insn	(0X7100032B70);
	set_name	(0X7100032B70,	"TickBasedSteadyClockCore::GetTestOffset");
	create_insn	(0X7100032B78);
	set_name	(0X7100032B78,	"TickBasedSteadyClockCore::SetTestOffset");
	create_insn	(0X7100032B7C);
	set_name	(0X7100032B7C,	"TickBasedSteadyClockCore::GetInternalOffset");
	create_insn	(0X7100032B84);
	set_name	(0X7100032B84,	"TickBasedSteadyClockCore::SetInternalOffset");
	create_insn	(0X7100032B88);
	set_name	(0X7100032B88,	"SteadyClockCore::GetRtcValue_virt");
	create_insn	(0X7100032B94);
	set_name	(0X7100032B94,	"nullsub_57");
	create_insn	(0X7100032B98);
	set_name	(0X7100032B98,	"SteadyClockCore::GetSetupResultValue");
	create_insn	(x=0X7100032BA0);
	op_stkvar	(x,	1);
	set_name	(0X7100032BA0,	"StandardSteadyClockCore::Initialise");
	create_insn	(x=0X7100032BA4);
	op_stkvar	(x,	1);
	set_cmt	(0X7100032BD4,	"this",	0);
	create_insn	(x=0X7100032BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032BE4);
	op_stkvar	(x,	1);
	create_insn	(0X7100032BEC);
	set_name	(0X7100032BEC,	"StandardSteadyClockCore::SetRtcOffset");
	create_insn	(x=0X7100032BF8);
	op_stkvar	(x,	1);
	set_name	(0X7100032BF8,	"StandardSteadyClockCore::SetContinuousAdjustment");
	create_insn	(x=0X7100032BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032C4C);
	op_stkvar	(x,	1);
	set_name	(0X7100032C4C,	"StandardSteadyClockCore::UpdateContinuousAdjustment");
	create_insn	(x=0X7100032C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032CC4);
	op_stkvar	(x,	1);
	create_insn	(0X7100032CCC);
	set_name	(0X7100032CCC,	"StandardSteadyClockCore::GetContinuousAdjustment");
	create_insn	(x=0X7100032CF0);
	op_stkvar	(x,	1);
	set_name	(0X7100032CF0,	"StandardSteadyClockCore::GetCurrentTimePoint");
	create_insn	(x=0X7100032CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032D40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032D48);
	op_stkvar	(x,	1);
	set_name	(0X7100032D48,	"StandardSteadyClockCore::GetCurrentRawTimePoint");
	create_insn	(x=0X7100032D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032D98);
	op_stkvar	(x,	1);
	create_insn	(0X7100032DA0);
	set_name	(0X7100032DA0,	"StandardSteadyClockCore::GetTestOffset");
	create_insn	(0X7100032DA8);
	set_name	(0X7100032DA8,	"StandardSteadyClockCore::SetTestOffset");
	create_insn	(0X7100032DB4);
	set_name	(0X7100032DB4,	"StandardSteadyClockCore::GetInternalOffset");
	create_insn	(0X7100032DBC);
	set_name	(0X7100032DBC,	"StandardSteadyClockCore::SetInternalOffset");
	create_insn	(0X7100032DC8);
	set_name	(0X7100032DC8,	"j_Heap_Deallocate_3");
	create_insn	(x=0X7100032DCC);
	op_stkvar	(x,	1);
	set_name	(0X7100032DCC,	"nn::timesrv::detail::core::TickBasedSteadyClockCore::TickBasedSteadyClockCore");
	create_insn	(x=0X7100032DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032DD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100032DE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100032DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032E08);
	op_stkvar	(x,	1);
	set_name	(0X7100032E08,	"TickBasedSteadyClockCore::GetCurrentTimePoint");
	create_insn	(x=0X7100032E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032E58);
	op_stkvar	(x,	1);
	create_insn	(0X7100032E60);
	set_name	(0X7100032E60,	"j_Heap_Deallocate_4");
	create_insn	(x=0X7100032E64);
	op_stkvar	(x,	1);
	set_name	(0X7100032E64,	"nn::timesrv::detail::core::StandardLocalSystemClockCore::StandardLocalSystemClockCore");
	create_insn	(x=0X7100032E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032E7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100032E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032E8C);
	op_stkvar	(x,	1);
	create_insn	(0X7100032E94);
	set_name	(0X7100032E94,	"StandardLocalSystemClockCore::Initialise");
	create_insn	(x=0X7100032E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032EC8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100032EDC,	"this",	0);
	set_cmt	(0X7100032EE0,	"a2",	0);
	create_insn	(x=0X7100032EE8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100032EF0,	"this",	0);
	create_insn	(x=0X7100032EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032F00);
	op_stkvar	(x,	1);
	set_cmt	(0X7100032F0C,	"this",	0);
	create_insn	(0X7100032F0C);
	set_cmt	(0X7100032F10,	"context",	0);
	create_insn	(0X7100032F1C);
	create_insn	(0X7100032F24);
	set_name	(0X7100032F24,	"j_Heap_Deallocate_5");
	create_insn	(x=0X7100032F28);
	op_stkvar	(x,	1);
	set_name	(0X7100032F28,	"nn::timesrv::detail::core::StandardNetworkSystemClockCore::StandardNetworkSystemClockCore");
	create_insn	(x=0X7100032F2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032F40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100032F5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032F60);
	op_stkvar	(x,	1);
	create_insn	(0X7100032F68);
	set_name	(0X7100032F68,	"StandardNetworkSystemClockContext::Initialise");
	create_insn	(x=0X7100032F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032F84);
	op_stkvar	(x,	1);
	set_cmt	(0X7100032F90,	"this",	0);
	create_insn	(x=0X7100032F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032FA8);
	op_stkvar	(x,	1);
	create_insn	(0X7100032FB0);
	set_name	(0X7100032FB0,	"StandardNetworkSystemClock::IsAccuracySufficient");
	create_insn	(x=0X7100032FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100032FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033014);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033018);
	op_stkvar	(x,	1);
	create_insn	(0X7100033024);
	create_insn	(x=0X7100033028);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003302C);
	op_stkvar	(x,	1);
	create_insn	(0X7100033038);
	set_name	(0X7100033038,	"j_Heap_Deallocate_6");
	make_array	(0X710003303C,	0X4);
	create_insn	(0X7100033040);
	set_name	(0X7100033040,	"GetSpanBetweenTimePoints");
	create_insn	(0X7100033070);
	create_insn	(0X710003307C);
	create_insn	(x=0X7100033088);
	op_hex		(x,	1);
	create_insn	(0X71000330A4);
	create_insn	(x=0X71000330B8);
	op_stkvar	(x,	1);
	set_name	(0X71000330B8,	"nn::timesrv::detail::core::StandardUserSystemClockCore::StandardUserSystemClockCore");
	create_insn	(x=0X71000330BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000330C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000330E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000330EC,	"event",	0);
	create_insn	(x=0X71000330F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000330F4,	"clearMode",	0);
	set_cmt	(0X71000330F8,	"type",	0);
	create_insn	(x=0X7100033118);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033120);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033124);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033128);
	op_stkvar	(x,	1);
	create_insn	(0X7100033130);
	create_insn	(0X7100033138);
	set_name	(0X7100033138,	"StandardUserSystemClockCore::GetContext");
	create_insn	(x=0X710003313C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033140);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033174);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033178);
	op_stkvar	(x,	1);
	set_cmt	(0X7100033184,	"this",	0);
	create_insn	(0X7100033184);
	set_cmt	(0X7100033188,	"context",	0);
	create_insn	(x=0X71000331A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000331A4);
	op_stkvar	(x,	1);
	create_insn	(0X71000331B0);
	set_name	(0X71000331B0,	"StandardUserSystemClockCore::SetContext");
	create_insn	(0X71000331BC);
	set_name	(0X71000331BC,	"StandardUserSystemClockCore::GetAutomaticCorrection");
	create_insn	(0X71000331C4);
	set_name	(0X71000331C4,	"StandardUserSystemClockCore::SetAutomaticCorrection");
	create_insn	(x=0X71000331C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000331CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000331D8);
	op_hex		(x,	1);
	create_insn	(x=0X7100033204);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033208);
	op_stkvar	(x,	1);
	set_cmt	(0X7100033214,	"this",	0);
	create_insn	(0X7100033214);
	set_cmt	(0X7100033218,	"context",	0);
	create_insn	(x=0X710003322C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033230);
	op_stkvar	(x,	1);
	create_insn	(0X710003323C);
	set_name	(0X710003323C,	"StandardUserSystemClock::GetTimePoint");
	create_insn	(0X7100033250);
	set_name	(0X7100033250,	"StandardUserSystemClockCore::SetTimePointAndSignal");
	create_insn	(0X7100033268);
	set_name	(0X7100033268,	"StandardUserSystemClockCore::GetEvent");
	create_insn	(0X7100033270);
	set_name	(0X7100033270,	"StandardUserSystemClockCore::D1");
	create_insn	(x=0X7100033274);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100033290);
	create_insn	(x=0X7100033294);
	op_stkvar	(x,	1);
	set_name	(0X7100033294,	"StandardUserSystemClockCore::D0");
	create_insn	(x=0X7100033298);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000332A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000332A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000332C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000332CC);
	op_stkvar	(x,	1);
	make_array	(0X71000332D4,	0XC);
	create_insn	(0X71000332E0);
	set_name	(0X71000332E0,	"Alarms::Alarms");
	create_insn	(x=0X71000332E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000332E8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000332FC,	"event",	0);
	set_cmt	(0X7100033300,	"clearMode",	0);
	set_cmt	(0X7100033304,	"type",	0);
	create_insn	(x=0X7100033310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033358);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003335C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033368);
	op_stkvar	(x,	1);
	create_insn	(0X7100033370);
	set_name	(0X7100033370,	"Alarms::EnableAlarm");
	create_insn	(x=0X7100033374);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033378);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003337C);
	op_stkvar	(x,	1);
	create_insn	(0X71000333C0);
	create_insn	(x=0X71000333C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000333CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000333D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000333DC);
	create_insn	(x=0X71000333F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003342C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100033434,	"next_alert_time",	0);
	set_cmt	(0X7100033438,	"alarm",	0);
	create_insn	(0X7100033460);
	create_insn	(x=0X7100033484);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033488);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003348C);
	op_stkvar	(x,	1);
	make_array	(0X7100033498,	0X8);
	create_insn	(x=0X71000334A0);
	op_stkvar	(x,	1);
	set_name	(0X71000334A0,	"Alarms::InsertAlarm");
	create_insn	(x=0X71000334A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000334A8);
	op_stkvar	(x,	1);
	create_insn	(0X71000334C0);
	set_cmt	(0X7100033514,	"this",	0);
	set_cmt	(0X7100033520,	"this",	0);
	create_insn	(x=0X710003354C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033550);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033554);
	op_stkvar	(x,	1);
	create_insn	(0X710003355C);
	create_insn	(x=0X7100033578);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003357C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033588);
	op_stkvar	(x,	1);
	set_name	(0X7100033588,	"Alarms::DisableAlarm");
	create_insn	(x=0X710003358C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033590);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000335FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033604);
	op_stkvar	(x,	1);
	create_insn	(0X710003360C);
	create_insn	(x=0X7100033624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003362C);
	op_stkvar	(x,	1);
	make_array	(0X7100033634,	0XC);
	create_insn	(x=0X7100033640);
	op_stkvar	(x,	1);
	set_name	(0X7100033640,	"Alarms::CheckAndSignal");
	create_insn	(x=0X7100033644);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033648);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003364C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033650);
	op_stkvar	(x,	1);
	create_insn	(0X71000336B4);
	set_cmt	(0X71000336BC,	"this",	0);
	set_cmt	(0X71000336C8,	"this",	0);
	create_insn	(0X7100033708);
	create_insn	(0X7100033730);
	create_insn	(x=0X7100033748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003374C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033750);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033758);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033760);
	op_stkvar	(x,	1);
	set_name	(0X7100033760,	"Alarms::GetClosestAlarm");
	create_insn	(x=0X7100033764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033768);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000337A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000337AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000337B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000337B8);
	set_name	(0X71000337B8,	"Alarms::GetEvent");
	create_insn	(x=0X71000337C0);
	op_stkvar	(x,	1);
	set_name	(0X71000337C0,	"Alarm::Alarm");
	create_insn	(x=0X71000337C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000337C8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000337E0,	"event",	0);
	set_cmt	(0X71000337E4,	"clearMode",	0);
	set_cmt	(0X71000337E8,	"type",	0);
	create_insn	(x=0X71000337F0);
	op_stkvar	(x,	1);
	create_insn	(0X7100033818);
	create_insn	(x=0X7100033820);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033824);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033828);
	op_stkvar	(x,	1);
	create_insn	(0X7100033830);
	create_insn	(x=0X7100033838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003383C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033858);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000338A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000338A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000338AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000338B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000338B8);
	set_name	(0X71000338B8,	"Alarm::SetAlertTime");
	create_insn	(x=0X71000338C4);
	op_stkvar	(x,	1);
	set_name	(0X71000338C4,	"Alarm::GetPSCLockService");
	create_insn	(x=0X71000338C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000338E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000338E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000338EC);
	create_insn	(x=0X7100033908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003390C);
	op_stkvar	(x,	1);
	create_insn	(0X7100033914);
	set_name	(0X7100033914,	"Alarm::ReleaseLockService");
	create_insn	(0X7100033930);
	create_insn	(0X7100033934);
	set_name	(0X7100033934,	"Alarm::Lock");
	create_insn	(0X7100033940);
	create_insn	(0X7100033944);
	set_name	(0X7100033944,	"Alarm::HasLockService");
	create_insn	(0X7100033954);
	set_name	(0X7100033954,	"Alarm::Signal");
	create_insn	(0X710003395C);
	set_name	(0X710003395C,	"Alarm::GetEvent");
	create_insn	(0X7100033964);
	set_name	(0X7100033964,	"Alarm::GetPriority");
	create_insn	(0X710003396C);
	set_name	(0X710003396C,	"Alarm::GetAlertTime");
	create_insn	(0X7100033974);
	set_name	(0X7100033974,	"nullsub_67");
	create_insn	(0X7100033978);
	set_name	(0X7100033978,	"nullsub_72");
	create_insn	(x=0X710003397C);
	op_stkvar	(x,	1);
	set_name	(0X710003397C,	"Unk42A8::GetAndClearPowerStateRequest");
	create_insn	(x=0X7100033980);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033984);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000339D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000339D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000339D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000339E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000339E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000339E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033A28);
	op_stkvar	(x,	1);
	create_insn	(0X7100033A30);
	create_insn	(x=0X7100033A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033AA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100033AA8);
	set_name	(0X7100033AA8,	"Unk4440::Unk4440");
	create_insn	(x=0X7100033AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033AD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033ADC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033B20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033B28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033B30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033B50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033B58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033B5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033B88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100033B8C,	"this",	0);
	set_cmt	(0X7100033B90,	"heap",	0);
	set_cmt	(0X7100033BA4,	"this_1",	0);
	create_insn	(x=0X7100033BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033BB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033BB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033BE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033BE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033BEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033BF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033C68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033C70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033CB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033CC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033CC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033D14);
	op_stkvar	(x,	1);
	create_insn	(0X7100033D20);
	create_insn	(0X7100033D28);
	set_name	(0X7100033D28,	"SetupServices_SAndP");
	create_insn	(x=0X7100033D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033D50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033D5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033DA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033DA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033DB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033DF4);
	op_stkvar	(x,	1);
	create_insn	(0X7100033E00);
	create_insn	(x=0X7100033E08);
	op_stkvar	(x,	1);
	set_name	(0X7100033E08,	"Unk4440::Finalise");
	create_insn	(x=0X7100033E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033E14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033E1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100033E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033EAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100033EB0);
	op_stkvar	(x,	1);
	create_insn	(0X7100034050);
	create_insn	(0X7100034058);
	create_insn	(0X7100034064);
	create_insn	(0X7100034070);
	create_insn	(0X710003407C);
	create_insn	(0X7100034088);
	create_insn	(0X7100034094);
	create_insn	(0X71000340A0);
	create_insn	(0X71000340AC);
	create_insn	(0X71000340B8);
	create_insn	(0X71000340C4);
	create_insn	(0X71000340D0);
	create_insn	(0X71000340DC);
	create_insn	(0X71000340E8);
	create_insn	(0X71000340F4);
	create_insn	(0X7100034100);
	create_insn	(0X710003410C);
	create_insn	(0X7100034118);
	create_insn	(0X7100034124);
	create_insn	(0X7100034130);
	create_insn	(0X710003413C);
	create_insn	(0X7100034148);
	create_insn	(0X7100034154);
	create_insn	(0X7100034160);
	create_insn	(0X710003416C);
	create_insn	(0X7100034178);
	create_insn	(0X7100034184);
	create_insn	(0X7100034190);
	create_insn	(0X710003419C);
	create_insn	(0X71000341A8);
	create_insn	(0X71000341B4);
	create_insn	(0X71000341C0);
	create_insn	(x=0X71000341E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000341E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000341EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000341F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000341F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000341FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003423C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034244);
	op_stkvar	(x,	1);
	create_insn	(0X710003424C);
	create_insn	(0X7100034274);
	set_name	(0X7100034274,	"nullsub_60");
	create_insn	(x=0X7100034278);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034294);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003429C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000342A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000342AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000342FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034300);
	op_stkvar	(x,	1);
	create_insn	(0X7100034308);
	create_insn	(0X7100034314);
	create_insn	(0X7100034320);
	create_insn	(0X710003432C);
	create_insn	(0X7100034338);
	create_insn	(x=0X7100034360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034364);
	op_stkvar	(x,	1);
	create_insn	(0X710003436C);
	create_insn	(0X7100034374);
	set_name	(0X7100034374,	"nullsub_61");
	create_insn	(x=0X7100034378);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003437C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034380);
	op_stkvar	(x,	1);
	create_insn	(0X7100034428);
	create_insn	(0X7100034430);
	create_insn	(0X7100034438);
	create_insn	(0X7100034440);
	create_insn	(0X7100034448);
	create_insn	(0X7100034450);
	create_insn	(0X7100034458);
	create_insn	(0X7100034460);
	create_insn	(0X7100034468);
	create_insn	(0X7100034470);
	create_insn	(0X7100034478);
	create_insn	(0X7100034480);
	create_insn	(0X7100034488);
	create_insn	(0X7100034490);
	create_insn	(0X7100034498);
	create_insn	(0X71000344A0);
	create_insn	(x=0X71000344C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000344CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000344D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000344D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000344DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000344E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003450C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034520);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003452C);
	op_stkvar	(x,	1);
	create_insn	(0X7100034534);
	create_insn	(0X7100034540);
	set_name	(0X7100034540,	"nullsub_62");
	create_insn	(0X7100034544);
	create_insn	(x=0X710003454C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034550);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034554);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034594);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000345A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000345A8);
	create_insn	(x=0X71000345B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000345B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000345BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000345C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000345C8,	"a3",	0);
	create_insn	(x=0X71000345CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000345E0,	"a2",	0);
	create_insn	(x=0X7100034618);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034840);
	op_hex		(x,	1);
	create_insn	(x=0X7100034860);
	op_hex		(x,	1);
	create_insn	(x=0X71000348E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000348EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000348F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000348F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100034908);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100034C00,	"result",	0);
	create_insn	(x=0X7100034C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C10);
	op_stkvar	(x,	1);
	create_insn	(0X7100034C18);
	set_name	(0X7100034C18,	"nullsub_63");
	create_insn	(0X7100034C1C);
	set_name	(0X7100034C1C,	"nullsub_64");
	create_insn	(0X7100034C20);
	set_name	(0X7100034C20,	"nn::timesrv::detail::service::IStaticService::GetStandardUserSystemClock");
	create_insn	(x=0X7100034C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C40);
	op_stkvar	(x,	1);
	create_insn	(0X7100034C4C);
	set_name	(0X7100034C4C,	"nn::timesrv::detail::service::IStaticService::GetStandardNetworkSystemClock");
	create_insn	(x=0X7100034C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C6C);
	op_stkvar	(x,	1);
	create_insn	(0X7100034C78);
	set_name	(0X7100034C78,	"nn::timesrv::detail::service::IStaticService::GetStandardSteadyClock");
	create_insn	(x=0X7100034C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034C98);
	op_stkvar	(x,	1);
	create_insn	(0X7100034CA4);
	set_name	(0X7100034CA4,	"nn::timesrv::detail::service::IStaticService::GetTimeZoneService");
	create_insn	(x=0X7100034CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034CBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034CC4);
	op_stkvar	(x,	1);
	create_insn	(0X7100034CD0);
	set_name	(0X7100034CD0,	"nn::timesrv::detail::service::IStaticService::GetStandardLocalSystemClock");
	create_insn	(x=0X7100034CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034CF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100034CFC);
	set_name	(0X7100034CFC,	"nn::timesrv::detail::service::IStaticService::GetEphemeralNetworkSystemClock");
	create_insn	(x=0X7100034D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034D1C);
	op_stkvar	(x,	1);
	create_insn	(0X7100034D28);
	set_name	(0X7100034D28,	"nn::timesrv::detail::service::IStaticService::GetSharedMemoryNativeHandle");
	create_insn	(0X7100034D30);
	set_name	(0X7100034D30,	"nn::timesrv::detail::service::IStaticService::SetStandardSteadyClockInternalOffset");
	create_insn	(0X7100034D38);
	set_name	(0X7100034D38,	"nn::timesrv::detail::service::IStaticService::GetStandardSteadyClockRtcValue");
	create_insn	(0X7100034D40);
	set_name	(0X7100034D40,	"nn::timesrv::detail::service::IStaticService::IsStandardUserSystemClockAutomaticCorrectionEnabled");
	create_insn	(0X7100034D48);
	set_name	(0X7100034D48,	"nn::timesrv::detail::service::IStaticService::SetStandardUserSystemClockAutomaticCorrectionEnabled");
	create_insn	(0X7100034D50);
	set_name	(0X7100034D50,	"nn::timesrv::detail::service::IStaticService::GetStandardUserSystemClockInitialYear");
	create_insn	(0X7100034D58);
	set_name	(0X7100034D58,	"nn::timesrv::detail::service::IStaticService::IsStandardNetworkSystemClockAccuracySufficient");
	create_insn	(0X7100034D60);
	set_name	(0X7100034D60,	"nn::timesrv::detail::service::IStaticService::GetStandardUserSystemClockAutomaticCorrectionUpdatedTime");
	create_insn	(0X7100034D68);
	set_name	(0X7100034D68,	"nn::timesrv::detail::service::IStaticService::CalculateMonotonicSystemClockBaseTimePoint");
	create_insn	(0X7100034D70);
	set_name	(0X7100034D70,	"nn::timesrv::detail::service::IStaticService::GetClockSnapshot");
	create_insn	(0X7100034D78);
	set_name	(0X7100034D78,	"nn::timesrv::detail::service::IStaticService::GetClockSnapshotFromSystemClockContext");
	create_insn	(0X7100034D80);
	set_name	(0X7100034D80,	"nn::timesrv::detail::service::IStaticService::CalculateStandardUserSystemClockDifferenceByUser");
	create_insn	(0X7100034D88);
	set_name	(0X7100034D88,	"nn::timesrv::detail::service::IStaticService::CalculateSpanBetween");
	create_insn	(0X7100034D90);
	set_name	(0X7100034D90,	"nullsub_65");
	create_insn	(0X7100034D94);
	set_name	(0X7100034D94,	"nullsub_66");
	create_insn	(0X7100034D98);
	set_name	(0X7100034D98,	"nn::timesrv::detail::service::IAlarmService::CreateWakeupAlarm");
	create_insn	(x=0X7100034D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034DAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034DB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100034DC4);
	set_name	(0X7100034DC4,	"nn::timesrv::detail::service::IAlarmService::CreateBackgroundTaskAlarm");
	create_insn	(x=0X7100034DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034DE4);
	op_stkvar	(x,	1);
	create_insn	(0X7100034DF0);
	set_name	(0X7100034DF0,	"nullsub_68");
	create_insn	(0X7100034DF4);
	set_name	(0X7100034DF4,	"nullsub_69");
	create_insn	(0X7100034DF8);
	set_name	(0X7100034DF8,	"nn::timesrv::detail::service::ITimeServiceManager::GetStaticServiceAsUser");
	create_insn	(x=0X7100034DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E18);
	op_stkvar	(x,	1);
	create_insn	(0X7100034E24);
	set_name	(0X7100034E24,	"nn::timesrv::detail::service::ITimeServiceManager::GetStaticServiceAsAdmin");
	create_insn	(x=0X7100034E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E44);
	op_stkvar	(x,	1);
	create_insn	(0X7100034E50);
	set_name	(0X7100034E50,	"nn::timesrv::detail::service::ITimeServiceManager::GetStaticServiceAsRepair");
	create_insn	(x=0X7100034E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E70);
	op_stkvar	(x,	1);
	create_insn	(0X7100034E7C);
	set_name	(0X7100034E7C,	"nn::timesrv::detail::service::ITimeServiceManager::GetStaticServiceAsServiceManager");
	create_insn	(x=0X7100034E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034E9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100034EA8);
	set_name	(0X7100034EA8,	"nn::timesrv::detail::service::ITimeServiceManager::SetupStandardSteadyClockCore");
	create_insn	(0X7100034EB0);
	set_name	(0X7100034EB0,	"nn::timesrv::detail::service::ITimeServiceManager::SetupStandardLocalSystemClockCore");
	create_insn	(0X7100034EB8);
	set_name	(0X7100034EB8,	"nn::timesrv::detail::service::ITimeServiceManager::SetupStandardNetworkSystemClockCore");
	create_insn	(0X7100034EC0);
	set_name	(0X7100034EC0,	"nn::timesrv::detail::service::ITimeServiceManager::SetupStandardUserSystemClockCore");
	create_insn	(0X7100034EC8);
	set_name	(0X7100034EC8,	"nn::timesrv::detail::service::ITimeServiceManager::SetupTimeZoneServiceCore");
	create_insn	(0X7100034ED0);
	set_name	(0X7100034ED0,	"nn::timesrv::detail::service::ITimeServiceManager::SetupEphemeralNetworkSystemClockCore");
	create_insn	(0X7100034ED8);
	set_name	(0X7100034ED8,	"nn::timesrv::detail::service::ITimeServiceManager::GetStandardLocalClockOperationEvent");
	create_insn	(0X7100034EE0);
	set_name	(0X7100034EE0,	"nn::timesrv::detail::service::ITimeServiceManager::GetStandardNetworkClockOperationEventForServiceManager");
	create_insn	(0X7100034EE8);
	set_name	(0X7100034EE8,	"nn::timesrv::detail::service::ITimeServiceManager::GetEphemeralNetworkClockOperationEventForServiceManager");
	create_insn	(0X7100034EF0);
	set_name	(0X7100034EF0,	"nn::timesrv::detail::service::ITimeServiceManager::GetStandardUserSystemClockAutomaticCorrectionUpdatedEvent");
	create_insn	(0X7100034EF8);
	set_name	(0X7100034EF8,	"nn::timesrv::detail::service::ITimeServiceManager::SetStandardSteadyClockBaseTime");
	create_insn	(0X7100034F00);
	set_name	(0X7100034F00,	"nn::timesrv::detail::service::ITimeServiceManager::GetClosestAlarmUpdatedEvent");
	create_insn	(0X7100034F08);
	set_name	(0X7100034F08,	"nn::timesrv::detail::service::ITimeServiceManager::CheckAndSignalAlarms");
	create_insn	(0X7100034F10);
	set_name	(0X7100034F10,	"nn::timesrv::detail::service::ITimeServiceManager::GetClosestAlarmInfo");
	create_insn	(0X7100034F18);
	set_name	(0X7100034F18,	"nullsub_70");
	create_insn	(0X7100034F1C);
	set_name	(0X7100034F1C,	"nullsub_71");
	create_insn	(0X7100034F20);
	set_name	(0X7100034F20,	"nn::timesrv::detail::service::IPowerStateRequestHandler::GetPowerStateRequestEventReadableHandle");
	create_insn	(0X7100034F28);
	set_name	(0X7100034F28,	"nn::timesrv::detail::service::IPowerStateRequestHandler::GetAndClearPowerStateRequest");
	create_insn	(0X7100034F30);
	set_name	(0X7100034F30,	"ServiceHandler_TimeM");
	create_insn	(x=0X7100034F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034F90);
	op_hex		(x,	1);
	create_insn	(x=0X7100034FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034FB0);
	op_stkvar	(x,	1);
	create_insn	(0X7100034FBC);
	create_insn	(x=0X7100034FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034FC8);
	op_stkvar	(x,	1);
	create_insn	(0X7100034FD4);
	create_insn	(x=0X7100034FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100034FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035020);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035024);
	op_stkvar	(x,	1);
	create_insn	(0X7100035030);
	create_insn	(0X7100035038);
	create_insn	(x=0X710003503C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035040);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035044);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035048);
	op_stkvar	(x,	1);
	set_cmt	(0X7100035070,	"switch 101 cases",	0);
	create_insn	(x=0X7100035080);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100035084);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100035090,	"switch jump",	0);
	set_cmt	(0X7100035094,	"jumptable 0000007100035090 case 0",	1);
	create_insn	(0X7100035094);
	create_insn	(x=0X710003509C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000350A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000350AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000350B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000350BC);
	create_insn	(x=0X71000350DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000350E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000350EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000350F0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000350FC,	"jumptable 0000007100035090 case 5",	1);
	create_insn	(0X71000350FC);
	create_insn	(x=0X7100035104);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035114);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035118);
	op_stkvar	(x,	1);
	set_cmt	(0X7100035124,	"jumptable 0000007100035090 case 6",	1);
	create_insn	(0X7100035124);
	create_insn	(x=0X710003512C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003513C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035140);
	op_stkvar	(x,	1);
	set_cmt	(0X710003514C,	"jumptable 0000007100035090 case 9",	1);
	create_insn	(0X710003514C);
	create_insn	(x=0X7100035154);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035160);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035164);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035168);
	op_stkvar	(x,	1);
	set_cmt	(0X7100035174,	"jumptable 0000007100035090 case 10",	1);
	create_insn	(0X7100035174);
	create_insn	(x=0X710003517C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035188);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003518C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035190);
	op_stkvar	(x,	1);
	set_cmt	(0X710003519C,	"jumptable 0000007100035090 case 11",	1);
	create_insn	(0X710003519C);
	create_insn	(x=0X71000351A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000351B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000351B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000351B8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000351C4,	"jumptable 0000007100035090 case 12",	1);
	create_insn	(0X71000351C4);
	create_insn	(x=0X71000351CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000351D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000351DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000351E0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000351EC,	"jumptable 0000007100035090 case 13",	1);
	create_insn	(0X71000351EC);
	create_insn	(x=0X71000351F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035200);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035204);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035208);
	op_stkvar	(x,	1);
	set_cmt	(0X7100035214,	"jumptable 0000007100035090 case 14",	1);
	create_insn	(0X7100035214);
	create_insn	(x=0X710003521C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003522C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035230);
	op_stkvar	(x,	1);
	set_cmt	(0X710003523C,	"jumptable 0000007100035090 case 15",	1);
	create_insn	(0X710003523C);
	create_insn	(x=0X7100035240);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003524C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035250);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035254);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003525C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035260);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035264);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003526C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035274);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000352A4);
	op_hex		(x,	1);
	set_cmt	(0X71000352B8,	"jumptable 0000007100035090 case 50",	1);
	create_insn	(0X71000352B8);
	create_insn	(x=0X71000352C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000352CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000352D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000352D4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000352E0,	"jumptable 0000007100035090 case 51",	1);
	create_insn	(0X71000352E0);
	create_insn	(x=0X71000352E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000352F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000352F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000352FC);
	op_stkvar	(x,	1);
	set_cmt	(0X7100035308,	"jumptable 0000007100035090 case 52",	1);
	create_insn	(0X7100035308);
	create_insn	(x=0X7100035310);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003531C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035320);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035324);
	op_stkvar	(x,	1);
	set_cmt	(0X7100035330,	"jumptable 0000007100035090 case 60",	1);
	create_insn	(0X7100035330);
	create_insn	(x=0X7100035338);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035344);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035348);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003534C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100035358,	"jumptable 0000007100035090 case 100",	1);
	create_insn	(0X7100035358);
	create_insn	(x=0X7100035360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035368);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035370);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035374);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003537C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035380);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035384);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003538C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035390);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035394);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000353D4);
	op_hex		(x,	1);
	create_insn	(0X71000353E8);
	create_insn	(x=0X71000353F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000353FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035400);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035404);
	op_stkvar	(x,	1);
	create_insn	(0X7100035410);
	create_insn	(x=0X7100035414);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035418);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035424);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035428);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035430);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035434);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003543C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035444);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035448);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035478);
	op_hex		(x,	1);
	create_insn	(x=0X71000354B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000354C8);
	create_insn	(0X71000354D4);
	create_insn	(x=0X71000354E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000354F8);
	op_stkvar	(x,	1);
	create_insn	(0X7100035504);
	set_cmt	(0X710003550C,	"jumptable 0000007100035090 default case, cases 1-4,7,8,16-49,53-59,61-99",	1);
	set_name	(0X710003550C,	"def_7100035090");
	create_insn	(x=0X7100035510);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035514);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035518);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003551C);
	op_stkvar	(x,	1);
	create_insn	(0X7100035528);
	create_insn	(x=0X710003552C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035530);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035534);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035538);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035544);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035550);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035554);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003556C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035574);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035578);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003557C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035584);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003558C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035590);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000355A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000355B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000355B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000355C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000355D4);
	op_hex		(x,	1);
	create_insn	(x=0X7100035600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035628);
	op_stkvar	(x,	1);
	create_insn	(0X7100035634);
	create_insn	(x=0X7100035638);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035648);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035654);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035658);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035668);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003566C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035670);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035678);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003567C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035690);
	op_stkvar	(x,	1);
	create_insn	(0X710003569C);
	create_insn	(x=0X71000356A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000356B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000356D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000356D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000356D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000356DC);
	op_stkvar	(x,	1);
	create_insn	(0X71000356E8);
	create_insn	(x=0X71000356F0);
	op_stkvar	(x,	1);
	create_insn	(0X71000356FC);
	create_insn	(x=0X7100035700);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035704);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035708);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003570C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035718);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035728);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003573C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035740);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003574C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035750);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003575C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035760);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035764);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003577C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035784);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003578C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035798);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000357A8);
	op_hex		(x,	1);
	create_insn	(x=0X71000357D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000357E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000357F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000357FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100035808);
	create_insn	(x=0X710003580C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003581C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003582C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003583C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035844);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003584C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100035850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035864);
	op_stkvar	(x,	1);
	create_insn	(0X7100035870);
	create_insn	(x=0X7100035878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003588C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000358BC);
	create_insn	(x=0X71000358C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000358D0);
	create_insn	(x=0X71000358D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000358FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035910);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035914);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003591C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035924);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035928);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003592C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035934);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035938);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035958);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035960);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003596C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003597C);
	op_hex		(x,	1);
	create_insn	(x=0X71000359A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000359BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000359C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000359D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000359DC);
	create_insn	(x=0X71000359E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000359F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000359FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100035A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A38);
	op_stkvar	(x,	1);
	create_insn	(0X7100035A44);
	create_insn	(x=0X7100035A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035A84);
	op_stkvar	(x,	1);
	create_insn	(0X7100035A90);
	create_insn	(x=0X7100035A98);
	op_stkvar	(x,	1);
	create_insn	(0X7100035AA4);
	create_insn	(x=0X7100035AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B50);
	op_hex		(x,	1);
	create_insn	(x=0X7100035B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035BA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100035BB0);
	create_insn	(x=0X7100035BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035BF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100035BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C0C);
	op_stkvar	(x,	1);
	create_insn	(0X7100035C18);
	create_insn	(x=0X7100035C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C58);
	op_stkvar	(x,	1);
	create_insn	(0X7100035C64);
	create_insn	(x=0X7100035C6C);
	op_stkvar	(x,	1);
	create_insn	(0X7100035C78);
	create_insn	(x=0X7100035C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035D1C);
	op_hex		(x,	1);
	create_insn	(x=0X7100035D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035D38);
	op_hex		(x,	1);
	create_insn	(x=0X7100035D78);
	op_stkvar	(x,	1);
	create_insn	(0X7100035D88);
	create_insn	(x=0X7100035D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035DA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100035DAC);
	create_insn	(x=0X7100035DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035DD0);
	op_stkvar	(x,	1);
	create_insn	(0X7100035DDC);
	create_insn	(0X7100035DE4);
	create_insn	(x=0X7100035DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035EA0);
	op_hex		(x,	1);
	create_insn	(x=0X7100035ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035EE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100035EF0);
	create_insn	(x=0X7100035EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F08);
	op_stkvar	(x,	1);
	create_insn	(0X7100035F14);
	create_insn	(x=0X7100035F18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F38);
	op_stkvar	(x,	1);
	create_insn	(0X7100035F44);
	create_insn	(0X7100035F4C);
	create_insn	(x=0X7100035F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100035FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036008);
	op_hex		(x,	1);
	create_insn	(x=0X7100036034);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036048);
	op_stkvar	(x,	1);
	create_insn	(0X7100036058);
	create_insn	(x=0X7100036064);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036068);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003606C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036070);
	op_stkvar	(x,	1);
	create_insn	(0X710003607C);
	create_insn	(x=0X7100036080);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036090);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000360AC);
	create_insn	(0X71000360B4);
	create_insn	(x=0X71000360B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000360FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036100);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036104);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036108);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003610C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036114);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036118);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003614C);
	op_hex		(x,	1);
	create_insn	(x=0X7100036154);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003615C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036160);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036170);
	op_hex		(x,	1);
	create_insn	(x=0X71000361B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000361C0);
	create_insn	(x=0X71000361CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000361D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000361D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000361D8);
	op_stkvar	(x,	1);
	create_insn	(0X71000361E4);
	create_insn	(x=0X71000361F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036208);
	op_stkvar	(x,	1);
	create_insn	(0X7100036214);
	create_insn	(0X710003621C);
	create_insn	(x=0X7100036220);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036224);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003622C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003623C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003624C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003626C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036278);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003627C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036280);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036284);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036288);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003628C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036290);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000362B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000362C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000362D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000362D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000362E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000362EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036300);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036304);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036308);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036318);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036320);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036330);
	op_hex		(x,	1);
	create_insn	(x=0X7100036370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003637C);
	op_stkvar	(x,	1);
	create_insn	(0X7100036388);
	create_insn	(x=0X7100036394);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036398);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003639C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000363A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000363AC);
	create_insn	(x=0X71000363C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000363CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000363D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000363E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000363F8);
	create_insn	(0X7100036400);
	create_insn	(x=0X7100036404);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003640C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036410);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003641C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036428);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003642C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036444);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036448);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003644C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036454);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003645C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003646C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003648C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036490);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000364A8);
	op_hex		(x,	1);
	create_insn	(x=0X71000364E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000364F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000364FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100036508);
	create_insn	(x=0X710003651C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003653C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036550);
	op_stkvar	(x,	1);
	create_insn	(0X710003655C);
	create_insn	(x=0X7100036564);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003656C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036578);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003657C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036584);
	op_stkvar	(x,	1);
	create_insn	(0X7100036590);
	create_insn	(x=0X7100036598);
	op_stkvar	(x,	1);
	create_insn	(0X71000365A4);
	create_insn	(x=0X71000365A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000365FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036600);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036604);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003660C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036610);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036630);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036634);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003664C);
	op_hex		(x,	1);
	create_insn	(x=0X710003668C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036698);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000366A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000366AC);
	create_insn	(x=0X71000366C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000366CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000366E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000366F4);
	op_stkvar	(x,	1);
	create_insn	(0X7100036700);
	create_insn	(x=0X7100036708);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036710);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003671C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036720);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036728);
	op_stkvar	(x,	1);
	create_insn	(0X7100036734);
	create_insn	(x=0X710003673C);
	op_stkvar	(x,	1);
	create_insn	(0X7100036748);
	create_insn	(x=0X710003674C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036750);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036758);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036770);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036774);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003678C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036790);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036794);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003679C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000367F0);
	op_hex		(x,	1);
	create_insn	(x=0X7100036830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003683C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036844);
	op_stkvar	(x,	1);
	create_insn	(0X7100036850);
	create_insn	(x=0X7100036864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036898);
	op_stkvar	(x,	1);
	create_insn	(0X71000368A4);
	create_insn	(x=0X71000368AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000368B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000368C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000368C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000368C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000368CC);
	op_stkvar	(x,	1);
	create_insn	(0X71000368D8);
	create_insn	(x=0X71000368E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000368EC);
	create_insn	(x=0X71000368F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000368F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000368F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000368FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036908);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003692C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036934);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036938);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036940);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036944);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003694C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036954);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036958);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036978);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003697C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036994);
	op_hex		(x,	1);
	create_insn	(x=0X71000369D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000369E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000369E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000369F4);
	create_insn	(x=0X7100036A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A3C);
	op_stkvar	(x,	1);
	create_insn	(0X7100036A48);
	create_insn	(x=0X7100036A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A70);
	op_stkvar	(x,	1);
	create_insn	(0X7100036A7C);
	create_insn	(x=0X7100036A84);
	op_stkvar	(x,	1);
	create_insn	(0X7100036A90);
	create_insn	(x=0X7100036A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036B38);
	op_hex		(x,	1);
	create_insn	(x=0X7100036B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036B8C);
	op_stkvar	(x,	1);
	create_insn	(0X7100036B98);
	create_insn	(x=0X7100036BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036BE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100036BEC);
	create_insn	(x=0X7100036BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C14);
	op_stkvar	(x,	1);
	create_insn	(0X7100036C20);
	create_insn	(x=0X7100036C28);
	op_stkvar	(x,	1);
	create_insn	(0X7100036C34);
	create_insn	(x=0X7100036C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036CE0);
	op_hex		(x,	1);
	create_insn	(x=0X7100036D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036D2C);
	op_stkvar	(x,	1);
	create_insn	(0X7100036D38);
	create_insn	(x=0X7100036D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036D58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036D6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036D74);
	op_stkvar	(x,	1);
	create_insn	(0X7100036D84);
	create_insn	(x=0X7100036D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036D9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100036DA8);
	create_insn	(0X7100036DB0);
	set_name	(0X7100036DB0,	"ServiceHandler_TimeSU");
	create_insn	(x=0X7100036DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036E10);
	op_hex		(x,	1);
	create_insn	(x=0X7100036E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036E30);
	op_stkvar	(x,	1);
	create_insn	(0X7100036E3C);
	create_insn	(x=0X7100036E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036E48);
	op_stkvar	(x,	1);
	create_insn	(0X7100036E54);
	create_insn	(x=0X7100036E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036E6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036EA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100036EB0);
	create_insn	(0X7100036EB8);
	create_insn	(x=0X7100036EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036EC8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100036EF0,	"switch 103 cases",	0);
	create_insn	(x=0X7100036F00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100036F04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100036F10,	"switch jump",	0);
	set_cmt	(0X7100036F14,	"jumptable 0000007100036F10 case 0",	1);
	create_insn	(0X7100036F14);
	create_insn	(x=0X7100036F1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036F28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036F2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036F30);
	op_stkvar	(x,	1);
	create_insn	(0X7100036F3C);
	create_insn	(x=0X7100036F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036F78);
	op_stkvar	(x,	1);
	create_insn	(0X7100036F84);
	create_insn	(x=0X7100036FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036FB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100036FC4);
	create_insn	(x=0X7100036FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036FE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100036FF0);
	op_stkvar	(x,	1);
	set_cmt	(0X7100036FFC,	"jumptable 0000007100036F10 case 1",	1);
	create_insn	(0X7100036FFC);
	create_insn	(x=0X7100037004);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037010);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037014);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037018);
	op_stkvar	(x,	1);
	set_cmt	(0X7100037024,	"jumptable 0000007100036F10 case 2",	1);
	create_insn	(0X7100037024);
	create_insn	(x=0X710003702C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037038);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003703C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037040);
	op_stkvar	(x,	1);
	set_cmt	(0X710003704C,	"jumptable 0000007100036F10 case 3",	1);
	create_insn	(0X710003704C);
	create_insn	(x=0X7100037054);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037060);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037064);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037068);
	op_stkvar	(x,	1);
	set_cmt	(0X7100037074,	"jumptable 0000007100036F10 case 4",	1);
	create_insn	(0X7100037074);
	create_insn	(x=0X710003707C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037088);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003708C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037090);
	op_stkvar	(x,	1);
	set_cmt	(0X710003709C,	"jumptable 0000007100036F10 case 5",	1);
	create_insn	(0X710003709C);
	create_insn	(x=0X71000370A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000370B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000370B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000370B8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000370C4,	"jumptable 0000007100036F10 case 20",	1);
	create_insn	(0X71000370C4);
	create_insn	(x=0X71000370CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000370D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000370DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000370E0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000370EC,	"jumptable 0000007100036F10 case 50",	1);
	create_insn	(0X71000370EC);
	create_insn	(x=0X71000370F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000370F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000370FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037104);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037108);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037114);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037118);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003711C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037120);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037124);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037128);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037168);
	op_hex		(x,	1);
	create_insn	(x=0X71000371B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000371BC);
	op_stkvar	(x,	1);
	set_cmt	(0X71000371C8,	"jumptable 0000007100036F10 case 51",	1);
	create_insn	(0X71000371C8);
	create_insn	(x=0X71000371D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000371DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000371E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000371E4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000371F0,	"jumptable 0000007100036F10 case 100",	1);
	create_insn	(0X71000371F0);
	create_insn	(x=0X71000371F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037204);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037208);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003720C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100037218,	"jumptable 0000007100036F10 case 101",	1);
	create_insn	(0X7100037218);
	create_insn	(x=0X7100037220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003722C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037230);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037234);
	op_stkvar	(x,	1);
	set_cmt	(0X7100037240,	"jumptable 0000007100036F10 case 102",	1);
	create_insn	(0X7100037240);
	create_insn	(x=0X7100037248);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037254);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003725C);
	op_stkvar	(x,	1);
	create_insn	(0X7100037268);
	create_insn	(x=0X7100037270);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003727C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037280);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037284);
	op_stkvar	(x,	1);
	create_insn	(0X7100037290);
	create_insn	(x=0X7100037298);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000372B8);
	create_insn	(x=0X71000372C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372D4);
	op_stkvar	(x,	1);
	create_insn	(0X71000372E0);
	create_insn	(x=0X71000372E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000372FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100037308);
	create_insn	(0X7100037314);
	create_insn	(x=0X7100037328);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037334);
	op_stkvar	(x,	1);
	set_cmt	(0X7100037344,	"jumptable 0000007100036F10 default case, cases 6-19,21-49,52-99",	1);
	set_name	(0X7100037344,	"def_7100036F10");
	create_insn	(x=0X7100037348);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003734C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037350);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037354);
	op_stkvar	(x,	1);
	create_insn	(0X7100037360);
	create_insn	(x=0X7100037364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037368);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003736C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003737C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003738C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000373FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003740C);
	op_hex		(x,	1);
	create_insn	(x=0X7100037438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003744C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037458);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037460);
	op_stkvar	(x,	1);
	create_insn	(0X710003746C);
	create_insn	(x=0X7100037470);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037480);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003748C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037490);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000374A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000374A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000374A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000374B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000374B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000374C8);
	op_stkvar	(x,	1);
	create_insn	(0X71000374D4);
	create_insn	(x=0X71000374DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000374F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003750C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037510);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037514);
	op_stkvar	(x,	1);
	create_insn	(0X7100037520);
	create_insn	(x=0X7100037528);
	op_stkvar	(x,	1);
	create_insn	(0X7100037534);
	create_insn	(x=0X7100037538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003753C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037540);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037544);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037550);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003755C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037560);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037574);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037578);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037584);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003758C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037590);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037594);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037598);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003759C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000375B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000375BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000375C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000375D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000375E0);
	op_hex		(x,	1);
	create_insn	(x=0X710003760C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037620);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003762C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037634);
	op_stkvar	(x,	1);
	create_insn	(0X7100037640);
	create_insn	(x=0X7100037644);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037654);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037660);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037664);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037674);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003767C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037684);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100037688);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003769C);
	op_stkvar	(x,	1);
	create_insn	(0X71000376A8);
	create_insn	(x=0X71000376B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000376C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000376DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000376E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000376E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000376E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000376F4);
	create_insn	(x=0X71000376FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100037708);
	create_insn	(x=0X710003770C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037710);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037718);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037730);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037734);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003774C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003775C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037760);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003776C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037770);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037788);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037790);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037798);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000377A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000377B4);
	op_hex		(x,	1);
	create_insn	(x=0X71000377E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000377F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037800);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037808);
	op_stkvar	(x,	1);
	create_insn	(0X7100037814);
	create_insn	(x=0X7100037818);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037828);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037834);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037838);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003784C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037858);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003785C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037870);
	op_stkvar	(x,	1);
	create_insn	(0X710003787C);
	create_insn	(x=0X7100037884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037898);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000378B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000378B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000378B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000378BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000378C8);
	create_insn	(x=0X71000378D0);
	op_stkvar	(x,	1);
	create_insn	(0X71000378DC);
	create_insn	(x=0X71000378E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000378E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000378E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000378EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000378F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037904);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003791C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037928);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003792C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037930);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037934);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037938);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003793C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037940);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037944);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003795C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037964);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003796C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037978);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037988);
	op_hex		(x,	1);
	create_insn	(x=0X71000379B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000379C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000379D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000379DC);
	op_stkvar	(x,	1);
	create_insn	(0X71000379E8);
	create_insn	(x=0X71000379EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000379FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100037A30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A44);
	op_stkvar	(x,	1);
	create_insn	(0X7100037A50);
	create_insn	(x=0X7100037A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037A90);
	op_stkvar	(x,	1);
	create_insn	(0X7100037A9C);
	create_insn	(x=0X7100037AA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100037AB0);
	create_insn	(x=0X7100037AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037AD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B5C);
	op_hex		(x,	1);
	create_insn	(x=0X7100037B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037BB0);
	op_stkvar	(x,	1);
	create_insn	(0X7100037BBC);
	create_insn	(x=0X7100037BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100037C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C18);
	op_stkvar	(x,	1);
	create_insn	(0X7100037C24);
	create_insn	(x=0X7100037C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C64);
	op_stkvar	(x,	1);
	create_insn	(0X7100037C70);
	create_insn	(x=0X7100037C78);
	op_stkvar	(x,	1);
	create_insn	(0X7100037C84);
	create_insn	(x=0X7100037C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037CEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037D04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037D30);
	op_hex		(x,	1);
	create_insn	(x=0X7100037D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037D84);
	op_stkvar	(x,	1);
	create_insn	(0X7100037D90);
	create_insn	(x=0X7100037D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037DC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037DD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100037DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037DEC);
	op_stkvar	(x,	1);
	create_insn	(0X7100037DF8);
	create_insn	(x=0X7100037E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E38);
	op_stkvar	(x,	1);
	create_insn	(0X7100037E44);
	create_insn	(x=0X7100037E4C);
	op_stkvar	(x,	1);
	create_insn	(0X7100037E58);
	create_insn	(x=0X7100037E5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037F00);
	op_hex		(x,	1);
	create_insn	(x=0X7100037F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037F54);
	op_stkvar	(x,	1);
	create_insn	(0X7100037F60);
	create_insn	(x=0X7100037F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037FA8);
	op_stkvar	(x,	1);
	create_insn	(0X7100037FB4);
	create_insn	(x=0X7100037FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100037FDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100037FE8);
	create_insn	(x=0X7100037FF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100037FFC);
	create_insn	(x=0X7100038000);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038004);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003800C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003801C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038020);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003802C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038034);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038044);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038048);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003804C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038050);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038054);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038058);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003805C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038060);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038080);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038098);
	op_hex		(x,	1);
	create_insn	(x=0X71000380D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000380E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000380F0);
	create_insn	(x=0X7100038104);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038114);
	op_hex		(x,	1);
	create_insn	(0X7100038130);
	create_insn	(x=0X710003813C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038140);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038144);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038148);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038154);
	op_stkvar	(x,	1);
	create_insn	(0X7100038164);
	create_insn	(x=0X7100038168);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003816C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038170);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038174);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038184);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038188);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003819C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000381E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038200);
	op_hex		(x,	1);
	create_insn	(x=0X7100038240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003824C);
	op_stkvar	(x,	1);
	create_insn	(0X7100038258);
	create_insn	(x=0X710003826C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038278);
	op_stkvar	(x,	1);
	create_insn	(0X7100038294);
	create_insn	(x=0X71000382A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000382C8);
	create_insn	(x=0X71000382CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000382F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038300);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038314);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003831C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038320);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038324);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038328);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003832C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038360);
	op_hex		(x,	1);
	create_insn	(x=0X7100038370);
	op_hex		(x,	1);
	create_insn	(x=0X71000383B0);
	op_stkvar	(x,	1);
	create_insn	(0X71000383C0);
	create_insn	(0X71000383C8);
	create_insn	(x=0X71000383DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000383EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000383F8);
	create_insn	(x=0X7100038404);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003840C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038410);
	op_stkvar	(x,	1);
	create_insn	(0X710003841C);
	create_insn	(x=0X7100038420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038424);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038428);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003842C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003843C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038440);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003844C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038454);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003846C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038470);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038474);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038478);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003847C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038480);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000384A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000384B8);
	op_hex		(x,	1);
	create_insn	(x=0X71000384F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038504);
	op_stkvar	(x,	1);
	create_insn	(0X7100038510);
	create_insn	(x=0X7100038524);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038530);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038534);
	op_hex		(x,	1);
	create_insn	(0X7100038550);
	create_insn	(x=0X710003855C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038560);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038564);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038568);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038574);
	op_stkvar	(x,	1);
	create_insn	(0X7100038584);
	create_insn	(x=0X7100038588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003858C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038590);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038594);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000385E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038608);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038620);
	op_hex		(x,	1);
	create_insn	(x=0X7100038660);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003866C);
	op_stkvar	(x,	1);
	create_insn	(0X7100038678);
	create_insn	(x=0X710003868C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038698);
	op_stkvar	(x,	1);
	create_insn	(0X71000386B4);
	create_insn	(x=0X71000386C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000386C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000386C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000386CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000386D8);
	op_stkvar	(x,	1);
	create_insn	(0X71000386E8);
	create_insn	(x=0X71000386EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000386F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000386F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000386F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038708);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003870C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038718);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038720);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038730);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038734);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003873C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038740);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038744);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038748);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003874C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038764);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003876C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038774);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038788);
	op_hex		(x,	1);
	create_insn	(x=0X71000387B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000387C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000387D4);
	op_stkvar	(x,	1);
	create_insn	(0X71000387E0);
	create_insn	(x=0X71000387E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000387F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038800);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038814);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003881C);
	op_stkvar	(x,	1);
	create_insn	(0X710003882C);
	create_insn	(x=0X7100038838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003883C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038844);
	op_stkvar	(x,	1);
	create_insn	(0X7100038850);
	create_insn	(0X7100038858);
	create_insn	(x=0X710003885C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038860);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003886C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003887C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038880);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003888C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038894);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000388F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038908);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038910);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038918);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038924);
	op_hex		(x,	1);
	create_insn	(x=0X7100038964);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038970);
	op_stkvar	(x,	1);
	create_insn	(0X710003897C);
	create_insn	(x=0X7100038990);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003899C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000389A0);
	op_hex		(x,	1);
	create_insn	(0X71000389B8);
	create_insn	(x=0X71000389C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000389C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000389CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000389D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000389D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000389E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000389F0);
	create_insn	(x=0X71000389F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000389F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000389FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038ACC);
	op_hex		(x,	1);
	create_insn	(x=0X7100038B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038B18);
	op_stkvar	(x,	1);
	create_insn	(0X7100038B24);
	create_insn	(x=0X7100038B30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038B3C);
	op_stkvar	(x,	1);
	create_insn	(0X7100038B48);
	create_insn	(x=0X7100038B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038B7C);
	op_stkvar	(x,	1);
	create_insn	(0X7100038B94);
	create_insn	(0X7100038B9C);
	create_insn	(x=0X7100038BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038CA8);
	op_hex		(x,	1);
	create_insn	(x=0X7100038CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038CF4);
	op_stkvar	(x,	1);
	create_insn	(0X7100038D00);
	create_insn	(x=0X7100038D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D18);
	op_stkvar	(x,	1);
	create_insn	(0X7100038D24);
	create_insn	(x=0X7100038D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D58);
	op_stkvar	(x,	1);
	create_insn	(0X7100038D70);
	create_insn	(0X7100038D78);
	create_insn	(x=0X7100038D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038E44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038E54);
	op_hex		(x,	1);
	create_insn	(x=0X7100038E80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038EA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100038EAC);
	create_insn	(x=0X7100038EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038ED0);
	op_hex		(x,	1);
	create_insn	(0X7100038EEC);
	create_insn	(x=0X7100038EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F04);
	op_stkvar	(x,	1);
	create_insn	(0X7100038F10);
	create_insn	(x=0X7100038F18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F30);
	op_stkvar	(x,	1);
	create_insn	(0X7100038F40);
	create_insn	(x=0X7100038F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038F9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100038FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003900C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039010);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003901C);
	op_hex		(x,	1);
	create_insn	(x=0X7100039048);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003905C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039068);
	op_stkvar	(x,	1);
	create_insn	(0X7100039074);
	create_insn	(x=0X7100039078);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039088);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039094);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039098);
	op_hex		(x,	1);
	create_insn	(0X71000390B4);
	create_insn	(x=0X71000390C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000390C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000390C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000390CC);
	op_stkvar	(x,	1);
	create_insn	(0X71000390D8);
	create_insn	(x=0X71000390E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000390E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000390F8);
	op_stkvar	(x,	1);
	create_insn	(0X7100039108);
	set_name	(0X7100039108,	"ServiceHandler_ISystemClock_");
	create_insn	(x=0X710003910C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039110);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003911C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039128);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039130);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003915C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039168);
	op_hex		(x,	1);
	create_insn	(x=0X7100039184);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039188);
	op_stkvar	(x,	1);
	create_insn	(0X7100039194);
	create_insn	(x=0X710003919C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000391A0);
	op_stkvar	(x,	1);
	create_insn	(0X71000391AC);
	create_insn	(x=0X71000391B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000391B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000391C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000391F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000391FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100039208);
	create_insn	(0X7100039210);
	set_name	(0X7100039210,	"ServiceHandler_ISystemClock");
	create_insn	(x=0X7100039214);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039218);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003921C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039220);
	op_stkvar	(x,	1);
	set_cmt	(0X7100039228,	"switch 5 cases",	0);
	create_insn	(x=0X7100039238);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003923C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100039258,	"switch jump",	0);
	set_cmt	(0X710003925C,	"jumptable 0000007100039258 case 0",	1);
	create_insn	(0X710003925C);
	create_insn	(x=0X7100039264);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039274);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039278);
	op_stkvar	(x,	1);
	set_cmt	(0X7100039284,	"jumptable 0000007100039258 default case",	1);
	create_insn	(0X7100039284);
	set_name	(0X7100039284,	"def_7100039258");
	set_cmt	(0X7100039290,	"jumptable 0000007100039258 case 1",	1);
	create_insn	(0X7100039290);
	create_insn	(x=0X7100039298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003929C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000392F0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000392FC,	"jumptable 0000007100039258 case 2",	1);
	create_insn	(0X71000392FC);
	create_insn	(x=0X7100039304);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039314);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039318);
	op_stkvar	(x,	1);
	set_cmt	(0X7100039324,	"jumptable 0000007100039258 case 3",	1);
	create_insn	(0X7100039324);
	create_insn	(x=0X710003932C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039338);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003933C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039340);
	op_stkvar	(x,	1);
	set_cmt	(0X710003934C,	"jumptable 0000007100039258 case 4",	1);
	create_insn	(0X710003934C);
	create_insn	(x=0X7100039354);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039364);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039368);
	op_stkvar	(x,	1);
	create_insn	(0X7100039374);
	create_insn	(x=0X71000393A0);
	op_hex		(x,	1);
	create_insn	(x=0X71000393E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000393F0);
	create_insn	(0X71000393F8);
	create_insn	(x=0X710003940C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003941C);
	op_stkvar	(x,	1);
	create_insn	(0X7100039428);
	create_insn	(0X7100039430);
	create_insn	(x=0X7100039434);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039438);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003943C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039450);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039454);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039468);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039478);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003947C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039480);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039484);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039488);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003948C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039490);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039494);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000394B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000394CC);
	op_hex		(x,	1);
	create_insn	(x=0X710003950C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039518);
	op_stkvar	(x,	1);
	create_insn	(0X7100039524);
	create_insn	(x=0X7100039538);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039544);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039548);
	op_hex		(x,	1);
	create_insn	(0X7100039564);
	create_insn	(x=0X7100039570);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039574);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039578);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003957C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039588);
	op_stkvar	(x,	1);
	create_insn	(0X7100039598);
	create_insn	(x=0X710003959C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000395FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039614);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003961C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039638);
	op_hex		(x,	1);
	create_insn	(x=0X7100039678);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039684);
	op_stkvar	(x,	1);
	create_insn	(0X7100039690);
	create_insn	(x=0X71000396A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000396B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000396C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000396CC);
	op_stkvar	(x,	1);
	create_insn	(0X71000396DC);
	create_insn	(x=0X71000396E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000396EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000396F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000396F4);
	op_stkvar	(x,	1);
	create_insn	(0X7100039700);
	create_insn	(0X7100039708);
	create_insn	(x=0X710003970C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039710);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039718);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039728);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003972C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039738);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039740);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039750);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003975C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039760);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003976C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039790);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000397A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000397B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000397BC);
	op_hex		(x,	1);
	create_insn	(x=0X71000397FC);
	op_stkvar	(x,	1);
	create_insn	(0X710003980C);
	create_insn	(x=0X7100039818);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003981C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039820);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039824);
	op_stkvar	(x,	1);
	create_insn	(0X7100039830);
	create_insn	(x=0X7100039844);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039854);
	op_stkvar	(x,	1);
	create_insn	(0X7100039860);
	create_insn	(0X7100039868);
	create_insn	(x=0X710003986C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039874);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039878);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039890);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039894);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000398F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039910);
	op_hex		(x,	1);
	create_insn	(x=0X7100039950);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003995C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039964);
	op_stkvar	(x,	1);
	create_insn	(0X7100039970);
	create_insn	(x=0X7100039984);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039990);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000399A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000399B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000399C4);
	create_insn	(x=0X71000399CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000399D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000399E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000399E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000399E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000399EC);
	op_stkvar	(x,	1);
	create_insn	(0X71000399F8);
	create_insn	(x=0X7100039A00);
	op_stkvar	(x,	1);
	create_insn	(0X7100039A0C);
	set_name	(0X7100039A0C,	"ServiceHandler_ISteadyClock_");
	create_insn	(x=0X7100039A10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039A6C);
	op_hex		(x,	1);
	create_insn	(x=0X7100039A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039A8C);
	op_stkvar	(x,	1);
	create_insn	(0X7100039A98);
	create_insn	(x=0X7100039AA0);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_6(void) {
        auto x;
#define id x

	create_insn	(x=0X7100039AA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100039AB0);
	create_insn	(x=0X7100039AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039B00);
	op_stkvar	(x,	1);
	create_insn	(0X7100039B0C);
	create_insn	(0X7100039B14);
	set_name	(0X7100039B14,	"ServiceHandler_ISteadyClock");
	create_insn	(x=0X7100039B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039B6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039B80);
	op_stkvar	(x,	1);
	create_insn	(0X7100039B8C);
	create_insn	(x=0X7100039BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039C1C);
	op_hex		(x,	1);
	create_insn	(x=0X7100039C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039C70);
	op_stkvar	(x,	1);
	create_insn	(0X7100039C7C);
	create_insn	(x=0X7100039C94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CA8);
	op_stkvar	(x,	1);
	create_insn	(0X7100039CB4);
	create_insn	(x=0X7100039CBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CD0);
	op_stkvar	(x,	1);
	create_insn	(0X7100039CDC);
	create_insn	(x=0X7100039CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039CF8);
	op_stkvar	(x,	1);
	create_insn	(0X7100039D04);
	create_insn	(x=0X7100039D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D20);
	op_stkvar	(x,	1);
	create_insn	(0X7100039D2C);
	create_insn	(x=0X7100039D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D48);
	op_stkvar	(x,	1);
	create_insn	(0X7100039D54);
	create_insn	(0X7100039D60);
	create_insn	(x=0X7100039D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100039DAC);
	create_insn	(x=0X7100039DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E4C);
	op_hex		(x,	1);
	create_insn	(x=0X7100039E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039E98);
	op_stkvar	(x,	1);
	create_insn	(0X7100039EA4);
	create_insn	(x=0X7100039EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039EB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039EE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100039EF0);
	create_insn	(x=0X7100039EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F08);
	op_stkvar	(x,	1);
	create_insn	(0X7100039F14);
	create_insn	(0X7100039F1C);
	create_insn	(x=0X7100039F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039FA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100039FB8);
	op_hex		(x,	1);
	create_insn	(x=0X7100039FF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A004);
	op_stkvar	(x,	1);
	create_insn	(0X710003A010);
	create_insn	(x=0X710003A024);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A030);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A034);
	op_hex		(x,	1);
	create_insn	(0X710003A050);
	create_insn	(x=0X710003A05C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A060);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A064);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A068);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A074);
	op_stkvar	(x,	1);
	create_insn	(0X710003A084);
	create_insn	(x=0X710003A088);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A090);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A094);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A0E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A108);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A120);
	op_hex		(x,	1);
	create_insn	(x=0X710003A160);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A16C);
	op_stkvar	(x,	1);
	create_insn	(0X710003A178);
	create_insn	(x=0X710003A18C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A19C);
	op_hex		(x,	1);
	create_insn	(0X710003A1B8);
	create_insn	(x=0X710003A1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A1C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A1CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A1D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A1DC);
	op_stkvar	(x,	1);
	create_insn	(0X710003A1EC);
	create_insn	(x=0X710003A1F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A1F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A1F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A1FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A20C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A210);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A21C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A224);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A234);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A238);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A250);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A270);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A288);
	op_hex		(x,	1);
	create_insn	(x=0X710003A2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A2D4);
	op_stkvar	(x,	1);
	create_insn	(0X710003A2E0);
	create_insn	(x=0X710003A2F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A300);
	op_stkvar	(x,	1);
	create_insn	(0X710003A31C);
	create_insn	(x=0X710003A328);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A32C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A330);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A334);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A340);
	op_stkvar	(x,	1);
	create_insn	(0X710003A350);
	create_insn	(x=0X710003A354);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A358);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A360);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A374);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A380);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A398);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A39C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A3A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A3A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A3AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A3B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A3D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A3EC);
	op_hex		(x,	1);
	create_insn	(x=0X710003A42C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A438);
	op_stkvar	(x,	1);
	create_insn	(0X710003A444);
	create_insn	(x=0X710003A458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A464);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A468);
	op_hex		(x,	1);
	create_insn	(0X710003A484);
	create_insn	(x=0X710003A490);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A494);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A498);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A49C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A4A8);
	op_stkvar	(x,	1);
	create_insn	(0X710003A4B8);
	create_insn	(x=0X710003A4BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A4C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A4C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A4DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A4E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A504);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A50C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A510);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A514);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A518);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A53C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A554);
	op_hex		(x,	1);
	create_insn	(x=0X710003A594);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A5A0);
	op_stkvar	(x,	1);
	create_insn	(0X710003A5AC);
	create_insn	(x=0X710003A5C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A5D0);
	op_hex		(x,	1);
	create_insn	(0X710003A5EC);
	create_insn	(x=0X710003A5F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A600);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A610);
	op_stkvar	(x,	1);
	create_insn	(0X710003A620);
	set_name	(0X710003A620,	"ServiceHandler_ITimeZoneService_");
	create_insn	(x=0X710003A624);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A634);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A640);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A648);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A674);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A680);
	op_hex		(x,	1);
	create_insn	(x=0X710003A69C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A6A0);
	op_stkvar	(x,	1);
	create_insn	(0X710003A6AC);
	create_insn	(x=0X710003A6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A6B8);
	op_stkvar	(x,	1);
	create_insn	(0X710003A6C4);
	create_insn	(x=0X710003A6CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A6DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A710);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A714);
	op_stkvar	(x,	1);
	create_insn	(0X710003A720);
	set_cmt	(0X710003A728,	"switch 102 cases",	0);
	create_insn	(0X710003A728);
	set_name	(0X710003A728,	"ServiceHandler_ITimeZoneService");
	create_insn	(x=0X710003A738);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003A73C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710003A748,	"switch jump",	0);
	set_cmt	(0X710003A74C,	"jumptable 000000710003A748 case 0",	1);
	create_insn	(0X710003A74C);
	set_cmt	(0X710003A750,	"jumptable 000000710003A748 default case",	1);
	create_insn	(0X710003A750);
	set_name	(0X710003A750,	"def_710003A748");
	set_cmt	(0X710003A764,	"jumptable 000000710003A748 cases 9-19,21-99",	1);
	create_insn	(0X710003A764);
	set_cmt	(0X710003A770,	"jumptable 000000710003A748 case 1",	1);
	create_insn	(0X710003A770);
	set_cmt	(0X710003A774,	"jumptable 000000710003A748 case 2",	1);
	create_insn	(0X710003A774);
	set_cmt	(0X710003A778,	"jumptable 000000710003A748 case 3",	1);
	create_insn	(0X710003A778);
	set_cmt	(0X710003A77C,	"jumptable 000000710003A748 case 4",	1);
	create_insn	(0X710003A77C);
	set_cmt	(0X710003A780,	"jumptable 000000710003A748 case 5",	1);
	create_insn	(0X710003A780);
	set_cmt	(0X710003A784,	"jumptable 000000710003A748 case 6",	1);
	create_insn	(0X710003A784);
	set_cmt	(0X710003A788,	"jumptable 000000710003A748 case 7",	1);
	create_insn	(0X710003A788);
	set_cmt	(0X710003A78C,	"jumptable 000000710003A748 case 8",	1);
	create_insn	(0X710003A78C);
	set_cmt	(0X710003A790,	"jumptable 000000710003A748 case 20",	1);
	create_insn	(0X710003A790);
	set_cmt	(0X710003A794,	"jumptable 000000710003A748 case 100",	1);
	create_insn	(0X710003A794);
	set_cmt	(0X710003A798,	"jumptable 000000710003A748 case 101",	1);
	create_insn	(0X710003A798);
	create_insn	(0X710003A79C);
	create_insn	(0X710003A7A0);
	create_insn	(x=0X710003A7A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A7FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A800);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A804);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A81C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A820);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A844);
	op_hex		(x,	1);
	create_insn	(x=0X710003A870);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A884);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A890);
	op_stkvar	(x,	1);
	create_insn	(0X710003A89C);
	create_insn	(x=0X710003A8A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A8B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A8D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A8DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A8E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A8E4);
	op_stkvar	(x,	1);
	create_insn	(0X710003A8F8);
	create_insn	(x=0X710003A904);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A908);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A90C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A910);
	op_stkvar	(x,	1);
	create_insn	(0X710003A91C);
	create_insn	(0X710003A924);
	create_insn	(x=0X710003A928);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A92C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A930);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A934);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A938);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A944);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A948);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A954);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A95C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A970);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A974);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A978);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A97C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A980);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A984);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A9AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A9D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A9D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003A9E8);
	op_hex		(x,	1);
	create_insn	(x=0X710003AA14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AA28);
	op_stkvar	(x,	1);
	create_insn	(0X710003AA38);
	create_insn	(x=0X710003AA44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AA48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AA50);
	op_stkvar	(x,	1);
	create_insn	(0X710003AA5C);
	create_insn	(x=0X710003AA60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AA70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AA80);
	op_stkvar	(x,	1);
	create_insn	(0X710003AA8C);
	create_insn	(0X710003AA94);
	create_insn	(x=0X710003AA98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AA9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AB30);
	op_hex		(x,	1);
	create_insn	(x=0X710003AB70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AB7C);
	op_stkvar	(x,	1);
	create_insn	(0X710003AB88);
	create_insn	(x=0X710003AB9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ABA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ABAC);
	op_hex		(x,	1);
	create_insn	(0X710003ABC8);
	create_insn	(x=0X710003ABD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ABD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ABDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ABE0);
	op_stkvar	(x,	1);
	create_insn	(0X710003ABEC);
	create_insn	(0X710003ABFC);
	create_insn	(x=0X710003AC00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AC9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ACB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ACC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ACDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ACE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ACF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AD04);
	op_hex		(x,	1);
	create_insn	(x=0X710003AD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AD44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AD50);
	op_stkvar	(x,	1);
	create_insn	(0X710003AD5C);
	create_insn	(x=0X710003AD60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AD7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AD80);
	op_hex		(x,	1);
	create_insn	(0X710003AD98);
	create_insn	(x=0X710003ADA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ADA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ADAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ADB0);
	op_stkvar	(x,	1);
	create_insn	(0X710003ADBC);
	create_insn	(x=0X710003ADC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ADC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ADDC);
	op_stkvar	(x,	1);
	create_insn	(0X710003ADEC);
	create_insn	(x=0X710003ADF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ADF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ADF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ADFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AE88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AEA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AEA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AEE0);
	op_hex		(x,	1);
	create_insn	(x=0X710003AF0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF2C);
	op_stkvar	(x,	1);
	create_insn	(0X710003AF38);
	create_insn	(x=0X710003AF44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF50);
	op_stkvar	(x,	1);
	create_insn	(0X710003AF5C);
	create_insn	(x=0X710003AF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AF90);
	op_stkvar	(x,	1);
	create_insn	(0X710003AFA8);
	create_insn	(0X710003AFB0);
	create_insn	(x=0X710003AFB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003AFFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B000);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B00C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B010);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B014);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B02C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B034);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B04C);
	op_hex		(x,	1);
	create_insn	(x=0X710003B08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B098);
	op_stkvar	(x,	1);
	create_insn	(0X710003B0A4);
	create_insn	(x=0X710003B0B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B0C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B0C8);
	op_hex		(x,	1);
	create_insn	(0X710003B0E4);
	create_insn	(x=0X710003B0F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B0F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B0F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B0FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B108);
	op_stkvar	(x,	1);
	create_insn	(0X710003B118);
	create_insn	(x=0X710003B11C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B120);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B124);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B128);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B12C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B13C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B150);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B160);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B164);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B168);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B16C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B170);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B174);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B19C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B1A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B1AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B1C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B1C8);
	op_hex		(x,	1);
	create_insn	(x=0X710003B208);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B214);
	op_stkvar	(x,	1);
	create_insn	(0X710003B220);
	create_insn	(x=0X710003B234);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B254);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B25C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B26C);
	op_stkvar	(x,	1);
	create_insn	(0X710003B27C);
	create_insn	(x=0X710003B288);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B28C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B290);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B294);
	op_stkvar	(x,	1);
	create_insn	(0X710003B2A0);
	create_insn	(0X710003B2A8);
	create_insn	(x=0X710003B2AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B2FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B304);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B30C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B310);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B314);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B31C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B340);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B360);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B368);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B380);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B384);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B390);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B3A0);
	op_hex		(x,	1);
	create_insn	(x=0X710003B3CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B3E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B3EC);
	op_stkvar	(x,	1);
	create_insn	(0X710003B3F8);
	create_insn	(x=0X710003B404);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B410);
	op_stkvar	(x,	1);
	create_insn	(0X710003B41C);
	create_insn	(x=0X710003B420);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B430);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B43C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B440);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B450);
	op_stkvar	(x,	1);
	create_insn	(0X710003B468);
	create_insn	(0X710003B470);
	create_insn	(x=0X710003B474);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B478);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B47C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B480);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B484);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B48C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B49C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B4EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B504);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B530);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B548);
	op_hex		(x,	1);
	create_insn	(x=0X710003B588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B594);
	op_stkvar	(x,	1);
	create_insn	(0X710003B5A0);
	create_insn	(x=0X710003B5B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B5C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B5C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B5D4);
	op_stkvar	(x,	1);
	create_insn	(0X710003B5EC);
	create_insn	(x=0X710003B5F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B600);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B604);
	op_stkvar	(x,	1);
	create_insn	(0X710003B610);
	create_insn	(x=0X710003B614);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B620);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B624);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B62C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B63C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B650);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B654);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B664);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B668);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B66C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B670);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B674);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B6B8);
	op_hex		(x,	1);
	create_insn	(x=0X710003B6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B704);
	op_stkvar	(x,	1);
	create_insn	(0X710003B718);
	create_insn	(x=0X710003B72C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B74C);
	op_stkvar	(x,	1);
	create_insn	(0X710003B76C);
	create_insn	(x=0X710003B788);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B78C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B790);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B794);
	op_stkvar	(x,	1);
	create_insn	(0X710003B7A0);
	create_insn	(0X710003B7B4);
	create_insn	(x=0X710003B7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B800);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B804);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B80C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B814);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B81C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B820);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B860);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B880);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B890);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B894);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B8B4);
	op_hex		(x,	1);
	create_insn	(x=0X710003B8F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B900);
	op_stkvar	(x,	1);
	create_insn	(0X710003B90C);
	create_insn	(x=0X710003B920);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B92C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B944);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B94C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B95C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B964);
	op_stkvar	(x,	1);
	create_insn	(0X710003B974);
	create_insn	(x=0X710003B980);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B984);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B98C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B990);
	op_stkvar	(x,	1);
	create_insn	(0X710003B99C);
	create_insn	(0X710003B9A4);
	create_insn	(x=0X710003B9A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003B9FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BA04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BA08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BA38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BA48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BA58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BA5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BA68);
	op_hex		(x,	1);
	create_insn	(x=0X710003BAA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BAB4);
	op_stkvar	(x,	1);
	create_insn	(0X710003BAC0);
	create_insn	(x=0X710003BAD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BAFC);
	op_stkvar	(x,	1);
	create_insn	(0X710003BB0C);
	create_insn	(x=0X710003BB18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB24);
	op_stkvar	(x,	1);
	create_insn	(0X710003BB30);
	create_insn	(0X710003BB38);
	create_insn	(x=0X710003BB3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BB9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BBA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BBA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BBAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BBB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BBB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BBB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BBBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BBEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BC18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BC34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BC44);
	op_hex		(x,	1);
	create_insn	(x=0X710003BC84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BC90);
	op_stkvar	(x,	1);
	create_insn	(0X710003BC9C);
	create_insn	(x=0X710003BCB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BCBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BCC0);
	op_hex		(x,	1);
	create_insn	(0X710003BCD8);
	create_insn	(x=0X710003BCE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BCE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BCEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BCF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BCF4);
	op_stkvar	(x,	1);
	create_insn	(0X710003BD00);
	create_insn	(x=0X710003BD08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD0C);
	op_stkvar	(x,	1);
	create_insn	(0X710003BD30);
	create_insn	(x=0X710003BD34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BD9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BDA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BDA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BDD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BDDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BE00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BE04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BE08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BE18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BE28);
	op_hex		(x,	1);
	create_insn	(x=0X710003BE54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BE68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BE74);
	op_stkvar	(x,	1);
	create_insn	(0X710003BE80);
	create_insn	(x=0X710003BE84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BE94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BEA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BEA4);
	op_hex		(x,	1);
	create_insn	(0X710003BEBC);
	create_insn	(x=0X710003BEC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BED4);
	op_stkvar	(x,	1);
	create_insn	(0X710003BEE0);
	create_insn	(x=0X710003BEE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BEEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BF00);
	op_stkvar	(x,	1);
	create_insn	(0X710003BF10);
	set_name	(0X710003BF10,	"ServiceHandler_TimeAL");
	create_insn	(x=0X710003BF14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BF18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BF30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BF7C);
	op_hex		(x,	1);
	create_insn	(0X710003BF8C);
	create_insn	(x=0X710003BF94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BF98);
	op_stkvar	(x,	1);
	create_insn	(0X710003BFA4);
	create_insn	(x=0X710003BFAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003BFB0);
	op_stkvar	(x,	1);
	create_insn	(0X710003BFBC);
	create_insn	(x=0X710003BFCC);
	op_hex		(x,	1);
	create_insn	(0X710003BFDC);
	create_insn	(x=0X710003BFE4);
	op_hex		(x,	1);
	create_insn	(x=0X710003C000);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C034);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C038);
	op_stkvar	(x,	1);
	create_insn	(0X710003C044);
	create_insn	(0X710003C04C);
	create_insn	(x=0X710003C050);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C054);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C058);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C05C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C068);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C074);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C08C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C090);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C098);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C09C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C0F8);
	op_hex		(x,	1);
	create_insn	(x=0X710003C124);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C138);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C14C);
	op_stkvar	(x,	1);
	create_insn	(0X710003C158);
	create_insn	(x=0X710003C15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C16C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C18C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C190);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C194);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C19C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003C1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C1B4);
	op_stkvar	(x,	1);
	create_insn	(0X710003C1C0);
	create_insn	(x=0X710003C1C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C1DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C1F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C1F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C1FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C200);
	op_stkvar	(x,	1);
	create_insn	(0X710003C20C);
	create_insn	(x=0X710003C214);
	op_stkvar	(x,	1);
	create_insn	(0X710003C220);
	create_insn	(x=0X710003C224);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C230);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C24C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C260);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C26C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C270);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C274);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C278);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C27C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C280);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C284);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C288);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C2A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C2B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C2BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C2CC);
	op_hex		(x,	1);
	create_insn	(x=0X710003C2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C30C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C320);
	op_stkvar	(x,	1);
	create_insn	(0X710003C32C);
	create_insn	(x=0X710003C330);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C340);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C34C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C350);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C360);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C364);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C368);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C370);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003C374);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C388);
	op_stkvar	(x,	1);
	create_insn	(0X710003C394);
	create_insn	(x=0X710003C39C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C3CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C3D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C3D4);
	op_stkvar	(x,	1);
	create_insn	(0X710003C3E0);
	create_insn	(x=0X710003C3E8);
	op_stkvar	(x,	1);
	create_insn	(0X710003C3F4);
	set_name	(0X710003C3F4,	"ServiceHandler_ISteadyClockAlarm_");
	create_insn	(x=0X710003C3F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C3FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C408);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C414);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C41C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C448);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C454);
	op_hex		(x,	1);
	create_insn	(x=0X710003C470);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C474);
	op_stkvar	(x,	1);
	create_insn	(0X710003C480);
	create_insn	(x=0X710003C488);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C48C);
	op_stkvar	(x,	1);
	create_insn	(0X710003C498);
	create_insn	(x=0X710003C4A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C4A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C4B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C4E8);
	op_stkvar	(x,	1);
	create_insn	(0X710003C4F4);
	create_insn	(0X710003C4FC);
	set_name	(0X710003C4FC,	"ServiceHandler_ISteadyClockAlarm");
	create_insn	(x=0X710003C500);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C504);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C50C);
	op_stkvar	(x,	1);
	set_cmt	(0X710003C51C,	"switch 12 cases",	0);
	create_insn	(x=0X710003C52C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003C530);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710003C54C,	"switch jump",	0);
	set_cmt	(0X710003C550,	"jumptable 000000710003C54C case 0",	1);
	create_insn	(0X710003C550);
	create_insn	(x=0X710003C560);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C564);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C568);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C56C);
	op_stkvar	(x,	1);
	set_cmt	(0X710003C578,	"jumptable 000000710003C54C case 1",	1);
	create_insn	(0X710003C578);
	create_insn	(x=0X710003C580);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C584);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C588);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C590);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C594);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C59C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C5A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C5A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C5A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C5AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C5B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C5B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C5F4);
	op_hex		(x,	1);
	set_cmt	(0X710003C608,	"jumptable 000000710003C54C case 2",	1);
	create_insn	(0X710003C608);
	create_insn	(x=0X710003C60C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C610);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C618);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C620);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C62C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C630);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C634);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C63C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C640);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C670);
	op_hex		(x,	1);
	set_cmt	(0X710003C684,	"jumptable 000000710003C54C case 3",	1);
	create_insn	(0X710003C684);
	create_insn	(x=0X710003C694);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C698);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C69C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6A0);
	op_stkvar	(x,	1);
	set_cmt	(0X710003C6AC,	"jumptable 000000710003C54C case 10",	1);
	create_insn	(0X710003C6AC);
	create_insn	(x=0X710003C6BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6C8);
	op_stkvar	(x,	1);
	set_cmt	(0X710003C6D4,	"jumptable 000000710003C54C case 11",	1);
	create_insn	(0X710003C6D4);
	create_insn	(x=0X710003C6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C6FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C700);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C704);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C708);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C70C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C73C);
	op_hex		(x,	1);
	create_insn	(x=0X710003C77C);
	op_stkvar	(x,	1);
	create_insn	(0X710003C78C);
	create_insn	(0X710003C794);
	create_insn	(x=0X710003C7A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C7B8);
	op_stkvar	(x,	1);
	create_insn	(0X710003C7C4);
	set_cmt	(0X710003C7CC,	"jumptable 000000710003C54C default case, cases 4-9",	1);
	set_name	(0X710003C7CC,	"def_710003C54C");
	create_insn	(x=0X710003C7D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C7D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C7D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C7DC);
	op_stkvar	(x,	1);
	create_insn	(0X710003C7E8);
	create_insn	(x=0X710003C7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C7F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C7F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C804);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C810);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C814);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C834);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C83C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C840);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C844);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C848);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C84C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C850);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C854);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C874);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C890);
	op_hex		(x,	1);
	create_insn	(x=0X710003C8D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C8DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C8E4);
	op_stkvar	(x,	1);
	create_insn	(0X710003C8F0);
	create_insn	(x=0X710003C904);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C910);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C924);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C938);
	op_stkvar	(x,	1);
	create_insn	(0X710003C944);
	create_insn	(x=0X710003C94C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C954);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C960);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C964);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C968);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C96C);
	op_stkvar	(x,	1);
	create_insn	(0X710003C978);
	create_insn	(x=0X710003C980);
	op_stkvar	(x,	1);
	create_insn	(0X710003C98C);
	create_insn	(x=0X710003C990);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C994);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C998);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C99C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003C9F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CA10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CA28);
	op_hex		(x,	1);
	create_insn	(x=0X710003CA68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CA74);
	op_stkvar	(x,	1);
	create_insn	(0X710003CA80);
	create_insn	(x=0X710003CA94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CAA0);
	op_stkvar	(x,	1);
	create_insn	(0X710003CABC);
	create_insn	(x=0X710003CAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CAD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CAE0);
	op_stkvar	(x,	1);
	create_insn	(0X710003CAF0);
	create_insn	(x=0X710003CAF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CB9C);
	op_hex		(x,	1);
	create_insn	(x=0X710003CBC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CBDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CBE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CBF0);
	op_stkvar	(x,	1);
	create_insn	(0X710003CBFC);
	create_insn	(x=0X710003CC00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003CC44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC58);
	op_stkvar	(x,	1);
	create_insn	(0X710003CC64);
	create_insn	(x=0X710003CC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CC9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CCA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CCA4);
	op_stkvar	(x,	1);
	create_insn	(0X710003CCB0);
	create_insn	(x=0X710003CCB8);
	op_stkvar	(x,	1);
	create_insn	(0X710003CCC4);
	set_name	(0X710003CCC4,	"ServiceHandler_IPowerStateRequestHandler");
	create_insn	(x=0X710003CCC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CCCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CCD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CCD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CCE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CCF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CCFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD48);
	op_hex		(x,	1);
	create_insn	(0X710003CD58);
	create_insn	(0X710003CD64);
	create_insn	(x=0X710003CD6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD98);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CD9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CDA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CDBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CDC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CDCC);
	op_hex		(x,	1);
	create_insn	(x=0X710003CDDC);
	op_hex		(x,	1);
	create_insn	(x=0X710003CE08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CE28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CE30);
	op_stkvar	(x,	1);
	create_insn	(0X710003CE38);
	create_insn	(x=0X710003CE40);
	op_hex		(x,	1);
	create_insn	(0X710003CE50);
	create_insn	(x=0X710003CE54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CE64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CE74);
	op_hex		(x,	1);
	create_insn	(x=0X710003CE7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CE90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CEA4);
	op_hex		(x,	1);
	create_insn	(x=0X710003CEC0);
	op_stkvar	(x,	1);
	create_insn	(0X710003CEF8);
	create_insn	(x=0X710003CF00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF0C);
	op_stkvar	(x,	1);
	create_insn	(0X710003CF18);
	create_insn	(0X710003CF1C);
	create_insn	(x=0X710003CF20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF44);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CF88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CFA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CFAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003CFC4);
	op_hex		(x,	1);
	create_insn	(x=0X710003D004);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D010);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D018);
	op_stkvar	(x,	1);
	create_insn	(0X710003D024);
	create_insn	(x=0X710003D038);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D044);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D058);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D06C);
	op_stkvar	(x,	1);
	create_insn	(0X710003D078);
	create_insn	(x=0X710003D080);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D088);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D094);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D098);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D09C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D0A0);
	op_stkvar	(x,	1);
	create_insn	(0X710003D0AC);
	create_insn	(x=0X710003D0B4);
	op_stkvar	(x,	1);
	create_insn	(0X710003D0C0);
	set_name	(0X710003D0C0,	"nn::timesrv::detail::service::StaticService::StaticService");
	create_insn	(0X710003D104);
	set_name	(0X710003D104,	"nullsub_6");
	create_insn	(x=0X710003D108);
	op_stkvar	(x,	1);
	set_name	(0X710003D108,	"nn::timesrv::detail::service::StaticService::GetStandardUserSystemClock");
	create_insn	(x=0X710003D10C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D110);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D114);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D160);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D180);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D19C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D1A4);
	op_hex		(x,	1);
	create_insn	(0X710003D1BC);
	create_insn	(x=0X710003D1C8);
	op_hex		(x,	1);
	create_insn	(0X710003D1F0);
	create_insn	(x=0X710003D23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D248);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D250);
	op_stkvar	(x,	1);
	set_name	(0X710003D250,	"nn::timesrv::detail::service::StaticService::GetStandardNetworkSystemClock");
	create_insn	(x=0X710003D254);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D258);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D25C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D2A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D2C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D2D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D2E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D2EC);
	op_hex		(x,	1);
	create_insn	(0X710003D304);
	create_insn	(x=0X710003D310);
	op_hex		(x,	1);
	create_insn	(0X710003D338);
	create_insn	(x=0X710003D384);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D38C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D390);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D398);
	op_stkvar	(x,	1);
	set_name	(0X710003D398,	"nn::timesrv::detail::service::StaticService::GetEphemeralNetworkSystemClock");
	create_insn	(x=0X710003D39C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D3A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D3F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D410);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D418);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D42C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D434);
	op_hex		(x,	1);
	create_insn	(0X710003D44C);
	create_insn	(x=0X710003D458);
	op_hex		(x,	1);
	create_insn	(0X710003D480);
	create_insn	(x=0X710003D4CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D4D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D4D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D4D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D4E0);
	op_stkvar	(x,	1);
	set_name	(0X710003D4E0,	"nn::timesrv::detail::service::StaticService::GetSharedMemoryNativeHandle");
	create_insn	(x=0X710003D4E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D514);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D524);
	op_stkvar	(x,	1);
	set_name	(0X710003D524,	"nn::timesrv::detail::service::StaticService::GetStandardLocalSystemClock");
	create_insn	(x=0X710003D528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D52C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D530);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D57C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D598);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D5A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D5B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D5BC);
	op_hex		(x,	1);
	create_insn	(0X710003D5D4);
	create_insn	(x=0X710003D5E0);
	op_hex		(x,	1);
	create_insn	(0X710003D608);
	create_insn	(x=0X710003D654);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D660);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D668);
	op_stkvar	(x,	1);
	set_name	(0X710003D668,	"nn::timesrv::detail::service::StaticService::GetStandardSteadyClock");
	create_insn	(x=0X710003D66C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D670);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D674);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D6C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D6DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D6E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D6F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D700);
	op_hex		(x,	1);
	create_insn	(0X710003D718);
	create_insn	(x=0X710003D724);
	op_hex		(x,	1);
	create_insn	(0X710003D74C);
	create_insn	(x=0X710003D798);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D79C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D7A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D7A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D7AC);
	op_stkvar	(x,	1);
	set_name	(0X710003D7AC,	"nn::timesrv::detail::service::StaticService::GetTimeZoneService");
	create_insn	(x=0X710003D7B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D804);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D81C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D824);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D838);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003D840);
	op_hex		(x,	1);
	create_insn	(0X710003D858);
	create_insn	(x=0X710003D864);
	op_hex		(x,	1);
	create_insn	(0X710003D88C);
	create_insn	(x=0X710003D8D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D8DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D8E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D8E4);
	op_stkvar	(x,	1);
	create_insn	(0X710003D8EC);
	set_name	(0X710003D8EC,	"nn::timesrv::detail::service::StaticService::SetStandardSteadyClockInternalOffset");
	create_insn	(0X710003D908);
	create_insn	(x=0X710003D914);
	op_stkvar	(x,	1);
	set_name	(0X710003D914,	"nn::timesrv::detail::service::StaticService::IsStandardUserSystemClockAutomaticCorrectionEnabled");
	create_insn	(x=0X710003D918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D944);
	op_hex		(x,	1);
	create_insn	(x=0X710003D94C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D950);
	op_stkvar	(x,	1);
	create_insn	(0X710003D958);
	create_insn	(x=0X710003D95C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D960);
	op_stkvar	(x,	1);
	create_insn	(0X710003D968);
	set_name	(0X710003D968,	"nn::timesrv::detail::service::StaticService::SetStandardUserSystemClockAutomaticCorrectionEnabled");
	create_insn	(x=0X710003D96C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D970);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D974);
	op_stkvar	(x,	1);
	set_cmt	(0X710003D9A4,	"this",	0);
	create_insn	(x=0X710003D9A8);
	op_hex		(x,	1);
	set_cmt	(0X710003D9AC,	"automatic_correction",	0);
	create_insn	(x=0X710003D9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D9E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D9E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003D9E8);
	op_stkvar	(x,	1);
	create_insn	(0X710003D9F4);
	create_insn	(x=0X710003D9FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA04);
	op_stkvar	(x,	1);
	create_insn	(0X710003DA10);
	create_insn	(x=0X710003DA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA20);
	op_stkvar	(x,	1);
	create_insn	(0X710003DA2C);
	create_insn	(x=0X710003DA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA5C);
	op_stkvar	(x,	1);
	set_name	(0X710003DA5C,	"nn::timesrv::detail::service::StaticService::IsStandardNetworkSystemClockAccuracySufficient");
	create_insn	(x=0X710003DA60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA74);
	op_hex		(x,	1);
	create_insn	(x=0X710003DA80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA84);
	op_stkvar	(x,	1);
	create_insn	(0X710003DA8C);
	set_name	(0X710003DA8C,	"nn::timesrv::detail::service::StaticService::GetStandardUserSystemClockAutomaticCorrectionUpdatedTime");
	create_insn	(x=0X710003DA90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DA94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DAB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DAC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DAD4);
	op_stkvar	(x,	1);
	create_insn	(0X710003DAE0);
	create_insn	(x=0X710003DAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DAE8);
	op_stkvar	(x,	1);
	create_insn	(0X710003DAF4);
	set_name	(0X710003DAF4,	"nn::timesrv::detail::service::StaticService::CalculateMonotonicSystemClockBaseTimePoint");
	create_insn	(x=0X710003DAF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DAFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB38);
	op_stkvar	(x,	1);
	create_insn	(0X710003DB44);
	create_insn	(x=0X710003DB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DB8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DBC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DBCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DBD0);
	op_stkvar	(x,	1);
	create_insn	(0X710003DBDC);
	set_name	(0X710003DBDC,	"nn::timesrv::detail::service::StaticService::GetClockSnapshot");
	create_insn	(x=0X710003DBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DBE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DBE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DBFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC14);
	op_stkvar	(x,	1);
	create_insn	(0X710003DC20);
	create_insn	(x=0X710003DC30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC50);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC5C);
	op_stkvar	(x,	1);
	set_name	(0X710003DC5C,	"StaticService::GetClockSnapshotImpl");
	create_insn	(x=0X710003DC60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DC68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DCB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DCBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DCC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DCC4);
	op_stkvar	(x,	1);
	create_insn	(0X710003DCCC);
	create_insn	(x=0X710003DCD4);
	op_hex		(x,	1);
	create_insn	(x=0X710003DD58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DD5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DD60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DD64);
	op_stkvar	(x,	1);
	create_insn	(0X710003DD6C);
	set_name	(0X710003DD6C,	"nn::timesrv::detail::service::StaticService::CalculateStandardUserSystemClockDifferenceByUser");
	create_insn	(0X710003DDC8);
	create_insn	(x=0X710003DE20);
	op_stkvar	(x,	1);
	set_name	(0X710003DE20,	"nn::timesrv::detail::service::StaticService::CalculateSpanBetween");
	create_insn	(x=0X710003DE24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DE28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DE70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DE88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DE8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DE90);
	op_stkvar	(x,	1);
	create_insn	(0X710003DE98);
	create_insn	(0X710003DEA4);
	create_insn	(x=0X710003DEAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DEB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DEF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DEF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DEFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DF04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DF08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DF0C);
	op_stkvar	(x,	1);
	create_insn	(0X710003DF14);
	set_name	(0X710003DF14,	"nn::timesrv::detail::service::ISystemClock::GetCurrentTime");
	create_insn	(0X710003DF1C);
	set_name	(0X710003DF1C,	"nn::timesrv::detail::service::ISystemClock::SetCurrentTime");
	create_insn	(x=0X710003DF20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DF28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DF30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DF38);
	op_stkvar	(x,	1);
	create_insn	(0X710003DF44);
	set_name	(0X710003DF44,	"nn::timesrv::detail::service::ISystemClock::GetSystemClockContext");
	create_insn	(0X710003DF4C);
	set_name	(0X710003DF4C,	"nn::timesrv::detail::service::ISystemClock::SetSystemClockContext");
	create_insn	(0X710003DF54);
	set_name	(0X710003DF54,	"nn::timesrv::detail::service::ISystemClock::GetOperationEventReadableHandle");
	create_insn	(0X710003DF5C);
	set_name	(0X710003DF5C,	"nullsub_84");
	create_insn	(0X710003DF60);
	create_insn	(x=0X710003DF68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DF6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DF70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFC8);
	op_stkvar	(x,	1);
	create_insn	(0X710003DFD0);
	set_name	(0X710003DFD0,	"nn::timesrv::detail::service::ISteadyClock::GetCurrentTimePoint");
	create_insn	(0X710003DFD8);
	set_name	(0X710003DFD8,	"nn::timesrv::detail::service::ISteadyClock::GetTestOffset");
	create_insn	(0X710003DFE0);
	set_name	(0X710003DFE0,	"nn::timesrv::detail::service::ISteadyClock::SetTestOffset");
	create_insn	(x=0X710003DFE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003DFFC);
	op_stkvar	(x,	1);
	create_insn	(0X710003E008);
	set_name	(0X710003E008,	"nn::timesrv::detail::service::ISteadyClock::GetRtcValue");
	create_insn	(0X710003E010);
	set_name	(0X710003E010,	"nn::timesrv::detail::service::ISteadyClock::IsRtcResetDetected");
	create_insn	(0X710003E018);
	set_name	(0X710003E018,	"nn::timesrv::detail::service::ISteadyClock::GetSetupResultValue");
	create_insn	(0X710003E020);
	set_name	(0X710003E020,	"nn::timesrv::detail::service::ISteadyClock::GetInternalOffset");
	create_insn	(0X710003E028);
	set_name	(0X710003E028,	"nullsub_85");
	create_insn	(0X710003E02C);
	create_insn	(x=0X710003E034);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E038);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E03C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E074);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E07C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E084);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E088);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E08C);
	op_stkvar	(x,	1);
	create_insn	(0X710003E094);
	set_name	(0X710003E094,	"nn::timesrv::detail::service::ITimeZoneService::GetDeviceLocationName");
	create_insn	(0X710003E09C);
	set_name	(0X710003E09C,	"nn::timesrv::detail::service::ITimeZoneService::SetDeviceLocationName");
	create_insn	(0X710003E0A4);
	set_name	(0X710003E0A4,	"nn::timesrv::detail::service::ITimeZoneService::GetTotalLocationNameCount");
	create_insn	(0X710003E0AC);
	set_name	(0X710003E0AC,	"nn::timesrv::detail::service::ITimeZoneService::LoadLocationNameList");
	create_insn	(0X710003E0C0);
	set_name	(0X710003E0C0,	"nn::timesrv::detail::service::ITimeZoneService::LoadTimeZoneRule");
	create_insn	(0X710003E0C8);
	set_name	(0X710003E0C8,	"nn::timesrv::detail::service::ITimeZoneService::GetTimeZoneRuleVersion");
	create_insn	(0X710003E0D0);
	set_name	(0X710003E0D0,	"nn::timesrv::detail::service::ITimeZoneService::GetDeviceLocationNameAndUpdatedTime");
	create_insn	(0X710003E0D8);
	set_name	(0X710003E0D8,	"nn::timesrv::detail::service::ITimeZoneService::SetDeviceLocationNameWithTimeZoneRule");
	create_insn	(0X710003E0E0);
	set_name	(0X710003E0E0,	"nn::timesrv::detail::service::ITimeZoneService::ParseTimeZoneBinary");
	create_insn	(0X710003E0E8);
	set_name	(0X710003E0E8,	"nn::timesrv::detail::service::ITimeZoneService::GetDeviceLocationNameOperationEventReadableHandle");
	create_insn	(0X710003E0F0);
	set_name	(0X710003E0F0,	"nn::timesrv::detail::service::ITimeZoneService::ToCalendarTime");
	create_insn	(x=0X710003E0F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E0FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E10C);
	op_stkvar	(x,	1);
	create_insn	(0X710003E118);
	set_name	(0X710003E118,	"nn::timesrv::detail::service::ITimeZoneService::ToCalendarTimeWithMyRule");
	create_insn	(x=0X710003E11C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E124);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E12C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E134);
	op_stkvar	(x,	1);
	create_insn	(0X710003E140);
	set_name	(0X710003E140,	"nn::timesrv::detail::service::ITimeZoneService::ToPosixTime");
	create_insn	(x=0X710003E144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E14C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E168);
	op_stkvar	(x,	1);
	create_insn	(0X710003E174);
	set_name	(0X710003E174,	"nn::timesrv::detail::service::ITimeZoneService::ToPosixTimeWithMyRule");
	create_insn	(x=0X710003E178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E180);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E18C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E198);
	op_stkvar	(x,	1);
	create_insn	(0X710003E1A4);
	set_name	(0X710003E1A4,	"nullsub_86");
	create_insn	(0X710003E1A8);
	set_name	(0X710003E1A8,	"nn::timesrv::detail::service::SystemClock::SystemClock");
	create_insn	(x=0X710003E1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E1C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E1C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E218);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E21C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E220);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E22C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E230);
	op_stkvar	(x,	1);
	create_insn	(0X710003E238);
	set_name	(0X710003E238,	"nn::timesrv::detail::service::SystemClock::GetCurrentTime");
	create_insn	(x=0X710003E23C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E274);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E278);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E284);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E28C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E290);
	op_stkvar	(x,	1);
	create_insn	(0X710003E29C);
	create_insn	(x=0X710003E2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E2B0);
	op_stkvar	(x,	1);
	set_name	(0X710003E2B0,	"nn::timesrv::detail::service::SystemClock::SetCurrentTime");
	create_insn	(x=0X710003E2B4);
	op_stkvar	(x,	1);
	set_cmt	(0X710003E2E0,	"this",	0);
	set_cmt	(0X710003E2E4,	"a2",	0);
	create_insn	(x=0X710003E2E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E2EC);
	op_stkvar	(x,	1);
	create_insn	(0X710003E2F4);
	create_insn	(x=0X710003E2F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E2FC);
	op_stkvar	(x,	1);
	create_insn	(0X710003E304);
	create_insn	(x=0X710003E308);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E30C);
	op_stkvar	(x,	1);
	create_insn	(0X710003E314);
	set_name	(0X710003E314,	"nn::timesrv::detail::service::SystemClock::GetSystemClockContext");
	create_insn	(x=0X710003E318);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E31C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E350);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E354);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E360);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E364);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E374);
	op_stkvar	(x,	1);
	create_insn	(0X710003E380);
	create_insn	(x=0X710003E384);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E388);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E394);
	op_stkvar	(x,	1);
	set_name	(0X710003E394,	"nn::timesrv::detail::service::SystemClock::SetSystemClockContext");
	create_insn	(x=0X710003E398);
	op_stkvar	(x,	1);
	set_cmt	(0X710003E3C4,	"this",	0);
	set_cmt	(0X710003E3C8,	"context",	0);
	create_insn	(x=0X710003E3CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E3D0);
	op_stkvar	(x,	1);
	create_insn	(0X710003E3D8);
	create_insn	(x=0X710003E3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E3E0);
	op_stkvar	(x,	1);
	create_insn	(0X710003E3E8);
	create_insn	(x=0X710003E3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E3F0);
	op_stkvar	(x,	1);
	create_insn	(0X710003E3F8);
	set_name	(0X710003E3F8,	"nn::timesrv::detail::service::SystemClock::GetOperationEventReadableHandle");
	create_insn	(x=0X710003E3FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E400);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E404);
	op_stkvar	(x,	1);
	set_cmt	(0X710003E448,	"event",	0);
	set_cmt	(0X710003E44C,	"clearMode",	0);
	set_cmt	(0X710003E450,	"type",	0);
	create_insn	(x=0X710003E45C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E4A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E4A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E4A8);
	op_stkvar	(x,	1);
	create_insn	(0X710003E4B4);
	create_insn	(x=0X710003E4BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E4C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E4C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E4D0);
	op_stkvar	(x,	1);
	create_insn	(0X710003E4D8);
	set_name	(0X710003E4D8,	"nn::timesrv::detail::service::SteadyClock::SteadyClock");
	create_insn	(0X710003E4E8);
	set_name	(0X710003E4E8,	"nullsub_73");
	create_insn	(0X710003E4EC);
	set_name	(0X710003E4EC,	"nn::timesrv::detail::service::SteadyClock::GetCurrentTimePoint");
	create_insn	(x=0X710003E4F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E4F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E51C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E52C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E53C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E548);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E54C);
	op_stkvar	(x,	1);
	create_insn	(0X710003E558);
	create_insn	(x=0X710003E55C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E560);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E56C);
	op_stkvar	(x,	1);
	set_name	(0X710003E56C,	"nn::timesrv::detail::service::SteadyClock::GetTestOffset");
	create_insn	(x=0X710003E570);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E5A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E5AC);
	op_stkvar	(x,	1);
	create_insn	(0X710003E5B4);
	create_insn	(x=0X710003E5B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E5BC);
	op_stkvar	(x,	1);
	create_insn	(0X710003E5C4);
	set_name	(0X710003E5C4,	"nn::timesrv::detail::service::SteadyClock::SetTestOffset");
	create_insn	(x=0X710003E5C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E610);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E614);
	op_stkvar	(x,	1);
	create_insn	(0X710003E620);
	create_insn	(x=0X710003E624);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E628);
	op_stkvar	(x,	1);
	create_insn	(0X710003E634);
	create_insn	(x=0X710003E638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E63C);
	op_stkvar	(x,	1);
	create_insn	(0X710003E648);
	set_name	(0X710003E648,	"nn::timesrv::detail::service::SteadyClock::GetRtcValue");
	create_insn	(x=0X710003E64C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E650);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E678);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E684);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E688);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E694);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E69C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E6A0);
	op_stkvar	(x,	1);
	create_insn	(0X710003E6AC);
	create_insn	(x=0X710003E6B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E6C0);
	op_stkvar	(x,	1);
	set_name	(0X710003E6C0,	"nn::timesrv::detail::service::SteadyClock::IsRtcResetDetected");
	create_insn	(x=0X710003E6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E6F8);
	op_hex		(x,	1);
	create_insn	(x=0X710003E700);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E704);
	op_stkvar	(x,	1);
	create_insn	(0X710003E70C);
	create_insn	(x=0X710003E710);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E714);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E71C);
	op_stkvar	(x,	1);
	set_name	(0X710003E71C,	"nn::timesrv::detail::service::SteadyClock::GetSetupResultValue");
	create_insn	(x=0X710003E720);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E760);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E764);
	op_stkvar	(x,	1);
	create_insn	(0X710003E76C);
	create_insn	(x=0X710003E770);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E774);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E77C);
	op_stkvar	(x,	1);
	set_name	(0X710003E77C,	"nn::timesrv::detail::service::SteadyClock::GetInternalOffset");
	create_insn	(x=0X710003E780);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E7B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E7BC);
	op_stkvar	(x,	1);
	create_insn	(0X710003E7C4);
	create_insn	(x=0X710003E7C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E7CC);
	op_stkvar	(x,	1);
	create_insn	(0X710003E7D4);
	set_name	(0X710003E7D4,	"nn::timesrv::detail::service::TimeZoneService::TimeZoneService");
	create_insn	(0X710003E7E0);
	set_name	(0X710003E7E0,	"nn::timesrv::detail::service::TimeZoneService::GetDeviceLocationName");
	create_insn	(0X710003E7E8);
	set_name	(0X710003E7E8,	"nn::timesrv::detail::service::TimeZoneService::SetDeviceLocationName");
	create_insn	(x=0X710003E804);
	op_stkvar	(x,	1);
	set_name	(0X710003E804,	"nn::timesrv::detail::service::TimeZoneService::GetTotalLocationNameCount");
	create_insn	(x=0X710003E808);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E824);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E830);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E83C);
	op_stkvar	(x,	1);
	create_insn	(0X710003E844);
	create_insn	(0X710003E850);
	create_insn	(0X710003E85C);
	create_insn	(0X710003E864);
	set_name	(0X710003E864,	"nn::timesrv::detail::service::TimeZoneService::GetDeviceLocationNameAndUpdatedTime");
	create_insn	(x=0X710003E868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E86C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E888);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E88C);
	op_stkvar	(x,	1);
	create_insn	(0X710003E898);
	create_insn	(x=0X710003E89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E8A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E8AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E8BC);
	op_stkvar	(x,	1);
	create_insn	(0X710003E8C8);
	set_name	(0X710003E8C8,	"nn::timesrv::detail::service::TimeZoneService::SetDeviceLocationNameWithTimeZoneRule");
	create_insn	(x=0X710003E8CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E8D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E900);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E904);
	op_stkvar	(x,	1);
	create_insn	(0X710003E910);
	create_insn	(x=0X710003E918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E91C);
	op_stkvar	(x,	1);
	create_insn	(0X710003E928);
	create_insn	(x=0X710003E92C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E940);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E94C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E950);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E95C);
	op_stkvar	(x,	1);
	set_name	(0X710003E95C,	"nn::timesrv::detail::service::TimeZoneService::ParseTimeZoneBinary");
	create_insn	(x=0X710003E978);
	op_stkvar	(x,	1);
	create_insn	(0X710003E980);
	create_insn	(0X710003E98C);
	set_name	(0X710003E98C,	"nn::timesrv::detail::service::TimeZoneService::ToCalendarTime");
	create_insn	(0X710003E994);
	set_name	(0X710003E994,	"nn::timesrv::detail::service::TimeZoneService::ToCalendarTimeWithMyRule");
	create_insn	(0X710003E99C);
	set_name	(0X710003E99C,	"nn::timesrv::detail::service::TimeZoneService::ToPosixTime");
	create_insn	(0X710003E9A4);
	set_name	(0X710003E9A4,	"nn::timesrv::detail::service::TimeZoneService::ToPosixTimeWithMyRule");
	create_insn	(0X710003E9AC);
	set_name	(0X710003E9AC,	"TimeZone::SetInitialised");
	create_insn	(0X710003E9B8);
	set_name	(0X710003E9B8,	"TImeZone::IsInitialised");
	create_insn	(x=0X710003E9C0);
	op_stkvar	(x,	1);
	set_name	(0X710003E9C0,	"TimeZone::GetLocationName");
	create_insn	(x=0X710003E9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003E9C8);
	op_stkvar	(x,	1);
	set_cmt	(0X710003E9DC,	"this",	0);
	create_insn	(0X710003EA18);
	create_insn	(x=0X710003EA28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EA2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EA38);
	op_stkvar	(x,	1);
	set_name	(0X710003EA38,	"TimeZone::ParseBinary");
	create_insn	(x=0X710003EA3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EA40);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EA44);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EA58,	"this",	0);
	create_insn	(x=0X710003EA6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710003EA84,	"dst",	0);
	set_cmt	(0X710003EA8C,	"src",	0);
	create_insn	(x=0X710003EA8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X710003EA90,	"size",	0);
	create_insn	(x=0X710003EAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EAD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EAD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EADC);
	op_stkvar	(x,	1);
	set_name	(0X710003EADC,	"TimeZone::SetTotalLocationNameCount");
	create_insn	(x=0X710003EAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EAE4);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EAF8,	"this",	0);
	create_insn	(x=0X710003EB08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EB14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EB1C);
	op_stkvar	(x,	1);
	set_name	(0X710003EB1C,	"TimeZone::GetTotalLocationNameCount");
	create_insn	(x=0X710003EB20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EB24);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EB38,	"this",	0);
	create_insn	(0X710003EB5C);
	create_insn	(x=0X710003EB6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EB70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EB74);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EB7C);
	op_stkvar	(x,	1);
	set_name	(0X710003EB7C,	"TimeZone::SetTimePoint");
	create_insn	(x=0X710003EB80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EB84);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EB98,	"this",	0);
	create_insn	(x=0X710003EBB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EBBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EBC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EBC8);
	op_stkvar	(x,	1);
	set_name	(0X710003EBC8,	"TimeZone::GetTimePoint");
	create_insn	(x=0X710003EBCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EBD0);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EBE4,	"this",	0);
	create_insn	(0X710003EC10);
	create_insn	(x=0X710003EC20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EC24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EC28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EC30);
	op_stkvar	(x,	1);
	set_name	(0X710003EC30,	"TimeZone::ParseBinaryInto");
	create_insn	(x=0X710003EC34);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EC38);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EC4C,	"this",	0);
	create_insn	(x=0X710003EC78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EC7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EC80);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EC88);
	op_stkvar	(x,	1);
	set_name	(0X710003EC88,	"TimeZone::SetRuleVersion");
	create_insn	(x=0X710003EC8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EC90);
	op_stkvar	(x,	1);
	set_cmt	(0X710003ECA4,	"this",	0);
	create_insn	(x=0X710003ECBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ECC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ECC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ECD0);
	op_stkvar	(x,	1);
	set_name	(0X710003ECD0,	"TimeZone::GetTimeZoneRuleVersion");
	create_insn	(x=0X710003ECD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ECD8);
	op_stkvar	(x,	1);
	set_cmt	(0X710003ECEC,	"this",	0);
	create_insn	(0X710003ED14);
	create_insn	(x=0X710003ED24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED34);
	op_stkvar	(x,	1);
	set_name	(0X710003ED34,	"TimeZone::ToCalendarTime");
	create_insn	(x=0X710003ED38);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED40);
	op_stkvar	(x,	1);
	set_cmt	(0X710003ED54,	"this",	0);
	create_insn	(x=0X710003ED88);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED90);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003ED9C);
	op_stkvar	(x,	1);
	set_name	(0X710003ED9C,	"TimeZone::ToCalendarTimeWithMyRule");
	create_insn	(x=0X710003EDA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EDA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EDA8);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EDC4,	"this",	0);
	create_insn	(x=0X710003EDF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EDFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EE00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EE04);
	op_stkvar	(x,	1);
	create_insn	(0X710003EE0C);
	create_insn	(x=0X710003EE10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EE14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EE18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EE1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EE24);
	op_stkvar	(x,	1);
	set_name	(0X710003EE24,	"TimeZone::ToPosixTime");
	create_insn	(x=0X710003EE28);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EE2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EE30);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EE44,	"this",	0);
	set_cmt	(0X710003EE58,	"is_dst",	0);
	set_cmt	(0X710003EE5C,	"out_count",	0);
	set_cmt	(0X710003EE60,	"out_times",	0);
	set_cmt	(0X710003EE64,	"out_times_size",	0);
	set_cmt	(0X710003EE68,	"calendar",	0);
	set_cmt	(0X710003EE6C,	"rule",	0);
	create_insn	(x=0X710003EE78);
	op_hex		(x,	1);
	create_insn	(0X710003EE98);
	create_insn	(0X710003EEBC);
	create_insn	(x=0X710003EECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EEE0);
	op_stkvar	(x,	1);
	set_name	(0X710003EEE0,	"TimeZone::ToPosixTimeWithMyRule");
	create_insn	(x=0X710003EEE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EEE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EEEC);
	op_stkvar	(x,	1);
	set_cmt	(0X710003EF08,	"this",	0);
	set_cmt	(0X710003EF1C,	"is_dst",	0);
	set_cmt	(0X710003EF20,	"out_count",	0);
	set_cmt	(0X710003EF24,	"out_times",	0);
	set_cmt	(0X710003EF28,	"out_times_size",	0);
	set_cmt	(0X710003EF2C,	"calendar",	0);
	set_cmt	(0X710003EF30,	"rule",	0);
	create_insn	(x=0X710003EF3C);
	op_hex		(x,	1);
	create_insn	(0X710003EF5C);
	create_insn	(x=0X710003EF64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EF68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EF6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EF70);
	op_stkvar	(x,	1);
	create_insn	(0X710003EF78);
	create_insn	(0X710003EF9C);
	create_insn	(x=0X710003EFAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EFB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EFB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EFB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EFC0);
	op_stkvar	(x,	1);
	set_name	(0X710003EFC0,	"ParseTimeZoneBinary_W");
	create_insn	(x=0X710003EFC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003EFC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F000);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F008);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F018);
	op_stkvar	(x,	1);
	create_insn	(0X710003F020);
	create_dword	(0X710003F024);
	make_array	(0X710003F028,	0X8);
	create_insn	(0X710003F030);
	set_name	(0X710003F030,	"ToCalendarTime");
	create_insn	(x=0X710003F034);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F038);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F0CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F0D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F0D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F0EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F0F0);
	op_stkvar	(x,	1);
	create_insn	(0X710003F0FC);
	create_insn	(x=0X710003F100);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F104);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F110);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F118);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F11C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F134);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F144);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F14C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F150);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F154);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F158);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F15C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F160);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F164);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F16C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F17C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F184);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F190);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F19C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F1A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F1AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F1B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F1BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F1C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F1D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F1D4);
	op_stkvar	(x,	1);
	create_insn	(0X710003F1F0);
	create_insn	(x=0X710003F1F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F1F8);
	op_stkvar	(x,	1);
	create_insn	(0X710003F204);
	create_insn	(0X710003F210);
	create_insn	(0X710003F21C);
	create_insn	(0X710003F228);
	create_insn	(0X710003F234);
	create_insn	(0X710003F240);
	create_insn	(0X710003F24C);
	create_insn	(x=0X710003F268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F27C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F280);
	op_stkvar	(x,	1);
	make_array	(0X710003F28C,	0X4);
	create_insn	(0X710003F290);
	set_name	(0X710003F290,	"ToPosixTime");
	create_insn	(x=0X710003F294);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F298);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F29C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F2A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F2A8);
	op_stkvar	(x,	1);
	set_cmt	(0X710003F34C,	"out_time",	0);
	create_insn	(x=0X710003F34C);
	op_stkvar	(x,	1);
	set_cmt	(0X710003F350,	"tmp",	0);
	create_insn	(x=0X710003F350);
	op_stkvar	(x,	1);
	set_cmt	(0X710003F354,	"rule",	0);
	create_insn	(x=0X710003F358);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F374);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F390);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F394);
	op_stkvar	(x,	1);
	create_insn	(0X710003F3BC);
	create_insn	(x=0X710003F3C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F3C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F3CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F3D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F3D4);
	op_stkvar	(x,	1);
	create_insn	(0X710003F3E0);
	create_insn	(x=0X710003F3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F400);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F40C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F424);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F430);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F434);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F444);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F450);
	op_stkvar	(x,	1);
	create_insn	(0X710003F4EC);
	create_insn	(0X710003F4F4);
	create_insn	(x=0X710003F508);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F51C);
	op_stkvar	(x,	1);
	create_insn	(0X710003F534);
	create_qword	(0X710003F538);
	create_insn	(0X710003F540);
	set_name	(0X710003F540,	"GetTimeZoneTime");
	make_array	(0X710003F5DC,	0X4);
	create_insn	(0X710003F5E0);
	set_name	(0X710003F5E0,	"localsub");
	create_insn	(x=0X710003F5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F6AC);
	op_stkvar	(x,	1);
	create_insn	(0X710003F6BC);
	create_insn	(x=0X710003F6C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F6CC);
	op_stkvar	(x,	1);
	create_insn	(0X710003F6DC);
	create_insn	(0X710003F710);
	create_insn	(x=0X710003F724);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F770);
	op_stkvar	(x,	1);
	create_insn	(0X710003F77C);
	create_insn	(0X710003F7B8);
	create_insn	(x=0X710003F86C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F870);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F874);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F880);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F884);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F888);
	op_stkvar	(x,	1);
	create_insn	(0X710003F894);
	create_insn	(x=0X710003F898);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F89C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F8A0);
	op_stkvar	(x,	1);
	make_array	(0X710003F8AC,	0X4);
	create_insn	(0X710003F8B0);
	set_name	(0X710003F8B0,	"time1");
	create_insn	(x=0X710003F8B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F8B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F8BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F8C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F8C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F8C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F91C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F944);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F958);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F97C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003F98C);
	op_stkvar	(x,	1);
	create_insn	(0X710003F994);
	create_insn	(0X710003F9DC);
	create_insn	(x=0X710003F9EC);
	op_stkvar	(x,	1);
	create_insn	(0X710003F9F8);
	create_insn	(x=0X710003FA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FA14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FA18);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FA30);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FA34);
	op_stkvar	(x,	1);
	create_insn	(0X710003FA3C);
	create_insn	(x=0X710003FA68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FA84);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FAAC);
	op_stkvar	(x,	1);
	create_insn	(0X710003FAFC);
	create_insn	(x=0X710003FB00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB20);
	op_stkvar	(x,	1);
	set_name	(0X710003FB20,	"ParseTimeZoneBinary");
	create_insn	(x=0X710003FB2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710003FB48);
	op_stkvar	(x,	1);
	create_insn	(0X710003FB50);
	set_name	(0X710003FB50,	"tzloadbody");
	create_insn	(x=0X710003FB54);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB58);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710003FC04);
	op_hex		(x,	1);
	create_insn	(x=0X710003FC1C);
	op_hex		(x,	1);
	create_insn	(x=0X710003FC28);
	op_hex		(x,	1);
	create_insn	(x=0X710003FC30);
	op_hex		(x,	1);
	create_insn	(x=0X710003FC6C);
	op_hex		(x,	1);
	create_insn	(x=0X710003FC78);
	op_hex		(x,	1);
	create_insn	(x=0X710003FC8C);
	op_hex		(x,	1);
	create_insn	(x=0X710003FCA0);
	op_hex		(x,	1);
	create_insn	(x=0X710003FCAC);
	op_hex		(x,	1);
	create_insn	(x=0X710003FCD0);
	op_hex		(x,	1);
	create_insn	(x=0X710003FCDC);
	op_hex		(x,	1);
	create_insn	(x=0X710003FCF8);
	op_hex		(x,	1);
	create_insn	(0X710003FD88);
	create_insn	(x=0X710003FDC8);
	op_hex		(x,	1);
	create_insn	(x=0X710003FE14);
	op_hex		(x,	1);
	create_insn	(0X710003FE3C);
	create_insn	(0X710003FE54);
	create_insn	(0X710003FE8C);
	create_insn	(0X710003FE94);
	create_insn	(x=0X710003FEB4);
	op_hex		(x,	1);
	create_insn	(x=0X710003FED8);
	op_hex		(x,	1);
	create_insn	(x=0X710003FF34);
	op_hex		(x,	1);
	create_insn	(0X710003FF40);
	create_insn	(0X710003FF54);
	create_insn	(x=0X710003FF58);
	op_hex		(x,	1);
	create_insn	(x=0X710003FF94);
	op_hex		(x,	1);
	create_insn	(0X7100040008);
	create_insn	(0X710004001C);
	create_insn	(x=0X7100040020);
	op_hex		(x,	1);
	create_insn	(x=0X7100040060);
	op_hex		(x,	1);
	create_insn	(0X71000400AC);
	create_insn	(0X71000400C0);
	create_insn	(x=0X71000400C4);
	op_hex		(x,	1);
	create_insn	(x=0X7100040100);
	op_hex		(x,	1);
	create_insn	(0X7100040138);
	create_insn	(x=0X710004013C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040140);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040144);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004014C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040150);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040154);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040158);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004015C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040160);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040164);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040168);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004016C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040170);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040174);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040178);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040188);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000401A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000401B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000401D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000401D4);
	op_hex		(x,	1);
	create_insn	(x=0X7100040208);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004020C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040220);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040228);
	op_stkvar	(x,	1);
	create_insn	(0X710004023C);
	create_insn	(x=0X7100040248);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040258);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040260);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040270);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004027C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040280);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000402BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000402C4);
	create_insn	(x=0X71000402E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000402E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000402EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000402F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000402FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100040398);
	create_insn	(0X71000403FC);
	create_insn	(0X71000404B8);
	create_insn	(x=0X7100040538);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040540);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040558);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040560);
	op_stkvar	(x,	1);
	create_insn	(0X71000405F0);
	create_insn	(x=0X7100040664);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004066C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040684);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004068C);
	op_stkvar	(x,	1);
	create_insn	(0X71000406CC);
	create_insn	(0X71000406D4);
	create_insn	(x=0X7100040710);
	op_hex		(x,	1);
	create_insn	(0X7100040724);
	create_insn	(x=0X7100040758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004075C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040760);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040764);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004076C);
	op_stkvar	(x,	1);
	create_insn	(0X7100040778);
	create_insn	(0X710004077C);
	create_insn	(0X7100040780);
	set_name	(0X7100040780,	"mktime_tzname");
	create_insn	(x=0X710004078C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X710004079C,	0X4);
	create_insn	(x=0X71000407A0);
	op_stkvar	(x,	1);
	set_name	(0X71000407A0,	"localtime_rz");
	create_insn	(x=0X71000407C4);
	op_stkvar	(x,	1);
	make_array	(0X71000407CC,	0X4);
	create_insn	(x=0X71000407D0);
	op_stkvar	(x,	1);
	set_name	(0X71000407D0,	"timesub");
	create_insn	(x=0X71000407D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000407D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000407DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040850);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004097C);
	op_hex		(x,	1);
	create_insn	(0X7100040998);
	create_insn	(x=0X7100040A80);
	op_hex		(x,	1);
	create_insn	(0X7100040A8C);
	set_cmt	(0X7100040A98,	"a1",	0);
	create_insn	(x=0X7100040AB0);
	op_hex		(x,	1);
	create_insn	(x=0X7100040AD8);
	op_hex		(x,	1);
	create_insn	(x=0X7100040B48);
	op_hex		(x,	1);
	create_insn	(x=0X7100040B7C);
	op_hex		(x,	1);
	create_insn	(0X7100040B98);
	create_insn	(x=0X7100040BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040BB8);
	op_stkvar	(x,	1);
	create_insn	(0X7100040BC0);
	create_insn	(0X7100040BD8);
	create_insn	(x=0X7100040BF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100040C0C);
	create_insn	(x=0X7100040C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040C44);
	op_stkvar	(x,	1);
	make_array	(0X7100040C4C,	0X4);
	create_insn	(0X7100040C50);
	set_name	(0X7100040C50,	"tzparse");
	create_insn	(x=0X7100040C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040C64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040C68);
	op_stkvar	(x,	1);
	create_insn	(0X7100040CB4);
	create_insn	(x=0X7100040CE8);
	op_stkvar	(x,	1);
	create_insn	(0X7100040D44);
	create_insn	(x=0X7100040D54);
	op_stkvar	(x,	1);
	set_cmt	(0X7100040D5C,	"src",	0);
	set_cmt	(0X7100040D60,	"size",	0);
	set_cmt	(0X7100040D8C,	"dst",	0);
	create_insn	(0X7100040DA0);
	create_insn	(0X7100040DD0);
	create_insn	(x=0X7100040DF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040E04);
	op_stkvar	(x,	1);
	create_insn	(0X7100040E10);
	create_insn	(x=0X7100040E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040E48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100040E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100040EFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100040F30);
	op_hex		(x,	1);
	create_insn	(0X7100040F40);
	create_insn	(0X7100040F7C);
	create_insn	(x=0X7100040F8C);
	op_hex		(x,	1);
	create_insn	(0X7100040FA0);
	create_insn	(x=0X7100040FEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041000);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041008);
	op_stkvar	(x,	1);
	create_insn	(0X7100041018);
	create_insn	(0X7100041050);
	create_insn	(x=0X7100041064);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041078);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004107C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041084);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004108C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041094);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000410A0);
	op_hex		(x,	1);
	create_insn	(0X71000410B0);
	create_insn	(0X71000410E8);
	create_insn	(x=0X71000410F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041140);
	op_hex		(x,	1);
	create_insn	(x=0X7100041184);
	op_hex		(x,	1);
	create_insn	(x=0X71000411B4);
	op_hex		(x,	1);
	create_insn	(0X71000411C4);
	create_insn	(0X71000411DC);
	create_insn	(x=0X71000411F4);
	op_stkvar	(x,	1);
	create_insn	(0X71000411FC);
	create_insn	(x=0X7100041204);
	op_stkvar	(x,	1);
	create_insn	(0X710004121C);
	create_insn	(x=0X7100041280);
	op_stkvar	(x,	1);
	set_cmt	(0X71000412C8,	"src",	0);
	set_cmt	(0X71000412D0,	"size",	0);
	set_cmt	(0X71000412D4,	"dst",	0);
	set_cmt	(0X71000412E0,	"src",	0);
	set_cmt	(0X71000412E4,	"size",	0);
	set_cmt	(0X71000412EC,	"dst",	0);
	create_insn	(x=0X7100041300);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041304);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041324);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004132C);
	op_stkvar	(x,	1);
	make_array	(0X7100041348,	0X8);
	create_insn	(0X7100041350);
	set_name	(0X7100041350,	"getoffset");
	create_insn	(0X710004147C);
	make_array	(0X7100041484,	0XC);
	create_insn	(0X7100041490);
	set_name	(0X7100041490,	"getrule");
	create_insn	(0X71000414EC);
	create_insn	(0X71000415E0);
	create_insn	(0X7100041650);
	create_insn	(0X7100041658);
	make_array	(0X7100041664,	0XC);
	create_insn	(x=0X7100041670);
	op_hex		(x,	1);
	set_name	(0X7100041670,	"transtime");
	create_insn	(0X71000416CC);
	create_insn	(x=0X710004181C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100041860);
	create_insn	(0X7100041880);
	create_insn	(0X7100041890);
	create_insn	(x=0X71000418B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000418C8);
	op_hex		(x,	1);
	create_insn	(0X7100041910);
	set_name	(0X7100041910,	"time2sub");
	create_insn	(x=0X7100041914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004191C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041920);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041924);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041928);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041958);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041960);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041968);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041970);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041978);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041988);
	op_hex		(x,	1);
	create_insn	(x=0X71000419A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000419B0);
	op_hex		(x,	1);
	create_insn	(x=0X71000419C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000419C8);
	create_insn	(x=0X71000419F0);
	op_hex		(x,	1);
	create_insn	(x=0X7100041A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041A0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041A14);
	op_hex		(x,	1);
	create_insn	(0X7100041A24);
	create_insn	(x=0X7100041A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041A6C);
	op_hex		(x,	1);
	create_insn	(0X7100041A7C);
	create_insn	(x=0X7100041A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041AA0);
	op_hex		(x,	1);
	create_insn	(0X7100041AB0);
	create_insn	(0X7100041B0C);
	create_insn	(x=0X7100041B40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100041B74);
	op_hex		(x,	1);
	create_insn	(x=0X7100041BD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100041BF4);
	op_hex		(x,	1);
	create_insn	(x=0X7100041C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100041C4C);
	op_hex		(x,	1);
	create_insn	(0X7100041CB8);
	create_insn	(x=0X7100041CBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041CD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041CD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041CDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041CE0);
	op_stkvar	(x,	1);
	create_insn	(0X7100041CEC);
	create_insn	(x=0X7100041CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D0C);
	op_stkvar	(x,	1);
	create_insn	(0X7100041D14);
	create_insn	(x=0X7100041D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D84);
	op_stkvar	(x,	1);
	create_insn	(0X7100041D8C);
	create_insn	(x=0X7100041D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041E08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041E3C);
	op_stkvar	(x,	1);
	create_insn	(0X7100041E44);
	create_insn	(x=0X7100041E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041E88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041E98);
	op_stkvar	(x,	1);
	create_insn	(0X7100041EBC);
	create_insn	(x=0X7100041EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041ED4);
	op_stkvar	(x,	1);
	create_insn	(0X7100041EF8);
	create_insn	(x=0X7100041F34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F58);
	op_stkvar	(x,	1);
	set_cmt	(0X7100041F64,	"my_tm",	0);
	create_insn	(x=0X7100041F64);
	op_stkvar	(x,	1);
	set_cmt	(0X7100041F68,	"your_tm",	0);
	create_insn	(x=0X7100041F68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041FA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100041FBC);
	create_insn	(x=0X7100041FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100041FCC);
	op_stkvar	(x,	1);
	create_insn	(0X7100041FD8);
	create_insn	(0X7100041FE0);
	set_name	(0X7100041FE0,	"tmcomp");
	create_insn	(0X7100042008);
	create_insn	(0X7100042014);
	create_insn	(0X7100042054);
	set_name	(0X7100042054,	"nn::timesrv::detail::service::AlarmService::AlarmService");
	create_insn	(0X7100042064);
	set_name	(0X7100042064,	"nullsub_7");
	create_insn	(x=0X7100042068);
	op_stkvar	(x,	1);
	set_name	(0X7100042068,	"nn::timesrv::detail::service::AlarmService::CreateWakeupAlarm");
	create_insn	(x=0X710004206C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042070);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042074);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000420BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000420C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000420D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000420E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000420F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000420FC);
	op_hex		(x,	1);
	create_insn	(0X7100042114);
	create_insn	(x=0X7100042120);
	op_hex		(x,	1);
	create_insn	(0X7100042148);
	create_insn	(x=0X7100042194);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042198);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004219C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000421A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000421A8);
	op_stkvar	(x,	1);
	set_name	(0X71000421A8,	"nn::timesrv::detail::service::AlarmService::CreateBackgroundTaskAlarm");
	create_insn	(x=0X71000421AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000421B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000421B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000421FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042204);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042218);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042220);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042234);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004223C);
	op_hex		(x,	1);
	create_insn	(0X7100042254);
	create_insn	(x=0X7100042260);
	op_hex		(x,	1);
	create_insn	(0X7100042288);
	create_insn	(x=0X71000422D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000422D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000422DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000422E0);
	op_stkvar	(x,	1);
	create_insn	(0X71000422E8);
	create_insn	(x=0X71000422F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000422F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000422F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042338);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004233C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042340);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042348);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004234C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042350);
	op_stkvar	(x,	1);
	create_insn	(0X7100042358);
	set_name	(0X7100042358,	"nn::timesrv::detail::service::ISteadyClockAlarm::GetAlarmEvent");
	create_insn	(0X7100042360);
	set_name	(0X7100042360,	"nn::timesrv::detail::service::ISteadyClockAlarm::Enable");
	create_insn	(x=0X7100042364);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004236C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042374);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004237C);
	op_stkvar	(x,	1);
	create_insn	(0X7100042388);
	set_name	(0X7100042388,	"nn::timesrv::detail::service::ISteadyClockAlarm::Disable");
	create_insn	(0X7100042390);
	set_name	(0X7100042390,	"nn::timesrv::detail::service::ISteadyClockAlarm::IsEnabled");
	create_insn	(0X7100042398);
	set_name	(0X7100042398,	"nn::timesrv::detail::service::ISteadyClockAlarm::CreateWakeLock");
	create_insn	(x=0X710004239C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000423AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000423B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000423B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000423C4);
	set_name	(0X71000423C4,	"nn::timesrv::detail::service::ISteadyClockAlarm::DestroyWakeLock");
	create_insn	(0X71000423CC);
	set_name	(0X71000423CC,	"nullsub_83");
	create_insn	(0X71000423D0);
	set_name	(0X71000423D0,	"nn::timesrv::detail::service::SteadyClockAlarm::SteadyClockAlarm");
	create_insn	(x=0X71000423DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000423E0);
	op_stkvar	(x,	1);
	set_cmt	(0X71000423EC,	"this",	0);
	set_cmt	(0X71000423F0,	"alarm",	0);
	create_insn	(x=0X71000423FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042400);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042408);
	op_stkvar	(x,	1);
	set_name	(0X7100042408,	"nn::timesrv::detail::service::SteadyClockAlarm::GetAlarmEvent");
	create_insn	(x=0X710004240C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004243C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042444);
	op_stkvar	(x,	1);
	create_insn	(0X710004244C);
	set_name	(0X710004244C,	"nn::timesrv::detail::service::SteadyClockAlarm::Enable");
	create_insn	(x=0X7100042450);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042460);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004246C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042474);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042480);
	op_stkvar	(x,	1);
	set_name	(0X7100042480,	"nn::timesrv::detail::service::SteadyClockAlarm::Disable");
	set_cmt	(0X710004248C,	"alarm",	0);
	create_insn	(x=0X7100042498);
	op_stkvar	(x,	1);
	create_insn	(0X71000424A0);
	create_insn	(x=0X71000424BC);
	op_stkvar	(x,	1);
	set_name	(0X71000424BC,	"nn::timesrv::detail::service::SteadyClockAlarm::CreateWakeLock");
	create_insn	(x=0X71000424C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000424C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000424EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000424F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000424F4);
	op_stkvar	(x,	1);
	create_insn	(0X71000424FC);
	create_insn	(x=0X7100042510);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004254C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042550);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042554);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004255C);
	op_stkvar	(x,	1);
	set_name	(0X710004255C,	"nn::timesrv::detail::service::SteadyClockAlarm::DestroyWakeLock");
	create_insn	(x=0X7100042560);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042590);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042594);
	op_stkvar	(x,	1);
	set_cmt	(0X710004259C,	"this",	0);
	create_insn	(0X710004259C);
	create_insn	(x=0X71000425A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000425AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000425B4);
	set_name	(0X71000425B4,	"nn::timesrv::detail::service::TimeServiceManager::TimeServiceManager");
	create_insn	(x=0X71000425B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000425BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000425C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000425C4);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042630,	"clearMode",	0);
	set_cmt	(0X7100042634,	"type",	0);
	set_cmt	(0X710004263C,	"event",	0);
	create_insn	(x=0X7100042644);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042650,	"event",	0);
	set_cmt	(0X7100042654,	"clearMode",	0);
	set_cmt	(0X7100042658,	"type",	0);
	create_insn	(x=0X7100042664);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042670,	"event",	0);
	set_cmt	(0X7100042674,	"clearMode",	0);
	set_cmt	(0X7100042678,	"type",	0);
	create_insn	(x=0X7100042684);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042718);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004271C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042730);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004273C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042744);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004274C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042754);
	op_stkvar	(x,	1);
	set_name	(0X7100042754,	"TimeServiceManager:Finalise");
	create_insn	(x=0X7100042758);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004275C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042860);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042868);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042874);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042878);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042880);
	op_stkvar	(x,	1);
	set_name	(0X7100042880,	"nn::timesrv::detail::service::TimeServiceManager::GetStaticServiceAsUser");
	create_insn	(x=0X7100042884);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042888);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004288C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000428C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000428D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000428E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000428F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000428FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042910);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042918);
	op_hex		(x,	1);
	create_insn	(0X7100042930);
	create_insn	(x=0X710004293C);
	op_hex		(x,	1);
	create_insn	(0X7100042964);
	create_insn	(x=0X71000429B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000429B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000429B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000429BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000429C4);
	op_stkvar	(x,	1);
	set_name	(0X71000429C4,	"nn::timesrv::detail::service::TimeServiceManager::GetStaticServiceAsAdmin");
	create_insn	(x=0X71000429C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000429CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000429D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042A0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042A14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042A24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042A38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042A40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042A54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042A5C);
	op_hex		(x,	1);
	create_insn	(0X7100042A74);
	create_insn	(x=0X7100042A80);
	op_hex		(x,	1);
	create_insn	(0X7100042AA8);
	create_insn	(x=0X7100042AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042AFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042B08);
	op_stkvar	(x,	1);
	set_name	(0X7100042B08,	"nn::timesrv::detail::service::TimeServiceManager::GetStaticServiceAsRepair");
	create_insn	(x=0X7100042B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042B50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042B58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042B68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042B7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042B84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042B98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042BA0);
	op_hex		(x,	1);
	create_insn	(0X7100042BB8);
	create_insn	(x=0X7100042BC4);
	op_hex		(x,	1);
	create_insn	(0X7100042BEC);
	create_insn	(x=0X7100042C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042C40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042C4C);
	op_stkvar	(x,	1);
	set_name	(0X7100042C4C,	"nn::timesrv::detail::service::TimeServiceManager::GetStaticServiceAsServiceManager");
	create_insn	(x=0X7100042C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042C58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042C94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042C9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042CAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042CC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042CC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042CDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100042CE4);
	op_hex		(x,	1);
	create_insn	(0X7100042CFC);
	create_insn	(x=0X7100042D08);
	op_hex		(x,	1);
	create_insn	(0X7100042D30);
	create_insn	(x=0X7100042D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042D88);
	op_stkvar	(x,	1);
	create_insn	(0X7100042D90);
	set_name	(0X7100042D90,	"nn::timesrv::detail::service::TimeServiceManager::SetupStandardSteadyClockCore");
	create_insn	(x=0X7100042D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042DAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042DC0);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042DE4,	"result",	0);
	set_cmt	(0X7100042DE8,	"internal_offset",	0);
	set_cmt	(0X7100042DEC,	"uuid",	0);
	create_insn	(x=0X7100042DF0);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042DF8,	"this",	0);
	set_cmt	(0X7100042DFC,	"internal_offset",	0);
	set_cmt	(0X7100042E00,	"uuid",	0);
	set_cmt	(0X7100042E08,	"this",	0);
	set_cmt	(0X7100042E0C,	"a2",	0);
	create_insn	(x=0X7100042E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042E40);
	op_stkvar	(x,	1);
	set_name	(0X7100042E40,	"TimeServiceManager::ValidateInitialisedAndSetupServices");
	create_insn	(x=0X7100042E44);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042EA0,	"this",	0);
	create_insn	(x=0X7100042EA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042EA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042EB4);
	op_stkvar	(x,	1);
	create_insn	(0X7100042EBC);
	set_name	(0X7100042EBC,	"nn::timesrv::detail::service::TimeServiceManager::SetupStandardLocalSystemClockCore");
	create_insn	(x=0X7100042EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042EC4);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042ED4,	"this",	0);
	set_cmt	(0X7100042ED8,	"context_writer",	0);
	create_insn	(x=0X7100042EDC);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042EE4,	"this",	0);
	set_cmt	(0X7100042EE8,	"time",	0);
	create_insn	(x=0X7100042EE8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042EEC,	"context",	0);
	create_insn	(x=0X7100042EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042F10);
	op_stkvar	(x,	1);
	set_name	(0X7100042F10,	"nn::timesrv::detail::service::TimeServiceManager::SetupStandardNetworkSystemClockCore");
	create_insn	(x=0X7100042F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042F18);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042F28,	"this",	0);
	set_cmt	(0X7100042F2C,	"context_writer",	0);
	set_cmt	(0X7100042F38,	"a1",	0);
	set_cmt	(0X7100042F3C,	"a3",	0);
	set_cmt	(0X7100042F40,	"a2",	0);
	create_insn	(x=0X7100042F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042F5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042F68);
	op_stkvar	(x,	1);
	set_name	(0X7100042F68,	"nn::timesrv::detail::service::TimeServiceManager::SetupStandardUserSystemClockCore");
	create_insn	(x=0X7100042F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042F70);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042F7C,	"this",	0);
	create_insn	(x=0X7100042F8C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100042FA0,	"this",	0);
	create_insn	(x=0X7100042FAC);
	op_hex		(x,	1);
	create_insn	(x=0X7100042FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042FC8);
	op_stkvar	(x,	1);
	create_insn	(0X7100042FD0);
	create_insn	(0X7100042FD8);
	set_name	(0X7100042FD8,	"nn::timesrv::detail::service::TimeServiceManager::SetupTimeZoneServiceCore");
	create_insn	(x=0X7100042FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100042FE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043008);
	op_stkvar	(x,	1);
	set_cmt	(0X7100043034,	"this",	0);
	create_insn	(x=0X7100043044);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004304C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043050);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004305C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043064);
	op_stkvar	(x,	1);
	set_name	(0X7100043064,	"nn::timesrv::detail::service::TimeServiceManager::SetupEphemeralNetworkSystemClockCore");
	create_insn	(x=0X7100043068);
	op_stkvar	(x,	1);
	set_cmt	(0X7100043074,	"this",	0);
	set_cmt	(0X7100043078,	"context_writer",	0);
	set_cmt	(0X7100043080,	"this",	0);
	create_insn	(x=0X7100043090);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043098);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000430A0);
	op_stkvar	(x,	1);
	set_name	(0X71000430A0,	"nn::timesrv::detail::service::TimeServiceManager::GetStandardLocalClockOperationEvent");
	create_insn	(x=0X71000430A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000430D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000430DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000430E4);
	op_stkvar	(x,	1);
	set_name	(0X71000430E4,	"nn::timesrv::detail::service::TimeServiceManager::GetStandardNetworkClockOperationEventForServiceManager");
	create_insn	(x=0X71000430E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043118);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043120);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043128);
	op_stkvar	(x,	1);
	set_name	(0X7100043128,	"nn::timesrv::detail::service::TimeServiceManager::GetEphemeralNetworkClockOperationEventForServiceManager");
	create_insn	(x=0X710004312C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004315C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043164);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004316C);
	op_stkvar	(x,	1);
	set_name	(0X710004316C,	"nn::timesrv::detail::service::TimeServiceManager::GetStandardUserSystemClockAutomaticCorrectionUpdatedEvent");
	create_insn	(x=0X7100043170);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000431A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000431AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000431B4);
	set_name	(0X71000431B4,	"nn::timesrv::detail::service::TimeServiceManager::SetStandardSteadyClockBaseTime");
	create_insn	(x=0X71000431B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000431BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000431CC);
	op_stkvar	(x,	1);
	set_cmt	(0X71000431F0,	"this",	0);
	set_cmt	(0X71000431F4,	"time",	0);
	create_insn	(x=0X71000431F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000431F8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100043200,	"this",	0);
	set_cmt	(0X7100043204,	"time",	0);
	create_insn	(x=0X7100043204);
	op_stkvar	(x,	1);
	set_cmt	(0X710004320C,	"this",	0);
	set_cmt	(0X7100043210,	"continuous_adjustment",	0);
	create_insn	(x=0X7100043224);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004322C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043238);
	op_stkvar	(x,	1);
	set_name	(0X7100043238,	"nn::timesrv::detail::service::TimeServiceManager::GetClosestAlarmUpdatedEvent");
	create_insn	(x=0X710004323C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043278);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043280);
	op_stkvar	(x,	1);
	set_name	(0X7100043280,	"nn::timesrv::detail::service::TimeServiceManager::CheckAndSignalAlarms");
	create_insn	(x=0X7100043294);
	op_stkvar	(x,	1);
	create_insn	(0X710004329C);
	set_name	(0X710004329C,	"nn::timesrv::detail::service::TimeServiceManager::GetClosestAlarmInfo");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_7(void) {
        auto x;
#define id x

	create_insn	(x=0X71000432A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000432A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000432A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000432BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000432C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000432D0);
	op_hex		(x,	1);
	create_insn	(x=0X71000432DC);
	op_stkvar	(x,	1);
	set_cmt	(0X71000432EC,	"this",	0);
	create_insn	(x=0X71000432EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043308);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043310);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043314);
	op_stkvar	(x,	1);
	create_insn	(0X7100043320);
	create_insn	(x=0X7100043328);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004332C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043330);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043370);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043374);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043378);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043380);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043384);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043388);
	op_stkvar	(x,	1);
	create_insn	(0X7100043390);
	set_name	(0X7100043390,	"nullsub_87");
	create_insn	(0X7100043394);
	set_name	(0X7100043394,	"nn::timesrv::detail::service::IPowerStateRequestHandler::IPowerStateRequestHandler");
	create_insn	(0X71000433A4);
	set_name	(0X71000433A4,	"nullsub_8");
	create_insn	(x=0X71000433A8);
	op_stkvar	(x,	1);
	set_name	(0X71000433A8,	"nn::timesrv::detail::service::PowerStateRequestHandler::GetPowerStateRequestEventReadableHandle");
	create_insn	(x=0X71000433AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000433E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000433E8);
	op_stkvar	(x,	1);
	create_insn	(0X71000433F0);
	set_name	(0X71000433F0,	"nn::timesrv::detail::service::PowerStateRequestHandler::GetAndClearPowerStateRequest");
	create_insn	(x=0X71000433F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000433F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043408);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043414);
	op_hex		(x,	1);
	create_insn	(x=0X7100043420);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043428);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043430);
	op_stkvar	(x,	1);
	create_insn	(0X710004343C);
	set_name	(0X710004343C,	"GetService_PSCLock");
	create_insn	(x=0X7100043440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043444);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043448);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043464);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043468);
	op_stkvar	(x,	1);
	create_insn	(0X7100043474);
	create_insn	(x=0X7100043480);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043490);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043494);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043498);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000434A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000434A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000434C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000434E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000434E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043560);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043564);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043568);
	op_stkvar	(x,	1);
	create_insn	(0X7100043574);
	create_insn	(x=0X710004357C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043584);
	op_stkvar	(x,	1);
	create_insn	(0X7100043590);
	create_insn	(x=0X7100043594);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000435A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000435B0);
	op_plain_offset	(x,	1,	0X7100074168);
	op_plain_offset	(x,	129,	0X7100074168);
	create_insn	(0X71000435C0);
	create_insn	(x=0X71000435C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000435EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043604);
	op_plain_offset	(x,	1,	0X7100074168);
	op_plain_offset	(x,	129,	0X7100074168);
	create_insn	(x=0X7100043610);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X710004361C);
	set_name	(0X710004361C,	"nn::psc::sf::IPmStateLock::Lock_0");
	create_insn	(x=0X7100043620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043638);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043640);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004364C);
	op_stkvar	(x,	1);
	create_insn	(0X7100043654);
	create_insn	(0X710004365C);
	create_insn	(x=0X7100043660);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043664);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043668);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004369C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000436A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000436AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000436B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000436F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000436FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043700);
	op_stkvar	(x,	1);
	create_insn	(0X710004370C);
	create_insn	(0X7100043714);
	set_name	(0X7100043714,	"nn::psc::sf::IPmStateLock::Initialize");
	create_insn	(0X7100043724);
	set_name	(0X7100043724,	"nn::psc::sf::IPmStateLock::Lock");
	create_insn	(0X7100043730);
	set_name	(0X7100043730,	"nn::psc::sf::IPmStateLock::Unlock");
	create_insn	(0X710004373C);
	set_name	(0X710004373C,	"nn::psc::sf::IPmStateLock::IsLocked");
	create_insn	(0X7100043748);
	set_name	(0X7100043748,	"nn::psc::sf::IPmStateLock::GetLockState");
	create_insn	(0X7100043754);
	create_insn	(0X710004375C);
	create_insn	(0X7100043764);
	create_insn	(x=0X7100043768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004376C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043770);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043798);
	op_hex		(x,	1);
	create_insn	(x=0X71000437D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000437D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000437DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000437E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000437F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043800);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004380C);
	op_hex		(x,	1);
	create_insn	(x=0X7100043830);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043834);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043838);
	op_stkvar	(x,	1);
	create_insn	(0X7100043844);
	create_insn	(x=0X7100043850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043854);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043858);
	op_stkvar	(x,	1);
	create_insn	(0X7100043864);
	create_insn	(x=0X7100043868);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004386C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043870);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043874);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000438A0);
	op_hex		(x,	1);
	create_insn	(x=0X71000438D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000438E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000438F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000438FC);
	op_hex		(x,	1);
	create_insn	(0X7100043920);
	create_insn	(0X710004392C);
	create_insn	(x=0X7100043938);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004393C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043940);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043944);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043950);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043954);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004396C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043974);
	create_insn	(x=0X7100043988);
	op_hex		(x,	1);
	create_insn	(0X71000439A0);
	create_insn	(x=0X71000439B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000439B8);
	create_insn	(x=0X71000439C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000439CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000439D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000439D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000439DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000439EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A30);
	create_insn	(x=0X7100043A34);
	op_stkvar	(x,	1);
	create_insn	(0X7100043A3C);
	create_insn	(0X7100043A40);
	create_insn	(0X7100043A44);
	create_insn	(x=0X7100043A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043AAC);
	op_stkvar	(x,	1);
	create_insn	(0X7100043AB4);
	create_insn	(x=0X7100043AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043AD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043ADC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043AEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043AF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100043B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B58);
	op_stkvar	(x,	1);
	create_insn	(0X7100043B64);
	create_insn	(x=0X7100043B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B6C);
	op_stkvar	(x,	1);
	make_array	(0X7100043B78,	0X8);
	create_insn	(0X7100043B80);
	create_insn	(x=0X7100043B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043B9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043BDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043BEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C08);
	op_stkvar	(x,	1);
	create_insn	(0X7100043C14);
	create_insn	(x=0X7100043C2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043C88);
	op_stkvar	(x,	1);
	create_insn	(0X7100043C94);
	create_insn	(x=0X7100043C98);
	op_stkvar	(x,	1);
	create_insn	(0X7100043CA4);
	create_insn	(0X7100043CBC);
	create_insn	(0X7100043CEC);
	create_insn	(0X7100043D00);
	create_insn	(0X7100043D14);
	create_insn	(0X7100043D38);
	create_insn	(0X7100043D68);
	create_insn	(0X7100043D7C);
	create_insn	(x=0X7100043D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043D9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100043DF0);
	create_insn	(x=0X7100043E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043E28);
	op_stkvar	(x,	1);
	create_insn	(0X7100043E30);
	create_insn	(x=0X7100043E38);
	op_hex		(x,	1);
	create_insn	(x=0X7100043E88);
	op_hex		(x,	1);
	create_insn	(0X7100043EC0);
	create_insn	(x=0X7100043ED0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043EDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100043EE4);
	create_insn	(x=0X7100043F00);
	op_hex		(x,	1);
	create_insn	(0X7100043F2C);
	create_insn	(x=0X7100043F3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100043F64);
	op_stkvar	(x,	1);
	create_insn	(0X7100044008);
	create_insn	(x=0X710004404C);
	op_hex		(x,	1);
	create_insn	(x=0X710004405C);
	op_hex		(x,	1);
	create_insn	(0X7100044098);
	create_insn	(x=0X71000440A4);
	op_hex		(x,	1);
	create_insn	(x=0X71000440B0);
	op_hex		(x,	1);
	create_insn	(0X71000440EC);
	create_insn	(0X710004410C);
	create_insn	(x=0X7100044138);
	op_hex		(x,	1);
	create_insn	(x=0X7100044144);
	op_hex		(x,	1);
	create_insn	(0X7100044194);
	create_insn	(0X71000441A4);
	create_insn	(0X71000441B8);
	create_insn	(0X71000441C4);
	create_insn	(x=0X71000441C8);
	op_hex		(x,	1);
	create_insn	(x=0X71000441D4);
	op_hex		(x,	1);
	create_insn	(0X7100044228);
	create_insn	(x=0X710004422C);
	op_hex		(x,	1);
	create_insn	(x=0X7100044238);
	op_hex		(x,	1);
	create_insn	(0X7100044280);
	create_insn	(0X710004428C);
	create_insn	(0X7100044298);
	create_insn	(0X71000442A0);
	create_insn	(x=0X71000442E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000442E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000442E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000442EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000442F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000442F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000442FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044300);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044304);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044308);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044390);
	op_hex		(x,	1);
	create_insn	(0X71000443D0);
	create_insn	(x=0X71000443F4);
	op_hex		(x,	1);
	create_insn	(x=0X7100044404);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004440C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044418);
	op_stkvar	(x,	1);
	create_insn	(0X7100044420);
	create_insn	(x=0X710004442C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044430);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044434);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044438);
	op_stkvar	(x,	1);
	create_insn	(0X7100044440);
	create_insn	(x=0X7100044450);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044454);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004445C);
	op_stkvar	(x,	1);
	create_insn	(0X7100044464);
	create_insn	(x=0X7100044474);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044478);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004447C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044480);
	op_stkvar	(x,	1);
	create_insn	(0X7100044488);
	create_insn	(x=0X71000444BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000444C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000444C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000444C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000444D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000444D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000444D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000444DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044534);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044538);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004453C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044540);
	op_stkvar	(x,	1);
	create_insn	(0X7100044548);
	create_insn	(x=0X71000445B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000445BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000445C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000445C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000445CC);
	create_insn	(x=0X71000445E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000445EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000445F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000445F4);
	op_stkvar	(x,	1);
	create_insn	(0X71000445FC);
	create_insn	(x=0X710004460C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044610);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044618);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044624);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004462C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044630);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044634);
	op_stkvar	(x,	1);
	create_insn	(0X71000446AC);
	create_insn	(x=0X71000446EC);
	op_hex		(x,	1);
	create_insn	(x=0X71000446FC);
	op_hex		(x,	1);
	create_insn	(0X710004472C);
	create_insn	(x=0X7100044738);
	op_hex		(x,	1);
	create_insn	(x=0X7100044744);
	op_hex		(x,	1);
	create_insn	(x=0X7100044778);
	op_hex		(x,	1);
	create_insn	(x=0X710004477C);
	op_hex		(x,	1);
	create_insn	(0X71000447A0);
	create_insn	(0X71000447C8);
	create_insn	(0X71000447E4);
	create_insn	(0X7100044804);
	create_insn	(x=0X7100044834);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004483C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044840);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044844);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044848);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044850);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044854);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044858);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004485C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000448B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000448B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000448B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000448BC);
	op_stkvar	(x,	1);
	create_insn	(0X71000448C4);
	create_insn	(x=0X71000448D8);
	op_hex		(x,	1);
	create_insn	(x=0X71000448EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000448F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000448F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044900);
	op_stkvar	(x,	1);
	create_insn	(0X7100044908);
	create_insn	(0X710004492C);
	create_insn	(0X710004494C);
	create_insn	(x=0X710004497C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044980);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044984);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044988);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044990);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044994);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044998);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000449D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000449D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000449D8);
	op_stkvar	(x,	1);
	create_insn	(0X71000449E0);
	create_insn	(0X7100044A28);
	create_insn	(0X7100044A48);
	create_insn	(x=0X7100044A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044A80);
	op_stkvar	(x,	1);
	create_insn	(0X7100044A88);
	make_array	(0X7100044A8C,	0X4);
	create_insn	(0X7100044A90);
	create_insn	(x=0X7100044A94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100044A9C,	0X4);
	create_insn	(0X7100044AA0);
	set_name	(0X7100044AA0,	"nullsub_90");
	make_array	(0X7100044AA4,	0XC);
	create_insn	(x=0X7100044AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044AC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100044AC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100044AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044AF8);
	op_stkvar	(x,	1);
	create_insn	(0X7100044B00);
	create_insn	(x=0X7100044B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044B08);
	op_stkvar	(x,	1);
	create_insn	(0X7100044B10);
	create_insn	(x=0X7100044B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044B40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100044B60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100044B68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100044B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044B84);
	op_stkvar	(x,	1);
	make_array	(0X7100044B8C,	0X4);
	create_insn	(0X7100044B90);
	create_insn	(x=0X7100044B94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100044B9C);
	create_insn	(0X7100044BA4);
	create_insn	(0X7100044BB8);
	make_array	(0X7100044BBC,	0X4);
	create_insn	(x=0X7100044BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100044BD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100044BD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100044BE4,	0XC);
	create_insn	(x=0X7100044BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044BF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044C38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044C3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044C40);
	op_stkvar	(x,	1);
	create_insn	(0X7100044C48);
	create_insn	(x=0X7100044C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044C60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044C64);
	op_stkvar	(x,	1);
	create_insn	(0X7100044C6C);
	create_insn	(x=0X7100044C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044C8C);
	op_stkvar	(x,	1);
	create_insn	(0X7100044C94);
	create_insn	(x=0X7100044C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044C9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044CA0);
	op_stkvar	(x,	1);
	create_insn	(0X7100044CA8);
	create_dword	(0X7100044CAC);
	create_insn	(x=0X7100044CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044CD4);
	op_hex		(x,	1);
	create_insn	(x=0X7100044CEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044CF0);
	op_stkvar	(x,	1);
	create_insn	(0X7100044CF8);
	create_insn	(x=0X7100044D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044D10);
	op_stkvar	(x,	1);
	create_insn	(0X7100044D18);
	create_insn	(x=0X7100044D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044D20);
	op_stkvar	(x,	1);
	make_array	(0X7100044D28,	0X8);
	create_insn	(x=0X7100044D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044D44);
	op_stkvar	(x,	1);
	make_array	(0X7100044D4C,	0X4);
	create_insn	(0X7100044D50);
	create_insn	(x=0X7100044D60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100044D8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100044DA8);
	create_insn	(0X7100044DB0);
	create_insn	(x=0X7100044DB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044DC0);
	op_hex		(x,	1);
	create_insn	(x=0X7100044DDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044DE0);
	op_hex		(x,	1);
	create_insn	(0X7100044E38);
	create_insn	(0X7100044E44);
	create_insn	(0X7100044E68);
	make_array	(0X7100044E84,	0XC);
	create_insn	(0X7100044E90);
	create_insn	(x=0X7100044E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044E9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044EA0);
	op_hex		(x,	1);
	create_insn	(x=0X7100044EB0);
	op_hex		(x,	1);
	make_array	(0X7100044ED8,	0X8);
	create_insn	(0X7100044EE0);
	create_insn	(x=0X7100044EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100044EF0);
	op_hex		(x,	1);
	create_insn	(x=0X7100044F08);
	op_hex		(x,	1);
	create_insn	(x=0X7100044F28);
	op_hex		(x,	1);
	create_insn	(0X7100044F3C);
	create_insn	(x=0X7100044F64);
	op_hex		(x,	1);
	create_insn	(0X7100044F78);
	create_insn	(x=0X7100044F8C);
	op_hex		(x,	1);
	create_insn	(x=0X7100044F94);
	op_hex		(x,	1);
	create_insn	(0X7100044FA8);
	create_insn	(x=0X7100044FB8);
	op_hex		(x,	1);
	create_insn	(0X7100044FCC);
	create_insn	(x=0X7100044FDC);
	op_hex		(x,	1);
	create_insn	(0X7100044FF0);
	create_insn	(x=0X710004500C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045050);
	op_hex		(x,	1);
	create_insn	(x=0X7100045068);
	op_hex		(x,	1);
	create_insn	(x=0X710004507C);
	op_hex		(x,	1);
	create_insn	(0X7100045090);
	create_insn	(x=0X710004509C);
	op_hex		(x,	1);
	make_array	(0X71000450A4,	0XC);
	create_insn	(0X71000450B0);
	create_insn	(x=0X71000450B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000450B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000450BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000450C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000450C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000450CC);
	op_hex		(x,	1);
	create_insn	(x=0X71000450D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000450E8);
	op_hex		(x,	1);
	create_insn	(x=0X71000450F0);
	op_hex		(x,	1);
	create_insn	(x=0X710004513C);
	op_hex		(x,	1);
	create_insn	(x=0X710004514C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045168);
	op_hex		(x,	1);
	create_insn	(x=0X710004518C);
	op_hex		(x,	1);
	create_insn	(x=0X71000451C4);
	op_hex		(x,	1);
	create_insn	(x=0X71000451D8);
	op_hex		(x,	1);
	create_insn	(x=0X71000451F4);
	op_hex		(x,	1);
	create_insn	(0X7100045208);
	create_insn	(x=0X7100045224);
	op_hex		(x,	1);
	create_insn	(x=0X7100045228);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004522C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045230);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045238);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004523C);
	op_stkvar	(x,	1);
	create_insn	(0X7100045248);
	create_insn	(x=0X7100045260);
	op_hex		(x,	1);
	create_insn	(x=0X7100045264);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004526C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045274);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045278);
	op_stkvar	(x,	1);
	create_insn	(0X7100045284);
	create_insn	(x=0X71000452A4);
	op_hex		(x,	1);
	create_insn	(x=0X71000452CC);
	op_hex		(x,	1);
	create_insn	(x=0X71000452F4);
	op_hex		(x,	1);
	create_insn	(0X7100045320);
	create_insn	(x=0X7100045328);
	op_hex		(x,	1);
	create_insn	(x=0X710004534C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100045350);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100045354);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004535C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045360);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004536C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045380);
	op_hex		(x,	1);
	create_insn	(x=0X7100045390);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100045394);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004539C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000453A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000453A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000453B4);
	op_hex		(x,	1);
	create_insn	(x=0X71000453DC);
	op_hex		(x,	1);
	create_insn	(x=0X7100045400);
	op_hex		(x,	1);
	create_insn	(x=0X7100045410);
	op_hex		(x,	1);
	create_insn	(x=0X7100045414);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004541C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045424);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045428);
	op_stkvar	(x,	1);
	create_insn	(0X7100045434);
	create_insn	(x=0X7100045458);
	op_hex		(x,	1);
	create_insn	(x=0X7100045488);
	op_hex		(x,	1);
	create_insn	(x=0X71000454B0);
	op_hex		(x,	1);
	create_insn	(x=0X71000454F0);
	op_hex		(x,	1);
	create_insn	(x=0X7100045500);
	op_hex		(x,	1);
	create_insn	(0X7100045524);
	create_insn	(0X7100045530);
	create_insn	(x=0X710004554C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045550);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045554);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004555C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045560);
	op_stkvar	(x,	1);
	create_insn	(0X710004556C);
	create_insn	(x=0X710004557C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045580);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045584);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004558C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045590);
	op_stkvar	(x,	1);
	make_array	(0X710004559C,	0X4);
	create_insn	(0X71000455A0);
	create_insn	(x=0X71000455B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X71000455C8);
	create_insn	(0X71000455D0);
	create_insn	(x=0X71000455D8);
	op_hex		(x,	1);
	make_array	(0X71000455E4,	0XC);
	create_insn	(0X71000455F0);
	create_insn	(x=0X71000455F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000455F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000455FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045604);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004560C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045610);
	op_hex		(x,	1);
	create_insn	(x=0X7100045624);
	op_hex		(x,	1);
	create_insn	(x=0X7100045628);
	op_hex		(x,	1);
	create_insn	(x=0X7100045650);
	op_hex		(x,	1);
	create_insn	(x=0X7100045654);
	op_hex		(x,	1);
	create_insn	(x=0X710004565C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045660);
	op_hex		(x,	1);
	create_insn	(x=0X7100045664);
	op_hex		(x,	1);
	create_insn	(x=0X710004566C);
	op_hex		(x,	1);
	create_insn	(x=0X710004577C);
	op_hex		(x,	1);
	create_insn	(x=0X710004579C);
	op_hex		(x,	1);
	create_insn	(x=0X71000457A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000457A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000457A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000457AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000457B8);
	create_insn	(x=0X71000457C8);
	op_hex		(x,	1);
	create_insn	(x=0X71000457CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000457D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000457D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000457D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000457E4);
	op_hex		(x,	1);
	create_insn	(x=0X7100045800);
	op_hex		(x,	1);
	create_insn	(x=0X7100045804);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045808);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004580C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045810);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004581C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045830);
	op_hex		(x,	1);
	create_insn	(x=0X7100045834);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045838);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004583C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045840);
	op_stkvar	(x,	1);
	create_insn	(0X710004584C);
	create_insn	(x=0X710004585C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045860);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045864);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045868);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045874);
	op_hex		(x,	1);
	create_insn	(x=0X7100045888);
	op_hex		(x,	1);
	create_insn	(x=0X710004588C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045890);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045894);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045898);
	op_stkvar	(x,	1);
	create_insn	(0X71000458A4);
	create_insn	(x=0X71000458B8);
	op_hex		(x,	1);
	create_insn	(x=0X7100045904);
	op_hex		(x,	1);
	create_insn	(x=0X7100045970);
	op_hex		(x,	1);
	create_insn	(x=0X710004597C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045988);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004598C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045990);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045994);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000459A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000459A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000459A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000459AC);
	op_stkvar	(x,	1);
	create_insn	(0X71000459B8);
	create_insn	(x=0X71000459C8);
	op_hex		(x,	1);
	create_insn	(x=0X71000459F0);
	op_hex		(x,	1);
	create_insn	(x=0X7100045A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045A2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045A38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045A44);
	op_stkvar	(x,	1);
	create_insn	(0X7100045A50);
	create_insn	(x=0X7100045A54);
	op_hex		(x,	1);
	create_insn	(x=0X7100045A7C);
	op_hex		(x,	1);
	make_array	(0X7100045AA8,	0X8);
	create_insn	(x=0X7100045AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045AB4);
	op_stkvar	(x,	1);
	create_insn	(0X7100045AEC);
	create_insn	(x=0X7100045AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045B08);
	op_hex		(x,	1);
	make_array	(0X7100045B28,	0X8);
	create_insn	(0X7100045B30);
	create_insn	(x=0X7100045B4C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045B68);
	op_hex		(x,	1);
	create_insn	(x=0X7100045B70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045B7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100045B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100045B8C,	0X4);
	create_insn	(0X7100045B90);
	create_insn	(x=0X7100045B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045B9C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045BA4);
	op_stkvar	(x,	1);
	make_array	(0X7100045BAC,	0X4);
	create_insn	(x=0X7100045BB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045BB4);
	op_stkvar	(x,	1);
	create_insn	(0X7100045BD4);
	create_insn	(x=0X7100045BE8);
	op_hex		(x,	1);
	create_insn	(x=0X7100045BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045C10);
	op_hex		(x,	1);
	make_array	(0X7100045C34,	0XC);
	create_insn	(0X7100045C40);
	create_insn	(x=0X7100045C64);
	op_hex		(x,	1);
	create_insn	(x=0X7100045C74);
	op_hex		(x,	1);
	create_insn	(x=0X7100045C80);
	op_hex		(x,	1);
	create_insn	(x=0X7100045C8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045C90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045C98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100045C9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X7100045CA8,	0X8);
	create_insn	(0X7100045CB0);
	set_name	(0X7100045CB0,	"nullsub_10");
	make_array	(0X7100045CB4,	0XC);
	create_insn	(0X7100045CC0);
	make_array	(0X7100045CC4,	0XC);
	create_insn	(0X7100045CD0);
	set_name	(0X7100045CD0,	"nullsub_11");
	make_array	(0X7100045CD4,	0XC);
	create_insn	(0X7100045CE0);
	set_name	(0X7100045CE0,	"j_ThreadLocalRegion::GetErrnoValPtr");
	make_array	(0X7100045CE4,	0XC);
	create_insn	(x=0X7100045CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045CF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045D00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100045D04,	"unsigned int *",	0);
	create_insn	(x=0X7100045D0C);
	op_plain_offset	(x,	1,	0X71000FF1F8);
	op_plain_offset	(x,	129,	0X71000FF1F8);
	set_cmt	(0X7100045D24,	"unsigned int *",	0);
	create_insn	(x=0X7100045D2C);
	op_plain_offset	(x,	1,	0X71000FF1F8);
	op_plain_offset	(x,	129,	0X71000FF1F8);
	set_cmt	(0X7100045D3C,	"unsigned int *",	0);
	create_insn	(x=0X7100045D44);
	op_plain_offset	(x,	1,	0X71000FF1F8);
	op_plain_offset	(x,	129,	0X71000FF1F8);
	create_insn	(x=0X7100045D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045D54);
	op_stkvar	(x,	1);
	make_array	(0X7100045D5C,	0X4);
	create_insn	(x=0X7100045D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045D64);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045D70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100045D78);
	set_cmt	(0X7100045D7C,	"unsigned int *",	0);
	create_insn	(x=0X7100045D84);
	op_plain_offset	(x,	1,	0X71000FF1F8);
	op_plain_offset	(x,	129,	0X71000FF1F8);
	create_insn	(0X7100045D98);
	create_insn	(x=0X7100045DA4);
	op_plain_offset	(x,	1,	0X71000FF1F8);
	op_plain_offset	(x,	129,	0X71000FF1F8);
	set_cmt	(0X7100045DB0,	"unsigned int *",	0);
	create_insn	(x=0X7100045DB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100045DBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045DC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045DC4);
	op_stkvar	(x,	1);
	make_array	(0X7100045DCC,	0X4);
	create_insn	(0X7100045DD0);
	set_name	(0X7100045DD0,	"j_j__ZN2nn2os12SdkMutexType4LockEv");
	make_array	(0X7100045DD4,	0XC);
	create_insn	(0X7100045DE0);
	set_name	(0X7100045DE0,	"j_j__ZN2nn2os12SdkMutexType6UnlockEv_0");
	make_array	(0X7100045DE4,	0XC);
	create_insn	(0X7100045DF0);
	create_insn	(x=0X7100045DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E30);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E6C);
	op_hex		(x,	1);
	create_insn	(x=0X7100045E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045E7C);
	op_stkvar	(x,	1);
	create_insn	(0X7100045E94);
	create_insn	(0X7100045E9C);
	create_insn	(x=0X7100045EB0);
	op_hex		(x,	1);
	create_insn	(x=0X7100045EBC);
	op_hex		(x,	1);
	create_insn	(x=0X7100045ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045ED8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045EDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F30);
	op_hex		(x,	1);
	create_insn	(x=0X7100045F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F5C);
	op_stkvar	(x,	1);
	make_array	(0X7100045F68,	0X8);
	create_insn	(x=0X7100045F70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F74);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045FAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045FB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045FB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045FC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045FCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100045FD0);
	op_stkvar	(x,	1);
	create_insn	(0X7100045FD8);
	set_cmt	(0X7100045FE4,	"jumptable 0000007100046554 default case, case 5",	1);
	create_insn	(x=0X7100045FE4);
	op_hex		(x,	1);
	set_name	(0X7100045FE4,	"def_7100046554");
	create_insn	(0X7100046028);
	create_insn	(x=0X7100046054);
	op_hex		(x,	1);
	create_insn	(0X7100046080);
	create_insn	(x=0X71000460B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000460BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000460CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046158);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004615C);
	op_stkvar	(x,	1);
	create_insn	(0X7100046174);
	create_insn	(x=0X710004617C);
	op_stkvar	(x,	1);
	create_insn	(0X71000461B0);
	create_insn	(x=0X71000461BC);
	op_hex		(x,	1);
	create_insn	(x=0X7100046200);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004620C);
	op_stkvar	(x,	1);
	create_insn	(0X7100046234);
	create_insn	(0X7100046240);
	create_insn	(x=0X7100046250);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046258);
	op_hex		(x,	1);
	create_insn	(x=0X7100046264);
	op_stkvar	(x,	1);
	create_insn	(0X7100046270);
	create_insn	(x=0X7100046298);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000462BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000462CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000462E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000462EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000462F8);
	create_insn	(x=0X7100046304);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004630C);
	create_insn	(x=0X710004633C);
	op_hex		(x,	1);
	create_insn	(x=0X7100046360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046370);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046374);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046380);
	op_stkvar	(x,	1);
	create_insn	(0X71000463A8);
	create_insn	(0X71000463BC);
	create_insn	(x=0X7100046404);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046414);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046424);
	op_stkvar	(x,	1);
	create_insn	(0X710004642C);
	create_insn	(0X710004643C);
	create_insn	(x=0X7100046440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046444);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046454);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046460);
	op_hex		(x,	1);
	create_insn	(x=0X7100046464);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046468);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004646C);
	create_insn	(x=0X7100046470);
	op_hex		(x,	1);
	create_insn	(x=0X7100046478);
	op_hex		(x,	1);
	create_insn	(x=0X7100046484);
	op_hex		(x,	1);
	create_insn	(x=0X7100046488);
	op_stkvar	(x,	1);
	set_cmt	(0X7100046490,	"switch 56 cases",	0);
	create_insn	(x=0X71000464A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000464A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X71000464B0,	"switch jump",	0);
	set_cmt	(0X71000464B4,	"jumptable 00000071000464B0 cases 65,69-71,97,101-103",	1);
	create_insn	(0X71000464B4);
	create_insn	(x=0X71000464C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000464D8);
	op_stkvar	(x,	1);
	set_cmt	(0X71000464F4,	"jumptable 00000071000464B0 cases 100,105",	1);
	create_insn	(x=0X71000464F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046500);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046504);
	op_hex		(x,	1);
	create_insn	(x=0X7100046508);
	set_cmt	(0X7100046518,	"jumptable 00000071000464B0 case 109",	1);
	create_insn	(0X7100046518);
	set_cmt	(0X710004652C,	"jumptable 00000071000464B0 case 110",	1);
	create_insn	(0X710004652C);
	create_insn	(x=0X7100046530);
	op_hex		(x,	1);
	set_cmt	(0X7100046534,	"switch 8 cases",	0);
	create_insn	(x=0X710004653C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046540);
	op_hex		(x,	1);
	create_insn	(x=0X7100046544);
	create_insn	(x=0X7100046548);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100046554,	"switch jump",	0);
	set_cmt	(0X7100046558,	"jumptable 0000007100046554 cases 2,6,7",	1);
	create_insn	(x=0X7100046558);
	op_stkvar	(x,	1);
	set_cmt	(0X7100046570,	"jumptable 00000071000464B0 case 111",	1);
	create_insn	(x=0X7100046570);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046574);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004657C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000465A4);
	op_stkvar	(x,	1);
	set_cmt	(0X71000465C0,	"jumptable 00000071000464B0 case 115",	1);
	create_insn	(x=0X71000465C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000465C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000465E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000465FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046600);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004660C);
	set_cmt	(0X7100046614,	"jumptable 00000071000464B0 case 67",	1);
	create_insn	(x=0X7100046614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046618);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046620);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046624);
	op_stkvar	(x,	1);
	set_cmt	(0X710004662C,	"jumptable 00000071000464B0 case 83",	1);
	create_insn	(x=0X710004662C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004668C);
	op_stkvar	(x,	1);
	set_cmt	(0X710004669C,	"jumptable 00000071000464B0 case 99",	1);
	create_insn	(x=0X710004669C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000466A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000466A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000466AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000466B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000466B8);
	create_insn	(x=0X71000466BC);
	op_stkvar	(x,	1);
	set_cmt	(0X71000466C4,	"jumptable 00000071000464B0 case 112",	1);
	create_insn	(0X71000466C4);
	create_insn	(x=0X71000466D0);
	op_hex		(x,	1);
	set_cmt	(0X71000466D8,	"jumptable 00000071000464B0 cases 88,120",	1);
	create_insn	(x=0X71000466D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000466E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000466E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000466E8);
	op_hex		(x,	1);
	create_insn	(x=0X71000466EC);
	create_insn	(x=0X71000466F0);
	op_hex		(x,	1);
	create_insn	(x=0X7100046724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046730);
	set_cmt	(0X7100046738,	"jumptable 00000071000464B0 case 117",	1);
	create_insn	(x=0X7100046738);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004673C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046744);
	create_insn	(x=0X710004674C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046754);
	create_insn	(x=0X7100046768);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046774);
	create_insn	(x=0X7100046778);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046788);
	create_insn	(x=0X7100046790);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000467B4);
	op_hex		(x,	1);
	create_insn	(x=0X71000467C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000467D4);
	op_hex		(x,	1);
	create_insn	(x=0X71000467E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000467EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000467F8);
	op_stkvar	(x,	1);
	set_cmt	(0X7100046818,	"jumptable 00000071000464B0 default case, cases 66,68,72-82,84-87,89-96,98,104,106-108,113,114,116,118,119",	1);
	create_insn	(x=0X7100046818);
	op_stkvar	(x,	1);
	set_name	(0X7100046818,	"def_71000464B0");
	create_insn	(x=0X710004682C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046830);
	op_hex		(x,	1);
	create_insn	(x=0X7100046874);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004688C);
	op_stkvar	(x,	1);
	create_insn	(0X7100046894);
	create_insn	(x=0X71000468A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000468B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000468C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000468D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000468DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000468E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000468F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000468FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004691C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046934);
	op_stkvar	(x,	1);
	create_insn	(0X710004693C);
	create_insn	(x=0X7100046954);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046964);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004696C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004697C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046988);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000469A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000469B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000469BC);
	create_insn	(x=0X71000469D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000469E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000469EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000469FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046A68);
	op_stkvar	(x,	1);
	create_insn	(0X7100046A78);
	create_insn	(x=0X7100046A94);
	op_stkvar	(x,	1);
	create_insn	(0X7100046AA8);
	create_insn	(x=0X7100046AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046AFC);
	op_hex		(x,	1);
	create_insn	(0X7100046B0C);
	create_insn	(x=0X7100046B20);
	op_stkvar	(x,	1);
	create_insn	(0X7100046B34);
	create_insn	(x=0X7100046B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046B78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046BAC);
	op_stkvar	(x,	1);
	create_insn	(0X7100046BB4);
	create_insn	(x=0X7100046BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046BD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046BFC);
	op_stkvar	(x,	1);
	create_insn	(0X7100046C0C);
	set_cmt	(0X7100046C1C,	"jumptable 0000007100046554 case 0",	1);
	create_insn	(x=0X7100046C1C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100046C2C,	"jumptable 0000007100046554 case 1",	1);
	create_insn	(x=0X7100046C2C);
	op_stkvar	(x,	1);
	set_cmt	(0X7100046C40,	"jumptable 0000007100046554 case 3",	1);
	create_insn	(x=0X7100046C40);
	op_stkvar	(x,	1);
	set_cmt	(0X7100046C50,	"jumptable 0000007100046554 case 4",	1);
	create_insn	(x=0X7100046C50);
	op_stkvar	(x,	1);
	create_insn	(0X7100046C60);
	create_insn	(0X7100046C6C);
	create_insn	(x=0X7100046C70);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046C78);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046CB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046CC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046CE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046D10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046D40);
	op_stkvar	(x,	1);
	create_insn	(0X7100046D60);
	create_insn	(0X7100046D68);
	create_insn	(0X7100046D70);
	create_insn	(0X7100046D78);
	create_insn	(0X7100046D80);
	create_insn	(0X7100046D88);
	create_insn	(0X7100046D90);
	create_insn	(0X7100046D98);
	create_insn	(0X7100046DA0);
	create_insn	(0X7100046DAC);
	create_insn	(0X7100046DB4);
	create_insn	(0X7100046DDC);
	create_insn	(x=0X7100046DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046DFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100046E08);
	op_stkvar	(x,	1);
	set_cmt	(0X7100046E10,	"switch 18 cases",	0);
	create_insn	(0X7100046E10);
	create_insn	(x=0X7100046E20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100046E24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X7100046E30,	"switch jump",	0);
	set_cmt	(0X7100046E34,	"jumptable 0000007100046E30 cases 9,12-14,19-24",	1);
	create_insn	(0X7100046E34);
	create_insn	(0X7100046E60);
	set_cmt	(0X7100046E78,	"jumptable 0000007100046E30 case 10",	1);
	create_insn	(0X7100046E78);
	set_cmt	(0X7100046E9C,	"jumptable 0000007100046E30 case 11",	1);
	create_insn	(0X7100046E9C);
	set_cmt	(0X7100046EC0,	"jumptable 0000007100046E30 case 15",	1);
	create_insn	(0X7100046EC0);
	set_cmt	(0X7100046EE4,	"jumptable 0000007100046E30 case 16",	1);
	create_insn	(0X7100046EE4);
	set_cmt	(0X7100046F08,	"jumptable 0000007100046E30 case 17",	1);
	create_insn	(0X7100046F08);
	set_cmt	(0X7100046F2C,	"jumptable 0000007100046E30 case 18",	1);
	create_insn	(0X7100046F2C);
	set_cmt	(0X7100046F50,	"jumptable 0000007100046E30 case 25",	1);
	create_insn	(0X7100046F50);
	set_cmt	(0X7100046F74,	"jumptable 0000007100046E30 case 26",	1);
	create_insn	(0X7100046F74);
	create_insn	(0X7100046F98);
	create_insn	(0X7100046FB0);
	create_insn	(0X7100046FC8);
	create_insn	(0X7100046FE0);
	create_insn	(0X7100046FF8);
	create_insn	(0X7100047010);
	create_insn	(0X7100047028);
	create_insn	(0X7100047040);
	create_insn	(x=0X7100047048);
	op_hex		(x,	1);
	set_cmt	(0X710004705C,	"jumptable 0000007100046E30 default case",	1);
	set_name	(0X710004705C,	"def_7100046E30");
	create_insn	(0X7100047060);
	create_insn	(x=0X7100047064);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047068);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004706C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004707C);
	op_hex		(x,	1);
	create_insn	(x=0X7100047080);
	op_hex		(x,	1);
	create_insn	(x=0X7100047094);
	op_hex		(x,	1);
	create_insn	(x=0X71000470C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000470C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000470CC);
	op_stkvar	(x,	1);
	create_insn	(0X71000470D8);
	make_array	(0X7100047108,	0X8);
	create_insn	(x=0X7100047110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047114);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047118);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004711C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047120);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047124);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047148);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004714C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047158);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004715C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047168);
	create_insn	(x=0X710004716C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047170);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047174);
	op_hex		(x,	1);
	create_insn	(x=0X7100047178);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004717C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047180);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047190);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047194);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047198);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000471B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000471B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471C8);
	op_hex		(x,	1);
	create_insn	(x=0X71000471D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000471F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000471FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047208);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047210);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047218);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004721C);
	op_hex		(x,	1);
	create_insn	(x=0X7100047220);
	create_insn	(x=0X7100047230);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047244);
	op_hex		(x,	1);
	create_insn	(x=0X7100047250);
	op_hex		(x,	1);
	create_insn	(x=0X7100047268);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004726C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047274);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047280);
	create_insn	(x=0X7100047284);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047294);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047298);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004729C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000472A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000472A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000472A8);
	create_insn	(x=0X71000472AC);
	create_insn	(x=0X71000472B0);
	op_hex		(x,	1);
	create_insn	(x=0X71000472B8);
	create_insn	(x=0X71000472BC);
	create_insn	(x=0X71000472F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047314);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047340);
	op_hex		(x,	1);
	create_insn	(x=0X7100047344);
	op_hex		(x,	1);
	create_insn	(0X7100047354);
	create_insn	(x=0X7100047368);
	op_stkvar	(x,	1);
	create_insn	(0X710004737C);
	create_insn	(x=0X7100047390);
	op_hex		(x,	1);
	create_insn	(x=0X7100047394);
	op_hex		(x,	1);
	create_insn	(x=0X71000473B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000473D8);
	op_stkvar	(x,	1);
	create_insn	(0X71000473F0);
	create_insn	(x=0X7100047404);
	op_stkvar	(x,	1);
	create_insn	(0X7100047418);
	create_insn	(x=0X7100047420);
	op_hex		(x,	1);
	create_insn	(x=0X7100047438);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004743C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047448);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047450);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004745C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047468);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047474);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047480);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047488);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047490);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000474A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000474AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000474B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000474B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000474C0);
	op_stkvar	(x,	1);
	create_insn	(0X71000474E8);
	create_insn	(x=0X71000474F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047500);
	op_stkvar	(x,	1);
	create_insn	(0X710004756C);
	create_insn	(0X71000475B8);
	create_insn	(x=0X7100047614);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047654);
	op_hex		(x,	1);
	create_insn	(0X7100047668);
	create_insn	(0X710004769C);
	create_insn	(x=0X71000476A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000476D4);
	op_stkvar	(x,	1);
	create_insn	(0X7100047734);
	create_insn	(x=0X7100047740);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047744);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047750);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047754);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047760);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004776C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047784);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047788);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047794);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004779C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477DC);
	op_hex		(x,	1);
	create_insn	(x=0X71000477E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000477FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047800);
	op_hex		(x,	1);
	create_insn	(x=0X7100047804);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047808);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047810);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047818);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047820);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047824);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047828);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004782C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047834);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047840);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047848);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004784C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047858);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047894);
	op_hex		(x,	1);
	create_insn	(x=0X71000478A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000478B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000478CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000478DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000478E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000478E4);
	create_insn	(x=0X71000478F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000478FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047904);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047908);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004790C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047914);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047918);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004793C);
	op_hex		(x,	1);
	create_insn	(0X7100047944);
	create_insn	(x=0X7100047948);
	op_hex		(x,	1);
	create_insn	(x=0X710004794C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047950);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004795C);
	op_hex		(x,	1);
	create_insn	(x=0X7100047974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047990);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047998);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000479A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000479AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000479D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000479E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047A48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047AB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047B50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047B74);
	op_stkvar	(x,	1);
	create_insn	(0X7100047B8C);
	create_insn	(x=0X7100047BA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100047BB8);
	create_insn	(x=0X7100047BD4);
	op_stkvar	(x,	1);
	create_insn	(0X7100047BE8);
	create_insn	(x=0X7100047C04);
	op_stkvar	(x,	1);
	create_insn	(0X7100047C18);
	create_insn	(x=0X7100047C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047C48);
	op_hex		(x,	1);
	create_insn	(0X7100047C78);
	create_insn	(x=0X7100047CB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047CBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047CDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047CE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047CF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047CF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047D00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047D04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047D10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047D14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100047D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D40);
	op_hex		(x,	1);
	create_insn	(x=0X7100047D44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D4C);
	op_hex		(x,	1);
	create_insn	(x=0X7100047D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D94);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047D9C);
	op_stkvar	(x,	1);
	create_insn	(0X7100047DB0);
	create_insn	(x=0X7100047DE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047EC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047EC8);
	op_hex		(x,	1);
	create_insn	(0X7100047ED0);
	create_insn	(x=0X7100047ED8);
	op_hex		(x,	1);
	create_insn	(0X7100047EF8);
	create_insn	(x=0X7100047F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047F44);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047F48);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047F4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047F54);
	op_stkvar	(x,	1);
	create_insn	(0X7100047F5C);
	create_insn	(x=0X7100047F60);
	op_hex		(x,	1);
	create_insn	(x=0X7100047F74);
	op_hex		(x,	1);
	create_insn	(0X7100047F8C);
	create_insn	(x=0X7100047F98);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047FC4);
	op_hex		(x,	1);
	create_insn	(x=0X7100047FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100047FEC);
	op_hex		(x,	1);
	create_insn	(x=0X7100048024);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048028);
	op_stkvar	(x,	1);
	create_insn	(0X7100048040);
	create_insn	(0X7100048044);
	create_insn	(0X710004806C);
	create_insn	(x=0X7100048080);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000480B0);
	op_hex		(x,	1);
	create_insn	(x=0X71000480B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000480D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000480D8);
	op_hex		(x,	1);
	create_insn	(x=0X71000480F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000480F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048100);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004810C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048110);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048140);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004815C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048164);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048178);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048184);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048188);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000481B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000481D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000481DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048200);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048204);
	op_stkvar	(x,	1);
	create_insn	(0X710004820C);
	create_insn	(x=0X710004824C);
	op_hex		(x,	1);
	create_insn	(0X7100048278);
	create_insn	(0X7100048294);
	create_insn	(0X71000482A0);
	create_insn	(x=0X71000482A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000482C4);
	op_stkvar	(x,	1);
	create_insn	(0X71000482CC);
	create_insn	(x=0X71000482E4);
	op_stkvar	(x,	1);
	create_insn	(0X71000482FC);
	create_insn	(x=0X7100048314);
	op_stkvar	(x,	1);
	create_insn	(0X710004832C);
	create_insn	(x=0X7100048338);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048340);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048368);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004839C);
	op_hex		(x,	1);
	create_insn	(x=0X71000483B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000483B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000483C8);
	op_hex		(x,	1);
	create_insn	(x=0X71000483FC);
	op_stkvar	(x,	1);
	create_insn	(0X7100048424);
	create_insn	(x=0X7100048458);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048474);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004847C);
	create_insn	(x=0X7100048490);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000484C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000484F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000484F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048500);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048518);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048528);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100048530);
	create_insn	(x=0X710004853C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048540);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004855C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048584);
	op_hex		(x,	1);
	create_insn	(0X7100048594);
	create_insn	(x=0X71000485B8);
	op_stkvar	(x,	1);
	create_insn	(0X71000485DC);
	create_insn	(x=0X71000485F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000485FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004861C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048640);
	op_stkvar	(x,	1);
	create_insn	(0X7100048660);
	create_insn	(x=0X7100048674);
	op_stkvar	(x,	1);
	make_array	(0X710004868C,	0X4);
	create_insn	(x=0X7100048690);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048694);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048698);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004869C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000486A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000486A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000486C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000486D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000486D8);
	op_hex		(x,	1);
	create_insn	(x=0X71000486DC);
	create_insn	(x=0X71000486F0);
	op_hex		(x,	1);
	create_insn	(x=0X71000486F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000486FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048714);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048718);
	op_hex		(x,	1);
	create_insn	(x=0X7100048724);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048734);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004873C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004874C);
	op_stkvar	(x,	1);
	create_insn	(0X7100048758);
	create_insn	(x=0X710004875C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100048768);
	create_insn	(x=0X7100048774);
	op_hex		(x,	1);
	create_insn	(x=0X710004877C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100048780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100048784);
	create_insn	(x=0X7100048788);
	create_insn	(x=0X710004878C);
	op_hex		(x,	1);
	create_insn	(x=0X7100048790);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100048798);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000487A0);
	create_insn	(x=0X71000487CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000487F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004881C);
	op_hex		(x,	1);
	create_insn	(x=0X7100048820);
	op_hex		(x,	1);
	create_insn	(0X7100048830);
	create_insn	(x=0X7100048844);
	op_stkvar	(x,	1);
	create_insn	(0X7100048858);
	create_insn	(x=0X710004886C);
	op_hex		(x,	1);
	create_insn	(x=0X7100048870);
	op_hex		(x,	1);
	create_insn	(x=0X7100048890);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000488B4);
	op_stkvar	(x,	1);
	create_insn	(0X71000488CC);
	create_insn	(x=0X71000488E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000488F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100048904);
	create_insn	(x=0X710004890C);
	op_hex		(x,	1);
	create_insn	(x=0X7100048918);
	op_hex		(x,	1);
	create_insn	(x=0X7100048924);
	op_hex		(x,	1);
	create_insn	(x=0X7100048944);
	op_hex		(x,	1);
	create_insn	(x=0X7100048968);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048974);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048978);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004898C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004899C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000489CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000489E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000489F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048A74);
	op_stkvar	(x,	1);
	create_insn	(0X7100048AAC);
	create_insn	(x=0X7100048AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048B48);
	op_hex		(x,	1);
	create_insn	(0X7100048B5C);
	create_insn	(0X7100048B64);
	create_insn	(0X7100048BA4);
	create_insn	(x=0X7100048BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048BDC);
	op_stkvar	(x,	1);
	create_insn	(0X7100048C40);
	create_insn	(0X7100048C48);
	create_insn	(0X7100048C50);
	create_insn	(0X7100048C5C);
	create_insn	(x=0X7100048CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048D04);
	op_hex		(x,	1);
	create_insn	(x=0X7100048D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048D3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100048D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048D8C);
	op_hex		(x,	1);
	create_insn	(0X7100048D94);
	create_insn	(x=0X7100048D98);
	op_hex		(x,	1);
	create_insn	(x=0X7100048D9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048DB0);
	op_hex		(x,	1);
	create_insn	(x=0X7100048E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048E28);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048E58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048EBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048EE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048EF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048F40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100048FA4);
	op_stkvar	(x,	1);
	create_insn	(0X7100048FBC);
	create_insn	(x=0X7100048FD4);
	op_stkvar	(x,	1);
	create_insn	(0X7100048FE8);
	create_insn	(x=0X7100049004);
	op_stkvar	(x,	1);
	create_insn	(0X7100049018);
	create_insn	(x=0X7100049034);
	op_stkvar	(x,	1);
	create_insn	(0X7100049048);
	create_insn	(x=0X7100049064);
	op_stkvar	(x,	1);
	create_insn	(0X7100049078);
	create_insn	(x=0X7100049084);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049094);
	op_hex		(x,	1);
	create_insn	(0X71000490C4);
	create_insn	(x=0X710004910C);
	op_hex		(x,	1);
	create_insn	(x=0X7100049180);
	op_stkvar	(x,	1);
	create_insn	(0X7100049194);
	create_insn	(0X71000491C4);
	create_insn	(x=0X7100049264);
	op_hex		(x,	1);
	create_insn	(0X710004926C);
	create_insn	(x=0X7100049270);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049274);
	op_hex		(x,	1);
	create_insn	(x=0X7100049298);
	op_stkvar	(x,	1);
	create_insn	(0X71000492D8);
	create_insn	(x=0X71000492FC);
	op_hex		(x,	1);
	create_insn	(x=0X7100049304);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049320);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049330);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049354);
	op_hex		(x,	1);
	create_insn	(x=0X7100049360);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049370);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004937C);
	op_hex		(x,	1);
	create_insn	(0X71000493B8);
	create_insn	(0X71000493C0);
	create_insn	(0X71000493C4);
	create_insn	(x=0X71000493D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049410);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049418);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049424);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049440);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049448);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049450);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004945C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049460);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049490);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000494A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000494B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000494C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000494D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000494D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049504);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049518);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004951C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049524);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049528);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004954C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049554);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004958C);
	op_hex		(x,	1);
	create_insn	(0X71000495B8);
	create_insn	(0X71000495E0);
	create_insn	(0X71000495EC);
	create_insn	(x=0X71000495F0);
	op_stkvar	(x,	1);
	create_insn	(0X7100049614);
	create_insn	(x=0X7100049628);
	op_stkvar	(x,	1);
	create_insn	(0X710004963C);
	create_insn	(x=0X7100049654);
	op_stkvar	(x,	1);
	create_insn	(0X7100049668);
	create_insn	(x=0X7100049674);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004967C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004968C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004969C);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000496AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000496DC);
	op_hex		(x,	1);
	create_insn	(x=0X71000496F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000496F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049708);
	op_hex		(x,	1);
	create_insn	(x=0X7100049740);
	op_stkvar	(x,	1);
	create_insn	(0X7100049770);
	create_insn	(x=0X71000497A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000497BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000497C4);
	create_insn	(x=0X71000497D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049800);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049818);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049820);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049834);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049854);
	op_stkvar	(x,	1);
	create_insn	(0X7100049864);
	create_insn	(x=0X7100049878);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004988C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004989C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X71000498A4);
	create_insn	(x=0X71000498C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000498F4);
	op_hex		(x,	1);
	create_insn	(0X7100049904);
	create_insn	(0X710004994C);
	create_insn	(x=0X7100049964);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049984);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049990);
	op_stkvar	(x,	1);
	create_insn	(0X7100049998);
	create_insn	(x=0X71000499B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000499C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000499D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000499E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X71000499F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A04);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X7100049A64);
	op_stkvar	(x,	1);
	create_insn	(0X7100049A6C);
	create_insn	(x=0X7100049A84);
	op_stkvar	(x,	1);
	create_insn	(0X7100049A98);
	make_array	(0X7100049ABC,	0X4);
	create_insn	(x=0X7100049AC0);
	op_stkvar	(x,	1);
	set_cmt	(0X7100049AD0,	"unsigned int *",	0);
	create_insn	(x=0X7100049ADC);
	op_stkvar	(x,	1);
	create_insn	(0X7100049AE4);
	create_insn	(x=0X7100049AE8);
	op_stkvar	(x,	1);
	create_insn	(0X7100049AF0);
	create_insn	(0X7100049B04);
	make_array	(0X7100049B08,	0X8);
	create_insn	(0X7100049B10);
	create_insn	(x=0X7100049B18);
	op_hex		(x,	1);
	create_insn	(x=0X7100049B2C);
	op_hex		(x,	1);
	create_insn	(0X7100049B44);
	create_insn	(x=0X7100049B4C);
	op_hex		(x,	1);
	create_insn	(x=0X7100049B70);
	op_hex		(x,	1);
	create_insn	(x=0X7100049B94);
	op_hex		(x,	1);
	create_insn	(x=0X7100049BB8);
	op_hex		(x,	1);
	create_insn	(x=0X7100049BDC);
	op_hex		(x,	1);
	create_insn	(x=0X7100049C00);
	op_hex		(x,	1);
	create_insn	(x=0X7100049C24);
	op_hex		(x,	1);
	create_insn	(0X7100049C50);
	create_insn	(x=0X7100049C68);
	op_hex		(x,	1);
	create_insn	(x=0X7100049C7C);
	op_hex		(x,	1);
	create_insn	(x=0X7100049CA0);
	op_hex		(x,	1);
	create_insn	(0X7100049CE0);
	set_name	(0X7100049CE0,	"memcpy");
	create_insn	(x=0X7100049CE4);
	op_hex		(x,	1);
	create_insn	(x=0X7100049D1C);
	op_hex		(x,	1);
	create_insn	(x=0X7100049D2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X7100049D30);
	op_hex		(x,	1);
	create_insn	(x=0X7100049D34);
	create_insn	(x=0X7100049D38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X7100049D48);
	create_insn	(0X7100049D78);
	create_insn	(0X7100049D90);
	create_insn	(0X7100049DF0);
	create_insn	(x=0X7100049DF4);
	op_hex		(x,	1);
	create_insn	(x=0X7100049E30);
	op_hex		(x,	1);
	create_insn	(0X7100049E3C);
	create_insn	(0X7100049E60);
	create_insn	(x=0X7100049E74);
	op_hex		(x,	1);
	create_insn	(0X7100049E8C);
	create_insn	(0X7100049E98);
	create_insn	(0X7100049F08);
	create_insn	(0X7100049F64);
	make_array	(0X7100049FC4,	0XC);
	create_insn	(0X7100049FD0);
	set_name	(0X7100049FD0,	"memmove");
	create_insn	(x=0X710004A000);
	op_hex		(x,	1);
	create_insn	(x=0X710004A00C);
	op_hex		(x,	1);
	set_cmt	(0X710004A030,	"size",	0);
	set_cmt	(0X710004A040,	"src",	0);
	create_insn	(0X710004A048);
	create_insn	(0X710004A04C);
	create_insn	(x=0X710004A054);
	op_hex		(x,	1);
	create_insn	(x=0X710004A08C);
	op_hex		(x,	1);
	create_insn	(0X710004A0E4);
	create_insn	(0X710004A0EC);
	create_insn	(x=0X710004A0F0);
	op_hex		(x,	1);
	make_array	(0X710004A144,	0XC);
	create_insn	(0X710004A150);
	set_name	(0X710004A150,	"memset");
	create_insn	(x=0X710004A194);
	op_hex		(x,	1);
	create_insn	(x=0X710004A19C);
	op_hex		(x,	1);
	create_insn	(x=0X710004A1AC);
	op_hex		(x,	1);
	create_insn	(x=0X710004A1D4);
	op_hex		(x,	1);
	create_insn	(x=0X710004A1DC);
	op_hex		(x,	1);
	create_insn	(0X710004A220);
	make_array	(0X710004A234,	0XC);
	create_insn	(x=0X710004A240);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A244);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A258);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004A260);
	create_insn	(x=0X710004A264);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A270);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004A278);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A280);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A29C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004A2A8);
	op_stkvar	(x,	1);
	create_insn	(0X710004A2B0);
	create_dword	(0X710004A2CC);
	create_insn	(0X710004A2D0);
	create_insn	(x=0X710004A2D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A2E4);
	op_stkvar	(x,	1);
	make_array	(0X710004A2EC,	0X4);
	create_insn	(x=0X710004A2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A310);
	op_stkvar	(x,	1);
	create_insn	(0X710004A318);
	create_insn	(x=0X710004A320);
	op_stkvar	(x,	1);
	create_insn	(0X710004A328);
	create_insn	(x=0X710004A334);
	op_hex		(x,	1);
	create_insn	(x=0X710004A350);
	op_stkvar	(x,	1);
	create_insn	(0X710004A358);
	create_insn	(x=0X710004A364);
	op_hex		(x,	1);
	create_insn	(x=0X710004A384);
	op_hex		(x,	1);
	create_insn	(x=0X710004A3B4);
	op_stkvar	(x,	1);
	create_insn	(0X710004A3BC);
	create_insn	(x=0X710004A3C0);
	op_hex		(x,	1);
	set_cmt	(0X710004A3E4,	"a1",	0);
	create_insn	(x=0X710004A3E8);
	op_stkvar	(x,	1);
	create_insn	(0X710004A3F0);
	create_insn	(x=0X710004A404);
	op_stkvar	(x,	1);
	make_array	(0X710004A40C,	0X4);
	create_insn	(x=0X710004A410);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A414);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A418);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A454);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A458);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A45C);
	op_stkvar	(x,	1);
	create_insn	(0X710004A464);
	create_insn	(x=0X710004A474);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A478);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A47C);
	op_stkvar	(x,	1);
	set_cmt	(0X710004A484,	"dst",	0);
	create_insn	(0X710004A484);
	create_insn	(0X710004A4EC);
	set_cmt	(0X710004A4F0,	"src",	0);
	set_cmt	(0X710004A4F4,	"size",	0);
	create_insn	(x=0X710004A50C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A510);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A514);
	op_stkvar	(x,	1);
	make_array	(0X710004A51C,	0X4);
	create_insn	(0X710004A520);
	create_insn	(x=0X710004A554);
	op_hex		(x,	1);
	make_array	(0X710004A568,	0X8);
	create_insn	(0X710004A570);
	create_insn	(x=0X710004A574);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A578);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A5A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A5AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A5B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A5B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A5CC);
	op_stkvar	(x,	1);
	make_array	(0X710004A5D8,	0X8);
	create_insn	(0X710004A5E0);
	create_insn	(x=0X710004A5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A5E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A608);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A60C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A610);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A618);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004A61C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A620);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A624);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A628);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A62C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A634);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A638);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A63C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A644);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A648);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A64C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A650);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A654);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A658);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A660);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A67C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A680);
	op_stkvar	(x,	1);
	create_insn	(0X710004A68C);
	create_insn	(x=0X710004A698);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A6A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A6AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A6B8);
	op_stkvar	(x,	1);
	make_array	(0X710004A6C4,	0XC);
	create_insn	(x=0X710004A6D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A6D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A6DC);
	op_stkvar	(x,	1);
	set_cmt	(0X710004A710,	"dst",	0);
	set_cmt	(0X710004A714,	"src",	0);
	set_cmt	(0X710004A718,	"size",	0);
	set_cmt	(0X710004A734,	"dst",	0);
	set_cmt	(0X710004A740,	"src",	0);
	set_cmt	(0X710004A744,	"size",	0);
	create_insn	(x=0X710004A768);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A76C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A778);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A77C);
	op_stkvar	(x,	1);
	make_array	(0X710004A784,	0XC);
	create_insn	(x=0X710004A790);
	op_stkvar	(x,	1);
	set_name	(0X710004A790,	"strcpy");
	create_insn	(x=0X710004A794);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A7A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004A7AC);
	op_stkvar	(x,	1);
	make_array	(0X710004A7B4,	0XC);
	create_insn	(0X710004A7C0);
	create_insn	(x=0X710004A7C4);
	op_hex		(x,	1);
	create_insn	(x=0X710004A7DC);
	op_hex		(x,	1);
	create_insn	(x=0X710004A7F8);
	op_hex		(x,	1);
	create_insn	(x=0X710004A814);
	op_hex		(x,	1);
	create_insn	(x=0X710004A830);
	op_hex		(x,	1);
	create_insn	(x=0X710004A84C);
	op_hex		(x,	1);
	create_insn	(x=0X710004A868);
	op_hex		(x,	1);
	create_insn	(x=0X710004A884);
	op_hex		(x,	1);
	create_insn	(x=0X710004A8A0);
	op_hex		(x,	1);
	create_insn	(0X710004A8C0);
	create_insn	(x=0X710004A8DC);
	op_hex		(x,	1);
	create_insn	(x=0X710004A8F8);
	op_hex		(x,	1);
	create_insn	(x=0X710004A900);
	op_hex		(x,	1);
	create_insn	(0X710004A928);
	make_array	(0X710004A92C,	0X4);
	create_insn	(x=0X710004A930);
	op_hex		(x,	1);
	set_name	(0X710004A930,	"strlen");
	create_insn	(x=0X710004A954);
	op_hex		(x,	1);
	create_insn	(x=0X710004A968);
	op_hex		(x,	1);
	create_insn	(x=0X710004A97C);
	op_hex		(x,	1);
	create_insn	(x=0X710004A990);
	op_hex		(x,	1);
	create_insn	(x=0X710004A9A4);
	op_hex		(x,	1);
	create_insn	(x=0X710004A9B8);
	op_hex		(x,	1);
	create_insn	(x=0X710004A9CC);
	op_hex		(x,	1);
	create_insn	(x=0X710004A9FC);
	op_hex		(x,	1);
	create_insn	(x=0X710004AA20);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AA24);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AA50);
	op_stkvar	(x,	1);
	make_array	(0X710004AA58,	0X8);
	create_insn	(0X710004AA60);
	create_insn	(x=0X710004AA64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AA68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AA6C);
	op_hex		(x,	1);
	create_insn	(0X710004AA98);
	create_insn	(0X710004AAAC);
	make_array	(0X710004AAB8,	0X8);
	create_insn	(x=0X710004AAC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AAC4);
	op_stkvar	(x,	1);
	make_array	(0X710004AAD4,	0XC);
	create_insn	(x=0X710004AAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AAE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AB2C);
	op_hex		(x,	1);
	create_insn	(x=0X710004AB34);
	op_hex		(x,	1);
	create_insn	(0X710004AB40);
	create_insn	(x=0X710004AB48);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AB4C);
	op_stkvar	(x,	1);
	make_array	(0X710004AB54,	0XC);
	create_insn	(0X710004AB60);
	create_insn	(x=0X710004AB64);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AB68);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AB70);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AB78);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AB90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004AB94);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AB98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004ABA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004ABA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004ABAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004ABC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004ABCC);
	op_stkvar	(x,	1);
	create_insn	(0X710004ABD8);
	create_insn	(x=0X710004ABDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004ABE0);
	op_hex		(x,	1);
	create_insn	(x=0X710004ABE8);
	op_hex		(x,	1);
	create_insn	(x=0X710004ABFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AC00);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AC04);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AC08);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AC14);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AC1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AC20);
	op_stkvar	(x,	1);
	make_array	(0X710004AC2C,	0X14);
	create_insn	(0X710004AC40);
	create_insn	(x=0X710004AC48);
	op_hex		(x,	1);
	create_insn	(0X710004AC6C);
	create_insn	(0X710004AC74);
	create_insn	(x=0X710004AC80);
	op_hex		(x,	1);
	create_insn	(0X710004ACA8);
	create_insn	(0X710004ACF0);
	create_insn	(x=0X710004AD0C);
	op_hex		(x,	1);
	create_insn	(x=0X710004AD18);
	op_hex		(x,	1);
	create_insn	(0X710004AD24);
	make_array	(0X710004AD2C,	0X14);
	create_insn	(0X710004AD40);
	set_name	(0X710004AD40,	"strcmp");
	create_insn	(x=0X710004AD44);
	op_hex		(x,	1);
	create_insn	(0X710004AD84);
	create_insn	(x=0X710004AD98);
	op_hex		(x,	1);
	create_insn	(x=0X710004ADD4);
	op_hex		(x,	1);
	create_insn	(0X710004ADEC);
	create_insn	(x=0X710004ADF4);
	op_hex		(x,	1);
	create_insn	(x=0X710004ADFC);
	op_hex		(x,	1);
	make_array	(0X710004AE0C,	0X4);
	create_insn	(0X710004AE10);
	set_name	(0X710004AE10,	"j__ZN2nn2os12SdkMutexType4LockEv");
	make_array	(0X710004AE14,	0XC);
	create_insn	(0X710004AE20);
	set_name	(0X710004AE20,	"j__ZN2nn2os12SdkMutexType6UnlockEv_0");
	make_array	(0X710004AE24,	0XC);
	create_insn	(0X710004AE30);
	set_name	(0X710004AE30,	"j__ZN2nn2os12SdkMutexType6UnlockEv");
	make_array	(0X710004AE34,	0XC);
	create_insn	(0X710004AE40);
	make_array	(0X710004AE44,	0XC);
	create_insn	(x=0X710004AE50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004AE58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004AE60);
	op_stkvar	(x,	1);
	create_insn	(x=0X710004AE70);
	op_stkvar	(x,	1);
	make_array	(0X710004AE78,	0X8);
	create_insn	(0X710004AE80);
	set_name	(0X710004AE80,	"nullsub_9");
	make_array	(0X710004AE84,	0XC);
	create_insn	(0X710004AE90);
	set_name	(0X710004AE90,	"nn::svc::ThreadLocalRegion::GetLocalePtr");
	make_array	(0X710004AE9C,	0X4);
	create_insn	(0X710004AEA0);
	set_name	(0X710004AEA0,	"nn::svc::ThreadLocalRegion::GetErrnoValPtr");
	create_dword	(0X710004AEAC);
	create_insn	(0X710004AEB0);
	create_insn	(x=0X710004AEB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004AEB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004AEBC);
	create_insn	(0X710004AEC4);
	create_insn	(x=0X710004AED0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X710004AED0,	"nnosGetDefaultUserExceptionStackForApplication");
	create_insn	(x=0X710004AED4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X710004AED8);
	create_qword	(0X710004AEE0);
	make_array	(0X710004AEE0,	0X24);
	create_strlit	(0X7100056F40,	0X8);
	set_name	(0X7100056F40,	"aNetwork");
	create_strlit	(0X7100056F48,	0X8);
	set_name	(0X7100056F48,	"aAccount");
	create_strlit	(0X7100056F50,	0XF);
	set_name	(0X7100056F50,	"aAppRightsSec");
	create_strlit	(0X7100056F5F,	0X14);
	set_name	(0X7100056F5F,	"aAppRightsIdTyp");
	create_strlit	(0X7100056F73,	0X16);
	set_name	(0X7100056F73,	"aControllerNumb");
	create_strlit	(0X7100056F89,	0XA);
	set_name	(0X7100056F89,	"aWideArea");
	create_strlit	(0X7100056F93,	0X9);
	set_name	(0X7100056F93,	"aDDD");
	create_strlit	(0X7100056F9C,	0XB);
	set_name	(0X7100056F9C,	"aFullAwake");
	create_strlit	(0X7100056FA7,	0X45);
	set_name	(0X7100056FA7,	"a02x02x02x02x02");
	create_strlit	(0X7100056FEC,	0XC);
	set_name	(0X7100056FEC,	"aNetworkSec");
	create_strlit	(0X7100056FF8,	0X1A);
	set_name	(0X7100056FF8,	"aDeviceOperatio_0");
	create_strlit	(0X7100057012,	0X13);
	set_name	(0X7100057012,	"aFgAppletIdValu");
	create_strlit	(0X7100057025,	0XF);
	set_name	(0X7100057025,	"aShutdownReady");
	create_strlit	(0X7100057034,	0X3);
	set_name	(0X7100057034,	"aId");
	create_strlit	(0X7100057037,	0X2);
	set_name	(0X7100057037,	"a0");
	create_strlit	(0X7100057039,	0X16);
	set_name	(0X7100057039,	"aD0x00000000000");
	create_strlit	(0X710005704F,	0X7);
	set_name	(0X710005704F,	"aNull");
	create_strlit	(0X7100057056,	0X8);
	set_name	(0X7100057056,	"aOffline");
	create_strlit	(0X710005705E,	0XF);
	set_name	(0X710005705E,	"aControllerSec");
	create_strlit	(0X710005706D,	0XB);
	set_name	(0X710005706D,	"aStableSec");
	create_strlit	(0X7100057078,	0X10);
	set_name	(0X7100057078,	"aControllerRail");
	create_strlit	(0X7100057088,	0X8);
	set_name	(0X7100057088,	"aUnknown");
	create_strlit	(0X7100057090,	0X12);
	set_name	(0X7100057090,	"aNnTimeIpcserve");
	create_strlit	(0X71000570A2,	0X25);
	set_name	(0X71000570A2,	"aZn2nn2ro6detai_0");
	create_strlit	(0X71000570C7,	0X18);
	set_name	(0X71000570C7,	"aNnSrepoWatchdo");
	create_strlit	(0X71000570DF,	0X36);
	set_name	(0X71000570DF,	"aZn2nn2ro6detai_2");
	create_strlit	(0X7100057115,	0X11);
	set_name	(0X7100057115,	"aControllerTota");
	create_strlit	(0X7100057126,	0X2);
	set_name	(0X7100057126,	"a1");
	create_strlit	(0X7100057128,	0X6);
	set_name	(0X7100057128,	"aE");
	create_strlit	(0X710005712E,	0X12);
	set_name	(0X710005712E,	"aUserStateChang");
	create_strlit	(0X7100057140,	0X5);
	set_name	(0X7100057140,	"aOpen");
	create_strlit	(0X7100057145,	0X14);
	set_name	(0X7100057145,	"aNnInsEventhand");
	create_strlit	(0X7100057159,	0X22);
	set_name	(0X7100057159,	"aZn2nn2ro6detai_1");
	create_strlit	(0X710005717B,	0X3);
	create_strlit	(0X710005717E,	0X18);
	set_name	(0X710005717E,	"aRCopyIsNotSupp");
	create_strlit	(0X7100057196,	0XF);
	set_name	(0X7100057196,	"aAudioInEvent");
	create_strlit	(0X71000571A5,	0X8);
	set_name	(0X71000571A5,	"aBootId");
	create_strlit	(0X71000571AD,	0XE);
	set_name	(0X71000571AD,	"aAudioInName");
	create_strlit	(0X71000571BB,	0X12);
	set_name	(0X71000571BB,	"aNnHshlIpcserve");
	create_strlit	(0X71000571CD,	0X4);
	set_name	(0X71000571CD,	"aNan_0");
	create_strlit	(0X71000571D1,	0XB);
	set_name	(0X71000571D1,	"aLocalArea");
	create_strlit	(0X71000571DC,	0XA);
	set_name	(0X71000571DC,	"aGameCard");
	create_strlit	(0X71000571E6,	0XA);
	set_name	(0X71000571E6,	"aPromotion");
	create_strlit	(0X71000571F1,	0X4);
	set_name	(0X71000571F1,	"aInf_0");
	create_strlit	(0X71000571F5,	0X9);
	set_name	(0X71000571F5,	"aLaunched");
	create_strlit	(0X71000571FE,	0X5);
	set_name	(0X71000571FE,	"aData");
	create_strlit	(0X7100057203,	0XB);
	set_name	(0X7100057203,	"aController");
	create_strlit	(0X710005720E,	0X1F);
	set_name	(0X710005720E,	"aNetworkTypeFro");
	create_strlit	(0X710005722D,	0X4);
	set_name	(0X710005722D,	"aOff");
	create_strlit	(0X7100057231,	0X10);
	set_name	(0X7100057231,	"aM320M1110");
	create_strlit	(0X7100057241,	0X11);
	set_name	(0X7100057241,	"aNotificationSe");
	create_strlit	(0X7100057252,	0XA);
	set_name	(0X7100057252,	"aPowerSec");
	create_strlit	(0X710005725C,	0XD);
	set_name	(0X710005725C,	"aTriggerNext");
	create_strlit	(0X7100057269,	0XD);
	set_name	(0X7100057269,	"aNetworkType");
	create_strlit	(0X7100057276,	0X19);
	set_name	(0X7100057276,	"aNetworkFromApp");
	create_strlit	(0X710005728F,	0X23);
	set_name	(0X710005728F,	"aRomoduleReloca_0");
	create_strlit	(0X71000572B2,	0X8);
	set_name	(0X71000572B2,	"aStopped");
	create_strlit	(0X71000572BA,	0X9);
	set_name	(0X71000572BA,	"aHandheld");
	create_strlit	(0X71000572C3,	0X11);
	set_name	(0X71000572C3,	"aNnInsIpcserver");
	create_strlit	(0X71000572D4,	0X1C);
	set_name	(0X71000572D4,	"aRtldUnresolved");
	create_strlit	(0X71000572F0,	0XB);
	set_name	(0X71000572F0,	"aMainthread");
	create_strlit	(0X71000572FB,	0X12);
	set_name	(0X71000572FB,	"aFgAppletIdType");
	create_strlit	(0X710005730D,	0X13);
	set_name	(0X710005730D,	"aHashedtracecon");
	create_strlit	(0X7100057320,	0XA);
	set_name	(0X7100057320,	"aThread0x");
	create_strlit	(0X710005732A,	0X7);
	set_name	(0X710005732A,	"aSeqNo");
	create_strlit	(0X7100057331,	0X11);
	set_name	(0X7100057331,	"aNnPscIpcserver");
	create_strlit	(0X7100057342,	0X6);
	set_name	(0X7100057342,	"aPower");
	create_strlit	(0X7100057348,	0XD);
	set_name	(0X7100057348,	"aTriggerType");
	create_strlit	(0X7100057355,	0X5);
	set_name	(0X7100057355,	"aNone");
	create_strlit	(0X710005735A,	0X14);
	set_name	(0X710005735A,	"aAppRightsIdVal");
	create_strlit	(0X710005736E,	0XD);
	set_name	(0X710005736E,	"a0x016llxS");
	create_strlit	(0X710005737B,	0XB);
	set_name	(0X710005737B,	"aAppRights");
	create_strlit	(0X7100057386,	0X2E);
	set_name	(0X7100057386,	"aMArchdataDefau");
	create_strlit	(0X71000573B4,	0X13);
	set_name	(0X71000573B4,	"aNnSrepoIpcserv");
	create_strlit	(0X71000573C7,	0X9);
	set_name	(0X71000573C7,	"aPresence");
	create_strlit	(0X71000573D0,	0X22);
	set_name	(0X71000573D0,	"aControllerTota_0");
	create_strlit	(0X71000573F2,	0XB);
	set_name	(0X71000573F2,	"aLinkageId");
	create_strlit	(0X71000573FD,	0XA);
	set_name	(0X71000573FD,	"aTemporary");
	create_strlit	(0X7100057407,	0X8);
	set_name	(0X7100057407,	"aConsole");
	create_strlit	(0X710005740F,	0X7);
	set_name	(0X710005740F,	"aUptime");
	create_strlit	(0X7100057416,	0XA);
	set_name	(0X7100057416,	"aFgApplet");
	create_strlit	(0X7100057420,	0XD);
	set_name	(0X7100057420,	"aD0x016llx");
	create_strlit	(0X710005742D,	0XE);
	set_name	(0X710005742D,	"aFgAppletSec");
	create_strlit	(0X710005743B,	0X14);
	set_name	(0X710005743B,	"aSystemStateCha");
	create_strlit	(0X710005744F,	0X13);
	set_name	(0X710005744F,	"aNeighborDetect");
	create_strlit	(0X7100057462,	0X10);
	set_name	(0X7100057462,	"aAppletIdValue");
	create_strlit	(0X7100057472,	0X15);
	set_name	(0X7100057472,	"aExceededmillis");
	create_strlit	(0X7100057487,	0X38);
	set_name	(0X7100057487,	"aZn2nn2ro6detai_3");
	create_strlit	(0X71000574BF,	0X18);
	set_name	(0X71000574BF,	"aDeviceLinkedPe");
	create_strlit	(0X71000574D7,	0XD);
	set_name	(0X71000574D7,	"aAppletEvent");
	create_strlit	(0X71000574E4,	0X8);
	set_name	(0X71000574E4,	"aInitial");
	create_strlit	(0X71000574EC,	0X14);
	set_name	(0X71000574EC,	"aFgAppletIdValu_0");
	create_strlit	(0X7100057500,	0X6);
	set_name	(0X7100057500,	"aState");
	create_strlit	(0X7100057506,	0X19);
	set_name	(0X7100057506,	"aWatchdogMissed");
	create_strlit	(0X710005751F,	0X12);
	set_name	(0X710005751F,	"aNnPscMainthrea");
	create_strlit	(0X7100057531,	0X20);
	set_name	(0X7100057531,	"aRomoduleReloca");
	create_strlit	(0X7100057551,	0X8);
	set_name	(0X7100057551,	"aStarted");
	create_strlit	(0X7100057559,	0X23);
	set_name	(0X7100057559,	"aRomoduleFixrel");
	create_strlit	(0X710005757C,	0X23);
	set_name	(0X710005757C,	"aZn2nn2ro6detai");
	create_strlit	(0X710005759F,	0X24);
	set_name	(0X710005759F,	"aRoWarningUnres");
	create_strlit	(0X71000575C3,	0X9);
	set_name	(0X71000575C3,	"aOvlnRcv");
	create_strlit	(0X71000575CC,	0X16);
	set_name	(0X71000575CC,	"aDeviceOperatio");
	create_strlit	(0X71000575E2,	0X8);
	set_name	(0X71000575E2,	"aVersion");
	create_strlit	(0X71000575EA,	0XC);
	set_name	(0X71000575EA,	"aUpTimeSec");
	create_strlit	(0X71000575F6,	0XC);
	set_name	(0X71000575F6,	"aAudioInId");
	create_strlit	(0X7100057602,	0X12);
	set_name	(0X7100057602,	"aWatchdogTimedo");
	create_strlit	(0X7100057614,	0X9);
	set_name	(0X7100057614,	"aOvlnSnd");
	create_strlit	(0X710005761D,	0XC);
	set_name	(0X710005761D,	"aAccountSec");
	create_strlit	(0X7100057629,	0X10);
	set_name	(0X7100057629,	"aTriggerCurrent");
	create_strlit	(0X7100057639,	0XD);
	set_name	(0X7100057639,	"aLocalDirect");
	create_strlit	(0X7100057646,	0X6);
	set_name	(0X7100057646,	"aClose");
	create_strlit	(0X710005764C,	0X6);
	set_name	(0X710005764C,	"aSleep");
	create_strlit	(0X7100057652,	0X13);
	set_name	(0X7100057652,	"aDetectionSpanS");
	create_strlit	(0X7100057665,	0XD);
	set_name	(0X7100057665,	"aNotification");
	create_strlit	(0X7100057672,	0X18);
	set_name	(0X7100057672,	"aSystemStateCha_0");
	create_strlit	(0X710005768A,	0X7);
	set_name	(0X710005768A,	"aOnline");
	create_strlit	(0X7100057691,	0XA);
	set_name	(0X7100057691,	"a0x0x");
	create_strlit	(0X710005769B,	0X13);
	set_name	(0X710005769B,	"a0x0x0x0x0x0x");
	create_strlit	(0X71000576AE,	0X7);
	set_name	(0X71000576AE,	"aExited");
	create_strlit	(0X71000576B5,	0XD);
	set_name	(0X71000576B5,	"aPresenceSec");
	create_strlit	(0X71000576C2,	0X3);
	set_name	(0X71000576C2,	"aOn");
	create_strlit	(0X71000576C5,	0XF);
	set_name	(0X71000576C5,	"aAppletIdType");
	create_strlit	(0X71000576D4,	0X13);
	set_name	(0X71000576D4,	"aStateChangeCou");
	create_strlit	(0X71000576E7,	0X2);
	create_strlit	(0X71000576E9,	0X24);
	set_name	(0X71000576E9,	"aRomoduleBindju");
	create_strlit	(0X710005770D,	0X4);
	set_name	(0X710005770D,	"aNan");
	create_strlit	(0X7100057711,	0X11);
	set_name	(0X7100057711,	"aNnPscPmcontrol");
	create_strlit	(0X7100057722,	0X6);
	set_name	(0X7100057722,	"aSD");
	create_strlit	(0X7100057728,	0X4);
	set_name	(0X7100057728,	"aInf");
	create_strlit	(0X710005772C,	0X29);
	set_name	(0X710005772C,	"aNnOvlnNotifica");
	create_strlit	(0X7100057755,	0XE);
	set_name	(0X7100057755,	"aAccountCount");
	create_strlit	(0X7100057763,	0X10);
	set_name	(0X7100057763,	"aAppRightsType");
	create_strlit	(0X7100057773,	0X3);
	set_name	(0X7100057773,	"aD");
	create_strlit	(0X7100057776,	0XC);
	set_name	(0X7100057776,	"aOnlinePlay");
	create_strlit	(0X7100057782,	0XB);
	set_name	(0X7100057782,	"aEventType");
	set_cmt	(0X710005778D,	"jump table for switch statement",	0);
	create_byte	(0X710005778D);
	set_name	(0X710005778D,	"jpt_7100001194");
	create_byte	(0X710005778E);
	create_byte	(0X710005778F);
	create_byte	(0X7100057790);
	create_byte	(0X7100057791);
	create_byte	(0X7100057792);
	create_byte	(0X7100057793);
	create_byte	(0X7100057794);
	create_byte	(0X7100057795);
	create_byte	(0X7100057796);
	create_byte	(0X7100057797);
	create_byte	(0X7100057798);
	create_byte	(0X7100057799);
	create_byte	(0X710005779A);
	create_byte	(0X710005779B);
	create_byte	(0X710005779C);
	create_byte	(0X710005779D);
	create_byte	(0X710005779E);
	create_byte	(0X710005779F);
	create_byte	(0X71000577A0);
	create_byte	(0X71000577A1);
	create_byte	(0X71000577A2);
	create_byte	(0X71000577A3);
	create_byte	(0X71000577A4);
	set_cmt	(0X71000577A5,	"type descriptor name",	1);
	create_strlit	(0X71000577A5,	0X31);
	set_name	(0X71000577A5,	"_ZTSN2nn2os6detail31MultiWaitHolderOfUserWaitObjectE");
	set_cmt	(0X71000577D6,	"type descriptor name",	1);
	create_strlit	(0X71000577D6,	0X25);
	set_name	(0X71000577D6,	"_ZTSN2nn2os6detail19MultiWaitHolderBaseE");
	set_cmt	(0X71000577FB,	"type descriptor name",	1);
	create_strlit	(0X71000577FB,	0X2F);
	set_name	(0X71000577FB,	"_ZTSN2nn2os6detail25AddressSpaceAllocatorBaseImmEE");
	set_cmt	(0X710005782A,	"type descriptor name",	1);
	create_strlit	(0X710005782A,	0X27);
	set_name	(0X710005782A,	"_ZTSN2nn2os6detail21AddressSpaceAllocatorE");
	set_cmt	(0X7100057851,	"type descriptor name",	1);
	create_strlit	(0X7100057851,	0X28);
	set_name	(0X7100057851,	"_ZTSN2nn2os6detail22MultiWaitHolderOfEventE");
	set_cmt	(0X7100057879,	"type descriptor name",	1);
	create_strlit	(0X7100057879,	0X34);
	set_name	(0X7100057879,	"_ZTSN2nn2os6detail34MultiWaitHolderOfInterProcessEventE");
	set_cmt	(0X71000578AD,	"type descriptor name",	1);
	create_strlit	(0X71000578AD,	0X33);
	set_name	(0X71000578AD,	"_ZTSN2nn2os6detail33MultiWaitHolderOfNativeWaitObjectE");
	set_cmt	(0X71000578E0,	"type descriptor name",	1);
	create_strlit	(0X71000578E0,	0X2F);
	set_name	(0X71000578E0,	"_ZTSN2nn2os6detail29MultiWaitHolderOfNativeHandleE");
	set_cmt	(0X7100057910,	"jump table for switch statement",	0);
	create_word	(0X7100057910);
	set_name	(0X7100057910,	"jpt_7100008FAC");
	create_word	(0X7100057912);
	create_word	(0X7100057914);
	create_word	(0X7100057916);
	create_word	(0X7100057918);
	create_word	(0X710005791A);
	create_word	(0X710005791C);
	create_word	(0X710005791E);
	create_word	(0X7100057920);
	create_word	(0X7100057922);
	create_word	(0X7100057924);
	create_word	(0X7100057926);
	create_word	(0X7100057928);
	create_word	(0X710005792A);
	create_word	(0X710005792C);
	create_word	(0X710005792E);
	create_word	(0X7100057930);
	create_word	(0X7100057932);
	create_word	(0X7100057934);
	create_word	(0X7100057936);
	create_word	(0X7100057938);
	create_word	(0X710005793A);
	create_word	(0X710005793C);
	create_word	(0X710005793E);
	create_word	(0X7100057940);
	set_cmt	(0X7100057942,	"jump table for switch statement",	0);
	create_byte	(0X7100057942);
	set_name	(0X7100057942,	"jpt_7100008F2C");
	create_byte	(0X7100057943);
	create_byte	(0X7100057944);
	create_byte	(0X7100057945);
	set_cmt	(0X7100057946,	"jump table for switch statement",	0);
	create_byte	(0X7100057946);
	set_name	(0X7100057946,	"jpt_710000915C");
	create_byte	(0X7100057947);
	create_byte	(0X7100057948);
	create_byte	(0X7100057949);
	set_cmt	(0X710005794A,	"jump table for switch statement",	0);
	create_byte	(0X710005794A);
	set_name	(0X710005794A,	"jpt_7100009380");
	create_byte	(0X710005794B);
	create_byte	(0X710005794C);
	create_byte	(0X710005794D);
	create_byte	(0X710005794E);
	create_byte	(0X710005794F);
	create_byte	(0X7100057950);
	create_byte	(0X7100057951);
	create_byte	(0X7100057952);
	create_byte	(0X7100057953);
	create_byte	(0X7100057954);
	create_byte	(0X7100057955);
	create_byte	(0X7100057956);
	create_byte	(0X7100057957);
	create_byte	(0X7100057958);
	create_byte	(0X7100057959);
	create_byte	(0X710005795A);
	create_byte	(0X710005795B);
	set_cmt	(0X710005795C,	"jump table for switch statement",	0);
	create_byte	(0X710005795C);
	set_name	(0X710005795C,	"jpt_7100009AC0");
	create_byte	(0X710005795D);
	create_byte	(0X710005795E);
	create_byte	(0X710005795F);
	create_byte	(0X7100057960);
	create_byte	(0X7100057961);
	create_byte	(0X7100057962);
	create_byte	(0X7100057963);
	create_byte	(0X7100057964);
	create_byte	(0X7100057965);
	create_byte	(0X7100057966);
	create_byte	(0X7100057967);
	create_byte	(0X7100057968);
	create_byte	(0X7100057969);
	create_byte	(0X710005796A);
	create_byte	(0X710005796B);
	set_cmt	(0X710005796C,	"jump table for switch statement",	0);
	create_byte	(0X710005796C);
	set_name	(0X710005796C,	"jpt_710000A06C");
	create_byte	(0X710005796D);
	create_byte	(0X710005796E);
	create_byte	(0X710005796F);
	set_cmt	(0X7100057A70,	"jump table for switch statement",	0);
	create_byte	(0X7100057A70);
	set_name	(0X7100057A70,	"jpt_710000A1EC");
	create_byte	(0X7100057A71);
	create_byte	(0X7100057A72);
	create_byte	(0X7100057A73);
	create_byte	(0X7100057A74);
	create_byte	(0X7100057A75);
	create_byte	(0X7100057A76);
	create_byte	(0X7100057A77);
	create_byte	(0X7100057A78);
	create_byte	(0X7100057A79);
	create_byte	(0X7100057A7A);
	create_byte	(0X7100057A7B);
	create_byte	(0X7100057A7C);
	create_byte	(0X7100057A7D);
	create_byte	(0X7100057A7E);
	create_byte	(0X7100057A7F);
	create_byte	(0X7100057A80);
	set_cmt	(0X7100057A81,	"jump table for switch statement",	0);
	create_byte	(0X7100057A81);
	set_name	(0X7100057A81,	"jpt_710000A3AC");
	create_byte	(0X7100057A82);
	create_byte	(0X7100057A83);
	create_byte	(0X7100057A84);
	create_byte	(0X7100057A85);
	create_byte	(0X7100057A86);
	create_byte	(0X7100057A87);
	create_byte	(0X7100057A88);
	create_byte	(0X7100057A89);
	create_byte	(0X7100057A8A);
	create_byte	(0X7100057A8B);
	create_byte	(0X7100057A8C);
	create_byte	(0X7100057A8D);
	create_byte	(0X7100057A8E);
	create_byte	(0X7100057A8F);
	create_byte	(0X7100057A90);
	create_byte	(0X7100057A91);
	create_byte	(0X7100057A92);
	create_byte	(0X7100057A93);
	create_byte	(0X7100057A94);
	create_byte	(0X7100057A95);
	create_byte	(0X7100057A96);
	create_byte	(0X7100057A97);
	create_byte	(0X7100057A98);
	create_byte	(0X7100057A99);
	create_byte	(0X7100057A9A);
	create_byte	(0X7100057A9B);
	create_byte	(0X7100057A9C);
	create_byte	(0X7100057A9D);
	create_byte	(0X7100057A9E);
	create_byte	(0X7100057A9F);
	create_byte	(0X7100057AA0);
	create_byte	(0X7100057AA1);
	create_byte	(0X7100057AA2);
	create_byte	(0X7100057AA3);
	create_byte	(0X7100057AA4);
	create_byte	(0X7100057AA5);
	create_byte	(0X7100057AA6);
	create_byte	(0X7100057AA7);
	create_byte	(0X7100057AA8);
	create_byte	(0X7100057AA9);
	create_byte	(0X7100057AAA);
	create_byte	(0X7100057AAB);
	create_byte	(0X7100057AAC);
	create_byte	(0X7100057AAD);
	create_byte	(0X7100057AAE);
	create_byte	(0X7100057AAF);
	set_cmt	(0X7100057AB0,	"jump table for switch statement",	0);
	create_word	(0X7100057AB0);
	set_name	(0X7100057AB0,	"jpt_710000A410");
	create_word	(0X7100057AB2);
	create_word	(0X7100057AB4);
	create_word	(0X7100057AB6);
	create_word	(0X7100057AB8);
	create_word	(0X7100057ABA);
	create_word	(0X7100057ABC);
	create_word	(0X7100057ABE);
	create_word	(0X7100057AC0);
	create_word	(0X7100057AC2);
	create_word	(0X7100057AC4);
	create_word	(0X7100057AC6);
	create_word	(0X7100057AC8);
	create_word	(0X7100057ACA);
	create_word	(0X7100057ACC);
	create_word	(0X7100057ACE);
	create_word	(0X7100057AD0);
	create_word	(0X7100057AD2);
	create_word	(0X7100057AD4);
	create_word	(0X7100057AD6);
	create_word	(0X7100057AD8);
	create_word	(0X7100057ADA);
	create_word	(0X7100057ADC);
	create_word	(0X7100057ADE);
	create_word	(0X7100057AE0);
	create_word	(0X7100057AE2);
	create_word	(0X7100057AE4);
	create_word	(0X7100057AE6);
	create_word	(0X7100057AE8);
	create_word	(0X7100057AEA);
	create_word	(0X7100057AEC);
	create_word	(0X7100057AEE);
	create_word	(0X7100057AF0);
	create_word	(0X7100057AF2);
	create_word	(0X7100057AF4);
	create_word	(0X7100057AF6);
	create_word	(0X7100057AF8);
	create_word	(0X7100057AFA);
	create_word	(0X7100057AFC);
	create_word	(0X7100057AFE);
	create_word	(0X7100057B00);
	create_word	(0X7100057B02);
	create_word	(0X7100057B04);
	create_word	(0X7100057B06);
	create_word	(0X7100057B08);
	create_word	(0X7100057B0A);
	create_word	(0X7100057B0C);
	create_word	(0X7100057B0E);
	create_word	(0X7100057B10);
	create_word	(0X7100057B12);
	create_word	(0X7100057B14);
	create_word	(0X7100057B16);
	create_word	(0X7100057B18);
	create_word	(0X7100057B1A);
	create_word	(0X7100057B1C);
	create_word	(0X7100057B1E);
	create_word	(0X7100057B20);
	create_word	(0X7100057B22);
	create_word	(0X7100057B24);
	create_word	(0X7100057B26);
	create_word	(0X7100057B28);
	create_word	(0X7100057B2A);
	create_word	(0X7100057B2C);
	create_word	(0X7100057B2E);
	create_word	(0X7100057B30);
	create_word	(0X7100057B32);
	create_word	(0X7100057B34);
	create_word	(0X7100057B36);
	create_word	(0X7100057B38);
	create_word	(0X7100057B3A);
	create_word	(0X7100057B3C);
	create_word	(0X7100057B3E);
	create_word	(0X7100057B40);
	create_word	(0X7100057B42);
	create_word	(0X7100057B44);
	create_word	(0X7100057B46);
	create_word	(0X7100057B48);
	create_word	(0X7100057B4A);
	create_word	(0X7100057B4C);
	create_word	(0X7100057B4E);
	create_word	(0X7100057B50);
	create_word	(0X7100057B52);
	create_word	(0X7100057B54);
	create_word	(0X7100057B56);
	set_cmt	(0X7100057B74,	"jump table for switch statement",	0);
	create_byte	(0X7100057B74);
	set_name	(0X7100057B74,	"jpt_710000CBD0");
	create_byte	(0X7100057B75);
	create_byte	(0X7100057B76);
	create_byte	(0X7100057B77);
	create_byte	(0X7100057B78);
	set_cmt	(0X7100057B79,	"type descriptor name",	1);
	create_strlit	(0X7100057B79,	0X3C);
	set_name	(0X7100057B79,	"_ZTSN2nn4ovln7service5entry12_GLOBAL__N_119MyHipcServerManagerE");
	set_cmt	(0X7100057BB5,	"type descriptor name",	1);
	create_strlit	(0X7100057BB5,	0X75);
	set_name	(0X7100057BB5,	"_ZTSN2nn2sf31HipcSimpleAllInOneServerManagerILm20ELm2ENS_4ovln7service5entry12_GLOBAL__N_125MyHipcServerManagerOptionEEE");
	set_cmt	(0X7100057C2A,	"type descriptor name",	1);
	create_strlit	(0X7100057C2A,	0XC0);
	set_name	(0X7100057C2A,	"_ZTSN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm20ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_4ovln7service5entry12_GLOBAL__N_125MyHipcServerManagerOptionEEEEE");
	set_cmt	(0X7100057CEA,	"type descriptor name",	1);
	create_strlit	(0X7100057CEA,	0X2D);
	set_name	(0X7100057CEA,	"_ZTSN2nn2sf34HipcServerSessionManagerCommonBaseE");
	set_cmt	(0X7100057D17,	"jump table for switch statement",	0);
	create_byte	(0X7100057D17);
	set_name	(0X7100057D17,	"jpt_710000E808");
	create_byte	(0X7100057D18);
	create_byte	(0X7100057D19);
	create_byte	(0X7100057D1A);
	set_cmt	(0X7100057D1B,	"type descriptor name",	1);
	create_strlit	(0X7100057D1B,	0X71);
	set_name	(0X7100057D1B,	"_ZTSN2nn2sf31UnmanagedServiceObjectByPointerINS_4ovln16IReceiverServiceENS2_12_GLOBAL__N_121NotificationAgentImplEEE");
	set_cmt	(0X7100057D8C,	"type descriptor name",	1);
	create_strlit	(0X7100057D8C,	0X81);
	set_name	(0X7100057D8C,	"_ZTSN2nn2sf13InterfaceInfoINS_4ovln16IReceiverServiceEE4_tABINS4_5_tO2NIPNS2_12_GLOBAL__N_121NotificationAgentImplEE4typeES3_E4typeE");
	set_cmt	(0X7100057E0D,	"type descriptor name",	1);
	create_strlit	(0X7100057E0D,	0XB4);
	set_name	(0X7100057E0D,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_4ovln16IReceiverServiceEE5_tO2NIPNS7_12_GLOBAL__N_121NotificationAgentImplEE4typeES8_E4typeE");
	set_cmt	(0X7100057EC1,	"type descriptor name",	1);
	create_strlit	(0X7100057EC1,	0X1D);
	set_name	(0X7100057EC1,	"_ZTSN2nn4ovln16IReceiverServiceE");
	set_cmt	(0X7100057EDE,	"type descriptor name",	1);
	create_strlit	(0X7100057EDE,	0X19);
	set_name	(0X7100057EDE,	"_ZTSN2nn2sf14IServiceObjectE");
	set_cmt	(0X7100057EF7,	"type descriptor name",	1);
	create_strlit	(0X7100057EF7,	0X18);
	set_name	(0X7100057EF7,	"_ZTSN2nn2sf13ISharedObjectE");
	set_cmt	(0X7100057F0F,	"type descriptor name",	1);
	create_strlit	(0X7100057F0F,	0X8E);
	set_name	(0X7100057F0F,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_4ovln16IReceiverServiceEE5_tO2NIPNS4_12_GLOBAL__N_121NotificationAgentImplEE4typeEvEE");
	set_cmt	(0X7100057F9D,	"type descriptor name",	1);
	create_strlit	(0X7100057F9D,	0XEA);
	set_name	(0X7100057F9D,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_4ovln9IReceiverEE4_tABINS6_5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeES5_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	set_cmt	(0X7100058087,	"type descriptor name",	1);
	create_strlit	(0X7100058087,	0X2D);
	set_name	(0X7100058087,	"_ZTSN2nn2sf4impl6detail22ServiceObjectImplBase2E");
	set_cmt	(0X71000580B4,	"type descriptor name",	1);
	create_strlit	(0X71000580B4,	0X88);
	set_name	(0X71000580B4,	"_ZTSN2nn2sf13InterfaceInfoINS_4ovln9IReceiverEE4_tABINS4_5_tO2NINS2_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeES3_E4typeE");
	set_cmt	(0X710005813C,	"type descriptor name",	1);
	create_strlit	(0X710005813C,	0XBB);
	set_name	(0X710005813C,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_4ovln9IReceiverEE5_tO2NINS7_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeES8_E4typeE");
	set_cmt	(0X71000581F7,	"type descriptor name",	1);
	create_strlit	(0X71000581F7,	0X15);
	set_name	(0X71000581F7,	"_ZTSN2nn4ovln9IReceiverE");
	set_cmt	(0X710005820C,	"type descriptor name",	1);
	create_strlit	(0X710005820C,	0X95);
	set_name	(0X710005820C,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_4ovln9IReceiverEE5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeEvEE");
	set_cmt	(0X71000582A1,	"type descriptor name",	1);
	create_strlit	(0X71000582A1,	0XB1);
	set_name	(0X71000582A1,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS_4ovln12_GLOBAL__N_121NotificationAgentImpl13SourceManager12SourceHolderENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	set_cmt	(0X7100058352,	"type descriptor name",	1);
	create_strlit	(0X7100058352,	0X4D);
	set_name	(0X7100058352,	"_ZTSN2nn4ovln12_GLOBAL__N_121NotificationAgentImpl13SourceManager12SourceHolderE");
	set_cmt	(0X710005839F,	"type descriptor name",	1);
	create_strlit	(0X710005839F,	0X72);
	set_name	(0X710005839F,	"_ZTSN2nn4util21IntrusiveListBaseNodeINS_4ovln12_GLOBAL__N_121NotificationAgentImpl13SourceManager12SourceHolderES6_EE");
	set_cmt	(0X7100058411,	"type descriptor name",	1);
	create_strlit	(0X7100058411,	0X1E);
	set_name	(0X7100058411,	"_ZTSN2nn4util17IntrusiveListNodeE");
	set_cmt	(0X710005842F,	"type descriptor name",	1);
	create_strlit	(0X710005842F,	0X37);
	set_name	(0X710005842F,	"_ZTSN2nn4ovln12_GLOBAL__N_121NotificationAgentImpl6SourceE");
	set_cmt	(0X7100058466,	"type descriptor name",	1);
	create_strlit	(0X7100058466,	0X5C);
	set_name	(0X7100058466,	"_ZTSN2nn4util21IntrusiveListBaseNodeINS_4ovln12_GLOBAL__N_121NotificationAgentImpl6SourceES5_EE");
	set_cmt	(0X71000584C2,	"type descriptor name",	1);
	create_strlit	(0X71000584C2,	0X6F);
	set_name	(0X71000584C2,	"_ZTSN2nn2sf31UnmanagedServiceObjectByPointerINS_4ovln14ISenderServiceENS2_12_GLOBAL__N_121NotificationAgentImplEEE");
	set_cmt	(0X7100058531,	"type descriptor name",	1);
	create_strlit	(0X7100058531,	0X7F);
	set_name	(0X7100058531,	"_ZTSN2nn2sf13InterfaceInfoINS_4ovln14ISenderServiceEE4_tABINS4_5_tO2NIPNS2_12_GLOBAL__N_121NotificationAgentImplEE4typeES3_E4typeE");
	set_cmt	(0X71000585B0,	"type descriptor name",	1);
	create_strlit	(0X71000585B0,	0XB2);
	set_name	(0X71000585B0,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_4ovln14ISenderServiceEE5_tO2NIPNS7_12_GLOBAL__N_121NotificationAgentImplEE4typeES8_E4typeE");
	set_cmt	(0X7100058662,	"type descriptor name",	1);
	create_strlit	(0X7100058662,	0X1B);
	set_name	(0X7100058662,	"_ZTSN2nn4ovln14ISenderServiceE");
	set_cmt	(0X710005867D,	"type descriptor name",	1);
	create_strlit	(0X710005867D,	0X8C);
	set_name	(0X710005867D,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_4ovln14ISenderServiceEE5_tO2NIPNS4_12_GLOBAL__N_121NotificationAgentImplEE4typeEvEE");
	set_cmt	(0X7100058709,	"type descriptor name",	1);
	create_strlit	(0X7100058709,	0XE6);
	set_name	(0X7100058709,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_4ovln7ISenderEE4_tABINS6_5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeES5_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	set_cmt	(0X71000587EF,	"type descriptor name",	1);
	create_strlit	(0X71000587EF,	0X84);
	set_name	(0X71000587EF,	"_ZTSN2nn2sf13InterfaceInfoINS_4ovln7ISenderEE4_tABINS4_5_tO2NINS2_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeES3_E4typeE");
	set_cmt	(0X7100058873,	"type descriptor name",	1);
	create_strlit	(0X7100058873,	0XB7);
	set_name	(0X7100058873,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_4ovln7ISenderEE5_tO2NINS7_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeES8_E4typeE");
	set_cmt	(0X710005892A,	"type descriptor name",	1);
	create_strlit	(0X710005892A,	0X13);
	set_name	(0X710005892A,	"_ZTSN2nn4ovln7ISenderE");
	set_cmt	(0X710005893D,	"type descriptor name",	1);
	create_strlit	(0X710005893D,	0X91);
	set_name	(0X710005893D,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_4ovln7ISenderEE5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeEvEE");
	set_cmt	(0X71000589CE,	"type descriptor name",	1);
	create_strlit	(0X71000589CE,	0X21);
	set_name	(0X71000589CE,	"_ZTSN2nn2sf22UnitHeapMemoryResourceE");
	set_cmt	(0X71000589EF,	"type descriptor name",	1);
	create_strlit	(0X71000589EF,	0X16);
	set_name	(0X71000589EF,	"_ZTSN2nn14MemoryResourceE");
	set_cmt	(0X7100058A05,	"type descriptor name",	1);
	create_strlit	(0X7100058A05,	0X25);
	set_name	(0X7100058A05,	"_ZTSN2nn2sf4cmif6client14CmifBaseObjectE");
	set_cmt	(0X7100058A2A,	"type descriptor name",	1);
	create_strlit	(0X7100058A2A,	0X1F);
	set_name	(0X7100058A2A,	"_ZTSN2nn2sf6detail13CmifProxyInfoE");
	make_array	(0X7100058A49,	0X3);
	set_cmt	(0X7100058A58,	"jump table for switch statement",	0);
	create_byte	(0X7100058A58);
	set_name	(0X7100058A58,	"jpt_710000EEF4");
	create_byte	(0X7100058A59);
	create_byte	(0X7100058A5A);
	create_byte	(0X7100058A5B);
	set_cmt	(0X7100058A5C,	"type descriptor name",	1);
	create_strlit	(0X7100058A5C,	0X3E);
	set_name	(0X7100058A5C,	"_ZTSN2nn2sf4hipc6server2v16detail29HipcAllInOneServerManagerBaseE");
	set_cmt	(0X7100058A9A,	"type descriptor name",	1);
	create_strlit	(0X7100058A9A,	0X2E);
	set_name	(0X7100058A9A,	"_ZTSN2nn2sf4cmif6server23CmifServerDomainManagerE");
	set_cmt	(0X7100058AC8,	"type descriptor name",	1);
	create_strlit	(0X7100058AC8,	0X35);
	set_name	(0X7100058AC8,	"_ZTSN2nn2sf4cmif6server23CmifServerDomainManager6DomainE");
	set_cmt	(0X7100058AFD,	"type descriptor name",	1);
	create_strlit	(0X7100058AFD,	0X2D);
	set_name	(0X7100058AFD,	"_ZTSN2nn2sf4cmif6server22CmifDomainServerObjectE");
	set_cmt	(0X7100058B2A,	"type descriptor name",	1);
	create_strlit	(0X7100058B2A,	0X1B);
	set_name	(0X7100058B2A,	"_ZTSN2nn2sf4cmif11ICmifDomainE");
	set_cmt	(0X7100058B45,	"type descriptor name",	1);
	create_strlit	(0X7100058B45,	0X27);
	set_name	(0X7100058B45,	"_ZTSN2nn2sf4cmif6server16CmifServerDomainE");
	set_cmt	(0X7100058B6C,	"jump table for switch statement",	0);
	create_byte	(0X7100058B6C);
	set_name	(0X7100058B6C,	"jpt_710001077C");
	create_byte	(0X7100058B6D);
	create_byte	(0X7100058B6E);
	create_byte	(0X7100058B6F);
	set_cmt	(0X7100058B70,	"jump table for switch statement",	0);
	create_byte	(0X7100058B70);
	set_name	(0X7100058B70,	"jpt_71000115B8");
	create_byte	(0X7100058B71);
	create_byte	(0X7100058B72);
	create_byte	(0X7100058B73);
	set_cmt	(0X7100058B74,	"type descriptor name",	1);
	create_strlit	(0X7100058B74,	0X32);
	set_name	(0X7100058B74,	"_ZTSN2nn2sf4hipc6server2v124HipcServerSessionManagerE");
	set_cmt	(0X7100058BA6,	"type descriptor name",	1);
	create_strlit	(0X7100058BA6,	0X5C);
	set_name	(0X7100058BA6,	"_ZTSN2nn2sf4hipc6server2v125HipcServerSessionManagerTINS0_4cmif6server20CmifServerObjectInfoEEE");
	set_cmt	(0X7100058C02,	"type descriptor name",	1);
	create_strlit	(0X7100058C02,	0X36);
	set_name	(0X7100058C02,	"_ZTSN2nn2sf4hipc6server2v128HipcServerSessionManagerBaseE");
	set_cmt	(0X7100058C38,	"type descriptor name",	1);
	create_strlit	(0X7100058C38,	0X2F);
	set_name	(0X7100058C38,	"_ZTSN2nn2sf4hipc6server24HipcServerApiModelHolderE");
	set_cmt	(0X7100058C67,	"type descriptor name",	1);
	create_strlit	(0X7100058C67,	0X38);
	set_name	(0X7100058C67,	"_ZTSN2nn2sf4hipc6server2v112_GLOBAL__N_116HipcObjectDomainE");
	set_cmt	(0X7100058C9F,	"type descriptor name",	1);
	create_strlit	(0X7100058C9F,	0X28);
	set_name	(0X7100058C9F,	"_ZTSN2nn2sf4hipc6server17IHipcObjectDomainE");
	set_cmt	(0X7100058CC7,	"type descriptor name",	1);
	create_strlit	(0X7100058CC7,	0X29);
	set_name	(0X7100058CC7,	"_ZTSN2nn2sf4hipc6server18Hipc2ServerMessageE");
	set_cmt	(0X7100058CF0,	"type descriptor name",	1);
	create_strlit	(0X7100058CF0,	0X28);
	set_name	(0X7100058CF0,	"_ZTSN2nn2sf4cmif6server17CmifServerMessageE");
	set_cmt	(0X7100058D1D,	"type descriptor name",	1);
	create_strlit	(0X7100058D1D,	0X3C);
	set_name	(0X7100058D1D,	"_ZTSN2nn2sf4hipc6server2v134HipcServerSessionManagerWithDomainE");
	set_cmt	(0X7100058D59,	"type descriptor name",	1);
	create_strlit	(0X7100058D59,	0X86);
	set_name	(0X7100058D59,	"_ZTSN2nn2sf22UnmanagedServiceObjectINS0_4hipc6detail12IHipcManagerENS2_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEEE");
	set_cmt	(0X7100058DDF,	"type descriptor name",	1);
	create_strlit	(0X7100058DDF,	0X9E);
	set_name	(0X7100058DDF,	"_ZTSN2nn2sf13InterfaceInfoINS0_4hipc6detail12IHipcManagerEE4_tABINS5_5_tO2NINS2_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEE4typeES4_E4typeE");
	set_cmt	(0X7100058E7D,	"type descriptor name",	1);
	create_strlit	(0X7100058E7D,	0XD1);
	set_name	(0X7100058E7D,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS0_4hipc6detail12IHipcManagerEE5_tO2NINS7_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEE4typeES9_E4typeE");
	set_cmt	(0X7100058F4E,	"type descriptor name",	1);
	create_strlit	(0X7100058F4E,	0X23);
	set_name	(0X7100058F4E,	"_ZTSN2nn2sf4hipc6detail12IHipcManagerE");
	set_cmt	(0X7100058F71,	"type descriptor name",	1);
	create_strlit	(0X7100058F71,	0XAB);
	set_name	(0X7100058F71,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS0_4hipc6detail12IHipcManagerEE5_tO2NINS4_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEE4typeEvEE");
	set_cmt	(0X710005901C,	"type descriptor name",	1);
	create_strlit	(0X710005901C,	0X46);
	set_name	(0X710005901C,	"_ZTSN2nn2sf4cmif6server22CmifDomainServerObject23CmifDomainServerMessageE");
	create_strlit	(0X7100059062,	0X4);
	set_name	(0X7100059062,	"aSm");
	create_strlit	(0X7100059066,	0X8);
	set_name	(0X7100059066,	"aFatalU");
	set_cmt	(0X710005906E,	"type descriptor name",	1);
	create_strlit	(0X710005906E,	0X11F);
	set_name	(0X710005906E,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_4cmif6client6detail9CmifProxyINS_8fatalsrv8IServiceENS0_4hipc6client18Hipc2ProxyKindBaseILNS9_6detail11MessageTypeE6EEENS0_30MemoryResourceAllocationPolicyENS5_19ProcessModifierImplINS4_21DefaultProxyFilterTagEEEvEESF_E6ObjectE");
	set_cmt	(0X710005918D,	"type descriptor name",	1);
	create_strlit	(0X710005918D,	0XDF);
	set_name	(0X710005918D,	"_ZTSN2nn2sf4cmif6client6detail9CmifProxyINS_8fatalsrv8IServiceENS0_4hipc6client18Hipc2ProxyKindBaseILNS7_6detail11MessageTypeE6EEENS0_30MemoryResourceAllocationPolicyENS3_19ProcessModifierImplINS2_21DefaultProxyFilterTagEEEvEE");
	set_cmt	(0X710005926C,	"type descriptor name",	1);
	create_strlit	(0X710005926C,	0XE6);
	set_name	(0X710005926C,	"_ZTSN2nn2sf4cmif6client6detail13CmifProxyImplINS_8fatalsrv8IServiceENS0_4hipc6client18Hipc2ProxyKindBaseILNS7_6detail11MessageTypeE6EEENS0_30MemoryResourceAllocationPolicyES6_NS3_19ProcessModifierImplINS2_21DefaultProxyFilterTagEEEEE");
	set_cmt	(0X7100059352,	"type descriptor name",	1);
	create_strlit	(0X7100059352,	0X18);
	set_name	(0X7100059352,	"_ZTSN2nn8fatalsrv8IServiceE");
	set_cmt	(0X710005936A,	"type descriptor name",	1);
	create_strlit	(0X710005936A,	0X31);
	set_name	(0X710005936A,	"_ZTSN2nn2sf4hipc6client26Hipc2ClientProxyBaseObjectE");
	create_qword	(0X710005939C);
	set_cmt	(0X71000593D4,	"jump table for switch statement",	0);
	create_byte	(0X71000593D4);
	set_name	(0X71000593D4,	"jpt_71000158F4");
	create_byte	(0X71000593D5);
	create_byte	(0X71000593D6);
	create_byte	(0X71000593D7);
	create_byte	(0X71000593D8);
	create_byte	(0X71000593D9);
	create_byte	(0X71000593DA);
	create_byte	(0X71000593DB);
	create_byte	(0X71000593DC);
	set_cmt	(0X71000593DD,	"jump table for switch statement",	0);
	create_byte	(0X71000593DD);
	set_name	(0X71000593DD,	"jpt_71000179B8");
	create_byte	(0X71000593DE);
	create_byte	(0X71000593DF);
	create_byte	(0X71000593E0);
	create_strlit	(0X71000593E1,	0X9);
	set_name	(0X71000593E1,	"aHshlSys");
	create_strlit	(0X71000593EA,	0X9);
	set_name	(0X71000593EA,	"aHshlSet");
	create_strlit	(0X710005941C,	0X6);
	set_name	(0X710005941C,	"aInsR");
	create_strlit	(0X7100059422,	0X6);
	set_name	(0X7100059422,	"aInsS");
	set_cmt	(0X7100059428,	"type descriptor name",	1);
	create_strlit	(0X7100059428,	0X5E);
	set_name	(0X7100059428,	"_ZTSN2nn2sf22UnmanagedServiceObjectINS_3ins16IReceiverManagerENS2_6server19ReceiverManagerImplEEE");
	set_cmt	(0X7100059486,	"type descriptor name",	1);
	create_strlit	(0X7100059486,	0X76);
	set_name	(0X7100059486,	"_ZTSN2nn2sf13InterfaceInfoINS_3ins16IReceiverManagerEE4_tABINS4_5_tO2NINS2_6server19ReceiverManagerImplEE4typeES3_E4typeE");
	set_cmt	(0X71000594FC,	"type descriptor name",	1);
	create_strlit	(0X71000594FC,	0XA9);
	set_name	(0X71000594FC,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_3ins16IReceiverManagerEE5_tO2NINS7_6server19ReceiverManagerImplEE4typeES8_E4typeE");
	set_cmt	(0X71000595A5,	"type descriptor name",	1);
	create_strlit	(0X71000595A5,	0X1C);
	set_name	(0X71000595A5,	"_ZTSN2nn3ins16IReceiverManagerE");
	set_cmt	(0X71000595C1,	"type descriptor name",	1);
	create_strlit	(0X71000595C1,	0X83);
	set_name	(0X71000595C1,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_3ins16IReceiverManagerEE5_tO2NINS4_6server19ReceiverManagerImplEE4typeEvEE");
	set_cmt	(0X7100059644,	"type descriptor name",	1);
	create_strlit	(0X7100059644,	0X62);
	set_name	(0X7100059644,	"_ZTSN2nn2sf13InterfaceInfoINS_3ins16IReceiverManagerEE5_tO2NINS2_6server19ReceiverManagerImplEE4typeE");
	set_cmt	(0X71000596A6,	"type descriptor name",	1);
	create_strlit	(0X71000596A6,	0X49);
	set_name	(0X71000596A6,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS_3ins6server19ReceiverManagerImplEvEE");
	set_cmt	(0X71000596EF,	"type descriptor name",	1);
	create_strlit	(0X71000596EF,	0X26);
	set_name	(0X71000596EF,	"_ZTSN2nn3ins6server19ReceiverManagerImplE");
	set_cmt	(0X7100059715,	"type descriptor name",	1);
	create_strlit	(0X7100059715,	0X5A);
	set_name	(0X7100059715,	"_ZTSN2nn2sf22UnmanagedServiceObjectINS_3ins14ISenderManagerENS2_6server17SenderManagerImplEEE");
	set_cmt	(0X710005976F,	"type descriptor name",	1);
	create_strlit	(0X710005976F,	0X72);
	set_name	(0X710005976F,	"_ZTSN2nn2sf13InterfaceInfoINS_3ins14ISenderManagerEE4_tABINS4_5_tO2NINS2_6server17SenderManagerImplEE4typeES3_E4typeE");
	set_cmt	(0X71000597E1,	"type descriptor name",	1);
	create_strlit	(0X71000597E1,	0XA5);
	set_name	(0X71000597E1,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_3ins14ISenderManagerEE5_tO2NINS7_6server17SenderManagerImplEE4typeES8_E4typeE");
	set_cmt	(0X7100059886,	"type descriptor name",	1);
	create_strlit	(0X7100059886,	0X1A);
	set_name	(0X7100059886,	"_ZTSN2nn3ins14ISenderManagerE");
	set_cmt	(0X71000598A0,	"type descriptor name",	1);
	create_strlit	(0X71000598A0,	0X7F);
	set_name	(0X71000598A0,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_3ins14ISenderManagerEE5_tO2NINS4_6server17SenderManagerImplEE4typeEvEE");
	set_cmt	(0X710005991F,	"type descriptor name",	1);
	create_strlit	(0X710005991F,	0X5E);
	set_name	(0X710005991F,	"_ZTSN2nn2sf13InterfaceInfoINS_3ins14ISenderManagerEE5_tO2NINS2_6server17SenderManagerImplEE4typeE");
	set_cmt	(0X710005997D,	"type descriptor name",	1);
	create_strlit	(0X710005997D,	0X47);
	set_name	(0X710005997D,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS_3ins6server17SenderManagerImplEvEE");
	set_cmt	(0X71000599C4,	"type descriptor name",	1);
	create_strlit	(0X71000599C4,	0X24);
	set_name	(0X71000599C4,	"_ZTSN2nn3ins6server17SenderManagerImplE");
	set_cmt	(0X71000599E8,	"type descriptor name",	1);
	create_strlit	(0X71000599E8,	0X2E);
	set_name	(0X71000599E8,	"_ZTSN2nn3ins6server12_GLOBAL__N_113ServerManagerE");
	set_cmt	(0X7100059A16,	"type descriptor name",	1);
	create_strlit	(0X7100059A16,	0X67);
	set_name	(0X7100059A16,	"_ZTSN2nn2sf31HipcSimpleAllInOneServerManagerILm8ELm2ENS_3ins6server12_GLOBAL__N_120ServerManagerOptionsEEE");
	set_cmt	(0X7100059A7D,	"type descriptor name",	1);
	create_strlit	(0X7100059A7D,	0XB2);
	set_name	(0X7100059A7D,	"_ZTSN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm8ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_3ins6server12_GLOBAL__N_120ServerManagerOptionsEEEEE");
	set_cmt	(0X7100059BF8,	"jump table for switch statement",	0);
	create_byte	(0X7100059BF8);
	set_name	(0X7100059BF8,	"jpt_710001E11C");
	create_byte	(0X7100059BF9);
	create_byte	(0X7100059BFA);
	create_byte	(0X7100059BFB);
	create_byte	(0X7100059BFC);
	create_byte	(0X7100059BFD);
	create_byte	(0X7100059BFE);
	create_byte	(0X7100059BFF);
	create_byte	(0X7100059C00);
	create_byte	(0X7100059C01);
	create_byte	(0X7100059C02);
	create_byte	(0X7100059C03);
	set_cmt	(0X7100059C04,	"jump table for switch statement",	0);
	create_byte	(0X7100059C04);
	set_name	(0X7100059C04,	"jpt_710001F490");
	create_byte	(0X7100059C05);
	create_byte	(0X7100059C06);
	create_byte	(0X7100059C07);
	create_byte	(0X7100059C08);
	set_cmt	(0X7100059C09,	"jump table for switch statement",	0);
	create_byte	(0X7100059C09);
	set_name	(0X7100059C09,	"jpt_710001FCDC");
	create_byte	(0X7100059C0A);
	create_byte	(0X7100059C0B);
	create_byte	(0X7100059C0C);
	create_byte	(0X7100059C0D);
	create_strlit	(0X7100059C0E,	0X6);
	set_name	(0X7100059C0E,	"aPscC");
	create_strlit	(0X7100059C14,	0X6);
	set_name	(0X7100059C14,	"aPscM");
	create_strlit	(0X7100059C1A,	0X6);
	set_name	(0X7100059C1A,	"aPscL");
	set_cmt	(0X7100059C20,	"jump table for switch statement",	0);
	create_word	(0X7100059C20);
	set_name	(0X7100059C20,	"jpt_7100023DE0");
	create_word	(0X7100059C22);
	create_word	(0X7100059C24);
	create_word	(0X7100059C26);
	create_word	(0X7100059C28);
	create_word	(0X7100059C2A);
	create_word	(0X7100059C2C);
	set_cmt	(0X7100059C2E,	"jump table for switch statement",	0);
	create_word	(0X7100059C2E);
	set_name	(0X7100059C2E,	"jpt_7100023CE0");
	create_word	(0X7100059C30);
	create_word	(0X7100059C32);
	create_word	(0X7100059C34);
	create_word	(0X7100059C36);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_8(void) {
        auto x;
#define id x

	create_word	(0X7100059C38);
	create_word	(0X7100059C3A);
	create_word	(0X7100059C3C);
	create_word	(0X7100059C3E);
	create_word	(0X7100059C40);
	create_word	(0X7100059C42);
	create_word	(0X7100059C44);
	create_strlit	(0X7100059C46,	0X8);
	set_name	(0X7100059C46,	"aSrepoU");
	create_strlit	(0X7100059C4E,	0X8);
	set_name	(0X7100059C4E,	"aSrepoA");
	set_cmt	(0X7100059C56,	"type descriptor name",	1);
	create_strlit	(0X7100059C56,	0X3D);
	set_name	(0X7100059C56,	"_ZTSN2nn5srepo7service12_GLOBAL__N_125SrepoServiceServerManagerE");
	set_cmt	(0X7100059C93,	"type descriptor name",	1);
	create_strlit	(0X7100059C93,	0X88);
	set_name	(0X7100059C93,	"_ZTSN2nn2sf31HipcSimpleAllInOneServerManagerILm32ELm2ENS_5srepo7service12_GLOBAL__N_149SrepoServiceHipcSimpleAllInOneServerManagerOptionEEE");
	set_cmt	(0X7100059D1B,	"type descriptor name",	1);
	create_strlit	(0X7100059D1B,	0XD3);
	set_name	(0X7100059D1B,	"_ZTSN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm32ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_5srepo7service12_GLOBAL__N_149SrepoServiceHipcSimpleAllInOneServerManagerOptionEEEEE");
	make_array	(0X7100059DEE,	0X2);
	set_cmt	(0X7100059E80,	"type descriptor name",	1);
	create_strlit	(0X7100059E80,	0X62);
	set_name	(0X7100059E80,	"_ZTSN2nn2sf22UnmanagedServiceObjectINS_5srepo6detail3ipc13ISrepoServiceENS3_7service12SrepoServiceEEE");
	set_cmt	(0X7100059EE2,	"type descriptor name",	1);
	create_strlit	(0X7100059EE2,	0X7A);
	set_name	(0X7100059EE2,	"_ZTSN2nn2sf13InterfaceInfoINS_5srepo6detail3ipc13ISrepoServiceEE4_tABINS6_5_tO2NINS3_7service12SrepoServiceEE4typeES5_E4typeE");
	set_cmt	(0X7100059F5C,	"type descriptor name",	1);
	create_strlit	(0X7100059F5C,	0XAD);
	set_name	(0X7100059F5C,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISrepoServiceEE5_tO2NINS8_7service12SrepoServiceEE4typeESA_E4typeE");
	set_cmt	(0X710005A009,	"type descriptor name",	1);
	create_strlit	(0X710005A009,	0X26);
	set_name	(0X710005A009,	"_ZTSN2nn5srepo6detail3ipc13ISrepoServiceE");
	set_cmt	(0X710005A02F,	"type descriptor name",	1);
	create_strlit	(0X710005A02F,	0X87);
	set_name	(0X710005A02F,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISrepoServiceEE5_tO2NINS5_7service12SrepoServiceEE4typeEvEE");
	make_array	(0X710005A0B6,	0X2);
	set_cmt	(0X710005A0C8,	"type descriptor name",	1);
	create_strlit	(0X710005A0C8,	0XED);
	set_name	(0X710005A0C8,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE4_tABINS8_5_tO2NINS5_7service29ForegroundTransmissionContextEE4typeES7_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	set_cmt	(0X710005A1B5,	"type descriptor name",	1);
	create_strlit	(0X710005A1B5,	0X8B);
	set_name	(0X710005A1B5,	"_ZTSN2nn2sf13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE4_tABINS6_5_tO2NINS3_7service29ForegroundTransmissionContextEE4typeES5_E4typeE");
	set_cmt	(0X710005A240,	"type descriptor name",	1);
	create_strlit	(0X710005A240,	0XBE);
	set_name	(0X710005A240,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE5_tO2NINS8_7service29ForegroundTransmissionContextEE4typeESA_E4typeE");
	set_cmt	(0X710005A2FE,	"type descriptor name",	1);
	create_strlit	(0X710005A2FE,	0X26);
	set_name	(0X710005A2FE,	"_ZTSN2nn5srepo6detail3ipc13IAsyncContextE");
	set_cmt	(0X710005A324,	"type descriptor name",	1);
	create_strlit	(0X710005A324,	0X98);
	set_name	(0X710005A324,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE5_tO2NINS5_7service29ForegroundTransmissionContextEE4typeEvEE");
	set_cmt	(0X710005A3BC,	"type descriptor name",	1);
	create_strlit	(0X710005A3BC,	0X10A);
	set_name	(0X710005A3BC,	"_ZTSN2nn4util6detail8FunctionIFvRNS_5srepo6detail7service29ForegroundTransmissionContextEEZNS5_12SrepoService9PopReportENS_2sf3OutIivEENSB_INS_7account3UidEvEERKNSA_8OutArrayIcEENSB_INS_13ApplicationIdEvEENSB_INS0_4UuidEvEENSB_IbvEESO_NSB_IlvEERKNSA_9OutBufferEE3$_0vEE");
	set_cmt	(0X710005A4C6,	"type descriptor name",	1);
	create_strlit	(0X710005A4C6,	0X53);
	set_name	(0X710005A4C6,	"_ZTSN2nn4util9IFunctionIFvRNS_5srepo6detail7service29ForegroundTransmissionContextEEEE");
	set_cmt	(0X710005A519,	"type descriptor name",	1);
	create_strlit	(0X710005A519,	0XCA);
	set_name	(0X710005A519,	"_ZTSZN2nn5srepo6detail7service12SrepoService9PopReportENS_2sf3OutIivEENS5_INS_7account3UidEvEERKNS4_8OutArrayIcEENS5_INS_13ApplicationIdEvEENS5_INS_4util4UuidEvEENS5_IbvEESJ_NS5_IlvEERKNS4_9OutBufferEE3$_0");
	set_cmt	(0X710005A5E3,	"type descriptor name",	1);
	create_strlit	(0X710005A5E3,	0X168);
	set_name	(0X710005A5E3,	"_ZTSN2nn2sf6detail39ObjectImplFactoryWithStatelessAllocatorINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE4_tABINS8_5_tO2NINS5_7service12SyslogLoggerINSB_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeES7_E4typeENS0_25StatelessAllocationPolicyINS0_22ExpHeapStaticAllocatorILm1168ENSB_20ServiceObjectFactoryILi16ES7_SG_E12InterfaceTagEEEEEE6ObjectE");
	set_cmt	(0X710005A74B,	"type descriptor name",	1);
	create_strlit	(0X710005A74B,	0XAC);
	set_name	(0X710005A74B,	"_ZTSN2nn2sf13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE4_tABINS6_5_tO2NINS3_7service12SyslogLoggerINS9_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeES5_E4typeE");
	set_cmt	(0X710005A7F7,	"type descriptor name",	1);
	create_strlit	(0X710005A7F7,	0XDF);
	set_name	(0X710005A7F7,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE5_tO2NINS8_7service12SyslogLoggerINSD_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeESA_E4typeE");
	set_cmt	(0X710005A8D6,	"type descriptor name",	1);
	create_strlit	(0X710005A8D6,	0X26);
	set_name	(0X710005A8D6,	"_ZTSN2nn5srepo6detail3ipc13ISyslogLoggerE");
	set_cmt	(0X710005A8FC,	"type descriptor name",	1);
	create_strlit	(0X710005A8FC,	0XB9);
	set_name	(0X710005A8FC,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE5_tO2NINS5_7service12SyslogLoggerINSA_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeEvEE");
	set_cmt	(0X710005A9B5,	"jump table for switch statement",	0);
	create_byte	(0X710005A9B5);
	set_name	(0X710005A9B5,	"jpt_710002D2E0");
	create_byte	(0X710005A9B6);
	create_byte	(0X710005A9B7);
	create_byte	(0X710005A9B8);
	set_cmt	(0X710005A9B9,	"jump table for switch statement",	0);
	create_byte	(0X710005A9B9);
	set_name	(0X710005A9B9,	"jpt_710002D29C");
	create_byte	(0X710005A9BA);
	create_byte	(0X710005A9BB);
	create_byte	(0X710005A9BC);
	create_byte	(0X710005A9BD);
	create_byte	(0X710005A9BE);
	create_byte	(0X710005A9BF);
	create_byte	(0X710005A9C0);
	set_cmt	(0X710005A9C1,	"jump table for switch statement",	0);
	create_byte	(0X710005A9C1);
	set_name	(0X710005A9C1,	"jpt_710002D640");
	create_byte	(0X710005A9C2);
	create_byte	(0X710005A9C3);
	create_byte	(0X710005A9C4);
	create_byte	(0X710005A9C5);
	create_byte	(0X710005A9C6);
	create_byte	(0X710005A9C7);
	create_byte	(0X710005A9C8);
	set_cmt	(0X710005A9C9,	"jump table for switch statement",	0);
	create_byte	(0X710005A9C9);
	set_name	(0X710005A9C9,	"jpt_710002D834");
	create_byte	(0X710005A9CA);
	create_byte	(0X710005A9CB);
	create_byte	(0X710005A9CC);
	set_cmt	(0X710005A9CD,	"jump table for switch statement",	0);
	create_byte	(0X710005A9CD);
	set_name	(0X710005A9CD,	"jpt_710002DA78");
	create_byte	(0X710005A9CE);
	create_byte	(0X710005A9CF);
	create_byte	(0X710005A9D0);
	create_byte	(0X710005A9D1);
	create_byte	(0X710005A9D2);
	create_byte	(0X710005A9D3);
	create_byte	(0X710005A9D4);
	create_byte	(0X710005A9D5);
	create_byte	(0X710005A9D6);
	create_byte	(0X710005A9D7);
	set_cmt	(0X710005AA08,	"jump table for switch statement",	0);
	create_byte	(0X710005AA08);
	set_name	(0X710005AA08,	"jpt_710002EFC0");
	create_byte	(0X710005AA09);
	create_byte	(0X710005AA0A);
	create_byte	(0X710005AA0B);
	create_byte	(0X710005AA0C);
	create_byte	(0X710005AA0D);
	create_byte	(0X710005AA0E);
	create_byte	(0X710005AA0F);
	create_byte	(0X710005AA10);
	create_byte	(0X710005AA11);
	create_byte	(0X710005AA12);
	create_byte	(0X710005AA13);
	create_byte	(0X710005AA14);
	create_byte	(0X710005AA15);
	create_byte	(0X710005AA16);
	create_byte	(0X710005AA17);
	create_byte	(0X710005AA18);
	create_byte	(0X710005AA19);
	create_byte	(0X710005AA1A);
	create_byte	(0X710005AA1B);
	set_cmt	(0X710005AA44,	"type descriptor name",	1);
	create_strlit	(0X710005AA44,	0X3B);
	set_name	(0X710005AA44,	"_ZTSN2nn5srepo6detail7service4core25OneUserStateChangeManagerE");
	set_cmt	(0X710005AA7F,	"type descriptor name",	1);
	create_strlit	(0X710005AA7F,	0X57);
	set_name	(0X710005AA7F,	"_ZTSN2nn5srepo6detail7service4core28MultiStateChangePointManagerINS3_16UserDurationKindEEE");
	set_cmt	(0X710005AAD6,	"type descriptor name",	1);
	create_strlit	(0X710005AAD6,	0X3A);
	set_name	(0X710005AAD6,	"_ZTSN2nn5srepo6detail7service4core24SystemStateChangeManagerE");
	set_cmt	(0X710005AB10,	"type descriptor name",	1);
	create_strlit	(0X710005AB10,	0X59);
	set_name	(0X710005AB10,	"_ZTSN2nn5srepo6detail7service4core28MultiStateChangePointManagerINS3_18SystemDurationKindEEE");
	make_array	(0X710005AB69,	0X7);
	set_cmt	(0X710005AB88,	"type descriptor name",	1);
	create_strlit	(0X710005AB88,	0X3C);
	set_name	(0X710005AB88,	"_ZTSN2nn7timesrv6detail7service29LocalSystemClockContextWriterE");
	set_cmt	(0X710005ABC4,	"type descriptor name",	1);
	create_strlit	(0X710005ABC4,	0X3C);
	set_name	(0X710005ABC4,	"_ZTSN2nn7timesrv6detail4core32SystemClockContextUpdateCallbackE");
	set_cmt	(0X710005AC00,	"type descriptor name",	1);
	create_strlit	(0X710005AC00,	0X3E);
	set_name	(0X710005AC00,	"_ZTSN2nn7timesrv6detail7service31NetworkSystemClockContextWriterE");
	set_cmt	(0X710005AC3E,	"type descriptor name",	1);
	create_strlit	(0X710005AC3E,	0X47);
	set_name	(0X710005AC3E,	"_ZTSN2nn7timesrv6detail7service40EphemeralNetworkSystemClockContextWriterE");
	set_cmt	(0X710005AC85,	"type descriptor name",	1);
	create_strlit	(0X710005AC85,	0X3B);
	set_name	(0X710005AC85,	"_ZTSN2nn7timesrv6detail4core31EphemeralNetworkSystemClockCoreE");
	set_cmt	(0X710005ACC0,	"type descriptor name",	1);
	create_strlit	(0X710005ACC0,	0X2B);
	set_name	(0X710005ACC0,	"_ZTSN2nn7timesrv6detail4core15SystemClockCoreE");
	set_cmt	(0X710005ACEB,	"type descriptor name",	1);
	create_strlit	(0X710005ACEB,	0X2B);
	set_name	(0X710005ACEB,	"_ZTSN2nn7timesrv6detail4core15SteadyClockCoreE");
	set_cmt	(0X710005AD16,	"type descriptor name",	1);
	create_strlit	(0X710005AD16,	0X33);
	set_name	(0X710005AD16,	"_ZTSN2nn7timesrv6detail4core23StandardSteadyClockCoreE");
	set_cmt	(0X710005AD49,	"type descriptor name",	1);
	create_strlit	(0X710005AD49,	0X34);
	set_name	(0X710005AD49,	"_ZTSN2nn7timesrv6detail4core24TickBasedSteadyClockCoreE");
	set_cmt	(0X710005AD7D,	"type descriptor name",	1);
	create_strlit	(0X710005AD7D,	0X38);
	set_name	(0X710005AD7D,	"_ZTSN2nn7timesrv6detail4core28StandardLocalSystemClockCoreE");
	set_cmt	(0X710005ADB5,	"type descriptor name",	1);
	create_strlit	(0X710005ADB5,	0X3A);
	set_name	(0X710005ADB5,	"_ZTSN2nn7timesrv6detail4core30StandardNetworkSystemClockCoreE");
	set_cmt	(0X710005ADEF,	"type descriptor name",	1);
	create_strlit	(0X710005ADEF,	0X37);
	set_name	(0X710005ADEF,	"_ZTSN2nn7timesrv6detail4core27StandardUserSystemClockCoreE");
	set_cmt	(0X710005AE26,	"jump table for switch statement",	0);
	create_word	(0X710005AE26);
	set_name	(0X710005AE26,	"jpt_7100035090");
	create_word	(0X710005AE28);
	create_word	(0X710005AE2A);
	create_word	(0X710005AE2C);
	create_word	(0X710005AE2E);
	create_word	(0X710005AE30);
	create_word	(0X710005AE32);
	create_word	(0X710005AE34);
	create_word	(0X710005AE36);
	create_word	(0X710005AE38);
	create_word	(0X710005AE3A);
	create_word	(0X710005AE3C);
	create_word	(0X710005AE3E);
	create_word	(0X710005AE40);
	create_word	(0X710005AE42);
	create_word	(0X710005AE44);
	create_word	(0X710005AE46);
	create_word	(0X710005AE48);
	create_word	(0X710005AE4A);
	create_word	(0X710005AE4C);
	create_word	(0X710005AE4E);
	create_word	(0X710005AE50);
	create_word	(0X710005AE52);
	create_word	(0X710005AE54);
	create_word	(0X710005AE56);
	create_word	(0X710005AE58);
	create_word	(0X710005AE5A);
	create_word	(0X710005AE5C);
	create_word	(0X710005AE5E);
	create_word	(0X710005AE60);
	create_word	(0X710005AE62);
	create_word	(0X710005AE64);
	create_word	(0X710005AE66);
	create_word	(0X710005AE68);
	create_word	(0X710005AE6A);
	create_word	(0X710005AE6C);
	create_word	(0X710005AE6E);
	create_word	(0X710005AE70);
	create_word	(0X710005AE72);
	create_word	(0X710005AE74);
	create_word	(0X710005AE76);
	create_word	(0X710005AE78);
	create_word	(0X710005AE7A);
	create_word	(0X710005AE7C);
	create_word	(0X710005AE7E);
	create_word	(0X710005AE80);
	create_word	(0X710005AE82);
	create_word	(0X710005AE84);
	create_word	(0X710005AE86);
	create_word	(0X710005AE88);
	create_word	(0X710005AE8A);
	create_word	(0X710005AE8C);
	create_word	(0X710005AE8E);
	create_word	(0X710005AE90);
	create_word	(0X710005AE92);
	create_word	(0X710005AE94);
	create_word	(0X710005AE96);
	create_word	(0X710005AE98);
	create_word	(0X710005AE9A);
	create_word	(0X710005AE9C);
	create_word	(0X710005AE9E);
	create_word	(0X710005AEA0);
	create_word	(0X710005AEA2);
	create_word	(0X710005AEA4);
	create_word	(0X710005AEA6);
	create_word	(0X710005AEA8);
	create_word	(0X710005AEAA);
	create_word	(0X710005AEAC);
	create_word	(0X710005AEAE);
	create_word	(0X710005AEB0);
	create_word	(0X710005AEB2);
	create_word	(0X710005AEB4);
	create_word	(0X710005AEB6);
	create_word	(0X710005AEB8);
	create_word	(0X710005AEBA);
	create_word	(0X710005AEBC);
	create_word	(0X710005AEBE);
	create_word	(0X710005AEC0);
	create_word	(0X710005AEC2);
	create_word	(0X710005AEC4);
	create_word	(0X710005AEC6);
	create_word	(0X710005AEC8);
	create_word	(0X710005AECA);
	create_word	(0X710005AECC);
	create_word	(0X710005AECE);
	create_word	(0X710005AED0);
	create_word	(0X710005AED2);
	create_word	(0X710005AED4);
	create_word	(0X710005AED6);
	create_word	(0X710005AED8);
	create_word	(0X710005AEDA);
	create_word	(0X710005AEDC);
	create_word	(0X710005AEDE);
	create_word	(0X710005AEE0);
	create_word	(0X710005AEE2);
	create_word	(0X710005AEE4);
	create_word	(0X710005AEE6);
	create_word	(0X710005AEE8);
	create_word	(0X710005AEEA);
	create_word	(0X710005AEEC);
	create_word	(0X710005AEEE);
	set_cmt	(0X710005AEF0,	"jump table for switch statement",	0);
	create_word	(0X710005AEF0);
	set_name	(0X710005AEF0,	"jpt_7100036F10");
	create_word	(0X710005AEF2);
	create_word	(0X710005AEF4);
	create_word	(0X710005AEF6);
	create_word	(0X710005AEF8);
	create_word	(0X710005AEFA);
	create_word	(0X710005AEFC);
	create_word	(0X710005AEFE);
	create_word	(0X710005AF00);
	create_word	(0X710005AF02);
	create_word	(0X710005AF04);
	create_word	(0X710005AF06);
	create_word	(0X710005AF08);
	create_word	(0X710005AF0A);
	create_word	(0X710005AF0C);
	create_word	(0X710005AF0E);
	create_word	(0X710005AF10);
	create_word	(0X710005AF12);
	create_word	(0X710005AF14);
	create_word	(0X710005AF16);
	create_word	(0X710005AF18);
	create_word	(0X710005AF1A);
	create_word	(0X710005AF1C);
	create_word	(0X710005AF1E);
	create_word	(0X710005AF20);
	create_word	(0X710005AF22);
	create_word	(0X710005AF24);
	create_word	(0X710005AF26);
	create_word	(0X710005AF28);
	create_word	(0X710005AF2A);
	create_word	(0X710005AF2C);
	create_word	(0X710005AF2E);
	create_word	(0X710005AF30);
	create_word	(0X710005AF32);
	create_word	(0X710005AF34);
	create_word	(0X710005AF36);
	create_word	(0X710005AF38);
	create_word	(0X710005AF3A);
	create_word	(0X710005AF3C);
	create_word	(0X710005AF3E);
	create_word	(0X710005AF40);
	create_word	(0X710005AF42);
	create_word	(0X710005AF44);
	create_word	(0X710005AF46);
	create_word	(0X710005AF48);
	create_word	(0X710005AF4A);
	create_word	(0X710005AF4C);
	create_word	(0X710005AF4E);
	create_word	(0X710005AF50);
	create_word	(0X710005AF52);
	create_word	(0X710005AF54);
	create_word	(0X710005AF56);
	create_word	(0X710005AF58);
	create_word	(0X710005AF5A);
	create_word	(0X710005AF5C);
	create_word	(0X710005AF5E);
	create_word	(0X710005AF60);
	create_word	(0X710005AF62);
	create_word	(0X710005AF64);
	create_word	(0X710005AF66);
	create_word	(0X710005AF68);
	create_word	(0X710005AF6A);
	create_word	(0X710005AF6C);
	create_word	(0X710005AF6E);
	create_word	(0X710005AF70);
	create_word	(0X710005AF72);
	create_word	(0X710005AF74);
	create_word	(0X710005AF76);
	create_word	(0X710005AF78);
	create_word	(0X710005AF7A);
	create_word	(0X710005AF7C);
	create_word	(0X710005AF7E);
	create_word	(0X710005AF80);
	create_word	(0X710005AF82);
	create_word	(0X710005AF84);
	create_word	(0X710005AF86);
	create_word	(0X710005AF88);
	create_word	(0X710005AF8A);
	create_word	(0X710005AF8C);
	create_word	(0X710005AF8E);
	create_word	(0X710005AF90);
	create_word	(0X710005AF92);
	create_word	(0X710005AF94);
	create_word	(0X710005AF96);
	create_word	(0X710005AF98);
	create_word	(0X710005AF9A);
	create_word	(0X710005AF9C);
	create_word	(0X710005AF9E);
	create_word	(0X710005AFA0);
	create_word	(0X710005AFA2);
	create_word	(0X710005AFA4);
	create_word	(0X710005AFA6);
	create_word	(0X710005AFA8);
	create_word	(0X710005AFAA);
	create_word	(0X710005AFAC);
	create_word	(0X710005AFAE);
	create_word	(0X710005AFB0);
	create_word	(0X710005AFB2);
	create_word	(0X710005AFB4);
	create_word	(0X710005AFB6);
	create_word	(0X710005AFB8);
	create_word	(0X710005AFBA);
	create_word	(0X710005AFBC);
	set_cmt	(0X710005AFBE,	"jump table for switch statement",	0);
	create_byte	(0X710005AFBE);
	set_name	(0X710005AFBE,	"jpt_7100039258");
	create_byte	(0X710005AFBF);
	create_byte	(0X710005AFC0);
	create_byte	(0X710005AFC1);
	create_byte	(0X710005AFC2);
	set_cmt	(0X710005AFC3,	"jump table for switch statement",	0);
	create_byte	(0X710005AFC3);
	set_name	(0X710005AFC3,	"jpt_710003A748");
	create_byte	(0X710005AFC4);
	create_byte	(0X710005AFC5);
	create_byte	(0X710005AFC6);
	create_byte	(0X710005AFC7);
	create_byte	(0X710005AFC8);
	create_byte	(0X710005AFC9);
	create_byte	(0X710005AFCA);
	create_byte	(0X710005AFCB);
	create_byte	(0X710005AFCC);
	create_byte	(0X710005AFCD);
	create_byte	(0X710005AFCE);
	create_byte	(0X710005AFCF);
	create_byte	(0X710005AFD0);
	create_byte	(0X710005AFD1);
	create_byte	(0X710005AFD2);
	create_byte	(0X710005AFD3);
	create_byte	(0X710005AFD4);
	create_byte	(0X710005AFD5);
	create_byte	(0X710005AFD6);
	create_byte	(0X710005AFD7);
	create_byte	(0X710005AFD8);
	create_byte	(0X710005AFD9);
	create_byte	(0X710005AFDA);
	create_byte	(0X710005AFDB);
	create_byte	(0X710005AFDC);
	create_byte	(0X710005AFDD);
	create_byte	(0X710005AFDE);
	create_byte	(0X710005AFDF);
	create_byte	(0X710005AFE0);
	create_byte	(0X710005AFE1);
	create_byte	(0X710005AFE2);
	create_byte	(0X710005AFE3);
	create_byte	(0X710005AFE4);
	create_byte	(0X710005AFE5);
	create_byte	(0X710005AFE6);
	create_byte	(0X710005AFE7);
	create_byte	(0X710005AFE8);
	create_byte	(0X710005AFE9);
	create_byte	(0X710005AFEA);
	create_byte	(0X710005AFEB);
	create_byte	(0X710005AFEC);
	create_byte	(0X710005AFED);
	create_byte	(0X710005AFEE);
	create_byte	(0X710005AFEF);
	create_byte	(0X710005AFF0);
	create_byte	(0X710005AFF1);
	create_byte	(0X710005AFF2);
	create_byte	(0X710005AFF3);
	create_byte	(0X710005AFF4);
	create_byte	(0X710005AFF5);
	create_byte	(0X710005AFF6);
	create_byte	(0X710005AFF7);
	create_byte	(0X710005AFF8);
	create_byte	(0X710005AFF9);
	create_byte	(0X710005AFFA);
	create_byte	(0X710005AFFB);
	create_byte	(0X710005AFFC);
	create_byte	(0X710005AFFD);
	create_byte	(0X710005AFFE);
	create_byte	(0X710005AFFF);
	create_byte	(0X710005B000);
	create_byte	(0X710005B001);
	create_byte	(0X710005B002);
	create_byte	(0X710005B003);
	create_byte	(0X710005B004);
	create_byte	(0X710005B005);
	create_byte	(0X710005B006);
	create_byte	(0X710005B007);
	create_byte	(0X710005B008);
	create_byte	(0X710005B009);
	create_byte	(0X710005B00A);
	create_byte	(0X710005B00B);
	create_byte	(0X710005B00C);
	create_byte	(0X710005B00D);
	create_byte	(0X710005B00E);
	create_byte	(0X710005B00F);
	create_byte	(0X710005B010);
	create_byte	(0X710005B011);
	create_byte	(0X710005B012);
	create_byte	(0X710005B013);
	create_byte	(0X710005B014);
	create_byte	(0X710005B015);
	create_byte	(0X710005B016);
	create_byte	(0X710005B017);
	create_byte	(0X710005B018);
	create_byte	(0X710005B019);
	create_byte	(0X710005B01A);
	create_byte	(0X710005B01B);
	create_byte	(0X710005B01C);
	create_byte	(0X710005B01D);
	create_byte	(0X710005B01E);
	create_byte	(0X710005B01F);
	create_byte	(0X710005B020);
	create_byte	(0X710005B021);
	create_byte	(0X710005B022);
	create_byte	(0X710005B023);
	create_byte	(0X710005B024);
	create_byte	(0X710005B025);
	create_byte	(0X710005B026);
	create_byte	(0X710005B027);
	create_byte	(0X710005B028);
	set_cmt	(0X710005B029,	"jump table for switch statement",	0);
	create_byte	(0X710005B029);
	set_name	(0X710005B029,	"jpt_710003C54C");
	create_byte	(0X710005B02A);
	create_byte	(0X710005B02B);
	create_byte	(0X710005B02C);
	create_byte	(0X710005B02D);
	create_byte	(0X710005B02E);
	create_byte	(0X710005B02F);
	create_byte	(0X710005B030);
	create_byte	(0X710005B031);
	create_byte	(0X710005B032);
	create_byte	(0X710005B033);
	create_byte	(0X710005B034);
	MakeStruct	(0X710005B035,	"StaticServiceSetupInfo");
	set_name	(0X710005B035,	"gStaticServiceSetup_SU");
	MakeStruct	(0X710005B03B,	"StaticServiceSetupInfo");
	set_name	(0X710005B03B,	"gStaticServiceSetup_S");
	create_strlit	(0X710005B041,	0X7);
	set_name	(0X710005B041,	"aTimeM");
	create_strlit	(0X710005B048,	0X8);
	set_name	(0X710005B048,	"aTimeSu");
	create_strlit	(0X710005B050,	0X8);
	set_name	(0X710005B050,	"aTimeAl");
	create_strlit	(0X710005B058,	0X7);
	set_name	(0X710005B058,	"aTimeS");
	create_strlit	(0X710005B05F,	0X7);
	set_name	(0X710005B05F,	"aTimeP");
	set_cmt	(0X710005B066,	"type descriptor name",	1);
	create_strlit	(0X710005B066,	0X30);
	set_name	(0X710005B066,	"_ZTSN2nn7timesrv6detail7service17HipcServerManagerE");
	set_cmt	(0X710005B096,	"type descriptor name",	1);
	create_strlit	(0X710005B096,	0X78);
	set_name	(0X710005B096,	"_ZTSN2nn2sf31HipcSimpleAllInOneServerManagerILm32ELm5ENS_7timesrv6detail7service38HipcSimpleAllInOneServerManagerOptionsEEE");
	set_cmt	(0X710005B10E,	"type descriptor name",	1);
	create_strlit	(0X710005B10E,	0XC3);
	set_name	(0X710005B10E,	"_ZTSN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm32ELm5ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_7timesrv6detail7service38HipcSimpleAllInOneServerManagerOptionsEEEEE");
	set_cmt	(0X710005B1D1,	"type descriptor name",	1);
	create_strlit	(0X710005B1D1,	0X68);
	set_name	(0X710005B1D1,	"_ZTSN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service14IStaticServiceENS4_19StaticServiceServerEEE");
	set_cmt	(0X710005B239,	"type descriptor name",	1);
	create_strlit	(0X710005B239,	0X80);
	set_name	(0X710005B239,	"_ZTSN2nn2sf13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE4_tABINS6_5_tO2NINS4_19StaticServiceServerEE4typeES5_E4typeE");
	set_cmt	(0X710005B2B9,	"type descriptor name",	1);
	create_strlit	(0X710005B2B9,	0XB3);
	set_name	(0X710005B2B9,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE5_tO2NINS9_19StaticServiceServerEE4typeESA_E4typeE");
	set_cmt	(0X710005B36C,	"type descriptor name",	1);
	create_strlit	(0X710005B36C,	0X2D);
	set_name	(0X710005B36C,	"_ZTSN2nn7timesrv6detail7service14IStaticServiceE");
	set_cmt	(0X710005B399,	"type descriptor name",	1);
	create_strlit	(0X710005B399,	0X8D);
	set_name	(0X710005B399,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE5_tO2NINS6_19StaticServiceServerEE4typeEvEE");
	set_cmt	(0X710005B426,	"type descriptor name",	1);
	create_strlit	(0X710005B426,	0X66);
	set_name	(0X710005B426,	"_ZTSN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service13IAlarmServiceENS4_18AlarmServiceServerEEE");
	set_cmt	(0X710005B48C,	"type descriptor name",	1);
	create_strlit	(0X710005B48C,	0X7E);
	set_name	(0X710005B48C,	"_ZTSN2nn2sf13InterfaceInfoINS_7timesrv6detail7service13IAlarmServiceEE4_tABINS6_5_tO2NINS4_18AlarmServiceServerEE4typeES5_E4typeE");
	set_cmt	(0X710005B50A,	"type descriptor name",	1);
	create_strlit	(0X710005B50A,	0XB1);
	set_name	(0X710005B50A,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service13IAlarmServiceEE5_tO2NINS9_18AlarmServiceServerEE4typeESA_E4typeE");
	set_cmt	(0X710005B5BB,	"type descriptor name",	1);
	create_strlit	(0X710005B5BB,	0X2C);
	set_name	(0X710005B5BB,	"_ZTSN2nn7timesrv6detail7service13IAlarmServiceE");
	set_cmt	(0X710005B5E7,	"type descriptor name",	1);
	create_strlit	(0X710005B5E7,	0X8B);
	set_name	(0X710005B5E7,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service13IAlarmServiceEE5_tO2NINS6_18AlarmServiceServerEE4typeEvEE");
	set_cmt	(0X710005B672,	"type descriptor name",	1);
	create_strlit	(0X710005B672,	0X72);
	set_name	(0X710005B672,	"_ZTSN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service19ITimeServiceManagerENS4_24TimeServiceManagerServerEEE");
	set_cmt	(0X710005B6E4,	"type descriptor name",	1);
	create_strlit	(0X710005B6E4,	0X8A);
	set_name	(0X710005B6E4,	"_ZTSN2nn2sf13InterfaceInfoINS_7timesrv6detail7service19ITimeServiceManagerEE4_tABINS6_5_tO2NINS4_24TimeServiceManagerServerEE4typeES5_E4typeE");
	set_cmt	(0X710005B76E,	"type descriptor name",	1);
	create_strlit	(0X710005B76E,	0XBD);
	set_name	(0X710005B76E,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service19ITimeServiceManagerEE5_tO2NINS9_24TimeServiceManagerServerEE4typeESA_E4typeE");
	set_cmt	(0X710005B82B,	"type descriptor name",	1);
	create_strlit	(0X710005B82B,	0X32);
	set_name	(0X710005B82B,	"_ZTSN2nn7timesrv6detail7service19ITimeServiceManagerE");
	set_cmt	(0X710005B85D,	"type descriptor name",	1);
	create_strlit	(0X710005B85D,	0X97);
	set_name	(0X710005B85D,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service19ITimeServiceManagerEE5_tO2NINS6_24TimeServiceManagerServerEE4typeEvEE");
	set_cmt	(0X710005B8F4,	"type descriptor name",	1);
	create_strlit	(0X710005B8F4,	0X7E);
	set_name	(0X710005B8F4,	"_ZTSN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service25IPowerStateRequestHandlerENS4_30PowerStateRequestHandlerServerEEE");
	set_cmt	(0X710005B972,	"type descriptor name",	1);
	create_strlit	(0X710005B972,	0X96);
	set_name	(0X710005B972,	"_ZTSN2nn2sf13InterfaceInfoINS_7timesrv6detail7service25IPowerStateRequestHandlerEE4_tABINS6_5_tO2NINS4_30PowerStateRequestHandlerServerEE4typeES5_E4typeE");
	set_cmt	(0X710005BA08,	"type descriptor name",	1);
	create_strlit	(0X710005BA08,	0XC9);
	set_name	(0X710005BA08,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service25IPowerStateRequestHandlerEE5_tO2NINS9_30PowerStateRequestHandlerServerEE4typeESA_E4typeE");
	set_cmt	(0X710005BAD1,	"type descriptor name",	1);
	create_strlit	(0X710005BAD1,	0X38);
	set_name	(0X710005BAD1,	"_ZTSN2nn7timesrv6detail7service25IPowerStateRequestHandlerE");
	set_cmt	(0X710005BB09,	"type descriptor name",	1);
	create_strlit	(0X710005BB09,	0XA3);
	set_name	(0X710005BB09,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service25IPowerStateRequestHandlerEE5_tO2NINS6_30PowerStateRequestHandlerServerEE4typeEvEE");
	set_cmt	(0X710005BBAC,	"type descriptor name",	1);
	create_strlit	(0X710005BBAC,	0XF1);
	set_name	(0X710005BBAC,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE4_tABINS8_5_tO2NINS6_17SystemClockServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X710005BC9D,	"type descriptor name",	1);
	create_strlit	(0X710005BC9D,	0X7C);
	set_name	(0X710005BC9D,	"_ZTSN2nn2sf13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE4_tABINS6_5_tO2NINS4_17SystemClockServerEE4typeES5_E4typeE");
	set_cmt	(0X710005BD19,	"type descriptor name",	1);
	create_strlit	(0X710005BD19,	0XAF);
	set_name	(0X710005BD19,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE5_tO2NINS9_17SystemClockServerEE4typeESA_E4typeE");
	set_cmt	(0X710005BDC8,	"type descriptor name",	1);
	create_strlit	(0X710005BDC8,	0X2B);
	set_name	(0X710005BDC8,	"_ZTSN2nn7timesrv6detail7service12ISystemClockE");
	set_cmt	(0X710005BDF3,	"type descriptor name",	1);
	create_strlit	(0X710005BDF3,	0X89);
	set_name	(0X710005BDF3,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE5_tO2NINS6_17SystemClockServerEE4typeEvEE");
	set_cmt	(0X710005BE7C,	"type descriptor name",	1);
	create_strlit	(0X710005BE7C,	0XF1);
	set_name	(0X710005BE7C,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE4_tABINS8_5_tO2NINS6_17SteadyClockServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X710005BF6D,	"type descriptor name",	1);
	create_strlit	(0X710005BF6D,	0X7C);
	set_name	(0X710005BF6D,	"_ZTSN2nn2sf13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE4_tABINS6_5_tO2NINS4_17SteadyClockServerEE4typeES5_E4typeE");
	set_cmt	(0X710005BFE9,	"type descriptor name",	1);
	create_strlit	(0X710005BFE9,	0XAF);
	set_name	(0X710005BFE9,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE5_tO2NINS9_17SteadyClockServerEE4typeESA_E4typeE");
	set_cmt	(0X710005C098,	"type descriptor name",	1);
	create_strlit	(0X710005C098,	0X2B);
	set_name	(0X710005C098,	"_ZTSN2nn7timesrv6detail7service12ISteadyClockE");
	set_cmt	(0X710005C0C3,	"type descriptor name",	1);
	create_strlit	(0X710005C0C3,	0X89);
	set_name	(0X710005C0C3,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE5_tO2NINS6_17SteadyClockServerEE4typeEvEE");
	set_cmt	(0X710005C14C,	"type descriptor name",	1);
	create_strlit	(0X710005C14C,	0XF9);
	set_name	(0X710005C14C,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE4_tABINS8_5_tO2NINS6_21TimeZoneServiceServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X710005C245,	"type descriptor name",	1);
	create_strlit	(0X710005C245,	0X84);
	set_name	(0X710005C245,	"_ZTSN2nn2sf13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE4_tABINS6_5_tO2NINS4_21TimeZoneServiceServerEE4typeES5_E4typeE");
	set_cmt	(0X710005C2C9,	"type descriptor name",	1);
	create_strlit	(0X710005C2C9,	0XB7);
	set_name	(0X710005C2C9,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE5_tO2NINS9_21TimeZoneServiceServerEE4typeESA_E4typeE");
	set_cmt	(0X710005C380,	"type descriptor name",	1);
	create_strlit	(0X710005C380,	0X2F);
	set_name	(0X710005C380,	"_ZTSN2nn7timesrv6detail7service16ITimeZoneServiceE");
	set_cmt	(0X710005C3AF,	"type descriptor name",	1);
	create_strlit	(0X710005C3AF,	0X91);
	set_name	(0X710005C3AF,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE5_tO2NINS6_21TimeZoneServiceServerEE4typeEvEE");
	create_dword	(x=0X710005C440);
	make_array	(x,	0X2);
	op_dec		(x,	0);
	set_name	(0X710005C440,	"year_lengths");
	create_dword	(0X710005C448);
	set_name	(0X710005C448,	"mon_lengths");
	set_cmt	(0X710005C4A8,	"type descriptor name",	1);
	create_strlit	(0X710005C4A8,	0XFB);
	set_name	(0X710005C4A8,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE4_tABINS8_5_tO2NINS6_22SteadyClockAlarmServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X710005C5A3,	"type descriptor name",	1);
	create_strlit	(0X710005C5A3,	0X86);
	set_name	(0X710005C5A3,	"_ZTSN2nn2sf13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE4_tABINS6_5_tO2NINS4_22SteadyClockAlarmServerEE4typeES5_E4typeE");
	set_cmt	(0X710005C629,	"type descriptor name",	1);
	create_strlit	(0X710005C629,	0XB9);
	set_name	(0X710005C629,	"_ZTSN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE5_tO2NINS9_22SteadyClockAlarmServerEE4typeESA_E4typeE");
	set_cmt	(0X710005C6E2,	"type descriptor name",	1);
	create_strlit	(0X710005C6E2,	0X30);
	set_name	(0X710005C6E2,	"_ZTSN2nn7timesrv6detail7service17ISteadyClockAlarmE");
	set_cmt	(0X710005C712,	"type descriptor name",	1);
	create_strlit	(0X710005C712,	0X93);
	set_name	(0X710005C712,	"_ZTSN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE5_tO2NINS6_22SteadyClockAlarmServerEE4typeEvEE");
	MakeStruct	(0X710005C7A5,	"StaticServiceSetupInfo");
	set_name	(0X710005C7A5,	"gStaticServiceSetup_U");
	MakeStruct	(0X710005C7AB,	"StaticServiceSetupInfo");
	set_name	(0X710005C7AB,	"gStaticServiceSetup_A");
	MakeStruct	(0X710005C7B1,	"StaticServiceSetupInfo");
	set_name	(0X710005C7B1,	"gStaticServiceSetup_R");
	MakeStruct	(0X710005C7B7,	"StaticServiceSetupInfo");
	set_name	(0X710005C7B7,	"gStaticServiceSetup_SM");
	set_cmt	(0X710005C7BD,	"type descriptor name",	1);
	create_strlit	(0X710005C7BD,	0XF5);
	set_name	(0X710005C7BD,	"_ZTSN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE4_tABINS8_5_tO2NINS6_19StaticServiceServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	create_strlit	(0X710005C8B2,	0X6);
	set_name	(0X710005C8B2,	"aPscL_0");
	set_cmt	(0X710005C8B8,	"type descriptor name",	1);
	create_strlit	(0X710005C8B8,	0X21);
	set_name	(0X710005C8B8,	"_ZTSN10__cxxabiv116__shim_type_infoE");
	set_cmt	(0X710005C8D9,	"type descriptor name",	1);
	create_strlit	(0X710005C8D9,	0X22);
	set_name	(0X710005C8D9,	"_ZTSN10__cxxabiv117__class_type_infoE");
	set_cmt	(0X710005C8FB,	"type descriptor name",	1);
	create_strlit	(0X710005C8FB,	0X25);
	set_name	(0X710005C8FB,	"_ZTSN10__cxxabiv120__si_class_type_infoE");
	set_cmt	(0X710005C920,	"type descriptor name",	1);
	create_strlit	(0X710005C920,	0X26);
	set_name	(0X710005C920,	"_ZTSN10__cxxabiv121__vmi_class_type_infoE");
	set_cmt	(0X710005C946,	"type descriptor name",	1);
	create_strlit	(0X710005C946,	0XD);
	set_name	(0X710005C946,	"_ZTSSt9type_info");
	make_array	(0X710005C953,	0X5);
	create_oword	(0X710005C960);
	create_oword	(0X710005C970);
	create_oword	(0X710005C980);
	create_oword	(0X710005C990);
	create_oword	(0X710005C9A0);
	create_oword	(0X710005C9B0);
	create_oword	(0X710005C9C0);
	create_oword	(0X710005C9D0);
	create_oword	(0X710005C9E0);
	create_oword	(0X710005C9F0);
	create_oword	(0X710005CA00);
	create_oword	(0X710005CA10);
	create_strlit	(0X710005CA20,	0X11);
	set_name	(0X710005CA20,	"a0123456789abcd");
	create_oword	(0X710005CA40);
	set_cmt	(0X710005CA5C,	"jump table for switch statement",	0);
	create_byte	(0X710005CA5C);
	set_name	(0X710005CA5C,	"jpt_71000464B0");
	create_byte	(0X710005CA5D);
	create_byte	(0X710005CA5E);
	create_byte	(0X710005CA5F);
	create_byte	(0X710005CA60);
	create_byte	(0X710005CA61);
	create_byte	(0X710005CA62);
	create_byte	(0X710005CA63);
	create_byte	(0X710005CA64);
	create_byte	(0X710005CA65);
	create_byte	(0X710005CA66);
	create_byte	(0X710005CA67);
	create_byte	(0X710005CA68);
	create_byte	(0X710005CA69);
	create_byte	(0X710005CA6A);
	create_byte	(0X710005CA6B);
	create_byte	(0X710005CA6C);
	create_byte	(0X710005CA6D);
	create_byte	(0X710005CA6E);
	create_byte	(0X710005CA6F);
	create_byte	(0X710005CA70);
	create_byte	(0X710005CA71);
	create_byte	(0X710005CA72);
	create_byte	(0X710005CA73);
	create_byte	(0X710005CA74);
	create_byte	(0X710005CA75);
	create_byte	(0X710005CA76);
	create_byte	(0X710005CA77);
	create_byte	(0X710005CA78);
	create_byte	(0X710005CA79);
	create_byte	(0X710005CA7A);
	create_byte	(0X710005CA7B);
	create_byte	(0X710005CA7C);
	create_byte	(0X710005CA7D);
	create_byte	(0X710005CA7E);
	create_byte	(0X710005CA7F);
	create_byte	(0X710005CA80);
	create_byte	(0X710005CA81);
	create_byte	(0X710005CA82);
	create_byte	(0X710005CA83);
	create_byte	(0X710005CA84);
	create_byte	(0X710005CA85);
	create_byte	(0X710005CA86);
	create_byte	(0X710005CA87);
	create_byte	(0X710005CA88);
	create_byte	(0X710005CA89);
	create_byte	(0X710005CA8A);
	create_byte	(0X710005CA8B);
	create_byte	(0X710005CA8C);
	create_byte	(0X710005CA8D);
	create_byte	(0X710005CA8E);
	create_byte	(0X710005CA8F);
	create_byte	(0X710005CA90);
	create_byte	(0X710005CA91);
	create_byte	(0X710005CA92);
	create_byte	(0X710005CA93);
	set_cmt	(0X710005CA94,	"jump table for switch statement",	0);
	create_word	(0X710005CA94);
	set_name	(0X710005CA94,	"jpt_7100046554");
	create_word	(0X710005CA96);
	create_word	(0X710005CA98);
	create_word	(0X710005CA9A);
	create_word	(0X710005CA9C);
	create_word	(0X710005CA9E);
	create_word	(0X710005CAA0);
	create_word	(0X710005CAA2);
	set_cmt	(0X710005CAA4,	"jump table for switch statement",	0);
	create_byte	(0X710005CAA4);
	set_name	(0X710005CAA4,	"jpt_7100046E30");
	create_byte	(0X710005CAA5);
	create_byte	(0X710005CAA6);
	create_byte	(0X710005CAA7);
	create_byte	(0X710005CAA8);
	create_byte	(0X710005CAA9);
	create_byte	(0X710005CAAA);
	create_byte	(0X710005CAAB);
	create_byte	(0X710005CAAC);
	create_byte	(0X710005CAAD);
	create_byte	(0X710005CAAE);
	create_byte	(0X710005CAAF);
	create_byte	(0X710005CAB0);
	create_byte	(0X710005CAB1);
	create_byte	(0X710005CAB2);
	create_byte	(0X710005CAB3);
	create_byte	(0X710005CAB4);
	create_byte	(0X710005CAB5);
	create_byte	(0X710005CC86);
	make_array	(0X710005CC86,	0X4);
	create_strlit	(0X710005CC8A,	0X15);
	set_name	(0X710005CC8A,	"aNoErrorInforma");
	create_strlit	(0X710005CC9F,	0X16);
	set_name	(0X710005CC9F,	"aIllegalByteSeq");
	create_strlit	(0X710005CCB5,	0XD);
	set_name	(0X710005CCB5,	"aDomainError");
	create_strlit	(0X710005CCC2,	0X19);
	set_name	(0X710005CCC2,	"aResultNotRepre");
	create_strlit	(0X710005CCDB,	0XA);
	set_name	(0X710005CCDB,	"aNotATty");
	create_strlit	(0X710005CCE5,	0X12);
	set_name	(0X710005CCE5,	"aPermissionDeni");
	create_strlit	(0X710005CCF7,	0X18);
	set_name	(0X710005CCF7,	"aOperationNotPe");
	create_strlit	(0X710005CD0F,	0X1A);
	set_name	(0X710005CD0F,	"aNoSuchFileOrDi");
	create_strlit	(0X710005CD29,	0X10);
	set_name	(0X710005CD29,	"aNoSuchProcess");
	create_strlit	(0X710005CD39,	0XC);
	set_name	(0X710005CD39,	"aFileExists");
	create_strlit	(0X710005CD45,	0X1E);
	set_name	(0X710005CD45,	"aValueTooLargeF");
	create_strlit	(0X710005CD63,	0X18);
	set_name	(0X710005CD63,	"aNoSpaceLeftOnD");
	create_strlit	(0X710005CD7B,	0XE);
	set_name	(0X710005CD7B,	"aOutOfMemory");
	create_strlit	(0X710005CD89,	0XE);
	set_name	(0X710005CD89,	"aResourceBusy");
	create_strlit	(0X710005CD97,	0X18);
	set_name	(0X710005CD97,	"aInterruptedSys");
	create_strlit	(0X710005CDAF,	0X21);
	set_name	(0X710005CDAF,	"aResourceTempor");
	create_strlit	(0X710005CDD0,	0XD);
	set_name	(0X710005CDD0,	"aInvalidSeek");
	create_strlit	(0X710005CDDD,	0X12);
	set_name	(0X710005CDDD,	"aCrossDeviceLin");
	create_strlit	(0X710005CDEF,	0X16);
	set_name	(0X710005CDEF,	"aReadOnlyFileSy");
	create_strlit	(0X710005CE05,	0X14);
	set_name	(0X710005CE05,	"aDirectoryNotEm");
	create_strlit	(0X710005CE19,	0X19);
	set_name	(0X710005CE19,	"aConnectionRese");
	create_strlit	(0X710005CE32,	0X14);
	set_name	(0X710005CE32,	"aOperationTimed");
	create_strlit	(0X710005CE46,	0X13);
	set_name	(0X710005CE46,	"aConnectionRefu");
	create_strlit	(0X710005CE59,	0XD);
	set_name	(0X710005CE59,	"aHostIsDown");
	create_strlit	(0X710005CE66,	0X14);
	set_name	(0X710005CE66,	"aHostIsUnreacha");
	create_strlit	(0X710005CE7A,	0XF);
	set_name	(0X710005CE7A,	"aAddressInUse");
	create_strlit	(0X710005CE89,	0XC);
	set_name	(0X710005CE89,	"aBrokenPipe");
	create_strlit	(0X710005CE95,	0XA);
	set_name	(0X710005CE95,	"aIOError");
	create_strlit	(0X710005CE9F,	0X1A);
	set_name	(0X710005CE9F,	"aNoSuchDeviceOr");
	create_strlit	(0X710005CEB9,	0X16);
	set_name	(0X710005CEB9,	"aBlockDeviceReq");
	create_strlit	(0X710005CECF,	0XF);
	set_name	(0X710005CECF,	"aNoSuchDevice");
	create_strlit	(0X710005CEDE,	0X10);
	set_name	(0X710005CEDE,	"aNotADirectory");
	create_strlit	(0X710005CEEE,	0XF);
	set_name	(0X710005CEEE,	"aIsADirectory");
	create_strlit	(0X710005CEFD,	0XF);
	set_name	(0X710005CEFD,	"aTextFileBusy");
	create_strlit	(0X710005CF0C,	0X12);
	set_name	(0X710005CF0C,	"aExecFormatErro");
	create_strlit	(0X710005CF1E,	0X11);
	set_name	(0X710005CF1E,	"aInvalidArgumen");
	create_strlit	(0X710005CF2F,	0X17);
	set_name	(0X710005CF2F,	"aArgumentListTo");
	create_strlit	(0X710005CF46,	0X13);
	set_name	(0X710005CF46,	"aSymbolicLinkLo");
	create_strlit	(0X710005CF59,	0X12);
	set_name	(0X710005CF59,	"aFilenameTooLon");
	create_strlit	(0X710005CF6B,	0X1E);
	set_name	(0X710005CF6B,	"aTooManyOpenFil");
	create_strlit	(0X710005CF89,	0X1E);
	set_name	(0X710005CF89,	"aNoFileDescript");
	create_strlit	(0X710005CFA7,	0X14);
	set_name	(0X710005CFA7,	"aBadFileDescrip");
	create_strlit	(0X710005CFBB,	0X11);
	set_name	(0X710005CFBB,	"aNoChildProcess");
	create_strlit	(0X710005CFCC,	0XC);
	set_name	(0X710005CFCC,	"aBadAddress");
	create_strlit	(0X710005CFD8,	0XF);
	set_name	(0X710005CFD8,	"aFileTooLarge");
	create_strlit	(0X710005CFE7,	0XF);
	set_name	(0X710005CFE7,	"aTooManyLinks");
	create_strlit	(0X710005CFF6,	0X13);
	set_name	(0X710005CFF6,	"aNoLocksAvailab");
	create_strlit	(0X710005D009,	0X1E);
	set_name	(0X710005D009,	"aResourceDeadlo");
	create_strlit	(0X710005D027,	0X16);
	set_name	(0X710005D027,	"aStateNotRecove");
	create_strlit	(0X710005D03D,	0X14);
	set_name	(0X710005D03D,	"aPreviousOwnerD");
	create_strlit	(0X710005D051,	0X13);
	set_name	(0X710005D051,	"aOperationCance");
	create_strlit	(0X710005D064,	0X19);
	set_name	(0X710005D064,	"aFunctionNotImp");
	create_strlit	(0X710005D07D,	0X1B);
	set_name	(0X710005D07D,	"aNoMessageOfDes");
	create_strlit	(0X710005D098,	0X13);
	set_name	(0X710005D098,	"aIdentifierRemo");
	create_strlit	(0X710005D0AB,	0X14);
	set_name	(0X710005D0AB,	"aDeviceNotAStre");
	create_strlit	(0X710005D0BF,	0X12);
	set_name	(0X710005D0BF,	"aNoDataAvailabl");
	create_strlit	(0X710005D0D1,	0XF);
	set_name	(0X710005D0D1,	"aDeviceTimeout");
	create_strlit	(0X710005D0E0,	0X19);
	set_name	(0X710005D0E0,	"aOutOfStreamsRe");
	create_strlit	(0X710005D0F9,	0X16);
	set_name	(0X710005D0F9,	"aLinkHasBeenSev");
	create_strlit	(0X710005D10F,	0XF);
	set_name	(0X710005D10F,	"aProtocolError");
	create_strlit	(0X710005D11E,	0XC);
	set_name	(0X710005D11E,	"aBadMessage");
	create_strlit	(0X710005D12A,	0X1D);
	set_name	(0X710005D12A,	"aFileDescriptor");
	create_strlit	(0X710005D147,	0XD);
	set_name	(0X710005D147,	"aNotASocket");
	create_strlit	(0X710005D154,	0X1D);
	set_name	(0X710005D154,	"aDestinationAdd");
	create_strlit	(0X710005D171,	0X12);
	set_name	(0X710005D171,	"aMessageTooLarg");
	create_strlit	(0X710005D183,	0X1F);
	set_name	(0X710005D183,	"aProtocolWrongT");
	create_strlit	(0X710005D1A2,	0X17);
	set_name	(0X710005D1A2,	"aProtocolNotAva");
	create_strlit	(0X710005D1B9,	0X17);
	set_name	(0X710005D1B9,	"aProtocolNotSup");
	create_strlit	(0X710005D1D0,	0X1A);
	set_name	(0X710005D1D0,	"aSocketTypeNotS");
	create_strlit	(0X710005D1EA,	0XE);
	set_name	(0X710005D1EA,	"aNotSupported");
	create_strlit	(0X710005D1F8,	0X1E);
	set_name	(0X710005D1F8,	"aProtocolFamily");
	create_strlit	(0X710005D216,	0X29);
	set_name	(0X710005D216,	"aAddressFamilyN");
	create_strlit	(0X710005D23F,	0X16);
	set_name	(0X710005D23F,	"aAddressNotAvai");
	create_strlit	(0X710005D255,	0X10);
	set_name	(0X710005D255,	"aNetworkIsDown");
	create_strlit	(0X710005D265,	0X14);
	set_name	(0X710005D265,	"aNetworkUnreach");
	create_strlit	(0X710005D279,	0X1C);
	set_name	(0X710005D279,	"aConnectionRese_0");
	create_strlit	(0X710005D295,	0X13);
	set_name	(0X710005D295,	"aConnectionAbor");
	create_strlit	(0X710005D2A8,	0X1A);
	set_name	(0X710005D2A8,	"aNoBufferSpaceA");
	create_strlit	(0X710005D2C2,	0X14);
	set_name	(0X710005D2C2,	"aSocketIsConnec");
	create_strlit	(0X710005D2D6,	0X15);
	set_name	(0X710005D2D6,	"aSocketNotConne");
	create_strlit	(0X710005D2EB,	0X22);
	set_name	(0X710005D2EB,	"aCannotSendAfte");
	create_strlit	(0X710005D30D,	0X1E);
	set_name	(0X710005D30D,	"aOperationAlrea");
	create_strlit	(0X710005D32B,	0X16);
	set_name	(0X710005D32B,	"aOperationInPro");
	create_strlit	(0X710005D341,	0X12);
	set_name	(0X710005D341,	"aStaleFileHandl");
	create_strlit	(0X710005D353,	0X11);
	set_name	(0X710005D353,	"aRemoteIOError");
	create_strlit	(0X710005D364,	0XF);
	set_name	(0X710005D364,	"aQuotaExceeded");
	create_strlit	(0X710005D373,	0X10);
	set_name	(0X710005D373,	"aNoMediumFound");
	create_strlit	(0X710005D383,	0X12);
	set_name	(0X710005D383,	"aWrongMediumTyp");
	create_strlit	(0X710005D395,	0X13);
	set_name	(0X710005D395,	"aMultihopAttemp");
	create_strlit	(0X710005D3A8,	0X1B);
	set_name	(0X710005D3A8,	"aRequiredKeyNot");
	create_strlit	(0X710005D3C3,	0X10);
	set_name	(0X710005D3C3,	"aKeyHasExpired");
	create_strlit	(0X710005D3D3,	0X15);
	set_name	(0X710005D3D3,	"aKeyHasBeenRevo");
	create_strlit	(0X710005D3E8,	0X1C);
	set_name	(0X710005D3E8,	"aKeyWasRejected");
	make_array	(0X7100060CFC,	0X4);
	make_array	(0X710006EBF0,	0X410);
	create_qword	(x=0X710006F000);
	op_hex		(x,	0);
	create_qword	(x=0X710006F008);
	op_hex		(x,	0);
	create_qword	(x=0X710006F010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F010,	"nn::err::detail::ExpHeapBase__vftable");
	create_qword	(x=0X710006F018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X710006F038,	0X8);
	create_qword	(x=0X710006F040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X710006F048);
	make_array	(0X710006F049,	0X7);
	set_cmt	(0X710006F050,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F050,	E_PREV + 0,	"; public \x01\b\x01(000000710006F050nn::os::detail::MultiWaitHolderBase\x02\b");
	create_qword	(x=0X710006F050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F050,	"_ZTIN2nn2os6detail19MultiWaitHolderBaseE");
	set_cmt	(0X710006F058,	"reference to type's name",	0);
	create_qword	(x=0X710006F058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F060,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F060,	E_PREV + 0,	"; public \x01\b\x01(000000710006F060nn::os::detail::MultiWaitHolderOfUserWaitObject\x02\b :");
	update_extra_cmt		(0X710006F060,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F050nn::os::detail::MultiWaitHolderBase\x02\b");
	create_qword	(x=0X710006F060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F060,	"_ZTIN2nn2os6detail31MultiWaitHolderOfUserWaitObjectE");
	set_cmt	(0X710006F068,	"reference to type's name",	0);
	create_qword	(x=0X710006F068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F070,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F078,	"offset to this",	0);
	create_qword	(x=0X710006F078);
	op_dec		(x,	0);
	set_name	(0X710006F078,	"_ZTVN2nn2os6detail25AddressSpaceAllocatorBaseImmEE");
	create_qword	(x=0X710006F080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F090,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F090,	E_PREV + 0,	"; public \x01\b\x01(000000710006F090nn::os::detail::AddressSpaceAllocatorBase<unsigned long,unsigned long>\x02\b");
	create_qword	(x=0X710006F090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F090,	"_ZTIN2nn2os6detail25AddressSpaceAllocatorBaseImmEE");
	set_cmt	(0X710006F098,	"reference to type's name",	0);
	create_qword	(x=0X710006F098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F0A0,	"offset to this",	0);
	create_qword	(x=0X710006F0A0);
	op_dec		(x,	0);
	set_name	(0X710006F0A0,	"_ZTVN2nn2os6detail21AddressSpaceAllocatorE");
	create_qword	(x=0X710006F0A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F0B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F0B8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F0B8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F0B8nn::os::detail::AddressSpaceAllocator\x02\b :");
	update_extra_cmt		(0X710006F0B8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F090nn::os::detail::AddressSpaceAllocatorBase<unsigned long,unsigned long>\x02\b");
	create_qword	(x=0X710006F0B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F0B8,	"_ZTIN2nn2os6detail21AddressSpaceAllocatorE");
	set_cmt	(0X710006F0C0,	"reference to type's name",	0);
	create_qword	(x=0X710006F0C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F0C8,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F0C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F0D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X710006F0D8,	0X8);
	create_dword	(0X710006F0E0);
	make_array	(0X710006F0E4,	0X4);
	create_qword	(x=0X710006F0E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F0F0,	"offset to this",	0);
	create_qword	(x=0X710006F0F0);
	op_dec		(x,	0);
	set_name	(0X710006F0F0,	"_ZTVN2nn2os6detail22MultiWaitHolderOfEventE");
	create_qword	(x=0X710006F0F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F100,	"_ZTVN2nn2os6detail22MultiWaitHolderOfEventEPtr2");
	create_qword	(x=0X710006F108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F110);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F128,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F128,	E_PREV + 0,	"; public \x01\b\x01(000000710006F128nn::os::detail::MultiWaitHolderOfEvent\x02\b :");
	update_extra_cmt		(0X710006F128,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F060nn::os::detail::MultiWaitHolderOfUserWaitObject\x02\b :");
	update_extra_cmt		(0X710006F128,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F050nn::os::detail::MultiWaitHolderBase\x02\b");
	create_qword	(x=0X710006F128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F128,	"_ZTIN2nn2os6detail22MultiWaitHolderOfEventE");
	set_cmt	(0X710006F130,	"reference to type's name",	0);
	create_qword	(x=0X710006F130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F138,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F138);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F140,	"offset to this",	0);
	create_qword	(x=0X710006F140);
	op_dec		(x,	0);
	set_name	(0X710006F140,	"_ZTVN2nn2os6detail34MultiWaitHolderOfInterProcessEventE");
	create_qword	(x=0X710006F148);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F150,	"_ZTVN2nn2os6detail34MultiWaitHolderOfInterProcessEventEPtr2");
	create_qword	(x=0X710006F158);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F160);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F178,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F178,	E_PREV + 0,	"; public \x01\b\x01(000000710006F178nn::os::detail::MultiWaitHolderOfNativeWaitObject\x02\b :");
	update_extra_cmt		(0X710006F178,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F050nn::os::detail::MultiWaitHolderBase\x02\b");
	create_qword	(x=0X710006F178);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F178,	"_ZTIN2nn2os6detail33MultiWaitHolderOfNativeWaitObjectE");
	set_cmt	(0X710006F180,	"reference to type's name",	0);
	create_qword	(x=0X710006F180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F188,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F188);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F190,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F190,	E_PREV + 0,	"; public \x01\b\x01(000000710006F190nn::os::detail::MultiWaitHolderOfInterProcessEvent\x02\b :");
	update_extra_cmt		(0X710006F190,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F178nn::os::detail::MultiWaitHolderOfNativeWaitObject\x02\b :");
	update_extra_cmt		(0X710006F190,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F050nn::os::detail::MultiWaitHolderBase\x02\b");
	create_qword	(x=0X710006F190);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F190,	"_ZTIN2nn2os6detail34MultiWaitHolderOfInterProcessEventE");
	set_cmt	(0X710006F198,	"reference to type's name",	0);
	create_qword	(x=0X710006F198);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F1A0,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F1A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F1A8,	"offset to this",	0);
	create_qword	(x=0X710006F1A8);
	op_dec		(x,	0);
	set_name	(0X710006F1A8,	"_ZTVN2nn2os6detail29MultiWaitHolderOfNativeHandleE");
	create_qword	(x=0X710006F1B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F1B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F1C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F1C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F1D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F1D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F1E0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F1E0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F1E0nn::os::detail::MultiWaitHolderOfNativeHandle\x02\b :");
	update_extra_cmt		(0X710006F1E0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F178nn::os::detail::MultiWaitHolderOfNativeWaitObject\x02\b :");
	update_extra_cmt		(0X710006F1E0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F050nn::os::detail::MultiWaitHolderBase\x02\b");
	create_qword	(x=0X710006F1E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F1E0,	"_ZTIN2nn2os6detail29MultiWaitHolderOfNativeHandleE");
	set_cmt	(0X710006F1E8,	"reference to type's name",	0);
	create_qword	(x=0X710006F1E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F1F0,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F1F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F1F8,	"gRandomMutex");
	set_cmt	(0X710006F218,	"offset to this",	0);
	create_qword	(x=0X710006F218);
	op_dec		(x,	0);
	set_name	(0X710006F218,	"_ZTVN2nn4ovln7service5entry12_GLOBAL__N_119MyHipcServerManagerE");
	create_qword	(x=0X710006F220);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F228);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F230);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F238);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F240);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F248);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F250);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F270);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F278);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F280);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F288);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F290);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F298);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F2A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F2A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F2B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F2B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F2C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F2C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F2D0,	"offset to this",	0);
	create_qword	(x=0X710006F2D0);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X710006F2D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F2E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F2E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F2F0,	"offset to this",	0);
	create_qword	(x=0X710006F2F0);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X710006F2F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F300);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F308,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F308,	E_PREV + 0,	"; public \x01\b\x01(000000710006F308nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<20ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::ovln::service::entry::`anonymous namespace'::MyHipcServerManagerOption>>\x02\b :");
	update_extra_cmt		(0X710006F308,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X710006F308,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X710006F308,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X710006F308,	E_PREV + 4,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X710006F308,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X710006F308,	E_PREV + 6,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X710006F308,	E_PREV + 7,	";       protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b");
	create_qword	(x=0X710006F308);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F308,	"_ZTIN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm20ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_4ovln7service5entry12_GLOBAL__N_125MyHipcServerManagerOptionEEEEE");
	set_cmt	(0X710006F310,	"reference to type's name",	0);
	create_qword	(x=0X710006F310);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F318,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F318);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F320,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F320,	E_PREV + 0,	"; public \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X710006F320);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F320,	"_ZTIN2nn2sf34HipcServerSessionManagerCommonBaseE");
	set_cmt	(0X710006F328,	"reference to type's name",	0);
	create_qword	(x=0X710006F328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F330,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F330,	E_PREV + 0,	"; public \x01\b\x01(000000710006F330nn::sf::HipcSimpleAllInOneServerManager<20ul,2ul,nn::ovln::service::entry::`anonymous namespace'::MyHipcServerManagerOption>\x02\b :");
	update_extra_cmt		(0X710006F330,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(000000710006F308nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<20ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::ovln::service::entry::`anonymous namespace'::MyHipcServerManagerOption>>\x02\b :");
	update_extra_cmt		(0X710006F330,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X710006F330,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X710006F330,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X710006F330,	E_PREV + 5,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X710006F330,	E_PREV + 6,	";             public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X710006F330,	E_PREV + 7,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X710006F330,	E_PREV + 8,	";         protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b,");
	update_extra_cmt		(0X710006F330,	E_PREV + 9,	";   public /* offset 0x1d08 */ \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X710006F330);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F330,	"_ZTIN2nn2sf31HipcSimpleAllInOneServerManagerILm20ELm2ENS_4ovln7service5entry12_GLOBAL__N_125MyHipcServerManagerOptionEEE");
	set_cmt	(0X710006F338,	"reference to type's name",	0);
	create_qword	(x=0X710006F338);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F340,	"attribute",	0);
	create_dword	(x=0X710006F340);
	op_hex		(x,	0);
	set_cmt	(0X710006F344,	"count of base classes",	0);
	create_dword	(x=0X710006F344);
	op_dec		(x,	0);
	set_cmt	(0X710006F348,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F350,	"base class' attributes\noffset to this",	0);
	create_qword	(x=0X710006F350);
	op_dec		(x,	0);
	set_name	(0X710006F350,	"_ZTVN2nn2sf34HipcServerSessionManagerCommonBaseE_1");
	set_cmt	(0X710006F358,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F358);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F360,	"base class' attributes",	0);
	create_qword	(x=0X710006F360);
	op_hex		(x,	0);
	set_cmt	(0X710006F368,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F368,	E_PREV + 0,	"; public \x01\b\x01(000000710006F368nn::ovln::service::entry::`anonymous namespace'::MyHipcServerManager\x02\b :");
	update_extra_cmt		(0X710006F368,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F330nn::sf::HipcSimpleAllInOneServerManager<20ul,2ul,nn::ovln::service::entry::`anonymous namespace'::MyHipcServerManagerOption>\x02\b :");
	update_extra_cmt		(0X710006F368,	E_PREV + 2,	";     protected /* offset 0x0 */ \x01\b\x01(000000710006F308nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<20ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::ovln::service::entry::`anonymous namespace'::MyHipcServerManagerOption>>\x02\b :");
	update_extra_cmt		(0X710006F368,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X710006F368,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X710006F368,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X710006F368,	E_PREV + 6,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X710006F368,	E_PREV + 7,	";               public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X710006F368,	E_PREV + 8,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X710006F368,	E_PREV + 9,	";           protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b,");
	update_extra_cmt		(0X710006F368,	E_PREV + 10,	";     public /* offset 0x1d08 */ \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X710006F368);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F368,	"_ZTIN2nn4ovln7service5entry12_GLOBAL__N_119MyHipcServerManagerE");
	set_cmt	(0X710006F370,	"reference to type's name",	0);
	create_qword	(x=0X710006F370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F378,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F380,	"offset to this",	0);
	create_qword	(x=0X710006F380);
	op_dec		(x,	0);
	set_name	(0X710006F380,	"_ZTVN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm20ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_4ovln7service5entry12_GLOBAL__N_125MyHipcServerManagerOptionEEEEE");
	create_qword	(x=0X710006F388);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F398);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F3F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F400);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F408);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F410);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F418,	"offset to this",	0);
	create_qword	(x=0X710006F418);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X710006F420);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F428);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F430);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F438);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F440);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F450);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F458,	"offset to this",	0);
	create_qword	(x=0X710006F458);
	op_dec		(x,	0);
	set_name	(0X710006F458,	"_ZTVN2nn2sf31UnmanagedServiceObjectByPointerINS_4ovln16IReceiverServiceENS2_12_GLOBAL__N_121NotificationAgentImplEEE");
	create_qword	(x=0X710006F460);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F468);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F468,	"nn::ovln::ISenderService__vftable");
	create_qword	(x=0X710006F470);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F478);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F480);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F490,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F490,	E_PREV + 0,	"; public \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X710006F490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F490,	"_ZTIN2nn2sf13ISharedObjectE");
	set_cmt	(0X710006F498,	"reference to type's name",	0);
	create_qword	(x=0X710006F498);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F4A0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F4A0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F4A0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X710006F4A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F4A0,	"_ZTIN2nn2sf14IServiceObjectE");
	set_cmt	(0X710006F4A8,	"reference to type's name",	0);
	create_qword	(x=0X710006F4A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F4B0,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F4B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F4B8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F4B8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F4B8nn::ovln::IReceiverService\x02\b :");
	update_extra_cmt		(0X710006F4B8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F4B8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X710006F4B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F4B8,	"_ZTIN2nn4ovln16IReceiverServiceE");
	set_cmt	(0X710006F4C0,	"reference to type's name",	0);
	create_qword	(x=0X710006F4C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F4C8,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F4C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F4D0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F4D0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F4D0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,void>\x02\b");
	create_qword	(x=0X710006F4D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F4D0,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_4ovln16IReceiverServiceEE5_tO2NIPNS4_12_GLOBAL__N_121NotificationAgentImplEE4typeEvEE");
	set_cmt	(0X710006F4D8,	"reference to type's name",	0);
	create_qword	(x=0X710006F4D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F4E0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F4E0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F4E0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::IReceiverService>::type\x02\b :");
	update_extra_cmt		(0X710006F4E0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4B8nn::ovln::IReceiverService\x02\b :");
	update_extra_cmt		(0X710006F4E0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F4E0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F4E0,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(000000710006F4D0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,void>\x02\b");
	create_qword	(x=0X710006F4E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F4E0,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_4ovln16IReceiverServiceEE5_tO2NIPNS7_12_GLOBAL__N_121NotificationAgentImplEE4typeES8_E4typeE");
	set_cmt	(0X710006F4E8,	"reference to type's name",	0);
	create_qword	(x=0X710006F4E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F4F0,	"attribute",	0);
	create_dword	(x=0X710006F4F0);
	op_hex		(x,	0);
	set_cmt	(0X710006F4F4,	"count of base classes",	0);
	create_dword	(x=0X710006F4F4);
	op_dec		(x,	0);
	set_cmt	(0X710006F4F8,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F4F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F500,	"base class' attributes",	0);
	create_qword	(x=0X710006F500);
	op_hex		(x,	0);
	set_cmt	(0X710006F508,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F508);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F510,	"base class' attributes",	0);
	create_qword	(x=0X710006F510);
	op_hex		(x,	0);
	set_cmt	(0X710006F518,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F518,	E_PREV + 0,	"; public \x01\b\x01(000000710006F518nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::IReceiverService>::type\x02\b :");
	update_extra_cmt		(0X710006F518,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4E0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::IReceiverService>::type\x02\b :");
	update_extra_cmt		(0X710006F518,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4B8nn::ovln::IReceiverService\x02\b :");
	update_extra_cmt		(0X710006F518,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F518,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F518,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(000000710006F4D0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,void>\x02\b");
	create_qword	(x=0X710006F518);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F518,	"_ZTIN2nn2sf13InterfaceInfoINS_4ovln16IReceiverServiceEE4_tABINS4_5_tO2NIPNS2_12_GLOBAL__N_121NotificationAgentImplEE4typeES3_E4typeE");
	set_cmt	(0X710006F520,	"reference to type's name",	0);
	create_qword	(x=0X710006F520);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F528,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F528);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F530,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F530,	E_PREV + 0,	"; public \x01\b\x01(000000710006F530nn::sf::UnmanagedServiceObjectByPointer<nn::ovln::IReceiverService,nn::ovln::`anonymous namespace'::NotificationAgentImpl>\x02\b :");
	update_extra_cmt		(0X710006F530,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F518nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::IReceiverService>::type\x02\b :");
	update_extra_cmt		(0X710006F530,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4E0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::IReceiverService>::type\x02\b :");
	update_extra_cmt		(0X710006F530,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4B8nn::ovln::IReceiverService\x02\b :");
	update_extra_cmt		(0X710006F530,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F530,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F530,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(000000710006F4D0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::IReceiverService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,void>\x02\b");
	create_qword	(x=0X710006F530);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F530,	"_ZTIN2nn2sf31UnmanagedServiceObjectByPointerINS_4ovln16IReceiverServiceENS2_12_GLOBAL__N_121NotificationAgentImplEEE");
	set_cmt	(0X710006F538,	"reference to type's name",	0);
	create_qword	(x=0X710006F538);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F540,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F548,	"offset to this",	0);
	create_qword	(x=0X710006F548);
	op_dec		(x,	0);
	set_name	(0X710006F548,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_4ovln9IReceiverEE4_tABINS6_5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeES5_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	create_qword	(x=0X710006F550);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F558);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F560);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F578);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F590);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F598);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F5A0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F5A0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b");
	create_qword	(x=0X710006F5A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F5A0,	"_ZTIN2nn2sf4impl6detail22ServiceObjectImplBase2E");
	set_cmt	(0X710006F5A8,	"reference to type's name",	0);
	create_qword	(x=0X710006F5A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F5B0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F5B0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F5B0nn::ovln::IReceiver\x02\b :");
	update_extra_cmt		(0X710006F5B0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F5B0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X710006F5B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F5B0,	"_ZTIN2nn4ovln9IReceiverE");
	set_cmt	(0X710006F5B8,	"reference to type's name",	0);
	create_qword	(x=0X710006F5B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F5C0,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F5C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F5C8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F5C8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F5C8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,void>\x02\b");
	create_qword	(x=0X710006F5C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F5C8,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_4ovln9IReceiverEE5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeEvEE");
	set_cmt	(0X710006F5D0,	"reference to type's name",	0);
	create_qword	(x=0X710006F5D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F5D8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F5D8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F5D8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,nn::ovln::IReceiver>::type\x02\b :");
	update_extra_cmt		(0X710006F5D8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F5B0nn::ovln::IReceiver\x02\b :");
	update_extra_cmt		(0X710006F5D8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F5D8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F5D8,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(000000710006F5C8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,void>\x02\b");
	create_qword	(x=0X710006F5D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F5D8,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_4ovln9IReceiverEE5_tO2NINS7_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeES8_E4typeE");
	set_cmt	(0X710006F5E0,	"reference to type's name",	0);
	create_qword	(x=0X710006F5E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F5E8,	"attribute",	0);
	create_dword	(x=0X710006F5E8);
	op_hex		(x,	0);
	set_cmt	(0X710006F5EC,	"count of base classes",	0);
	create_dword	(x=0X710006F5EC);
	op_dec		(x,	0);
	set_cmt	(0X710006F5F0,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F5F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F5F8,	"base class' attributes",	0);
	create_qword	(x=0X710006F5F8);
	op_hex		(x,	0);
	set_cmt	(0X710006F600,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F600);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F608,	"base class' attributes",	0);
	create_qword	(x=0X710006F608);
	op_hex		(x,	0);
	set_cmt	(0X710006F610,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F610,	E_PREV + 0,	"; public \x01\b\x01(000000710006F610nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,nn::ovln::IReceiver>::type\x02\b :");
	update_extra_cmt		(0X710006F610,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F5D8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,nn::ovln::IReceiver>::type\x02\b :");
	update_extra_cmt		(0X710006F610,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F5B0nn::ovln::IReceiver\x02\b :");
	update_extra_cmt		(0X710006F610,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F610,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F610,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(000000710006F5C8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,void>\x02\b");
	create_qword	(x=0X710006F610);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F610,	"_ZTIN2nn2sf13InterfaceInfoINS_4ovln9IReceiverEE4_tABINS4_5_tO2NINS2_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeES3_E4typeE");
	set_cmt	(0X710006F618,	"reference to type's name",	0);
	create_qword	(x=0X710006F618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F620,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F620);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F628,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F628,	E_PREV + 0,	"; public \x01\b\x01(000000710006F628nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,nn::ovln::IReceiver>::type,nn::sf::MemoryResourceAllocationPolicy>::Object\x02\b :");
	update_extra_cmt		(0X710006F628,	E_PREV + 1,	";   protected /* offset 0x70 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X710006F628,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F610nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,nn::ovln::IReceiver>::type\x02\b :");
	update_extra_cmt		(0X710006F628,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F5D8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,nn::ovln::IReceiver>::type\x02\b :");
	update_extra_cmt		(0X710006F628,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F5B0nn::ovln::IReceiver\x02\b :");
	update_extra_cmt		(0X710006F628,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F628,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F628,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(000000710006F5C8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::IReceiver>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::ReceiverObject>::type,void>\x02\b");
	create_qword	(x=0X710006F628);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F628,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_4ovln9IReceiverEE4_tABINS6_5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl14ReceiverObjectEE4typeES5_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	set_cmt	(0X710006F630,	"reference to type's name",	0);
	create_qword	(x=0X710006F630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F638,	"attribute",	0);
	create_dword	(x=0X710006F638);
	op_hex		(x,	0);
	set_cmt	(0X710006F63C,	"count of base classes",	0);
	create_dword	(x=0X710006F63C);
	op_dec		(x,	0);
	set_cmt	(0X710006F640,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F648,	"base class' attributes",	0);
	create_qword	(x=0X710006F648);
	op_hex		(x,	0);
	set_cmt	(0X710006F650,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F658,	"base class' attributes",	0);
	create_qword	(x=0X710006F658);
	op_hex		(x,	0);
	set_cmt	(0X710006F660,	"offset to this",	0);
	create_qword	(x=0X710006F660);
	op_dec		(x,	0);
	set_name	(0X710006F660,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS_4ovln12_GLOBAL__N_121NotificationAgentImpl13SourceManager12SourceHolderENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	create_qword	(x=0X710006F668);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F670);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F680,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F680,	E_PREV + 0,	"; public \x01\b\x01(000000710006F680nn::util::IntrusiveListNode\x02\b");
	create_qword	(x=0X710006F680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F680,	"_ZTIN2nn4util17IntrusiveListNodeE");
	set_cmt	(0X710006F688,	"reference to type's name",	0);
	create_qword	(x=0X710006F688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F690,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F690,	E_PREV + 0,	"; public \x01\b\x01(000000710006F690nn::util::IntrusiveListBaseNode<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder,nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder>\x02\b :");
	update_extra_cmt		(0X710006F690,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F680nn::util::IntrusiveListNode\x02\b");
	create_qword	(x=0X710006F690);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F690,	"_ZTIN2nn4util21IntrusiveListBaseNodeINS_4ovln12_GLOBAL__N_121NotificationAgentImpl13SourceManager12SourceHolderES6_EE");
	set_cmt	(0X710006F698,	"reference to type's name",	0);
	create_qword	(x=0X710006F698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F6A0,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F6A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F6A8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F6A8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F6A8nn::util::IntrusiveListBaseNode<nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source,nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source>\x02\b :");
	update_extra_cmt		(0X710006F6A8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F680nn::util::IntrusiveListNode\x02\b");
	create_qword	(x=0X710006F6A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F6A8,	"_ZTIN2nn4util21IntrusiveListBaseNodeINS_4ovln12_GLOBAL__N_121NotificationAgentImpl6SourceES5_EE");
	set_cmt	(0X710006F6B0,	"reference to type's name",	0);
	create_qword	(x=0X710006F6B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F6B8,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F6B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F6C0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F6C0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F6C0nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source\x02\b :");
	update_extra_cmt		(0X710006F6C0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F6C0,	E_PREV + 2,	";   public /* offset 0x8 */ \x01\b\x01(000000710006F6A8nn::util::IntrusiveListBaseNode<nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source,nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source>\x02\b :");
	update_extra_cmt		(0X710006F6C0,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F680nn::util::IntrusiveListNode\x02\b");
	create_qword	(x=0X710006F6C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F6C0,	"_ZTIN2nn4ovln12_GLOBAL__N_121NotificationAgentImpl6SourceE");
	set_cmt	(0X710006F6C8,	"reference to type's name",	0);
	create_qword	(x=0X710006F6C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F6D0,	"attribute",	0);
	create_dword	(x=0X710006F6D0);
	op_hex		(x,	0);
	set_cmt	(0X710006F6D4,	"count of base classes",	0);
	create_dword	(x=0X710006F6D4);
	op_dec		(x,	0);
	set_cmt	(0X710006F6D8,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F6D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F6E0,	"base class' attributes",	0);
	create_qword	(x=0X710006F6E0);
	op_hex		(x,	0);
	set_cmt	(0X710006F6E8,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F6E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F6F0,	"base class' attributes",	0);
	create_qword	(x=0X710006F6F0);
	op_hex		(x,	0);
	set_cmt	(0X710006F6F8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F6F8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F6F8nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder\x02\b :");
	update_extra_cmt		(0X710006F6F8,	E_PREV + 1,	";   public /* offset 0x38 */ \x01\b\x01(000000710006F690nn::util::IntrusiveListBaseNode<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder,nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder>\x02\b :");
	update_extra_cmt		(0X710006F6F8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F680nn::util::IntrusiveListNode\x02\b,");
	update_extra_cmt		(0X710006F6F8,	E_PREV + 3,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F6C0nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source\x02\b :");
	update_extra_cmt		(0X710006F6F8,	E_PREV + 4,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F6F8,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(000000710006F6A8nn::util::IntrusiveListBaseNode<nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source,nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source>\x02\b :");
	update_extra_cmt		(0X710006F6F8,	E_PREV + 6,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F680nn::util::IntrusiveListNode\x02\b");
	create_qword	(x=0X710006F6F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F6F8,	"_ZTIN2nn4ovln12_GLOBAL__N_121NotificationAgentImpl13SourceManager12SourceHolderE");
	set_cmt	(0X710006F700,	"reference to type's name",	0);
	create_qword	(x=0X710006F700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F708,	"attribute",	0);
	create_dword	(x=0X710006F708);
	op_hex		(x,	0);
	set_cmt	(0X710006F70C,	"count of base classes",	0);
	create_dword	(x=0X710006F70C);
	op_dec		(x,	0);
	set_cmt	(0X710006F710,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F718,	"base class' attributes",	0);
	create_qword	(x=0X710006F718);
	op_hex		(x,	0);
	set_cmt	(0X710006F720,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F728,	"base class' attributes",	0);
	create_qword	(x=0X710006F728);
	op_hex		(x,	0);
	set_cmt	(0X710006F730,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F730,	E_PREV + 0,	"; public \x01\b\x01(000000710006F730nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder,nn::sf::MemoryResourceAllocationPolicy>::Object\x02\b :");
	update_extra_cmt		(0X710006F730,	E_PREV + 1,	";   protected /* offset 0x60 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X710006F730,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F6F8nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder\x02\b :");
	update_extra_cmt		(0X710006F730,	E_PREV + 3,	";     public /* offset 0x38 */ \x01\b\x01(000000710006F690nn::util::IntrusiveListBaseNode<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder,nn::ovln::`anonymous namespace'::NotificationAgentImpl::SourceManager::SourceHolder>\x02\b :");
	update_extra_cmt		(0X710006F730,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F680nn::util::IntrusiveListNode\x02\b,");
	update_extra_cmt		(0X710006F730,	E_PREV + 5,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F6C0nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source\x02\b :");
	update_extra_cmt		(0X710006F730,	E_PREV + 6,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F730,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(000000710006F6A8nn::util::IntrusiveListBaseNode<nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source,nn::ovln::`anonymous namespace'::NotificationAgentImpl::Source>\x02\b :");
	update_extra_cmt		(0X710006F730,	E_PREV + 8,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F680nn::util::IntrusiveListNode\x02\b");
	create_qword	(x=0X710006F730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F730,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS_4ovln12_GLOBAL__N_121NotificationAgentImpl13SourceManager12SourceHolderENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	set_cmt	(0X710006F738,	"reference to type's name",	0);
	create_qword	(x=0X710006F738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F740,	"attribute",	0);
	create_dword	(x=0X710006F740);
	op_hex		(x,	0);
	set_cmt	(0X710006F744,	"count of base classes",	0);
	create_dword	(x=0X710006F744);
	op_dec		(x,	0);
	set_cmt	(0X710006F748,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_9(void) {
        auto x;
#define id x

	set_cmt	(0X710006F750,	"base class' attributes",	0);
	create_qword	(x=0X710006F750);
	op_hex		(x,	0);
	set_cmt	(0X710006F758,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F760,	"base class' attributes",	0);
	create_qword	(x=0X710006F760);
	op_hex		(x,	0);
	set_cmt	(0X710006F768,	"offset to this",	0);
	create_qword	(x=0X710006F768);
	op_dec		(x,	0);
	set_name	(0X710006F768,	"_ZTVN2nn4ovln12_GLOBAL__N_121NotificationAgentImpl13SourceManager12SourceHolderE");
	create_qword	(x=0X710006F770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F788,	"offset to this",	0);
	create_qword	(x=0X710006F788);
	op_dec		(x,	0);
	set_name	(0X710006F788,	"_ZTVN2nn4ovln12_GLOBAL__N_121NotificationAgentImpl6SourceE");
	create_qword	(x=0X710006F790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F798);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F7A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F7A8,	"offset to this",	0);
	create_qword	(x=0X710006F7A8);
	op_dec		(x,	0);
	set_name	(0X710006F7A8,	"_ZTVN2nn2sf31UnmanagedServiceObjectByPointerINS_4ovln14ISenderServiceENS2_12_GLOBAL__N_121NotificationAgentImplEEE");
	create_qword	(x=0X710006F7B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F7B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F7B8,	"nn::ovln::SenderService__vftable");
	create_qword	(x=0X710006F7C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F7C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F7D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F7D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F7E0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F7E0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F7E0nn::ovln::ISenderService\x02\b :");
	update_extra_cmt		(0X710006F7E0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F7E0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X710006F7E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F7E0,	"_ZTIN2nn4ovln14ISenderServiceE");
	set_cmt	(0X710006F7E8,	"reference to type's name",	0);
	create_qword	(x=0X710006F7E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F7F0,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F7F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F7F8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F7F8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F7F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,void>\x02\b");
	create_qword	(x=0X710006F7F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F7F8,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_4ovln14ISenderServiceEE5_tO2NIPNS4_12_GLOBAL__N_121NotificationAgentImplEE4typeEvEE");
	set_cmt	(0X710006F800,	"reference to type's name",	0);
	create_qword	(x=0X710006F800);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F808,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F808,	E_PREV + 0,	"; public \x01\b\x01(000000710006F808nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::ISenderService>::type\x02\b :");
	update_extra_cmt		(0X710006F808,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F7E0nn::ovln::ISenderService\x02\b :");
	update_extra_cmt		(0X710006F808,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F808,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F808,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(000000710006F7F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,void>\x02\b");
	create_qword	(x=0X710006F808);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F808,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_4ovln14ISenderServiceEE5_tO2NIPNS7_12_GLOBAL__N_121NotificationAgentImplEE4typeES8_E4typeE");
	set_cmt	(0X710006F810,	"reference to type's name",	0);
	create_qword	(x=0X710006F810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F818,	"attribute",	0);
	create_dword	(x=0X710006F818);
	op_hex		(x,	0);
	set_cmt	(0X710006F81C,	"count of base classes",	0);
	create_dword	(x=0X710006F81C);
	op_dec		(x,	0);
	set_cmt	(0X710006F820,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F820);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F828,	"base class' attributes",	0);
	create_qword	(x=0X710006F828);
	op_hex		(x,	0);
	set_cmt	(0X710006F830,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F838,	"base class' attributes",	0);
	create_qword	(x=0X710006F838);
	op_hex		(x,	0);
	set_cmt	(0X710006F840,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F840,	E_PREV + 0,	"; public \x01\b\x01(000000710006F840nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::ISenderService>::type\x02\b :");
	update_extra_cmt		(0X710006F840,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F808nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::ISenderService>::type\x02\b :");
	update_extra_cmt		(0X710006F840,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F7E0nn::ovln::ISenderService\x02\b :");
	update_extra_cmt		(0X710006F840,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F840,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F840,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(000000710006F7F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,void>\x02\b");
	create_qword	(x=0X710006F840);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F840,	"_ZTIN2nn2sf13InterfaceInfoINS_4ovln14ISenderServiceEE4_tABINS4_5_tO2NIPNS2_12_GLOBAL__N_121NotificationAgentImplEE4typeES3_E4typeE");
	set_cmt	(0X710006F848,	"reference to type's name",	0);
	create_qword	(x=0X710006F848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F850,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F850);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F858,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F858,	E_PREV + 0,	"; public \x01\b\x01(000000710006F858nn::sf::UnmanagedServiceObjectByPointer<nn::ovln::ISenderService,nn::ovln::`anonymous namespace'::NotificationAgentImpl>\x02\b :");
	update_extra_cmt		(0X710006F858,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F840nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::ISenderService>::type\x02\b :");
	update_extra_cmt		(0X710006F858,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F808nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,nn::ovln::ISenderService>::type\x02\b :");
	update_extra_cmt		(0X710006F858,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F7E0nn::ovln::ISenderService\x02\b :");
	update_extra_cmt		(0X710006F858,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F858,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F858,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(000000710006F7F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::ISenderService>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl *>::type,void>\x02\b");
	create_qword	(x=0X710006F858);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F858,	"_ZTIN2nn2sf31UnmanagedServiceObjectByPointerINS_4ovln14ISenderServiceENS2_12_GLOBAL__N_121NotificationAgentImplEEE");
	set_cmt	(0X710006F860,	"reference to type's name",	0);
	create_qword	(x=0X710006F860);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F868,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F868);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F870,	"offset to this",	0);
	create_qword	(x=0X710006F870);
	op_dec		(x,	0);
	set_name	(0X710006F870,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_4ovln7ISenderEE4_tABINS6_5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeES5_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	create_qword	(x=0X710006F878);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F880);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F888);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F890);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F898);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F8A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F8A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F8B0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F8B0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F8B0nn::ovln::ISender\x02\b :");
	update_extra_cmt		(0X710006F8B0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F8B0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X710006F8B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F8B0,	"_ZTIN2nn4ovln7ISenderE");
	set_cmt	(0X710006F8B8,	"reference to type's name",	0);
	create_qword	(x=0X710006F8B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F8C0,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F8C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F8C8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F8C8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F8C8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,void>\x02\b");
	create_qword	(x=0X710006F8C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F8C8,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_4ovln7ISenderEE5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeEvEE");
	set_cmt	(0X710006F8D0,	"reference to type's name",	0);
	create_qword	(x=0X710006F8D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F8D8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F8D8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F8D8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,nn::ovln::ISender>::type\x02\b :");
	update_extra_cmt		(0X710006F8D8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F8B0nn::ovln::ISender\x02\b :");
	update_extra_cmt		(0X710006F8D8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F8D8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F8D8,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(000000710006F8C8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,void>\x02\b");
	create_qword	(x=0X710006F8D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F8D8,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_4ovln7ISenderEE5_tO2NINS7_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeES8_E4typeE");
	set_cmt	(0X710006F8E0,	"reference to type's name",	0);
	create_qword	(x=0X710006F8E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F8E8,	"attribute",	0);
	create_dword	(x=0X710006F8E8);
	op_hex		(x,	0);
	set_cmt	(0X710006F8EC,	"count of base classes",	0);
	create_dword	(x=0X710006F8EC);
	op_dec		(x,	0);
	set_cmt	(0X710006F8F0,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F8F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F8F8,	"base class' attributes",	0);
	create_qword	(x=0X710006F8F8);
	op_hex		(x,	0);
	set_cmt	(0X710006F900,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F900);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F908,	"base class' attributes",	0);
	create_qword	(x=0X710006F908);
	op_hex		(x,	0);
	set_cmt	(0X710006F910,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F910,	E_PREV + 0,	"; public \x01\b\x01(000000710006F910nn::sf::InterfaceInfo<nn::ovln::ISender>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,nn::ovln::ISender>::type\x02\b :");
	update_extra_cmt		(0X710006F910,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F8D8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,nn::ovln::ISender>::type\x02\b :");
	update_extra_cmt		(0X710006F910,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F8B0nn::ovln::ISender\x02\b :");
	update_extra_cmt		(0X710006F910,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F910,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F910,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(000000710006F8C8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,void>\x02\b");
	create_qword	(x=0X710006F910);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F910,	"_ZTIN2nn2sf13InterfaceInfoINS_4ovln7ISenderEE4_tABINS4_5_tO2NINS2_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeES3_E4typeE");
	set_cmt	(0X710006F918,	"reference to type's name",	0);
	create_qword	(x=0X710006F918);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F920,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F928,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F928,	E_PREV + 0,	"; public \x01\b\x01(000000710006F928nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,nn::ovln::ISender>::type,nn::sf::MemoryResourceAllocationPolicy>::Object\x02\b :");
	update_extra_cmt		(0X710006F928,	E_PREV + 1,	";   protected /* offset 0x60 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X710006F928,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F910nn::sf::InterfaceInfo<nn::ovln::ISender>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,nn::ovln::ISender>::type\x02\b :");
	update_extra_cmt		(0X710006F928,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F8D8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,nn::ovln::ISender>::type\x02\b :");
	update_extra_cmt		(0X710006F928,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F8B0nn::ovln::ISender\x02\b :");
	update_extra_cmt		(0X710006F928,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X710006F928,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X710006F928,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(000000710006F8C8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ovln::ISender>::_tO2N<nn::ovln::`anonymous namespace'::NotificationAgentImpl::SenderObject>::type,void>\x02\b");
	create_qword	(x=0X710006F928);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F928,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_4ovln7ISenderEE4_tABINS6_5_tO2NINS4_12_GLOBAL__N_121NotificationAgentImpl12SenderObjectEE4typeES5_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	set_cmt	(0X710006F930,	"reference to type's name",	0);
	create_qword	(x=0X710006F930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F938,	"attribute",	0);
	create_dword	(x=0X710006F938);
	op_hex		(x,	0);
	set_cmt	(0X710006F93C,	"count of base classes",	0);
	create_dword	(x=0X710006F93C);
	op_dec		(x,	0);
	set_cmt	(0X710006F940,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F940);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F948,	"base class' attributes",	0);
	create_qword	(x=0X710006F948);
	op_hex		(x,	0);
	set_cmt	(0X710006F950,	"base class' type descriptor",	0);
	create_qword	(x=0X710006F950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F958,	"base class' attributes",	0);
	create_qword	(x=0X710006F958);
	op_hex		(x,	0);
	set_cmt	(0X710006F960,	"offset to this",	0);
	create_qword	(x=0X710006F960);
	op_dec		(x,	0);
	set_name	(0X710006F960,	"_ZTVN2nn2sf22UnitHeapMemoryResourceE");
	create_qword	(x=0X710006F968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F970);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F978);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F988);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X710006F990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F998,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F998,	E_PREV + 0,	"; public \x01\b\x01(000000710006F998nn::MemoryResource\x02\b");
	create_qword	(x=0X710006F998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F998,	"_ZTIN2nn14MemoryResourceE");
	set_cmt	(0X710006F9A0,	"reference to type's name",	0);
	create_qword	(x=0X710006F9A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F9A8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F9A8,	E_PREV + 0,	"; public \x01\b\x01(000000710006F9A8nn::sf::UnitHeapMemoryResource\x02\b :");
	update_extra_cmt		(0X710006F9A8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F998nn::MemoryResource\x02\b");
	create_qword	(x=0X710006F9A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F9A8,	"_ZTIN2nn2sf22UnitHeapMemoryResourceE");
	set_cmt	(0X710006F9B0,	"reference to type's name",	0);
	create_qword	(x=0X710006F9B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F9B8,	"reference to parent's type name",	0);
	create_qword	(x=0X710006F9B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F9C0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F9C0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F9C0nn::sf::cmif::client::CmifBaseObject\x02\b");
	create_qword	(x=0X710006F9C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F9C0,	"_ZTIN2nn2sf4cmif6client14CmifBaseObjectE");
	set_cmt	(0X710006F9C8,	"reference to type's name",	0);
	create_qword	(x=0X710006F9C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X710006F9D0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X710006F9D0,	E_PREV + 0,	"; public \x01\b\x01(000000710006F9D0nn::sf::detail::CmifProxyInfo\x02\b");
	create_qword	(x=0X710006F9D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X710006F9D0,	"_ZTIN2nn2sf6detail13CmifProxyInfoE");
	set_cmt	(0X710006F9D8,	"reference to type's name",	0);
	create_qword	(x=0X710006F9D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070440,	"offset to this",	0);
	create_qword	(x=0X7100070440);
	op_dec		(x,	0);
	set_name	(0X7100070440,	"_ZTVN2nn2sf4hipc6server2v16detail29HipcAllInOneServerManagerBaseE");
	create_qword	(x=0X7100070448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070450);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070458);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070460);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070468);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070470);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070478);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070480);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070498);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000704A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000704A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000704B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000704B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000704C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000704C8,	"offset to this",	0);
	create_qword	(x=0X71000704C8);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X71000704D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000704D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000704E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000704E8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000704E8,	E_PREV + 0,	"; public \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X71000704E8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X71000704E8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X71000704E8,	E_PREV + 3,	";       protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X71000704E8,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X71000704E8,	E_PREV + 5,	";       protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X71000704E8,	E_PREV + 6,	";     protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b");
	create_qword	(x=0X71000704E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000704E8,	"_ZTIN2nn2sf4hipc6server2v16detail29HipcAllInOneServerManagerBaseE");
	set_cmt	(0X71000704F0,	"reference to type's name",	0);
	create_qword	(x=0X71000704F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000704F8,	"reference to parent's type name",	0);
	create_qword	(x=0X71000704F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070500,	"offset to this",	0);
	create_qword	(x=0X7100070500);
	op_dec		(x,	0);
	set_name	(0X7100070500,	"_ZTVN2nn2sf4cmif6server23CmifServerDomainManagerE");
	create_qword	(x=0X7100070508);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070510);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070518);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070520,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070520,	E_PREV + 0,	"; public \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b");
	create_qword	(x=0X7100070520);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070520,	"_ZTIN2nn2sf4cmif6server23CmifServerDomainManagerE");
	set_cmt	(0X7100070528,	"reference to type's name",	0);
	create_qword	(x=0X7100070528);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070530,	"offset to this",	0);
	create_qword	(x=0X7100070530);
	op_dec		(x,	0);
	set_name	(0X7100070530,	"_ZTVN2nn2sf4cmif6server23CmifServerDomainManager6DomainE");
	create_qword	(x=0X7100070538);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070548);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070550);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070558);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070560);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070578);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070590,	"offset to this",	0);
	create_qword	(x=0X7100070590);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100070598);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000705A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000705A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000705B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000705B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000705C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000705C8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000705C8,	E_PREV + 0,	"; public \x01\b\x01(00000071000705C8nn::sf::cmif::ICmifDomain\x02\b :");
	update_extra_cmt		(0X71000705C8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000705C8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X71000705C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000705C8,	"_ZTIN2nn2sf4cmif11ICmifDomainE");
	set_cmt	(0X71000705D0,	"reference to type's name",	0);
	create_qword	(x=0X71000705D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000705D8,	"reference to parent's type name",	0);
	create_qword	(x=0X71000705D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000705E0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000705E0,	E_PREV + 0,	"; public \x01\b\x01(00000071000705E0nn::sf::cmif::server::CmifServerDomain\x02\b");
	create_qword	(x=0X71000705E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000705E0,	"_ZTIN2nn2sf4cmif6server16CmifServerDomainE");
	set_cmt	(0X71000705E8,	"reference to type's name",	0);
	create_qword	(x=0X71000705E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000705F0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000705F0,	E_PREV + 0,	"; public \x01\b\x01(00000071000705F0nn::sf::cmif::server::CmifDomainServerObject\x02\b :");
	update_extra_cmt		(0X71000705F0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000705C8nn::sf::cmif::ICmifDomain\x02\b :");
	update_extra_cmt		(0X71000705F0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000705F0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X71000705F0,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(00000071000705E0nn::sf::cmif::server::CmifServerDomain\x02\b");
	create_qword	(x=0X71000705F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000705F0,	"_ZTIN2nn2sf4cmif6server22CmifDomainServerObjectE");
	set_cmt	(0X71000705F8,	"reference to type's name",	0);
	create_qword	(x=0X71000705F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070600,	"attribute",	0);
	create_dword	(x=0X7100070600);
	op_hex		(x,	0);
	set_cmt	(0X7100070604,	"count of base classes",	0);
	create_dword	(x=0X7100070604);
	op_dec		(x,	0);
	set_cmt	(0X7100070608,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070608);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070610,	"base class' attributes",	0);
	create_qword	(x=0X7100070610);
	op_hex		(x,	0);
	set_cmt	(0X7100070618,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070620,	"base class' attributes",	0);
	create_qword	(x=0X7100070620);
	op_hex		(x,	0);
	set_cmt	(0X7100070628,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070628,	E_PREV + 0,	"; public \x01\b\x01(0000007100070628nn::sf::cmif::server::CmifServerDomainManager::Domain\x02\b :");
	update_extra_cmt		(0X7100070628,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000705F0nn::sf::cmif::server::CmifDomainServerObject\x02\b :");
	update_extra_cmt		(0X7100070628,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000705C8nn::sf::cmif::ICmifDomain\x02\b :");
	update_extra_cmt		(0X7100070628,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100070628,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100070628,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(00000071000705E0nn::sf::cmif::server::CmifServerDomain\x02\b,");
	update_extra_cmt		(0X7100070628,	E_PREV + 6,	";   protected /* offset 0x10 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b");
	create_qword	(x=0X7100070628);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070628,	"_ZTIN2nn2sf4cmif6server23CmifServerDomainManager6DomainE");
	set_cmt	(0X7100070630,	"reference to type's name",	0);
	create_qword	(x=0X7100070630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070638,	"attribute",	0);
	create_dword	(x=0X7100070638);
	op_hex		(x,	0);
	set_cmt	(0X710007063C,	"count of base classes",	0);
	create_dword	(x=0X710007063C);
	op_dec		(x,	0);
	set_cmt	(0X7100070640,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070648,	"base class' attributes",	0);
	create_qword	(x=0X7100070648);
	op_hex		(x,	0);
	set_cmt	(0X7100070650,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070658,	"base class' attributes",	0);
	create_qword	(x=0X7100070658);
	op_hex		(x,	0);
	set_cmt	(0X7100070668,	"offset to this",	0);
	create_qword	(x=0X7100070668);
	op_dec		(x,	0);
	set_name	(0X7100070668,	"_ZTVN2nn2sf4hipc6server2v124HipcServerSessionManagerE");
	create_qword	(x=0X7100070670);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070690);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000706A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000706A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000706B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000706B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000706C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000706C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000706D0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000706D0,	E_PREV + 0,	"; public \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b");
	create_qword	(x=0X71000706D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000706D0,	"_ZTIN2nn2sf4hipc6server2v128HipcServerSessionManagerBaseE");
	set_cmt	(0X71000706D8,	"reference to type's name",	0);
	create_qword	(x=0X71000706D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000706E0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000706E0,	E_PREV + 0,	"; public \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X71000706E0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b");
	create_qword	(x=0X71000706E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000706E0,	"_ZTIN2nn2sf4hipc6server2v125HipcServerSessionManagerTINS0_4cmif6server20CmifServerObjectInfoEEE");
	set_cmt	(0X71000706E8,	"reference to type's name",	0);
	create_qword	(x=0X71000706E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000706F0,	"reference to parent's type name",	0);
	create_qword	(x=0X71000706F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000706F8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000706F8,	E_PREV + 0,	"; public \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b");
	create_qword	(x=0X71000706F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000706F8,	"_ZTIN2nn2sf4hipc6server24HipcServerApiModelHolderE");
	set_cmt	(0X7100070700,	"reference to type's name",	0);
	create_qword	(x=0X7100070700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070708,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070708,	E_PREV + 0,	"; public \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X7100070708,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X7100070708,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X7100070708,	E_PREV + 3,	";   protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b");
	create_qword	(x=0X7100070708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070708,	"_ZTIN2nn2sf4hipc6server2v124HipcServerSessionManagerE");
	set_cmt	(0X7100070710,	"reference to type's name",	0);
	create_qword	(x=0X7100070710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070718,	"attribute",	0);
	create_dword	(x=0X7100070718);
	op_hex		(x,	0);
	set_cmt	(0X710007071C,	"count of base classes",	0);
	create_dword	(x=0X710007071C);
	op_dec		(x,	0);
	set_cmt	(0X7100070720,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070728,	"base class' attributes\noffset to this",	0);
	create_qword	(x=0X7100070728);
	op_dec		(x,	0);
	set_name	(0X7100070728,	"_ZTVN2nn2sf4hipc6server24HipcServerApiModelHolderE");
	set_cmt	(0X7100070730,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070738,	"base class' attributes",	0);
	create_qword	(x=0X7100070738);
	op_hex		(x,	0);
	set_cmt	(0X7100070740,	"offset to this",	0);
	create_qword	(x=0X7100070740);
	op_dec		(x,	0);
	set_name	(0X7100070740,	"_ZTVN2nn2sf4hipc6server2v112_GLOBAL__N_116HipcObjectDomainE");
	create_qword	(x=0X7100070748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070750);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070758,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070758,	E_PREV + 0,	"; public \x01\b\x01(0000007100070758nn::sf::hipc::server::IHipcObjectDomain\x02\b");
	create_qword	(x=0X7100070758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070758,	"_ZTIN2nn2sf4hipc6server17IHipcObjectDomainE");
	set_cmt	(0X7100070760,	"reference to type's name",	0);
	create_qword	(x=0X7100070760);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070768,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070768,	E_PREV + 0,	"; public \x01\b\x01(0000007100070768nn::sf::hipc::server::v1::`anonymous namespace'::HipcObjectDomain\x02\b :");
	update_extra_cmt		(0X7100070768,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100070758nn::sf::hipc::server::IHipcObjectDomain\x02\b");
	create_qword	(x=0X7100070768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070768,	"_ZTIN2nn2sf4hipc6server2v112_GLOBAL__N_116HipcObjectDomainE");
	set_cmt	(0X7100070770,	"reference to type's name",	0);
	create_qword	(x=0X7100070770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070778,	"reference to parent's type name",	0);
	create_qword	(x=0X7100070778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070780,	"offset to this",	0);
	create_qword	(x=0X7100070780);
	op_dec		(x,	0);
	set_name	(0X7100070780,	"_ZTVN2nn2sf4hipc6server18Hipc2ServerMessageE");
	create_qword	(x=0X7100070788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070798);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000707E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000707E8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000707E8,	E_PREV + 0,	"; public \x01\b\x01(00000071000707E8nn::sf::cmif::server::CmifServerMessage\x02\b");
	create_qword	(x=0X71000707E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000707E8,	"_ZTIN2nn2sf4cmif6server17CmifServerMessageE");
	set_cmt	(0X71000707F0,	"reference to type's name",	0);
	create_qword	(x=0X71000707F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000707F8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000707F8,	E_PREV + 0,	"; public \x01\b\x01(00000071000707F8nn::sf::hipc::server::Hipc2ServerMessage\x02\b :");
	update_extra_cmt		(0X71000707F8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000707E8nn::sf::cmif::server::CmifServerMessage\x02\b,");
	update_extra_cmt		(0X71000707F8,	E_PREV + 2,	";   protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b");
	create_qword	(x=0X71000707F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000707F8,	"_ZTIN2nn2sf4hipc6server18Hipc2ServerMessageE");
	set_cmt	(0X7100070800,	"reference to type's name",	0);
	create_qword	(x=0X7100070800);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070808,	"attribute",	0);
	create_dword	(x=0X7100070808);
	op_hex		(x,	0);
	set_cmt	(0X710007080C,	"count of base classes",	0);
	create_dword	(x=0X710007080C);
	op_dec		(x,	0);
	set_cmt	(0X7100070810,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070818,	"base class' attributes",	0);
	create_qword	(x=0X7100070818);
	op_hex		(x,	0);
	set_cmt	(0X7100070820,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070820);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070828,	"base class' attributes",	0);
	create_qword	(x=0X7100070828);
	op_hex		(x,	0);
	set_cmt	(0X7100070830,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070830,	E_PREV + 0,	"; public \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X7100070830,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X7100070830,	E_PREV + 2,	";     protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X7100070830,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X7100070830,	E_PREV + 4,	";     protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X7100070830,	E_PREV + 5,	";   protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b");
	create_qword	(x=0X7100070830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070830,	"_ZTIN2nn2sf4hipc6server2v134HipcServerSessionManagerWithDomainE");
	set_cmt	(0X7100070838,	"reference to type's name",	0);
	create_qword	(x=0X7100070838);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070840,	"attribute",	0);
	create_dword	(x=0X7100070840);
	op_hex		(x,	0);
	set_cmt	(0X7100070844,	"count of base classes",	0);
	create_dword	(x=0X7100070844);
	op_dec		(x,	0);
	set_cmt	(0X7100070848,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070850,	"base class' attributes",	0);
	create_qword	(x=0X7100070850);
	op_hex		(x,	0);
	set_cmt	(0X7100070858,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070858);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070860,	"base class' attributes",	0);
	create_qword	(x=0X7100070860);
	op_hex		(x,	0);
	set_cmt	(0X7100070868,	"offset to this",	0);
	create_qword	(x=0X7100070868);
	op_dec		(x,	0);
	set_name	(0X7100070868,	"_ZTVN2nn2sf22UnmanagedServiceObjectINS0_4hipc6detail12IHipcManagerENS2_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEEE");
	create_qword	(x=0X7100070870);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070878);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070880);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070888);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070890);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070898);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000708A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000708A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000708B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000708B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000708C0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000708C0,	E_PREV + 0,	"; public \x01\b\x01(00000071000708C0nn::sf::hipc::detail::IHipcManager\x02\b :");
	update_extra_cmt		(0X71000708C0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000708C0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X71000708C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000708C0,	"_ZTIN2nn2sf4hipc6detail12IHipcManagerE");
	set_cmt	(0X71000708C8,	"reference to type's name",	0);
	create_qword	(x=0X71000708C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000708D0,	"reference to parent's type name",	0);
	create_qword	(x=0X71000708D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000708D8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000708D8,	E_PREV + 0,	"; public \x01\b\x01(00000071000708D8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,void>\x02\b");
	create_qword	(x=0X71000708D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000708D8,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS0_4hipc6detail12IHipcManagerEE5_tO2NINS4_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEE4typeEvEE");
	set_cmt	(0X71000708E0,	"reference to type's name",	0);
	create_qword	(x=0X71000708E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000708E8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000708E8,	E_PREV + 0,	"; public \x01\b\x01(00000071000708E8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,nn::sf::hipc::detail::IHipcManager>::type\x02\b :");
	update_extra_cmt		(0X71000708E8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000708C0nn::sf::hipc::detail::IHipcManager\x02\b :");
	update_extra_cmt		(0X71000708E8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000708E8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X71000708E8,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(00000071000708D8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,void>\x02\b");
	create_qword	(x=0X71000708E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000708E8,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS0_4hipc6detail12IHipcManagerEE5_tO2NINS7_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEE4typeES9_E4typeE");
	set_cmt	(0X71000708F0,	"reference to type's name",	0);
	create_qword	(x=0X71000708F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000708F8,	"attribute",	0);
	create_dword	(x=0X71000708F8);
	op_hex		(x,	0);
	set_cmt	(0X71000708FC,	"count of base classes",	0);
	create_dword	(x=0X71000708FC);
	op_dec		(x,	0);
	set_cmt	(0X7100070900,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070900);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070908,	"base class' attributes",	0);
	create_qword	(x=0X7100070908);
	op_hex		(x,	0);
	set_cmt	(0X7100070910,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070910);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070918,	"base class' attributes",	0);
	create_qword	(x=0X7100070918);
	op_hex		(x,	0);
	set_cmt	(0X7100070920,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070920,	E_PREV + 0,	"; public \x01\b\x01(0000007100070920nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tAB<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,nn::sf::hipc::detail::IHipcManager>::type\x02\b :");
	update_extra_cmt		(0X7100070920,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000708E8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,nn::sf::hipc::detail::IHipcManager>::type\x02\b :");
	update_extra_cmt		(0X7100070920,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000708C0nn::sf::hipc::detail::IHipcManager\x02\b :");
	update_extra_cmt		(0X7100070920,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100070920,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100070920,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(00000071000708D8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,void>\x02\b");
	create_qword	(x=0X7100070920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070920,	"_ZTIN2nn2sf13InterfaceInfoINS0_4hipc6detail12IHipcManagerEE4_tABINS5_5_tO2NINS2_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEE4typeES4_E4typeE");
	set_cmt	(0X7100070928,	"reference to type's name",	0);
	create_qword	(x=0X7100070928);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070930,	"reference to parent's type name",	0);
	create_qword	(x=0X7100070930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070938,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070938,	E_PREV + 0,	"; public \x01\b\x01(0000007100070938nn::sf::UnmanagedServiceObject<nn::sf::hipc::detail::IHipcManager,nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>\x02\b :");
	update_extra_cmt		(0X7100070938,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100070920nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tAB<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,nn::sf::hipc::detail::IHipcManager>::type\x02\b :");
	update_extra_cmt		(0X7100070938,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000708E8nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,nn::sf::hipc::detail::IHipcManager>::type\x02\b :");
	update_extra_cmt		(0X7100070938,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(00000071000708C0nn::sf::hipc::detail::IHipcManager\x02\b :");
	update_extra_cmt		(0X7100070938,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100070938,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100070938,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(00000071000708D8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::sf::hipc::detail::IHipcManager>::_tO2N<nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain::HipcManagerImpl>::type,void>\x02\b");
	create_qword	(x=0X7100070938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070938,	"_ZTIN2nn2sf22UnmanagedServiceObjectINS0_4hipc6detail12IHipcManagerENS2_6server2v134HipcServerSessionManagerWithDomain15HipcManagerImplEEE");
	set_cmt	(0X7100070940,	"reference to type's name",	0);
	create_qword	(x=0X7100070940);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070948,	"reference to parent's type name",	0);
	create_qword	(x=0X7100070948);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070958,	"offset to this",	0);
	create_qword	(x=0X7100070958);
	op_dec		(x,	0);
	set_name	(0X7100070958,	"_ZTVN2nn2sf4cmif6server22CmifDomainServerObject23CmifDomainServerMessageE");
	create_qword	(x=0X7100070960);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070970);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070978);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070988);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000709A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000709A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000709B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000709B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000709C0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000709C0,	E_PREV + 0,	"; public \x01\b\x01(00000071000709C0nn::sf::cmif::server::CmifDomainServerObject::CmifDomainServerMessage\x02\b :");
	update_extra_cmt		(0X71000709C0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000707E8nn::sf::cmif::server::CmifServerMessage\x02\b");
	create_qword	(x=0X71000709C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000709C0,	"_ZTIN2nn2sf4cmif6server22CmifDomainServerObject23CmifDomainServerMessageE");
	set_cmt	(0X71000709C8,	"reference to type's name",	0);
	create_qword	(x=0X71000709C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000709D0,	"reference to parent's type name",	0);
	create_qword	(x=0X71000709D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000709D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070A00,	"offset to this",	0);
	create_qword	(x=0X7100070A00);
	op_dec		(x,	0);
	set_name	(0X7100070A00,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_4cmif6client6detail9CmifProxyINS_8fatalsrv8IServiceENS0_4hipc6client18Hipc2ProxyKindBaseILNS9_6detail11MessageTypeE6EEENS0_30MemoryResourceAllocationPolicyENS5_19ProcessModifierImplINS4_21DefaultProxyFilterTagEEEvEESF_E6ObjectE");
	create_qword	(x=0X7100070A08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070A50,	"offset to this",	0);
	create_qword	(x=0X7100070A50);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100070A58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100070A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070A68,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070A68,	E_PREV + 0,	"; public \x01\b\x01(0000007100070A68nn::fatalsrv::IService\x02\b :");
	update_extra_cmt		(0X7100070A68,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100070A68,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100070A68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070A68,	"_ZTIN2nn8fatalsrv8IServiceE");
	set_cmt	(0X7100070A70,	"reference to type's name",	0);
	create_qword	(x=0X7100070A70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070A78,	"reference to parent's type name",	0);
	create_qword	(x=0X7100070A78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070A80,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070A80,	E_PREV + 0,	"; public \x01\b\x01(0000007100070A80nn::sf::hipc::client::Hipc2ClientProxyBaseObject\x02\b :");
	update_extra_cmt		(0X7100070A80,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F9C0nn::sf::cmif::client::CmifBaseObject\x02\b");
	create_qword	(x=0X7100070A80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070A80,	"_ZTIN2nn2sf4hipc6client26Hipc2ClientProxyBaseObjectE");
	set_cmt	(0X7100070A88,	"reference to type's name",	0);
	create_qword	(x=0X7100070A88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070A90,	"reference to parent's type name",	0);
	create_qword	(x=0X7100070A90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070A98,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070A98,	E_PREV + 0,	"; public \x01\b\x01(0000007100070A98nn::sf::cmif::client::detail::CmifProxyImpl<nn::fatalsrv::IService,nn::sf::hipc::client::Hipc2ProxyKindBase<(nn::sf::hipc::detail::MessageType)6>,nn::sf::MemoryResourceAllocationPolicy,nn::fatalsrv::IService,nn::sf::cmif::client::detail::ProcessModifierImpl<nn::sf::cmif::client::DefaultProxyFilterTag>>\x02\b :");
	update_extra_cmt		(0X7100070A98,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100070A68nn::fatalsrv::IService\x02\b :");
	update_extra_cmt		(0X7100070A98,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100070A98,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100070A98,	E_PREV + 4,	";   protected /* offset 0x8 */ \x01\b\x01(0000007100070A80nn::sf::hipc::client::Hipc2ClientProxyBaseObject\x02\b :");
	update_extra_cmt		(0X7100070A98,	E_PREV + 5,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F9C0nn::sf::cmif::client::CmifBaseObject\x02\b,");
	update_extra_cmt		(0X7100070A98,	E_PREV + 6,	";   protected /* offset 0x10 */ \x01\b\x01(000000710006F9D0nn::sf::detail::CmifProxyInfo\x02\b");
	create_qword	(x=0X7100070A98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070A98,	"_ZTIN2nn2sf4cmif6client6detail13CmifProxyImplINS_8fatalsrv8IServiceENS0_4hipc6client18Hipc2ProxyKindBaseILNS7_6detail11MessageTypeE6EEENS0_30MemoryResourceAllocationPolicyES6_NS3_19ProcessModifierImplINS2_21DefaultProxyFilterTagEEEEE");
	set_cmt	(0X7100070AA0,	"reference to type's name",	0);
	create_qword	(x=0X7100070AA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070AA8,	"attribute",	0);
	create_dword	(x=0X7100070AA8);
	op_hex		(x,	0);
	set_cmt	(0X7100070AAC,	"count of base classes",	0);
	create_dword	(x=0X7100070AAC);
	op_dec		(x,	0);
	set_cmt	(0X7100070AB0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070AB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070AB8,	"base class' attributes",	0);
	create_qword	(x=0X7100070AB8);
	op_hex		(x,	0);
	set_cmt	(0X7100070AC0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070AC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070AC8,	"base class' attributes",	0);
	create_qword	(x=0X7100070AC8);
	op_hex		(x,	0);
	set_cmt	(0X7100070AD0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070AD8,	"base class' attributes",	0);
	create_qword	(x=0X7100070AD8);
	op_hex		(x,	0);
	set_cmt	(0X7100070AE0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070AE0,	E_PREV + 0,	"; public \x01\b\x01(0000007100070AE0nn::sf::cmif::client::detail::CmifProxy<nn::fatalsrv::IService,nn::sf::hipc::client::Hipc2ProxyKindBase<(nn::sf::hipc::detail::MessageType)6>,nn::sf::MemoryResourceAllocationPolicy,nn::sf::cmif::client::detail::ProcessModifierImpl<nn::sf::cmif::client::DefaultProxyFilterTag>,void>\x02\b :");
	update_extra_cmt		(0X7100070AE0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100070A98nn::sf::cmif::client::detail::CmifProxyImpl<nn::fatalsrv::IService,nn::sf::hipc::client::Hipc2ProxyKindBase<(nn::sf::hipc::detail::MessageType)6>,nn::sf::MemoryResourceAllocationPolicy,nn::fatalsrv::IService,nn::sf::cmif::client::detail::ProcessModifierImpl<nn::sf::cmif::client::DefaultProxyFilterTag>>\x02\b :");
	update_extra_cmt		(0X7100070AE0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100070A68nn::fatalsrv::IService\x02\b :");
	update_extra_cmt		(0X7100070AE0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100070AE0,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100070AE0,	E_PREV + 5,	";     protected /* offset 0x8 */ \x01\b\x01(0000007100070A80nn::sf::hipc::client::Hipc2ClientProxyBaseObject\x02\b :");
	update_extra_cmt		(0X7100070AE0,	E_PREV + 6,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F9C0nn::sf::cmif::client::CmifBaseObject\x02\b,");
	update_extra_cmt		(0X7100070AE0,	E_PREV + 7,	";     protected /* offset 0x10 */ \x01\b\x01(000000710006F9D0nn::sf::detail::CmifProxyInfo\x02\b");
	create_qword	(x=0X7100070AE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070AE0,	"_ZTIN2nn2sf4cmif6client6detail9CmifProxyINS_8fatalsrv8IServiceENS0_4hipc6client18Hipc2ProxyKindBaseILNS7_6detail11MessageTypeE6EEENS0_30MemoryResourceAllocationPolicyENS3_19ProcessModifierImplINS2_21DefaultProxyFilterTagEEEvEE");
	set_cmt	(0X7100070AE8,	"reference to type's name",	0);
	create_qword	(x=0X7100070AE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070AF0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100070AF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070AF8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100070AF8,	E_PREV + 0,	"; public \x01\b\x01(0000007100070AF8nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::cmif::client::detail::CmifProxy<nn::fatalsrv::IService,nn::sf::hipc::client::Hipc2ProxyKindBase<(nn::sf::hipc::detail::MessageType)6>,nn::sf::MemoryResourceAllocationPolicy,nn::sf::cmif::client::detail::ProcessModifierImpl<nn::sf::cmif::client::DefaultProxyFilterTag>,void>,nn::sf::MemoryResourceAllocationPolicy>::Object\x02\b :");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 1,	";   protected /* offset 0x18 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(0000007100070AE0nn::sf::cmif::client::detail::CmifProxy<nn::fatalsrv::IService,nn::sf::hipc::client::Hipc2ProxyKindBase<(nn::sf::hipc::detail::MessageType)6>,nn::sf::MemoryResourceAllocationPolicy,nn::sf::cmif::client::detail::ProcessModifierImpl<nn::sf::cmif::client::DefaultProxyFilterTag>,void>\x02\b :");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(0000007100070A98nn::sf::cmif::client::detail::CmifProxyImpl<nn::fatalsrv::IService,nn::sf::hipc::client::Hipc2ProxyKindBase<(nn::sf::hipc::detail::MessageType)6>,nn::sf::MemoryResourceAllocationPolicy,nn::fatalsrv::IService,nn::sf::cmif::client::detail::ProcessModifierImpl<nn::sf::cmif::client::DefaultProxyFilterTag>>\x02\b :");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070A68nn::fatalsrv::IService\x02\b :");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 7,	";       protected /* offset 0x8 */ \x01\b\x01(0000007100070A80nn::sf::hipc::client::Hipc2ClientProxyBaseObject\x02\b :");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 8,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F9C0nn::sf::cmif::client::CmifBaseObject\x02\b,");
	update_extra_cmt		(0X7100070AF8,	E_PREV + 9,	";       protected /* offset 0x10 */ \x01\b\x01(000000710006F9D0nn::sf::detail::CmifProxyInfo\x02\b");
	create_qword	(x=0X7100070AF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100070AF8,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_4cmif6client6detail9CmifProxyINS_8fatalsrv8IServiceENS0_4hipc6client18Hipc2ProxyKindBaseILNS9_6detail11MessageTypeE6EEENS0_30MemoryResourceAllocationPolicyENS5_19ProcessModifierImplINS4_21DefaultProxyFilterTagEEEvEESF_E6ObjectE");
	set_cmt	(0X7100070B00,	"reference to type's name",	0);
	create_qword	(x=0X7100070B00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070B08,	"attribute",	0);
	create_dword	(x=0X7100070B08);
	op_hex		(x,	0);
	set_cmt	(0X7100070B0C,	"count of base classes",	0);
	create_dword	(x=0X7100070B0C);
	op_dec		(x,	0);
	set_cmt	(0X7100070B10,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070B10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070B18,	"base class' attributes",	0);
	create_qword	(x=0X7100070B18);
	op_hex		(x,	0);
	set_cmt	(0X7100070B20,	"base class' type descriptor",	0);
	create_qword	(x=0X7100070B20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100070B28,	"base class' attributes",	0);
	create_qword	(x=0X7100070B28);
	op_hex		(x,	0);
	create_qword	(x=0X7100070B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X7100070BA0);
	make_array	(0X7100070BA4,	0X4);
	create_qword	(0X7100070BA8);
	create_qword	(0X7100070BB0);
	create_qword	(0X7100070E80);
	create_dword	(0X7100070EA8);
	make_array	(0X7100070EAC,	0X14);
	create_qword	(0X71000710F0);
	create_dword	(0X7100071118);
	make_array	(0X710007111C,	0X4);
	create_qword	(x=0X7100071330);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071338);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071340);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071350);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071358);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071360);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071368);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071380);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071388);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000713F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071400);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071408);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071410);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071418);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071420);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071428);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071440);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071450);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071458);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071460);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071468);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071470);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071498);
	op_hex		(x,	0);
	create_qword	(x=0X71000714A0);
	op_hex		(x,	0);
	create_qword	(x=0X71000714A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000714B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000714B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000714C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000714C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000714D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000714D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000714E0);
	op_hex		(x,	0);
	create_qword	(x=0X71000714E8);
	op_hex		(x,	0);
	create_qword	(x=0X71000714F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000714F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071500);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071508);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071510);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071518);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071520);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071528);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071530);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071538);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071548);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071550);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071558);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071560);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071578);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071590);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000715A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000715B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000715C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000715D0);
	op_hex		(x,	0);
	create_qword	(x=0X71000715D8);
	op_hex		(x,	0);
	create_qword	(x=0X71000715E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000715E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000715F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000715F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071600);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071608);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071610);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071620);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071628);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071638);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071658);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071660);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071690);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000716A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000716A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000716B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000716B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000716D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000716D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000716F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000716F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071718);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071740);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071750);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071798);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000717B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000717B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000717C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000717C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000717D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000717D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000717F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000717F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071800);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071808);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071828);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071838);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071840);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071860);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071868);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071880);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071888);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071890);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071898);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000718F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071900);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071908);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071928);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071940);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071958);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071960);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071970);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071978);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071980,	"offset to this",	0);
	create_qword	(x=0X7100071980);
	op_dec		(x,	0);
	set_name	(0X7100071980,	"_ZTVN2nn2sf22UnmanagedServiceObjectINS_3ins16IReceiverManagerENS2_6server19ReceiverManagerImplEEE");
	create_qword	(x=0X7100071988);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000719A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000719A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000719B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000719B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000719C0,	"offset to this",	0);
	create_qword	(x=0X71000719C0);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X71000719C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000719D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000719D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000719E0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000719E0,	E_PREV + 0,	"; public \x01\b\x01(00000071000719E0nn::ins::IReceiverManager\x02\b :");
	update_extra_cmt		(0X71000719E0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000719E0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X71000719E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000719E0,	"_ZTIN2nn3ins16IReceiverManagerE");
	set_cmt	(0X71000719E8,	"reference to type's name",	0);
	create_qword	(x=0X71000719E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000719F0,	"reference to parent's type name",	0);
	create_qword	(x=0X71000719F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000719F8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000719F8,	E_PREV + 0,	"; public \x01\b\x01(00000071000719F8nn::ins::server::ReceiverManagerImpl\x02\b :");
	update_extra_cmt		(0X71000719F8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X71000719F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000719F8,	"_ZTIN2nn3ins6server19ReceiverManagerImplE");
	set_cmt	(0X7100071A00,	"reference to type's name",	0);
	create_qword	(x=0X7100071A00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A08,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071A08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A10,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071A10,	E_PREV + 0,	"; public \x01\b\x01(0000007100071A10nn::sf::detail::ObjectHolderImpl<nn::ins::server::ReceiverManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071A10,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(00000071000719F8nn::ins::server::ReceiverManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071A10,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071A10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071A10,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS_3ins6server19ReceiverManagerImplEvEE");
	set_cmt	(0X7100071A18,	"reference to type's name",	0);
	create_qword	(x=0X7100071A18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A20,	"attribute",	0);
	create_dword	(x=0X7100071A20);
	op_hex		(x,	0);
	set_cmt	(0X7100071A24,	"count of base classes",	0);
	create_dword	(x=0X7100071A24);
	op_dec		(x,	0);
	set_cmt	(0X7100071A28,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071A28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A30,	"base class' attributes",	0);
	create_qword	(x=0X7100071A30);
	op_hex		(x,	0);
	set_cmt	(0X7100071A38,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071A38,	E_PREV + 0,	"; public \x01\b\x01(0000007100071A38nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071A38,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100071A10nn::sf::detail::ObjectHolderImpl<nn::ins::server::ReceiverManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071A38,	E_PREV + 2,	";     protected /* offset 0x0 */ \x01\b\x01(00000071000719F8nn::ins::server::ReceiverManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071A38,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071A38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071A38,	"_ZTIN2nn2sf13InterfaceInfoINS_3ins16IReceiverManagerEE5_tO2NINS2_6server19ReceiverManagerImplEE4typeE");
	set_cmt	(0X7100071A40,	"reference to type's name",	0);
	create_qword	(x=0X7100071A40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A48,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071A48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A50,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071A50,	E_PREV + 0,	"; public \x01\b\x01(0000007100071A50nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,void>\x02\b :");
	update_extra_cmt		(0X7100071A50,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(0000007100071A38nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071A50,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100071A10nn::sf::detail::ObjectHolderImpl<nn::ins::server::ReceiverManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071A50,	E_PREV + 3,	";       protected /* offset 0x0 */ \x01\b\x01(00000071000719F8nn::ins::server::ReceiverManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071A50,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071A50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071A50,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_3ins16IReceiverManagerEE5_tO2NINS4_6server19ReceiverManagerImplEE4typeEvEE");
	set_cmt	(0X7100071A58,	"reference to type's name",	0);
	create_qword	(x=0X7100071A58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A60,	"attribute",	0);
	create_dword	(x=0X7100071A60);
	op_hex		(x,	0);
	set_cmt	(0X7100071A64,	"count of base classes",	0);
	create_dword	(x=0X7100071A64);
	op_dec		(x,	0);
	set_cmt	(0X7100071A68,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071A68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A70,	"base class' attributes",	0);
	create_qword	(x=0X7100071A70);
	op_hex		(x,	0);
	set_cmt	(0X7100071A78,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071A78,	E_PREV + 0,	"; public \x01\b\x01(0000007100071A78nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,nn::ins::IReceiverManager>::type\x02\b :");
	update_extra_cmt		(0X7100071A78,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000719E0nn::ins::IReceiverManager\x02\b :");
	update_extra_cmt		(0X7100071A78,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100071A78,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100071A78,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100071A50nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,void>\x02\b :");
	update_extra_cmt		(0X7100071A78,	E_PREV + 5,	";     protected /* offset 0x0 */ \x01\b\x01(0000007100071A38nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071A78,	E_PREV + 6,	";       public /* offset 0x0 */ \x01\b\x01(0000007100071A10nn::sf::detail::ObjectHolderImpl<nn::ins::server::ReceiverManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071A78,	E_PREV + 7,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000719F8nn::ins::server::ReceiverManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071A78,	E_PREV + 8,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071A78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071A78,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_3ins16IReceiverManagerEE5_tO2NINS7_6server19ReceiverManagerImplEE4typeES8_E4typeE");
	set_cmt	(0X7100071A80,	"reference to type's name",	0);
	create_qword	(x=0X7100071A80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A88,	"attribute",	0);
	create_dword	(x=0X7100071A88);
	op_hex		(x,	0);
	set_cmt	(0X7100071A8C,	"count of base classes",	0);
	create_dword	(x=0X7100071A8C);
	op_dec		(x,	0);
	set_cmt	(0X7100071A90,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071A90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071A98,	"base class' attributes",	0);
	create_qword	(x=0X7100071A98);
	op_hex		(x,	0);
	set_cmt	(0X7100071AA0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071AA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071AA8,	"base class' attributes",	0);
	create_qword	(x=0X7100071AA8);
	op_hex		(x,	0);
	set_cmt	(0X7100071AB0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071AB0,	E_PREV + 0,	"; public \x01\b\x01(0000007100071AB0nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tAB<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,nn::ins::IReceiverManager>::type\x02\b :");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100071A78nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,nn::ins::IReceiverManager>::type\x02\b :");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000719E0nn::ins::IReceiverManager\x02\b :");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100071A50nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,void>\x02\b :");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 6,	";       protected /* offset 0x0 */ \x01\b\x01(0000007100071A38nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 7,	";         public /* offset 0x0 */ \x01\b\x01(0000007100071A10nn::sf::detail::ObjectHolderImpl<nn::ins::server::ReceiverManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 8,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000719F8nn::ins::server::ReceiverManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071AB0,	E_PREV + 9,	";             public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071AB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071AB0,	"_ZTIN2nn2sf13InterfaceInfoINS_3ins16IReceiverManagerEE4_tABINS4_5_tO2NINS2_6server19ReceiverManagerImplEE4typeES3_E4typeE");
	set_cmt	(0X7100071AB8,	"reference to type's name",	0);
	create_qword	(x=0X7100071AB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071AC0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071AC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071AC8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071AC8,	E_PREV + 0,	"; public \x01\b\x01(0000007100071AC8nn::sf::UnmanagedServiceObject<nn::ins::IReceiverManager,nn::ins::server::ReceiverManagerImpl>\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100071AB0nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tAB<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,nn::ins::IReceiverManager>::type\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100071A78nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,nn::ins::IReceiverManager>::type\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(00000071000719E0nn::ins::IReceiverManager\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(0000007100071A50nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type,void>\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 7,	";         protected /* offset 0x0 */ \x01\b\x01(0000007100071A38nn::sf::InterfaceInfo<nn::ins::IReceiverManager>::_tO2N<nn::ins::server::ReceiverManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 8,	";           public /* offset 0x0 */ \x01\b\x01(0000007100071A10nn::sf::detail::ObjectHolderImpl<nn::ins::server::ReceiverManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 9,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000719F8nn::ins::server::ReceiverManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071AC8,	E_PREV + 10,	";               public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071AC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071AC8,	"_ZTIN2nn2sf22UnmanagedServiceObjectINS_3ins16IReceiverManagerENS2_6server19ReceiverManagerImplEEE");
	set_cmt	(0X7100071AD0,	"reference to type's name",	0);
	create_qword	(x=0X7100071AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071AD8,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071AD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071AE0,	"offset to this",	0);
	create_qword	(x=0X7100071AE0);
	op_dec		(x,	0);
	set_name	(0X7100071AE0,	"_ZTVN2nn3ins16IReceiverManagerE");
	create_qword	(x=0X7100071AE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071AF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071AF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071B20,	"offset to this",	0);
	create_qword	(x=0X7100071B20);
	op_dec		(x,	0);
	set_name	(0X7100071B20,	"_ZTVN2nn2sf22UnmanagedServiceObjectINS_3ins14ISenderManagerENS2_6server17SenderManagerImplEEE");
	create_qword	(x=0X7100071B28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071B58,	"offset to this",	0);
	create_qword	(x=0X7100071B58);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100071B60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071B70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071B78,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071B78,	E_PREV + 0,	"; public \x01\b\x01(0000007100071B78nn::ins::ISenderManager\x02\b :");
	update_extra_cmt		(0X7100071B78,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100071B78,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071B78,	"_ZTIN2nn3ins14ISenderManagerE");
	set_cmt	(0X7100071B80,	"reference to type's name",	0);
	create_qword	(x=0X7100071B80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071B88,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071B88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071B90,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071B90,	E_PREV + 0,	"; public \x01\b\x01(0000007100071B90nn::ins::server::SenderManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071B90,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071B90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071B90,	"_ZTIN2nn3ins6server17SenderManagerImplE");
	set_cmt	(0X7100071B98,	"reference to type's name",	0);
	create_qword	(x=0X7100071B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071BA0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071BA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071BA8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071BA8,	E_PREV + 0,	"; public \x01\b\x01(0000007100071BA8nn::sf::detail::ObjectHolderImpl<nn::ins::server::SenderManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071BA8,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(0000007100071B90nn::ins::server::SenderManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071BA8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071BA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071BA8,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS_3ins6server17SenderManagerImplEvEE");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_10(void) {
        auto x;
#define id x

	set_cmt	(0X7100071BB0,	"reference to type's name",	0);
	create_qword	(x=0X7100071BB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071BB8,	"attribute",	0);
	create_dword	(x=0X7100071BB8);
	op_hex		(x,	0);
	set_cmt	(0X7100071BBC,	"count of base classes",	0);
	create_dword	(x=0X7100071BBC);
	op_dec		(x,	0);
	set_cmt	(0X7100071BC0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071BC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071BC8,	"base class' attributes",	0);
	create_qword	(x=0X7100071BC8);
	op_hex		(x,	0);
	set_cmt	(0X7100071BD0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071BD0,	E_PREV + 0,	"; public \x01\b\x01(0000007100071BD0nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071BD0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100071BA8nn::sf::detail::ObjectHolderImpl<nn::ins::server::SenderManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071BD0,	E_PREV + 2,	";     protected /* offset 0x0 */ \x01\b\x01(0000007100071B90nn::ins::server::SenderManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071BD0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071BD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071BD0,	"_ZTIN2nn2sf13InterfaceInfoINS_3ins14ISenderManagerEE5_tO2NINS2_6server17SenderManagerImplEE4typeE");
	set_cmt	(0X7100071BD8,	"reference to type's name",	0);
	create_qword	(x=0X7100071BD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071BE0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071BE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071BE8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071BE8,	E_PREV + 0,	"; public \x01\b\x01(0000007100071BE8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,void>\x02\b :");
	update_extra_cmt		(0X7100071BE8,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(0000007100071BD0nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071BE8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100071BA8nn::sf::detail::ObjectHolderImpl<nn::ins::server::SenderManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071BE8,	E_PREV + 3,	";       protected /* offset 0x0 */ \x01\b\x01(0000007100071B90nn::ins::server::SenderManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071BE8,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071BE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071BE8,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_3ins14ISenderManagerEE5_tO2NINS4_6server17SenderManagerImplEE4typeEvEE");
	set_cmt	(0X7100071BF0,	"reference to type's name",	0);
	create_qword	(x=0X7100071BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071BF8,	"attribute",	0);
	create_dword	(x=0X7100071BF8);
	op_hex		(x,	0);
	set_cmt	(0X7100071BFC,	"count of base classes",	0);
	create_dword	(x=0X7100071BFC);
	op_dec		(x,	0);
	set_cmt	(0X7100071C00,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071C00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071C08,	"base class' attributes",	0);
	create_qword	(x=0X7100071C08);
	op_hex		(x,	0);
	set_cmt	(0X7100071C10,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071C10,	E_PREV + 0,	"; public \x01\b\x01(0000007100071C10nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,nn::ins::ISenderManager>::type\x02\b :");
	update_extra_cmt		(0X7100071C10,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100071B78nn::ins::ISenderManager\x02\b :");
	update_extra_cmt		(0X7100071C10,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100071C10,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100071C10,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100071BE8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,void>\x02\b :");
	update_extra_cmt		(0X7100071C10,	E_PREV + 5,	";     protected /* offset 0x0 */ \x01\b\x01(0000007100071BD0nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071C10,	E_PREV + 6,	";       public /* offset 0x0 */ \x01\b\x01(0000007100071BA8nn::sf::detail::ObjectHolderImpl<nn::ins::server::SenderManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071C10,	E_PREV + 7,	";         protected /* offset 0x0 */ \x01\b\x01(0000007100071B90nn::ins::server::SenderManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071C10,	E_PREV + 8,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071C10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071C10,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_3ins14ISenderManagerEE5_tO2NINS7_6server17SenderManagerImplEE4typeES8_E4typeE");
	set_cmt	(0X7100071C18,	"reference to type's name",	0);
	create_qword	(x=0X7100071C18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071C20,	"attribute",	0);
	create_dword	(x=0X7100071C20);
	op_hex		(x,	0);
	set_cmt	(0X7100071C24,	"count of base classes",	0);
	create_dword	(x=0X7100071C24);
	op_dec		(x,	0);
	set_cmt	(0X7100071C28,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071C28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071C30,	"base class' attributes",	0);
	create_qword	(x=0X7100071C30);
	op_hex		(x,	0);
	set_cmt	(0X7100071C38,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071C38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071C40,	"base class' attributes",	0);
	create_qword	(x=0X7100071C40);
	op_hex		(x,	0);
	set_cmt	(0X7100071C48,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071C48,	E_PREV + 0,	"; public \x01\b\x01(0000007100071C48nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tAB<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,nn::ins::ISenderManager>::type\x02\b :");
	update_extra_cmt		(0X7100071C48,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100071C10nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,nn::ins::ISenderManager>::type\x02\b :");
	update_extra_cmt		(0X7100071C48,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100071B78nn::ins::ISenderManager\x02\b :");
	update_extra_cmt		(0X7100071C48,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100071C48,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100071C48,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100071BE8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,void>\x02\b :");
	update_extra_cmt		(0X7100071C48,	E_PREV + 6,	";       protected /* offset 0x0 */ \x01\b\x01(0000007100071BD0nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071C48,	E_PREV + 7,	";         public /* offset 0x0 */ \x01\b\x01(0000007100071BA8nn::sf::detail::ObjectHolderImpl<nn::ins::server::SenderManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071C48,	E_PREV + 8,	";           protected /* offset 0x0 */ \x01\b\x01(0000007100071B90nn::ins::server::SenderManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071C48,	E_PREV + 9,	";             public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071C48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071C48,	"_ZTIN2nn2sf13InterfaceInfoINS_3ins14ISenderManagerEE4_tABINS4_5_tO2NINS2_6server17SenderManagerImplEE4typeES3_E4typeE");
	set_cmt	(0X7100071C50,	"reference to type's name",	0);
	create_qword	(x=0X7100071C50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071C58,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071C58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071C60,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071C60,	E_PREV + 0,	"; public \x01\b\x01(0000007100071C60nn::sf::UnmanagedServiceObject<nn::ins::ISenderManager,nn::ins::server::SenderManagerImpl>\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100071C48nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tAB<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,nn::ins::ISenderManager>::type\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100071C10nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,nn::ins::ISenderManager>::type\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100071B78nn::ins::ISenderManager\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100071C60,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(0000007100071BE8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type,void>\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 7,	";         protected /* offset 0x0 */ \x01\b\x01(0000007100071BD0nn::sf::InterfaceInfo<nn::ins::ISenderManager>::_tO2N<nn::ins::server::SenderManagerImpl>::type\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 8,	";           public /* offset 0x0 */ \x01\b\x01(0000007100071BA8nn::sf::detail::ObjectHolderImpl<nn::ins::server::SenderManagerImpl,void>\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 9,	";             protected /* offset 0x0 */ \x01\b\x01(0000007100071B90nn::ins::server::SenderManagerImpl\x02\b :");
	update_extra_cmt		(0X7100071C60,	E_PREV + 10,	";               public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100071C60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071C60,	"_ZTIN2nn2sf22UnmanagedServiceObjectINS_3ins14ISenderManagerENS2_6server17SenderManagerImplEEE");
	set_cmt	(0X7100071C68,	"reference to type's name",	0);
	create_qword	(x=0X7100071C68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071C70,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071C70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071C78,	"offset to this",	0);
	create_qword	(x=0X7100071C78);
	op_dec		(x,	0);
	set_name	(0X7100071C78,	"_ZTVN2nn3ins14ISenderManagerE");
	create_qword	(x=0X7100071C80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071C88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071C90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071C98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071CB0,	"offset to this",	0);
	create_qword	(x=0X7100071CB0);
	op_dec		(x,	0);
	set_name	(0X7100071CB0,	"_ZTVN2nn3ins6server12_GLOBAL__N_113ServerManagerE");
	create_qword	(x=0X7100071CB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071CF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071D68,	"offset to this",	0);
	create_qword	(x=0X7100071D68);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100071D70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071D88,	"offset to this",	0);
	create_qword	(x=0X7100071D88);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100071D90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071D98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071DA0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071DA0,	E_PREV + 0,	"; public \x01\b\x01(0000007100071DA0nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<8ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::ins::server::`anonymous namespace'::ServerManagerOptions>>\x02\b :");
	update_extra_cmt		(0X7100071DA0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X7100071DA0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X7100071DA0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X7100071DA0,	E_PREV + 4,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X7100071DA0,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X7100071DA0,	E_PREV + 6,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X7100071DA0,	E_PREV + 7,	";       protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b");
	create_qword	(x=0X7100071DA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071DA0,	"_ZTIN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm8ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_3ins6server12_GLOBAL__N_120ServerManagerOptionsEEEEE");
	set_cmt	(0X7100071DA8,	"reference to type's name",	0);
	create_qword	(x=0X7100071DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071DB0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071DB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071DB8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071DB8,	E_PREV + 0,	"; public \x01\b\x01(0000007100071DB8nn::sf::HipcSimpleAllInOneServerManager<8ul,2ul,nn::ins::server::`anonymous namespace'::ServerManagerOptions>\x02\b :");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(0000007100071DA0nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<8ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::ins::server::`anonymous namespace'::ServerManagerOptions>>\x02\b :");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 5,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 6,	";             public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 7,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 8,	";         protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b,");
	update_extra_cmt		(0X7100071DB8,	E_PREV + 9,	";   public /* offset 0x17e8 */ \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X7100071DB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071DB8,	"_ZTIN2nn2sf31HipcSimpleAllInOneServerManagerILm8ELm2ENS_3ins6server12_GLOBAL__N_120ServerManagerOptionsEEE");
	set_cmt	(0X7100071DC0,	"reference to type's name",	0);
	create_qword	(x=0X7100071DC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071DC8,	"attribute",	0);
	create_dword	(x=0X7100071DC8);
	op_hex		(x,	0);
	set_cmt	(0X7100071DCC,	"count of base classes",	0);
	create_dword	(x=0X7100071DCC);
	op_dec		(x,	0);
	set_cmt	(0X7100071DD0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071DD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071DD8,	"base class' attributes\noffset to this",	0);
	create_qword	(x=0X7100071DD8);
	op_dec		(x,	0);
	set_name	(0X7100071DD8,	"_ZTVN2nn2sf34HipcServerSessionManagerCommonBaseE");
	set_cmt	(0X7100071DE0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100071DE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071DE8,	"base class' attributes",	0);
	create_qword	(x=0X7100071DE8);
	op_hex		(x,	0);
	set_cmt	(0X7100071DF0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100071DF0,	E_PREV + 0,	"; public \x01\b\x01(0000007100071DF0nn::ins::server::`anonymous namespace'::ServerManager\x02\b :");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100071DB8nn::sf::HipcSimpleAllInOneServerManager<8ul,2ul,nn::ins::server::`anonymous namespace'::ServerManagerOptions>\x02\b :");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 2,	";     protected /* offset 0x0 */ \x01\b\x01(0000007100071DA0nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<8ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::ins::server::`anonymous namespace'::ServerManagerOptions>>\x02\b :");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 6,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 7,	";               public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 8,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 9,	";           protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b,");
	update_extra_cmt		(0X7100071DF0,	E_PREV + 10,	";     public /* offset 0x17e8 */ \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X7100071DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100071DF0,	"_ZTIN2nn3ins6server12_GLOBAL__N_113ServerManagerE");
	set_cmt	(0X7100071DF8,	"reference to type's name",	0);
	create_qword	(x=0X7100071DF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071E00,	"reference to parent's type name",	0);
	create_qword	(x=0X7100071E00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071E08,	"offset to this",	0);
	create_qword	(x=0X7100071E08);
	op_dec		(x,	0);
	set_name	(0X7100071E08,	"_ZTVN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm8ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_3ins6server12_GLOBAL__N_120ServerManagerOptionsEEEEE");
	create_qword	(x=0X7100071E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071E98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071EA0,	"offset to this",	0);
	create_qword	(x=0X7100071EA0);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100071EA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071EB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071EB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071EC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071EC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071ED0,	"offset to this",	0);
	create_qword	(x=0X7100071ED0);
	op_dec		(x,	0);
	set_name	(0X7100071ED0,	"_ZTVN2nn3ins6server19ReceiverManagerImplE");
	create_qword	(x=0X7100071ED8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071EE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071EE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100071EF0,	"offset to this",	0);
	create_qword	(x=0X7100071EF0);
	op_dec		(x,	0);
	set_name	(0X7100071EF0,	"_ZTVN2nn3ins6server17SenderManagerImplE");
	create_qword	(x=0X7100071EF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071F98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X7100071FB0,	0X10);
	create_qword	(x=0X7100071FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100071FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000720F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072110);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072148);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072178);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072188);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072190);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072198);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000721A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000721A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000721B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000721B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000721C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000721D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000721E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000721F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072208);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072218);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072220);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072228);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072230);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072238);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072240);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072248);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072250);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072270);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072278);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072280);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072288);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072290);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000722F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072300);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072308);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072320);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072340);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072350);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072358);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072360);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072368);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072380);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072388);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000723E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072400);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072408);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072410);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072418);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072420);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072428);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072430);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072438);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072440);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072460);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072468);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072470);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072478);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X7100072484);
	make_array	(0X7100072488,	0X8);
	create_qword	(x=0X7100072490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072498);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000724A0,	"offset to this",	0);
	create_qword	(x=0X71000724A0);
	op_dec		(x,	0);
	set_name	(0X71000724A0,	"_ZTVN2nn5srepo7service12_GLOBAL__N_125SrepoServiceServerManagerE");
	create_qword	(x=0X71000724A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000724F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072500);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072508);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072510);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072518);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072520);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072528);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072530);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072538);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072548);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072550);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072558,	"offset to this",	0);
	create_qword	(x=0X7100072558);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100072560);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072578,	"offset to this",	0);
	create_qword	(x=0X7100072578);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100072580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072590,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072590,	E_PREV + 0,	"; public \x01\b\x01(0000007100072590nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<32ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::srepo::service::`anonymous namespace'::SrepoServiceHipcSimpleAllInOneServerManagerOption>>\x02\b :");
	update_extra_cmt		(0X7100072590,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X7100072590,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X7100072590,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X7100072590,	E_PREV + 4,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X7100072590,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X7100072590,	E_PREV + 6,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X7100072590,	E_PREV + 7,	";       protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b");
	create_qword	(x=0X7100072590);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072590,	"_ZTIN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm32ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_5srepo7service12_GLOBAL__N_149SrepoServiceHipcSimpleAllInOneServerManagerOptionEEEEE");
	set_cmt	(0X7100072598,	"reference to type's name",	0);
	create_qword	(x=0X7100072598);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000725A0,	"reference to parent's type name",	0);
	create_qword	(x=0X71000725A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000725A8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000725A8,	E_PREV + 0,	"; public \x01\b\x01(00000071000725A8nn::sf::HipcSimpleAllInOneServerManager<32ul,2ul,nn::srepo::service::`anonymous namespace'::SrepoServiceHipcSimpleAllInOneServerManagerOption>\x02\b :");
	update_extra_cmt		(0X71000725A8,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(0000007100072590nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<32ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::srepo::service::`anonymous namespace'::SrepoServiceHipcSimpleAllInOneServerManagerOption>>\x02\b :");
	update_extra_cmt		(0X71000725A8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X71000725A8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X71000725A8,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X71000725A8,	E_PREV + 5,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X71000725A8,	E_PREV + 6,	";             public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X71000725A8,	E_PREV + 7,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X71000725A8,	E_PREV + 8,	";         protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b,");
	update_extra_cmt		(0X71000725A8,	E_PREV + 9,	";   public /* offset 0x4e78 */ \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X71000725A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000725A8,	"_ZTIN2nn2sf31HipcSimpleAllInOneServerManagerILm32ELm2ENS_5srepo7service12_GLOBAL__N_149SrepoServiceHipcSimpleAllInOneServerManagerOptionEEE");
	set_cmt	(0X71000725B0,	"reference to type's name",	0);
	create_qword	(x=0X71000725B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000725B8,	"attribute",	0);
	create_dword	(x=0X71000725B8);
	op_hex		(x,	0);
	set_cmt	(0X71000725BC,	"count of base classes",	0);
	create_dword	(x=0X71000725BC);
	op_dec		(x,	0);
	set_cmt	(0X71000725C0,	"base class' type descriptor",	0);
	create_qword	(x=0X71000725C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000725C8,	"base class' attributes\noffset to this",	0);
	create_qword	(x=0X71000725C8);
	op_dec		(x,	0);
	set_name	(0X71000725C8,	"_ZTVN2nn2sf34HipcServerSessionManagerCommonBaseE_0");
	set_cmt	(0X71000725D0,	"base class' type descriptor",	0);
	create_qword	(x=0X71000725D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000725D8,	"base class' attributes",	0);
	create_qword	(x=0X71000725D8);
	op_hex		(x,	0);
	set_cmt	(0X71000725E0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000725E0,	E_PREV + 0,	"; public \x01\b\x01(00000071000725E0nn::srepo::service::`anonymous namespace'::SrepoServiceServerManager\x02\b :");
	update_extra_cmt		(0X71000725E0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000725A8nn::sf::HipcSimpleAllInOneServerManager<32ul,2ul,nn::srepo::service::`anonymous namespace'::SrepoServiceHipcSimpleAllInOneServerManagerOption>\x02\b :");
	update_extra_cmt		(0X71000725E0,	E_PREV + 2,	";     protected /* offset 0x0 */ \x01\b\x01(0000007100072590nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<32ul,2ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::srepo::service::`anonymous namespace'::SrepoServiceHipcSimpleAllInOneServerManagerOption>>\x02\b :");
	update_extra_cmt		(0X71000725E0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X71000725E0,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X71000725E0,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X71000725E0,	E_PREV + 6,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X71000725E0,	E_PREV + 7,	";               public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X71000725E0,	E_PREV + 8,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X71000725E0,	E_PREV + 9,	";           protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b,");
	update_extra_cmt		(0X71000725E0,	E_PREV + 10,	";     public /* offset 0x4e78 */ \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X71000725E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000725E0,	"_ZTIN2nn5srepo7service12_GLOBAL__N_125SrepoServiceServerManagerE");
	set_cmt	(0X71000725E8,	"reference to type's name",	0);
	create_qword	(x=0X71000725E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000725F0,	"reference to parent's type name",	0);
	create_qword	(x=0X71000725F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000725F8,	"offset to this",	0);
	create_qword	(x=0X71000725F8);
	op_dec		(x,	0);
	set_name	(0X71000725F8,	"_ZTVN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm32ELm2ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_5srepo7service12_GLOBAL__N_149SrepoServiceHipcSimpleAllInOneServerManagerOptionEEEEE");
	create_qword	(x=0X7100072600);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072608);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072610);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072620);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072628);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072638);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072658);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072660);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072668);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072670);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072690,	"offset to this",	0);
	create_qword	(x=0X7100072690);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100072698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000726C8,	"offset to this",	0);
	create_qword	(x=0X71000726C8);
	op_dec		(x,	0);
	set_name	(0X71000726C8,	"_ZTVN2nn2sf22UnmanagedServiceObjectINS_5srepo6detail3ipc13ISrepoServiceENS3_7service12SrepoServiceEEE");
	create_qword	(x=0X71000726D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000726F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072718);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072728);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072740);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072750);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072760);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072798);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000727F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072800);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072808);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072810,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072810,	E_PREV + 0,	"; public \x01\b\x01(0000007100072810nn::srepo::detail::ipc::ISrepoService\x02\b :");
	update_extra_cmt		(0X7100072810,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072810,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100072810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072810,	"_ZTIN2nn5srepo6detail3ipc13ISrepoServiceE");
	set_cmt	(0X7100072818,	"reference to type's name",	0);
	create_qword	(x=0X7100072818);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072820,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072820);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072828,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072828,	E_PREV + 0,	"; public \x01\b\x01(0000007100072828nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,void>\x02\b");
	create_qword	(x=0X7100072828);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072828,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISrepoServiceEE5_tO2NINS5_7service12SrepoServiceEE4typeEvEE");
	set_cmt	(0X7100072830,	"reference to type's name",	0);
	create_qword	(x=0X7100072830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072838,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072838,	E_PREV + 0,	"; public \x01\b\x01(0000007100072838nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,nn::srepo::detail::ipc::ISrepoService>::type\x02\b :");
	update_extra_cmt		(0X7100072838,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072810nn::srepo::detail::ipc::ISrepoService\x02\b :");
	update_extra_cmt		(0X7100072838,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072838,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072838,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100072828nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,void>\x02\b");
	create_qword	(x=0X7100072838);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072838,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISrepoServiceEE5_tO2NINS8_7service12SrepoServiceEE4typeESA_E4typeE");
	set_cmt	(0X7100072840,	"reference to type's name",	0);
	create_qword	(x=0X7100072840);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072848,	"attribute",	0);
	create_dword	(x=0X7100072848);
	op_hex		(x,	0);
	set_cmt	(0X710007284C,	"count of base classes",	0);
	create_dword	(x=0X710007284C);
	op_dec		(x,	0);
	set_cmt	(0X7100072850,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072850);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072858,	"base class' attributes",	0);
	create_qword	(x=0X7100072858);
	op_hex		(x,	0);
	set_cmt	(0X7100072860,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072860);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072868,	"base class' attributes",	0);
	create_qword	(x=0X7100072868);
	op_hex		(x,	0);
	set_cmt	(0X7100072870,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072870,	E_PREV + 0,	"; public \x01\b\x01(0000007100072870nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,nn::srepo::detail::ipc::ISrepoService>::type\x02\b :");
	update_extra_cmt		(0X7100072870,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072838nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,nn::srepo::detail::ipc::ISrepoService>::type\x02\b :");
	update_extra_cmt		(0X7100072870,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100072810nn::srepo::detail::ipc::ISrepoService\x02\b :");
	update_extra_cmt		(0X7100072870,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072870,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072870,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100072828nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,void>\x02\b");
	create_qword	(x=0X7100072870);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072870,	"_ZTIN2nn2sf13InterfaceInfoINS_5srepo6detail3ipc13ISrepoServiceEE4_tABINS6_5_tO2NINS3_7service12SrepoServiceEE4typeES5_E4typeE");
	set_cmt	(0X7100072878,	"reference to type's name",	0);
	create_qword	(x=0X7100072878);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072880,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072880);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072888,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072888,	E_PREV + 0,	"; public \x01\b\x01(0000007100072888nn::sf::UnmanagedServiceObject<nn::srepo::detail::ipc::ISrepoService,nn::srepo::detail::service::SrepoService>\x02\b :");
	update_extra_cmt		(0X7100072888,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072870nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,nn::srepo::detail::ipc::ISrepoService>::type\x02\b :");
	update_extra_cmt		(0X7100072888,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100072838nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,nn::srepo::detail::ipc::ISrepoService>::type\x02\b :");
	update_extra_cmt		(0X7100072888,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100072810nn::srepo::detail::ipc::ISrepoService\x02\b :");
	update_extra_cmt		(0X7100072888,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072888,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072888,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(0000007100072828nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISrepoService>::_tO2N<nn::srepo::detail::service::SrepoService>::type,void>\x02\b");
	create_qword	(x=0X7100072888);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072888,	"_ZTIN2nn2sf22UnmanagedServiceObjectINS_5srepo6detail3ipc13ISrepoServiceENS3_7service12SrepoServiceEEE");
	set_cmt	(0X7100072890,	"reference to type's name",	0);
	create_qword	(x=0X7100072890);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072898,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072898);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000728A0,	"offset to this",	0);
	create_qword	(x=0X71000728A0);
	op_dec		(x,	0);
	set_name	(0X71000728A0,	"_ZTVN2nn5srepo6detail3ipc13ISrepoServiceE");
	create_qword	(x=0X71000728A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000728F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072900);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072908);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072910);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072918);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072928);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072940);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072948);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072958);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072960);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072970);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072978);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072988);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000729E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X71000729E8);
	make_array	(0X71000729E9,	0X7);
	create_qword	(0X71000729F0);
	create_qword	(0X71000729F8);
	create_qword	(x=0X7100072A00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X7100072A10);
	set_cmt	(0X7100072A18,	"offset to this",	0);
	create_qword	(x=0X7100072A18);
	op_dec		(x,	0);
	set_name	(0X7100072A18,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE4_tABINS8_5_tO2NINS5_7service29ForegroundTransmissionContextEE4typeES7_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	create_qword	(x=0X7100072A20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072A28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072A30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072A38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072A40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072A48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072A50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072A58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072A60,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072A60,	E_PREV + 0,	"; public \x01\b\x01(0000007100072A60nn::srepo::detail::ipc::IAsyncContext\x02\b :");
	update_extra_cmt		(0X7100072A60,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072A60,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100072A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072A60,	"_ZTIN2nn5srepo6detail3ipc13IAsyncContextE");
	set_cmt	(0X7100072A68,	"reference to type's name",	0);
	create_qword	(x=0X7100072A68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072A70,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072A70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072A78,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072A78,	E_PREV + 0,	"; public \x01\b\x01(0000007100072A78nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,void>\x02\b");
	create_qword	(x=0X7100072A78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072A78,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE5_tO2NINS5_7service29ForegroundTransmissionContextEE4typeEvEE");
	set_cmt	(0X7100072A80,	"reference to type's name",	0);
	create_qword	(x=0X7100072A80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072A88,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072A88,	E_PREV + 0,	"; public \x01\b\x01(0000007100072A88nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,nn::srepo::detail::ipc::IAsyncContext>::type\x02\b :");
	update_extra_cmt		(0X7100072A88,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072A60nn::srepo::detail::ipc::IAsyncContext\x02\b :");
	update_extra_cmt		(0X7100072A88,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072A88,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072A88,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100072A78nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,void>\x02\b");
	create_qword	(x=0X7100072A88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072A88,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE5_tO2NINS8_7service29ForegroundTransmissionContextEE4typeESA_E4typeE");
	set_cmt	(0X7100072A90,	"reference to type's name",	0);
	create_qword	(x=0X7100072A90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072A98,	"attribute",	0);
	create_dword	(x=0X7100072A98);
	op_hex		(x,	0);
	set_cmt	(0X7100072A9C,	"count of base classes",	0);
	create_dword	(x=0X7100072A9C);
	op_dec		(x,	0);
	set_cmt	(0X7100072AA0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072AA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072AA8,	"base class' attributes",	0);
	create_qword	(x=0X7100072AA8);
	op_hex		(x,	0);
	set_cmt	(0X7100072AB0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072AB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072AB8,	"base class' attributes",	0);
	create_qword	(x=0X7100072AB8);
	op_hex		(x,	0);
	set_cmt	(0X7100072AC0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072AC0,	E_PREV + 0,	"; public \x01\b\x01(0000007100072AC0nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,nn::srepo::detail::ipc::IAsyncContext>::type\x02\b :");
	update_extra_cmt		(0X7100072AC0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072A88nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,nn::srepo::detail::ipc::IAsyncContext>::type\x02\b :");
	update_extra_cmt		(0X7100072AC0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100072A60nn::srepo::detail::ipc::IAsyncContext\x02\b :");
	update_extra_cmt		(0X7100072AC0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072AC0,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072AC0,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100072A78nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,void>\x02\b");
	create_qword	(x=0X7100072AC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072AC0,	"_ZTIN2nn2sf13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE4_tABINS6_5_tO2NINS3_7service29ForegroundTransmissionContextEE4typeES5_E4typeE");
	set_cmt	(0X7100072AC8,	"reference to type's name",	0);
	create_qword	(x=0X7100072AC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072AD0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072AD8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072AD8,	E_PREV + 0,	"; public \x01\b\x01(0000007100072AD8nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,nn::srepo::detail::ipc::IAsyncContext>::type,nn::sf::MemoryResourceAllocationPolicy>::Object\x02\b :");
	update_extra_cmt		(0X7100072AD8,	E_PREV + 1,	";   protected /* offset 0x120 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X7100072AD8,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072AC0nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,nn::srepo::detail::ipc::IAsyncContext>::type\x02\b :");
	update_extra_cmt		(0X7100072AD8,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(0000007100072A88nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,nn::srepo::detail::ipc::IAsyncContext>::type\x02\b :");
	update_extra_cmt		(0X7100072AD8,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(0000007100072A60nn::srepo::detail::ipc::IAsyncContext\x02\b :");
	update_extra_cmt		(0X7100072AD8,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072AD8,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072AD8,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(0000007100072A78nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::IAsyncContext>::_tO2N<nn::srepo::detail::service::ForegroundTransmissionContext>::type,void>\x02\b");
	create_qword	(x=0X7100072AD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072AD8,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_5srepo6detail3ipc13IAsyncContextEE4_tABINS8_5_tO2NINS5_7service29ForegroundTransmissionContextEE4typeES7_E4typeENS0_30MemoryResourceAllocationPolicyEE6ObjectE");
	set_cmt	(0X7100072AE0,	"reference to type's name",	0);
	create_qword	(x=0X7100072AE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072AE8,	"attribute",	0);
	create_dword	(x=0X7100072AE8);
	op_hex		(x,	0);
	set_cmt	(0X7100072AEC,	"count of base classes",	0);
	create_dword	(x=0X7100072AEC);
	op_dec		(x,	0);
	set_cmt	(0X7100072AF0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072AF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072AF8,	"base class' attributes",	0);
	create_qword	(x=0X7100072AF8);
	op_hex		(x,	0);
	set_cmt	(0X7100072B00,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072B00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072B08,	"base class' attributes",	0);
	create_qword	(x=0X7100072B08);
	op_hex		(x,	0);
	set_cmt	(0X7100072B10,	"offset to this",	0);
	create_qword	(x=0X7100072B10);
	op_dec		(x,	0);
	set_name	(0X7100072B10,	"_ZTVN2nn5srepo6detail3ipc13IAsyncContextE");
	create_qword	(x=0X7100072B18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072B58,	"offset to this",	0);
	create_qword	(x=0X7100072B58);
	op_dec		(x,	0);
	set_name	(0X7100072B58,	"_ZTVN2nn4util6detail8FunctionIFvRNS_5srepo6detail7service29ForegroundTransmissionContextEEZNS5_12SrepoService9PopReportENS_2sf3OutIivEENSB_INS_7account3UidEvEERKNSA_8OutArrayIcEENSB_INS_13ApplicationIdEvEENSB_INS0_4UuidEvEENSB_IbvEESO_NSB_IlvEERKNSA_9OutBufferEE3$_0vEE");
	create_qword	(x=0X7100072B60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072B80,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072B80,	E_PREV + 0,	"; public \x01\b\x01(0000007100072B80nn::util::IFunction<void ()(nn::srepo::detail::service::ForegroundTransmissionContext &)>\x02\b");
	create_qword	(x=0X7100072B80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072B80,	"_ZTIN2nn4util9IFunctionIFvRNS_5srepo6detail7service29ForegroundTransmissionContextEEEE");
	set_cmt	(0X7100072B88,	"reference to type's name",	0);
	create_qword	(x=0X7100072B88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072B90,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072B90,	E_PREV + 0,	"; public \x01\b\x01(0000007100072B90nn::srepo::detail::service::SrepoService::PopReport(nn::sf::Out<int,void>,nn::sf::Out<nn::account::Uid,void>,nn::sf::OutArray<char> const&,nn::sf::Out<nn::ApplicationId,void>,nn::sf::Out<nn::util::Uuid,void>,nn::sf::Out<bool,void>,nn::sf::Out<bool,void>,nn::sf::Out<long,void>,nn::sf::OutBuffer const&)::$_0\x02\b");
	create_qword	(x=0X7100072B90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072B90,	"_ZTIZN2nn5srepo6detail7service12SrepoService9PopReportENS_2sf3OutIivEENS5_INS_7account3UidEvEERKNS4_8OutArrayIcEENS5_INS_13ApplicationIdEvEENS5_INS_4util4UuidEvEENS5_IbvEESJ_NS5_IlvEERKNS4_9OutBufferEE3$_0");
	set_cmt	(0X7100072B98,	"reference to type's name",	0);
	create_qword	(x=0X7100072B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072BA0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072BA0,	E_PREV + 0,	"; public \x01\b\x01(0000007100072BA0nn::util::detail::Function<void ()(nn::srepo::detail::service::ForegroundTransmissionContext &),nn::srepo::detail::service::SrepoService::PopReport(nn::sf::Out<int,void>,nn::sf::Out<nn::account::Uid,void>,nn::sf::OutArray<char> const&,nn::sf::Out<nn::ApplicationId,void>,nn::sf::Out<nn::util::Uuid,void>,nn::sf::Out<bool,void>,nn::sf::Out<bool,void>,nn::sf::Out<long,void>,nn::sf::OutBuffer const&)::$_0,void>\x02\b :");
	update_extra_cmt		(0X7100072BA0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072B80nn::util::IFunction<void ()(nn::srepo::detail::service::ForegroundTransmissionContext &)>\x02\b,");
	update_extra_cmt		(0X7100072BA0,	E_PREV + 2,	";   protected /* offset 0x8 */ \x01\b\x01(0000007100072B90nn::srepo::detail::service::SrepoService::PopReport(nn::sf::Out<int,void>,nn::sf::Out<nn::account::Uid,void>,nn::sf::OutArray<char> const&,nn::sf::Out<nn::ApplicationId,void>,nn::sf::Out<nn::util::Uuid,void>,nn::sf::Out<bool,void>,nn::sf::Out<bool,void>,nn::sf::Out<long,void>,nn::sf::OutBuffer const&)::$_0\x02\b");
	create_qword	(x=0X7100072BA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072BA0,	"_ZTIN2nn4util6detail8FunctionIFvRNS_5srepo6detail7service29ForegroundTransmissionContextEEZNS5_12SrepoService9PopReportENS_2sf3OutIivEENSB_INS_7account3UidEvEERKNSA_8OutArrayIcEENSB_INS_13ApplicationIdEvEENSB_INS0_4UuidEvEENSB_IbvEESO_NSB_IlvEERKNSA_9OutBufferEE3$_0vEE");
	set_cmt	(0X7100072BA8,	"reference to type's name",	0);
	create_qword	(x=0X7100072BA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072BB0,	"attribute",	0);
	create_dword	(x=0X7100072BB0);
	op_hex		(x,	0);
	set_cmt	(0X7100072BB4,	"count of base classes",	0);
	create_dword	(x=0X7100072BB4);
	op_dec		(x,	0);
	set_cmt	(0X7100072BB8,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072BB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072BC0,	"base class' attributes",	0);
	create_qword	(x=0X7100072BC0);
	op_hex		(x,	0);
	set_cmt	(0X7100072BC8,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072BC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072BD0,	"base class' attributes",	0);
	create_qword	(x=0X7100072BD0);
	op_hex		(x,	0);
	set_cmt	(0X7100072BD8,	"offset to this",	0);
	create_qword	(x=0X7100072BD8);
	op_dec		(x,	0);
	set_name	(0X7100072BD8,	"_ZTVN2nn2sf6detail39ObjectImplFactoryWithStatelessAllocatorINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE4_tABINS8_5_tO2NINS5_7service12SyslogLoggerINSB_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeES7_E4typeENS0_25StatelessAllocationPolicyINS0_22ExpHeapStaticAllocatorILm1168ENSB_20ServiceObjectFactoryILi16ES7_SG_E12InterfaceTagEEEEEE6ObjectE");
	create_qword	(x=0X7100072BE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072BE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072BF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072C00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072C08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C10,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072C10,	E_PREV + 0,	"; public \x01\b\x01(0000007100072C10nn::srepo::detail::ipc::ISyslogLogger\x02\b :");
	update_extra_cmt		(0X7100072C10,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072C10,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100072C10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072C10,	"_ZTIN2nn5srepo6detail3ipc13ISyslogLoggerE");
	set_cmt	(0X7100072C18,	"reference to type's name",	0);
	create_qword	(x=0X7100072C18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C20,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072C20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C28,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072C28,	E_PREV + 0,	"; public \x01\b\x01(0000007100072C28nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,void>\x02\b");
	create_qword	(x=0X7100072C28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072C28,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE5_tO2NINS5_7service12SyslogLoggerINSA_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeEvEE");
	set_cmt	(0X7100072C30,	"reference to type's name",	0);
	create_qword	(x=0X7100072C30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C38,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072C38,	E_PREV + 0,	"; public \x01\b\x01(0000007100072C38nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,nn::srepo::detail::ipc::ISyslogLogger>::type\x02\b :");
	update_extra_cmt		(0X7100072C38,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072C10nn::srepo::detail::ipc::ISyslogLogger\x02\b :");
	update_extra_cmt		(0X7100072C38,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072C38,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072C38,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100072C28nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,void>\x02\b");
	create_qword	(x=0X7100072C38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072C38,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE5_tO2NINS8_7service12SyslogLoggerINSD_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeESA_E4typeE");
	set_cmt	(0X7100072C40,	"reference to type's name",	0);
	create_qword	(x=0X7100072C40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C48,	"attribute",	0);
	create_dword	(x=0X7100072C48);
	op_hex		(x,	0);
	set_cmt	(0X7100072C4C,	"count of base classes",	0);
	create_dword	(x=0X7100072C4C);
	op_dec		(x,	0);
	set_cmt	(0X7100072C50,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072C50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C58,	"base class' attributes",	0);
	create_qword	(x=0X7100072C58);
	op_hex		(x,	0);
	set_cmt	(0X7100072C60,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072C60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C68,	"base class' attributes",	0);
	create_qword	(x=0X7100072C68);
	op_hex		(x,	0);
	set_cmt	(0X7100072C70,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072C70,	E_PREV + 0,	"; public \x01\b\x01(0000007100072C70nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,nn::srepo::detail::ipc::ISyslogLogger>::type\x02\b :");
	update_extra_cmt		(0X7100072C70,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072C38nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,nn::srepo::detail::ipc::ISyslogLogger>::type\x02\b :");
	update_extra_cmt		(0X7100072C70,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100072C10nn::srepo::detail::ipc::ISyslogLogger\x02\b :");
	update_extra_cmt		(0X7100072C70,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072C70,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072C70,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100072C28nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,void>\x02\b");
	create_qword	(x=0X7100072C70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072C70,	"_ZTIN2nn2sf13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE4_tABINS6_5_tO2NINS3_7service12SyslogLoggerINS9_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeES5_E4typeE");
	set_cmt	(0X7100072C78,	"reference to type's name",	0);
	create_qword	(x=0X7100072C78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C80,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072C80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C88,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072C88,	E_PREV + 0,	"; public \x01\b\x01(0000007100072C88nn::sf::detail::ObjectImplFactoryWithStatelessAllocator<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,nn::srepo::detail::ipc::ISyslogLogger>::type,nn::sf::StatelessAllocationPolicy<nn::sf::ExpHeapStaticAllocator<1168ul,nn::srepo::detail::service::ServiceObjectFactory<16,nn::srepo::detail::ipc::ISyslogLogger,nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::InterfaceTag>>>::Object\x02\b :");
	update_extra_cmt		(0X7100072C88,	E_PREV + 1,	";   protected /* offset 0x18 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X7100072C88,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072C70nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,nn::srepo::detail::ipc::ISyslogLogger>::type\x02\b :");
	update_extra_cmt		(0X7100072C88,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(0000007100072C38nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,nn::srepo::detail::ipc::ISyslogLogger>::type\x02\b :");
	update_extra_cmt		(0X7100072C88,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(0000007100072C10nn::srepo::detail::ipc::ISyslogLogger\x02\b :");
	update_extra_cmt		(0X7100072C88,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100072C88,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100072C88,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(0000007100072C28nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::srepo::detail::ipc::ISyslogLogger>::_tO2N<nn::srepo::detail::service::SyslogLogger<nn::srepo::detail::service::core::SharedMemoryAllocator<28672ul,28>>>::type,void>\x02\b");
	create_qword	(x=0X7100072C88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072C88,	"_ZTIN2nn2sf6detail39ObjectImplFactoryWithStatelessAllocatorINS0_13InterfaceInfoINS_5srepo6detail3ipc13ISyslogLoggerEE4_tABINS8_5_tO2NINS5_7service12SyslogLoggerINSB_4core21SharedMemoryAllocatorILm28672ELi28EEEEEE4typeES7_E4typeENS0_25StatelessAllocationPolicyINS0_22ExpHeapStaticAllocatorILm1168ENSB_20ServiceObjectFactoryILi16ES7_SG_E12InterfaceTagEEEEEE6ObjectE");
	set_cmt	(0X7100072C90,	"reference to type's name",	0);
	create_qword	(x=0X7100072C90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072C98,	"attribute",	0);
	create_dword	(x=0X7100072C98);
	op_hex		(x,	0);
	set_cmt	(0X7100072C9C,	"count of base classes",	0);
	create_dword	(x=0X7100072C9C);
	op_dec		(x,	0);
	set_cmt	(0X7100072CA0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072CA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072CA8,	"base class' attributes",	0);
	create_qword	(x=0X7100072CA8);
	op_hex		(x,	0);
	set_cmt	(0X7100072CB0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100072CB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072CB8,	"base class' attributes",	0);
	create_qword	(x=0X7100072CB8);
	op_hex		(x,	0);
	set_cmt	(0X7100072CC0,	"offset to this",	0);
	create_qword	(x=0X7100072CC0);
	op_dec		(x,	0);
	set_name	(0X7100072CC0,	"_ZTVN2nn5srepo6detail3ipc13ISyslogLoggerE");
	create_qword	(x=0X7100072CC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072CD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072CD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072CE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072CE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072CF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072CF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X7100072D30);
	create_qword	(x=0X7100072D38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072D88,	"offset to this",	0);
	create_qword	(x=0X7100072D88);
	op_dec		(x,	0);
	set_name	(0X7100072D88,	"_ZTVN2nn5srepo6detail7service4core25OneUserStateChangeManagerE");
	create_qword	(x=0X7100072D90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072D98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072DA0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072DA0,	E_PREV + 0,	"; public \x01\b\x01(0000007100072DA0nn::srepo::detail::service::core::MultiStateChangePointManager<nn::srepo::detail::service::core::UserDurationKind>\x02\b");
	create_qword	(x=0X7100072DA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072DA0,	"_ZTIN2nn5srepo6detail7service4core28MultiStateChangePointManagerINS3_16UserDurationKindEEE");
	set_cmt	(0X7100072DA8,	"reference to type's name",	0);
	create_qword	(x=0X7100072DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072DB0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072DB0,	E_PREV + 0,	"; public \x01\b\x01(0000007100072DB0nn::srepo::detail::service::core::OneUserStateChangeManager\x02\b :");
	update_extra_cmt		(0X7100072DB0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072DA0nn::srepo::detail::service::core::MultiStateChangePointManager<nn::srepo::detail::service::core::UserDurationKind>\x02\b");
	create_qword	(x=0X7100072DB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072DB0,	"_ZTIN2nn5srepo6detail7service4core25OneUserStateChangeManagerE");
	set_cmt	(0X7100072DB8,	"reference to type's name",	0);
	create_qword	(x=0X7100072DB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072DC0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072DC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072DC8,	"offset to this",	0);
	create_qword	(x=0X7100072DC8);
	op_dec		(x,	0);
	set_name	(0X7100072DC8,	"_ZTVN2nn5srepo6detail7service4core24SystemStateChangeManagerE");
	create_qword	(x=0X7100072DD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072DD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072DE0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072DE0,	E_PREV + 0,	"; public \x01\b\x01(0000007100072DE0nn::srepo::detail::service::core::MultiStateChangePointManager<nn::srepo::detail::service::core::SystemDurationKind>\x02\b");
	create_qword	(x=0X7100072DE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072DE0,	"_ZTIN2nn5srepo6detail7service4core28MultiStateChangePointManagerINS3_18SystemDurationKindEEE");
	set_cmt	(0X7100072DE8,	"reference to type's name",	0);
	create_qword	(x=0X7100072DE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072DF0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072DF0,	E_PREV + 0,	"; public \x01\b\x01(0000007100072DF0nn::srepo::detail::service::core::SystemStateChangeManager\x02\b :");
	update_extra_cmt		(0X7100072DF0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072DE0nn::srepo::detail::service::core::MultiStateChangePointManager<nn::srepo::detail::service::core::SystemDurationKind>\x02\b");
	create_qword	(x=0X7100072DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072DF0,	"_ZTIN2nn5srepo6detail7service4core24SystemStateChangeManagerE");
	set_cmt	(0X7100072DF8,	"reference to type's name",	0);
	create_qword	(x=0X7100072DF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E00,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072E00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E08,	"offset to this",	0);
	create_qword	(x=0X7100072E08);
	op_dec		(x,	0);
	set_name	(0X7100072E08,	"_ZTVN2nn7timesrv6detail7service29LocalSystemClockContextWriterE");
	create_qword	(x=0X7100072E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E20,	"offset to this",	0);
	create_qword	(x=0X7100072E20);
	op_dec		(x,	0);
	set_name	(0X7100072E20,	"_ZTVN2nn7timesrv6detail7service31NetworkSystemClockContextWriterE");
	create_qword	(x=0X7100072E28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072E30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E38,	"offset to this",	0);
	create_qword	(x=0X7100072E38);
	op_dec		(x,	0);
	set_name	(0X7100072E38,	"_ZTVN2nn7timesrv6detail7service40EphemeralNetworkSystemClockContextWriterE");
	create_qword	(x=0X7100072E40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072E48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E50,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072E50,	E_PREV + 0,	"; public \x01\b\x01(0000007100072E50nn::timesrv::detail::core::SystemClockContextUpdateCallback\x02\b");
	create_qword	(x=0X7100072E50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072E50,	"_ZTIN2nn7timesrv6detail4core32SystemClockContextUpdateCallbackE");
	set_cmt	(0X7100072E58,	"reference to type's name",	0);
	create_qword	(x=0X7100072E58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E60,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072E60,	E_PREV + 0,	"; public \x01\b\x01(0000007100072E60nn::timesrv::detail::service::LocalSystemClockContextWriter\x02\b :");
	update_extra_cmt		(0X7100072E60,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072E50nn::timesrv::detail::core::SystemClockContextUpdateCallback\x02\b");
	create_qword	(x=0X7100072E60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072E60,	"_ZTIN2nn7timesrv6detail7service29LocalSystemClockContextWriterE");
	set_cmt	(0X7100072E68,	"reference to type's name",	0);
	create_qword	(x=0X7100072E68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E70,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072E70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E78,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072E78,	E_PREV + 0,	"; public \x01\b\x01(0000007100072E78nn::timesrv::detail::service::NetworkSystemClockContextWriter\x02\b :");
	update_extra_cmt		(0X7100072E78,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072E50nn::timesrv::detail::core::SystemClockContextUpdateCallback\x02\b");
	create_qword	(x=0X7100072E78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072E78,	"_ZTIN2nn7timesrv6detail7service31NetworkSystemClockContextWriterE");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_11(void) {
        auto x;
#define id x

	set_cmt	(0X7100072E80,	"reference to type's name",	0);
	create_qword	(x=0X7100072E80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E88,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072E88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072E90,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072E90,	E_PREV + 0,	"; public \x01\b\x01(0000007100072E90nn::timesrv::detail::service::EphemeralNetworkSystemClockContextWriter\x02\b :");
	update_extra_cmt		(0X7100072E90,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072E50nn::timesrv::detail::core::SystemClockContextUpdateCallback\x02\b");
	create_qword	(x=0X7100072E90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072E90,	"_ZTIN2nn7timesrv6detail7service40EphemeralNetworkSystemClockContextWriterE");
	set_cmt	(0X7100072E98,	"reference to type's name",	0);
	create_qword	(x=0X7100072E98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072EA0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072EA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072EA8,	"offset to this",	0);
	create_qword	(x=0X7100072EA8);
	op_dec		(x,	0);
	set_name	(0X7100072EA8,	"_ZTVN2nn7timesrv6detail4core31EphemeralNetworkSystemClockCoreE");
	create_qword	(x=0X7100072EB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072EB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072EB8,	"nn::timesrv::detail::core::EphemeralNetworkSystemClockCore_vftable");
	create_qword	(x=0X7100072EC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072EC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072ED0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072ED8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072ED8,	E_PREV + 0,	"; public \x01\b\x01(0000007100072ED8nn::timesrv::detail::core::EphemeralNetworkSystemClockCore\x02\b :");
	update_extra_cmt		(0X7100072ED8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072F20nn::timesrv::detail::core::SystemClockCore\x02\b");
	create_qword	(x=0X7100072ED8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072ED8,	"_ZTIN2nn7timesrv6detail4core31EphemeralNetworkSystemClockCoreE");
	set_cmt	(0X7100072EE0,	"reference to type's name",	0);
	create_qword	(x=0X7100072EE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072EE8,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072EE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072EF0,	"offset to this",	0);
	create_qword	(x=0X7100072EF0);
	op_dec		(x,	0);
	set_name	(0X7100072EF0,	"_ZTVN2nn7timesrv6detail4core15SystemClockCoreE");
	create_qword	(x=0X7100072EF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072F00,	"nn::timesrv::detail::core::SystemClockCore_vftable");
	create_qword	(x=0X7100072F08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072F20,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072F20,	E_PREV + 0,	"; public \x01\b\x01(0000007100072F20nn::timesrv::detail::core::SystemClockCore\x02\b");
	create_qword	(x=0X7100072F20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072F20,	"_ZTIN2nn7timesrv6detail4core15SystemClockCoreE");
	set_cmt	(0X7100072F28,	"reference to type's name",	0);
	create_qword	(x=0X7100072F28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072F30,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072F30,	E_PREV + 0,	"; public \x01\b\x01(0000007100072F30nn::timesrv::detail::core::SteadyClockCore\x02\b");
	create_qword	(x=0X7100072F30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072F30,	"_ZTIN2nn7timesrv6detail4core15SteadyClockCoreE");
	set_cmt	(0X7100072F38,	"reference to type's name",	0);
	create_qword	(x=0X7100072F38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072F40,	"offset to this",	0);
	create_qword	(x=0X7100072F40);
	op_dec		(x,	0);
	set_name	(0X7100072F40,	"_ZTVN2nn7timesrv6detail4core23StandardSteadyClockCoreE");
	create_qword	(x=0X7100072F48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072F98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072FA0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100072FA0,	E_PREV + 0,	"; public \x01\b\x01(0000007100072FA0nn::timesrv::detail::core::StandardSteadyClockCore\x02\b :");
	update_extra_cmt		(0X7100072FA0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072F30nn::timesrv::detail::core::SteadyClockCore\x02\b");
	create_qword	(x=0X7100072FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100072FA0,	"_ZTIN2nn7timesrv6detail4core23StandardSteadyClockCoreE");
	set_cmt	(0X7100072FA8,	"reference to type's name",	0);
	create_qword	(x=0X7100072FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072FB0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100072FB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100072FB8,	"offset to this",	0);
	create_qword	(x=0X7100072FB8);
	op_dec		(x,	0);
	set_name	(0X7100072FB8,	"_ZTVN2nn7timesrv6detail4core24TickBasedSteadyClockCoreE");
	create_qword	(x=0X7100072FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100072FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073018,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073018,	E_PREV + 0,	"; public \x01\b\x01(0000007100073018nn::timesrv::detail::core::TickBasedSteadyClockCore\x02\b :");
	update_extra_cmt		(0X7100073018,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072F30nn::timesrv::detail::core::SteadyClockCore\x02\b");
	create_qword	(x=0X7100073018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073018,	"_ZTIN2nn7timesrv6detail4core24TickBasedSteadyClockCoreE");
	set_cmt	(0X7100073020,	"reference to type's name",	0);
	create_qword	(x=0X7100073020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073028,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073030,	"offset to this",	0);
	create_qword	(x=0X7100073030);
	op_dec		(x,	0);
	set_name	(0X7100073030,	"_ZTVN2nn7timesrv6detail4core28StandardLocalSystemClockCoreE");
	create_qword	(x=0X7100073038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073040,	"nn::timesrv::detail::core::StandardLocalSystemClockCore_vftable");
	create_qword	(x=0X7100073048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073060,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073060,	E_PREV + 0,	"; public \x01\b\x01(0000007100073060nn::timesrv::detail::core::StandardLocalSystemClockCore\x02\b :");
	update_extra_cmt		(0X7100073060,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072F20nn::timesrv::detail::core::SystemClockCore\x02\b");
	create_qword	(x=0X7100073060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073060,	"_ZTIN2nn7timesrv6detail4core28StandardLocalSystemClockCoreE");
	set_cmt	(0X7100073068,	"reference to type's name",	0);
	create_qword	(x=0X7100073068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073070,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073078,	"offset to this",	0);
	create_qword	(x=0X7100073078);
	op_dec		(x,	0);
	set_name	(0X7100073078,	"_ZTVN2nn7timesrv6detail4core30StandardNetworkSystemClockCoreE");
	create_qword	(x=0X7100073080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073088,	"nn::timesrv::detail::core::StandardNetworkSystemClockCore_vftable");
	create_qword	(x=0X7100073090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000730A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000730A8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000730A8,	E_PREV + 0,	"; public \x01\b\x01(00000071000730A8nn::timesrv::detail::core::StandardNetworkSystemClockCore\x02\b :");
	update_extra_cmt		(0X71000730A8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072F20nn::timesrv::detail::core::SystemClockCore\x02\b");
	create_qword	(x=0X71000730A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000730A8,	"_ZTIN2nn7timesrv6detail4core30StandardNetworkSystemClockCoreE");
	set_cmt	(0X71000730B0,	"reference to type's name",	0);
	create_qword	(x=0X71000730B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000730B8,	"reference to parent's type name",	0);
	create_qword	(x=0X71000730B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000730C0,	"offset to this",	0);
	create_qword	(x=0X71000730C0);
	op_dec		(x,	0);
	set_name	(0X71000730C0,	"_ZTVN2nn7timesrv6detail4core27StandardUserSystemClockCoreE");
	create_qword	(x=0X71000730C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000730D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000730D0,	"nn::timesrv::detail::core::StandardUserSystemClockCore__vftable");
	create_qword	(x=0X71000730D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000730E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000730E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000730F0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000730F0,	E_PREV + 0,	"; public \x01\b\x01(00000071000730F0nn::timesrv::detail::core::StandardUserSystemClockCore\x02\b :");
	update_extra_cmt		(0X71000730F0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100072F20nn::timesrv::detail::core::SystemClockCore\x02\b");
	create_qword	(x=0X71000730F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000730F0,	"_ZTIN2nn7timesrv6detail4core27StandardUserSystemClockCoreE");
	set_cmt	(0X71000730F8,	"reference to type's name",	0);
	create_qword	(x=0X71000730F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073100,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073108,	"offset to this",	0);
	create_qword	(x=0X7100073108);
	op_dec		(x,	0);
	set_name	(0X7100073108,	"_ZTVN2nn7timesrv6detail7service17HipcServerManagerE");
	create_qword	(x=0X7100073110);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073138);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073140);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073148);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073158);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073160);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073178);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073188);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073190);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073198);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000731A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000731A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000731B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000731B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000731C0,	"offset to this",	0);
	create_qword	(x=0X71000731C0);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X71000731C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000731D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000731D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000731E0,	"offset to this",	0);
	create_qword	(x=0X71000731E0);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X71000731E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000731F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000731F8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000731F8,	E_PREV + 0,	"; public \x01\b\x01(00000071000731F8nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<32ul,5ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::timesrv::detail::service::HipcSimpleAllInOneServerManagerOptions>>\x02\b :");
	update_extra_cmt		(0X71000731F8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X71000731F8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X71000731F8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X71000731F8,	E_PREV + 4,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X71000731F8,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X71000731F8,	E_PREV + 6,	";         protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X71000731F8,	E_PREV + 7,	";       protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b");
	create_qword	(x=0X71000731F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000731F8,	"_ZTIN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm32ELm5ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_7timesrv6detail7service38HipcSimpleAllInOneServerManagerOptionsEEEEE");
	set_cmt	(0X7100073200,	"reference to type's name",	0);
	create_qword	(x=0X7100073200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073208,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073208);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073210,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073210,	E_PREV + 0,	"; public \x01\b\x01(0000007100073210nn::sf::HipcSimpleAllInOneServerManager<32ul,5ul,nn::timesrv::detail::service::HipcSimpleAllInOneServerManagerOptions>\x02\b :");
	update_extra_cmt		(0X7100073210,	E_PREV + 1,	";   protected /* offset 0x0 */ \x01\b\x01(00000071000731F8nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<32ul,5ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::timesrv::detail::service::HipcSimpleAllInOneServerManagerOptions>>\x02\b :");
	update_extra_cmt		(0X7100073210,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X7100073210,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X7100073210,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X7100073210,	E_PREV + 5,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X7100073210,	E_PREV + 6,	";             public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X7100073210,	E_PREV + 7,	";           protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X7100073210,	E_PREV + 8,	";         protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b,");
	update_extra_cmt		(0X7100073210,	E_PREV + 9,	";   public /* offset 0x73d0 */ \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X7100073210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073210,	"_ZTIN2nn2sf31HipcSimpleAllInOneServerManagerILm32ELm5ENS_7timesrv6detail7service38HipcSimpleAllInOneServerManagerOptionsEEE");
	set_cmt	(0X7100073218,	"reference to type's name",	0);
	create_qword	(x=0X7100073218);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073220,	"attribute",	0);
	create_dword	(x=0X7100073220);
	op_hex		(x,	0);
	set_cmt	(0X7100073224,	"count of base classes",	0);
	create_dword	(x=0X7100073224);
	op_dec		(x,	0);
	set_cmt	(0X7100073228,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073228);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073230,	"base class' attributes\noffset to this",	0);
	create_qword	(x=0X7100073230);
	op_dec		(x,	0);
	set_name	(0X7100073230,	"_ZTVN2nn2sf34HipcServerSessionManagerCommonBaseE_2");
	set_cmt	(0X7100073238,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073238);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073240,	"base class' attributes",	0);
	create_qword	(x=0X7100073240);
	op_hex		(x,	0);
	set_cmt	(0X7100073248,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073248,	E_PREV + 0,	"; public \x01\b\x01(0000007100073248nn::timesrv::detail::service::HipcServerManager\x02\b :");
	update_extra_cmt		(0X7100073248,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073210nn::sf::HipcSimpleAllInOneServerManager<32ul,5ul,nn::timesrv::detail::service::HipcSimpleAllInOneServerManagerOptions>\x02\b :");
	update_extra_cmt		(0X7100073248,	E_PREV + 2,	";     protected /* offset 0x0 */ \x01\b\x01(00000071000731F8nn::sf::hipc::server::v1::HipcSimpleAllInOneServerManager<32ul,5ul,nn::sf::detail::HipcSimpleAllInOneServerManagerOptionsGetter<nn::timesrv::detail::service::HipcSimpleAllInOneServerManagerOptions>>\x02\b :");
	update_extra_cmt		(0X7100073248,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(00000071000704E8nn::sf::hipc::server::v1::detail::HipcAllInOneServerManagerBase\x02\b :");
	update_extra_cmt		(0X7100073248,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(0000007100070830nn::sf::hipc::server::v1::HipcServerSessionManagerWithDomain\x02\b :");
	update_extra_cmt		(0X7100073248,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(0000007100070708nn::sf::hipc::server::v1::HipcServerSessionManager\x02\b :");
	update_extra_cmt		(0X7100073248,	E_PREV + 6,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000706E0nn::sf::hipc::server::v1::HipcServerSessionManagerT<nn::sf::cmif::server::CmifServerObjectInfo>\x02\b :");
	update_extra_cmt		(0X7100073248,	E_PREV + 7,	";               public /* offset 0x0 */ \x01\b\x01(00000071000706D0nn::sf::hipc::server::v1::HipcServerSessionManagerBase\x02\b,");
	update_extra_cmt		(0X7100073248,	E_PREV + 8,	";             protected /* offset 0x0 */ \x01\b\x01(00000071000706F8nn::sf::hipc::server::HipcServerApiModelHolder\x02\b,");
	update_extra_cmt		(0X7100073248,	E_PREV + 9,	";           protected /* offset 0x10 */ \x01\b\x01(0000007100070520nn::sf::cmif::server::CmifServerDomainManager\x02\b,");
	update_extra_cmt		(0X7100073248,	E_PREV + 10,	";     public /* offset 0x73d0 */ \x01\b\x01(000000710006F320nn::sf::HipcServerSessionManagerCommonBase\x02\b");
	create_qword	(x=0X7100073248);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073248,	"_ZTIN2nn7timesrv6detail7service17HipcServerManagerE");
	set_cmt	(0X7100073250,	"reference to type's name",	0);
	create_qword	(x=0X7100073250);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073258,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073260,	"offset to this",	0);
	create_qword	(x=0X7100073260);
	op_dec		(x,	0);
	set_name	(0X7100073260,	"_ZTVN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm32ELm5ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_7timesrv6detail7service38HipcSimpleAllInOneServerManagerOptionsEEEEE");
	create_qword	(x=0X7100073268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073270);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073278);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073280);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073288);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073290);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073298);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000732F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000732F8,	"offset to this",	0);
	create_qword	(x=0X71000732F8);
	toggle_sign		(x,	0);
	op_dec		(x,	0);
	toggle_sign		(x,	1);
	create_qword	(x=0X7100073300);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073308);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073310);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073318,	"offset to this",	0);
	create_qword	(x=0X7100073318);
	op_dec		(x,	0);
	set_name	(0X7100073318,	"_ZTVN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service14IStaticServiceENS4_19StaticServiceServerEEE");
	create_qword	(x=0X7100073320);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073330);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073338);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073340);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073350);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073358);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073360);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073368);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073380);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073388);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073398);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000733A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000733A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000733B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000733B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000733C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000733C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000733D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000733D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000733E0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000733E0,	E_PREV + 0,	"; public \x01\b\x01(00000071000733E0nn::timesrv::detail::service::IStaticService\x02\b :");
	update_extra_cmt		(0X71000733E0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000733E0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X71000733E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000733E0,	"_ZTIN2nn7timesrv6detail7service14IStaticServiceE");
	set_cmt	(0X71000733E8,	"reference to type's name",	0);
	create_qword	(x=0X71000733E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000733F0,	"reference to parent's type name",	0);
	create_qword	(x=0X71000733F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000733F8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000733F8,	E_PREV + 0,	"; public \x01\b\x01(00000071000733F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,void>\x02\b");
	create_qword	(x=0X71000733F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000733F8,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE5_tO2NINS6_19StaticServiceServerEE4typeEvEE");
	set_cmt	(0X7100073400,	"reference to type's name",	0);
	create_qword	(x=0X7100073400);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073408,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073408,	E_PREV + 0,	"; public \x01\b\x01(0000007100073408nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,nn::timesrv::detail::service::IStaticService>::type\x02\b :");
	update_extra_cmt		(0X7100073408,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000733E0nn::timesrv::detail::service::IStaticService\x02\b :");
	update_extra_cmt		(0X7100073408,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073408,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073408,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(00000071000733F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,void>\x02\b");
	create_qword	(x=0X7100073408);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073408,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE5_tO2NINS9_19StaticServiceServerEE4typeESA_E4typeE");
	set_cmt	(0X7100073410,	"reference to type's name",	0);
	create_qword	(x=0X7100073410);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073418,	"attribute",	0);
	create_dword	(x=0X7100073418);
	op_hex		(x,	0);
	set_cmt	(0X710007341C,	"count of base classes",	0);
	create_dword	(x=0X710007341C);
	op_dec		(x,	0);
	set_cmt	(0X7100073420,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073420);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073428,	"base class' attributes",	0);
	create_qword	(x=0X7100073428);
	op_hex		(x,	0);
	set_cmt	(0X7100073430,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073430);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073438,	"base class' attributes",	0);
	create_qword	(x=0X7100073438);
	op_hex		(x,	0);
	set_cmt	(0X7100073440,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073440,	E_PREV + 0,	"; public \x01\b\x01(0000007100073440nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,nn::timesrv::detail::service::IStaticService>::type\x02\b :");
	update_extra_cmt		(0X7100073440,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073408nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,nn::timesrv::detail::service::IStaticService>::type\x02\b :");
	update_extra_cmt		(0X7100073440,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000733E0nn::timesrv::detail::service::IStaticService\x02\b :");
	update_extra_cmt		(0X7100073440,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073440,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073440,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(00000071000733F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,void>\x02\b");
	create_qword	(x=0X7100073440);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073440,	"_ZTIN2nn2sf13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE4_tABINS6_5_tO2NINS4_19StaticServiceServerEE4typeES5_E4typeE");
	set_cmt	(0X7100073448,	"reference to type's name",	0);
	create_qword	(x=0X7100073448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073450,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073450);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073458,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073458,	E_PREV + 0,	"; public \x01\b\x01(0000007100073458nn::sf::UnmanagedServiceObject<nn::timesrv::detail::service::IStaticService,nn::timesrv::detail::service::StaticServiceServer>\x02\b :");
	update_extra_cmt		(0X7100073458,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073440nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,nn::timesrv::detail::service::IStaticService>::type\x02\b :");
	update_extra_cmt		(0X7100073458,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073408nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,nn::timesrv::detail::service::IStaticService>::type\x02\b :");
	update_extra_cmt		(0X7100073458,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(00000071000733E0nn::timesrv::detail::service::IStaticService\x02\b :");
	update_extra_cmt		(0X7100073458,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073458,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073458,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(00000071000733F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,void>\x02\b");
	create_qword	(x=0X7100073458);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073458,	"_ZTIN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service14IStaticServiceENS4_19StaticServiceServerEEE");
	set_cmt	(0X7100073460,	"reference to type's name",	0);
	create_qword	(x=0X7100073460);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073468,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073468);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073470,	"offset to this",	0);
	create_qword	(x=0X7100073470);
	op_dec		(x,	0);
	set_name	(0X7100073470,	"_ZTVN2nn7timesrv6detail7service14IStaticServiceE");
	create_qword	(x=0X7100073478);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073480);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073498);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000734F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073500);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073508);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073510);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073518);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073520);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073528);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073530);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073538,	"offset to this",	0);
	create_qword	(x=0X7100073538);
	op_dec		(x,	0);
	set_name	(0X7100073538,	"_ZTVN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service13IAlarmServiceENS4_18AlarmServiceServerEEE");
	create_qword	(x=0X7100073540);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073548);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073550);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073558);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073560);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073570);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073578,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073578,	E_PREV + 0,	"; public \x01\b\x01(0000007100073578nn::timesrv::detail::service::IAlarmService\x02\b :");
	update_extra_cmt		(0X7100073578,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073578,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100073578);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073578,	"_ZTIN2nn7timesrv6detail7service13IAlarmServiceE");
	set_cmt	(0X7100073580,	"reference to type's name",	0);
	create_qword	(x=0X7100073580);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073588,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073588);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073590,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073590,	E_PREV + 0,	"; public \x01\b\x01(0000007100073590nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,void>\x02\b");
	create_qword	(x=0X7100073590);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073590,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service13IAlarmServiceEE5_tO2NINS6_18AlarmServiceServerEE4typeEvEE");
	set_cmt	(0X7100073598,	"reference to type's name",	0);
	create_qword	(x=0X7100073598);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000735A0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000735A0,	E_PREV + 0,	"; public \x01\b\x01(00000071000735A0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,nn::timesrv::detail::service::IAlarmService>::type\x02\b :");
	update_extra_cmt		(0X71000735A0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073578nn::timesrv::detail::service::IAlarmService\x02\b :");
	update_extra_cmt		(0X71000735A0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000735A0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X71000735A0,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100073590nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,void>\x02\b");
	create_qword	(x=0X71000735A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000735A0,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service13IAlarmServiceEE5_tO2NINS9_18AlarmServiceServerEE4typeESA_E4typeE");
	set_cmt	(0X71000735A8,	"reference to type's name",	0);
	create_qword	(x=0X71000735A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000735B0,	"attribute",	0);
	create_dword	(x=0X71000735B0);
	op_hex		(x,	0);
	set_cmt	(0X71000735B4,	"count of base classes",	0);
	create_dword	(x=0X71000735B4);
	op_dec		(x,	0);
	set_cmt	(0X71000735B8,	"base class' type descriptor",	0);
	create_qword	(x=0X71000735B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000735C0,	"base class' attributes",	0);
	create_qword	(x=0X71000735C0);
	op_hex		(x,	0);
	set_cmt	(0X71000735C8,	"base class' type descriptor",	0);
	create_qword	(x=0X71000735C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000735D0,	"base class' attributes",	0);
	create_qword	(x=0X71000735D0);
	op_hex		(x,	0);
	set_cmt	(0X71000735D8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000735D8,	E_PREV + 0,	"; public \x01\b\x01(00000071000735D8nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,nn::timesrv::detail::service::IAlarmService>::type\x02\b :");
	update_extra_cmt		(0X71000735D8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000735A0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,nn::timesrv::detail::service::IAlarmService>::type\x02\b :");
	update_extra_cmt		(0X71000735D8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073578nn::timesrv::detail::service::IAlarmService\x02\b :");
	update_extra_cmt		(0X71000735D8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000735D8,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X71000735D8,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100073590nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,void>\x02\b");
	create_qword	(x=0X71000735D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000735D8,	"_ZTIN2nn2sf13InterfaceInfoINS_7timesrv6detail7service13IAlarmServiceEE4_tABINS6_5_tO2NINS4_18AlarmServiceServerEE4typeES5_E4typeE");
	set_cmt	(0X71000735E0,	"reference to type's name",	0);
	create_qword	(x=0X71000735E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000735E8,	"reference to parent's type name",	0);
	create_qword	(x=0X71000735E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000735F0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000735F0,	E_PREV + 0,	"; public \x01\b\x01(00000071000735F0nn::sf::UnmanagedServiceObject<nn::timesrv::detail::service::IAlarmService,nn::timesrv::detail::service::AlarmServiceServer>\x02\b :");
	update_extra_cmt		(0X71000735F0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000735D8nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,nn::timesrv::detail::service::IAlarmService>::type\x02\b :");
	update_extra_cmt		(0X71000735F0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000735A0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,nn::timesrv::detail::service::IAlarmService>::type\x02\b :");
	update_extra_cmt		(0X71000735F0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100073578nn::timesrv::detail::service::IAlarmService\x02\b :");
	update_extra_cmt		(0X71000735F0,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000735F0,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X71000735F0,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(0000007100073590nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IAlarmService>::_tO2N<nn::timesrv::detail::service::AlarmServiceServer>::type,void>\x02\b");
	create_qword	(x=0X71000735F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000735F0,	"_ZTIN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service13IAlarmServiceENS4_18AlarmServiceServerEEE");
	set_cmt	(0X71000735F8,	"reference to type's name",	0);
	create_qword	(x=0X71000735F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073600,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073600);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073608,	"offset to this",	0);
	create_qword	(x=0X7100073608);
	op_dec		(x,	0);
	set_name	(0X7100073608,	"_ZTVN2nn7timesrv6detail7service13IAlarmServiceE");
	create_qword	(x=0X7100073610);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073620);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073628);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073638);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073648,	"offset to this",	0);
	create_qword	(x=0X7100073648);
	op_dec		(x,	0);
	set_name	(0X7100073648,	"_ZTVN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service19ITimeServiceManagerENS4_24TimeServiceManagerServerEEE");
	create_qword	(x=0X7100073650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073658);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073660);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073668);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073670);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073690);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000736F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073708,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073708,	E_PREV + 0,	"; public \x01\b\x01(0000007100073708nn::timesrv::detail::service::ITimeServiceManager\x02\b :");
	update_extra_cmt		(0X7100073708,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073708,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100073708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073708,	"_ZTIN2nn7timesrv6detail7service19ITimeServiceManagerE");
	set_cmt	(0X7100073710,	"reference to type's name",	0);
	create_qword	(x=0X7100073710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073718,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073718);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073720,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073720,	E_PREV + 0,	"; public \x01\b\x01(0000007100073720nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,void>\x02\b");
	create_qword	(x=0X7100073720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073720,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service19ITimeServiceManagerEE5_tO2NINS6_24TimeServiceManagerServerEE4typeEvEE");
	set_cmt	(0X7100073728,	"reference to type's name",	0);
	create_qword	(x=0X7100073728);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073730,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073730,	E_PREV + 0,	"; public \x01\b\x01(0000007100073730nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,nn::timesrv::detail::service::ITimeServiceManager>::type\x02\b :");
	update_extra_cmt		(0X7100073730,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073708nn::timesrv::detail::service::ITimeServiceManager\x02\b :");
	update_extra_cmt		(0X7100073730,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073730,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073730,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100073720nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,void>\x02\b");
	create_qword	(x=0X7100073730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073730,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service19ITimeServiceManagerEE5_tO2NINS9_24TimeServiceManagerServerEE4typeESA_E4typeE");
	set_cmt	(0X7100073738,	"reference to type's name",	0);
	create_qword	(x=0X7100073738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073740,	"attribute",	0);
	create_dword	(x=0X7100073740);
	op_hex		(x,	0);
	set_cmt	(0X7100073744,	"count of base classes",	0);
	create_dword	(x=0X7100073744);
	op_dec		(x,	0);
	set_cmt	(0X7100073748,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073750,	"base class' attributes",	0);
	create_qword	(x=0X7100073750);
	op_hex		(x,	0);
	set_cmt	(0X7100073758,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073760,	"base class' attributes",	0);
	create_qword	(x=0X7100073760);
	op_hex		(x,	0);
	set_cmt	(0X7100073768,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073768,	E_PREV + 0,	"; public \x01\b\x01(0000007100073768nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,nn::timesrv::detail::service::ITimeServiceManager>::type\x02\b :");
	update_extra_cmt		(0X7100073768,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073730nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,nn::timesrv::detail::service::ITimeServiceManager>::type\x02\b :");
	update_extra_cmt		(0X7100073768,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073708nn::timesrv::detail::service::ITimeServiceManager\x02\b :");
	update_extra_cmt		(0X7100073768,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073768,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073768,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100073720nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,void>\x02\b");
	create_qword	(x=0X7100073768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073768,	"_ZTIN2nn2sf13InterfaceInfoINS_7timesrv6detail7service19ITimeServiceManagerEE4_tABINS6_5_tO2NINS4_24TimeServiceManagerServerEE4typeES5_E4typeE");
	set_cmt	(0X7100073770,	"reference to type's name",	0);
	create_qword	(x=0X7100073770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073778,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073780,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073780,	E_PREV + 0,	"; public \x01\b\x01(0000007100073780nn::sf::UnmanagedServiceObject<nn::timesrv::detail::service::ITimeServiceManager,nn::timesrv::detail::service::TimeServiceManagerServer>\x02\b :");
	update_extra_cmt		(0X7100073780,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073768nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,nn::timesrv::detail::service::ITimeServiceManager>::type\x02\b :");
	update_extra_cmt		(0X7100073780,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073730nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,nn::timesrv::detail::service::ITimeServiceManager>::type\x02\b :");
	update_extra_cmt		(0X7100073780,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100073708nn::timesrv::detail::service::ITimeServiceManager\x02\b :");
	update_extra_cmt		(0X7100073780,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073780,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073780,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(0000007100073720nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeServiceManager>::_tO2N<nn::timesrv::detail::service::TimeServiceManagerServer>::type,void>\x02\b");
	create_qword	(x=0X7100073780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073780,	"_ZTIN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service19ITimeServiceManagerENS4_24TimeServiceManagerServerEEE");
	set_cmt	(0X7100073788,	"reference to type's name",	0);
	create_qword	(x=0X7100073788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073790,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073798,	"offset to this",	0);
	create_qword	(x=0X7100073798);
	op_dec		(x,	0);
	set_name	(0X7100073798,	"_ZTVN2nn7timesrv6detail7service19ITimeServiceManagerE");
	create_qword	(x=0X71000737A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000737F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073800);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073808);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073818);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073820);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073828);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073838);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073840);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073850);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073858,	"offset to this",	0);
	create_qword	(x=0X7100073858);
	op_dec		(x,	0);
	set_name	(0X7100073858,	"_ZTVN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service25IPowerStateRequestHandlerENS4_30PowerStateRequestHandlerServerEEE");
	create_qword	(x=0X7100073860);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073868);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073870);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073878);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073880);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073888);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073890);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073898,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073898,	E_PREV + 0,	"; public \x01\b\x01(0000007100073898nn::timesrv::detail::service::IPowerStateRequestHandler\x02\b :");
	update_extra_cmt		(0X7100073898,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073898,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100073898);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073898,	"_ZTIN2nn7timesrv6detail7service25IPowerStateRequestHandlerE");
	set_cmt	(0X71000738A0,	"reference to type's name",	0);
	create_qword	(x=0X71000738A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000738A8,	"reference to parent's type name",	0);
	create_qword	(x=0X71000738A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000738B0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000738B0,	E_PREV + 0,	"; public \x01\b\x01(00000071000738B0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,void>\x02\b");
	create_qword	(x=0X71000738B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000738B0,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service25IPowerStateRequestHandlerEE5_tO2NINS6_30PowerStateRequestHandlerServerEE4typeEvEE");
	set_cmt	(0X71000738B8,	"reference to type's name",	0);
	create_qword	(x=0X71000738B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000738C0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000738C0,	E_PREV + 0,	"; public \x01\b\x01(00000071000738C0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,nn::timesrv::detail::service::IPowerStateRequestHandler>::type\x02\b :");
	update_extra_cmt		(0X71000738C0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073898nn::timesrv::detail::service::IPowerStateRequestHandler\x02\b :");
	update_extra_cmt		(0X71000738C0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000738C0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X71000738C0,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(00000071000738B0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,void>\x02\b");
	create_qword	(x=0X71000738C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000738C0,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service25IPowerStateRequestHandlerEE5_tO2NINS9_30PowerStateRequestHandlerServerEE4typeESA_E4typeE");
	set_cmt	(0X71000738C8,	"reference to type's name",	0);
	create_qword	(x=0X71000738C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000738D0,	"attribute",	0);
	create_dword	(x=0X71000738D0);
	op_hex		(x,	0);
	set_cmt	(0X71000738D4,	"count of base classes",	0);
	create_dword	(x=0X71000738D4);
	op_dec		(x,	0);
	set_cmt	(0X71000738D8,	"base class' type descriptor",	0);
	create_qword	(x=0X71000738D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000738E0,	"base class' attributes",	0);
	create_qword	(x=0X71000738E0);
	op_hex		(x,	0);
	set_cmt	(0X71000738E8,	"base class' type descriptor",	0);
	create_qword	(x=0X71000738E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000738F0,	"base class' attributes",	0);
	create_qword	(x=0X71000738F0);
	op_hex		(x,	0);
	set_cmt	(0X71000738F8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000738F8,	E_PREV + 0,	"; public \x01\b\x01(00000071000738F8nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,nn::timesrv::detail::service::IPowerStateRequestHandler>::type\x02\b :");
	update_extra_cmt		(0X71000738F8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000738C0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,nn::timesrv::detail::service::IPowerStateRequestHandler>::type\x02\b :");
	update_extra_cmt		(0X71000738F8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073898nn::timesrv::detail::service::IPowerStateRequestHandler\x02\b :");
	update_extra_cmt		(0X71000738F8,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000738F8,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X71000738F8,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(00000071000738B0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,void>\x02\b");
	create_qword	(x=0X71000738F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000738F8,	"_ZTIN2nn2sf13InterfaceInfoINS_7timesrv6detail7service25IPowerStateRequestHandlerEE4_tABINS6_5_tO2NINS4_30PowerStateRequestHandlerServerEE4typeES5_E4typeE");
	set_cmt	(0X7100073900,	"reference to type's name",	0);
	create_qword	(x=0X7100073900);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073908,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073908);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073910,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073910,	E_PREV + 0,	"; public \x01\b\x01(0000007100073910nn::sf::UnmanagedServiceObject<nn::timesrv::detail::service::IPowerStateRequestHandler,nn::timesrv::detail::service::PowerStateRequestHandlerServer>\x02\b :");
	update_extra_cmt		(0X7100073910,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(00000071000738F8nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,nn::timesrv::detail::service::IPowerStateRequestHandler>::type\x02\b :");
	update_extra_cmt		(0X7100073910,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(00000071000738C0nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,nn::timesrv::detail::service::IPowerStateRequestHandler>::type\x02\b :");
	update_extra_cmt		(0X7100073910,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100073898nn::timesrv::detail::service::IPowerStateRequestHandler\x02\b :");
	update_extra_cmt		(0X7100073910,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073910,	E_PREV + 5,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073910,	E_PREV + 6,	";       public /* offset 0x8 */ \x01\b\x01(00000071000738B0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IPowerStateRequestHandler>::_tO2N<nn::timesrv::detail::service::PowerStateRequestHandlerServer>::type,void>\x02\b");
	create_qword	(x=0X7100073910);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073910,	"_ZTIN2nn2sf22UnmanagedServiceObjectINS_7timesrv6detail7service25IPowerStateRequestHandlerENS4_30PowerStateRequestHandlerServerEEE");
	set_cmt	(0X7100073918,	"reference to type's name",	0);
	create_qword	(x=0X7100073918);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073920,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073928,	"offset to this",	0);
	create_qword	(x=0X7100073928);
	op_dec		(x,	0);
	set_name	(0X7100073928,	"_ZTVN2nn7timesrv6detail7service25IPowerStateRequestHandlerE");
	create_qword	(x=0X7100073930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073940);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073948);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073958);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073960);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073968,	"timeM_ServiceHandler");
	create_qword	(x=0X7100073970);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073970,	"ServiceHandler_StaticService");
	create_qword	(x=0X7100073978);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073978,	"ServiceHandler_ISystemClock_Ptr");
	create_qword	(x=0X7100073980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073980,	"ServiceHandler_ISteadyClock_Ptr");
	create_qword	(x=0X7100073988);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073988,	"ServiceHandler_ITimeZoneService_Ptr");
	create_qword	(x=0X7100073990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073990,	"timeAL_ServiceHandler");
	create_qword	(x=0X7100073998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073998,	"ServiceHandler_ISteadyClockAlarm_Ptr");
	create_qword	(x=0X71000739A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000739A0,	"ServiceHandler_IPowerStateRequestHandlerPtr");
	set_cmt	(0X71000739A8,	"offset to this",	0);
	create_qword	(x=0X71000739A8);
	op_dec		(x,	0);
	set_name	(0X71000739A8,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE4_tABINS8_5_tO2NINS6_17SystemClockServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	create_qword	(x=0X71000739B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000739F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A00,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073A00,	E_PREV + 0,	"; public \x01\b\x01(0000007100073A00nn::timesrv::detail::service::ISystemClock\x02\b :");
	update_extra_cmt		(0X7100073A00,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073A00,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100073A00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073A00,	"_ZTIN2nn7timesrv6detail7service12ISystemClockE");
	set_cmt	(0X7100073A08,	"reference to type's name",	0);
	create_qword	(x=0X7100073A08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A10,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073A10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A18,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073A18,	E_PREV + 0,	"; public \x01\b\x01(0000007100073A18nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,void>\x02\b");
	create_qword	(x=0X7100073A18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073A18,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE5_tO2NINS6_17SystemClockServerEE4typeEvEE");
	set_cmt	(0X7100073A20,	"reference to type's name",	0);
	create_qword	(x=0X7100073A20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A28,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073A28,	E_PREV + 0,	"; public \x01\b\x01(0000007100073A28nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,nn::timesrv::detail::service::ISystemClock>::type\x02\b :");
	update_extra_cmt		(0X7100073A28,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073A00nn::timesrv::detail::service::ISystemClock\x02\b :");
	update_extra_cmt		(0X7100073A28,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073A28,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073A28,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100073A18nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,void>\x02\b");
	create_qword	(x=0X7100073A28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073A28,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE5_tO2NINS9_17SystemClockServerEE4typeESA_E4typeE");
	set_cmt	(0X7100073A30,	"reference to type's name",	0);
	create_qword	(x=0X7100073A30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A38,	"attribute",	0);
	create_dword	(x=0X7100073A38);
	op_hex		(x,	0);
	set_cmt	(0X7100073A3C,	"count of base classes",	0);
	create_dword	(x=0X7100073A3C);
	op_dec		(x,	0);
	set_cmt	(0X7100073A40,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073A40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A48,	"base class' attributes",	0);
	create_qword	(x=0X7100073A48);
	op_hex		(x,	0);
	set_cmt	(0X7100073A50,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073A50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A58,	"base class' attributes",	0);
	create_qword	(x=0X7100073A58);
	op_hex		(x,	0);
	set_cmt	(0X7100073A60,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073A60,	E_PREV + 0,	"; public \x01\b\x01(0000007100073A60nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,nn::timesrv::detail::service::ISystemClock>::type\x02\b :");
	update_extra_cmt		(0X7100073A60,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073A28nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,nn::timesrv::detail::service::ISystemClock>::type\x02\b :");
	update_extra_cmt		(0X7100073A60,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073A00nn::timesrv::detail::service::ISystemClock\x02\b :");
	update_extra_cmt		(0X7100073A60,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073A60,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073A60,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100073A18nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,void>\x02\b");
	create_qword	(x=0X7100073A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073A60,	"_ZTIN2nn2sf13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE4_tABINS6_5_tO2NINS4_17SystemClockServerEE4typeES5_E4typeE");
	set_cmt	(0X7100073A68,	"reference to type's name",	0);
	create_qword	(x=0X7100073A68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A70,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073A70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A78,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073A78,	E_PREV + 0,	"; public \x01\b\x01(0000007100073A78nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,nn::timesrv::detail::service::ISystemClock>::type,nn::sf::StatefulAllocationPolicy<nn::sf::ExpHeapAllocator>>::Object\x02\b :");
	update_extra_cmt		(0X7100073A78,	E_PREV + 1,	";   protected /* offset 0x28 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X7100073A78,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073A60nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,nn::timesrv::detail::service::ISystemClock>::type\x02\b :");
	update_extra_cmt		(0X7100073A78,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073A28nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,nn::timesrv::detail::service::ISystemClock>::type\x02\b :");
	update_extra_cmt		(0X7100073A78,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(0000007100073A00nn::timesrv::detail::service::ISystemClock\x02\b :");
	update_extra_cmt		(0X7100073A78,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073A78,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073A78,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(0000007100073A18nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISystemClock>::_tO2N<nn::timesrv::detail::service::SystemClockServer>::type,void>\x02\b");
	create_qword	(x=0X7100073A78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073A78,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service12ISystemClockEE4_tABINS8_5_tO2NINS6_17SystemClockServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X7100073A80,	"reference to type's name",	0);
	create_qword	(x=0X7100073A80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A88,	"attribute",	0);
	create_dword	(x=0X7100073A88);
	op_hex		(x,	0);
	set_cmt	(0X7100073A8C,	"count of base classes",	0);
	create_dword	(x=0X7100073A8C);
	op_dec		(x,	0);
	set_cmt	(0X7100073A90,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073A90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073A98,	"base class' attributes",	0);
	create_qword	(x=0X7100073A98);
	op_hex		(x,	0);
	set_cmt	(0X7100073AA0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073AA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073AA8,	"base class' attributes",	0);
	create_qword	(x=0X7100073AA8);
	op_hex		(x,	0);
	set_cmt	(0X7100073AB0,	"offset to this",	0);
	create_qword	(x=0X7100073AB0);
	op_dec		(x,	0);
	set_name	(0X7100073AB0,	"_ZTVN2nn7timesrv6detail7service12ISystemClockE");
	create_qword	(x=0X7100073AB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073AC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073AC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073AD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073AE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073AE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073AF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073AF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073B08,	"offset to this",	0);
	create_qword	(x=0X7100073B08);
	op_dec		(x,	0);
	set_name	(0X7100073B08,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE4_tABINS8_5_tO2NINS6_17SteadyClockServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	create_qword	(x=0X7100073B10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073B68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073B70,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073B70,	E_PREV + 0,	"; public \x01\b\x01(0000007100073B70nn::timesrv::detail::service::ISteadyClock\x02\b :");
	update_extra_cmt		(0X7100073B70,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073B70,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100073B70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073B70,	"_ZTIN2nn7timesrv6detail7service12ISteadyClockE");
	set_cmt	(0X7100073B78,	"reference to type's name",	0);
	create_qword	(x=0X7100073B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073B80,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073B80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073B88,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073B88,	E_PREV + 0,	"; public \x01\b\x01(0000007100073B88nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,void>\x02\b");
	create_qword	(x=0X7100073B88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073B88,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE5_tO2NINS6_17SteadyClockServerEE4typeEvEE");
	set_cmt	(0X7100073B90,	"reference to type's name",	0);
	create_qword	(x=0X7100073B90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073B98,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073B98,	E_PREV + 0,	"; public \x01\b\x01(0000007100073B98nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,nn::timesrv::detail::service::ISteadyClock>::type\x02\b :");
	update_extra_cmt		(0X7100073B98,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073B70nn::timesrv::detail::service::ISteadyClock\x02\b :");
	update_extra_cmt		(0X7100073B98,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073B98,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073B98,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100073B88nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,void>\x02\b");
	create_qword	(x=0X7100073B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073B98,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE5_tO2NINS9_17SteadyClockServerEE4typeESA_E4typeE");
	set_cmt	(0X7100073BA0,	"reference to type's name",	0);
	create_qword	(x=0X7100073BA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073BA8,	"attribute",	0);
	create_dword	(x=0X7100073BA8);
	op_hex		(x,	0);
	set_cmt	(0X7100073BAC,	"count of base classes",	0);
	create_dword	(x=0X7100073BAC);
	op_dec		(x,	0);
	set_cmt	(0X7100073BB0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073BB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073BB8,	"base class' attributes",	0);
	create_qword	(x=0X7100073BB8);
	op_hex		(x,	0);
	set_cmt	(0X7100073BC0,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073BC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073BC8,	"base class' attributes",	0);
	create_qword	(x=0X7100073BC8);
	op_hex		(x,	0);
	set_cmt	(0X7100073BD0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073BD0,	E_PREV + 0,	"; public \x01\b\x01(0000007100073BD0nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,nn::timesrv::detail::service::ISteadyClock>::type\x02\b :");
	update_extra_cmt		(0X7100073BD0,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073B98nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,nn::timesrv::detail::service::ISteadyClock>::type\x02\b :");
	update_extra_cmt		(0X7100073BD0,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073B70nn::timesrv::detail::service::ISteadyClock\x02\b :");
	update_extra_cmt		(0X7100073BD0,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073BD0,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073BD0,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100073B88nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,void>\x02\b");
	create_qword	(x=0X7100073BD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073BD0,	"_ZTIN2nn2sf13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE4_tABINS6_5_tO2NINS4_17SteadyClockServerEE4typeES5_E4typeE");
	set_cmt	(0X7100073BD8,	"reference to type's name",	0);
	create_qword	(x=0X7100073BD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073BE0,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073BE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073BE8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073BE8,	E_PREV + 0,	"; public \x01\b\x01(0000007100073BE8nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,nn::timesrv::detail::service::ISteadyClock>::type,nn::sf::StatefulAllocationPolicy<nn::sf::ExpHeapAllocator>>::Object\x02\b :");
	update_extra_cmt		(0X7100073BE8,	E_PREV + 1,	";   protected /* offset 0x18 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X7100073BE8,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073BD0nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,nn::timesrv::detail::service::ISteadyClock>::type\x02\b :");
	update_extra_cmt		(0X7100073BE8,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073B98nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,nn::timesrv::detail::service::ISteadyClock>::type\x02\b :");
	update_extra_cmt		(0X7100073BE8,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(0000007100073B70nn::timesrv::detail::service::ISteadyClock\x02\b :");
	update_extra_cmt		(0X7100073BE8,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073BE8,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073BE8,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(0000007100073B88nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClock>::_tO2N<nn::timesrv::detail::service::SteadyClockServer>::type,void>\x02\b");
	create_qword	(x=0X7100073BE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073BE8,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service12ISteadyClockEE4_tABINS8_5_tO2NINS6_17SteadyClockServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X7100073BF0,	"reference to type's name",	0);
	create_qword	(x=0X7100073BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073BF8,	"attribute",	0);
	create_dword	(x=0X7100073BF8);
	op_hex		(x,	0);
	set_cmt	(0X7100073BFC,	"count of base classes",	0);
	create_dword	(x=0X7100073BFC);
	op_dec		(x,	0);
	set_cmt	(0X7100073C00,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073C00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073C08,	"base class' attributes",	0);
	create_qword	(x=0X7100073C08);
	op_hex		(x,	0);
	set_cmt	(0X7100073C10,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073C10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073C18,	"base class' attributes",	0);
	create_qword	(x=0X7100073C18);
	op_hex		(x,	0);
	set_cmt	(0X7100073C20,	"offset to this",	0);
	create_qword	(x=0X7100073C20);
	op_dec		(x,	0);
	set_name	(0X7100073C20,	"_ZTVN2nn7timesrv6detail7service12ISteadyClockE");
	create_qword	(x=0X7100073C28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073C88,	"offset to this",	0);
	create_qword	(x=0X7100073C88);
	op_dec		(x,	0);
	set_name	(0X7100073C88,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE4_tABINS8_5_tO2NINS6_21TimeZoneServiceServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	create_qword	(x=0X7100073C90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073C98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073CF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073D08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073D10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073D18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073D28,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073D28,	E_PREV + 0,	"; public \x01\b\x01(0000007100073D28nn::timesrv::detail::service::ITimeZoneService\x02\b :");
	update_extra_cmt		(0X7100073D28,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073D28,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100073D28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073D28,	"_ZTIN2nn7timesrv6detail7service16ITimeZoneServiceE");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_12(void) {
        auto x;
#define id x

	set_cmt	(0X7100073D30,	"reference to type's name",	0);
	create_qword	(x=0X7100073D30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073D38,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073D38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073D40,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073D40,	E_PREV + 0,	"; public \x01\b\x01(0000007100073D40nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,void>\x02\b");
	create_qword	(x=0X7100073D40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073D40,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE5_tO2NINS6_21TimeZoneServiceServerEE4typeEvEE");
	set_cmt	(0X7100073D48,	"reference to type's name",	0);
	create_qword	(x=0X7100073D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073D50,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073D50,	E_PREV + 0,	"; public \x01\b\x01(0000007100073D50nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,nn::timesrv::detail::service::ITimeZoneService>::type\x02\b :");
	update_extra_cmt		(0X7100073D50,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073D28nn::timesrv::detail::service::ITimeZoneService\x02\b :");
	update_extra_cmt		(0X7100073D50,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073D50,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073D50,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100073D40nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,void>\x02\b");
	create_qword	(x=0X7100073D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073D50,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE5_tO2NINS9_21TimeZoneServiceServerEE4typeESA_E4typeE");
	set_cmt	(0X7100073D58,	"reference to type's name",	0);
	create_qword	(x=0X7100073D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073D60,	"attribute",	0);
	create_dword	(x=0X7100073D60);
	op_hex		(x,	0);
	set_cmt	(0X7100073D64,	"count of base classes",	0);
	create_dword	(x=0X7100073D64);
	op_dec		(x,	0);
	set_cmt	(0X7100073D68,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073D68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073D70,	"base class' attributes",	0);
	create_qword	(x=0X7100073D70);
	op_hex		(x,	0);
	set_cmt	(0X7100073D78,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073D78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073D80,	"base class' attributes",	0);
	create_qword	(x=0X7100073D80);
	op_hex		(x,	0);
	set_cmt	(0X7100073D88,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073D88,	E_PREV + 0,	"; public \x01\b\x01(0000007100073D88nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,nn::timesrv::detail::service::ITimeZoneService>::type\x02\b :");
	update_extra_cmt		(0X7100073D88,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073D50nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,nn::timesrv::detail::service::ITimeZoneService>::type\x02\b :");
	update_extra_cmt		(0X7100073D88,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073D28nn::timesrv::detail::service::ITimeZoneService\x02\b :");
	update_extra_cmt		(0X7100073D88,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073D88,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073D88,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100073D40nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,void>\x02\b");
	create_qword	(x=0X7100073D88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073D88,	"_ZTIN2nn2sf13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE4_tABINS6_5_tO2NINS4_21TimeZoneServiceServerEE4typeES5_E4typeE");
	set_cmt	(0X7100073D90,	"reference to type's name",	0);
	create_qword	(x=0X7100073D90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073D98,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073D98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073DA0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073DA0,	E_PREV + 0,	"; public \x01\b\x01(0000007100073DA0nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,nn::timesrv::detail::service::ITimeZoneService>::type,nn::sf::StatefulAllocationPolicy<nn::sf::ExpHeapAllocator>>::Object\x02\b :");
	update_extra_cmt		(0X7100073DA0,	E_PREV + 1,	";   protected /* offset 0x20 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X7100073DA0,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073D88nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,nn::timesrv::detail::service::ITimeZoneService>::type\x02\b :");
	update_extra_cmt		(0X7100073DA0,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073D50nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,nn::timesrv::detail::service::ITimeZoneService>::type\x02\b :");
	update_extra_cmt		(0X7100073DA0,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(0000007100073D28nn::timesrv::detail::service::ITimeZoneService\x02\b :");
	update_extra_cmt		(0X7100073DA0,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073DA0,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073DA0,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(0000007100073D40nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ITimeZoneService>::_tO2N<nn::timesrv::detail::service::TimeZoneServiceServer>::type,void>\x02\b");
	create_qword	(x=0X7100073DA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073DA0,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service16ITimeZoneServiceEE4_tABINS8_5_tO2NINS6_21TimeZoneServiceServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X7100073DA8,	"reference to type's name",	0);
	create_qword	(x=0X7100073DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073DB0,	"attribute",	0);
	create_dword	(x=0X7100073DB0);
	op_hex		(x,	0);
	set_cmt	(0X7100073DB4,	"count of base classes",	0);
	create_dword	(x=0X7100073DB4);
	op_dec		(x,	0);
	set_cmt	(0X7100073DB8,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073DB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073DC0,	"base class' attributes",	0);
	create_qword	(x=0X7100073DC0);
	op_hex		(x,	0);
	set_cmt	(0X7100073DC8,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073DC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073DD0,	"base class' attributes",	0);
	create_qword	(x=0X7100073DD0);
	op_hex		(x,	0);
	set_cmt	(0X7100073DD8,	"offset to this",	0);
	create_qword	(x=0X7100073DD8);
	op_dec		(x,	0);
	set_name	(0X7100073DD8,	"_ZTVN2nn7timesrv6detail7service16ITimeZoneServiceE");
	create_qword	(x=0X7100073DE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073DE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073DF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073E78,	"offset to this",	0);
	create_qword	(x=0X7100073E78);
	op_dec		(x,	0);
	set_name	(0X7100073E78,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE4_tABINS8_5_tO2NINS6_22SteadyClockAlarmServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	create_qword	(x=0X7100073E80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073E98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073EA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073EA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073EB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073EB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073EC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073EC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073ED0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073ED8,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073ED8,	E_PREV + 0,	"; public \x01\b\x01(0000007100073ED8nn::timesrv::detail::service::ISteadyClockAlarm\x02\b :");
	update_extra_cmt		(0X7100073ED8,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073ED8,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b");
	create_qword	(x=0X7100073ED8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073ED8,	"_ZTIN2nn7timesrv6detail7service17ISteadyClockAlarmE");
	set_cmt	(0X7100073EE0,	"reference to type's name",	0);
	create_qword	(x=0X7100073EE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073EE8,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073EE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073EF0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073EF0,	E_PREV + 0,	"; public \x01\b\x01(0000007100073EF0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,void>\x02\b");
	create_qword	(x=0X7100073EF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073EF0,	"_ZTIN2nn2sf6detail16ObjectHolderImplINS0_13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE5_tO2NINS6_22SteadyClockAlarmServerEE4typeEvEE");
	set_cmt	(0X7100073EF8,	"reference to type's name",	0);
	create_qword	(x=0X7100073EF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F00,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073F00,	E_PREV + 0,	"; public \x01\b\x01(0000007100073F00nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,nn::timesrv::detail::service::ISteadyClockAlarm>::type\x02\b :");
	update_extra_cmt		(0X7100073F00,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073ED8nn::timesrv::detail::service::ISteadyClockAlarm\x02\b :");
	update_extra_cmt		(0X7100073F00,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073F00,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073F00,	E_PREV + 4,	";   public /* offset 0x8 */ \x01\b\x01(0000007100073EF0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,void>\x02\b");
	create_qword	(x=0X7100073F00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073F00,	"_ZTIN2nn2sf6detail19InterfaceInfoBottomINS0_14IServiceObjectEE4_tABINS0_13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE5_tO2NINS9_22SteadyClockAlarmServerEE4typeESA_E4typeE");
	set_cmt	(0X7100073F08,	"reference to type's name",	0);
	create_qword	(x=0X7100073F08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F10,	"attribute",	0);
	create_dword	(x=0X7100073F10);
	op_hex		(x,	0);
	set_cmt	(0X7100073F14,	"count of base classes",	0);
	create_dword	(x=0X7100073F14);
	op_dec		(x,	0);
	set_cmt	(0X7100073F18,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073F18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F20,	"base class' attributes",	0);
	create_qword	(x=0X7100073F20);
	op_hex		(x,	0);
	set_cmt	(0X7100073F28,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073F28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F30,	"base class' attributes",	0);
	create_qword	(x=0X7100073F30);
	op_hex		(x,	0);
	set_cmt	(0X7100073F38,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073F38,	E_PREV + 0,	"; public \x01\b\x01(0000007100073F38nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,nn::timesrv::detail::service::ISteadyClockAlarm>::type\x02\b :");
	update_extra_cmt		(0X7100073F38,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073F00nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,nn::timesrv::detail::service::ISteadyClockAlarm>::type\x02\b :");
	update_extra_cmt		(0X7100073F38,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073ED8nn::timesrv::detail::service::ISteadyClockAlarm\x02\b :");
	update_extra_cmt		(0X7100073F38,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073F38,	E_PREV + 4,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073F38,	E_PREV + 5,	";     public /* offset 0x8 */ \x01\b\x01(0000007100073EF0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,void>\x02\b");
	create_qword	(x=0X7100073F38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073F38,	"_ZTIN2nn2sf13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE4_tABINS6_5_tO2NINS4_22SteadyClockAlarmServerEE4typeES5_E4typeE");
	set_cmt	(0X7100073F40,	"reference to type's name",	0);
	create_qword	(x=0X7100073F40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F48,	"reference to parent's type name",	0);
	create_qword	(x=0X7100073F48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F50,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100073F50,	E_PREV + 0,	"; public \x01\b\x01(0000007100073F50nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,nn::timesrv::detail::service::ISteadyClockAlarm>::type,nn::sf::StatefulAllocationPolicy<nn::sf::ExpHeapAllocator>>::Object\x02\b :");
	update_extra_cmt		(0X7100073F50,	E_PREV + 1,	";   protected /* offset 0x68 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X7100073F50,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073F38nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,nn::timesrv::detail::service::ISteadyClockAlarm>::type\x02\b :");
	update_extra_cmt		(0X7100073F50,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073F00nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,nn::timesrv::detail::service::ISteadyClockAlarm>::type\x02\b :");
	update_extra_cmt		(0X7100073F50,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(0000007100073ED8nn::timesrv::detail::service::ISteadyClockAlarm\x02\b :");
	update_extra_cmt		(0X7100073F50,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X7100073F50,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X7100073F50,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(0000007100073EF0nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::ISteadyClockAlarm>::_tO2N<nn::timesrv::detail::service::SteadyClockAlarmServer>::type,void>\x02\b");
	create_qword	(x=0X7100073F50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100073F50,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service17ISteadyClockAlarmEE4_tABINS8_5_tO2NINS6_22SteadyClockAlarmServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X7100073F58,	"reference to type's name",	0);
	create_qword	(x=0X7100073F58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F60,	"attribute",	0);
	create_dword	(x=0X7100073F60);
	op_hex		(x,	0);
	set_cmt	(0X7100073F64,	"count of base classes",	0);
	create_dword	(x=0X7100073F64);
	op_dec		(x,	0);
	set_cmt	(0X7100073F68,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073F68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F70,	"base class' attributes",	0);
	create_qword	(x=0X7100073F70);
	op_hex		(x,	0);
	set_cmt	(0X7100073F78,	"base class' type descriptor",	0);
	create_qword	(x=0X7100073F78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073F80,	"base class' attributes",	0);
	create_qword	(x=0X7100073F80);
	op_hex		(x,	0);
	set_cmt	(0X7100073F88,	"offset to this",	0);
	create_qword	(x=0X7100073F88);
	op_dec		(x,	0);
	set_name	(0X7100073F88,	"_ZTVN2nn7timesrv6detail7service17ISteadyClockAlarmE");
	create_qword	(x=0X7100073F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073F98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100073FE8,	"offset to this",	0);
	create_qword	(x=0X7100073FE8);
	op_dec		(x,	0);
	set_name	(0X7100073FE8,	"_ZTVN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE4_tABINS8_5_tO2NINS6_19StaticServiceServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	create_qword	(x=0X7100073FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100073FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000740A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000740A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000740B0,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X71000740B0,	E_PREV + 0,	"; public \x01\b\x01(00000071000740B0nn::sf::detail::ObjectImplFactoryWithStatefulAllocator<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,nn::timesrv::detail::service::IStaticService>::type,nn::sf::StatefulAllocationPolicy<nn::sf::ExpHeapAllocator>>::Object\x02\b :");
	update_extra_cmt		(0X71000740B0,	E_PREV + 1,	";   protected /* offset 0x50 */ \x01\b\x01(000000710006F5A0nn::sf::impl::detail::ServiceObjectImplBase2\x02\b,");
	update_extra_cmt		(0X71000740B0,	E_PREV + 2,	";   public /* offset 0x0 */ \x01\b\x01(0000007100073440nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,nn::timesrv::detail::service::IStaticService>::type\x02\b :");
	update_extra_cmt		(0X71000740B0,	E_PREV + 3,	";     public /* offset 0x0 */ \x01\b\x01(0000007100073408nn::sf::detail::InterfaceInfoBottom<nn::sf::IServiceObject>::_tAB<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,nn::timesrv::detail::service::IStaticService>::type\x02\b :");
	update_extra_cmt		(0X71000740B0,	E_PREV + 4,	";       public /* offset 0x0 */ \x01\b\x01(00000071000733E0nn::timesrv::detail::service::IStaticService\x02\b :");
	update_extra_cmt		(0X71000740B0,	E_PREV + 5,	";         public /* offset 0x0 */ \x01\b\x01(000000710006F4A0nn::sf::IServiceObject\x02\b :");
	update_extra_cmt		(0X71000740B0,	E_PREV + 6,	";           public /* offset 0x0 */ \x01\b\x01(000000710006F490nn::sf::ISharedObject\x02\b,");
	update_extra_cmt		(0X71000740B0,	E_PREV + 7,	";       public /* offset 0x8 */ \x01\b\x01(00000071000733F8nn::sf::detail::ObjectHolderImpl<nn::sf::InterfaceInfo<nn::timesrv::detail::service::IStaticService>::_tO2N<nn::timesrv::detail::service::StaticServiceServer>::type,void>\x02\b");
	create_qword	(x=0X71000740B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000740B0,	"_ZTIN2nn2sf6detail38ObjectImplFactoryWithStatefulAllocatorINS0_13InterfaceInfoINS_7timesrv6detail7service14IStaticServiceEE4_tABINS8_5_tO2NINS6_19StaticServiceServerEE4typeES7_E4typeENS0_24StatefulAllocationPolicyINS0_16ExpHeapAllocatorEEEE6ObjectE");
	set_cmt	(0X71000740B8,	"reference to type's name",	0);
	create_qword	(x=0X71000740B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000740C0,	"attribute",	0);
	create_dword	(x=0X71000740C0);
	op_hex		(x,	0);
	set_cmt	(0X71000740C4,	"count of base classes",	0);
	create_dword	(x=0X71000740C4);
	op_dec		(x,	0);
	set_cmt	(0X71000740C8,	"base class' type descriptor",	0);
	create_qword	(x=0X71000740C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000740D0,	"base class' attributes",	0);
	create_qword	(x=0X71000740D0);
	op_hex		(x,	0);
	set_cmt	(0X71000740D8,	"base class' type descriptor",	0);
	create_qword	(x=0X71000740D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000740E0,	"base class' attributes",	0);
	create_qword	(x=0X71000740E0);
	op_hex		(x,	0);
	create_qword	(x=0X71000740E8);
	op_hex		(x,	0);
	set_name	(0X71000740E8,	"nn::psc::sf::IPmStateLock__vftable");
	create_qword	(x=0X71000740F0);
	op_hex		(x,	0);
	create_qword	(x=0X71000740F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074110);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074138);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074140);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074158);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X7100074160);
	create_dword	(0X7100074188);
	set_cmt	(0X7100074630,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100074630,	E_PREV + 0,	"; public \x01\b\x01(0000007100074630__cxxabiv1::__shim_type_info\x02\b :");
	update_extra_cmt		(0X7100074630,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100074780std::type_info\x02\b");
	create_qword	(x=0X7100074630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074630,	"_ZTIN10__cxxabiv116__shim_type_infoE");
	set_cmt	(0X7100074638,	"reference to type's name",	0);
	create_qword	(x=0X7100074638);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074640,	"reference to parent's type name",	0);
	create_qword	(x=0X7100074640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074648,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100074648,	E_PREV + 0,	"; public \x01\b\x01(0000007100074648__cxxabiv1::__class_type_info\x02\b :");
	update_extra_cmt		(0X7100074648,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100074630__cxxabiv1::__shim_type_info\x02\b :");
	update_extra_cmt		(0X7100074648,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100074780std::type_info\x02\b");
	create_qword	(x=0X7100074648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074648,	"_ZTIN10__cxxabiv117__class_type_infoE");
	set_cmt	(0X7100074650,	"reference to type's name",	0);
	create_qword	(x=0X7100074650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074658,	"reference to parent's type name",	0);
	create_qword	(x=0X7100074658);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074660,	"offset to this",	0);
	create_qword	(x=0X7100074660);
	op_dec		(x,	0);
	set_name	(0X7100074660,	"_ZTVN10__cxxabiv117__class_type_infoE");
	create_qword	(x=0X7100074668);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074670);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074688);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074690);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X71000746B0,	"offset to this",	0);
	create_qword	(x=0X71000746B0);
	op_dec		(x,	0);
	set_name	(0X71000746B0,	"_ZTVN10__cxxabiv120__si_class_type_infoE");
	create_qword	(x=0X71000746B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000746F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074700,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100074700,	E_PREV + 0,	"; public \x01\b\x01(0000007100074700__cxxabiv1::__si_class_type_info\x02\b :");
	update_extra_cmt		(0X7100074700,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100074648__cxxabiv1::__class_type_info\x02\b :");
	update_extra_cmt		(0X7100074700,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100074630__cxxabiv1::__shim_type_info\x02\b :");
	update_extra_cmt		(0X7100074700,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100074780std::type_info\x02\b");
	create_qword	(x=0X7100074700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074700,	"_ZTIN10__cxxabiv120__si_class_type_infoE");
	set_cmt	(0X7100074708,	"reference to type's name",	0);
	create_qword	(x=0X7100074708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074710,	"reference to parent's type name",	0);
	create_qword	(x=0X7100074710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074718,	"offset to this",	0);
	create_qword	(x=0X7100074718);
	op_dec		(x,	0);
	set_name	(0X7100074718,	"_ZTVN10__cxxabiv121__vmi_class_type_infoE");
	create_qword	(x=0X7100074720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074728);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074740);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074750);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074760);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074768,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100074768,	E_PREV + 0,	"; public \x01\b\x01(0000007100074768__cxxabiv1::__vmi_class_type_info\x02\b :");
	update_extra_cmt		(0X7100074768,	E_PREV + 1,	";   public /* offset 0x0 */ \x01\b\x01(0000007100074648__cxxabiv1::__class_type_info\x02\b :");
	update_extra_cmt		(0X7100074768,	E_PREV + 2,	";     public /* offset 0x0 */ \x01\b\x01(0000007100074630__cxxabiv1::__shim_type_info\x02\b :");
	update_extra_cmt		(0X7100074768,	E_PREV + 3,	";       public /* offset 0x0 */ \x01\b\x01(0000007100074780std::type_info\x02\b");
	create_qword	(x=0X7100074768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074768,	"_ZTIN10__cxxabiv121__vmi_class_type_infoE");
	set_cmt	(0X7100074770,	"reference to type's name",	0);
	create_qword	(x=0X7100074770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074778,	"reference to parent's type name",	0);
	create_qword	(x=0X7100074778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7100074780,	"reference to RTTI's type class",	0);
	update_extra_cmt		(0X7100074780,	E_PREV + 0,	"; public \x01\b\x01(0000007100074780std::type_info\x02\b");
	create_qword	(x=0X7100074780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074780,	"_ZTISt9type_info");
	set_cmt	(0X7100074788,	"reference to type's name",	0);
	create_qword	(x=0X7100074788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X7100074790);
	create_qword	(0X71000749E8);
	create_qword	(x=0X71000749F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000749F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074A98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074AF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074AF0,	"init_arrayPtr");
	create_qword	(x=0X7100074AF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074B68,	"_ZTVN2nn2os6detail22MultiWaitHolderOfEventEPtr");
	create_qword	(x=0X7100074B70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074B78,	"_ZTVN2nn2os6detail29MultiWaitHolderOfNativeHandleEPtr");
	create_qword	(x=0X7100074B80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074BF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074C18,	"_ZTVN2nn2sf4cmif6server23CmifServerDomainManagerEPtr");
	create_qword	(x=0X7100074C20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074C20,	"_ZTVN2nn2sf4hipc6server2v16detail29HipcAllInOneServerManagerBaseEPtr");
	create_qword	(x=0X7100074C28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074C38,	"_ZTVN2nn2sf4hipc6server2v124HipcServerSessionManagerEPtr");
	create_qword	(x=0X7100074C40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074C98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074CF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074D98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074DD8,	"nn::psc::sf::IPmStateLock__vftablePtr");
	create_qword	(x=0X7100074DE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074DF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074E40,	"nn.psc.PmControl_ThreadFuncPtr");
	create_qword	(x=0X7100074E48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074E98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074ED0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074ED8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074EF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074F98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FA8,	"_ZTVN2nn7timesrv6detail4core27StandardUserSystemClockCoreE__vftablePtr");
	create_qword	(x=0X7100074FB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074FB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FB8,	"_ZTVN2nn7timesrv6detail4core23StandardSteadyClockCoreE__vftablePtr");
	create_qword	(x=0X7100074FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FC0,	"_ZTVN2nn7timesrv6detail4core24TickBasedSteadyClockCoreE__vftablePtr");
	create_qword	(x=0X7100074FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FC8,	"_ZTVN2nn7timesrv6detail7service17ISteadyClockAlarmE__vftablebasePtr");
	create_qword	(x=0X7100074FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FD0,	"_ZTVN2nn7timesrv6detail7service17ISteadyClockAlarmE__vftablePtr");
	create_qword	(x=0X7100074FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100074FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FE0,	"nn::timesrv::detail::service::HipcServerManager_vftablePtr");
	create_qword	(x=0X7100074FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FE8,	"nn::timesrv::detail::service::IStaticService_base_vtablePtr");
	create_qword	(x=0X7100074FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FF0,	"nn::timesrv::detail::service::IStaticService_vtablePtr");
	create_qword	(x=0X7100074FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100074FF8,	"_ZTVN2nn7timesrv6detail7service13IAlarmServiceE__base_vftable");
	create_qword	(x=0X7100075000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075000,	"_ZTVN2nn7timesrv6detail7service13IAlarmServiceE__vftable");
	create_qword	(x=0X7100075008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075008,	"nn::timesrv::detail::service::ITimeServiceManager_base_vftablePtr");
	create_qword	(x=0X7100075010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075010,	"nn::timesrv::detail::service::ITimeServiceManager_vftablePtr");
	create_qword	(x=0X7100075018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075018,	"_ZTVN2nn7timesrv6detail7service25IPowerStateRequestHandlerE__base_vftable");
	create_qword	(x=0X7100075020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075020,	"_ZTVN2nn7timesrv6detail7service25IPowerStateRequestHandlerE__vftable");
	create_qword	(x=0X7100075028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075028,	"timeM_ServiceHandlerPtr");
	create_qword	(x=0X7100075030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075030,	"timeSU_ServiceHandlerPtr");
	create_qword	(x=0X7100075038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075038,	"timeAL_ServiceHandlerPtr");
	create_qword	(x=0X7100075040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075040,	"ServiceHandler_IPowerStateRequestHandlerPtrPtr");
	create_qword	(x=0X7100075048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075048,	"_ZTVN2nn2sf4hipc6server2v131HipcSimpleAllInOneServerManagerILm32ELm5ENS0_6detail44HipcSimpleAllInOneServerManagerOptionsGetterINS_7timesrv6detail7service38HipcSimpleAllInOneServerManagerOptionsEEEEEPtr");
	create_qword	(x=0X7100075050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075070,	"nn::timesrv::detail::service::LocalSystemClockContextWriter_vftablePtr");
	create_qword	(x=0X7100075078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075078,	"nn::timesrv::detail::service::NetworkSystemClockContextWriter_vftablePtr");
	create_qword	(x=0X7100075080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075080,	"nn::timesrv::detail::service::EphemeralNetworkSystemClockContextWriter_vftable");
	create_qword	(x=0X7100075088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100075098,	"nn::timesrv::detail::service::ISystemClock_vftablePtr");
	create_qword	(x=0X71000750A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000750A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000750B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000750B0,	"_ZTVN2nn7timesrv6detail7service12ISteadyClockE__vftable");
	create_qword	(x=0X71000750B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000750C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000750C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000750C8,	"nn::timesrv::detail::service::ITimeZoneService_vftablePtr");
	create_qword	(x=0X71000750D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000750D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000750D8,	"nn::timesrv::detail::service::IStaticService_vftablePtr");
	create_qword	(x=0X71000750E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000750E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000750F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000750F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X71000750F8,	"init_array");
	create_qword	(x=0X7100075100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075110);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075138);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075140);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075148);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075158);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075160);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075178);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075188);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075190);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075198);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000751A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000751A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000751B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X71000751B8,	0X8);
	create_qword	(x=0X71000751C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000751C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000751D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X71000751D8,	0X8);
	create_qword	(x=0X71000751E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000751E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000751F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X71000751F8,	0X8);
	create_qword	(x=0X7100075200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075208);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075218);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075220);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075228);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075230);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075238);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075240);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X7100075248,	0X8);
	create_qword	(x=0X7100075250);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075270);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075278);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075280);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075288);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075290);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X7100075298,	0X8);
	create_qword	(x=0X71000752A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000752A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000752B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X71000752B8,	0X8);
	create_qword	(x=0X71000752C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000752C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000752D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X71000752D8,	0X8);
	create_qword	(x=0X71000752E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000752E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000752F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X71000752F8,	0X8);
	create_qword	(x=0X7100075300);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075308);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075310);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X7100075318,	0X8);
	create_qword	(x=0X7100075320);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075328);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075330);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075338);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075340);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075348);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075350);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075358);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075360);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X7100075368,	0X8);
	create_qword	(x=0X7100075370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075380);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X7100075388,	0X8);
	create_qword	(x=0X7100075390);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X7100075398);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000753A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X71000753A8,	0X8);
	create_qword	(x=0X71000753B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000753B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X71000753C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X710007C000);
	set_name	(0X710007C000,	"gHeap_HeadPtr");
	create_byte	(0X710007C008);
	set_name	(0X710007C008,	"gHeapInitialised");
	make_array	(0X710007C009,	0X7);
	create_qword	(0X710007C010);
	set_name	(0X710007C010,	"gHeap__vftable");
	make_array	(0X710007C018,	0X8);
	set_name	(0X710007C018,	"gHeapPtr");
	create_qword	(0X710007C020);
	set_name	(0X710007C020,	"gHeapSize");
	make_array	(0X710007C028,	0XFD8);
	create_byte	(0X710007D000);
	make_array	(0X710007D000,	0X18000);
	set_name	(0X710007D000,	"gHeap");
	create_byte	(0X7100095000);
	make_array	(0X7100095001,	0X7);
	create_qword	(0X7100095008);
	create_qword	(0X7100095020);
	create_qword	(0X7100095028);
	create_qword	(0X7100095030);
	make_array	(0X7100095038,	0XC8);
	create_dword	(0X7100095100);
	make_array	(0X7100095104,	0X4);
	create_qword	(0X7100095108);
	create_qword	(0X7100095110);
	create_qword	(0X7100095118);
	create_qword	(0X7100095120);
	create_qword	(0X7100095140);
	create_qword	(0X7100095148);
	make_array	(0X7100095150,	0X30);
	create_qword	(0X7100095180);
	create_qword	(0X7100095188);
	make_array	(0X7100095190,	0X30);
	create_dword	(0X7100095230);
	make_array	(0X7100095230,	0X50);
	create_qword	(0X7100095370);
	create_qword	(0X71000954E0);
	make_array	(0X71000954E8,	0X8);
	create_qword	(0X71000954F0);
	create_dword	(0X71000954F8);
	create_qword	(0X7100095618);
	create_qword	(0X7100095620);
	create_qword	(0X7100095628);
	create_qword	(0X7100095630);
	create_qword	(0X7100095638);
	create_qword	(0X7100095698);
	create_qword	(0X71000956A0);
	create_qword	(0X71000956A8);
	create_qword	(0X71000956B0);
	create_qword	(0X71000956B8);
	create_qword	(0X71000956C0);
	create_byte	(0X71000956C8);
	create_byte	(0X71000956F8);
	set_name	(0X71000956F8,	"gRandomInitialised");
	make_array	(0X71000956F9,	0X3);
	create_dword	(0X71000956FC);
	make_array	(0X71000956FC,	0X5);
	set_name	(0X71000956FC,	"RandomBytes");
	create_qword	(0X7100095710);
	make_array	(0X7100095718,	0X8);
	create_qword	(0X7100095720);
	create_qword	(0X7100095960);
	create_qword	(0X7100095968);
	create_dword	(0X7100095974);
	create_qword	(0X7100095988);
	create_qword	(0X7100095990);
	create_qword	(0X71000959D8);
	create_qword	(0X71000959E0);
	create_dword	(0X71000959EC);
	make_array	(0X71000959F0,	0X10);
	create_qword	(0X7100095A00);
	create_qword	(0X7100095A08);
	create_word	(0X7100095A10);
	create_dword	(0X7100095A6C);
	create_dword	(0X7100095AF4);
	create_dword	(0X7100095B7C);
	create_dword	(0X7100095C04);
	create_dword	(0X7100095C8C);
	create_dword	(0X7100095D14);
	create_dword	(0X7100095D9C);
	create_dword	(0X7100095E24);
	create_dword	(0X7100095EAC);
	create_dword	(0X7100095F34);
	create_dword	(0X7100095FBC);
	create_dword	(0X7100096044);
	create_dword	(0X71000960CC);
	create_dword	(0X7100096154);
	create_dword	(0X71000961DC);
	create_dword	(0X7100096264);
	create_dword	(0X71000962EC);
	create_dword	(0X7100096374);
	create_dword	(0X71000963FC);
	create_dword	(0X7100096484);
	create_qword	(0X71000964B8);
	create_qword	(0X71000964C0);
	create_dword	(0X71000964C8);
	create_qword	(0X71000964F0);
	create_qword	(0X71000964F8);
	create_qword	(0X71000968C0);
	create_qword	(0X71000968C8);
	create_dword	(0X71000968D0);
	create_qword	(0X7100097418);
	create_qword	(0X710009C000);
	create_qword	(0X710009C008);
	create_byte	(0X710009C010);
	make_array	(0X710009C011,	0X3);
	create_dword	(0X710009C014);
	create_qword	(0X710009C018);
	create_qword	(0X710009C028);
	create_dword	(0X710009C0F0);
	create_dword	(0X710009C0F4);
	create_byte	(0X710009C0F8);
	make_array	(0X710009C0F8,	0X8);
	create_dword	(0X710009C118);
	make_array	(0X710009C11C,	0X4);
	create_byte	(0X710009C370);
	make_array	(0X710009C371,	0X3);
	create_byte	(0X710009C378);
	make_array	(0X710009C379,	0X3);
	create_qword	(0X710009C380);
	make_array	(0X710009C388,	0X8);
	create_qword	(0X710009C390);
	create_qword	(0X710009D3D0);
	make_array	(0X710009D3D8,	0X8);
	create_qword	(0X710009D3E0);
	create_qword	(0X710009E420);
	make_array	(0X710009E428,	0X8);
	create_qword	(0X710009E430);
	create_qword	(0X710009E670);
	create_qword	(0X710009E678);
	create_dword	(0X710009E684);
	create_qword	(0X710009E698);
	create_qword	(0X710009E6A0);
	create_qword	(0X710009E6E8);
	create_qword	(0X710009E6F0);
	create_dword	(0X710009E6FC);
	create_qword	(0X710009E710);
	create_qword	(0X710009E718);
	create_word	(0X710009E720);
	create_dword	(0X710009E77C);
	create_dword	(0X710009E804);
	create_dword	(0X710009E88C);
	create_dword	(0X710009E914);
	create_dword	(0X710009E99C);
	create_dword	(0X710009EA24);
	create_dword	(0X710009EAAC);
	create_dword	(0X710009EB34);
	create_dword	(0X710009EBBC);
	create_dword	(0X710009EC44);
	create_dword	(0X710009ECCC);
	create_dword	(0X710009ED54);
	create_dword	(0X710009EDDC);
	create_dword	(0X710009EE64);
	create_dword	(0X710009EEEC);
	create_dword	(0X710009EF74);
	create_dword	(0X710009EFFC);
	create_dword	(0X710009F084);
	create_dword	(0X710009F10C);
	create_dword	(0X710009F194);
	create_qword	(0X710009F1C8);
	create_qword	(0X710009F1D0);
	create_dword	(0X710009F1D8);
	make_array	(0X710009F1DC,	0X24);
	create_qword	(0X710009F200);
	create_qword	(0X710009F208);
	create_qword	(0X710009F278);
	create_byte	(0X710009F280);
	make_array	(0X710009F280,	0X8);
	create_qword	(0X710009F288);
	make_array	(0X710009F288,	0X6);
	create_qword	(0X710009F2B8);
	create_dword	(0X710009F340);
	make_array	(0X710009F344,	0X4);
	create_qword	(0X710009F348);
	create_qword	(0X710009F350);
	create_qword	(0X710009F358);
	create_dword	(0X710009F390);
	make_array	(0X710009F394,	0X4);
	create_qword	(0X710009F398);
	create_qword	(0X710009F3A0);
	create_qword	(0X710009F3A8);
	create_qword	(0X710009F3D8);
	create_qword	(0X710009F3E8);
	create_qword	(0X710009F628);
	create_qword	(0X710009F630);
	create_dword	(0X710009F63C);
	create_qword	(0X710009F650);
	create_qword	(0X710009F658);
	create_qword	(0X710009F6A0);
	create_qword	(0X710009F6A8);
	create_dword	(0X710009F6B4);
	create_qword	(0X710009F6C8);
	create_qword	(0X710009F6D0);
	create_word	(0X710009F6D8);
	create_dword	(0X710009F734);
	create_dword	(0X710009F7BC);
	create_dword	(0X710009F844);
	create_dword	(0X710009F8CC);
	create_dword	(0X710009F954);
	create_dword	(0X710009F9DC);
	create_dword	(0X710009FA64);
	create_dword	(0X710009FAEC);
	create_qword	(0X710009FB20);
	create_qword	(0X71000A0B48);
	create_qword	(0X71000A0B50);
	create_qword	(0X71000A0BC0);
	create_byte	(0X71000A0BC8);
	make_array	(0X71000A0BC8,	0X8);
	create_qword	(0X71000A0BD0);
	make_array	(0X71000A0BD8,	0X8);
	create_qword	(0X71000A0BE0);
	make_array	(0X71000A0BE8,	0X8);
	create_qword	(0X71000A2000);
	make_array	(0X71000A2008,	0X8);
	create_qword	(0X71000A2010);
	create_qword	(0X71000A2250);
	create_qword	(0X71000A2258);
	create_dword	(0X71000A2264);
	create_qword	(0X71000A2278);
	create_qword	(0X71000A2280);
	create_qword	(0X71000A22C8);
	create_qword	(0X71000A22D0);
	create_dword	(0X71000A22DC);
	create_qword	(0X71000A22F0);
	create_qword	(0X71000A22F8);
	create_qword	(0X71000A2340);
	create_qword	(0X71000A2348);
	create_dword	(0X71000A2354);
	create_qword	(0X71000A2368);
	create_dword	(0X71000A2377);
	create_dword	(0X71000A23D4);
	create_dword	(0X71000A245C);
	create_dword	(0X71000A24E4);
	create_dword	(0X71000A256C);
	create_dword	(0X71000A25F4);
	create_dword	(0X71000A267C);
	create_dword	(0X71000A2704);
	create_dword	(0X71000A278C);
	create_dword	(0X71000A2814);
	create_dword	(0X71000A289C);
	create_dword	(0X71000A2924);
	create_dword	(0X71000A29AC);
	create_dword	(0X71000A2A34);
	create_dword	(0X71000A2ABC);
	create_dword	(0X71000A2B44);
	create_dword	(0X71000A2BCC);
	create_dword	(0X71000A2C54);
	create_dword	(0X71000A2CDC);
	create_dword	(0X71000A2D64);
	create_dword	(0X71000A2DEC);
	create_dword	(0X71000A2E74);
	create_dword	(0X71000A2EFC);
	create_dword	(0X71000A2F84);
	create_dword	(0X71000A300C);
	create_dword	(0X71000A3094);
	create_dword	(0X71000A311C);
	create_dword	(0X71000A31A4);
	create_dword	(0X71000A322C);
	create_dword	(0X71000A32B4);
	create_dword	(0X71000A333C);
	create_dword	(0X71000A33C4);
	create_dword	(0X71000A344C);
	create_dword	(0X71000A34D4);
	create_dword	(0X71000A355C);
	create_dword	(0X71000A35E4);
	create_dword	(0X71000A366C);
	create_dword	(0X71000A36F4);
	create_dword	(0X71000A377C);
	create_dword	(0X71000A3804);
	create_dword	(0X71000A388C);
	create_dword	(0X71000A3914);
	create_dword	(0X71000A399C);
	create_dword	(0X71000A3A24);
	create_dword	(0X71000A3AAC);
	create_dword	(0X71000A3B34);
	create_dword	(0X71000A3BBC);
	create_dword	(0X71000A3C44);
	create_dword	(0X71000A3CCC);
	create_dword	(0X71000A3D54);
	create_dword	(0X71000A3DDC);
	create_dword	(0X71000A3E64);
	create_dword	(0X71000A3EEC);
	create_dword	(0X71000A3F74);
	create_dword	(0X71000A3FFC);
	create_dword	(0X71000A4084);
	create_dword	(0X71000A410C);
	make_array	(0X71000A4110,	0X30);
	create_qword	(0X71000A4140);
	create_qword	(0X71000A4148);
	create_qword	(0X71000A4150);
	create_qword	(0X71000A4158);
	create_qword	(0X71000A4160);
	create_qword	(0X71000A4168);
	create_qword	(0X71000A4170);
	create_qword	(0X71000A4198);
	create_qword	(0X71000A41A0);
	create_qword	(0X71000A4C28);
	create_qword	(0X71000A4C30);
	create_qword	(0X71000A4C38);
	create_qword	(0X71000A4C40);
	create_qword	(0X71000A4C48);
	create_qword	(0X71000A4C50);
	create_qword	(0X71000A4C58);
	create_qword	(0X71000A71E0);
	create_qword	(0X71000AA000);
	make_array	(0X71000AA008,	0XFF8);
	create_qword	(0X71000AB000);
	make_array	(0X71000AB008,	0XFF8);
	set_name	(0X71000AC000,	"gPmControl");
	create_dword	(0X71000AC2DC);
	create_qword	(0X71000B4000);
	make_array	(0X71000B4008,	0X8);
	create_qword	(0X71000B4010);
	create_qword	(0X71000B4250);
	create_qword	(0X71000B4258);
	create_dword	(0X71000B4264);
	create_qword	(0X71000B4278);
	create_qword	(0X71000B4280);
	create_qword	(0X71000B42C8);
	create_qword	(0X71000B42D0);
	create_dword	(0X71000B42DC);
	create_qword	(0X71000B42F0);
	create_qword	(0X71000B42F8);
	create_word	(0X71000B4300);
	create_dword	(0X71000B435C);
	create_dword	(0X71000B43E4);
	create_dword	(0X71000B446C);
	create_dword	(0X71000B44F4);
	create_dword	(0X71000B457C);
	create_dword	(0X71000B4604);
	create_dword	(0X71000B468C);
	create_dword	(0X71000B4714);
	create_dword	(0X71000B479C);
	create_dword	(0X71000B4824);
	create_dword	(0X71000B48AC);
	create_dword	(0X71000B4934);
	create_dword	(0X71000B49BC);
	create_dword	(0X71000B4A44);
	create_dword	(0X71000B4ACC);
	create_dword	(0X71000B4B54);
	create_dword	(0X71000B4BDC);
	create_dword	(0X71000B4C64);
	create_dword	(0X71000B4CEC);
	create_dword	(0X71000B4D74);
	create_dword	(0X71000B4DFC);
	create_dword	(0X71000B4E84);
	create_dword	(0X71000B4F0C);
	create_dword	(0X71000B4F94);
	create_dword	(0X71000B501C);
	create_dword	(0X71000B50A4);
	create_dword	(0X71000B512C);
	create_dword	(0X71000B51B4);
	create_dword	(0X71000B523C);
	create_dword	(0X71000B52C4);
	create_dword	(0X71000B534C);
	create_dword	(0X71000B53D4);
	create_qword	(0X71000B5408);
	create_qword	(0X71000B5410);
	create_qword	(0X71000B5418);
	create_qword	(0X71000B5420);
	create_qword	(0X71000B6448);
	create_qword	(0X71000B6450);
	create_qword	(0X71000B6A58);
	create_qword	(0X71000B6A60);
	create_qword	(0X71000B6A68);
	create_qword	(0X71000B6A70);
	create_qword	(0X71000B8E78);
	make_array	(0X71000B8E80,	0X180);
	create_qword	(0X71000BD000);
	make_array	(0X71000BD008,	0X8);
	create_qword	(0X71000BD398);
	create_qword	(0X71000BD3A0);
	create_dword	(0X71000BD420);
	make_array	(0X71000BD424,	0XC);
	create_qword	(0X71000BD430);
	create_qword	(0X71000BDFD0);
	create_qword	(0X71000BDFD8);
	create_qword	(0X71000BDFE0);
	make_array	(0X71000BDFE8,	0X8);
	create_qword	(0X71000BDFF0);
	create_qword	(0X71000BDFF8);
	create_qword	(0X71000BE008);
	create_qword	(0X71000BF058);
	create_byte	(0X71000BF060);
	make_array	(0X71000BF061,	0X7);
	create_qword	(0X71000BF068);
	create_qword	(0X71000BF070);
	create_qword	(0X71000BF078);
	create_qword	(0X71000BF080);
	create_qword	(0X71000BF088);
	create_qword	(0X71000BF090);
	create_qword	(0X71000BF098);
	create_qword	(0X71000BF0A0);
	create_qword	(0X71000BF0A8);
	create_qword	(0X71000BF0B0);
	create_qword	(0X71000BF0B8);
	create_qword	(0X71000BF0C0);
	create_qword	(0X71000BF0C8);
	create_qword	(0X71000BF0D0);
	create_byte	(0X71000BF0D8);
	create_byte	(0X71000BF0DB);
	create_byte	(0X71000BF0DC);
	make_array	(0X71000BF0DD,	0X3);
	create_byte	(0X71000BF0E0);
	make_array	(0X71000BF0E1,	0X7);
	create_qword	(0X71000BF0E8);
	create_qword	(0X71000BF0F0);
	create_byte	(0X71000BF0F8);
	create_byte	(0X71000BF0F9);
	create_byte	(0X71000BF0FA);
	create_byte	(0X71000BF0FB);
	create_byte	(0X71000BF0FC);
	create_byte	(0X71000BF0FF);
	create_byte	(0X71000BF100);
	create_qword	(0X71000BF418);
	create_qword	(0X71000BF420);
	create_qword	(0X71000BF428);
	create_qword	(0X71000BF430);
	create_qword	(0X71000BF438);
	create_qword	(0X71000BF440);
	create_qword	(0X71000BF448);
	create_qword	(0X71000BF450);
	create_qword	(0X71000BF458);
	create_qword	(0X71000BF460);
	create_qword	(0X71000BF468);
	create_qword	(0X71000BF470);
	create_qword	(0X71000BF478);
	create_qword	(0X71000BF480);
	create_qword	(0X71000BF488);
	create_qword	(0X71000BF490);
	create_qword	(0X71000BF498);
	create_qword	(0X71000BF4A0);
	create_qword	(0X71000BF4A8);
	create_qword	(0X71000BF4B0);
	create_qword	(0X71000BF4B8);
	create_qword	(0X71000BF4C0);
	create_qword	(0X71000BF4C8);
	create_byte	(0X71000BF4D4);
	make_array	(0X71000BF4D5,	0X3);
	create_qword	(0X71000E7530);
	create_dword	(0X71000E7A48);
	make_array	(0X71000E7A4C,	0X4);
	create_qword	(0X71000E7A50);
	create_qword	(0X71000E7B50);
	create_qword	(0X71000E7B90);
	create_qword	(0X71000E7BD0);
	create_qword	(0X71000E7C10);
	create_qword	(0X71000E7C50);
	create_qword	(0X71000E7C90);
	create_qword	(0X71000E7CD0);
	create_qword	(0X71000E7D10);
	create_qword	(0X71000E7D50);
	create_qword	(0X71000E7D90);
	create_qword	(0X71000E7DD0);
	create_qword	(0X71000E7E10);
	create_qword	(0X71000E7E50);
	create_qword	(0X71000E7E90);
	create_qword	(0X71000E7ED0);
	create_qword	(0X71000E7F10);
	create_qword	(0X71000E7F50);
	create_qword	(0X71000E7F90);
	create_qword	(0X71000E7FD0);
	create_qword	(0X71000E8010);
	create_qword	(0X71000E8050);
	create_qword	(0X71000E8090);
	create_qword	(0X71000E80D0);
	create_qword	(0X71000E8110);
	create_qword	(0X71000E8150);
	create_qword	(0X71000E8190);
	create_qword	(0X71000E81D0);
	create_qword	(0X71000E8210);
	create_qword	(0X71000E8250);
	create_qword	(0X71000E8290);
	create_qword	(0X71000E82D0);
	create_qword	(0X71000E8310);
	create_qword	(0X71000E8350);
	create_qword	(0X71000E8390);
	create_qword	(0X71000E83D0);
	create_qword	(0X71000E8410);
	create_qword	(0X71000E8450);
	create_qword	(0X71000E8490);
	create_qword	(0X71000E84D0);
	create_qword	(0X71000E8510);
	create_qword	(0X71000E8550);
	create_qword	(0X71000E8590);
	create_qword	(0X71000E85D0);
	create_qword	(0X71000E8610);
	create_qword	(0X71000E8650);
	create_qword	(0X71000E8690);
	create_qword	(0X71000E86D0);
	create_qword	(0X71000E8710);
	create_qword	(0X71000E8750);
	create_qword	(0X71000E8790);
	create_qword	(0X71000E87D0);
	create_qword	(0X71000E8810);
	create_qword	(0X71000E8850);
	create_qword	(0X71000E8890);
	create_qword	(0X71000E88D0);
	create_qword	(0X71000E8910);
	create_qword	(0X71000E8950);
	create_qword	(0X71000E8990);
	create_qword	(0X71000E89D0);
	create_qword	(0X71000E8A10);
	create_qword	(0X71000E8A50);
	create_qword	(0X71000E8A90);
	create_qword	(0X71000E8AD0);
	create_qword	(0X71000E8B10);
	create_dword	(0X71000E8B48);
	create_byte	(0X71000E8B50);
	make_array	(0X71000E8B51,	0X7);
	create_byte	(0X71000E8B58);
	make_array	(0X71000E8B59,	0X7);
	create_qword	(0X71000E8B60);
	create_qword	(0X71000E8B68);
	create_qword	(0X71000E8B70);
	create_qword	(0X71000E8B80);
	create_qword	(0X71000E8B88);
	create_qword	(0X71000E8B90);
	MakeStruct	(0X71000E8BB0,	"nn::os::Thread");
	set_name	(0X71000E8BB0,	"gTimeThread");
	create_byte	(0X71000E9000);
	make_array	(0X71000E9000,	0X2000);
	set_name	(0X71000E9000,	"gTimeServer_ThreadStack");
	create_byte	(0X71000EB000);
	set_name	(0X71000EB000,	"gTimeInitialized");
	make_array	(0X71000EB001,	0X7);
	MakeStruct	(0X71000EB008,	"TimeServer");
	make_array	(0X71000EB008,	0);
	set_name	(0X71000EB008,	"gTimeServer");
	MakeStruct	(0X71000F7A48,	"TimeZone::Rule");
	set_name	(0X71000F7A48,	"gTimeZoneRule");
	create_qword	(0X71000FBA48);
	set_name	(0X71000FBA48,	"gTimeZoneBinary");
	create_byte	(0X71000FE790);
	make_array	(0X71000FE790,	0X8);
	MakeStruct	(0X71000FE798,	"nn::os::SdkMutexType");
	create_byte	(0X71000FE7A0);
	create_qword	(0X71000FE818);
	create_dword	(0X71000FF1FC);
	create_byte	(0X71000FF300);
	make_array	(0X71000FF301,	0X7);
	create_qword	(x=0X7100100008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100100008,	"__rel_plt_end");
	create_qword	(x=0X7100100010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100100010,	"__rel_plt_start");
	create_qword	(x=0X7100100018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100100018,	"__rel_dyn_end");
	create_qword	(x=0X7100100020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100100020,	"__rel_dyn_start");
	create_qword	(x=0X7100100028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7100100028,	"__imp_nnosGetDefaultUserExceptionStackForApplication");
}

static Functions_0(void) {

	add_func    (0X7100000000,0X7100000018);
	set_func_flags(0X7100000000,0x1400);
	SetType(0X7100000000, "void __fastcall sub_7100000000(__int64);");
	add_func    (0X710000001C,0X710000002C);
	set_func_flags(0X710000001C,0x1401);
	SetType(0X710000001C, "void __noreturn sub_710000001C(void);");
	add_func    (0X7100000030,0X710000004C);
	set_func_flags(0X7100000030,0x1401);
	add_func    (0X7100000050,0X7100000060);
	set_func_flags(0X7100000050,0x1401);
	add_func    (0X7100000064,0X7100000098);
	set_func_flags(0X7100000064,0x1401);
	add_func    (0X710000009C,0X71000000AC);
	set_func_flags(0X710000009C,0x1401);
	add_func    (0X71000000B0,0X71000000C0);
	set_func_flags(0X71000000B0,0x1401);
	add_func    (0X71000000C4,0X71000000D8);
	set_func_flags(0X71000000C4,0x1401);
	SetType(0X71000000C4, "void __fastcall __noreturn sub_71000000C4(__int64, __int64, __int64 (__fastcall *)(__int64), void (__fastcall *)(__int64));");
	add_func    (0X71000000E0,0X7100000110);
	set_func_flags(0X71000000E0,0x1400);
	SetType(0X71000000E0, "void __noreturn sub_71000000E0();");
	add_func    (0X7100000110,0X7100000244);
	set_func_flags(0X7100000110,0x1410);
	SetType(0X7100000110, "void sub_7100000110();");
	set_frame_size(0X7100000110, 0X70, 32, 0);
	add_func    (0X7100000360,0X71000003D8);
	set_func_flags(0X7100000360,0x1400);
	SetType(0X7100000360, "__int64 __fastcall sub_7100000360(__int64, __int64, __int64);");
	add_func    (0X71000003F0,0X71000004A8);
	set_func_flags(0X71000003F0,0x1410);
	set_frame_size(0X71000003F0, 0, 64, 0);
	add_func    (0X71000004D0,0X71000004D4);
	set_func_flags(0X71000004D0,0x1480);
	SetType(0X71000004D0, "__int64 __fastcall sub_71000004D0(__int64);");
	add_func    (0X71000004E0,0X710000054C);
	set_func_flags(0X71000004E0,0x1410);
	SetType(0X71000004E0, "__int64 sub_71000004E0();");
	set_frame_size(0X71000004E0, 0X20, 0, 0);
	add_func    (0X7100000550,0X71000005AC);
	set_func_flags(0X7100000550,0x1411);
	set_frame_size(0X7100000550, 0X10, 16, 0);
	add_func    (0X71000005C0,0X71000005C4);
	set_func_flags(0X71000005C0,0x1480);
	SetType(0X71000005C0, "__int64 __fastcall sub_71000005C0(_QWORD);");
	add_func    (0X71000005D0,0X71000005FC);
	set_func_flags(0X71000005D0,0x1410);
	SetType(0X71000005D0, "__int64 __fastcall sub_71000005D0(_QWORD);");
	set_frame_size(0X71000005D0, 0X20, 0, 0);
	add_func    (0X7100000600,0X7100000604);
	set_func_flags(0X7100000600,0x1480);
	SetType(0X7100000600, "__int64 __fastcall sub_7100000600(__int64);");
	add_func    (0X7100000610,0X710000067C);
	set_func_flags(0X7100000610,0x1410);
	SetType(0X7100000610, "__int64 sub_7100000610();");
	set_frame_size(0X7100000610, 0X20, 0, 0);
	add_func    (0X7100000700,0X7100000704);
	set_func_flags(0X7100000700,0x1480);
	SetType(0X7100000700, "__int64 __fastcall sub_7100000700(__int64);");
	add_func    (0X7100000710,0X710000073C);
	set_func_flags(0X7100000710,0x1410);
	SetType(0X7100000710, "__int64 sub_7100000710();");
	set_frame_size(0X7100000710, 0X20, 0, 0);
	add_func    (0X7100000750,0X710000076C);
	set_func_flags(0X7100000750,0x1400);
	SetType(0X7100000750, "__int64 sub_7100000750();");
	add_func    (0X7100000770,0X7100000790);
	set_func_flags(0X7100000770,0x1400);
	SetType(0X7100000770, "__int64 __fastcall delete(StandardSteadyClockCore *this);");
	add_func    (0X7100000790,0X7100000808);
	set_func_flags(0X7100000790,0x1410);
	SetType(0X7100000790, "__int64 sub_7100000790();");
	set_frame_size(0X7100000790, 0X20, 16, 0);
	add_func    (0X7100000810,0X7100000814);
	set_func_flags(0X7100000810,0x1440);
	add_func    (0X7100000820,0X71000008A4);
	set_func_flags(0X7100000820,0x1410);
	SetType(0X7100000820, "__int64 nnMain();");
	set_frame_size(0X7100000820, 0X20, 0, 0);
	add_func    (0X71000008A4,0X71000008A8);
	set_func_flags(0X71000008A4,0x1440);
	add_func    (0X71000008A8,0X71000008C8);
	set_func_flags(0X71000008A8,0x1400);
	SetType(0X71000008A8, "__int64 nn__err__detail__ExpHeapBase___ExpHeapBase();");
	add_func    (0X71000008C8,0X71000008D0);
	set_func_flags(0X71000008C8,0x1400);
	SetType(0X71000008C8, "unsigned __int64 __fastcall nn__err__detail__ExpHeapBase__do_allocate(__int64, __int64, unsigned int);");
	add_func    (0X71000008D0,0X71000008D8);
	set_func_flags(0X71000008D0,0x1400);
	SetType(0X71000008D0, "__int64 __fastcall nn__err__detail__ExpHeapBase__do_deallocate(__int64, __int64);");
	add_func    (0X71000008D8,0X71000008E4);
	set_func_flags(0X71000008D8,0x1400);
	SetType(0X71000008D8, "bool __fastcall nn__err__detail__ExpHeapBase__do_is_equal(__int64, __int64);");
	add_func    (0X71000008E4,0X7100000958);
	set_func_flags(0X71000008E4,0x1400);
	set_frame_size(0X71000008E4, 0XD0, 0, 0);
	add_func    (0X7100000964,0X7100000980);
	set_func_flags(0X7100000964,0x1400);
	add_func    (0X7100000980,0X7100000984);
	set_func_flags(0X7100000980,0x1480);
	add_func    (0X7100000990,0X71000010E8);
	set_func_flags(0X7100000990,0x1410);
	set_frame_size(0X7100000990, 0X40, 96, 0);
	add_func    (0X71000010E8,0X7100001324);
	set_func_flags(0X71000010E8,0x1410);
	set_frame_size(0X71000010E8, 0, 96, 0);
	add_func    (0X7100001330,0X7100001444);
	set_func_flags(0X7100001330,0x1410);
	set_frame_size(0X7100001330, 0, 64, 0);
	add_func    (0X7100001450,0X71000014D8);
	set_func_flags(0X7100001450,0x1410);
	set_frame_size(0X7100001450, 0X20, 16, 0);
	add_func    (0X71000015A0,0X710000175C);
	set_func_flags(0X71000015A0,0x1410);
	set_frame_size(0X71000015A0, 0, 80, 0);
	add_func    (0X7100001780,0X710000184C);
	set_func_flags(0X7100001780,0x1400);
	add_func    (0X7100001860,0X710000186C);
	set_func_flags(0X7100001860,0x1411);
	set_frame_size(0X7100001860, 0, 16, 0);
	add_func    (0X7100001870,0X71000018D8);
	set_func_flags(0X7100001870,0x1410);
	SetType(0X7100001870, "__int64 __fastcall sub_7100001870(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100001870, 0, 16, 0);
	add_func    (0X71000018E0,0X71000018EC);
	set_func_flags(0X71000018E0,0x1411);
	set_frame_size(0X71000018E0, 0, 16, 0);
	add_func    (0X71000018F0,0X71000018FC);
	set_func_flags(0X71000018F0,0x1400);
	add_func    (0X7100001900,0X7100001904);
	set_func_flags(0X7100001900,0x1440);
	add_func    (0X7100001910,0X710000194C);
	set_func_flags(0X7100001910,0x1400);
	add_func    (0X7100001950,0X7100001A24);
	set_func_flags(0X7100001950,0x1411);
	SetType(0X7100001950, "void __fastcall __noreturn sub_7100001950(__int64, __int64, __int64, int, int *, __int64, __int64, __int64);");
	set_frame_size(0X7100001950, 0XA0, 64, 0);
	add_func    (0X7100001A80,0X7100001AD8);
	set_func_flags(0X7100001A80,0x1411);
	SetType(0X7100001A80, "void __fastcall __noreturn sub_7100001A80(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100001A80, 0XB0, 16, 0);
	add_func    (0X7100001AE0,0X7100001B44);
	set_func_flags(0X7100001AE0,0x1411);
	SetType(0X7100001AE0, "void __noreturn sub_7100001AE0(__int64, __int64, __int64, int, __int64, ...);");
	set_frame_size(0X7100001AE0, 0XC0, 16, 0);
	add_func    (0X7100001B50,0X7100001B64);
	set_func_flags(0X7100001B50,0x1411);
	SetType(0X7100001B50, "void __fastcall __noreturn sub_7100001B50(__int64, __int64, __int64, int);");
	set_frame_size(0X7100001B50, 0, 16, 0);
	add_func    (0X7100001B70,0X7100001B90);
	set_func_flags(0X7100001B70,0x1411);
	SetType(0X7100001B70, "void __noreturn nn__diag__detail__AbortImpl();");
	set_frame_size(0X7100001B70, 0, 16, 0);
	add_func    (0X7100001B90,0X7100001BB8);
	set_func_flags(0X7100001B90,0x1411);
	SetType(0X7100001B90, "void __fastcall __noreturn nn__diag__detail__AbortImpl(__int64);");
	set_frame_size(0X7100001B90, 0, 16, 0);
	add_func    (0X7100001BF0,0X7100001C14);
	set_func_flags(0X7100001BF0,0x1411);
	SetType(0X7100001BF0, "void __fastcall __noreturn nn__diag__detail__Abort(__int64);");
	set_frame_size(0X7100001BF0, 0, 16, 0);
	add_func    (0X7100001C20,0X7100001C3C);
	set_func_flags(0X7100001C20,0x1400);
	SetType(0X7100001C20, "__int64 sub_7100001C20(void);");
	add_func    (0X7100001C40,0X7100001CB8);
	set_func_flags(0X7100001C40,0x1410);
	SetType(0X7100001C40, "__int64 __fastcall nn__diag__detail__InvokeAbortObserver(_QWORD);");
	set_frame_size(0X7100001C40, 0X20, 16, 0);
	add_func    (0X7100001CC0,0X7100001D18);
	set_func_flags(0X7100001CC0,0x10);
	SetType(0X7100001CC0, "__int64 __fastcall sub_7100001CC0(_QWORD);");
	set_frame_size(0X7100001CC0, 0X20, 16, 0);
	add_func    (0X7100001D20,0X7100001D2C);
	set_func_flags(0X7100001D20,0x1400);
	add_func    (0X7100001D30,0X7100001D88);
	set_func_flags(0X7100001D30,0x1410);
	set_frame_size(0X7100001D30, 0X20, 16, 0);
	add_func    (0X7100001D90,0X7100001D94);
	set_func_flags(0X7100001D90,0x1440);
	add_func    (0X7100001DA0,0X7100001E2C);
	set_func_flags(0X7100001DA0,0x1410);
	set_frame_size(0X7100001DA0, 0, 32, 0);
	add_func    (0X7100001E30,0X7100001E7C);
	set_func_flags(0X7100001E30,0x1410);
	set_frame_size(0X7100001E30, 0, 32, 0);
	add_func    (0X7100001E80,0X7100001F0C);
	set_func_flags(0X7100001E80,0x1410);
	set_frame_size(0X7100001E80, 0, 32, 0);
	add_func    (0X7100001F10,0X7100001F5C);
	set_func_flags(0X7100001F10,0x210);
	set_frame_size(0X7100001F10, 0, 32, 0);
	add_func    (0X7100001F60,0X7100001FDC);
	set_func_flags(0X7100001F60,0x1411);
	SetType(0X7100001F60, "void __fastcall __noreturn nn__detail__UnexpectedDefaultImpl(__int64, __int64, int);");
	set_frame_size(0X7100001F60, 0X80, 16, 0);
	add_func    (0X7100001FE0,0X7100001FFC);
	set_func_flags(0X7100001FE0,0x1411);
	SetType(0X7100001FE0, "void __noreturn nn__detail__UnexpectedDefaultImpl();");
	set_frame_size(0X7100001FE0, 0, 16, 0);
	add_func    (0X7100002000,0X710000200C);
	set_func_flags(0X7100002000,0x1400);
	SetType(0X7100002000, "bool __fastcall ValidateNotNullptr(__int64);");
	add_func    (0X7100002010,0X7100002054);
	set_func_flags(0X7100002010,0x1410);
	set_frame_size(0X7100002010, 0X80, 16, 0);
	add_func    (0X7100002054,0X710000207C);
	set_func_flags(0X7100002054,0x1410);
	set_frame_size(0X7100002054, 0X10, 16, 0);
	add_func    (0X710000207C,0X71000020B4);
	set_func_flags(0X710000207C,0x1410);
	set_frame_size(0X710000207C, 0X10, 16, 0);
	add_func    (0X71000020B4,0X7100002100);
	set_func_flags(0X71000020B4,0x1400);
	set_frame_size(0X71000020B4, 0X10, 0, 0);
	add_func    (0X7100002100,0X71000021A8);
	set_func_flags(0X7100002100,0x1410);
	set_frame_size(0X7100002100, 0X20, 16, 0);
	add_func    (0X71000021A8,0X71000021CC);
	set_func_flags(0X71000021A8,0x1410);
	set_frame_size(0X71000021A8, 0X10, 16, 0);
	add_func    (0X71000021CC,0X7100002214);
	set_func_flags(0X71000021CC,0x1410);
	set_frame_size(0X71000021CC, 0X20, 16, 0);
	add_func    (0X7100002214,0X7100002298);
	set_func_flags(0X7100002214,0x1410);
	set_frame_size(0X7100002214, 0X30, 16, 0);
	add_func    (0X7100002298,0X7100002454);
	set_func_flags(0X7100002298,0x1410);
	set_frame_size(0X7100002298, 0X20, 16, 0);
	add_func    (0X7100002454,0X7100002494);
	set_func_flags(0X7100002454,0x1410);
	set_frame_size(0X7100002454, 0X20, 16, 0);
	add_func    (0X71000024A0,0X7100002564);
	set_func_flags(0X71000024A0,0x1410);
	set_frame_size(0X71000024A0, 0X60, 16, 0);
	add_func    (0X7100002570,0X7100002648);
	set_func_flags(0X7100002570,0x1410);
	set_frame_size(0X7100002570, 0X50, 16, 0);
	add_func    (0X7100002650,0X71000026A8);
	set_func_flags(0X7100002650,0x1400);
	set_frame_size(0X7100002650, 0X10, 0, 0);
	add_func    (0X71000026B0,0X71000026C4);
	set_func_flags(0X71000026B0,0x1400);
	set_frame_size(0X71000026B0, 0X10, 0, 0);
	add_func    (0X71000026D0,0X71000027C8);
	set_func_flags(0X71000026D0,0x1410);
	set_frame_size(0X71000026D0, 0X30, 16, 0);
	add_func    (0X71000027C8,0X71000027E0);
	set_func_flags(0X71000027C8,0x1400);
	set_frame_size(0X71000027C8, 0X10, 0, 0);
	add_func    (0X71000027E0,0X7100002834);
	set_func_flags(0X71000027E0,0x1410);
	set_frame_size(0X71000027E0, 0XA0, 16, 0);
	add_func    (0X7100002834,0X710000287C);
	set_func_flags(0X7100002834,0x1410);
	set_frame_size(0X7100002834, 0X30, 16, 0);
	add_func    (0X710000287C,0X71000028A8);
	set_func_flags(0X710000287C,0x1410);
	set_frame_size(0X710000287C, 0X10, 16, 0);
	add_func    (0X71000028A8,0X71000028C8);
	set_func_flags(0X71000028A8,0x1400);
	set_frame_size(0X71000028A8, 0X10, 0, 0);
	add_func    (0X71000028D0,0X710000291C);
	set_func_flags(0X71000028D0,0x210);
	set_frame_size(0X71000028D0, 0, 32, 0);
	add_func    (0X7100002920,0X7100002980);
	set_func_flags(0X7100002920,0x1410);
	SetType(0X7100002920, "__int64 __fastcall sub_7100002920(__int64, __int64, __int64 (__fastcall *)(__int64), void (__fastcall *)(__int64), __int64 (__fastcall *)(__int64));");
	set_frame_size(0X7100002920, 0X20, 32, 0);
	add_func    (0X7100002980,0X7100002984);
	set_func_flags(0X7100002980,0x14c0);
	SetType(0X7100002980, "__int64 __fastcall j_nullsub_10(_QWORD);");
	add_func    (0X7100002990,0X7100002994);
	set_func_flags(0X7100002990,0x1480);
	SetType(0X7100002990, "__int64 __fastcall sub_7100002990(_QWORD);");
	add_func    (0X71000029A0,0X71000029A4);
	set_func_flags(0X71000029A0,0x14c0);
	SetType(0X71000029A0, "__int64 __fastcall j_nullsub_11(_QWORD);");
	add_func    (0X71000029B0,0X71000029C4);
	set_func_flags(0X71000029B0,0x1410);
	SetType(0X71000029B0, "__int64 __fastcall sub_71000029B0(_QWORD);");
	set_frame_size(0X71000029B0, 0, 16, 0);
	add_func    (0X71000029D0,0X71000029D4);
	set_func_flags(0X71000029D0,0x1440);
	SetType(0X71000029D0, "__int64 __fastcall nullsub_3(_QWORD);");
	add_func    (0X71000029E0,0X7100002A1C);
	set_func_flags(0X71000029E0,0x1410);
	SetType(0X71000029E0, "nn::lmem::detail::HeapHead *__fastcall nn__lmem__CreateExpHeap(void *a1, __int64 a2, char a3);");
	set_frame_size(0X71000029E0, 0, 32, 0);
	add_func    (0X7100002A20,0X7100002A50);
	set_func_flags(0X7100002A20,0x10);
	set_frame_size(0X7100002A20, 0X20, 0, 0);
	add_func    (0X7100002A50,0X7100002AA8);
	set_func_flags(0X7100002A50,0x1410);
	SetType(0X7100002A50, "unsigned __int64 __fastcall nn__lmem__AllocateFromExpHeap(nn::lmem::detail::HeapHead *this, __int64 size);");
	set_frame_size(0X7100002A50, 0, 32, 0);
	add_func    (0X7100002AB0,0X7100002B14);
	set_func_flags(0X7100002AB0,0x1410);
	SetType(0X7100002AB0, "unsigned __int64 __fastcall nn__lmem__AllocateFromExpHeap(void *a1, __int64 a2, unsigned int a3);");
	set_frame_size(0X7100002AB0, 0X20, 16, 0);
	add_func    (0X7100002B20,0X7100002B74);
	set_func_flags(0X7100002B20,0x1410);
	SetType(0X7100002B20, "__int64 __fastcall nn__lmem__FreeToExpHeap(__int64, __int64);");
	set_frame_size(0X7100002B20, 0, 32, 0);
	add_func    (0X7100002B80,0X7100002BD4);
	set_func_flags(0X7100002B80,0x1410);
	SetType(0X7100002B80, "__int64 __fastcall nn__lmem__ResizeExpHeapBlock(nn::lmem::detail::HeapHead *this, char a2);");
	set_frame_size(0X7100002B80, 0, 32, 0);
	add_func    (0X7100002BE0,0X7100002C34);
	set_func_flags(0X7100002BE0,0x1410);
	SetType(0X7100002BE0, "__int64 __fastcall nn__lmem__AdjustExpHeap(nn::lmem::detail::HeapHead *this, char a2);");
	set_frame_size(0X7100002BE0, 0, 32, 0);
	add_func    (0X7100002C40,0X7100002CD0);
	set_func_flags(0X7100002C40,0x1410);
	SetType(0X7100002C40, "nn::lmem::detail::HeapHead *__fastcall nn__lmem__detail__CreateExpHeap(void *this, __int64 a2);");
	set_frame_size(0X7100002C40, 0X20, 0, 0);
	add_func    (0X7100002CE0,0X7100002F04);
	set_func_flags(0X7100002CE0,0x1410);
	SetType(0X7100002CE0, "unsigned __int64 __fastcall nn__lmem__detail__AllocFromExpHeap(nn::lmem::detail::HeapHead *this, __int64 size, unsigned int flags);");
	set_frame_size(0X7100002CE0, 0X20, 0, 0);
	add_func    (0X7100002F10,0X7100003090);
	set_func_flags(0X7100002F10,0x1400);
	SetType(0X7100002F10, "__int64 __fastcall nn__lmem__detail__FreeToExpHeap(_QWORD, _QWORD);");
	add_func    (0X7100003090,0X71000030A8);
	set_func_flags(0X7100003090,0x1400);
	SetType(0X7100003090, "__int64 __fastcall nn__lmem__detail__ResizeExpHeapMemoryBlock(__int64, char);");
	add_func    (0X71000030B0,0X71000030C0);
	set_func_flags(0X71000030B0,0x1400);
	SetType(0X71000030B0, "__int64 __fastcall nn__lmem__detail__AdjustExpHeap(__int64, char);");
	add_func    (0X71000030C0,0X7100003250);
	set_func_flags(0X71000030C0,0x1400);
	SetType(0X71000030C0, "__int64 __fastcall sub_71000030C0(_QWORD, _QWORD, _QWORD);");
	add_func    (0X7100003250,0X7100003260);
	set_func_flags(0X7100003250,0x1400);
	SetType(0X7100003250, "__int64 __fastcall nn__lmem__detail__InitHeapHead(_QWORD, _QWORD, _QWORD);");
	add_func    (0X7100003270,0X71000032BC);
	set_func_flags(0X7100003270,0x1410);
	SetType(0X7100003270, "__int64 __fastcall sub_7100003270(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100003270, 0, 32, 0);
	add_func    (0X71000032C0,0X71000032F0);
	set_func_flags(0X71000032C0,0x1410);
	set_frame_size(0X71000032C0, 0X20, 0, 0);
	add_func    (0X71000032F0,0X7100003360);
	set_func_flags(0X71000032F0,0x1410);
	set_frame_size(0X71000032F0, 0, 32, 0);
	add_func    (0X7100003360,0X71000033B4);
	set_func_flags(0X7100003360,0x1410);
	set_frame_size(0X7100003360, 0, 32, 0);
	add_func    (0X71000033C0,0X7100003598);
	set_func_flags(0X71000033C0,0x1410);
	set_frame_size(0X71000033C0, 0, 64, 0);
	add_func    (0X71000035B0,0X71000035D4);
	set_func_flags(0X71000035B0,0x1400);
	add_func    (0X71000035E0,0X7100003600);
	set_func_flags(0X71000035E0,0x1400);
	add_func    (0X7100003600,0X7100003648);
	set_func_flags(0X7100003600,0x1410);
	SetType(0X7100003600, "_DWORD *__fastcall nn__os__InitializeMutex(__int64, char, int);");
	set_frame_size(0X7100003600, 0X20, 16, 0);
	add_func    (0X7100003650,0X7100003658);
	set_func_flags(0X7100003650,0x1400);
	SetType(0X7100003650, "void __fastcall nn__os__FinalizeMutex(_BYTE *result);");
	add_func    (0X7100003660,0X71000036B0);
	set_func_flags(0X7100003660,0x1410);
	SetType(0X7100003660, "void __fastcall nn__os__LockMutex(__int64 result);");
	set_frame_size(0X7100003660, 0, 32, 0);
	add_func    (0X71000036B0,0X71000036D0);
	set_func_flags(0X71000036B0,0x1400);
	SetType(0X71000036B0, "void __fastcall nn__os__UnlockMutex(__int64);");
	add_func    (0X71000036D0,0X71000036E8);
	set_func_flags(0X71000036D0,0x1400);
	SetType(0X71000036D0, "__int64 __fastcall sub_71000036D0(_QWORD);");
	add_func    (0X71000036F0,0X7100003730);
	set_func_flags(0X71000036F0,0x1410);
	set_frame_size(0X71000036F0, 0X20, 0, 0);
	add_func    (0X7100003740,0X7100003744);
	set_func_flags(0X7100003740,0x1480);
	add_func    (0X7100003760,0X7100003764);
	set_func_flags(0X7100003760,0x1480);
	add_func    (0X7100003770,0X7100003798);
	set_func_flags(0X7100003770,0x1410);
	set_frame_size(0X7100003770, 0X20, 16, 0);
	add_func    (0X7100003798,0X710000379C);
	set_func_flags(0X7100003798,0x14c0);
	SetType(0X7100003798, "bool __fastcall nn__os__detail__InternalCriticalSectionImplByHorizon__IsLockedByCurrentThread(_DWORD *);");
	add_func    (0X710000379C,0X71000037C8);
	set_func_flags(0X710000379C,0x1410);
	SetType(0X710000379C, "void __fastcall nn__os__SdkMutexType__Lock(nn::os::SdkMutexType *a1);");
	set_frame_size(0X710000379C, 0X20, 0, 0);
	add_func    (0X71000037C8,0X71000037F4);
	set_func_flags(0X71000037C8,0x1410);
	SetType(0X71000037C8, "void __fastcall nn__os__SdkMutexType__Unlock(unsigned int *);");
	set_frame_size(0X71000037C8, 0X20, 0, 0);
	add_func    (0X71000037F4,0X7100003834);
	set_func_flags(0X71000037F4,0x1410);
	SetType(0X71000037F4, "void __fastcall nn__os__SdkRecursiveMutexType__Lock(nn::os::SdkRecursiveMutexType *this);");
	set_frame_size(0X71000037F4, 0X20, 0, 0);
	add_func    (0X7100003834,0X710000387C);
	set_func_flags(0X7100003834,0x1410);
	SetType(0X7100003834, "void __fastcall nn__os__SdkRecursiveMutexType__Unlock(_DWORD *);");
	set_frame_size(0X7100003834, 0X20, 0, 0);
	add_func    (0X7100003880,0X71000038A8);
	set_func_flags(0X7100003880,0x1400);
	SetType(0X7100003880, "__int64 __fastcall nn__os__CreateThread(__int64 *, __int64, __int64, __int64, __int64, __int16);");
	add_func    (0X71000038B0,0X71000038C4);
	set_func_flags(0X71000038B0,0x1400);
	SetType(0X71000038B0, "__int64 __fastcall sub_71000038B0(_QWORD);");
	add_func    (0X71000038D0,0X71000038E4);
	set_func_flags(0X71000038D0,0x1400);
	SetType(0X71000038D0, "__int64 __fastcall nn__os__StartThread(_QWORD);");
	add_func    (0X71000038F0,0X7100003914);
	set_func_flags(0X71000038F0,0x1400);
	SetType(0X71000038F0, "__int64 __fastcall nn__os__SetThreadNamePointer(_QWORD, _QWORD);");
	add_func    (0X7100003920,0X710000392C);
	set_func_flags(0X7100003920,0x1400);
	SetType(0X7100003920, "__int64 sub_7100003920();");
	add_func    (0X7100003930,0X7100003934);
	set_func_flags(0X7100003930,0x1480);
	SetType(0X7100003930, "__int64 __fastcall sub_7100003930(_QWORD);");
	add_func    (0X7100003940,0X7100003954);
	set_func_flags(0X7100003940,0x1400);
	SetType(0X7100003940, "__int64 __fastcall sub_7100003940(__int64);");
	add_func    (0X7100003960,0X7100003978);
	set_func_flags(0X7100003960,0x1410);
	set_frame_size(0X7100003960, 0, 16, 0);
	add_func    (0X7100003978,0X7100003984);
	set_func_flags(0X7100003978,0x1410);
	set_frame_size(0X7100003978, 0, 16, 0);
	add_func    (0X71000039B0,0X7100003A98);
	set_func_flags(0X71000039B0,0x1410);
	set_frame_size(0X71000039B0, 0X20, 48, 0);
	add_func    (0X7100003A98,0X7100003CA8);
	set_func_flags(0X7100003A98,0x1410);
	SetType(0X7100003A98, "__int64 __fastcall sub_7100003A98(__int64, __int64 *, __int64, __int64, __int64, __int64, __int16, unsigned int);");
	set_frame_size(0X7100003A98, 0X20, 64, 0);
	add_func    (0X7100003CB0,0X7100003D8C);
	set_func_flags(0X7100003CB0,0x1410);
	set_frame_size(0X7100003CB0, 0X20, 16, 0);
	add_func    (0X7100003D94,0X7100003DE8);
	set_func_flags(0X7100003D94,0x1410);
	set_frame_size(0X7100003D94, 0X20, 16, 0);
	add_func    (0X7100003DE8,0X7100003E48);
	set_func_flags(0X7100003DE8,0x1410);
	SetType(0X7100003DE8, "void __fastcall sub_7100003DE8(__int64, __int64);");
	set_frame_size(0X7100003DE8, 0X20, 16, 0);
	add_func    (0X7100003E48,0X7100003F88);
	set_func_flags(0X7100003E48,0x1410);
	set_frame_size(0X7100003E48, 0X20, 16, 0);
	add_func    (0X7100003F88,0X7100004014);
	set_func_flags(0X7100003F88,0x1410);
	set_frame_size(0X7100003F88, 0X20, 0, 0);
	add_func    (0X7100004014,0X71000040D8);
	set_func_flags(0X7100004014,0x1410);
	set_frame_size(0X7100004014, 0, 48, 0);
	add_func    (0X71000040E0,0X710000413C);
	set_func_flags(0X71000040E0,0x1400);
	SetType(0X71000040E0, "__int64 __fastcall sub_71000040E0(_QWORD, _QWORD, _QWORD);");
	add_func    (0X7100004140,0X71000043E0);
	set_func_flags(0X7100004140,0x1410);
	SetType(0X7100004140, "__int64 __fastcall sub_7100004140(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100004140, 0X320, 96, 0);
	add_func    (0X71000043E0,0X7100004504);
	set_func_flags(0X71000043E0,0x1410);
	SetType(0X71000043E0, "__int64 __fastcall nn__os__detail__MultiWaitImpl__WaitAnyImpl_false_(__int64, __int64 *, char, __int64, unsigned int);");
	set_frame_size(0X71000043E0, 0X20, 48, 0);
	add_func    (0X7100004504,0X7100004564);
	set_func_flags(0X7100004504,0x1410);
	SetType(0X7100004504, "void __fastcall nn__os__detail__MultiWaitImpl__NotifyAndWakeupThread(__int64, __int64);");
	set_frame_size(0X7100004504, 0X20, 16, 0);
	add_func    (0X7100004570,0X7100004578);
	set_func_flags(0X7100004570,0x1400);
	SetType(0X7100004570, "nn::os::Tick __fastcall nn__os__GetSystemTick();");
	add_func    (0X7100004580,0X710000463C);
	set_func_flags(0X7100004580,0x1400);
	SetType(0X7100004580, "s64 __fastcall nn__os__detail__TickManager__ConvertToTimeSpan(nn::os::Tick tick);");
	add_func    (0X710000463C,0X71000046A8);
	set_func_flags(0X710000463C,0x1400);
	SetType(0X710000463C, "__int64 __fastcall sub_710000463C(__int64, __int64);");
	add_func    (0X71000046A8,0X71000046B0);
	set_func_flags(0X71000046A8,0x1400);
	add_func    (0X71000046B0,0X71000046B8);
	set_func_flags(0X71000046B0,0x1400);
	add_func    (0X71000046B8,0X7100004720);
	set_func_flags(0X71000046B8,0x1410);
	set_frame_size(0X71000046B8, 0X20, 0, 0);
	add_func    (0X7100004720,0X71000048E0);
	set_func_flags(0X7100004720,0x1410);
	set_frame_size(0X7100004720, 0, 48, 0);
	add_func    (0X71000048E0,0X710000495C);
	set_func_flags(0X71000048E0,0x1410);
	SetType(0X71000048E0, "__int64 __fastcall sub_71000048E0(_QWORD, _QWORD);");
	set_frame_size(0X71000048E0, 0, 48, 0);
	add_func    (0X710000495C,0X71000049F0);
	set_func_flags(0X710000495C,0x1410);
	set_frame_size(0X710000495C, 0X20, 0, 0);
	add_func    (0X71000049F0,0X7100004A20);
	set_func_flags(0X71000049F0,0x1410);
	SetType(0X71000049F0, "__int64 __fastcall sub_71000049F0(_QWORD);");
	set_frame_size(0X71000049F0, 0X10, 16, 0);
	add_func    (0X7100004A20,0X7100004AE0);
	set_func_flags(0X7100004A20,0x1410);
	set_frame_size(0X7100004A20, 0X60, 16, 0);
	add_func    (0X7100004AE0,0X7100004B60);
	set_func_flags(0X7100004AE0,0x1410);
	SetType(0X7100004AE0, "__int64 __fastcall sub_7100004AE0(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100004AE0, 0X20, 0, 0);
	add_func    (0X7100004B60,0X7100004B88);
	set_func_flags(0X7100004B60,0x1410);
	SetType(0X7100004B60, "bool __fastcall UnmapMemory_(__int64, __int64, __int64, __int64);");
	set_frame_size(0X7100004B60, 0, 16, 0);
	add_func    (0X7100004B88,0X7100004EEC);
	set_func_flags(0X7100004B88,0x1410);
	SetType(0X7100004B88, "__int64 __fastcall sub_7100004B88(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100004B88, 0X30, 32, 0);
	add_func    (0X7100004EF0,0X7100004F64);
	set_func_flags(0X7100004EF0,0x1410);
	set_frame_size(0X7100004EF0, 0X20, 0, 0);
	add_func    (0X7100004F64,0X7100004F94);
	set_func_flags(0X7100004F64,0x1410);
	set_frame_size(0X7100004F64, 0X10, 16, 0);
	add_func    (0X7100004F94,0X7100004FCC);
	set_func_flags(0X7100004F94,0x1410);
	set_frame_size(0X7100004F94, 0X20, 0, 0);
	add_func    (0X7100004FD0,0X7100005064);
	set_func_flags(0X7100004FD0,0x1410);
	SetType(0X7100004FD0, "__int64 __fastcall sub_7100004FD0(__int64, __int64);");
	set_frame_size(0X7100004FD0, 0X30, 16, 0);
	add_func    (0X7100005160,0X7100005248);
	set_func_flags(0X7100005160,0x1410);
	set_frame_size(0X7100005160, 0, 96, 0);
	add_func    (0X7100005250,0X7100005324);
	set_func_flags(0X7100005250,0x1410);
	set_frame_size(0X7100005250, 0, 64, 0);
	add_func    (0X7100005330,0X71000054A8);
	set_func_flags(0X7100005330,0x1410);
	SetType(0X7100005330, "__int64 __fastcall sub_7100005330(__int64, __int64, unsigned __int64, unsigned __int64, __int64 (__fastcall *)(unsigned __int64));");
	set_frame_size(0X7100005330, 0X10, 96, 0);
	add_func    (0X71000054A8,0X7100005524);
	set_func_flags(0X71000054A8,0x1410);
	SetType(0X71000054A8, "bool __fastcall sub_71000054A8(__int64 (__fastcall ***)(_QWORD, __int64, __int64), __int64, __int64, __int64);");
	set_frame_size(0X71000054A8, 0, 48, 0);
	add_func    (0X7100005530,0X7100005564);
	set_func_flags(0X7100005530,0x1410);
	SetType(0X7100005530, "unsigned __int64 __fastcall sub_7100005530(__int64);");
	set_frame_size(0X7100005530, 0X20, 0, 0);
	add_func    (0X7100005564,0X71000055B8);
	set_func_flags(0X7100005564,0x1410);
	SetType(0X7100005564, "unsigned __int64 __fastcall sub_7100005564(unsigned int *);");
	set_frame_size(0X7100005564, 0X20, 16, 0);
	add_func    (0X71000055B8,0X71000055C0);
	set_func_flags(0X71000055B8,0x1400);
	SetType(0X71000055B8, "_DWORD *__fastcall nn__os__detail__InternalConditionVariableImplByHorizon__InternalConditionVariableImplByHorizon(_DWORD *result);");
	add_func    (0X71000055C0,0X71000055C8);
	set_func_flags(0X71000055C0,0x1400);
	add_func    (0X71000055C8,0X71000055DC);
	set_func_flags(0X71000055C8,0x1400);
	SetType(0X71000055C8, "_DWORD *__fastcall nn__os__detail__InternalConditionVariableImplByHorizon__Signal(_DWORD *result);");
	add_func    (0X71000055DC,0X71000055F0);
	set_func_flags(0X71000055DC,0);
	SetType(0X71000055DC, "_DWORD *__fastcall nn__os__detail__InternalConditionVariableImplByHorizon__Broadcast(_DWORD *result);");
	add_func    (0X71000055F0,0X710000565C);
	set_func_flags(0X71000055F0,0x1410);
	SetType(0X71000055F0, "__int64 __fastcall nn__os__detail__InternalConditionVariableImplByHorizon__Wait(_QWORD, _QWORD);");
	set_frame_size(0X71000055F0, 0X20, 16, 0);
	add_func    (0X710000565C,0X710000571C);
	set_func_flags(0X710000565C,0x1410);
	SetType(0X710000565C, "__int64 __fastcall sub_710000565C(_QWORD, _QWORD, _QWORD);");
	set_frame_size(0X710000565C, 0X10, 48, 0);
	add_func    (0X710000571C,0X710000574C);
	set_func_flags(0X710000571C,0x1400);
	add_func    (0X710000574C,0X7100005764);
	set_func_flags(0X710000574C,0x200);
	add_func    (0X7100005770,0X71000059C0);
	set_func_flags(0X7100005770,0x1410);
	SetType(0X7100005770, "__int64 __fastcall sub_7100005770(_QWORD, _QWORD);");
	set_frame_size(0X7100005770, 0X70, 80, 0);
	add_func    (0X71000059C0,0X7100005A84);
	set_func_flags(0X71000059C0,0x1410);
	set_frame_size(0X71000059C0, 0X30, 16, 0);
	add_func    (0X7100005A84,0X7100005B44);
	set_func_flags(0X7100005A84,0x1410);
	set_frame_size(0X7100005A84, 0X30, 16, 0);
	add_func    (0X7100005B44,0X7100005C00);
	set_func_flags(0X7100005B44,0x1410);
	set_frame_size(0X7100005B44, 0X30, 0, 0);
	add_func    (0X7100005C74,0X7100005CF8);
	set_func_flags(0X7100005C74,0x1410);
	set_frame_size(0X7100005C74, 0X30, 0, 0);
	define_local_var(0X7100005C74, 0X7100005CF8, "[bp-0X28]", "out");
	add_func    (0X7100005D00,0X7100005D4C);
	set_func_flags(0X7100005D00,0x1410);
	set_frame_size(0X7100005D00, 0X10, 32, 0);
	add_func    (0X7100005D54,0X7100005DEC);
	set_func_flags(0X7100005D54,0x1410);
	set_frame_size(0X7100005D54, 0, 16, 0);
	add_func    (0X7100005EB0,0X7100005EC0);
	set_func_flags(0X7100005EB0,0x1400);
	add_func    (0X7100005EC0,0X7100005ED0);
	set_func_flags(0X7100005EC0,0x1400);
	add_func    (0X7100005F10,0X7100005F70);
	set_func_flags(0X7100005F10,0x1400);
	add_func    (0X7100005F70,0X7100005F78);
	set_func_flags(0X7100005F70,0x1400);
	SetType(0X7100005F70, "_DWORD *__fastcall nn__os__detail__InternalCriticalSectionImplByHorizon__InternalCriticalSectionImplByHorizon(_DWORD *result);");
	add_func    (0X7100005F78,0X7100006010);
	set_func_flags(0X7100005F78,0x1410);
	SetType(0X7100005F78, "void __fastcall nn__os__detail__InternalCriticalSectionImplByHorizon__Enter(unsigned int *result);");
	set_frame_size(0X7100005F78, 0X10, 32, 0);
	add_func    (0X7100006010,0X710000606C);
	set_func_flags(0X7100006010,0x1410);
	SetType(0X7100006010, "void __fastcall nn__os__detail__InternalCriticalSectionImplByHorizon__Leave(unsigned int *result);");
	set_frame_size(0X7100006010, 0X10, 16, 0);
	add_func    (0X710000606C,0X710000608C);
	set_func_flags(0X710000606C,0x1400);
	SetType(0X710000606C, "bool __fastcall nn__os__detail__InternalCriticalSectionImplByHorizon__IsLockedByCurrentThread(_DWORD *);");
	add_func    (0X7100006090,0X71000060D8);
	set_func_flags(0X7100006090,0x1410);
	set_frame_size(0X7100006090, 0X10, 16, 0);
	define_local_var(0X7100006090, 0X71000060D8, "[bp-0X8]", "out");
	add_func    (0X71000060D8,0X7100006148);
	set_func_flags(0X71000060D8,0x1410);
	set_frame_size(0X71000060D8, 0X30, 16, 0);
	add_func    (0X7100006150,0X710000640C);
	set_func_flags(0X7100006150,0x1410);
	set_frame_size(0X7100006150, 0X30, 16, 0);
	add_func    (0X7100006780,0X7100006964);
	set_func_flags(0X7100006780,0x1410);
	set_frame_size(0X7100006780, 0X10, 64, 0);
	add_func    (0X7100006A78,0X7100006DB0);
	set_func_flags(0X7100006A78,0x1401);
	SetType(0X7100006A78, "void __noreturn sub_7100006A78(void);");
	set_frame_size(0X7100006A78, 0X2C0, 0, 0);
	add_func    (0X7100006EB0,0X7100006F1C);
	set_func_flags(0X7100006EB0,0x1410);
	SetType(0X7100006EB0, "int __fastcall nn__os__CreateSystemEvent(nn::os::SystemEventType *event, char clearMode, bool type);");
	set_frame_size(0X7100006EB0, 0X20, 0, 0);
	add_func    (0X7100006F20,0X7100006F54);
	set_func_flags(0X7100006F20,0x1410);
	SetType(0X7100006F20, "__int64 __fastcall nn__os__DestroySystemEvent(nn::os::SystemEventType *a1);");
	set_frame_size(0X7100006F20, 0, 16, 0);
	add_func    (0X7100006F60,0X7100006F90);
	set_func_flags(0X7100006F60,0x1410);
	SetType(0X7100006F60, "void __fastcall sub_7100006F60(__int64);");
	set_frame_size(0X7100006F60, 0X20, 16, 0);
	add_func    (0X7100006F90,0X7100006FC0);
	set_func_flags(0X7100006F90,0x1410);
	SetType(0X7100006F90, "bool __fastcall sub_7100006F90(__int64);");
	set_frame_size(0X7100006F90, 0, 16, 0);
	add_func    (0X7100006FC0,0X7100006FF0);
	set_func_flags(0X7100006FC0,0x1010);
	SetType(0X7100006FC0, "void __fastcall nn__os__SignalSystemEvent(nn::os::SystemEventType *a1);");
	set_frame_size(0X7100006FC0, 0X10, 16, 0);
	add_func    (0X7100006FF0,0X7100007020);
	set_func_flags(0X7100006FF0,0x1010);
	SetType(0X7100006FF0, "void __fastcall nn__os__ClearSystemEvent(__int64);");
	set_frame_size(0X7100006FF0, 0, 16, 0);
	add_func    (0X7100007020,0X7100007024);
	set_func_flags(0X7100007020,0x1480);
	SetType(0X7100007020, "__int64 __fastcall nn__os__detail__GetReadableHandleOfInterProcessEvent(nn::os::detail::InterProcessEventType *);");
	add_func    (0X7100007030,0X7100007034);
	set_func_flags(0X7100007030,0x1480);
	SetType(0X7100007030, "__int64 __fastcall nn__os__GetWritableHandleOfSystemEvent(__int64);");
	add_func    (0X7100007040,0X71000070B8);
	set_func_flags(0X7100007040,0x1410);
	SetType(0X7100007040, "_QWORD *__fastcall nn__os__InitializeMultiWaitHolder(_QWORD *result, __int64);");
	set_frame_size(0X7100007040, 0, 16, 0);
	add_func    (0X71000070C0,0X7100007134);
	set_func_flags(0X71000070C0,0x1410);
	SetType(0X71000070C0, "__int64 __fastcall nn__os__detail__CreateInterProcessEvent(__int64, int);");
	set_frame_size(0X71000070C0, 0X10, 32, 0);
	add_func    (0X7100007140,0X7100007198);
	set_func_flags(0X7100007140,0x1410);
	SetType(0X7100007140, "__int64 __fastcall nn__os__detail__DestroyInterProcessEvent(__int64 result);");
	set_frame_size(0X7100007140, 0X20, 0, 0);
	add_func    (0X71000071C0,0X71000071C8);
	set_func_flags(0X71000071C0,0x1400);
	SetType(0X71000071C0, "__int64 __fastcall sub_71000071C0(__int64);");
	add_func    (0X71000071D0,0X71000071E8);
	set_func_flags(0X71000071D0,0x1400);
	SetType(0X71000071D0, "void __fastcall nn__os__detail__ClearInterProcessEvent(__int64);");
	add_func    (0X71000071F0,0X71000071F8);
	set_func_flags(0X71000071F0,0x1400);
	SetType(0X71000071F0, "__int64 __fastcall nn__os__detail__GetReadableHandleOfInterProcessEvent(nn::os::detail::InterProcessEventType *a1);");
	add_func    (0X7100007200,0X7100007208);
	set_func_flags(0X7100007200,0x1400);
	SetType(0X7100007200, "__int64 __fastcall nn__os__GetWritableHandleOfSystemEvent(__int64);");
	add_func    (0X7100007208,0X71000072A4);
	set_func_flags(0X7100007208,0x1410);
	SetType(0X7100007208, "__int64 __fastcall CreateEvent_w(_DWORD *, _DWORD *);");
	set_frame_size(0X7100007208, 0X20, 32, 0);
	define_local_var(0X7100007208, 0X71000072A4, "[bp-0X10]", "out_read_handle");
	define_local_var(0X7100007208, 0X71000072A4, "[bp-0X8]", "out_write_handle");
	add_func    (0X71000072A4,0X71000072D8);
	set_func_flags(0X71000072A4,0x1410);
	SetType(0X71000072A4, "__int64 __fastcall sub_71000072A4(__int64 result);");
	set_frame_size(0X71000072A4, 0X10, 16, 0);
	add_func    (0X71000072D8,0X7100007308);
	set_func_flags(0X71000072D8,0x1410);
	SetType(0X71000072D8, "__int64 __fastcall sub_71000072D8(unsigned int);");
	set_frame_size(0X71000072D8, 0X10, 16, 0);
	add_func    (0X7100007308,0X7100007338);
	set_func_flags(0X7100007308,0x1410);
	SetType(0X7100007308, "__int64 __fastcall sub_7100007308(unsigned int);");
	set_frame_size(0X7100007308, 0X10, 16, 0);
	add_func    (0X71000073F0,0X7100007468);
	set_func_flags(0X71000073F0,0x1410);
	SetType(0X71000073F0, "bool __fastcall sub_71000073F0(unsigned int, char);");
	set_frame_size(0X71000073F0, 0X20, 0, 0);
	add_func    (0X7100007470,0X71000074C8);
	set_func_flags(0X7100007470,0x1410);
	SetType(0X7100007470, "_DWORD *__fastcall nn__os__InitializeEvent(__int64, char, char);");
	set_frame_size(0X7100007470, 0X20, 16, 0);
	add_func    (0X71000074D0,0X71000074D8);
	set_func_flags(0X71000074D0,0x1400);
	SetType(0X71000074D0, "__int64 __fastcall nn__os__FinalizeEvent(__int64 result);");
	add_func    (0X71000074E0,0X7100007580);
	set_func_flags(0X71000074E0,0x1410);
	SetType(0X71000074E0, "void __fastcall nn__os__SignalEvent(__int64);");
	set_frame_size(0X71000074E0, 0X20, 16, 0);
	add_func    (0X7100007580,0X71000075B0);
	set_func_flags(0X7100007580,0x1410);
	SetType(0X7100007580, "void __fastcall nn__os__ClearEvent(nn::os::EventType *a1);");
	set_frame_size(0X7100007580, 0, 32, 0);
	add_func    (0X71000075B0,0X7100007624);
	set_func_flags(0X71000075B0,0x1410);
	SetType(0X71000075B0, "void __fastcall nn__os__WaitEvent(__int64);");
	set_frame_size(0X71000075B0, 0, 48, 0);
	add_func    (0X7100007630,0X7100007680);
	set_func_flags(0X7100007630,0x1410);
	SetType(0X7100007630, "bool __fastcall nn__os__TryWaitEvent(__int64);");
	set_frame_size(0X7100007630, 0, 32, 0);
	add_func    (0X7100007680,0X71000076A8);
	set_func_flags(0X7100007680,0x1400);
	SetType(0X7100007680, "nn::os::MultiWaitHolderType *__fastcall nn__os__InitializeMultiWaitHolder(nn::os::MultiWaitHolderType *result, nn::os::SemaphoreType *a2);");
	add_func    (0X71000076A8,0X71000076E8);
	set_func_flags(0X71000076A8,0x1410);
	set_frame_size(0X71000076A8, 0, 32, 0);
	add_func    (0X71000076E8,0X710000774C);
	set_func_flags(0X71000076E8,0x1410);
	set_frame_size(0X71000076E8, 0, 32, 0);
	add_func    (0X710000774C,0X71000077A8);
	set_func_flags(0X710000774C,0x1410);
	set_frame_size(0X710000774C, 0, 32, 0);
	add_func    (0X71000077A8,0X71000077B0);
	set_func_flags(0X71000077A8,0x1400);
	add_func    (0X71000077B0,0X71000077C4);
	set_func_flags(0X71000077B0,0x1400);
	add_func    (0X71000077C4,0X71000077CC);
	set_func_flags(0X71000077C4,0x1400);
	SetType(0X71000077C4, "__int64 sub_71000077C4();");
	add_func    (0X71000077CC,0X71000077D0);
	set_func_flags(0X71000077CC,0x1440);
	add_func    (0X71000077D0,0X7100007804);
	set_func_flags(0X71000077D0,0x1410);
	SetType(0X71000077D0, "__int64 __fastcall nn__os__CloseNativeHandle(__int64 result);");
	set_frame_size(0X71000077D0, 0X10, 16, 0);
	add_func    (0X7100007810,0X710000784C);
	set_func_flags(0X7100007810,0x1410);
	SetType(0X7100007810, "_DWORD *__fastcall nn__os__InitializeMultiWait(__int64);");
	set_frame_size(0X7100007810, 0X20, 0, 0);
	add_func    (0X7100007850,0X7100007858);
	set_func_flags(0X7100007850,0x1400);
	SetType(0X7100007850, "_BYTE *__fastcall nn__os__FinalizeMultiWait(_BYTE *result);");
	add_func    (0X7100007860,0X7100007894);
	set_func_flags(0X7100007860,0x1410);
	SetType(0X7100007860, "nn::os::MultiWaitHolderType *__fastcall nn__os__WaitAny(nn::os::MultiWaitType *a1);");
	set_frame_size(0X7100007860, 0X10, 16, 0);
	add_func    (0X71000078A0,0X71000078D4);
	set_func_flags(0X71000078A0,0x1410);
	SetType(0X71000078A0, "__int64 __fastcall nn__os__TryWaitAny(__int64);");
	set_frame_size(0X71000078A0, 0X10, 16, 0);
	add_func    (0X71000078E0,0X71000078E4);
	set_func_flags(0X71000078E0,0x1440);
	SetType(0X71000078E0, "void nn__os__FinalizeMultiWaitHolder();");
	add_func    (0X71000078F0,0X7100007914);
	set_func_flags(0X71000078F0,0x1400);
	SetType(0X71000078F0, "__int64 __fastcall nn__os__LinkMultiWaitHolder(__int64, __int64);");
	add_func    (0X7100007920,0X7100007954);
	set_func_flags(0X7100007920,0x1400);
	SetType(0X7100007920, "nn::os::MultiWaitHolderType *__fastcall nn__os__UnlinkMultiWaitHolder(nn::os::MultiWaitHolderType *result);");
	add_func    (0X7100007960,0X71000079A4);
	set_func_flags(0X7100007960,0x1400);
	SetType(0X7100007960, "__int64 __fastcall nn__os__UnlinkAllMultiWaitHolder(__int64 result);");
	add_func    (0X71000079B0,0X7100007A18);
	set_func_flags(0X71000079B0,0x1400);
	SetType(0X71000079B0, "__int64 __fastcall nn__os__MoveAllMultiWaitHolder(__int64 result, __int64);");
	add_func    (0X7100007A20,0X7100007A28);
	set_func_flags(0X7100007A20,0x1400);
	SetType(0X7100007A20, "__int64 __fastcall nn__os__SetMultiWaitHolderUserData(__int64 result, __int64);");
	add_func    (0X7100007A30,0X7100007A38);
	set_func_flags(0X7100007A30,0x1400);
	SetType(0X7100007A30, "u64 __fastcall nn__os__GetMultiWaitHolderUserData(nn::os::MultiWaitHolderType *);");
	add_func    (0X7100007A40,0X7100007A6C);
	set_func_flags(0X7100007A40,0x1400);
	SetType(0X7100007A40, "__int64 __fastcall nn__os__InitializeMultiWaitHolder(__int64 result, int);");
	add_func    (0X7100007A6C,0X7100007A74);
	set_func_flags(0X7100007A6C,0x1400);
	SetType(0X7100007A6C, "__int64 sub_7100007A6C();");
	add_func    (0X7100007A74,0X7100007A84);
	set_func_flags(0X7100007A74,0x1400);
	SetType(0X7100007A74, "__int64 __fastcall sub_7100007A74(__int64, _DWORD *);");
	add_func    (0X7100007AB0,0X7100007AC4);
	set_func_flags(0X7100007AB0,0x1400);
	SetType(0X7100007AB0, "__int64 __fastcall sub_7100007AB0(unsigned int);");
	add_func    (0X7100007AD0,0X7100007AE4);
	set_func_flags(0X7100007AD0,0x1400);
	SetType(0X7100007AD0, "__int64 __fastcall sub_7100007AD0(__int64 result, __int64);");
	add_func    (0X7100007AE4,0X7100007B1C);
	set_func_flags(0X7100007AE4,0x1410);
	SetType(0X7100007AE4, "__int64 __fastcall sub_7100007AE4(__int64, __int64);");
	set_frame_size(0X7100007AE4, 0, 32, 0);
	add_func    (0X7100007B1C,0X7100007BD4);
	set_func_flags(0X7100007B1C,0x1410);
	SetType(0X7100007B1C, "bool __fastcall sub_7100007B1C(__int64, unsigned int *, __int64);");
	set_frame_size(0X7100007B1C, 0X10, 48, 0);
	add_func    (0X7100007BE0,0X7100007BF0);
	set_func_flags(0X7100007BE0,0x1400);
	add_func    (0X7100007BF0,0X7100007C50);
	set_func_flags(0X7100007BF0,0x1400);
	add_func    (0X7100007C50,0X7100007CC4);
	set_func_flags(0X7100007C50,0x1410);
	SetType(0X7100007C50, "__int64 __fastcall GenRandomBytes(unsigned __int64, unsigned __int64);");
	set_frame_size(0X7100007C50, 0X20, 16, 0);
	add_func    (0X7100007CD0,0X7100007D3C);
	set_func_flags(0X7100007CD0,0x1410);
	SetType(0X7100007CD0, "void __fastcall SeedRandom(__int64 outRandom);");
	set_frame_size(0X7100007CD0, 0X30, 16, 0);
	add_func    (0X7100007D40,0X7100007D7C);
	set_func_flags(0X7100007D40,0x1410);
	set_frame_size(0X7100007D40, 0X20, 0, 0);
	add_func    (0X7100007D80,0X7100007E0C);
	set_func_flags(0X7100007D80,0x1410);
	set_frame_size(0X7100007D80, 0, 32, 0);
	add_func    (0X7100007E10,0X7100007EB0);
	set_func_flags(0X7100007E10,0x1410);
	set_frame_size(0X7100007E10, 0X20, 32, 0);
	add_func    (0X7100007EB0,0X7100007EE0);
	set_func_flags(0X7100007EB0,0x1410);
	set_frame_size(0X7100007EB0, 0X10, 16, 0);
	add_func    (0X7100008148,0X7100008178);
	set_func_flags(0X7100008148,0x1410);
	set_frame_size(0X7100008148, 0X10, 16, 0);
	add_func    (0X7100008180,0X71000081F0);
	set_func_flags(0X7100008180,0x1410);
	SetType(0X7100008180, "__int64 __fastcall nn__os__CreateSharedMemory(nn::os::SharedMemoryType *this, size_t size, u64 ownerPerms, u64 remotePerms);");
	set_frame_size(0X7100008180, 0X20, 16, 0);
	define_local_var(0X7100008180, 0X71000081F0, "[bp-0X4]", "outHandle");
	add_func    (0X71000081F0,0X710000827C);
	set_func_flags(0X71000081F0,0x1410);
	SetType(0X71000081F0, "void __fastcall nn__os__DestroySharedMemory(__int64);");
	set_frame_size(0X71000081F0, 0, 32, 0);
	add_func    (0X7100008280,0X710000831C);
	set_func_flags(0X7100008280,0x1410);
	SetType(0X7100008280, "__int64 __fastcall nn__os__MapSharedMemory(__int64, u32);");
	set_frame_size(0X7100008280, 0X10, 48, 0);
	add_func    (0X7100008320,0X7100008328);
	set_func_flags(0X7100008320,0x1400);
	SetType(0X7100008320, "__int64 __fastcall TimeSharedMemory__GetHandle(TimeSharedMemory *this);");
	add_func    (0X7100008328,0X71000083D0);
	set_func_flags(0X7100008328,0x1410);
	SetType(0X7100008328, "__int64 __fastcall nn__os__detail__SharedMemoryImplByHorizon__Create(_DWORD *outHandle, size_t size, u64 owner_perms, u64 remote_perms);");
	set_frame_size(0X7100008328, 0X30, 0, 0);
	define_local_var(0X7100008328, 0X71000083D0, "[bp-0X8]", "handle");
	add_func    (0X71000083D0,0X7100008400);
	set_func_flags(0X71000083D0,0x1410);
	SetType(0X71000083D0, "__int64 __fastcall nn__os__detail__SharedMemoryImplByHorizon__Close(_QWORD);");
	set_frame_size(0X71000083D0, 0X10, 16, 0);
	add_func    (0X7100008400,0X71000085CC);
	set_func_flags(0X7100008400,0x1410);
	SetType(0X7100008400, "__int64 __fastcall nn__os__detail__SharedMemoryImplByHorizon__Map(__int64 *, u32, size_t, u32);");
	set_frame_size(0X7100008400, 0X20, 96, 0);
	add_func    (0X71000085CC,0X71000085FC);
	set_func_flags(0X71000085CC,0x1410);
	SetType(0X71000085CC, "__int64 __fastcall nn__os__detail__SharedMemoryImplByHorizon__Unmap(unsigned int);");
	set_frame_size(0X71000085CC, 0X10, 16, 0);
	add_func    (0X71000085FC,0X71000087D8);
	set_func_flags(0X71000085FC,0x1400);
	SetType(0X71000085FC, "__int64 __fastcall sub_71000085FC(__int64 outBytes);");
	add_func    (0X71000087E0,0X71000089D4);
	set_func_flags(0X71000087E0,0x1400);
	SetType(0X71000087E0, "void __fastcall sub_71000087E0(_DWORD *outRandomBytes, __int64 inRandomBytes, int numDwords);");
	add_func    (0X71000089D4,0X7100008A44);
	set_func_flags(0X71000089D4,0x1400);
	SetType(0X71000089D4, "__int64 __fastcall sub_71000089D4(_DWORD *);");
	add_func    (0X7100008A50,0X7100008C10);
	set_func_flags(0X7100008A50,0x1410);
	SetType(0X7100008A50, "unsigned __int64 __fastcall sub_7100008A50(_DWORD *randomBytes, unsigned __int64 a2, unsigned __int64 a3);");
	set_frame_size(0X7100008A50, 0X20, 48, 0);
	add_func    (0X7100008C10,0X7100008C18);
	set_func_flags(0X7100008C10,0x1400);
	add_func    (0X7100008C18,0X7100008C28);
	set_func_flags(0X7100008C18,0x1400);
	add_func    (0X7100008C28,0X7100008C30);
	set_func_flags(0X7100008C28,0x1400);
	add_func    (0X7100008C30,0X7100008C38);
	set_func_flags(0X7100008C30,0x1400);
	add_func    (0X7100008C38,0X7100008C40);
	set_func_flags(0X7100008C38,0x1400);
	add_func    (0X7100008C40,0X7100008C48);
	set_func_flags(0X7100008C40,0x1400);
	add_func    (0X7100008C48,0X7100008C50);
	set_func_flags(0X7100008C48,0x1400);
	add_func    (0X7100008C50,0X7100008C58);
	set_func_flags(0X7100008C50,0x1400);
	add_func    (0X7100008C58,0X7100008C60);
	set_func_flags(0X7100008C58,0x1400);
	add_func    (0X7100008C60,0X7100008C68);
	set_func_flags(0X7100008C60,0x1400);
	add_func    (0X7100008C68,0X7100008C70);
	set_func_flags(0X7100008C68,0x1400);
	add_func    (0X7100008C70,0X7100008C78);
	set_func_flags(0X7100008C70,0x1400);
	add_func    (0X7100008C78,0X7100008C80);
	set_func_flags(0X7100008C78,0x1400);
	add_func    (0X7100008C80,0X71000094BC);
	set_func_flags(0X7100008C80,0x1410);
	set_frame_size(0X7100008C80, 0, 32, 0);
	add_func    (0X7100009560,0X7100009774);
	set_func_flags(0X7100009560,0x1410);
	set_frame_size(0X7100009560, 0X20, 16, 0);
	add_func    (0X71000097E0,0X710000993C);
	set_func_flags(0X71000097E0,0x1410);
	set_frame_size(0X71000097E0, 0, 32, 0);
	add_func    (0X7100009940,0X7100009A74);
	set_func_flags(0X7100009940,0x1400);
	add_func    (0X7100009A80,0X7100009BF8);
	set_func_flags(0X7100009A80,0x1410);
	set_frame_size(0X7100009A80, 0X20, 16, 0);
	add_func    (0X7100009FE0,0X7100009FFC);
	set_func_flags(0X7100009FE0,0x1410);
	set_frame_size(0X7100009FE0, 0, 16, 0);
	add_func    (0X710000A000,0X710000A130);
	set_func_flags(0X710000A000,0x1400);
	add_func    (0X710000A130,0X710000B004);
	set_func_flags(0X710000A130,0x1410);
	set_frame_size(0X710000A130, 0X30, 96, 0);
	add_func    (0X710000B004,0X710000B068);
	set_func_flags(0X710000B004,0x1410);
	set_frame_size(0X710000B004, 0, 32, 0);
	add_func    (0X710000B070,0X710000B128);
	set_func_flags(0X710000B070,0x1410);
	set_frame_size(0X710000B070, 0X190, 0, 0);
	add_func    (0X710000B130,0X710000B1E8);
	set_func_flags(0X710000B130,0x1410);
	set_frame_size(0X710000B130, 0X180, 0, 0);
	add_func    (0X710000BA90,0X710000BDA8);
	set_func_flags(0X710000BA90,0x1410);
	set_frame_size(0X710000BA90, 0X50, 48, 0);
	add_func    (0X710000BE10,0X710000BE20);
	set_func_flags(0X710000BE10,0x1400);
	set_frame_size(0X710000BE10, 0X100, 0, 0);
	add_func    (0X710000BE20,0X710000C014);
	set_func_flags(0X710000BE20,0x1410);
	SetType(0X710000BE20, "void __fastcall sub_710000BE20(__int64);");
	set_frame_size(0X710000BE20, 0X20, 0, 0);
	add_func    (0X710000C020,0X710000C138);
	set_func_flags(0X710000C020,0x1410);
	SetType(0X710000C020, "__int64 __fastcall sub_710000C020(__int64);");
	set_frame_size(0X710000C020, 0X30, 16, 0);
	add_func    (0X710000C140,0X710000C238);
	set_func_flags(0X710000C140,0x1410);
	SetType(0X710000C140, "__int64 sub_710000C140();");
	set_frame_size(0X710000C140, 0X30, 0, 0);
	add_func    (0X710000C240,0X710000C2AC);
	set_func_flags(0X710000C240,0x1410);
	SetType(0X710000C240, "__int64 sub_710000C240();");
	set_frame_size(0X710000C240, 0X20, 0, 0);
	add_func    (0X710000C2B0,0X710000C2BC);
	set_func_flags(0X710000C2B0,0x1400);
	SetType(0X710000C2B0, "char *sub_710000C2B0();");
	add_func    (0X710000C2BC,0X710000C2C8);
	set_func_flags(0X710000C2BC,0x1400);
	add_func    (0X710000C2C8,0X710000C4A4);
	set_func_flags(0X710000C2C8,0x1410);
	set_frame_size(0X710000C2C8, 0, 32, 0);
	add_func    (0X710000C4A4,0X710000C4F8);
	set_func_flags(0X710000C4A4,0x1410);
	set_frame_size(0X710000C4A4, 0X20, 16, 0);
	add_func    (0X710000C4F8,0X710000C504);
	set_func_flags(0X710000C4F8,0x1400);
	add_func    (0X710000C504,0X710000C508);
	set_func_flags(0X710000C504,0x1440);
	add_func    (0X710000C508,0X710000C52C);
	set_func_flags(0X710000C508,0x1410);
	set_frame_size(0X710000C508, 0, 16, 0);
	add_func    (0X710000C52C,0X710000C538);
	set_func_flags(0X710000C52C,0x1411);
	set_frame_size(0X710000C52C, 0, 16, 0);
	add_func    (0X710000C5C0,0X710000C5C8);
	set_func_flags(0X710000C5C0,0x1400);
	add_func    (0X710000C5C8,0X710000C5CC);
	set_func_flags(0X710000C5C8,0x1440);
	add_func    (0X710000C5CC,0X710000C768);
	set_func_flags(0X710000C5CC,0x1410);
	set_frame_size(0X710000C5CC, 0X20, 16, 0);
	add_func    (0X710000C768,0X710000C7C0);
	set_func_flags(0X710000C768,0x1410);
	set_frame_size(0X710000C768, 0X20, 16, 0);
	add_func    (0X710000C7C0,0X710000C7E4);
	set_func_flags(0X710000C7C0,0x1410);
	SetType(0X710000C7C0, "__int64 __fastcall sub_710000C7C0(__int64 *a1);");
	set_frame_size(0X710000C7C0, 0X20, 0, 0);
	add_func    (0X710000C7E4,0X710000C7F0);
	set_func_flags(0X710000C7E4,0x1400);
	add_func    (0X710000C7F0,0X710000C7F4);
	set_func_flags(0X710000C7F0,0x1440);
	add_func    (0X710000C7F4,0X710000C7FC);
	set_func_flags(0X710000C7F4,0x1400);
	add_func    (0X710000C7FC,0X710000C854);
	set_func_flags(0X710000C7FC,0x1410);
	set_frame_size(0X710000C7FC, 0X20, 16, 0);
	add_func    (0X710000C854,0X710000C860);
	set_func_flags(0X710000C854,0x1400);
	add_func    (0X710000C860,0X710000C864);
	set_func_flags(0X710000C860,0x1440);
	add_func    (0X710000C864,0X710000C978);
	set_func_flags(0X710000C864,0x1410);
	set_frame_size(0X710000C864, 0X30, 0, 0);
	add_func    (0X710000C978,0X710000CB4C);
	set_func_flags(0X710000C978,0x1410);
	set_frame_size(0X710000C978, 0XE0, 32, 0);
	add_func    (0X710000CB4C,0X710000D074);
	set_func_flags(0X710000CB4C,0x1410);
	set_frame_size(0X710000CB4C, 0X160, 64, 0);
	define_local_var(0X710000CB4C, 0X710000D074, "[bp-0X148]", "src");
	add_func    (0X710000D074,0X710000D218);
	set_func_flags(0X710000D074,0x1410);
	set_frame_size(0X710000D074, 0XC0, 32, 0);
	add_func    (0X710000D218,0X710000D32C);
	set_func_flags(0X710000D218,0x1410);
	set_frame_size(0X710000D218, 0X30, 0, 0);
	add_func    (0X710000D32C,0X710000D508);
	set_func_flags(0X710000D32C,0x1410);
	set_frame_size(0X710000D32C, 0XE0, 64, 0);
	add_func    (0X710000D890,0X710000DAC8);
	set_func_flags(0X710000D890,0x1410);
	SetType(0X710000D890, "__int64 sub_710000D890();");
	set_frame_size(0X710000D890, 0X20, 16, 0);
	add_func    (0X710000DAD0,0X710000DB30);
	set_func_flags(0X710000DAD0,0x1410);
	SetType(0X710000DAD0, "__int64 __fastcall sub_710000DAD0(__int64);");
	set_frame_size(0X710000DAD0, 0X20, 0, 0);
	add_func    (0X710000DB30,0X710000DB3C);
	set_func_flags(0X710000DB30,0x1400);
	SetType(0X710000DB30, "__int64 __fastcall sub_710000DB30(_QWORD);");
	add_func    (0X710000DB40,0X710000DB4C);
	set_func_flags(0X710000DB40,0x1400);
	SetType(0X710000DB40, "__int64 __fastcall sub_710000DB40(_QWORD);");
	add_func    (0X710000DB4C,0X710000DB50);
	set_func_flags(0X710000DB4C,0x1440);
	add_func    (0X710000DB50,0X710000DB54);
	set_func_flags(0X710000DB50,0x1440);
	add_func    (0X710000DB54,0X710000DB5C);
	set_func_flags(0X710000DB54,0x1400);
	SetType(0X710000DB54, "__int64 nn__sf__IServiceObject__GetProxyInfo();");
	add_func    (0X710000DB5C,0X710000DB64);
	set_func_flags(0X710000DB5C,0x1400);
	SetType(0X710000DB5C, "__int64 nn__sf__IServiceObject__GetInterfaceTypeInfo();");
	add_func    (0X710000DB64,0X710000DC54);
	set_func_flags(0X710000DB64,0x1410);
	set_frame_size(0X710000DB64, 0X20, 32, 0);
	add_func    (0X710000DC60,0X710000DD8C);
	set_func_flags(0X710000DC60,0x1410);
	set_frame_size(0X710000DC60, 0, 64, 0);
	add_func    (0X710000DD8C,0X710000DE74);
	set_func_flags(0X710000DD8C,0x1410);
	set_frame_size(0X710000DD8C, 0X10, 48, 0);
	add_func    (0X710000DE74,0X710000DF70);
	set_func_flags(0X710000DE74,0x1410);
	set_frame_size(0X710000DE74, 0X10, 48, 0);
	add_func    (0X710000DF70,0X710000DFD4);
	set_func_flags(0X710000DF70,0x1410);
	set_frame_size(0X710000DF70, 0X20, 16, 0);
	add_func    (0X710000DFD4,0X710000DFF8);
	set_func_flags(0X710000DFD4,0x1410);
	set_frame_size(0X710000DFD4, 0X10, 16, 0);
	add_func    (0X710000DFF8,0X710000E000);
	set_func_flags(0X710000DFF8,0x1400);
	add_func    (0X710000E000,0X710000E150);
	set_func_flags(0X710000E000,0x1410);
	set_frame_size(0X710000E000, 0, 64, 0);
	add_func    (0X710000E158,0X710000E1EC);
	set_func_flags(0X710000E158,0x1410);
	set_frame_size(0X710000E158, 0X20, 0, 0);
	add_func    (0X710000E1F0,0X710000E370);
	set_func_flags(0X710000E1F0,0x1410);
	set_frame_size(0X710000E1F0, 0, 48, 0);
	add_func    (0X710000E370,0X710000E374);
	set_func_flags(0X710000E370,0x1440);
	add_func    (0X710000E374,0X710000E378);
	set_func_flags(0X710000E374,0x1440);
	add_func    (0X710000E380,0X710000E668);
	set_func_flags(0X710000E380,0x1410);
	set_frame_size(0X710000E380, 0X20, 96, 0);
	add_func    (0X710000E670,0X710000E6E4);
	set_func_flags(0X710000E670,0x1410);
	set_frame_size(0X710000E670, 0X20, 16, 0);
	add_func    (0X710000E6E4,0X710000E960);
	set_func_flags(0X710000E6E4,0x1410);
	set_frame_size(0X710000E6E4, 0X20, 64, 0);
	add_func    (0X710000E960,0X710000E9D8);
	set_func_flags(0X710000E960,0x1410);
	set_frame_size(0X710000E960, 0X20, 16, 0);
	add_func    (0X710000E9E0,0X710000EB60);
	set_func_flags(0X710000E9E0,0x1410);
	set_frame_size(0X710000E9E0, 0, 48, 0);
	add_func    (0X710000EB60,0X710000EB6C);
	set_func_flags(0X710000EB60,0x1400);
	SetType(0X710000EB60, "__int64 sub_710000EB60(void);");
	add_func    (0X710000EB6C,0X710000EB70);
	set_func_flags(0X710000EB6C,0x14c0);
	SetType(0X710000EB6C, "__int64 __fastcall j_Heap_Deallocate(StandardSteadyClockCore *this);");
	add_func    (0X710000EB70,0X710000EB78);
	set_func_flags(0X710000EB70,0x1400);
	add_func    (0X710000EB78,0X710000EB80);
	set_func_flags(0X710000EB78,0x1400);
	add_func    (0X710000EB80,0X710000EB8C);
	set_func_flags(0X710000EB80,0x1400);
	add_func    (0X710000EB8C,0X710000ECC8);
	set_func_flags(0X710000EB8C,0x1400);
	SetType(0X710000EB8C, "__int64 __fastcall sub_710000EB8C(_QWORD, _QWORD);");
	add_func    (0X710000ECD0,0X710000ECDC);
	set_func_flags(0X710000ECD0,0x1400);
	SetType(0X710000ECD0, "__int64 __fastcall sub_710000ECD0(_QWORD);");
	add_func    (0X710000ECE0,0X710000ECFC);
	set_func_flags(0X710000ECE0,0x1410);
	SetType(0X710000ECE0, "__int64 sub_710000ECE0(void);");
	set_frame_size(0X710000ECE0, 0, 16, 0);
	add_func    (0X710000ED00,0X710000ED38);
	set_func_flags(0X710000ED00,0x1410);
	set_frame_size(0X710000ED00, 0X20, 0, 0);
	add_func    (0X710000ED40,0X710000ED58);
	set_func_flags(0X710000ED40,0x1400);
	SetType(0X710000ED40, "__int64 __fastcall sub_710000ED40(_QWORD);");
	add_func    (0X710000ED60,0X710000ED78);
	set_func_flags(0X710000ED60,0x1400);
	add_func    (0X710000ED78,0X710000EEB0);
	set_func_flags(0X710000ED78,0x1400);
	SetType(0X710000ED78, "bool __fastcall sub_710000ED78(__int64 *, __int64);");
	add_func    (0X710000EEB0,0X710000F080);
	set_func_flags(0X710000EEB0,0x1410);
	SetType(0X710000EEB0, "bool __fastcall sub_710000EEB0(__int64, __int64, __int64, unsigned __int8 *);");
	set_frame_size(0X710000EEB0, 0, 32, 0);
	add_func    (0X710000F080,0X710000F09C);
	set_func_flags(0X710000F080,0x1400);
	SetType(0X710000F080, "__int64 __fastcall sub_710000F080(__int64 result, int, __int64, unsigned __int16);");
	add_func    (0X710000F09C,0X710000F18C);
	set_func_flags(0X710000F09C,0x1410);
	SetType(0X710000F09C, "void __fastcall sub_710000F09C(_QWORD *a1, __int64 a2, int a3);");
	set_frame_size(0X710000F09C, 0X20, 32, 0);
	add_func    (0X710000F190,0X710000F2A0);
	set_func_flags(0X710000F190,0x1410);
	SetType(0X710000F190, "void __fastcall nn__sf__hipc__server__v1__detail__HipcAllInOneServerManagerBase___HipcAllInOneServerManagerBase(Unk4440 *this);");
	set_frame_size(0X710000F190, 0, 48, 0);
	add_func    (0X710000F2A0,0X710000F2F0);
	set_func_flags(0X710000F2A0,0x1410);
	SetType(0X710000F2A0, "__int64 __fastcall sub_710000F2A0(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X710000F2A0, 0X30, 0, 0);
	add_func    (0X710000F2F0,0X710000F420);
	set_func_flags(0X710000F2F0,0x1410);
	SetType(0X710000F2F0, "__int64 __fastcall sub_710000F2F0(Unk4440 *this, int a2, __int64 *a3, unsigned int a4, __int64 a5);");
	set_frame_size(0X710000F2F0, 0X10, 64, 0);
	add_func    (0X710000F420,0X710000F428);
	set_func_flags(0X710000F420,0x1400);
	SetType(0X710000F420, "void __fastcall Unk4440__ClearEvent(Unk4440 *this);");
	add_func    (0X710000F428,0X710000F430);
	set_func_flags(0X710000F428,0x1400);
	SetType(0X710000F428, "__int64 __fastcall sub_710000F428(_QWORD);");
	add_func    (0X710000F430,0X710000F514);
	set_func_flags(0X710000F430,0x1410);
	SetType(0X710000F430, "__int64 __fastcall sub_710000F430(Unk4440 *this);");
	set_frame_size(0X710000F430, 0, 80, 0);
	add_func    (0X710000F614,0X710000F670);
	set_func_flags(0X710000F614,0x1410);
	set_frame_size(0X710000F614, 0X20, 16, 0);
	add_func    (0X710000F670,0X710000F734);
	set_func_flags(0X710000F670,0x1410);
	SetType(0X710000F670, "__int64 __fastcall sub_710000F670(Unk4440 *this, __int64 a2);");
	set_frame_size(0X710000F670, 0X30, 16, 0);
	add_func    (0X710000F740,0X710000F794);
	set_func_flags(0X710000F740,0x1410);
	SetType(0X710000F740, "char *__fastcall sub_710000F740(Unk4440 *this);");
	set_frame_size(0X710000F740, 0X20, 0, 0);
	add_func    (0X710000F7A0,0X710000F7A4);
	set_func_flags(0X710000F7A0,0x1440);
	add_func    (0X710000F7A4,0X710000F7A8);
	set_func_flags(0X710000F7A4,0x1440);
	add_func    (0X710000F7A8,0X710000F7AC);
	set_func_flags(0X710000F7A8,0x1440);
	SetType(0X710000F7A8, "void nullsub_74();");
	add_func    (0X710000F7B0,0X710000F848);
	set_func_flags(0X710000F7B0,0x1410);
	SetType(0X710000F7B0, "_DWORD *__fastcall sub_710000F7B0(__int64, __int64, int);");
	set_frame_size(0X710000F7B0, 0X20, 16, 0);
	add_func    (0X710000F850,0X710000F8C4);
	set_func_flags(0X710000F850,0x1410);
	SetType(0X710000F850, "void __fastcall nn__sf__cmif__server__CmifServerDomainManager__EntryAllocator___EntryAllocator(__int64);");
	set_frame_size(0X710000F850, 0X20, 16, 0);
	add_func    (0X710000F8C4,0X710000F8F0);
	set_func_flags(0X710000F8C4,0x1400);
	SetType(0X710000F8C4, "__int64 __fastcall sub_710000F8C4(__int64 result, __int64);");
	add_func    (0X710000F8F0,0X710000F9C0);
	set_func_flags(0X710000F8F0,0x1410);
	SetType(0X710000F8F0, "void __fastcall sub_710000F8F0(_QWORD *);");
	set_frame_size(0X710000F8F0, 0X20, 32, 0);
	add_func    (0X710000F9C0,0X710000FA8C);
	set_func_flags(0X710000F9C0,0x1410);
	SetType(0X710000F9C0, "__int64 __fastcall sub_710000F9C0(__int64, _DWORD *, int);");
	set_frame_size(0X710000F9C0, 0, 80, 0);
	add_func    (0X710000FA90,0X710000FB5C);
	set_func_flags(0X710000FA90,0x1410);
	set_frame_size(0X710000FA90, 0, 80, 0);
	add_func    (0X710000FB60,0X710000FC04);
	set_func_flags(0X710000FB60,0x1410);
	set_frame_size(0X710000FB60, 0X20, 48, 0);
	add_func    (0X710000FC10,0X710000FCB4);
	set_func_flags(0X710000FC10,0x1410);
	set_frame_size(0X710000FC10, 0X20, 48, 0);
	add_func    (0X710000FCB4,0X710000FD68);
	set_func_flags(0X710000FCB4,0x1410);
	set_frame_size(0X710000FCB4, 0, 48, 0);
	add_func    (0X710000FD68,0X710000FE2C);
	set_func_flags(0X710000FD68,0x1410);
	set_frame_size(0X710000FD68, 0X20, 32, 0);
	add_func    (0X710000FE2C,0X710000FF48);
	set_func_flags(0X710000FE2C,0x1410);
	set_frame_size(0X710000FE2C, 0X20, 48, 0);
	add_func    (0X710000FF48,0X710000FF54);
	set_func_flags(0X710000FF48,0x1400);
	add_func    (0X710000FF54,0X7100010020);
	set_func_flags(0X710000FF54,0x1410);
	set_frame_size(0X710000FF54, 0X20, 32, 0);
	add_func    (0X7100010020,0X71000100EC);
	set_func_flags(0X7100010020,0x1410);
	set_frame_size(0X7100010020, 0X20, 32, 0);
	add_func    (0X71000100EC,0X7100010144);
	set_func_flags(0X71000100EC,0x1410);
	SetType(0X71000100EC, "_DWORD *__fastcall sub_71000100EC(_QWORD *, __int64, int);");
	set_frame_size(0X71000100EC, 0X20, 16, 0);
	add_func    (0X7100010144,0X7100010184);
	set_func_flags(0X7100010144,0x1410);
	SetType(0X7100010144, "__int64 __fastcall sub_7100010144(__int64 (__fastcall ***)(_QWORD));");
	set_frame_size(0X7100010144, 0, 32, 0);
	add_func    (0X710001018C,0X71000101DC);
	set_func_flags(0X710001018C,0x1410);
	set_frame_size(0X710001018C, 0, 32, 0);
	add_func    (0X71000101DC,0X71000101E4);
	set_func_flags(0X71000101DC,0x1400);
	add_func    (0X71000101E4,0X71000102CC);
	set_func_flags(0X71000101E4,0x1410);
	SetType(0X71000101E4, "__int64 __fastcall sub_71000101E4(__int64, __int64, __int64, __int64, __int64, __int64);");
	set_frame_size(0X71000101E4, 0XC0, 32, 0);
	add_func    (0X71000102CC,0X71000103B0);
	set_func_flags(0X71000102CC,0x1410);
	SetType(0X71000102CC, "__int64 __fastcall nn__sf__hipc__server__v1__HipcServerSessionManagerBase__ProcessRequest(__int64, __int64, _WORD *, __int64);");
	set_frame_size(0X71000102CC, 0X20, 16, 0);
	add_func    (0X71000103B0,0X7100010430);
	set_func_flags(0X71000103B0,0x1410);
	set_frame_size(0X71000103B0, 0X20, 16, 0);
	add_func    (0X7100010430,0X710001053C);
	set_func_flags(0X7100010430,0x1410);
	SetType(0X7100010430, "__int64 __fastcall sub_7100010430(_QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100010430, 0X30, 16, 0);
	add_func    (0X7100010540,0X71000106E8);
	set_func_flags(0X7100010540,0x1410);
	set_frame_size(0X7100010540, 0X1C0, 80, 0);
	add_func    (0X71000106E8,0X71000106F0);
	set_func_flags(0X71000106E8,0x1400);
	add_func    (0X71000106F0,0X71000108F8);
	set_func_flags(0X71000106F0,0x1410);
	set_frame_size(0X71000106F0, 0X10, 80, 0);
	add_func    (0X71000108F8,0X7100010998);
	set_func_flags(0X71000108F8,0x1410);
	set_frame_size(0X71000108F8, 0, 48, 0);
	add_func    (0X7100010998,0X7100010A18);
	set_func_flags(0X7100010998,0x1410);
	set_frame_size(0X7100010998, 0, 32, 0);
	add_func    (0X7100010A18,0X7100010AC8);
	set_func_flags(0X7100010A18,0x1410);
	set_frame_size(0X7100010A18, 0X20, 16, 0);
	add_func    (0X7100010AD0,0X7100010DAC);
	set_func_flags(0X7100010AD0,0x1410);
	set_frame_size(0X7100010AD0, 0, 32, 0);
	add_func    (0X7100010DAC,0X7100010DCC);
	set_func_flags(0X7100010DAC,0x1400);
	add_func    (0X7100010DD0,0X7100010FF0);
	set_func_flags(0X7100010DD0,0x1400);
	set_frame_size(0X7100010DD0, 0X10, 0, 0);
	add_func    (0X7100010FF0,0X71000110F0);
	set_func_flags(0X7100010FF0,0x1410);
	set_frame_size(0X7100010FF0, 0X20, 48, 0);
	add_func    (0X7100011250,0X7100011344);
	set_func_flags(0X7100011250,0x1400);
	add_func    (0X7100011350,0X71000113B4);
	set_func_flags(0X7100011350,0x1410);
	set_frame_size(0X7100011350, 0X20, 16, 0);
	add_func    (0X71000113C0,0X710001149C);
	set_func_flags(0X71000113C0,0x1410);
	set_frame_size(0X71000113C0, 0, 16, 0);
	add_func    (0X7100011580,0X7100011784);
	set_func_flags(0X7100011580,0x1400);
	set_frame_size(0X7100011580, 0X20, 0, 0);
	add_func    (0X7100011784,0X7100011854);
	set_func_flags(0X7100011784,0x1410);
	set_frame_size(0X7100011784, 0X20, 48, 0);
	add_func    (0X7100011854,0X71000118D4);
	set_func_flags(0X7100011854,0x1410);
	set_frame_size(0X7100011854, 0X50, 0, 0);
	add_func    (0X71000118D4,0X71000118D8);
	set_func_flags(0X71000118D4,0x1440);
	add_func    (0X71000118D8,0X71000118DC);
	set_func_flags(0X71000118D8,0x1440);
	add_func    (0X71000118DC,0X71000119DC);
	set_func_flags(0X71000118DC,0x1410);
	SetType(0X71000118DC, "__int64 __fastcall sub_71000118DC(__int64, unsigned int *);");
	set_frame_size(0X71000118DC, 0X20, 32, 0);
	add_func    (0X71000119DC,0X7100012234);
	set_func_flags(0X71000119DC,0x1400);
	set_frame_size(0X71000119DC, 0X1B0, 0, 0);
	add_func    (0X71000125C0,0X7100012764);
	set_func_flags(0X71000125C0,0x1410);
	set_frame_size(0X71000125C0, 0XC0, 32, 0);
	add_func    (0X7100012764,0X710001290C);
	set_func_flags(0X7100012764,0x1410);
	set_frame_size(0X7100012764, 0XC0, 32, 0);
	add_func    (0X710001290C,0X7100012AB0);
	set_func_flags(0X710001290C,0x1410);
	set_frame_size(0X710001290C, 0XC0, 32, 0);
	add_func    (0X7100012AB0,0X7100012AE4);
	set_func_flags(0X7100012AB0,0x1410);
	SetType(0X7100012AB0, "unsigned int *__fastcall sub_7100012AB0(unsigned int *result);");
	set_frame_size(0X7100012AB0, 0, 16, 0);
	add_func    (0X7100012AF0,0X7100012B28);
	set_func_flags(0X7100012AF0,0x1410);
	SetType(0X7100012AF0, "__int64 __fastcall sub_7100012AF0(_QWORD);");
	set_frame_size(0X7100012AF0, 0, 16, 0);
	add_func    (0X7100012B30,0X7100012B60);
	set_func_flags(0X7100012B30,0x1410);
	SetType(0X7100012B30, "__int64 __fastcall nn__sf__hipc__CloseClientSessionHandle(unsigned int);");
	set_frame_size(0X7100012B30, 0X10, 16, 0);
	add_func    (0X7100012B60,0X7100012B68);
	set_func_flags(0X7100012B60,0x1400);
	SetType(0X7100012B60, "unsigned __int64 nn__sf__hipc__GetMessageBufferOnTls();");
	add_func    (0X7100012B70,0X7100012BCC);
	set_func_flags(0X7100012B70,0x1410);
	SetType(0X7100012B70, "__int64 __fastcall nn__sf__hipc__SendSyncRequest(unsigned int, __int64, __int64);");
	set_frame_size(0X7100012B70, 0, 16, 0);
	add_func    (0X7100012BD0,0X7100012C28);
	set_func_flags(0X7100012BD0,0x1410);
	SetType(0X7100012BD0, "__int64 __fastcall nn__sf__hipc__CloseServerPortHandle(unsigned int);");
	set_frame_size(0X7100012BD0, 0X20, 0, 0);
	add_func    (0X7100012C30,0X7100012C34);
	set_func_flags(0X7100012C30,0x14c0);
	SetType(0X7100012C30, "__int64 __fastcall nn__os__InitializeMultiWaitHolder(__int64, int);");
	add_func    (0X7100012C40,0X7100012C90);
	set_func_flags(0X7100012C40,0x1410);
	SetType(0X7100012C40, "__int64 __fastcall nn__sf__hipc__AcceptSession(__int64, unsigned int);");
	set_frame_size(0X7100012C40, 0, 32, 0);
	add_func    (0X7100012C90,0X7100012CCC);
	set_func_flags(0X7100012C90,0x1410);
	SetType(0X7100012C90, "__int64 __fastcall nn__sf__hipc__CreateSession(__int64, __int64);");
	set_frame_size(0X7100012C90, 0, 16, 0);
	add_func    (0X7100012CD0,0X7100012D00);
	set_func_flags(0X7100012CD0,0x1410);
	SetType(0X7100012CD0, "void __fastcall nn__sf__hipc__CloseServerSessionHandle(unsigned int);");
	set_frame_size(0X7100012CD0, 0X10, 16, 0);
	add_func    (0X7100012D00,0X7100012D04);
	set_func_flags(0X7100012D00,0x14c0);
	SetType(0X7100012D00, "__int64 __fastcall nn__os__InitializeMultiWaitHolder(__int64 result, int);");
	add_func    (0X7100012D10,0X7100012DD0);
	set_func_flags(0X7100012D10,0x1410);
	SetType(0X7100012D10, "__int64 __fastcall nn__sf__hipc__Receive(char *, int, __int64, __int64);");
	set_frame_size(0X7100012D10, 0X30, 0, 0);
	add_func    (0X7100012DD0,0X7100012E5C);
	set_func_flags(0X7100012DD0,0x1410);
	SetType(0X7100012DD0, "__int64 __fastcall nn__sf__hipc__Reply(unsigned int, __int64, __int64);");
	set_frame_size(0X7100012DD0, 0X10, 16, 0);
	add_func    (0X7100012E60,0X7100012EAC);
	set_func_flags(0X7100012E60,0x1410);
	SetType(0X7100012E60, "__int64 __fastcall nn__sf__hipc__GetPortProcessor(unsigned int);");
	set_frame_size(0X7100012E60, 0X20, 0, 0);
	add_func    (0X7100012EB0,0X7100012EF8);
	set_func_flags(0X7100012EB0,0x1410);
	SetType(0X7100012EB0, "__int64 __fastcall nn__sf__hipc__GetPortProcessor(__int64);");
	set_frame_size(0X7100012EB0, 0X20, 0, 0);
	add_func    (0X7100012F00,0X7100012F2C);
	set_func_flags(0X7100012F00,0x1410);
	SetType(0X7100012F00, "__int64 sub_7100012F00();");
	set_frame_size(0X7100012F00, 0X10, 16, 0);
	add_func    (0X7100012F30,0X7100012F5C);
	set_func_flags(0X7100012F30,0x1410);
	SetType(0X7100012F30, "__int64 nn__sf__hipc__FinalizeHipcServiceResolution();");
	set_frame_size(0X7100012F30, 0X10, 16, 0);
	add_func    (0X7100012F60,0X7100012FD8);
	set_func_flags(0X7100012F60,0x1410);
	SetType(0X7100012F60, "__int64 __fastcall sub_7100012F60(__int64, unsigned int, __int64);");
	set_frame_size(0X7100012F60, 0X20, 16, 0);
	add_func    (0X7100012FE0,0X710001309C);
	set_func_flags(0X7100012FE0,0x1410);
	SetType(0X7100012FE0, "__int64 __fastcall nn__sf__hipc__UnregisterHipcService(__int64);");
	set_frame_size(0X7100012FE0, 0X40, 0, 0);
	add_func    (0X71000130A0,0X7100013200);
	set_func_flags(0X71000130A0,0x1410);
	SetType(0X71000130A0, "__int64 GetSM();");
	set_frame_size(0X71000130A0, 0X20, 32, 0);
	add_func    (0X7100013200,0X7100013208);
	set_func_flags(0X7100013200,0x1400);
	SetType(0X7100013200, "__int64 sub_7100013200(void);");
	add_func    (0X7100013210,0X7100013380);
	set_func_flags(0X7100013210,0x1410);
	set_frame_size(0X7100013210, 0, 32, 0);
	add_func    (0X7100013380,0X71000134FC);
	set_func_flags(0X7100013380,0x1410);
	SetType(0X7100013380, "__int64 __fastcall sub_7100013380(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100013380, 0, 32, 0);
	add_func    (0X7100013500,0X7100013658);
	set_func_flags(0X7100013500,0x1410);
	SetType(0X7100013500, "__int64 __fastcall nn__sm__UnregisterService(_QWORD, _QWORD);");
	set_frame_size(0X7100013500, 0X20, 0, 0);
	add_func    (0X7100013658,0X710001368C);
	set_func_flags(0X7100013658,0x1410);
	set_frame_size(0X7100013658, 0X20, 0, 0);
	add_func    (0X710001368C,0X7100013694);
	set_func_flags(0X710001368C,0x1400);
	add_func    (0X7100013694,0X710001369C);
	set_func_flags(0X7100013694,0x1400);
	SetType(0X7100013694, "void UnmapMemory();");
	add_func    (0X710001369C,0X71000136B4);
	set_func_flags(0X710001369C,0x1400);
	set_frame_size(0X710001369C, 0X10, 0, 0);
	add_func    (0X71000136B4,0X71000136BC);
	set_func_flags(0X71000136B4,0x1400);
	add_func    (0X71000136BC,0X71000136D4);
	set_func_flags(0X71000136BC,0x1400);
	set_frame_size(0X71000136BC, 0X10, 0, 0);
	add_func    (0X71000136D4,0X71000136DC);
	set_func_flags(0X71000136D4,0x1400);
	add_func    (0X71000136EC,0X7100013704);
	set_func_flags(0X71000136EC,0x1400);
	set_frame_size(0X71000136EC, 0X10, 0, 0);
	add_func    (0X7100013704,0X710001370C);
	set_func_flags(0X7100013704,0x1400);
	SetType(0X7100013704, "__int64 __fastcall nn__os__detail__SignalInterProcessEvent(_QWORD);");
	add_func    (0X710001370C,0X7100013714);
	set_func_flags(0X710001370C,0x1400);
	SetType(0X710001370C, "__int64 __fastcall sub_710001370C(_QWORD);");
	add_func    (0X7100013714,0X710001371C);
	set_func_flags(0X7100013714,0x1400);
	SetType(0X7100013714, "void __fastcall MapSharedMemory(u32 shmem_handle, uintptr_t address, size_t size, u32 map_perm);");
	add_func    (0X710001371C,0X7100013724);
	set_func_flags(0X710001371C,0x1400);
	SetType(0X710001371C, "void __fastcall UnmapSharedMemory(u32 shmem_handle, uintptr_t address, size_t size);");
	add_func    (0X7100013724,0X710001372C);
	set_func_flags(0X7100013724,0x1400);
	SetType(0X7100013724, "__int64 __fastcall CloseHandle(__int64);");
	add_func    (0X710001372C,0X7100013734);
	set_func_flags(0X710001372C,0x1400);
	SetType(0X710001372C, "__int64 __fastcall sub_710001372C(_QWORD);");
	add_func    (0X7100013734,0X710001374C);
	set_func_flags(0X7100013734,0x1400);
	SetType(0X7100013734, "__int64 __fastcall sub_7100013734(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100013734, 0X10, 0, 0);
	add_func    (0X710001374C,0X7100013754);
	set_func_flags(0X710001374C,0x1400);
	add_func    (0X7100013754,0X710001375C);
	set_func_flags(0X7100013754,0x1400);
	SetType(0X7100013754, "void __fastcall ArbitrateLock(int handle, uintptr_t address, uint32_t tag);");
	add_func    (0X710001375C,0X7100013764);
	set_func_flags(0X710001375C,0x1400);
	SetType(0X710001375C, "void __fastcall ArbitrateUnlock(__int64);");
	add_func    (0X7100013764,0X710001376C);
	set_func_flags(0X7100013764,0x1400);
	add_func    (0X7100013774,0X710001378C);
	set_func_flags(0X7100013774,0x1400);
	SetType(0X7100013774, "__int64 __fastcall sub_7100013774(_QWORD, _QWORD);");
	set_frame_size(0X7100013774, 0X10, 0, 0);
	add_func    (0X710001378C,0X7100013794);
	set_func_flags(0X710001378C,0x1400);
	SetType(0X710001378C, "__int64 __fastcall sub_710001378C(_QWORD);");
	add_func    (0X7100013794,0X710001379C);
	set_func_flags(0X7100013794,0x1400);
	SetType(0X7100013794, "__int64 __fastcall sub_7100013794(_QWORD, _QWORD, _QWORD);");
	add_func    (0X710001379C,0X71000137B4);
	set_func_flags(0X710001379C,0x1400);
	set_frame_size(0X710001379C, 0X10, 0, 0);
	add_func    (0X71000137B4,0X71000137BC);
	set_func_flags(0X71000137B4,0x1400);
	SetType(0X71000137B4, "__int64 __fastcall sub_71000137B4(_QWORD, _QWORD, _QWORD);");
	add_func    (0X71000137BC,0X71000137C4);
	set_func_flags(0X71000137BC,0x1400);
	add_func    (0X71000137C4,0X71000137CC);
	set_func_flags(0X71000137C4,0x1400);
	SetType(0X71000137C4, "__int64 __fastcall sub_71000137C4(_QWORD);");
	add_func    (0X71000137CC,0X71000137E4);
	set_func_flags(0X71000137CC,0x1400);
	SetType(0X71000137CC, "_QWORD *__fastcall GetInfo(uint64_t *out, u64 info_type, u32 handle, uint64_t info_subtype);");
	set_frame_size(0X71000137CC, 0X10, 0, 0);
	add_func    (0X71000137E4,0X71000137EC);
	set_func_flags(0X71000137E4,0x1400);
	add_func    (0X71000137EC,0X710001380C);
	set_func_flags(0X71000137EC,0x1400);
	SetType(0X71000137EC, "__int64 __fastcall sub_71000137EC(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X71000137EC, 0X10, 0, 0);
	add_func    (0X710001380C,0X7100013824);
	set_func_flags(0X710001380C,0x1400);
	SetType(0X710001380C, "__int64 __fastcall sub_710001380C(_QWORD, _QWORD);");
	set_frame_size(0X710001380C, 0X10, 0, 0);
	add_func    (0X7100013824,0X710001383C);
	set_func_flags(0X7100013824,0x1400);
	SetType(0X7100013824, "_DWORD *__fastcall ReplyAndReceive(_DWORD *result, int);");
	set_frame_size(0X7100013824, 0X10, 0, 0);
	add_func    (0X710001383C,0X7100013854);
	set_func_flags(0X710001383C,0x1400);
	SetType(0X710001383C, "_DWORD *__fastcall ReplyAndReceiveWithUserBuffer(_DWORD *result, int);");
	set_frame_size(0X710001383C, 0X10, 0, 0);
	add_func    (0X7100013854,0X7100013874);
	set_func_flags(0X7100013854,0x1400);
	SetType(0X7100013854, "_DWORD *__fastcall CreateEvent(u32 *out_write_handle, u32 *out_read_handle);");
	set_frame_size(0X7100013854, 0X10, 0, 0);
	add_func    (0X7100013874,0X710001388C);
	set_func_flags(0X7100013874,0x1400);
	SetType(0X7100013874, "_DWORD *__fastcall CreateSharedMemory(u32 *out_handle, size_t size, u64 owner_perm, u64 remote_perm);");
	set_frame_size(0X7100013874, 0X10, 0, 0);
	add_func    (0X710001388C,0X7100013894);
	set_func_flags(0X710001388C,0x1400);
	SetType(0X710001388C, "void sub_710001388C();");
	add_func    (0X7100013894,0X710001389C);
	set_func_flags(0X7100013894,0x1400);
	add_func    (0X71000138A0,0X71000138D4);
	set_func_flags(0X71000138A0,0x1410);
	set_frame_size(0X71000138A0, 0X20, 0, 0);
	add_func    (0X71000138F0,0X7100013AC0);
	set_func_flags(0X71000138F0,0x1410);
	set_frame_size(0X71000138F0, 0X20, 48, 0);
	add_func    (0X7100013AF4,0X7100013CA4);
	set_func_flags(0X7100013AF4,0x1410);
	set_frame_size(0X7100013AF4, 0X20, 32, 0);
	add_func    (0X7100013CAC,0X7100013D5C);
	set_func_flags(0X7100013CAC,0x1410);
	set_frame_size(0X7100013CAC, 0XA0, 48, 0);
	add_func    (0X7100013D5C,0X7100013D64);
	set_func_flags(0X7100013D5C,0x1400);
	add_func    (0X7100013D64,0X7100014148);
	set_func_flags(0X7100013D64,0x1400);
	set_frame_size(0X7100013D64, 0XE0, 0, 0);
	add_func    (0X7100014150,0X71000148A0);
	set_func_flags(0X7100014150,0x1410);
	set_frame_size(0X7100014150, 0X40, 64, 0);
	add_func    (0X7100014900,0X7100014948);
	set_func_flags(0X7100014900,0x1410);
	set_frame_size(0X7100014900, 0, 32, 0);
	add_func    (0X7100014950,0X7100014C0C);
	set_func_flags(0X7100014950,0x1410);
	set_frame_size(0X7100014950, 0, 32, 0);
	add_func    (0X7100014C10,0X7100014CC0);
	set_func_flags(0X7100014C10,0x1410);
	set_frame_size(0X7100014C10, 0, 32, 0);
	add_func    (0X7100014CC0,0X7100014DAC);
	set_func_flags(0X7100014CC0,0x1410);
	SetType(0X7100014CC0, "__int64 __fastcall sub_7100014CC0(__int64, _DWORD *, unsigned int);");
	set_frame_size(0X7100014CC0, 0X90, 32, 0);
	add_func    (0X7100014DAC,0X7100014E90);
	set_func_flags(0X7100014DAC,0x1410);
	SetType(0X7100014DAC, "__int64 __fastcall sub_7100014DAC(__int64, int, unsigned int);");
	set_frame_size(0X7100014DAC, 0X90, 32, 0);
	add_func    (0X7100014E90,0X7100014F40);
	set_func_flags(0X7100014E90,0x1410);
	set_frame_size(0X7100014E90, 0, 32, 0);
	add_func    (0X7100014F40,0X7100014F48);
	set_func_flags(0X7100014F40,0x1400);
	add_func    (0X7100014F48,0X7100014F50);
	set_func_flags(0X7100014F48,0x1400);
	add_func    (0X7100014F50,0X7100015148);
	set_func_flags(0X7100014F50,0x1410);
	SetType(0X7100014F50, "void __fastcall sub_7100014F50(__int64);");
	set_frame_size(0X7100014F50, 0X20, 0, 0);
	add_func    (0X7100015150,0X7100015160);
	set_func_flags(0X7100015150,0x1400);
	add_func    (0X7100015160,0X7100015170);
	set_func_flags(0X7100015160,0x1400);
	add_func    (0X7100015170,0X710001524C);
	set_func_flags(0X7100015170,0x1410);
	SetType(0X7100015170, "__int64 *sub_7100015170();");
	set_frame_size(0X7100015170, 0X30, 0, 0);
	add_func    (0X7100015250,0X71000152CC);
	set_func_flags(0X7100015250,0x1411);
	set_frame_size(0X7100015250, 0X10, 32, 0);
	add_func    (0X71000152D0,0X71000152DC);
	set_func_flags(0X71000152D0,0x1400);
	add_func    (0X71000152DC,0X71000152E0);
	set_func_flags(0X71000152DC,0x1440);
	add_func    (0X71000152E0,0X71000152E4);
	set_func_flags(0X71000152E0,0x1440);
	add_func    (0X71000152E4,0X71000152EC);
	set_func_flags(0X71000152E4,0x1400);
	add_func    (0X71000152EC,0X71000152F4);
	set_func_flags(0X71000152EC,0x1400);
	add_func    (0X71000152F4,0X7100015320);
	set_func_flags(0X71000152F4,0x1410);
	set_frame_size(0X71000152F4, 0X10, 16, 0);
	add_func    (0X7100015320,0X7100015328);
	set_func_flags(0X7100015320,0x1400);
	add_func    (0X7100015328,0X7100015330);
	set_func_flags(0X7100015328,0x1400);
	add_func    (0X7100015330,0X710001535C);
	set_func_flags(0X7100015330,0x1410);
	set_frame_size(0X7100015330, 0X10, 16, 0);
	add_func    (0X710001535C,0X7100015364);
	set_func_flags(0X710001535C,0x1400);
	add_func    (0X7100015364,0X7100015390);
	set_func_flags(0X7100015364,0x1410);
	set_frame_size(0X7100015364, 0X10, 16, 0);
	add_func    (0X7100015390,0X7100015398);
	set_func_flags(0X7100015390,0x1400);
	add_func    (0X7100015398,0X710001539C);
	set_func_flags(0X7100015398,0x1440);
	add_func    (0X710001539C,0X71000153A0);
	set_func_flags(0X710001539C,0x1440);
	add_func    (0X71000153A0,0X71000153A4);
	set_func_flags(0X71000153A0,0x1440);
	add_func    (0X71000153A4,0X71000153A8);
	set_func_flags(0X71000153A4,0x1440);
	add_func    (0X71000153A8,0X71000153D4);
	set_func_flags(0X71000153A8,0x1410);
	set_frame_size(0X71000153A8, 0X10, 16, 0);
	add_func    (0X71000153D4,0X7100015400);
	set_func_flags(0X71000153D4,0x1410);
	set_frame_size(0X71000153D4, 0X10, 16, 0);
	add_func    (0X7100015400,0X7100015408);
	set_func_flags(0X7100015400,0x1400);
	add_func    (0X7100015408,0X710001540C);
	set_func_flags(0X7100015408,0x1440);
	add_func    (0X710001540C,0X7100015410);
	set_func_flags(0X710001540C,0x1440);
	add_func    (0X7100015410,0X71000155EC);
	set_func_flags(0X7100015410,0x1410);
	SetType(0X7100015410, "__int64 __fastcall sub_7100015410(_BYTE *);");
	set_frame_size(0X7100015410, 0, 32, 0);
	add_func    (0X71000155EC,0X7100015640);
	set_func_flags(0X71000155EC,0x1410);
	set_frame_size(0X71000155EC, 0X20, 16, 0);
	add_func    (0X7100015640,0X710001564C);
	set_func_flags(0X7100015640,0x1400);
	add_func    (0X710001564C,0X7100015650);
	set_func_flags(0X710001564C,0x1440);
	add_func    (0X7100015650,0X7100015674);
	set_func_flags(0X7100015650,0x1410);
	set_frame_size(0X7100015650, 0, 16, 0);
	add_func    (0X7100015674,0X7100015680);
	set_func_flags(0X7100015674,0x1411);
	set_frame_size(0X7100015674, 0, 16, 0);
	add_func    (0X7100015708,0X7100015710);
	set_func_flags(0X7100015708,0x1400);
	add_func    (0X7100015710,0X7100015714);
	set_func_flags(0X7100015710,0x1440);
	add_func    (0X7100015714,0X7100015744);
	set_func_flags(0X7100015714,0x1410);
	set_frame_size(0X7100015714, 0X20, 0, 0);
	add_func    (0X7100015744,0X7100015778);
	set_func_flags(0X7100015744,0x1410);
	SetType(0X7100015744, "__int64 __fastcall sub_7100015744(__int64);");
	set_frame_size(0X7100015744, 0X20, 16, 0);
	add_func    (0X7100015778,0X7100015780);
	set_func_flags(0X7100015778,0x1400);
	add_func    (0X7100015780,0X7100015784);
	set_func_flags(0X7100015780,0x1440);
	add_func    (0X7100015784,0X71000157B4);
	set_func_flags(0X7100015784,0x1410);
	set_frame_size(0X7100015784, 0X20, 0, 0);
	add_func    (0X71000157B4,0X71000157CC);
	set_func_flags(0X71000157B4,0x1410);
	set_frame_size(0X71000157B4, 0, 16, 0);
	add_func    (0X71000157CC,0X71000158D4);
	set_func_flags(0X71000157CC,0x1410);
	set_frame_size(0X71000157CC, 0X30, 0, 0);
	add_func    (0X71000158D4,0X7100016728);
	set_func_flags(0X71000158D4,0x1400);
	set_frame_size(0X71000158D4, 0X100, 0, 0);
	add_func    (0X7100016728,0X7100016830);
	set_func_flags(0X7100016728,0x1410);
	set_frame_size(0X7100016728, 0X30, 0, 0);
	add_func    (0X7100016830,0X7100016B60);
	set_func_flags(0X7100016830,0x1410);
	set_frame_size(0X7100016830, 0XC0, 32, 0);
	add_func    (0X7100016B60,0X7100016C68);
	set_func_flags(0X7100016B60,0x1410);
	set_frame_size(0X7100016B60, 0X30, 0, 0);
	add_func    (0X7100016C68,0X7100016F98);
	set_func_flags(0X7100016C68,0x1410);
	set_frame_size(0X7100016C68, 0XC0, 32, 0);
	add_func    (0X7100016F98,0X71000170AC);
	set_func_flags(0X7100016F98,0x1410);
	set_frame_size(0X7100016F98, 0X30, 0, 0);
	add_func    (0X71000170AC,0X7100017250);
	set_func_flags(0X71000170AC,0x1410);
	set_frame_size(0X71000170AC, 0XC0, 32, 0);
	add_func    (0X7100017250,0X71000174C8);
	set_func_flags(0X7100017250,0x1410);
	set_frame_size(0X7100017250, 0XC0, 80, 0);
	add_func    (0X71000174C8,0X7100017698);
	set_func_flags(0X71000174C8,0x1410);
	set_frame_size(0X71000174C8, 0XE0, 32, 0);
	add_func    (0X7100017698,0X7100017868);
	set_func_flags(0X7100017698,0x1410);
	set_frame_size(0X7100017698, 0XE0, 32, 0);
	add_func    (0X7100017868,0X7100017970);
	set_func_flags(0X7100017868,0x1410);
	set_frame_size(0X7100017868, 0X30, 0, 0);
	add_func    (0X7100017970,0X7100017CFC);
	set_func_flags(0X7100017970,0x1410);
	set_frame_size(0X7100017970, 0XC0, 32, 0);
	add_func    (0X7100017EF0,0X71000181B8);
	set_func_flags(0X7100017EF0,0x1410);
	SetType(0X7100017EF0, "__int64 sub_7100017EF0();");
	set_frame_size(0X7100017EF0, 0, 48, 0);
	add_func    (0X71000181B8,0X7100018204);
	set_func_flags(0X71000181B8,0x1410);
	SetType(0X71000181B8, "__int64 __fastcall sub_71000181B8(_QWORD);");
	set_frame_size(0X71000181B8, 0X20, 0, 0);
	add_func    (0X710001821C,0X710001825C);
	set_func_flags(0X710001821C,0x1410);
	set_frame_size(0X710001821C, 0X20, 0, 0);
	add_func    (0X710001825C,0X710001829C);
	set_func_flags(0X710001825C,0x1410);
	set_frame_size(0X710001825C, 0X20, 0, 0);
	add_func    (0X710001829C,0X71000182DC);
	set_func_flags(0X710001829C,0x1410);
	set_frame_size(0X710001829C, 0X20, 0, 0);
	add_func    (0X71000182DC,0X710001831C);
	set_func_flags(0X71000182DC,0x1410);
	set_frame_size(0X71000182DC, 0X20, 0, 0);
	add_func    (0X710001831C,0X7100018460);
	set_func_flags(0X710001831C,0x1410);
	set_frame_size(0X710001831C, 0X40, 32, 0);
	add_func    (0X7100018460,0X71000186C4);
	set_func_flags(0X7100018460,0x1410);
	set_frame_size(0X7100018460, 0X90, 32, 0);
	add_func    (0X71000186CC,0X7100018734);
	set_func_flags(0X71000186CC,0x1410);
	set_frame_size(0X71000186CC, 0X20, 16, 0);
	add_func    (0X7100018734,0X710001873C);
	set_func_flags(0X7100018734,0x1400);
	add_func    (0X710001873C,0X7100018748);
	set_func_flags(0X710001873C,0x1400);
	add_func    (0X7100018748,0X710001874C);
	set_func_flags(0X7100018748,0x1440);
	add_func    (0X7100018754,0X71000187BC);
	set_func_flags(0X7100018754,0x1410);
	set_frame_size(0X7100018754, 0X20, 16, 0);
	add_func    (0X71000187BC,0X71000187C4);
	set_func_flags(0X71000187BC,0x1400);
	add_func    (0X71000187C4,0X71000187D0);
	set_func_flags(0X71000187C4,0x1400);
	add_func    (0X71000187D0,0X71000187D4);
	set_func_flags(0X71000187D0,0x1440);
	add_func    (0X71000187DC,0X7100018844);
	set_func_flags(0X71000187DC,0x1410);
	set_frame_size(0X71000187DC, 0X20, 16, 0);
	add_func    (0X7100018844,0X710001884C);
	set_func_flags(0X7100018844,0x1400);
	add_func    (0X710001884C,0X7100018850);
	set_func_flags(0X710001884C,0x1440);
	add_func    (0X7100018850,0X710001889C);
	set_func_flags(0X7100018850,0x1410);
	set_frame_size(0X7100018850, 0X8, 24, 0);
	add_func    (0X710001889C,0X71000188C4);
	set_func_flags(0X710001889C,0x1410);
	set_frame_size(0X710001889C, 0X20, 0, 0);
	add_func    (0X71000188C4,0X7100018910);
	set_func_flags(0X71000188C4,0x1410);
	set_frame_size(0X71000188C4, 0X8, 24, 0);
	add_func    (0X7100018910,0X7100018938);
	set_func_flags(0X7100018910,0x1410);
	set_frame_size(0X7100018910, 0X20, 0, 0);
	add_func    (0X7100018940,0X71000189F4);
	set_func_flags(0X7100018940,0x1410);
	SetType(0X7100018940, "void __fastcall sub_7100018940(__int64, int);");
	set_frame_size(0X7100018940, 0X20, 32, 0);
	add_func    (0X7100018A00,0X7100018A84);
	set_func_flags(0X7100018A00,0x1410);
	set_frame_size(0X7100018A00, 0X20, 32, 0);
	add_func    (0X7100018A90,0X7100018B44);
	set_func_flags(0X7100018A90,0x1410);
	set_frame_size(0X7100018A90, 0X20, 32, 0);
	add_func    (0X7100018B50,0X7100018BD4);
	set_func_flags(0X7100018B50,0x1410);
	set_frame_size(0X7100018B50, 0X20, 32, 0);
	add_func    (0X7100018BD4,0X7100018C2C);
	set_func_flags(0X7100018BD4,0x1410);
	set_frame_size(0X7100018BD4, 0X20, 16, 0);
	add_func    (0X7100018C2C,0X7100018C80);
	set_func_flags(0X7100018C2C,0x1410);
	set_frame_size(0X7100018C2C, 0X20, 16, 0);
	add_func    (0X7100018C80,0X7100018CD4);
	set_func_flags(0X7100018C80,0x1410);
	set_frame_size(0X7100018C80, 0X20, 16, 0);
	add_func    (0X7100018CD4,0X7100018D28);
	set_func_flags(0X7100018CD4,0x1410);
	set_frame_size(0X7100018CD4, 0X20, 16, 0);
	add_func    (0X7100018D28,0X7100018D80);
	set_func_flags(0X7100018D28,0x1410);
	set_frame_size(0X7100018D28, 0X20, 16, 0);
	add_func    (0X7100018D80,0X7100018DE0);
	set_func_flags(0X7100018D80,0x1410);
	set_frame_size(0X7100018D80, 0X20, 16, 0);
	add_func    (0X7100018DE0,0X7100018E54);
	set_func_flags(0X7100018DE0,0x1410);
	SetType(0X7100018DE0, "_QWORD *sub_7100018DE0();");
	set_frame_size(0X7100018DE0, 0X20, 0, 0);
	add_func    (0X7100018E54,0X7100018EA8);
	set_func_flags(0X7100018E54,0x1410);
	set_frame_size(0X7100018E54, 0X20, 0, 0);
	add_func    (0X7100018EA8,0X7100018F04);
	set_func_flags(0X7100018EA8,0x1410);
	set_frame_size(0X7100018EA8, 0X20, 0, 0);
	add_func    (0X7100018F04,0X7100019024);
	set_func_flags(0X7100018F04,0x1410);
	set_frame_size(0X7100018F04, 0X50, 16, 0);
	add_func    (0X7100019024,0X7100019080);
	set_func_flags(0X7100019024,0x1410);
	set_frame_size(0X7100019024, 0, 32, 0);
	add_func    (0X7100019080,0X71000190E0);
	set_func_flags(0X7100019080,0x1410);
	set_frame_size(0X7100019080, 0X20, 0, 0);
	add_func    (0X71000190E0,0X7100019164);
	set_func_flags(0X71000190E0,0x1410);
	set_frame_size(0X71000190E0, 0X20, 16, 0);
	add_func    (0X7100019164,0X710001916C);
	set_func_flags(0X7100019164,0x1400);
	add_func    (0X710001916C,0X7100019200);
	set_func_flags(0X710001916C,0x1410);
	set_frame_size(0X710001916C, 0X20, 16, 0);
	add_func    (0X7100019200,0X710001936C);
	set_func_flags(0X7100019200,0x1410);
	set_frame_size(0X7100019200, 0, 48, 0);
	add_func    (0X710001936C,0X710001947C);
	set_func_flags(0X710001936C,0x1410);
	set_frame_size(0X710001936C, 0, 48, 0);
	add_func    (0X710001947C,0X71000195A4);
	set_func_flags(0X710001947C,0x1410);
	set_frame_size(0X710001947C, 0, 48, 0);
	add_func    (0X71000195A4,0X71000195BC);
	set_func_flags(0X71000195A4,0x1400);
	add_func    (0X71000195C0,0X710001964C);
	set_func_flags(0X71000195C0,0x1410);
	set_frame_size(0X71000195C0, 0, 32, 0);
	add_func    (0X710001964C,0X7100019698);
	set_func_flags(0X710001964C,0x1410);
	SetType(0X710001964C, "__int64 __fastcall sub_710001964C(_QWORD);");
	set_frame_size(0X710001964C, 0X20, 0, 0);
	add_func    (0X71000196B0,0X7100019944);
	set_func_flags(0X71000196B0,0x1410);
	set_frame_size(0X71000196B0, 0X60, 64, 0);
	add_func    (0X710001994C,0X71000199B4);
	set_func_flags(0X710001994C,0x1410);
	set_frame_size(0X710001994C, 0X20, 16, 0);
	add_func    (0X71000199B4,0X71000199BC);
	set_func_flags(0X71000199B4,0x1400);
	add_func    (0X71000199BC,0X71000199C4);
	set_func_flags(0X71000199BC,0x1400);
	add_func    (0X71000199C4,0X71000199CC);
	set_func_flags(0X71000199C4,0x1400);
	add_func    (0X71000199CC,0X71000199D4);
	set_func_flags(0X71000199CC,0x1400);
	add_func    (0X71000199D4,0X71000199D8);
	set_func_flags(0X71000199D4,0x1440);
	add_func    (0X71000199E0,0X7100019A48);
	set_func_flags(0X71000199E0,0x1410);
	set_frame_size(0X71000199E0, 0X20, 16, 0);
	add_func    (0X7100019A48,0X7100019A58);
	set_func_flags(0X7100019A48,0x1400);
	add_func    (0X7100019A58,0X7100019A5C);
	set_func_flags(0X7100019A58,0x1440);
	SetType(0X7100019A58, "void nullsub_80();");
	add_func    (0X7100019A5C,0X7100019AD0);
	set_func_flags(0X7100019A5C,0x1410);
	SetType(0X7100019A5C, "void __fastcall sub_7100019A5C(_QWORD *, __int64 (__fastcall ***)(_QWORD), unsigned int);");
	set_frame_size(0X7100019A5C, 0X20, 16, 0);
	add_func    (0X7100019AD0,0X7100019B3C);
	set_func_flags(0X7100019AD0,0x1410);
	SetType(0X7100019AD0, "__int64 __fastcall sub_7100019AD0(__int64 *);");
	set_frame_size(0X7100019AD0, 0, 32, 0);
	add_func    (0X7100019B3C,0X7100019B68);
	set_func_flags(0X7100019B3C,0x1410);
	SetType(0X7100019B3C, "__int64 __fastcall sub_7100019B3C(__int64, float);");
	set_frame_size(0X7100019B3C, 0, 16, 0);
	add_func    (0X7100019B68,0X7100019B94);
	set_func_flags(0X7100019B68,0x1410);
	SetType(0X7100019B68, "__int64 __fastcall sub_7100019B68(__int64, float);");
	set_frame_size(0X7100019B68, 0, 16, 0);
	add_func    (0X7100019B94,0X7100019BC0);
	set_func_flags(0X7100019B94,0x1410);
	SetType(0X7100019B94, "__int64 __fastcall sub_7100019B94(__int64, int);");
	set_frame_size(0X7100019B94, 0, 16, 0);
	add_func    (0X7100019BC0,0X7100019BEC);
	set_func_flags(0X7100019BC0,0x1410);
	set_frame_size(0X7100019BC0, 0, 16, 0);
	add_func    (0X7100019BF0,0X7100019C28);
	set_func_flags(0X7100019BF0,0x1410);
	SetType(0X7100019BF0, "int *sub_7100019BF0();");
	set_frame_size(0X7100019BF0, 0, 16, 0);
	add_func    (0X7100019C30,0X7100019CD0);
	set_func_flags(0X7100019C30,0x1410);
	SetType(0X7100019C30, "void __fastcall sub_7100019C30(__int64, __int64 *);");
	set_frame_size(0X7100019C30, 0, 32, 0);
	add_func    (0X7100019CD0,0X7100019D20);
	set_func_flags(0X7100019CD0,0x1410);
	SetType(0X7100019CD0, "void __fastcall sub_7100019CD0(nn::os::SdkMutexType *, nn::os::SdkMutexType *);");
	set_frame_size(0X7100019CD0, 0, 32, 0);
	add_func    (0X7100019D20,0X7100019D8C);
	set_func_flags(0X7100019D20,0x1410);
	SetType(0X7100019D20, "__int64 __fastcall sub_7100019D20(_QWORD);");
	set_frame_size(0X7100019D20, 0X20, 0, 0);
	add_func    (0X7100019D90,0X7100019DFC);
	set_func_flags(0X7100019D90,0x1410);
	SetType(0X7100019D90, "__int64 __fastcall sub_7100019D90(_QWORD);");
	set_frame_size(0X7100019D90, 0X20, 0, 0);
	add_func    (0X7100019E00,0X7100019E6C);
	set_func_flags(0X7100019E00,0x1410);
	SetType(0X7100019E00, "__int64 __fastcall sub_7100019E00(_QWORD);");
	set_frame_size(0X7100019E00, 0X20, 0, 0);
	add_func    (0X7100019E70,0X7100019EDC);
	set_func_flags(0X7100019E70,0x1410);
	SetType(0X7100019E70, "__int64 __fastcall sub_7100019E70(_QWORD);");
	set_frame_size(0X7100019E70, 0X20, 0, 0);
	add_func    (0X7100019EE0,0X7100019F14);
	set_func_flags(0X7100019EE0,0x1400);
	add_func    (0X7100019F20,0X7100019F70);
	set_func_flags(0X7100019F20,0x1410);
	SetType(0X7100019F20, "__int64 __fastcall sub_7100019F20(_QWORD, _QWORD);");
	set_frame_size(0X7100019F20, 0, 16, 0);
	add_func    (0X7100019F70,0X7100019F78);
	set_func_flags(0X7100019F70,0x1400);
	add_func    (0X7100019F80,0X7100019FF4);
	set_func_flags(0X7100019F80,0x1410);
	SetType(0X7100019F80, "__int64 __fastcall sub_7100019F80(_QWORD);");
	set_frame_size(0X7100019F80, 0X20, 0, 0);
	add_func    (0X710001A000,0X710001A074);
	set_func_flags(0X710001A000,0x1410);
	SetType(0X710001A000, "__int64 __fastcall sub_710001A000(_QWORD);");
	set_frame_size(0X710001A000, 0X20, 0, 0);
	add_func    (0X710001A074,0X710001A0C8);
	set_func_flags(0X710001A074,0x1410);
	set_frame_size(0X710001A074, 0X20, 0, 0);
	add_func    (0X710001A0C8,0X710001A124);
	set_func_flags(0X710001A0C8,0x1410);
	set_frame_size(0X710001A0C8, 0X20, 0, 0);
	add_func    (0X710001A124,0X710001A244);
	set_func_flags(0X710001A124,0x1410);
	SetType(0X710001A124, "__int64 __fastcall sub_710001A124(__int64, unsigned int *);");
	set_frame_size(0X710001A124, 0X50, 16, 0);
	add_func    (0X710001A244,0X710001A2AC);
	set_func_flags(0X710001A244,0x1410);
	SetType(0X710001A244, "void __fastcall sub_710001A244(_QWORD *, __int64 (__fastcall ***)(_QWORD), unsigned int);");
	set_frame_size(0X710001A244, 0X20, 16, 0);
	add_func    (0X710001A2AC,0X710001A300);
	set_func_flags(0X710001A2AC,0x1410);
	SetType(0X710001A2AC, "__int64 __fastcall sub_710001A2AC(__int64 *);");
	set_frame_size(0X710001A2AC, 0, 32, 0);
	add_func    (0X710001A300,0X710001A324);
	set_func_flags(0X710001A300,0x1410);
	SetType(0X710001A300, "__int64 __fastcall sub_710001A300(__int64, int, int);");
	set_frame_size(0X710001A300, 0, 16, 0);
	add_func    (0X710001A330,0X710001A368);
	set_func_flags(0X710001A330,0x1410);
	SetType(0X710001A330, "int *sub_710001A330();");
	set_frame_size(0X710001A330, 0, 16, 0);
	add_func    (0X710001A370,0X710001A410);
	set_func_flags(0X710001A370,0x1410);
	SetType(0X710001A370, "void __fastcall sub_710001A370(__int64, __int64 *);");
	set_frame_size(0X710001A370, 0, 32, 0);
	add_func    (0X710001A410,0X710001A460);
	set_func_flags(0X710001A410,0x1410);
	SetType(0X710001A410, "__int64 __fastcall sub_710001A410(_QWORD, _QWORD);");
	set_frame_size(0X710001A410, 0, 32, 0);
	add_func    (0X710001A460,0X710001A4E8);
	set_func_flags(0X710001A460,0x1410);
	SetType(0X710001A460, "__int64 __fastcall sub_710001A460(_QWORD);");
	set_frame_size(0X710001A460, 0X20, 0, 0);
	add_func    (0X710001A4F0,0X710001A580);
	set_func_flags(0X710001A4F0,0x1410);
	set_frame_size(0X710001A4F0, 0, 64, 0);
	add_func    (0X710001A580,0X710001A5B8);
	set_func_flags(0X710001A580,0x1410);
	set_frame_size(0X710001A580, 0, 32, 0);
	add_func    (0X710001A5B8,0X710001A610);
	set_func_flags(0X710001A5B8,0x1410);
	set_frame_size(0X710001A5B8, 0X20, 16, 0);
	add_func    (0X710001A610,0X710001A670);
	set_func_flags(0X710001A610,0x1410);
	set_frame_size(0X710001A610, 0X20, 16, 0);
	add_func    (0X710001A670,0X710001A6D8);
	set_func_flags(0X710001A670,0x1410);
	SetType(0X710001A670, "__int64 sub_710001A670(void);");
	set_frame_size(0X710001A670, 0X20, 0, 0);
	add_func    (0X710001A6D8,0X710001A70C);
	set_func_flags(0X710001A6D8,0x1410);
	set_frame_size(0X710001A6D8, 0X20, 0, 0);
	add_func    (0X710001A70C,0X710001A714);
	set_func_flags(0X710001A70C,0x1400);
	add_func    (0X710001A714,0X710001A71C);
	set_func_flags(0X710001A714,0x1400);
	add_func    (0X710001A720,0X710001A8C8);
	set_func_flags(0X710001A720,0x1410);
	SetType(0X710001A720, "__int64 sub_710001A720();");
	set_frame_size(0X710001A720, 0X10, 32, 0);
	add_func    (0X710001A8D0,0X710001AA90);
	set_func_flags(0X710001A8D0,0x1410);
	set_frame_size(0X710001A8D0, 0X20, 16, 0);
	add_func    (0X710001AE00,0X710001AFB8);
	set_func_flags(0X710001AE00,0x1410);
	SetType(0X710001AE00, "__int64 sub_710001AE00();");
	set_frame_size(0X710001AE00, 0X20, 16, 0);
	add_func    (0X710001AFB8,0X710001AFBC);
	set_func_flags(0X710001AFB8,0x1440);
	add_func    (0X710001AFBC,0X710001AFC0);
	set_func_flags(0X710001AFBC,0x1440);
	add_func    (0X710001AFC0,0X710001AFC8);
	set_func_flags(0X710001AFC0,0x1400);
	set_frame_size(0X710001AFC0, 0X30, 0, 0);
	add_func    (0X710001AFC8,0X710001AFD0);
	set_func_flags(0X710001AFC8,0x1400);
	add_func    (0X710001AFD0,0X710001AFD4);
	set_func_flags(0X710001AFD0,0x1440);
	add_func    (0X710001AFD4,0X710001AFD8);
	set_func_flags(0X710001AFD4,0x1440);
	add_func    (0X710001AFD8,0X710001AFDC);
	set_func_flags(0X710001AFD8,0x1440);
	add_func    (0X710001AFDC,0X710001AFE0);
	set_func_flags(0X710001AFDC,0x1440);
	add_func    (0X710001AFE0,0X710001AFE8);
	set_func_flags(0X710001AFE0,0x1400);
	add_func    (0X710001AFE8,0X710001AFEC);
	set_func_flags(0X710001AFE8,0x1440);
	add_func    (0X710001AFEC,0X710001AFF0);
	set_func_flags(0X710001AFEC,0x1440);
	add_func    (0X710001AFF0,0X710001B144);
	set_func_flags(0X710001AFF0,0x1410);
	SetType(0X710001AFF0, "__int64 __fastcall sub_710001AFF0(_QWORD);");
	set_frame_size(0X710001AFF0, 0X20, 16, 0);
	add_func    (0X710001B144,0X710001B248);
	set_func_flags(0X710001B144,0x1410);
	set_frame_size(0X710001B144, 0X20, 0, 0);
	add_func    (0X710001B248,0X710001B348);
	set_func_flags(0X710001B248,0x1410);
	set_frame_size(0X710001B248, 0, 32, 0);
	add_func    (0X710001B348,0X710001B39C);
	set_func_flags(0X710001B348,0x1410);
	set_frame_size(0X710001B348, 0X20, 16, 0);
	add_func    (0X710001B39C,0X710001B3C4);
	set_func_flags(0X710001B39C,0x1400);
	add_func    (0X710001B3C4,0X710001B3C8);
	set_func_flags(0X710001B3C4,0x1440);
	add_func    (0X710001B3C8,0X710001B3EC);
	set_func_flags(0X710001B3C8,0x1410);
	set_frame_size(0X710001B3C8, 0, 16, 0);
	add_func    (0X710001B3EC,0X710001B3F8);
	set_func_flags(0X710001B3EC,0x1411);
	set_frame_size(0X710001B3EC, 0, 16, 0);
	add_func    (0X710001B480,0X710001B488);
	set_func_flags(0X710001B480,0x1400);
	add_func    (0X710001B488,0X710001B48C);
	set_func_flags(0X710001B488,0x1440);
	add_func    (0X710001B48C,0X710001B4BC);
	set_func_flags(0X710001B48C,0x1410);
	set_frame_size(0X710001B48C, 0X20, 0, 0);
	add_func    (0X710001B4BC,0X710001B4F0);
	set_func_flags(0X710001B4BC,0x1410);
	set_frame_size(0X710001B4BC, 0X20, 16, 0);
	add_func    (0X710001B4F0,0X710001B4FC);
	set_func_flags(0X710001B4F0,0x1400);
	add_func    (0X710001B4FC,0X710001B500);
	set_func_flags(0X710001B4FC,0x1440);
	add_func    (0X710001B500,0X710001B530);
	set_func_flags(0X710001B500,0x1410);
	set_frame_size(0X710001B500, 0X20, 0, 0);
	add_func    (0X710001B530,0X710001B54C);
	set_func_flags(0X710001B530,0x1410);
	set_frame_size(0X710001B530, 0, 16, 0);
	add_func    (0X710001B54C,0X710001B688);
	set_func_flags(0X710001B54C,0x1410);
	set_frame_size(0X710001B54C, 0X30, 0, 0);
	add_func    (0X710001B688,0X710001B808);
	set_func_flags(0X710001B688,0x1410);
	set_frame_size(0X710001B688, 0XB0, 64, 0);
	add_func    (0X710001B808,0X710001B9AC);
	set_func_flags(0X710001B808,0x1410);
	set_frame_size(0X710001B808, 0XC0, 32, 0);
	add_func    (0X710001B9AC,0X710001BAC0);
	set_func_flags(0X710001B9AC,0x1410);
	set_frame_size(0X710001B9AC, 0X30, 0, 0);
	add_func    (0X710001BAC0,0X710001BC64);
	set_func_flags(0X710001BAC0,0x1410);
	set_frame_size(0X710001BAC0, 0XC0, 32, 0);
	add_func    (0X710001BC70,0X710001BD14);
	set_func_flags(0X710001BC70,0x1410);
	set_frame_size(0X710001BC70, 0, 32, 0);
	add_func    (0X710001BD14,0X710001BD28);
	set_func_flags(0X710001BD14,0x1400);
	add_func    (0X710001BDA8,0X710001BE4C);
	set_func_flags(0X710001BDA8,0x1410);
	set_frame_size(0X710001BDA8, 0X20, 16, 0);
	add_func    (0X710001BE4C,0X710001BE60);
	set_func_flags(0X710001BE4C,0x1400);
	add_func    (0X710001BE64,0X710001BF08);
	set_func_flags(0X710001BE64,0x1410);
	set_frame_size(0X710001BE64, 0X20, 16, 0);
	add_func    (0X710001BF08,0X710001BF10);
	set_func_flags(0X710001BF08,0x1400);
	add_func    (0X710001BF10,0X710001BF14);
	set_func_flags(0X710001BF10,0x1440);
	add_func    (0X710001BF14,0X710001C3D4);
	set_func_flags(0X710001BF14,0x1410);
	SetType(0X710001BF14, "__int64 __fastcall sub_710001BF14(__int64);");
	set_frame_size(0X710001BF14, 0, 64, 0);
	add_func    (0X710001C44C,0X710001C8A0);
	set_func_flags(0X710001C44C,0x1410);
	set_frame_size(0X710001C44C, 0, 80, 0);
	add_func    (0X710001C8A0,0X710001C9FC);
	set_func_flags(0X710001C8A0,0x1410);
	set_frame_size(0X710001C8A0, 0, 48, 0);
	add_func    (0X710001C9FC,0X710001CAAC);
	set_func_flags(0X710001C9FC,0x1410);
	set_frame_size(0X710001C9FC, 0, 48, 0);
	add_func    (0X710001CAB0,0X710001CC60);
	set_func_flags(0X710001CAB0,0x1410);
	set_frame_size(0X710001CAB0, 0X10, 48, 0);
	add_func    (0X710001CC60,0X710001CCD0);
	set_func_flags(0X710001CC60,0x1400);
	add_func    (0X710001CCD0,0X710001CD30);
	set_func_flags(0X710001CCD0,0x1400);
	add_func    (0X710001CD30,0X710001CDB4);
	set_func_flags(0X710001CD30,0x1410);
	set_frame_size(0X710001CD30, 0, 32, 0);
	add_func    (0X710001CDC0,0X710001CDEC);
	set_func_flags(0X710001CDC0,0x1400);
	add_func    (0X710001CDF0,0X710001CE5C);
	set_func_flags(0X710001CDF0,0x1400);
	add_func    (0X710001CE60,0X710001CF38);
	set_func_flags(0X710001CE60,0x1410);
	set_frame_size(0X710001CE60, 0, 32, 0);
	add_func    (0X710001CF40,0X710001D04C);
	set_func_flags(0X710001CF40,0x1410);
	SetType(0X710001CF40, "__int64 __fastcall sub_710001CF40(__int64);");
	set_frame_size(0X710001CF40, 0X20, 32, 0);
	add_func    (0X710001D050,0X710001D05C);
	set_func_flags(0X710001D050,0x1400);
	SetType(0X710001D050, "__int64 sub_710001D050();");
	add_func    (0X710001D05C,0X710001D5E8);
	set_func_flags(0X710001D05C,0x1410);
	set_frame_size(0X710001D05C, 0X20, 16, 0);
	add_func    (0X710001D5E8,0X710001D640);
	set_func_flags(0X710001D5E8,0x1410);
	set_frame_size(0X710001D5E8, 0X20, 16, 0);
	add_func    (0X710001D640,0X710001D64C);
	set_func_flags(0X710001D640,0x1400);
	add_func    (0X710001D64C,0X710001D650);
	set_func_flags(0X710001D64C,0x1440);
	add_func    (0X710001D650,0X710001D674);
	set_func_flags(0X710001D650,0x1410);
	set_frame_size(0X710001D650, 0, 16, 0);
	add_func    (0X710001D674,0X710001D86C);
	set_func_flags(0X710001D674,0x1410);
	set_frame_size(0X710001D674, 0X30, 32, 0);
	add_func    (0X710001D86C,0X710001D908);
	set_func_flags(0X710001D86C,0x1410);
	set_frame_size(0X710001D86C, 0, 32, 0);
	add_func    (0X710001D908,0X710001D910);
	set_func_flags(0X710001D908,0x1400);
	add_func    (0X710001D910,0X710001D914);
	set_func_flags(0X710001D910,0x1440);
	add_func    (0X710001D914,0X710001DCF4);
	set_func_flags(0X710001D914,0x1410);
	set_frame_size(0X710001D914, 0X20, 16, 0);
	add_func    (0X710001DCF4,0X710001DD50);
	set_func_flags(0X710001DCF4,0x1410);
	set_frame_size(0X710001DCF4, 0X20, 16, 0);
	add_func    (0X710001DD50,0X710001DE30);
	set_func_flags(0X710001DD50,0x1410);
	set_frame_size(0X710001DD50, 0, 32, 0);
	add_func    (0X710001DE30,0X710001DE3C);
	set_func_flags(0X710001DE30,0x1400);
	add_func    (0X710001DE3C,0X710001DE40);
	set_func_flags(0X710001DE3C,0x1440);
	add_func    (0X710001DE40,0X710001DE48);
	set_func_flags(0X710001DE40,0x1400);
	add_func    (0X710001DE48,0X710001DEA4);
	set_func_flags(0X710001DE48,0x1410);
	set_frame_size(0X710001DE48, 0X20, 16, 0);
	add_func    (0X710001DEA4,0X710001DEB0);
	set_func_flags(0X710001DEA4,0x1400);
	add_func    (0X710001DEB0,0X710001DEB8);
	set_func_flags(0X710001DEB0,0x1400);
	add_func    (0X710001DEB8,0X710001DF10);
	set_func_flags(0X710001DEB8,0x1410);
	set_frame_size(0X710001DEB8, 0, 32, 0);
	add_func    (0X710001DF10,0X710001DF18);
	set_func_flags(0X710001DF10,0x1400);
	add_func    (0X710001DF18,0X710001DF24);
	set_func_flags(0X710001DF18,0x1400);
	add_func    (0X710001DF24,0X710001DF2C);
	set_func_flags(0X710001DF24,0x1400);
	add_func    (0X710001DF2C,0X710001DF34);
	set_func_flags(0X710001DF2C,0x1400);
	add_func    (0X710001DF34,0X710001DF3C);
	set_func_flags(0X710001DF34,0x1400);
	add_func    (0X710001DF3C,0X710001DF44);
	set_func_flags(0X710001DF3C,0x1400);
	set_frame_size(0X710001DF3C, 0X50, 0, 0);
	add_func    (0X710001DF44,0X710001DF4C);
	set_func_flags(0X710001DF44,0x1400);
	add_func    (0X710001DF4C,0X710001DF54);
	set_func_flags(0X710001DF4C,0x1400);
	add_func    (0X710001DF54,0X710001DF5C);
	set_func_flags(0X710001DF54,0x1400);
	add_func    (0X710001DF5C,0X710001DFC4);
	set_func_flags(0X710001DF5C,0x1410);
	set_frame_size(0X710001DF5C, 0X20, 16, 0);
	add_func    (0X710001DFC4,0X710001E0CC);
	set_func_flags(0X710001DFC4,0x1410);
	set_frame_size(0X710001DFC4, 0X30, 0, 0);
	add_func    (0X710001E0CC,0X710001ED84);
	set_func_flags(0X710001E0CC,0x1410);
	set_frame_size(0X710001E0CC, 0X120, 32, 0);
	add_func    (0X710001ED84,0X710001ED8C);
	set_func_flags(0X710001ED84,0x1400);
	add_func    (0X710001ED8C,0X710001EDD8);
	set_func_flags(0X710001ED8C,0x1410);
	set_frame_size(0X710001ED8C, 0X20, 0, 0);
	add_func    (0X710001EDD8,0X710001EF08);
	set_func_flags(0X710001EDD8,0x1410);
	set_frame_size(0X710001EDD8, 0, 48, 0);
	add_func    (0X710001EF08,0X710001EF10);
	set_func_flags(0X710001EF08,0x1400);
	add_func    (0X710001EF10,0X710001EF5C);
	set_func_flags(0X710001EF10,0x1410);
	set_frame_size(0X710001EF10, 0X20, 0, 0);
	add_func    (0X710001EF5C,0X710001EF64);
	set_func_flags(0X710001EF5C,0x1400);
	add_func    (0X710001EF64,0X710001EFBC);
	set_func_flags(0X710001EF64,0x1410);
	set_frame_size(0X710001EF64, 0, 32, 0);
	add_func    (0X710001EFBC,0X710001EFC4);
	set_func_flags(0X710001EFBC,0x1400);
	SetType(0X710001EFBC, "__int64 __fastcall sub_710001EFBC(__int64, unsigned int *, int, _QWORD *);");
	set_frame_size(0X710001EFBC, 0X40, 0, 0);
	add_func    (0X710001EFC4,0X710001EFCC);
	set_func_flags(0X710001EFC4,0x1400);
	set_frame_size(0X710001EFC4, 0X30, 0, 0);
	add_func    (0X710001EFCC,0X710001EFD4);
	set_func_flags(0X710001EFCC,0x1401);
	add_func    (0X710001EFD4,0X710001EFDC);
	set_func_flags(0X710001EFD4,0x1400);
	add_func    (0X710001EFDC,0X710001EFE4);
	set_func_flags(0X710001EFDC,0x1400);
	add_func    (0X710001EFE4,0X710001EFEC);
	set_func_flags(0X710001EFE4,0x1400);
	add_func    (0X710001EFEC,0X710001F054);
	set_func_flags(0X710001EFEC,0x1410);
	set_frame_size(0X710001EFEC, 0X20, 16, 0);
	add_func    (0X710001F054,0X710001F058);
	set_func_flags(0X710001F054,0x1440);
	add_func    (0X710001F058,0X710001F16C);
	set_func_flags(0X710001F058,0x1410);
	set_frame_size(0X710001F058, 0X30, 0, 0);
	add_func    (0X710001F16C,0X710001F340);
	set_func_flags(0X710001F16C,0x1410);
	set_frame_size(0X710001F16C, 0XE0, 32, 0);
	add_func    (0X710001F340,0X710001F448);
	set_func_flags(0X710001F340,0x1410);
	set_frame_size(0X710001F340, 0X30, 0, 0);
	add_func    (0X710001F448,0X710001FB04);
	set_func_flags(0X710001F448,0x1410);
	set_frame_size(0X710001F448, 0XD0, 32, 0);
	add_func    (0X710001FB04,0X710001FB0C);
	set_func_flags(0X710001FB04,0x1400);
	add_func    (0X710001FB0C,0X710001FB64);
	set_func_flags(0X710001FB0C,0x1410);
	set_frame_size(0X710001FB0C, 0, 32, 0);
	add_func    (0X710001FB64,0X710001FB6C);
	set_func_flags(0X710001FB64,0x1400);
	set_frame_size(0X710001FB64, 0X20, 0, 0);
	add_func    (0X710001FB6C,0X710001FB74);
	set_func_flags(0X710001FB6C,0x1400);
	add_func    (0X710001FB74,0X710001FB7C);
	set_func_flags(0X710001FB74,0x1400);
	add_func    (0X710001FB7C,0X710001FB84);
	set_func_flags(0X710001FB7C,0x1400);
	add_func    (0X710001FB84,0X710001FB8C);
	set_func_flags(0X710001FB84,0x1400);
	add_func    (0X710001FB8C,0X710001FC94);
	set_func_flags(0X710001FB8C,0x1410);
	set_frame_size(0X710001FB8C, 0X30, 0, 0);
	add_func    (0X710001FC94,0X71000202C0);
	set_func_flags(0X710001FC94,0x1410);
	set_frame_size(0X710001FC94, 0XC0, 32, 0);
	add_func    (0X71000202C0,0X71000202C4);
	set_func_flags(0X71000202C0,0x1480);
	add_func    (0X71000202D0,0X7100020818);
	set_func_flags(0X71000202D0,0x1410);
	set_frame_size(0X71000202D0, 0X20, 16, 0);
	add_func    (0X7100020818,0X710002089C);
	set_func_flags(0X7100020818,0x1410);
	SetType(0X7100020818, "__int64 __fastcall sub_7100020818(__int64, unsigned int *);");
	set_frame_size(0X7100020818, 0X20, 16, 0);
	add_func    (0X71000208BC,0X710002090C);
	set_func_flags(0X71000208BC,0x1410);
	set_frame_size(0X71000208BC, 0X20, 0, 0);
	add_func    (0X7100020A08,0X7100020A50);
	set_func_flags(0X7100020A08,0x1410);
	set_frame_size(0X7100020A08, 0X20, 0, 0);
	add_func    (0X7100020A50,0X7100020A84);
	set_func_flags(0X7100020A50,0x1410);
	set_frame_size(0X7100020A50, 0X20, 0, 0);
	add_func    (0X7100020A84,0X7100020AA4);
	set_func_flags(0X7100020A84,0x1400);
	add_func    (0X7100020AA4,0X7100020AF4);
	set_func_flags(0X7100020AA4,0x1410);
	set_frame_size(0X7100020AA4, 0X20, 0, 0);
	add_func    (0X7100020B00,0X7100020B3C);
	set_func_flags(0X7100020B00,0x1410);
	set_frame_size(0X7100020B00, 0X20, 0, 0);
	add_func    (0X7100020B40,0X7100020C10);
	set_func_flags(0X7100020B40,0x1410);
	SetType(0X7100020B40, "__int64 __fastcall sub_7100020B40(__int64);");
	set_frame_size(0X7100020B40, 0X20, 32, 0);
	add_func    (0X7100020C10,0X7100020CC8);
	set_func_flags(0X7100020C10,0x1410);
	SetType(0X7100020C10, "__int64 __fastcall sub_7100020C10(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100020C10, 0X10, 48, 0);
	add_func    (0X7100020CD0,0X7100020E40);
	set_func_flags(0X7100020CD0,0x1410);
	SetType(0X7100020CD0, "__int64 __fastcall sub_7100020CD0(__int64, unsigned int, unsigned int, unsigned int);");
	set_frame_size(0X7100020CD0, 0, 96, 0);
	add_func    (0X7100020E40,0X7100021010);
	set_func_flags(0X7100020E40,0x1410);
	SetType(0X7100020E40, "__int64 __fastcall sub_7100020E40(__int64);");
	set_frame_size(0X7100020E40, 0X20, 96, 0);
	add_func    (0X7100021010,0X710002105C);
	set_func_flags(0X7100021010,0x1410);
	SetType(0X7100021010, "__int64 __fastcall sub_7100021010(_DWORD *, int, int, int);");
	set_frame_size(0X7100021010, 0X20, 0, 0);
	add_func    (0X7100021060,0X7100021268);
	set_func_flags(0X7100021060,0x1410);
	set_frame_size(0X7100021060, 0X10, 96, 0);
	add_func    (0X7100021268,0X7100021278);
	set_func_flags(0X7100021268,0x1400);
	add_func    (0X7100021280,0X710002129C);
	set_func_flags(0X7100021280,0x1410);
	set_frame_size(0X7100021280, 0, 16, 0);
	add_func    (0X710002129C,0X7100021360);
	set_func_flags(0X710002129C,0x1410);
	SetType(0X710002129C, "__int64 __fastcall sub_710002129C(__int64, _QWORD *);");
	set_frame_size(0X710002129C, 0X20, 16, 0);
	add_func    (0X7100021360,0X7100021364);
	set_func_flags(0X7100021360,0x1480);
	add_func    (0X7100021364,0X71000213C4);
	set_func_flags(0X7100021364,0x1410);
	set_frame_size(0X7100021364, 0, 32, 0);
	add_func    (0X71000213C4,0X7100021460);
	set_func_flags(0X71000213C4,0x1410);
	set_frame_size(0X71000213C4, 0X30, 0, 0);
	add_func    (0X7100021460,0X71000214F8);
	set_func_flags(0X7100021460,0x1410);
	set_frame_size(0X7100021460, 0, 32, 0);
	add_func    (0X71000214F8,0X71000214FC);
	set_func_flags(0X71000214F8,0x14c0);
	SetType(0X71000214F8, "void __fastcall nn__os__FinalizeMutex(_BYTE *result);");
	add_func    (0X7100021500,0X7100021574);
	set_func_flags(0X7100021500,0x1410);
	SetType(0X7100021500, "void **__fastcall sub_7100021500(int);");
	set_frame_size(0X7100021500, 0, 32, 0);
	add_func    (0X7100021580,0X71000215E4);
	set_func_flags(0X7100021580,0x1410);
	set_frame_size(0X7100021580, 0X20, 16, 0);
	add_func    (0X71000215F0,0X7100021698);
	set_func_flags(0X71000215F0,0x1410);
	set_frame_size(0X71000215F0, 0X20, 16, 0);
	add_func    (0X71000216A0,0X7100021754);
	set_func_flags(0X71000216A0,0x1410);
	set_frame_size(0X71000216A0, 0X20, 32, 0);
	add_func    (0X7100021760,0X71000217E4);
	set_func_flags(0X7100021760,0x1410);
	set_frame_size(0X7100021760, 0, 48, 0);
	add_func    (0X71000217F0,0X7100021874);
	set_func_flags(0X71000217F0,0x1410);
	set_frame_size(0X71000217F0, 0, 48, 0);
	add_func    (0X7100021880,0X71000219A0);
	set_func_flags(0X7100021880,0x1410);
	set_frame_size(0X7100021880, 0X20, 64, 0);
	add_func    (0X71000219A0,0X7100021AC0);
	set_func_flags(0X71000219A0,0x1410);
	set_frame_size(0X71000219A0, 0X20, 64, 0);
	add_func    (0X7100021AC0,0X7100021AF8);
	set_func_flags(0X7100021AC0,0x1400);
	SetType(0X7100021AC0, "__int64 __fastcall sub_7100021AC0(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);");
	add_func    (0X7100021AF8,0X7100021B10);
	set_func_flags(0X7100021AF8,0x1400);
	add_func    (0X7100021B10,0X7100021B78);
	set_func_flags(0X7100021B10,0x1410);
	set_frame_size(0X7100021B10, 0X20, 16, 0);
	add_func    (0X7100021B78,0X7100021B80);
	set_func_flags(0X7100021B78,0x1400);
	SetType(0X7100021B78, "__int64 __fastcall sub_7100021B78(__int64);");
	add_func    (0X7100021B80,0X7100021F88);
	set_func_flags(0X7100021B80,0x1410);
	SetType(0X7100021B80, "__int64 __fastcall sub_7100021B80(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100021B80, 0X20, 96, 0);
	add_func    (0X7100021F90,0X7100022088);
	set_func_flags(0X7100021F90,0x1410);
	SetType(0X7100021F90, "__int64 __fastcall sub_7100021F90(__int64);");
	set_frame_size(0X7100021F90, 0X20, 32, 0);
	add_func    (0X7100022088,0X7100022150);
	set_func_flags(0X7100022088,0x1410);
	SetType(0X7100022088, "__int64 __fastcall sub_7100022088(__int64 *, int);");
	set_frame_size(0X7100022088, 0X30, 0, 0);
	add_func    (0X7100022150,0X71000221F0);
	set_func_flags(0X7100022150,0x1410);
	SetType(0X7100022150, "__int64 __fastcall sub_7100022150(_QWORD);");
	set_frame_size(0X7100022150, 0X20, 0, 0);
	add_func    (0X71000221F0,0X7100022234);
	set_func_flags(0X71000221F0,0x1410);
	SetType(0X71000221F0, "__int64 sub_71000221F0();");
	set_frame_size(0X71000221F0, 0X20, 0, 0);
	add_func    (0X7100022354,0X71000223A4);
	set_func_flags(0X7100022354,0x1410);
	set_frame_size(0X7100022354, 0X20, 0, 0);
	add_func    (0X7100022418,0X7100022438);
	set_func_flags(0X7100022418,0x1411);
	set_frame_size(0X7100022418, 0, 16, 0);
	add_func    (0X7100022438,0X710002244C);
	set_func_flags(0X7100022438,0x1400);
	add_func    (0X7100022450,0X71000224FC);
	set_func_flags(0X7100022450,0x1410);
	set_frame_size(0X7100022450, 0X20, 0, 0);
	add_func    (0X7100022500,0X710002257C);
	set_func_flags(0X7100022500,0x1410);
	set_frame_size(0X7100022500, 0X20, 0, 0);
	add_func    (0X7100022580,0X710002266C);
	set_func_flags(0X7100022580,0x1410);
	set_frame_size(0X7100022580, 0X20, 32, 0);
	add_func    (0X7100022670,0X7100022728);
	set_func_flags(0X7100022670,0x1410);
	set_frame_size(0X7100022670, 0X20, 32, 0);
	add_func    (0X7100022730,0X71000227AC);
	set_func_flags(0X7100022730,0x1410);
	set_frame_size(0X7100022730, 0X20, 32, 0);
	add_func    (0X71000227AC,0X71000227B4);
	set_func_flags(0X71000227AC,0x1400);
	add_func    (0X71000227B4,0X71000227C0);
	set_func_flags(0X71000227B4,0x1400);
	add_func    (0X71000227C0,0X71000227C4);
	set_func_flags(0X71000227C0,0x1440);
	add_func    (0X71000227C4,0X71000227D4);
	set_func_flags(0X71000227C4,0x1400);
	add_func    (0X71000227D4,0X71000227E8);
	set_func_flags(0X71000227D4,0x1400);
	add_func    (0X71000227E8,0X71000227F8);
	set_func_flags(0X71000227E8,0x1400);
	add_func    (0X71000227F8,0X7100022800);
	set_func_flags(0X71000227F8,0x1400);
	add_func    (0X7100022800,0X7100022808);
	set_func_flags(0X7100022800,0x1400);
	add_func    (0X7100022808,0X7100022818);
	set_func_flags(0X7100022808,0x1400);
	add_func    (0X7100022820,0X7100022888);
	set_func_flags(0X7100022820,0x1410);
	set_frame_size(0X7100022820, 0, 32, 0);
	add_func    (0X71000228E0,0X710002295C);
	set_func_flags(0X71000228E0,0x1410);
	set_frame_size(0X71000228E0, 0, 32, 0);
	add_func    (0X710002295C,0X71000229D8);
	set_func_flags(0X710002295C,0x1410);
	set_frame_size(0X710002295C, 0, 32, 0);
	add_func    (0X71000229D8,0X7100022A24);
	set_func_flags(0X71000229D8,0x1410);
	set_frame_size(0X71000229D8, 0X20, 0, 0);
	add_func    (0X7100022A24,0X7100022A6C);
	set_func_flags(0X7100022A24,0x1410);
	set_frame_size(0X7100022A24, 0X20, 0, 0);
	add_func    (0X7100022A70,0X7100022AB4);
	set_func_flags(0X7100022A70,0x1410);
	set_frame_size(0X7100022A70, 0, 16, 0);
	add_func    (0X7100022AC0,0X7100022B20);
	set_func_flags(0X7100022AC0,0x1410);
	SetType(0X7100022AC0, "__int64 __fastcall sub_7100022AC0(_QWORD);");
	set_frame_size(0X7100022AC0, 0X20, 0, 0);
	add_func    (0X7100022B20,0X7100022B2C);
	set_func_flags(0X7100022B20,0x1400);
	add_func    (0X7100022B2C,0X7100022B34);
	set_func_flags(0X7100022B2C,0x1400);
	SetType(0X7100022B2C, "__int64 __fastcall sub_7100022B2C(_QWORD, _QWORD);");
	add_func    (0X7100022B34,0X7100022B3C);
	set_func_flags(0X7100022B34,0x1400);
	add_func    (0X7100022B3C,0X7100022B44);
	set_func_flags(0X7100022B3C,0x1400);
	add_func    (0X7100022B44,0X7100022B50);
	set_func_flags(0X7100022B44,0x1400);
	add_func    (0X7100022B50,0X7100022B5C);
	set_func_flags(0X7100022B50,0x1400);
	add_func    (0X7100022B5C,0X7100022B64);
	set_func_flags(0X7100022B5C,0x1400);
	add_func    (0X7100022B64,0X7100022B6C);
	set_func_flags(0X7100022B64,0x1400);
	add_func    (0X7100022B70,0X7100022EF8);
	set_func_flags(0X7100022B70,0x1410);
	SetType(0X7100022B70, "__int64 sub_7100022B70();");
	set_frame_size(0X7100022B70, 0X10, 48, 0);
	add_func    (0X7100022F00,0X7100022FBC);
	set_func_flags(0X7100022F00,0x1410);
	SetType(0X7100022F00, "__int64 __fastcall sub_7100022F00(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X7100022F00, 0X20, 48, 0);
	add_func    (0X7100022FC0,0X7100022FCC);
	set_func_flags(0X7100022FC0,0x1400);
	SetType(0X7100022FC0, "char *sub_7100022FC0();");
	add_func    (0X7100022FD0,0X7100023024);
	set_func_flags(0X7100022FD0,0x1410);
	SetType(0X7100022FD0, "__int64 __fastcall sub_7100022FD0(_QWORD);");
	set_frame_size(0X7100022FD0, 0X20, 0, 0);
	add_func    (0X7100023024,0X7100023028);
	set_func_flags(0X7100023024,0x1480);
	add_func    (0X7100023028,0X7100023374);
	set_func_flags(0X7100023028,0x1410);
	set_frame_size(0X7100023028, 0X20, 16, 0);
	add_func    (0X7100023374,0X71000233CC);
	set_func_flags(0X7100023374,0x1410);
	set_frame_size(0X7100023374, 0X20, 16, 0);
	add_func    (0X71000233CC,0X71000233F4);
	set_func_flags(0X71000233CC,0x1400);
	add_func    (0X71000233F4,0X71000233F8);
	set_func_flags(0X71000233F4,0x1440);
	add_func    (0X71000233F8,0X710002341C);
	set_func_flags(0X71000233F8,0x1410);
	set_frame_size(0X71000233F8, 0, 16, 0);
	add_func    (0X710002341C,0X7100023428);
	set_func_flags(0X710002341C,0x1411);
	set_frame_size(0X710002341C, 0, 16, 0);
	add_func    (0X71000234B0,0X71000234B8);
	set_func_flags(0X71000234B0,0x1400);
	add_func    (0X71000234B8,0X71000234BC);
	set_func_flags(0X71000234B8,0x1440);
	add_func    (0X71000234BC,0X710002371C);
	set_func_flags(0X71000234BC,0x1410);
	set_frame_size(0X71000234BC, 0X20, 16, 0);
	add_func    (0X710002371C,0X7100023778);
	set_func_flags(0X710002371C,0x1410);
	set_frame_size(0X710002371C, 0X20, 16, 0);
	add_func    (0X7100023778,0X710002379C);
	set_func_flags(0X7100023778,0x1410);
	set_frame_size(0X7100023778, 0X20, 0, 0);
	add_func    (0X710002379C,0X71000237A8);
	set_func_flags(0X710002379C,0x1400);
	add_func    (0X71000237A8,0X71000237AC);
	set_func_flags(0X71000237A8,0x1440);
	add_func    (0X71000237AC,0X71000237B4);
	set_func_flags(0X71000237AC,0x1400);
	add_func    (0X71000237B4,0X7100023810);
	set_func_flags(0X71000237B4,0x1410);
	set_frame_size(0X71000237B4, 0X20, 16, 0);
	add_func    (0X7100023810,0X710002381C);
	set_func_flags(0X7100023810,0x1400);
	add_func    (0X710002381C,0X7100023B00);
	set_func_flags(0X710002381C,0x1410);
	set_frame_size(0X710002381C, 0X20, 0, 0);
	add_func    (0X7100023B00,0X7100023C08);
	set_func_flags(0X7100023B00,0x1410);
	set_frame_size(0X7100023B00, 0X30, 0, 0);
	add_func    (0X7100023C08,0X7100027620);
	set_func_flags(0X7100023C08,0x1410);
	SetType(0X7100023C08, "__int64 __fastcall sub_7100023C08(unsigned __int64 *, __int64 *, __int64 *, __int64 (__fastcall ****)(), int);");
	set_frame_size(0X7100023C08, 0X140, 32, 0);
	define_local_var(0X7100023C08, 0X7100027620, "[bp-0XB0]", "dst");
	add_func    (0X7100027620,0X7100027728);
	set_func_flags(0X7100027620,0x1410);
	set_frame_size(0X7100027620, 0X30, 0, 0);
	add_func    (0X7100027728,0X7100027B44);
	set_func_flags(0X7100027728,0x1410);
	set_frame_size(0X7100027728, 0XC0, 32, 0);
	add_func    (0X7100027D70,0X7100027E00);
	set_func_flags(0X7100027D70,0x1410);
	set_frame_size(0X7100027D70, 0X20, 32, 0);
	add_func    (0X7100027E00,0X7100027E60);
	set_func_flags(0X7100027E00,0x1410);
	set_frame_size(0X7100027E00, 0X20, 0, 0);
	add_func    (0X7100027E60,0X7100027EA8);
	set_func_flags(0X7100027E60,0x1410);
	set_frame_size(0X7100027E60, 0X20, 16, 0);
	add_func    (0X7100027EA8,0X7100027EAC);
	set_func_flags(0X7100027EA8,0x1440);
	add_func    (0X7100027EAC,0X7100027EB0);
	set_func_flags(0X7100027EAC,0x1440);
	add_func    (0X7100027EB0,0X7100027EB8);
	set_func_flags(0X7100027EB0,0x1400);
	set_frame_size(0X7100027EB0, 0X40, 0, 0);
	add_func    (0X7100027EB8,0X7100027EC0);
	set_func_flags(0X7100027EB8,0x1400);
	set_frame_size(0X7100027EB8, 0X40, 0, 0);
	add_func    (0X7100027EC0,0X7100027EC8);
	set_func_flags(0X7100027EC0,0x1400);
	set_frame_size(0X7100027EC0, 0X40, 0, 0);
	add_func    (0X7100027EC8,0X7100027ED0);
	set_func_flags(0X7100027EC8,0x1400);
	set_frame_size(0X7100027EC8, 0X40, 0, 0);
	add_func    (0X7100027ED0,0X7100027F40);
	set_func_flags(0X7100027ED0,0x1410);
	set_frame_size(0X7100027ED0, 0X30, 0, 0);
	add_func    (0X7100027F40,0X7100027F48);
	set_func_flags(0X7100027F40,0x1400);
	set_frame_size(0X7100027F40, 0XC0, 0, 0);
	add_func    (0X7100027F48,0X7100027F50);
	set_func_flags(0X7100027F48,0x1400);
	add_func    (0X7100027F50,0X7100027F58);
	set_func_flags(0X7100027F50,0x1400);
	add_func    (0X7100027F58,0X7100027F60);
	set_func_flags(0X7100027F58,0x1400);
	set_frame_size(0X7100027F58, 0X30, 0, 0);
	add_func    (0X7100027F60,0X7100027F68);
	set_func_flags(0X7100027F60,0x1400);
	set_frame_size(0X7100027F60, 0X30, 0, 0);
	add_func    (0X7100027F68,0X7100027F70);
	set_func_flags(0X7100027F68,0x1400);
	set_frame_size(0X7100027F68, 0X40, 0, 0);
	add_func    (0X7100027F70,0X7100027F78);
	set_func_flags(0X7100027F70,0x1400);
	set_frame_size(0X7100027F70, 0X40, 0, 0);
	add_func    (0X7100027F78,0X7100027F80);
	set_func_flags(0X7100027F78,0x1400);
	set_frame_size(0X7100027F78, 0X30, 0, 0);
	add_func    (0X7100027F80,0X7100027F88);
	set_func_flags(0X7100027F80,0x1400);
	set_frame_size(0X7100027F80, 0X30, 0, 0);
	add_func    (0X7100027F88,0X7100027F90);
	set_func_flags(0X7100027F88,0x1400);
	set_frame_size(0X7100027F88, 0X30, 0, 0);
	add_func    (0X7100027F90,0X7100027F98);
	set_func_flags(0X7100027F90,0x1400);
	add_func    (0X7100027F98,0X7100027FA0);
	set_func_flags(0X7100027F98,0x1400);
	add_func    (0X7100027FA0,0X7100027FA8);
	set_func_flags(0X7100027FA0,0x1400);
	set_frame_size(0X7100027FA0, 0X30, 0, 0);
	add_func    (0X7100027FA8,0X7100027FB0);
	set_func_flags(0X7100027FA8,0x1400);
	set_frame_size(0X7100027FA8, 0X40, 0, 0);
	add_func    (0X7100027FB0,0X7100027FB8);
	set_func_flags(0X7100027FB0,0x1400);
	set_frame_size(0X7100027FB0, 0X30, 0, 0);
	add_func    (0X7100027FB8,0X7100027FC0);
	set_func_flags(0X7100027FB8,0x1400);
	set_frame_size(0X7100027FB8, 0X30, 0, 0);
	add_func    (0X7100027FC0,0X7100027FC8);
	set_func_flags(0X7100027FC0,0x1400);
	set_frame_size(0X7100027FC0, 0X40, 0, 0);
	add_func    (0X7100027FC8,0X7100027FD0);
	set_func_flags(0X7100027FC8,0x1400);
	set_frame_size(0X7100027FC8, 0X40, 0, 0);
	add_func    (0X7100027FD0,0X7100027FF8);
	set_func_flags(0X7100027FD0,0x1410);
	set_frame_size(0X7100027FD0, 0X10, 16, 0);
	add_func    (0X7100027FF8,0X7100028000);
	set_func_flags(0X7100027FF8,0x1400);
	add_func    (0X7100028000,0X710002802C);
	set_func_flags(0X7100028000,0x1410);
	set_frame_size(0X7100028000, 0X10, 16, 0);
	add_func    (0X710002802C,0X7100028034);
	set_func_flags(0X710002802C,0x1400);
	add_func    (0X7100028034,0X7100028044);
	set_func_flags(0X7100028034,0x1400);
	set_frame_size(0X7100028034, 0X100, 0, 0);
	add_func    (0X7100028044,0X710002804C);
	set_func_flags(0X7100028044,0x1400);
	add_func    (0X710002804C,0X7100028054);
	set_func_flags(0X710002804C,0x1400);
	set_frame_size(0X710002804C, 0X20, 0, 0);
	add_func    (0X7100028054,0X710002805C);
	set_func_flags(0X7100028054,0x1400);
	set_frame_size(0X7100028054, 0X40, 0, 0);
	add_func    (0X710002805C,0X7100028064);
	set_func_flags(0X710002805C,0x1400);
	set_frame_size(0X710002805C, 0X30, 0, 0);
	add_func    (0X7100028064,0X710002808C);
	set_func_flags(0X7100028064,0x1410);
	set_frame_size(0X7100028064, 0X10, 16, 0);
	add_func    (0X710002808C,0X7100028094);
	set_func_flags(0X710002808C,0x1400);
	set_frame_size(0X710002808C, 0X10, 0, 0);
	add_func    (0X7100028094,0X71000280AC);
	set_func_flags(0X7100028094,0x1400);
	set_frame_size(0X7100028094, 0X40, 0, 0);
	add_func    (0X71000280AC,0X71000280BC);
	set_func_flags(0X71000280AC,0x1400);
	add_func    (0X71000280BC,0X71000280C4);
	set_func_flags(0X71000280BC,0x1400);
	add_func    (0X71000280C4,0X7100028178);
	set_func_flags(0X71000280C4,0x1410);
	set_frame_size(0X71000280C4, 0X20, 0, 0);
	add_func    (0X7100028178,0X710002817C);
	set_func_flags(0X7100028178,0x1440);
	add_func    (0X7100028684,0X7100028BE8);
	set_func_flags(0X7100028684,0x1410);
	set_frame_size(0X7100028684, 0X80, 96, 0);
	add_func    (0X7100028DD4,0X7100028DD8);
	set_func_flags(0X7100028DD4,0x1440);
	add_func    (0X7100028DD8,0X7100028E38);
	set_func_flags(0X7100028DD8,0x1410);
	set_frame_size(0X7100028DD8, 0X20, 0, 0);
	add_func    (0X7100028E8C,0X71000291A8);
	set_func_flags(0X7100028E8C,0x1410);
	set_frame_size(0X7100028E8C, 0X140, 96, 0);
	define_local_var(0X7100028E8C, 0X71000291A8, "[bp-0XC0]", "size");
	add_func    (0X71000292DC,0X710002935C);
	set_func_flags(0X71000292DC,0x1400);
	add_func    (0X7100029418,0X7100029440);
	set_func_flags(0X7100029418,0x1410);
	set_frame_size(0X7100029418, 0, 16, 0);
	add_func    (0X7100029440,0X7100029488);
	set_func_flags(0X7100029440,0x1410);
	set_frame_size(0X7100029440, 0X20, 0, 0);
	add_func    (0X7100029488,0X7100029724);
	set_func_flags(0X7100029488,0x1410);
	set_frame_size(0X7100029488, 0XC0, 96, 0);
	define_local_var(0X7100029488, 0X7100029724, "[bp-0XC0]", "size");
	add_func    (0X71000298D8,0X7100029C14);
	set_func_flags(0X71000298D8,0x1410);
	set_frame_size(0X71000298D8, 0X140, 96, 0);
	define_local_var(0X71000298D8, 0X7100029C14, "[bp-0XC0]", "size");
	add_func    (0X7100029CC0,0X7100029F5C);
	set_func_flags(0X7100029CC0,0x1410);
	set_frame_size(0X7100029CC0, 0XC0, 96, 0);
	define_local_var(0X7100029CC0, 0X7100029F5C, "[bp-0XC0]", "size");
	add_func    (0X7100029FF8,0X710002A310);
	set_func_flags(0X7100029FF8,0x1410);
	set_frame_size(0X7100029FF8, 0X140, 96, 0);
	define_local_var(0X7100029FF8, 0X710002A310, "[bp-0XC0]", "size");
	add_func    (0X710002A3A4,0X710002A6BC);
	set_func_flags(0X710002A3A4,0x1410);
	set_frame_size(0X710002A3A4, 0X140, 96, 0);
	define_local_var(0X710002A3A4, 0X710002A6BC, "[bp-0XC0]", "size");
	add_func    (0X710002A748,0X710002A7A8);
	set_func_flags(0X710002A748,0x1410);
	set_frame_size(0X710002A748, 0X20, 0, 0);
	add_func    (0X710002A7A8,0X710002A8A0);
	set_func_flags(0X710002A7A8,0x1410);
	set_frame_size(0X710002A7A8, 0X50, 0, 0);
	add_func    (0X710002A8A0,0X710002A900);
	set_func_flags(0X710002A8A0,0x1410);
	set_frame_size(0X710002A8A0, 0X20, 0, 0);
	add_func    (0X710002A980,0X710002ACD4);
	set_func_flags(0X710002A980,0x1410);
	set_frame_size(0X710002A980, 0X150, 96, 0);
	define_local_var(0X710002A980, 0X710002ACD4, "[bp-0XD0]", "size");
	add_func    (0X710002AD90,0X710002B0D4);
	set_func_flags(0X710002AD90,0x1410);
	set_frame_size(0X710002AD90, 0X140, 96, 0);
	define_local_var(0X710002AD90, 0X710002B0D4, "[bp-0XC0]", "size");
	add_func    (0X710002B120,0X710002B22C);
	set_func_flags(0X710002B120,0x1410);
	set_frame_size(0X710002B120, 0X70, 0, 0);
	add_func    (0X710002B2F0,0X710002B630);
	set_func_flags(0X710002B2F0,0x1410);
	set_frame_size(0X710002B2F0, 0X150, 96, 0);
	define_local_var(0X710002B2F0, 0X710002B630, "[bp-0XD0]", "size");
	add_func    (0X710002B6CC,0X710002B750);
	set_func_flags(0X710002B6CC,0x1410);
	set_frame_size(0X710002B6CC, 0, 48, 0);
	add_func    (0X710002B750,0X710002B76C);
	set_func_flags(0X710002B750,0x1410);
	set_frame_size(0X710002B750, 0, 16, 0);
	add_func    (0X710002B844,0X710002B8E0);
	set_func_flags(0X710002B844,0x1410);
	SetType(0X710002B844, "__int64 __fastcall sub_710002B844(__int64);");
	set_frame_size(0X710002B844, 0X20, 0, 0);
	add_func    (0X710002B8F0,0X710002BB30);
	set_func_flags(0X710002B8F0,0x1410);
	set_frame_size(0X710002B8F0, 0, 80, 0);
	add_func    (0X710002BB50,0X710002BEE8);
	set_func_flags(0X710002BB50,0x1410);
	set_frame_size(0X710002BB50, 0XE0, 96, 0);
	add_func    (0X710002BEE8,0X710002BF34);
	set_func_flags(0X710002BEE8,0x1410);
	set_frame_size(0X710002BEE8, 0, 32, 0);
	add_func    (0X710002BF34,0X710002BF8C);
	set_func_flags(0X710002BF34,0x1410);
	set_frame_size(0X710002BF34, 0, 32, 0);
	add_func    (0X710002BF8C,0X710002BF94);
	set_func_flags(0X710002BF8C,0x1400);
	add_func    (0X710002BF94,0X710002BFEC);
	set_func_flags(0X710002BF94,0x1410);
	set_frame_size(0X710002BF94, 0, 32, 0);
	add_func    (0X710002BFEC,0X710002BFF4);
	set_func_flags(0X710002BFEC,0x1400);
	add_func    (0X710002BFF4,0X710002BFFC);
	set_func_flags(0X710002BFF4,0x1400);
	add_func    (0X710002BFFC,0X710002C004);
	set_func_flags(0X710002BFFC,0x1400);
	add_func    (0X710002C004,0X710002C0DC);
	set_func_flags(0X710002C004,0x1410);
	set_frame_size(0X710002C004, 0X20, 16, 0);
	add_func    (0X710002C0DC,0X710002C0E0);
	set_func_flags(0X710002C0DC,0x14c0);
	SetType(0X710002C0DC, "__int64 __fastcall j_Heap_Deallocate_0(StandardSteadyClockCore *this);");
	add_func    (0X710002C0E0,0X710002C1AC);
	set_func_flags(0X710002C0E0,0x1410);
	set_frame_size(0X710002C0E0, 0X40, 16, 0);
	add_func    (0X710002C1B4,0X710002C23C);
	set_func_flags(0X710002C1B4,0x1410);
	set_frame_size(0X710002C1B4, 0X20, 16, 0);
	add_func    (0X710002C23C,0X710002C2F0);
	set_func_flags(0X710002C23C,0x1410);
	set_frame_size(0X710002C23C, 0X40, 32, 0);
	add_func    (0X710002C2F0,0X710002C4FC);
	set_func_flags(0X710002C2F0,0x1400);
	add_func    (0X710002C500,0X710002C788);
	set_func_flags(0X710002C500,0x1410);
	set_frame_size(0X710002C500, 0X30, 16, 0);
	add_func    (0X710002C788,0X710002C7B0);
	set_func_flags(0X710002C788,0x1400);
	add_func    (0X710002C7B0,0X710002C7F8);
	set_func_flags(0X710002C7B0,0x1410);
	set_frame_size(0X710002C7B0, 0X20, 16, 0);
	add_func    (0X710002C7F8,0X710002C820);
	set_func_flags(0X710002C7F8,0x1410);
	set_frame_size(0X710002C7F8, 0X10, 16, 0);
	add_func    (0X710002C820,0X710002CC48);
	set_func_flags(0X710002C820,0x1410);
	set_frame_size(0X710002C820, 0X30, 96, 0);
	add_func    (0X710002CC48,0X710002CF34);
	set_func_flags(0X710002CC48,0x1410);
	set_frame_size(0X710002CC48, 0XB0, 96, 0);
	define_local_var(0X710002CC48, 0X710002CF34, "[bp-0X78]", "dst");
	add_func    (0X710002CF34,0X710002CF80);
	set_func_flags(0X710002CF34,0x1410);
	set_frame_size(0X710002CF34, 0X20, 16, 0);
	add_func    (0X710002CF80,0X710002D014);
	set_func_flags(0X710002CF80,0x1400);
	add_func    (0X710002D020,0X710002D0BC);
	set_func_flags(0X710002D020,0x1400);
	add_func    (0X710002D0C0,0X710002D184);
	set_func_flags(0X710002D0C0,0x1400);
	add_func    (0X710002D190,0X710002D3F8);
	set_func_flags(0X710002D190,0x1410);
	set_frame_size(0X710002D190, 0X50, 96, 0);
	add_func    (0X710002D400,0X710002D6E8);
	set_func_flags(0X710002D400,0x1410);
	set_frame_size(0X710002D400, 0X80, 96, 0);
	add_func    (0X710002D6F0,0X710002D888);
	set_func_flags(0X710002D6F0,0x1400);
	set_frame_size(0X710002D6F0, 0XB0, 0, 0);
	add_func    (0X710002D890,0X710002DD54);
	set_func_flags(0X710002D890,0x1410);
	set_frame_size(0X710002D890, 0X6D0, 80, 0);
	add_func    (0X710002DD54,0X710002DDA0);
	set_func_flags(0X710002DD54,0x1410);
	set_frame_size(0X710002DD54, 0X20, 0, 0);
	add_func    (0X710002DDA0,0X710002DDA8);
	set_func_flags(0X710002DDA0,0x1400);
	add_func    (0X710002DDA8,0X710002DDFC);
	set_func_flags(0X710002DDA8,0x1410);
	set_frame_size(0X710002DDA8, 0, 32, 0);
	add_func    (0X710002DDFC,0X710002DE08);
	set_func_flags(0X710002DDFC,0x1400);
	add_func    (0X710002DE08,0X710002DE3C);
	set_func_flags(0X710002DE08,0x1400);
	add_func    (0X710002DE3C,0X710002DE44);
	set_func_flags(0X710002DE3C,0x1400);
	add_func    (0X710002DE44,0X710002DE4C);
	set_func_flags(0X710002DE44,0x1400);
	add_func    (0X710002DE4C,0X710002DE54);
	set_func_flags(0X710002DE4C,0x1400);
	add_func    (0X710002DE54,0X710002DED0);
	set_func_flags(0X710002DE54,0x1410);
	set_frame_size(0X710002DE54, 0X40, 0, 0);
	add_func    (0X710002DED8,0X710002DF08);
	set_func_flags(0X710002DED8,0x1410);
	set_frame_size(0X710002DED8, 0X20, 0, 0);
	add_func    (0X710002DF08,0X710002DF3C);
	set_func_flags(0X710002DF08,0x1410);
	set_frame_size(0X710002DF08, 0, 32, 0);
	add_func    (0X710002DF40,0X710002DF58);
	set_func_flags(0X710002DF40,0x1400);
	add_func    (0X710002DF60,0X710002DF94);
	set_func_flags(0X710002DF60,0x1410);
	set_frame_size(0X710002DF60, 0, 16, 0);
	add_func    (0X710002DF94,0X710002DFA4);
	set_func_flags(0X710002DF94,0x1400);
	add_func    (0X710002DFA4,0X710002DFB8);
	set_func_flags(0X710002DFA4,0x1400);
	add_func    (0X710002DFB8,0X710002DFF0);
	set_func_flags(0X710002DFB8,0x1410);
	set_frame_size(0X710002DFB8, 0, 32, 0);
	add_func    (0X710002DFF0,0X710002E030);
	set_func_flags(0X710002DFF0,0x1410);
	set_frame_size(0X710002DFF0, 0, 32, 0);
	add_func    (0X710002E030,0X710002E070);
	set_func_flags(0X710002E030,0x1410);
	set_frame_size(0X710002E030, 0, 32, 0);
	add_func    (0X710002E070,0X710002E0B0);
	set_func_flags(0X710002E070,0x1410);
	set_frame_size(0X710002E070, 0, 32, 0);
	add_func    (0X710002E0B0,0X710002E0F0);
	set_func_flags(0X710002E0B0,0x1410);
	set_frame_size(0X710002E0B0, 0, 32, 0);
	add_func    (0X710002E0F0,0X710002E560);
	set_func_flags(0X710002E0F0,0x1410);
	set_frame_size(0X710002E0F0, 0X130, 48, 0);
	add_func    (0X710002E560,0X710002E5F8);
	set_func_flags(0X710002E560,0x1410);
	set_frame_size(0X710002E560, 0X20, 16, 0);
	add_func    (0X710002E5F8,0X710002E898);
	set_func_flags(0X710002E5F8,0x1410);
	set_frame_size(0X710002E5F8, 0X70, 16, 0);
	add_func    (0X710002E898,0X710002EBF8);
	set_func_flags(0X710002E898,0x1410);
	set_frame_size(0X710002E898, 0XC0, 96, 0);
	add_func    (0X710002EBF8,0X710002ECA0);
	set_func_flags(0X710002EBF8,0x1410);
	set_frame_size(0X710002EBF8, 0X20, 32, 0);
	add_func    (0X710002ECA0,0X710002ED50);
	set_func_flags(0X710002ECA0,0x1410);
	set_frame_size(0X710002ECA0, 0X30, 16, 0);
	add_func    (0X710002ED50,0X710002EE54);
	set_func_flags(0X710002ED50,0x1410);
	set_frame_size(0X710002ED50, 0X20, 0, 0);
	add_func    (0X710002EE54,0X710002EF60);
	set_func_flags(0X710002EE54,0x1410);
	set_frame_size(0X710002EE54, 0X50, 0, 0);
	add_func    (0X710002EF60,0X710002EF8C);
	set_func_flags(0X710002EF60,0x1410);
	set_frame_size(0X710002EF60, 0X20, 0, 0);
	add_func    (0X710002EF90,0X710002F214);
	set_func_flags(0X710002EF90,0x1410);
	set_frame_size(0X710002EF90, 0X20, 0, 0);
	add_func    (0X710002F214,0X710002F260);
	set_func_flags(0X710002F214,0x1410);
	set_frame_size(0X710002F214, 0X40, 0, 0);
	add_func    (0X710002F260,0X710002F3F4);
	set_func_flags(0X710002F260,0x1410);
	set_frame_size(0X710002F260, 0X40, 32, 0);
	add_func    (0X710002F400,0X710002F708);
	set_func_flags(0X710002F400,0x1410);
	set_frame_size(0X710002F400, 0XE0, 32, 0);
	add_func    (0X710002F708,0X710002F844);
	set_func_flags(0X710002F708,0x1410);
	set_frame_size(0X710002F708, 0X50, 32, 0);
	add_func    (0X710002F844,0X710002F99C);
	set_func_flags(0X710002F844,0x1410);
	set_frame_size(0X710002F844, 0X50, 32, 0);
	add_func    (0X710002F9A0,0X710002FAA4);
	set_func_flags(0X710002F9A0,0x1410);
	set_frame_size(0X710002F9A0, 0XA0, 16, 0);
	add_func    (0X710002FAA4,0X710002FAFC);
	set_func_flags(0X710002FAA4,0x1400);
	add_func    (0X710002FAFC,0X710002FB18);
	set_func_flags(0X710002FAFC,0x1400);
	add_func    (0X710002FB18,0X710002FC3C);
	set_func_flags(0X710002FB18,0x1410);
	set_frame_size(0X710002FB18, 0X20, 16, 0);
	add_func    (0X710002FC3C,0X710002FD88);
	set_func_flags(0X710002FC3C,0x1400);
	add_func    (0X710002FD88,0X710002FEC8);
	set_func_flags(0X710002FD88,0x1400);
	add_func    (0X710002FEC8,0X710002FF94);
	set_func_flags(0X710002FEC8,0x1400);
	add_func    (0X710002FF94,0X710002FFF8);
	set_func_flags(0X710002FF94,0x1400);
	add_func    (0X710002FFF8,0X71000300DC);
	set_func_flags(0X710002FFF8,0x1400);
	add_func    (0X71000300DC,0X710003022C);
	set_func_flags(0X71000300DC,0x1400);
	add_func    (0X710003022C,0X71000303A4);
	set_func_flags(0X710003022C,0x1410);
	set_frame_size(0X710003022C, 0, 16, 0);
	add_func    (0X71000303A4,0X71000303A8);
	set_func_flags(0X71000303A4,0x1480);
	add_func    (0X71000303B0,0X71000303D0);
	set_func_flags(0X71000303B0,0x1400);
	add_func    (0X71000303D0,0X710003057C);
	set_func_flags(0X71000303D0,0x1410);
	set_frame_size(0X71000303D0, 0X40, 48, 0);
	add_func    (0X710003057C,0X71000305AC);
	set_func_flags(0X710003057C,0x1410);
	set_frame_size(0X710003057C, 0X10, 16, 0);
	add_func    (0X71000305B0,0X71000307CC);
	set_func_flags(0X71000305B0,0x1410);
	set_frame_size(0X71000305B0, 0X80, 48, 0);
	define_local_var(0X71000305B0, 0X71000307CC, "[bp-0X78]", "dst");
	add_func    (0X71000307D0,0X7100030984);
	set_func_flags(0X71000307D0,0x1410);
	set_frame_size(0X71000307D0, 0X40, 48, 0);
	add_func    (0X7100030990,0X7100030C18);
	set_func_flags(0X7100030990,0x1410);
	set_frame_size(0X7100030990, 0X460, 96, 0);
	add_func    (0X7100030C20,0X7100030D9C);
	set_func_flags(0X7100030C20,0x1410);
	set_frame_size(0X7100030C20, 0, 16, 0);
	add_func    (0X7100030DA0,0X7100030DE0);
	set_func_flags(0X7100030DA0,0x1410);
	set_frame_size(0X7100030DA0, 0X20, 0, 0);
	add_func    (0X7100030DE0,0X7100031220);
	set_func_flags(0X7100030DE0,0x1410);
	set_frame_size(0X7100030DE0, 0, 80, 0);
	add_func    (0X7100031220,0X710003158C);
	set_func_flags(0X7100031220,0x1410);
	set_frame_size(0X7100031220, 0X480, 32, 0);
	add_func    (0X7100031590,0X71000315D4);
	set_func_flags(0X7100031590,0x1410);
	set_frame_size(0X7100031590, 0, 32, 0);
	add_func    (0X71000315D4,0X7100031628);
	set_func_flags(0X71000315D4,0x1410);
	set_frame_size(0X71000315D4, 0X20, 0, 0);
	add_func    (0X7100031628,0X7100031668);
	set_func_flags(0X7100031628,0x1410);
	set_frame_size(0X7100031628, 0X20, 0, 0);
	add_func    (0X7100031670,0X71000319BC);
	set_func_flags(0X7100031670,0x1410);
	set_frame_size(0X7100031670, 0X10, 32, 0);
	add_func    (0X71000319BC,0X71000319C8);
	set_func_flags(0X71000319BC,0x1400);
	set_frame_size(0X71000319BC, 0X40, 0, 0);
	add_func    (0X71000319C8,0X71000319D8);
	set_func_flags(0X71000319C8,0x1400);
	add_func    (0X71000319D8,0X71000319E8);
	set_func_flags(0X71000319D8,0x1400);
	add_func    (0X71000319E8,0X71000319F8);
	set_func_flags(0X71000319E8,0x1400);
	set_frame_size(0X71000319E8, 0X70, 0, 0);
	add_func    (0X71000319F8,0X7100031A08);
	set_func_flags(0X71000319F8,0x1400);
	set_frame_size(0X71000319F8, 0X70, 0, 0);
	add_func    (0X7100031A08,0X7100031A10);
	set_func_flags(0X7100031A08,0x1400);
	add_func    (0X7100031A10,0X7100031A24);
	set_func_flags(0X7100031A10,0x1400);
	add_func    (0X7100031A24,0X7100031A48);
	set_func_flags(0X7100031A24,0x1400);
	add_func    (0X7100031A50,0X7100031AC8);
	set_func_flags(0X7100031A50,0x1410);
	set_frame_size(0X7100031A50, 0X20, 16, 0);
	add_func    (0X7100031AD0,0X7100031C4C);
	set_func_flags(0X7100031AD0,0x1410);
	set_frame_size(0X7100031AD0, 0X60, 32, 0);
	add_func    (0X7100031C50,0X7100031CBC);
	set_func_flags(0X7100031C50,0x1410);
	SetType(0X7100031C50, "unsigned __int64 GetRandom();");
	set_frame_size(0X7100031C50, 0X10, 16, 0);
	define_local_var(0X7100031C50, 0X7100031CBC, "[bp-0X10]", "randomOutput");
	add_func    (0X7100031CC0,0X7100031CCC);
	set_func_flags(0X7100031CC0,0x1400);
	add_func    (0X7100031CD0,0X7100031CE8);
	set_func_flags(0X7100031CD0,0x1400);
	add_func    (0X7100031CF0,0X7100031D60);
	set_func_flags(0X7100031CF0,0x1410);
	SetType(0X7100031CF0, "__int64 Setup_TimeServerIPC();");
	set_frame_size(0X7100031CF0, 0X20, 0, 0);
	add_func    (0X7100031D60,0X7100031D64);
	set_func_flags(0X7100031D60,0x1480);
	add_func    (0X7100031D64,0X7100031D78);
	set_func_flags(0X7100031D64,0x1400);
	add_func    (0X7100031D80,0X7100031DCC);
	set_func_flags(0X7100031D80,0x1410);
	SetType(0X7100031D80, "void Setup_TimeServer();");
	set_frame_size(0X7100031D80, 0X20, 0, 0);
	add_func    (0X7100031DD0,0X7100031DDC);
	set_func_flags(0X7100031DD0,0x1400);
	SetType(0X7100031DD0, "__int64 sub_7100031DD0();");
	add_func    (0X7100031DE0,0X7100031DFC);
	set_func_flags(0X7100031DE0,0x1400);
	add_func    (0X7100031DFC,0X7100031E28);
	set_func_flags(0X7100031DFC,0x1400);
	SetType(0X7100031DFC, "LocalSystemClockContextWriter *__fastcall nn__timesrv__detail__service__LocalSystemClockContextWriter__LocalSystemClockContextWriter(LocalSystemClockContextWriter *this, TimeSharedMemory *shared_memory);");
	add_func    (0X7100031E30,0X7100031F10);
	set_func_flags(0X7100031E30,0x1410);
	SetType(0X7100031E30, "__int64 __fastcall LocalSystemClockContextWriter__Write(LocalSystemClockContextWriter *this, SystemClockContext *context);");
	set_frame_size(0X7100031E30, 0X20, 16, 0);
	add_func    (0X7100031F10,0X7100031F40);
	set_func_flags(0X7100031F10,0x1400);
	SetType(0X7100031F10, "NetworkSystemClockContextWriter *__fastcall nn__timesrv__detail__service__NetworkSystemClockContextWriter__NetworkSystemClockContextWriter(NetworkSystemClockContextWriter *this, TimeSharedMemory *shared_memory, StandardUserSystemClockCore *user_clock_core);");
	add_func    (0X7100031F40,0X7100032030);
	set_func_flags(0X7100031F40,0x1410);
	SetType(0X7100031F40, "__int64 __fastcall NetworkSystemClockContextWriter__Write(NetworkSystemClockContextWriter *this, SystemClockContext *context);");
	set_frame_size(0X7100031F40, 0X20, 16, 0);
	define_local_var(0X7100031F40, 0X7100032030, "[bp-0X8]", "time");
	add_func    (0X7100032030,0X710003205C);
	set_func_flags(0X7100032030,0x1400);
	SetType(0X7100032030, "EphemeralNetworkSystemClockContextWriter *__fastcall nn__timesrv__detail__service__EphemeralNetworkSystemClockContextWriter__EphemeralNetworkSystemClockContextWriter(EphemeralNetworkSystemClockContextWriter *this);");
	add_func    (0X7100032060,0X7100032130);
	set_func_flags(0X7100032060,0x1410);
	SetType(0X7100032060, "__int64 __fastcall EphemeralNetworkSystemClockContextWriter__Write(EphemeralNetworkSystemClockContextWriter *this, SystemClockContext *context);");
	set_frame_size(0X7100032060, 0X20, 16, 0);
	add_func    (0X7100032130,0X71000322D8);
	set_func_flags(0X7100032130,0x1010);
	SetType(0X7100032130, "void __fastcall TimeServer_Initialize(TimeServer *this);");
	set_frame_size(0X7100032130, 0X60, 32, 0);
	add_func    (0X71000322D8,0X7100032368);
	set_func_flags(0X71000322D8,0x1410);
	SetType(0X71000322D8, "void __fastcall TimeServer_Shutdown(TimeServer *this);");
	set_frame_size(0X71000322D8, 0, 32, 0);
	add_func    (0X7100032368,0X710003236C);
	set_func_flags(0X7100032368,0x1440);
	add_func    (0X710003236C,0X710003238C);
	set_func_flags(0X710003236C,0x1410);
	SetType(0X710003236C, "__int64 __fastcall sub_710003236C(TimeServer *this);");
	set_frame_size(0X710003236C, 0, 16, 0);
	add_func    (0X710003238C,0X7100032390);
	set_func_flags(0X710003238C,0x14c0);
	SetType(0X710003238C, "__int64 __fastcall j_Heap_Deallocate_1(StandardSteadyClockCore *this);");
	add_func    (0X7100032390,0X7100032484);
	set_func_flags(0X7100032390,0x1410);
	SetType(0X7100032390, "void __fastcall TimeSharedMemory__TimeSharedMemory(TimeSharedMemory *this);");
	set_frame_size(0X7100032390, 0X10, 32, 0);
	add_func    (0X7100032484,0X71000324C0);
	set_func_flags(0X7100032484,0x1400);
	SetType(0X7100032484, "void __fastcall TImeSharedMemory__SetSteadyClockTimePoint(TimeSharedMemory *shared_memory, _QWORD *uuid, __int64 *time_diff);");
	set_frame_size(0X7100032484, 0X10, 0, 0);
	add_func    (0X71000324C0,0X710003252C);
	set_func_flags(0X71000324C0,0x1400);
	SetType(0X71000324C0, "void __fastcall TimeSharedMemory__UpdateBaseTime(TimeSharedMemory *this, _QWORD *time);");
	set_frame_size(0X71000324C0, 0X10, 0, 0);
	define_local_var(0X71000324C0, 0X710003252C, "[bp-0X10]", "clock_source_id");
	add_func    (0X710003252C,0X710003255C);
	set_func_flags(0X710003252C,0x1400);
	SetType(0X710003252C, "void __fastcall TimeSharedMemory__SetLocalSystemContext(TimeSharedMemory *this, SystemClockContext *context);");
	add_func    (0X710003255C,0X710003258C);
	set_func_flags(0X710003255C,0x1400);
	SetType(0X710003255C, "TimeSharedMemory *__fastcall TimeSharedMemory__SetNetworkSystemContext(TimeSharedMemory *this, SystemClockContext *context);");
	add_func    (0X710003258C,0X71000325B0);
	set_func_flags(0X710003258C,0x1400);
	SetType(0X710003258C, "TimeSharedMemory *__fastcall TImeSharedMemory__SetAutomaticCorrection(TimeSharedMemory *this, bool automatic_correction);");
	add_func    (0X71000325B0,0X71000325F4);
	set_func_flags(0X71000325B0,0x1400);
	SetType(0X71000325B0, "TimeSharedMemory *__fastcall TImeSharedMemory__SetContinuousAdjustment(TimeSharedMemory *this, ContinuousAdjustmentTimePoint *continuous_adjustment);");
	add_func    (0X71000325F4,0X7100032618);
	set_func_flags(0X71000325F4,0x1400);
	SetType(0X71000325F4, "SystemClockCore *__fastcall nn__timesrv__detail__core__SystemClockCore__SystemClockCore(SystemClockCore *this, SteadyClockCore *steady_clock_core);");
	add_func    (0X7100032618,0X7100032624);
	set_func_flags(0X7100032618,0x1400);
	SetType(0X7100032618, "void __fastcall StandardUserSystemClockCore__SetInitialised(StandardUserSystemClockCore *this);");
	add_func    (0X7100032624,0X710003262C);
	set_func_flags(0X7100032624,0x1400);
	SetType(0X7100032624, "bool __fastcall SystemClockCore_IsInitialised(SystemClockCore *this);");
	add_func    (0X710003262C,0X71000326DC);
	set_func_flags(0X710003262C,0x1410);
	SetType(0X710003262C, "__int64 __fastcall SystemClockCore__GetCurrentTime(SystemClockCore *this, _QWORD *out_time);");
	set_frame_size(0X710003262C, 0X40, 32, 0);
	define_local_var(0X710003262C, 0X71000326DC, "[bp-0X38]", "context");
	define_local_var(0X710003262C, 0X71000326DC, "[bp-0X18]", "steady_time_point");
	add_func    (0X71000326DC,0X71000326E4);
	set_func_flags(0X71000326DC,0x1400);
	SetType(0X71000326DC, "SteadyClockCore *__fastcall StandardLocalSystemClockCore__GetSteadyClock(StandardLocalSystemClockCore *this);");
	add_func    (0X71000326E4,0X71000326F0);
	set_func_flags(0X71000326E4,0x1400);
	SetType(0X71000326E4, "__int64 __fastcall SystemClockCore__GetContext(SystemClockCore *this, SystemClockContext *context);");
	add_func    (0X71000326F0,0X710003273C);
	set_func_flags(0X71000326F0,0x1400);
	SetType(0X71000326F0, "__int64 __fastcall GetTimeFromTimePointAndContext(_QWORD *out_time, SteadyClockTimePoint *time_point, SystemClockContext *context);");
	add_func    (0X710003273C,0X71000327CC);
	set_func_flags(0X710003273C,0x1410);
	SetType(0X710003273C, "__int64 __fastcall SystemClockCore__SetCurrentTime(SystemClockCore *this, _QWORD *new_time);");
	set_frame_size(0X710003273C, 0X40, 32, 0);
	define_local_var(0X710003273C, 0X71000327CC, "[bp-0X38]", "context");
	define_local_var(0X710003273C, 0X71000327CC, "[bp-0X18]", "time_point");
	add_func    (0X71000327CC,0X710003281C);
	set_func_flags(0X71000327CC,0x1410);
	SetType(0X71000327CC, "__int64 __fastcall SystemClockCore__SetContextAndWrite(SystemClockCore *this, SystemClockContext *context);");
	set_frame_size(0X71000327CC, 0, 32, 0);
	add_func    (0X710003281C,0X7100032824);
	set_func_flags(0X710003281C,0x1400);
	SetType(0X710003281C, "SteadyClockCore *__fastcall SystemClockCore__GetSteadyClock(SystemClockCore *this);");
	add_func    (0X7100032824,0X71000328B0);
	set_func_flags(0X7100032824,0x1410);
	SetType(0X7100032824, "bool __fastcall SystemClockCore__CheckClockSourceMatches(SystemClockCore *this);");
	set_frame_size(0X7100032824, 0X60, 0, 0);
	define_local_var(0X7100032824, 0X71000328B0, "[bp-0X58]", "out_time_point");
	define_local_var(0X7100032824, 0X71000328B0, "[bp-0X40]", "context");
	add_func    (0X71000328B0,0X71000328B8);
	set_func_flags(0X71000328B0,0x1400);
	SetType(0X71000328B0, "void __fastcall SystemClockCore__SetContextWriter(SystemClockCore *this, SystemClockContextWriter *context_writer);");
	add_func    (0X71000328B8,0X7100032920);
	set_func_flags(0X71000328B8,0x1410);
	SetType(0X71000328B8, "void __fastcall SystemClockCore__LinkOperationEvent(SystemClockCore *this, OperationEvent *operation_event);");
	set_frame_size(0X71000328B8, 0X20, 16, 0);
	add_func    (0X7100032920,0X7100032994);
	set_func_flags(0X7100032920,0x1410);
	set_frame_size(0X7100032920, 0X20, 16, 0);
	add_func    (0X7100032994,0X71000329AC);
	set_func_flags(0X7100032994,0x1400);
	SetType(0X7100032994, "__int64 __fastcall SystemClockCore_GetContext(SystemClockCore *this, SystemClockContext *out_context);");
	add_func    (0X71000329AC,0X71000329C4);
	set_func_flags(0X71000329AC,0x1400);
	SetType(0X71000329AC, "__int64 __fastcall SystemClockCore_SetContext(SystemClockCore *this, SystemClockContext *context);");
	add_func    (0X71000329C4,0X71000329C8);
	set_func_flags(0X71000329C4,0x14c0);
	SetType(0X71000329C4, "__int64 __fastcall j_Heap_Deallocate_2(__int64);");
	add_func    (0X71000329C8,0X71000329D4);
	set_func_flags(0X71000329C8,0x1400);
	SetType(0X71000329C8, "StandardSteadyClockCore *__fastcall SteadyClockCore__SetInitialised(StandardSteadyClockCore *this);");
	add_func    (0X71000329D4,0X71000329DC);
	set_func_flags(0X71000329D4,0x1400);
	SetType(0X71000329D4, "bool __fastcall SteadyClockCore__IsInitialised(StandardSteadyClockCore *this);");
	add_func    (0X71000329DC,0X7100032A90);
	set_func_flags(0X71000329DC,0x1410);
	SetType(0X71000329DC, "__int64 __fastcall SteadyClockCore__GetCurrentTimePoint(SteadyClockCore *this, SteadyClockTimePoint *out_time);");
	set_frame_size(0X71000329DC, 0, 48, 0);
	add_func    (0X7100032A90,0X7100032A9C);
	set_func_flags(0X7100032A90,0x1400);
	SetType(0X7100032A90, "s64 __fastcall SteadyClockCore__GetTestOffset(SteadyClockCore *this);");
	add_func    (0X7100032A9C,0X7100032AA8);
	set_func_flags(0X7100032A9C,0x1400);
	SetType(0X7100032A9C, "s64 __fastcall SteadyClockCore__GetInternalOffset(SteadyClockCore *this);");
	add_func    (0X7100032AA8,0X7100032AFC);
	set_func_flags(0X7100032AA8,0x1410);
	SetType(0X7100032AA8, "s64 __fastcall SteadyClockCore__GetRawTime(SteadyClockCore *this);");
	set_frame_size(0X7100032AA8, 0, 32, 0);
	add_func    (0X7100032AFC,0X7100032B08);
	set_func_flags(0X7100032AFC,0x1400);
	SetType(0X7100032AFC, "s64 __fastcall SteadyClockCore__SetTestOffset(SteadyClockCore *this, __int64 offset);");
	add_func    (0X7100032B08,0X7100032B14);
	set_func_flags(0X7100032B08,0x1400);
	SetType(0X7100032B08, "__int64 __fastcall SteadyClockCore__GetRtcValue(SteadyClockCore *this, __int64 a2);");
	add_func    (0X7100032B14,0X7100032B1C);
	set_func_flags(0X7100032B14,0x1400);
	SetType(0X7100032B14, "bool __fastcall SteadyClockCore__IsResetDetected(StandardSteadyClockCore *this);");
	add_func    (0X7100032B1C,0X7100032B28);
	set_func_flags(0X7100032B1C,0x1400);
	SetType(0X7100032B1C, "void __fastcall SteadyClockCore__SetResetDetected(StandardSteadyClockCore *this);");
	add_func    (0X7100032B28,0X7100032B70);
	set_func_flags(0X7100032B28,0x1410);
	SetType(0X7100032B28, "s64 __fastcall TickBasedSteadyClockCore__GetCurrentRawTimePoint(TickBasedSteadyClockCore *this);");
	set_frame_size(0X7100032B28, 0X20, 16, 0);
	define_local_var(0X7100032B28, 0X7100032B70, "[bp-0X18]", "time_point");
	add_func    (0X7100032B70,0X7100032B78);
	set_func_flags(0X7100032B70,0x1400);
	SetType(0X7100032B70, "__int64 TickBasedSteadyClockCore__GetTestOffset();");
	add_func    (0X7100032B78,0X7100032B7C);
	set_func_flags(0X7100032B78,0x1440);
	SetType(0X7100032B78, "void TickBasedSteadyClockCore__SetTestOffset();");
	add_func    (0X7100032B7C,0X7100032B84);
	set_func_flags(0X7100032B7C,0x1400);
	SetType(0X7100032B7C, "__int64 TickBasedSteadyClockCore__GetInternalOffset();");
	add_func    (0X7100032B84,0X7100032B88);
	set_func_flags(0X7100032B84,0x1440);
	SetType(0X7100032B84, "void TickBasedSteadyClockCore__SetInternalOffset();");
	add_func    (0X7100032B88,0X7100032B94);
	set_func_flags(0X7100032B88,0x1400);
	SetType(0X7100032B88, "__int64 __fastcall SteadyClockCore__GetRtcValue_virt(SteadyClockCore *this, __int64 out_value);");
	add_func    (0X7100032B94,0X7100032B98);
	set_func_flags(0X7100032B94,0x1400);
	SetType(0X7100032B94, "void nullsub_57();");
	add_func    (0X7100032B98,0X7100032BA0);
	set_func_flags(0X7100032B98,0x1400);
	SetType(0X7100032B98, "__int64 SteadyClockCore__GetSetupResultValue();");
	add_func    (0X7100032BA0,0X7100032BEC);
	set_func_flags(0X7100032BA0,0x1010);
	SetType(0X7100032BA0, "void __fastcall StandardSteadyClockCore__Initialise(StandardSteadyClockCore *this, _QWORD *uuid, _QWORD *rtc_offset, _QWORD *internal_offset, _QWORD *test_offset, bool is_rtc_reset_detected);");
	set_frame_size(0X7100032BA0, 0X20, 0, 0);
	add_func    (0X7100032BEC,0X7100032BF8);
	set_func_flags(0X7100032BEC,0x1400);
	SetType(0X7100032BEC, "StandardSteadyClockCore *__fastcall StandardSteadyClockCore__SetRtcOffset(StandardSteadyClockCore *this, _QWORD *rtc_offset);");
	add_func    (0X7100032BF8,0X7100032C4C);
	set_func_flags(0X7100032BF8,0x1410);
	SetType(0X7100032BF8, "void __fastcall StandardSteadyClockCore__SetContinuousAdjustment(StandardSteadyClockCore *this, _QWORD *uuid, _QWORD *time_diff);");
	set_frame_size(0X7100032BF8, 0X20, 16, 0);
	add_func    (0X7100032C4C,0X7100032CCC);
	set_func_flags(0X7100032C4C,0x1410);
	SetType(0X7100032C4C, "void __fastcall StandardSteadyClockCore__UpdateContinuousAdjustment(StandardSteadyClockCore *this, __int64 *in_time);");
	set_frame_size(0X7100032C4C, 0, 32, 0);
	add_func    (0X7100032CCC,0X7100032CF0);
	set_func_flags(0X7100032CCC,0x1400);
	SetType(0X7100032CCC, "void __fastcall StandardSteadyClockCore__GetContinuousAdjustment(StandardSteadyClockCore *this, ContinuousAdjustmentTimePoint *continuous_adjustment);");
	add_func    (0X7100032CF0,0X7100032D48);
	set_func_flags(0X7100032CF0,0x1410);
	SetType(0X7100032CF0, "__int64 __fastcall StandardSteadyClockCore__GetCurrentTimePoint(StandardSteadyClockCore *this, SteadyClockTimePoint *out_time_point);");
	set_frame_size(0X7100032CF0, 0, 32, 0);
	add_func    (0X7100032D48,0X7100032DA0);
	set_func_flags(0X7100032D48,0x1410);
	SetType(0X7100032D48, "s64 __fastcall StandardSteadyClockCore__GetCurrentRawTimePoint(StandardSteadyClockCore *this);");
	set_frame_size(0X7100032D48, 0X20, 16, 0);
	add_func    (0X7100032DA0,0X7100032DA8);
	set_func_flags(0X7100032DA0,0x1400);
	SetType(0X7100032DA0, "s64 __fastcall StandardSteadyClockCore__GetTestOffset(StandardSteadyClockCore *this);");
	add_func    (0X7100032DA8,0X7100032DB4);
	set_func_flags(0X7100032DA8,0x1400);
	SetType(0X7100032DA8, "void __fastcall StandardSteadyClockCore__SetTestOffset(StandardSteadyClockCore *this, _QWORD *offset);");
	add_func    (0X7100032DB4,0X7100032DBC);
	set_func_flags(0X7100032DB4,0x1400);
	SetType(0X7100032DB4, "s64 __fastcall StandardSteadyClockCore__GetInternalOffset(StandardSteadyClockCore *this);");
	add_func    (0X7100032DBC,0X7100032DC8);
	set_func_flags(0X7100032DBC,0x1400);
	SetType(0X7100032DBC, "StandardSteadyClockCore *__fastcall StandardSteadyClockCore__SetInternalOffset(StandardSteadyClockCore *this, _QWORD *offset);");
	add_func    (0X7100032DC8,0X7100032DCC);
	set_func_flags(0X7100032DC8,0x14c0);
	SetType(0X7100032DC8, "__int64 __fastcall j_Heap_Deallocate_3(StandardSteadyClockCore *this);");
	add_func    (0X7100032DCC,0X7100032E08);
	set_func_flags(0X7100032DCC,0x1410);
	SetType(0X7100032DCC, "unsigned __int64 __fastcall nn__timesrv__detail__core__TickBasedSteadyClockCore__TickBasedSteadyClockCore(TickBasedSteadyClockCore *this);");
	set_frame_size(0X7100032DCC, 0X20, 0, 0);
	add_func    (0X7100032E08,0X7100032E60);
	set_func_flags(0X7100032E08,0x1410);
	SetType(0X7100032E08, "__int64 __fastcall TickBasedSteadyClockCore__GetCurrentTimePoint(TickBasedSteadyClockCore *this, SteadyClockTimePoint *out_time_point);");
	set_frame_size(0X7100032E08, 0, 32, 0);
	add_func    (0X7100032E60,0X7100032E64);
	set_func_flags(0X7100032E60,0x14c0);
	SetType(0X7100032E60, "__int64 __fastcall j_Heap_Deallocate_4(StandardSteadyClockCore *this);");
	add_func    (0X7100032E64,0X7100032E94);
	set_func_flags(0X7100032E64,0x1410);
	SetType(0X7100032E64, "SystemClockCore *__fastcall nn__timesrv__detail__core__StandardLocalSystemClockCore__StandardLocalSystemClockCore(StandardLocalSystemClockCore *this, SteadyClockCore *steady_clock);");
	set_frame_size(0X7100032E64, 0X20, 0, 0);
	add_func    (0X7100032E94,0X7100032F24);
	set_func_flags(0X7100032E94,0x1410);
	SetType(0X7100032E94, "void __fastcall StandardLocalSystemClockCore__Initialise(StandardLocalSystemClockCore *this, SystemClockContext *context, _QWORD *time);");
	set_frame_size(0X7100032E94, 0X40, 16, 0);
	define_local_var(0X7100032E94, 0X7100032F24, "[bp-0X38]", "time_point");
	add_func    (0X7100032F24,0X7100032F28);
	set_func_flags(0X7100032F24,0x14c0);
	SetType(0X7100032F24, "__int64 __fastcall j_Heap_Deallocate_5(StandardSteadyClockCore *this);");
	add_func    (0X7100032F28,0X7100032F68);
	set_func_flags(0X7100032F28,0x1410);
	SetType(0X7100032F28, "SystemClockCore *__fastcall nn__timesrv__detail__core__StandardNetworkSystemClockCore__StandardNetworkSystemClockCore(StandardNetworkSystemClockCore *this, SteadyClockCore *steadyClock);");
	set_frame_size(0X7100032F28, 0X20, 0, 0);
	add_func    (0X7100032F68,0X7100032FB0);
	set_func_flags(0X7100032F68,0x1410);
	SetType(0X7100032F68, "void __fastcall StandardNetworkSystemClockContext__Initialise(StandardNetworkSystemClockCore *this, SystemClockContext *context, _QWORD *accuracy);");
	set_frame_size(0X7100032F68, 0X10, 32, 0);
	add_func    (0X7100032FB0,0X7100033038);
	set_func_flags(0X7100032FB0,0x1410);
	SetType(0X7100032FB0, "bool __fastcall StandardNetworkSystemClock__IsAccuracySufficient(StandardNetworkSystemClockCore *this);");
	set_frame_size(0X7100032FB0, 0X40, 0, 0);
	define_local_var(0X7100032FB0, 0X7100033038, "[bp-0X38]", "current_time_point");
	define_local_var(0X7100032FB0, 0X7100033038, "[bp-0X8]", "seconds");
	add_func    (0X7100033038,0X710003303C);
	set_func_flags(0X7100033038,0x14c0);
	SetType(0X7100033038, "__int64 __fastcall j_Heap_Deallocate_6(StandardSteadyClockCore *this);");
	add_func    (0X7100033040,0X71000330B8);
	set_func_flags(0X7100033040,0x1400);
	SetType(0X7100033040, "__int64 __fastcall GetSpanBetweenTimePoints(_QWORD *out_seconds, SteadyClockTimePoint *context_time_point, SteadyClockTimePoint *current_time_point);");
	add_func    (0X71000330B8,0X7100033138);
	set_func_flags(0X71000330B8,0x1410);
	SetType(0X71000330B8, "__int64 __fastcall nn__timesrv__detail__core__StandardUserSystemClockCore__StandardUserSystemClockCore(StandardUserSystemClockCore *this, StandardLocalSystemClockCore *local_system_clock, StandardNetworkSystemClockCore *network_system_clock);");
	set_frame_size(0X71000330B8, 0X20, 16, 0);
	add_func    (0X7100033138,0X71000331B0);
	set_func_flags(0X7100033138,0x1410);
	SetType(0X7100033138, "__int64 __fastcall StandardUserSystemClockCore__GetContext(StandardUserSystemClockCore *this, SystemClockContext *out_context);");
	set_frame_size(0X7100033138, 0X20, 32, 0);
	define_local_var(0X7100033138, 0X71000331B0, "[bp-0X20]", "context");
	add_func    (0X71000331B0,0X71000331BC);
	set_func_flags(0X71000331B0,0x1400);
	SetType(0X71000331B0, "__int64 StandardUserSystemClockCore__SetContext();");
	add_func    (0X71000331BC,0X71000331C4);
	set_func_flags(0X71000331BC,0x1400);
	SetType(0X71000331BC, "bool __fastcall StandardUserSystemClockCore__GetAutomaticCorrection(StandardUserSystemClockCore *this);");
	add_func    (0X71000331C4,0X710003323C);
	set_func_flags(0X71000331C4,0x1410);
	SetType(0X71000331C4, "nn::Result __fastcall StandardUserSystemClockCore__SetAutomaticCorrection(StandardUserSystemClockCore *this, bool automatic_correction);");
	set_frame_size(0X71000331C4, 0X20, 32, 0);
	define_local_var(0X71000331C4, 0X710003323C, "[bp-0X20]", "clock_context");
	add_func    (0X710003323C,0X7100033250);
	set_func_flags(0X710003323C,0x1400);
	SetType(0X710003323C, "StandardUserSystemClockCore *__usercall StandardUserSystemClock__GetTimePoint@<X0>(StandardUserSystemClockCore *this@<X0>, SteadyClockTimePoint *out_time_point@<X8>);");
	add_func    (0X7100033250,0X7100033268);
	set_func_flags(0X7100033250,0x1400);
	SetType(0X7100033250, "void __fastcall StandardUserSystemClockCore__SetTimePointAndSignal(StandardUserSystemClockCore *this, SteadyClockTimePoint *time_point);");
	add_func    (0X7100033268,0X7100033270);
	set_func_flags(0X7100033268,0x1400);
	SetType(0X7100033268, "nn::os::SystemEventType *__fastcall StandardUserSystemClockCore__GetEvent(StandardUserSystemClockCore *this);");
	add_func    (0X7100033270,0X7100033294);
	set_func_flags(0X7100033270,0x1400);
	SetType(0X7100033270, "StandardUserSystemClockCore *__fastcall StandardUserSystemClockCore__D1(StandardUserSystemClockCore *this);");
	add_func    (0X7100033294,0X71000332D4);
	set_func_flags(0X7100033294,0x1410);
	SetType(0X7100033294, "__int64 __fastcall StandardUserSystemClockCore__D0(StandardUserSystemClockCore *this);");
	set_frame_size(0X7100033294, 0X20, 0, 0);
	add_func    (0X71000332E0,0X7100033370);
	set_func_flags(0X71000332E0,0x1410);
	SetType(0X71000332E0, "void __fastcall Alarms__Alarms(Alarms *this, SteadyClockCore *steady_clock, Unk42A8 *unk);");
	set_frame_size(0X71000332E0, 0X10, 32, 0);
	add_func    (0X7100033370,0X7100033498);
	set_func_flags(0X7100033370,0x1410);
	SetType(0X7100033370, "__int64 __fastcall Alarms__EnableAlarm(Alarms *this, Alarm *alarm, _QWORD *time);");
	set_frame_size(0X7100033370, 0X10, 48, 0);
	add_func    (0X71000334A0,0X7100033588);
	set_func_flags(0X71000334A0,0x1410);
	SetType(0X71000334A0, "void __fastcall Alarms__InsertAlarm(Alarms *this, Alarm *alarm);");
	set_frame_size(0X71000334A0, 0, 48, 0);
	add_func    (0X7100033588,0X7100033634);
	set_func_flags(0X7100033588,0x1410);
	SetType(0X7100033588, "void __fastcall Alarms__DisableAlarm(Alarms *this, Alarm *alarm);");
	set_frame_size(0X7100033588, 0X20, 16, 0);
	add_func    (0X7100033640,0X7100033760);
	set_func_flags(0X7100033640,0x1410);
	SetType(0X7100033640, "void __fastcall Alarms__CheckAndSignal(Alarms *this);");
	set_frame_size(0X7100033640, 0X20, 48, 0);
	add_func    (0X7100033760,0X71000337B8);
	set_func_flags(0X7100033760,0x1410);
	SetType(0X7100033760, "bool __fastcall Alarms__GetClosestAlarm(Alarms *this, Alarm **out_alarm);");
	set_frame_size(0X7100033760, 0X20, 16, 0);
	add_func    (0X71000337B8,0X71000337C0);
	set_func_flags(0X71000337B8,0x1400);
	SetType(0X71000337B8, "nn::os::SystemEventType *__fastcall Alarms__GetEvent(Unk42F0 *this);");
	add_func    (0X71000337C0,0X71000338B8);
	set_func_flags(0X71000337C0,0x1410);
	SetType(0X71000337C0, "void __fastcall Alarm__Alarm(Alarm *this, AlarmType alarm_type);");
	set_frame_size(0X71000337C0, 0X40, 16, 0);
	add_func    (0X71000338B8,0X71000338C4);
	set_func_flags(0X71000338B8,0x1400);
	SetType(0X71000338B8, "Alarm *__fastcall Alarm__SetAlertTime(Alarm *this, _QWORD *time);");
	add_func    (0X71000338C4,0X7100033914);
	set_func_flags(0X71000338C4,0x1410);
	SetType(0X71000338C4, "__int64 __fastcall Alarm__GetPSCLockService(Alarm *this, _QWORD *a2);");
	set_frame_size(0X71000338C4, 0, 32, 0);
	add_func    (0X7100033914,0X7100033934);
	set_func_flags(0X7100033914,0x1400);
	SetType(0X7100033914, "void __fastcall Alarm__ReleaseLockService(Alarm *this);");
	add_func    (0X7100033934,0X7100033944);
	set_func_flags(0X7100033934,0x1000);
	SetType(0X7100033934, "nn::Result __fastcall Alarm__Lock(Alarm *this);");
	set_frame_size(0X7100033934, 0X20, 0, 0);
	add_func    (0X7100033944,0X7100033954);
	set_func_flags(0X7100033944,0x1400);
	SetType(0X7100033944, "bool __fastcall Alarm__HasLockService(Alarm *this);");
	add_func    (0X7100033954,0X710003395C);
	set_func_flags(0X7100033954,0x1400);
	SetType(0X7100033954, "void __fastcall Alarm__Signal(Alarm *this);");
	add_func    (0X710003395C,0X7100033964);
	set_func_flags(0X710003395C,0x1400);
	SetType(0X710003395C, "__int64 __fastcall Alarm__GetEvent(Alarm *this);");
	add_func    (0X7100033964,0X710003396C);
	set_func_flags(0X7100033964,0x1400);
	SetType(0X7100033964, "u32 __fastcall Alarm__GetPriority(Alarm *this);");
	add_func    (0X710003396C,0X7100033974);
	set_func_flags(0X710003396C,0x1400);
	SetType(0X710003396C, "s64 *__fastcall Alarm__GetAlertTime(Alarm *this);");
	add_func    (0X7100033974,0X7100033978);
	set_func_flags(0X7100033974,0x1440);
	add_func    (0X7100033978,0X710003397C);
	set_func_flags(0X7100033978,0x1440);
	SetType(0X7100033978, "void nullsub_72();");
	add_func    (0X710003397C,0X71000339E0);
	set_func_flags(0X710003397C,0x1410);
	SetType(0X710003397C, "bool __fastcall Unk42A8__GetAndClearPowerStateRequest(Unk42A8 *this, _DWORD *out_prio);");
	set_frame_size(0X710003397C, 0, 48, 0);
	add_func    (0X71000339E0,0X7100033A50);
	set_func_flags(0X71000339E0,0x1410);
	SetType(0X71000339E0, "void __fastcall sub_71000339E0(Unk42A8 *this, int priority);");
	set_frame_size(0X71000339E0, 0X20, 16, 0);
	add_func    (0X7100033A50,0X7100033AA8);
	set_func_flags(0X7100033A50,0x1410);
	SetType(0X7100033A50, "void __fastcall sub_7100033A50(Unk42A8 *this);");
	set_frame_size(0X7100033A50, 0, 32, 0);
	add_func    (0X7100033AA8,0X7100033D28);
	set_func_flags(0X7100033AA8,0x1410);
	SetType(0X7100033AA8, "void __fastcall Unk4440__Unk4440(Unk4440 *this, TimeServer *time);");
	set_frame_size(0X7100033AA8, 0X10, 64, 0);
	add_func    (0X7100033D28,0X7100033E08);
	set_func_flags(0X7100033D28,0x1410);
	SetType(0X7100033D28, "void __fastcall SetupServices_SAndP(Unk4440 *this);");
	set_frame_size(0X7100033D28, 0X10, 32, 0);
	add_func    (0X7100033E08,0X7100033E84);
	set_func_flags(0X7100033E08,0x1410);
	SetType(0X7100033E08, "void __fastcall Unk4440__Finalise(Unk4440 *this);");
	set_frame_size(0X7100033E08, 0X20, 0, 0);
	add_func    (0X7100033E84,0X7100033EA8);
	set_func_flags(0X7100033E84,0x1410);
	set_frame_size(0X7100033E84, 0X20, 0, 0);
	add_func    (0X7100033EA8,0X71000341F4);
	set_func_flags(0X7100033EA8,0x1410);
	SetType(0X7100033EA8, "__int64 __fastcall sub_7100033EA8(__int64);");
	set_frame_size(0X7100033EA8, 0X20, 16, 0);
	add_func    (0X71000341F4,0X710003424C);
	set_func_flags(0X71000341F4,0x1410);
	set_frame_size(0X71000341F4, 0X20, 16, 0);
	add_func    (0X710003424C,0X7100034274);
	set_func_flags(0X710003424C,0x1400);
	add_func    (0X7100034274,0X7100034278);
	set_func_flags(0X7100034274,0x1440);
	add_func    (0X7100034278,0X710003429C);
	set_func_flags(0X7100034278,0x1410);
	set_frame_size(0X7100034278, 0, 16, 0);
	add_func    (0X710003429C,0X71000342A8);
	set_func_flags(0X710003429C,0x1411);
	set_frame_size(0X710003429C, 0, 16, 0);
	add_func    (0X71000342A8,0X710003436C);
	set_func_flags(0X71000342A8,0x1410);
	SetType(0X71000342A8, "__int64 __fastcall sub_71000342A8(_BYTE *);");
	set_frame_size(0X71000342A8, 0, 32, 0);
	add_func    (0X710003436C,0X7100034374);
	set_func_flags(0X710003436C,0x1400);
	add_func    (0X7100034374,0X7100034378);
	set_func_flags(0X7100034374,0x1440);
	add_func    (0X7100034378,0X71000344D8);
	set_func_flags(0X7100034378,0x1410);
	set_frame_size(0X7100034378, 0X20, 16, 0);
	add_func    (0X71000344D8,0X7100034534);
	set_func_flags(0X71000344D8,0x1410);
	set_frame_size(0X71000344D8, 0X20, 16, 0);
	add_func    (0X7100034534,0X7100034540);
	set_func_flags(0X7100034534,0x1400);
	add_func    (0X7100034540,0X7100034544);
	set_func_flags(0X7100034540,0x1440);
	add_func    (0X7100034544,0X710003454C);
	set_func_flags(0X7100034544,0x1400);
	add_func    (0X710003454C,0X71000345A8);
	set_func_flags(0X710003454C,0x1410);
	set_frame_size(0X710003454C, 0X20, 16, 0);
	add_func    (0X71000345A8,0X71000345B4);
	set_func_flags(0X71000345A8,0x1400);
	add_func    (0X71000345B4,0X71000348F4);
	set_func_flags(0X71000345B4,0x1410);
	SetType(0X71000345B4, "void __fastcall sub_71000345B4(Unk4440 *this);");
	set_frame_size(0X71000345B4, 0X20, 16, 0);
	add_func    (0X71000348F4,0X7100034C18);
	set_func_flags(0X71000348F4,0x1410);
	SetType(0X71000348F4, "void __fastcall sub_71000348F4(Unk4440 *this);");
	set_frame_size(0X71000348F4, 0X20, 0, 0);
	add_func    (0X7100034C18,0X7100034C1C);
	set_func_flags(0X7100034C18,0x1440);
	add_func    (0X7100034C1C,0X7100034C20);
	set_func_flags(0X7100034C1C,0x1440);
	add_func    (0X7100034C20,0X7100034C4C);
	set_func_flags(0X7100034C20,0x1410);
	SetType(0X7100034C20, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetStandardUserSystemClock(StaticService_Wrap *this, __int64 *out_clock);");
	set_frame_size(0X7100034C20, 0X10, 16, 0);
	add_func    (0X7100034C4C,0X7100034C78);
	set_func_flags(0X7100034C4C,0x1410);
	SetType(0X7100034C4C, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetStandardNetworkSystemClock(StaticService_Wrap *this, __int64 **out_clock);");
	set_frame_size(0X7100034C4C, 0X10, 16, 0);
	add_func    (0X7100034C78,0X7100034CA4);
	set_func_flags(0X7100034C78,0x1410);
	SetType(0X7100034C78, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetStandardSteadyClock(StaticService_Wrap *this, __int64 **a2);");
	set_frame_size(0X7100034C78, 0X10, 16, 0);
	add_func    (0X7100034CA4,0X7100034CD0);
	set_func_flags(0X7100034CA4,0x1410);
	SetType(0X7100034CA4, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetTimeZoneService(StaticService_Wrap *this, __int64 *out_time_zone_service);");
	set_frame_size(0X7100034CA4, 0X10, 16, 0);
	add_func    (0X7100034CD0,0X7100034CFC);
	set_func_flags(0X7100034CD0,0x1410);
	SetType(0X7100034CD0, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetStandardLocalSystemClock(StaticService_Wrap2 *this, StandardLocalSystemClockCore **out_service);");
	set_frame_size(0X7100034CD0, 0X10, 16, 0);
	add_func    (0X7100034CFC,0X7100034D28);
	set_func_flags(0X7100034CFC,0x1410);
	SetType(0X7100034CFC, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetEphemeralNetworkSystemClock(StaticService_Wrap *this, __int64 **out_service);");
	set_frame_size(0X7100034CFC, 0X10, 16, 0);
	add_func    (0X7100034D28,0X7100034D30);
	set_func_flags(0X7100034D28,0x1400);
	SetType(0X7100034D28, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetSharedMemoryNativeHandle(StaticService_Wrap *this, nn::sf::NativeHandle *out_handle);");
	add_func    (0X7100034D30,0X7100034D38);
	set_func_flags(0X7100034D30,0x1000);
	SetType(0X7100034D30, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__SetStandardSteadyClockInternalOffset(StaticService_Wrap *this);");
	add_func    (0X7100034D38,0X7100034D40);
	set_func_flags(0X7100034D38,0x1400);
	SetType(0X7100034D38, "__int64 nn__timesrv__detail__service__IStaticService__GetStandardSteadyClockRtcValue();");
	add_func    (0X7100034D40,0X7100034D48);
	set_func_flags(0X7100034D40,0x1400);
	SetType(0X7100034D40, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__IsStandardUserSystemClockAutomaticCorrectionEnabled(StaticService_Wrap *this, bool *out_auto_correction);");
	add_func    (0X7100034D48,0X7100034D50);
	set_func_flags(0X7100034D48,0x1000);
	SetType(0X7100034D48, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__SetStandardUserSystemClockAutomaticCorrectionEnabled(StaticService_Wrap *this, bool automatic_correction);");
	set_frame_size(0X7100034D48, 0X50, 0, 0);
	add_func    (0X7100034D50,0X7100034D58);
	set_func_flags(0X7100034D50,0x1400);
	SetType(0X7100034D50, "__int64 nn__timesrv__detail__service__IStaticService__GetStandardUserSystemClockInitialYear();");
	add_func    (0X7100034D58,0X7100034D60);
	set_func_flags(0X7100034D58,0x1400);
	SetType(0X7100034D58, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__IsStandardNetworkSystemClockAccuracySufficient(StaticService_Wrap *this, bool *is_sufficient);");
	add_func    (0X7100034D60,0X7100034D68);
	set_func_flags(0X7100034D60,0x1000);
	SetType(0X7100034D60, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetStandardUserSystemClockAutomaticCorrectionUpdatedTime(StaticService_Wrap *this, SteadyClockTimePoint *out_time_point);");
	set_frame_size(0X7100034D60, 0X40, 0, 0);
	define_local_var(0X7100034D60, 0X7100034D68, "[bp-0X38]", "time_point");
	add_func    (0X7100034D68,0X7100034D70);
	set_func_flags(0X7100034D68,0x1000);
	SetType(0X7100034D68, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__CalculateMonotonicSystemClockBaseTimePoint(StaticService_Wrap *this, _QWORD *out_time, SystemClockContext *context);");
	set_frame_size(0X7100034D68, 0X50, 0, 0);
	define_local_var(0X7100034D68, 0X7100034D70, "[bp-0X48]", "current_time_point");
	add_func    (0X7100034D70,0X7100034D78);
	set_func_flags(0X7100034D70,0x1000);
	SetType(0X7100034D70, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetClockSnapshot(StaticService_Wrap *this, ClockSnapshot *out_snapshot, TimeType clock_type);");
	set_frame_size(0X7100034D70, 0X70, 0, 0);
	define_local_var(0X7100034D70, 0X7100034D78, "[bp-0X70]", "network_context");
	define_local_var(0X7100034D70, 0X7100034D78, "[bp-0X50]", "user_context");
	add_func    (0X7100034D78,0X7100034D80);
	set_func_flags(0X7100034D78,0x1400);
	SetType(0X7100034D78, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__GetClockSnapshotFromSystemClockContext(StaticService *this, ClockSnapshot *out_snapshot, SystemClockContext *user_context, SystemClockContext *network_context, TimeType clock_type);");
	add_func    (0X7100034D80,0X7100034D88);
	set_func_flags(0X7100034D80,0x1000);
	SetType(0X7100034D80, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__CalculateStandardUserSystemClockDifferenceByUser(StaticService_Wrap *this, _QWORD *out_time, ClockSnapshot *a, ClockSnapshot *b);");
	add_func    (0X7100034D88,0X7100034D90);
	set_func_flags(0X7100034D88,0x1400);
	SetType(0X7100034D88, "__int64 __fastcall nn__timesrv__detail__service__IStaticService__CalculateSpanBetween(StaticService_Wrap *this, _QWORD *out_time, ClockSnapshot *a, ClockSnapshot *b);");
	add_func    (0X7100034D90,0X7100034D94);
	set_func_flags(0X7100034D90,0x1440);
	add_func    (0X7100034D94,0X7100034D98);
	set_func_flags(0X7100034D94,0x1440);
	add_func    (0X7100034D98,0X7100034DC4);
	set_func_flags(0X7100034D98,0x1410);
	SetType(0X7100034D98, "__int64 __fastcall nn__timesrv__detail__service__IAlarmService__CreateWakeupAlarm(AlarmService_Wrap *this, __int64 *out_alarm);");
	set_frame_size(0X7100034D98, 0X10, 16, 0);
	add_func    (0X7100034DC4,0X7100034DF0);
	set_func_flags(0X7100034DC4,0x1410);
	SetType(0X7100034DC4, "__int64 __fastcall nn__timesrv__detail__service__IAlarmService__CreateBackgroundTaskAlarm(AlarmService_Wrap *this, __int64 *out_alarm);");
	set_frame_size(0X7100034DC4, 0X10, 16, 0);
	add_func    (0X7100034DF0,0X7100034DF4);
	set_func_flags(0X7100034DF0,0x1440);
	add_func    (0X7100034DF4,0X7100034DF8);
	set_func_flags(0X7100034DF4,0x1440);
	add_func    (0X7100034DF8,0X7100034E24);
	set_func_flags(0X7100034DF8,0x1410);
	SetType(0X7100034DF8, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetStaticServiceAsUser(TimeServiceManager_Wrap *this, StaticService_Wrap2 **out_service);");
	set_frame_size(0X7100034DF8, 0X10, 16, 0);
	add_func    (0X7100034E24,0X7100034E50);
	set_func_flags(0X7100034E24,0x1410);
	SetType(0X7100034E24, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetStaticServiceAsAdmin(TimeServiceManager_Wrap *this, unsigned __int64 **out_service);");
	set_frame_size(0X7100034E24, 0X10, 16, 0);
	add_func    (0X7100034E50,0X7100034E7C);
	set_func_flags(0X7100034E50,0x1410);
	SetType(0X7100034E50, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetStaticServiceAsRepair(TimeServiceManager_Wrap *this, unsigned __int64 **out_service);");
	set_frame_size(0X7100034E50, 0X10, 16, 0);
	add_func    (0X7100034E7C,0X7100034EA8);
	set_func_flags(0X7100034E7C,0x1410);
	SetType(0X7100034E7C, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetStaticServiceAsServiceManager(TimeServiceManager_Wrap *this, unsigned __int64 **out_service);");
	set_frame_size(0X7100034E7C, 0X10, 16, 0);
	add_func    (0X7100034EA8,0X7100034EB0);
	set_func_flags(0X7100034EA8,0x1000);
	SetType(0X7100034EA8, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__SetupStandardSteadyClockCore(TimeServiceManager_Wrap *this, _QWORD *uuid, __int64 rtc_offset, __int64 internal_offset, __int64 test_offset, bool is_rtc_reset_detected);");
	set_frame_size(0X7100034EA8, 0X70, 0, 0);
	add_func    (0X7100034EB0,0X7100034EB8);
	set_func_flags(0X7100034EB0,0x1000);
	SetType(0X7100034EB0, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__SetupStandardLocalSystemClockCore(TimeServiceManager_Wrap *this, SystemClockContext *context, __int64 time);");
	set_frame_size(0X7100034EB0, 0X30, 0, 0);
	define_local_var(0X7100034EB0, 0X7100034EB8, "[bp-0X28]", "a3");
	add_func    (0X7100034EB8,0X7100034EC0);
	set_func_flags(0X7100034EB8,0x1400);
	SetType(0X7100034EB8, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__SetupStandardNetworkSystemClockCore(TimeServiceManager_Wrap *this, SystemClockContext *context, __int64 accuracy);");
	add_func    (0X7100034EC0,0X7100034EC8);
	set_func_flags(0X7100034EC0,0x1400);
	SetType(0X7100034EC0, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__SetupStandardUserSystemClockCore(TimeServiceManager_Wrap *this, bool automatic_correction, SteadyClockTimePoint *time_point);");
	add_func    (0X7100034EC8,0X7100034ED0);
	set_func_flags(0X7100034EC8,0x1400);
	SetType(0X7100034EC8, "void __fastcall nn__timesrv__detail__service__ITimeServiceManager__SetupTimeZoneServiceCore(TimeServiceManager_Wrap *this, TimeZone::LocationName *name, SteadyClockTimePoint *time_point, unsigned int total_location_name_count, __int64 rule_version, nn::sf::detail::PointerAndSize *rule);");
	add_func    (0X7100034ED0,0X7100034ED8);
	set_func_flags(0X7100034ED0,0x1400);
	SetType(0X7100034ED0, "void __fastcall nn__timesrv__detail__service__ITimeServiceManager__SetupEphemeralNetworkSystemClockCore(TimeServiceManager_Wrap *this);");
	add_func    (0X7100034ED8,0X7100034EE0);
	set_func_flags(0X7100034ED8,0x1400);
	SetType(0X7100034ED8, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetStandardLocalClockOperationEvent(TimeServiceManager_Wrap *this, nn::sf::NativeHandle *);");
	add_func    (0X7100034EE0,0X7100034EE8);
	set_func_flags(0X7100034EE0,0x1400);
	SetType(0X7100034EE0, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetStandardNetworkClockOperationEventForServiceManager(TimeServiceManager_Wrap *this, nn::sf::NativeHandle *handle);");
	add_func    (0X7100034EE8,0X7100034EF0);
	set_func_flags(0X7100034EE8,0x1400);
	SetType(0X7100034EE8, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetEphemeralNetworkClockOperationEventForServiceManager(TimeServiceManager_Wrap *this, nn::sf::NativeHandle *handle);");
	add_func    (0X7100034EF0,0X7100034EF8);
	set_func_flags(0X7100034EF0,0x1400);
	SetType(0X7100034EF0, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetStandardUserSystemClockAutomaticCorrectionUpdatedEvent(TimeServiceManager_Wrap *this, nn::sf::NativeHandle *);");
	add_func    (0X7100034EF8,0X7100034F00);
	set_func_flags(0X7100034EF8,0x1000);
	SetType(0X7100034EF8, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__SetStandardSteadyClockBaseTime(TimeServiceManager_Wrap *this, s64 rtc_offset);");
	set_frame_size(0X7100034EF8, 0X60, 0, 0);
	define_local_var(0X7100034EF8, 0X7100034F00, "[bp-0X60]", "continuous_time_point");
	define_local_var(0X7100034EF8, 0X7100034F00, "[bp-0X28]", "time");
	add_func    (0X7100034F00,0X7100034F08);
	set_func_flags(0X7100034F00,0x1400);
	SetType(0X7100034F00, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetClosestAlarmUpdatedEvent(TimeServiceManager_Wrap *this, nn::sf::NativeHandle *);");
	add_func    (0X7100034F08,0X7100034F10);
	set_func_flags(0X7100034F08,0x1400);
	SetType(0X7100034F08, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__CheckAndSignalAlarms(TimeServiceManager_Wrap *this);");
	add_func    (0X7100034F10,0X7100034F18);
	set_func_flags(0X7100034F10,0x1000);
	SetType(0X7100034F10, "__int64 __fastcall nn__timesrv__detail__service__ITimeServiceManager__GetClosestAlarmInfo(TimeServiceManager_Wrap *this, bool *out_valid, AlarmInfo *alarm_info, s64 *out_time);");
	set_frame_size(0X7100034F10, 0X40, 0, 0);
	define_local_var(0X7100034F10, 0X7100034F18, "[bp-0X38]", "closest_alarm");
	add_func    (0X7100034F18,0X7100034F1C);
	set_func_flags(0X7100034F18,0x1440);
	add_func    (0X7100034F1C,0X7100034F20);
	set_func_flags(0X7100034F1C,0x1440);
	add_func    (0X7100034F20,0X7100034F28);
	set_func_flags(0X7100034F20,0x1400);
	SetType(0X7100034F20, "__int64 __fastcall nn__timesrv__detail__service__IPowerStateRequestHandler__GetPowerStateRequestEventReadableHandle(PowerStateRequestHandler_Wrap *this, nn::sf::NativeHandle *out_handle);");
	add_func    (0X7100034F28,0X7100034F30);
	set_func_flags(0X7100034F28,0x1000);
	SetType(0X7100034F28, "__int64 __fastcall nn__timesrv__detail__service__IPowerStateRequestHandler__GetAndClearPowerStateRequest(PowerStateRequestHandler_Wrap *this, bool *out_cleared, _DWORD *out_priority);");
	set_frame_size(0X7100034F28, 0X30, 0, 0);
	add_func    (0X7100034F30,0X7100035038);
	set_func_flags(0X7100034F30,0x1410);
	SetType(0X7100034F30, "__int64 __fastcall ServiceHandler_TimeM(__int64 *, __int64 *, __int64 *);");
	set_frame_size(0X7100034F30, 0X30, 0, 0);
	add_func    (0X7100035038,0X7100036DB0);
	set_func_flags(0X7100035038,0x1410);
	SetType(0X7100035038, "__int64 __fastcall sub_7100035038(unsigned __int64 *a1, TimeServiceManager_Wrap *service, __int64 *a3, __int64 **a4, int cmd);");
	set_frame_size(0X7100035038, 0X120, 32, 0);
	add_func    (0X7100036DB0,0X7100036EB8);
	set_func_flags(0X7100036DB0,0x1410);
	SetType(0X7100036DB0, "__int64 __fastcall ServiceHandler_TimeSU(__int64 *, __int64 (__fastcall ***)(__int64, __int64 *), __int64 *);");
	set_frame_size(0X7100036DB0, 0X30, 0, 0);
	add_func    (0X7100036EB8,0X7100039108);
	set_func_flags(0X7100036EB8,0x1410);
	SetType(0X7100036EB8, "__int64 __fastcall sub_7100036EB8(_QWORD *, __int64 *, __int64 (__fastcall ***)(__int64, __int64 *), __int64, int);");
	set_frame_size(0X7100036EB8, 0X120, 32, 0);
	add_func    (0X7100039108,0X7100039210);
	set_func_flags(0X7100039108,0x1410);
	SetType(0X7100039108, "__int64 __fastcall ServiceHandler_ISystemClock_(__int64, __int64, __int64 *);");
	set_frame_size(0X7100039108, 0X30, 0, 0);
}

static Functions_1(void) {

	add_func    (0X7100039210,0X7100039A0C);
	set_func_flags(0X7100039210,0x1410);
	SetType(0X7100039210, "__int64 __fastcall ServiceHandler_ISystemClock(_QWORD *, __int64 *, __int64 (__fastcall ***)(__int64, __int64 *), __int64 **, int);");
	set_frame_size(0X7100039210, 0XE0, 32, 0);
	add_func    (0X7100039A0C,0X7100039B14);
	set_func_flags(0X7100039A0C,0x1410);
	SetType(0X7100039A0C, "__int64 __fastcall ServiceHandler_ISteadyClock_(__int64, __int64, __int64 *);");
	set_frame_size(0X7100039A0C, 0X30, 0, 0);
	add_func    (0X7100039B14,0X710003A620);
	set_func_flags(0X7100039B14,0x1410);
	SetType(0X7100039B14, "__int64 __fastcall ServiceHandler_ISteadyClock(__int64 *, __int64, __int64 (__fastcall ***)(__int64, __int64 *), _QWORD *, int);");
	set_frame_size(0X7100039B14, 0XE0, 32, 0);
	add_func    (0X710003A620,0X710003A728);
	set_func_flags(0X710003A620,0x1410);
	SetType(0X710003A620, "__int64 __fastcall ServiceHandler_ITimeZoneService_(__int64 *, __int64 *, __int64 *);");
	set_frame_size(0X710003A620, 0X30, 0, 0);
	add_func    (0X710003A728,0X710003BF10);
	set_func_flags(0X710003A728,0x1400);
	SetType(0X710003A728, "__int64 __fastcall ServiceHandler_ITimeZoneService(unsigned __int64 *, __int64 *, __int64 *, unsigned __int64 **, int);");
	set_frame_size(0X710003A728, 0X120, 0, 0);
	add_func    (0X710003BF10,0X710003C04C);
	set_func_flags(0X710003BF10,0x1410);
	SetType(0X710003BF10, "__int64 __fastcall ServiceHandler_TimeAL(__int64, __int64 (__fastcall ***)(__int64, __int64 *), __int64 *);");
	set_frame_size(0X710003BF10, 0X30, 0, 0);
	add_func    (0X710003C04C,0X710003C220);
	set_func_flags(0X710003C04C,0x1410);
	SetType(0X710003C04C, "__int64 __fastcall sub_710003C04C(_QWORD *, __int64, __int64 (__fastcall ***)(__int64, __int64 *), __int64 *);");
	set_frame_size(0X710003C04C, 0XE0, 32, 0);
	add_func    (0X710003C220,0X710003C3F4);
	set_func_flags(0X710003C220,0x1410);
	SetType(0X710003C220, "__int64 __fastcall sub_710003C220(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X710003C220, 0XE0, 32, 0);
	add_func    (0X710003C3F4,0X710003C4FC);
	set_func_flags(0X710003C3F4,0x1410);
	SetType(0X710003C3F4, "__int64 __fastcall ServiceHandler_ISteadyClockAlarm_(__int64, __int64, __int64 *);");
	set_frame_size(0X710003C3F4, 0X30, 0, 0);
	add_func    (0X710003C4FC,0X710003CCC4);
	set_func_flags(0X710003C4FC,0x1410);
	SetType(0X710003C4FC, "__int64 __fastcall ServiceHandler_ISteadyClockAlarm(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X710003C4FC, 0XE0, 32, 0);
	add_func    (0X710003CCC4,0X710003CF1C);
	set_func_flags(0X710003CCC4,0x1410);
	SetType(0X710003CCC4, "__int64 __fastcall ServiceHandler_IPowerStateRequestHandler(__int64, __int64 (__fastcall ***)(__int64, __int64 *), __int64 *);");
	set_frame_size(0X710003CCC4, 0XE0, 32, 0);
	add_func    (0X710003CF1C,0X710003D0C0);
	set_func_flags(0X710003CF1C,0x1410);
	SetType(0X710003CF1C, "__int64 __fastcall sub_710003CF1C(_QWORD, _QWORD, _QWORD, _QWORD);");
	set_frame_size(0X710003CF1C, 0XC0, 32, 0);
	add_func    (0X710003D0C0,0X710003D104);
	set_func_flags(0X710003D0C0,0x1400);
	SetType(0X710003D0C0, "StaticService *__fastcall nn__timesrv__detail__service__StaticService__StaticService(StaticService *this, StaticServiceSetupInfo *info, TimeServer *time, __int64 heap);");
	add_func    (0X710003D104,0X710003D108);
	set_func_flags(0X710003D104,0x1440);
	SetType(0X710003D104, "__int64 __fastcall nullsub_6(_QWORD);");
	add_func    (0X710003D108,0X710003D250);
	set_func_flags(0X710003D108,0x1410);
	SetType(0X710003D108, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetStandardUserSystemClock(StaticService *this, __int64 **out_clock);");
	set_frame_size(0X710003D108, 0X20, 32, 0);
	add_func    (0X710003D250,0X710003D398);
	set_func_flags(0X710003D250,0x1410);
	SetType(0X710003D250, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetStandardNetworkSystemClock(StaticService *this, __int64 **a2);");
	set_frame_size(0X710003D250, 0X20, 32, 0);
	add_func    (0X710003D398,0X710003D4E0);
	set_func_flags(0X710003D398,0x1410);
	SetType(0X710003D398, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetEphemeralNetworkSystemClock(StaticService *this, __int64 **out_service);");
	set_frame_size(0X710003D398, 0X20, 32, 0);
	add_func    (0X710003D4E0,0X710003D524);
	set_func_flags(0X710003D4E0,0x1410);
	SetType(0X710003D4E0, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetSharedMemoryNativeHandle(StaticService *this, nn::sf::NativeHandle *out_handle);");
	set_frame_size(0X710003D4E0, 0X20, 0, 0);
	add_func    (0X710003D524,0X710003D668);
	set_func_flags(0X710003D524,0x1410);
	SetType(0X710003D524, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetStandardLocalSystemClock(StaticService *this, SystemClock_Wrap ***out_service);");
	set_frame_size(0X710003D524, 0X20, 32, 0);
	add_func    (0X710003D668,0X710003D7AC);
	set_func_flags(0X710003D668,0x1410);
	SetType(0X710003D668, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetStandardSteadyClock(StaticService *this, unsigned __int64 **out_clock);");
	set_frame_size(0X710003D668, 0X20, 32, 0);
	add_func    (0X710003D7AC,0X710003D8EC);
	set_func_flags(0X710003D7AC,0x1410);
	SetType(0X710003D7AC, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetTimeZoneService(StaticService *this, __int64 **out_time_zone_service);");
	set_frame_size(0X710003D7AC, 0X20, 32, 0);
	add_func    (0X710003D8EC,0X710003D908);
	set_func_flags(0X710003D8EC,0x1400);
	SetType(0X710003D8EC, "__int64 __fastcall nn__timesrv__detail__service__StaticService__SetStandardSteadyClockInternalOffset(StaticService *this);");
	add_func    (0X710003D914,0X710003D968);
	set_func_flags(0X710003D914,0x1410);
	SetType(0X710003D914, "__int64 __fastcall nn__timesrv__detail__service__StaticService__IsStandardUserSystemClockAutomaticCorrectionEnabled(StaticService *this, bool *automatic_correction);");
	set_frame_size(0X710003D914, 0, 32, 0);
	add_func    (0X710003D968,0X710003DA5C);
	set_func_flags(0X710003D968,0x1410);
	SetType(0X710003D968, "__int64 __fastcall nn__timesrv__detail__service__StaticService__SetStandardUserSystemClockAutomaticCorrectionEnabled(StaticService *this, bool auto_correction);");
	set_frame_size(0X710003D968, 0X40, 16, 0);
	define_local_var(0X710003D968, 0X710003DA5C, "[bp-0X38]", "timme_point");
	add_func    (0X710003DA5C,0X710003DA8C);
	set_func_flags(0X710003DA5C,0x1410);
	SetType(0X710003DA5C, "__int64 __fastcall nn__timesrv__detail__service__StaticService__IsStandardNetworkSystemClockAccuracySufficient(StaticService *this, _BYTE *is_sufficient);");
	set_frame_size(0X710003DA5C, 0X20, 0, 0);
	add_func    (0X710003DA8C,0X710003DAF4);
	set_func_flags(0X710003DA8C,0x1410);
	SetType(0X710003DA8C, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetStandardUserSystemClockAutomaticCorrectionUpdatedTime(StaticService *this, SteadyClockTimePoint *out_time_point);");
	set_frame_size(0X710003DA8C, 0X20, 32, 0);
	add_func    (0X710003DAF4,0X710003DBDC);
	set_func_flags(0X710003DAF4,0x1410);
	SetType(0X710003DAF4, "__int64 __fastcall nn__timesrv__detail__service__StaticService__CalculateMonotonicSystemClockBaseTimePoint(StaticService *this, _QWORD *out_time, SystemClockContext *context);");
	set_frame_size(0X710003DAF4, 0X40, 16, 0);
	define_local_var(0X710003DAF4, 0X710003DBDC, "[bp-0X38]", "time_point");
	add_func    (0X710003DBDC,0X710003DC5C);
	set_func_flags(0X710003DBDC,0x1410);
	SetType(0X710003DBDC, "__int64 __fastcall nn__timesrv__detail__service__StaticService__GetClockSnapshot(StaticService *this, ClockSnapshot *out_snapshot, TimeType clock_type);");
	set_frame_size(0X710003DBDC, 0X60, 16, 0);
	define_local_var(0X710003DBDC, 0X710003DC5C, "[bp-0X60]", "network_ctx");
	define_local_var(0X710003DBDC, 0X710003DC5C, "[bp-0X40]", "user_ctx");
	add_func    (0X710003DC5C,0X710003DD6C);
	set_func_flags(0X710003DC5C,0x1410);
	SetType(0X710003DC5C, "__int64 __fastcall StaticService__GetClockSnapshotImpl(StaticService *this, ClockSnapshot *out_snapshot, SystemClockContext *user_context, SystemClockContext *network_context, TimeType clock_type);");
	set_frame_size(0X710003DC5C, 0, 64, 0);
	add_func    (0X710003DD6C,0X710003DE20);
	set_func_flags(0X710003DD6C,0x1400);
	SetType(0X710003DD6C, "__int64 __fastcall nn__timesrv__detail__service__StaticService__CalculateStandardUserSystemClockDifferenceByUser(StaticService *thia, _QWORD *out_time, ClockSnapshot *a, ClockSnapshot *b);");
	add_func    (0X710003DE20,0X710003DE98);
	set_func_flags(0X710003DE20,0x1410);
	SetType(0X710003DE20, "__int64 __fastcall nn__timesrv__detail__service__StaticService__CalculateSpanBetween(StaticService *this, _QWORD *out_time, ClockSnapshot *a, ClockSnapshot *b);");
	set_frame_size(0X710003DE20, 0X20, 16, 0);
	define_local_var(0X710003DE20, 0X710003DE98, "[bp-0X8]", "out_seconds");
	add_func    (0X710003DEA4,0X710003DEAC);
	set_func_flags(0X710003DEA4,0x1400);
	add_func    (0X710003DEAC,0X710003DF14);
	set_func_flags(0X710003DEAC,0x1410);
	set_frame_size(0X710003DEAC, 0X20, 16, 0);
	add_func    (0X710003DF14,0X710003DF1C);
	set_func_flags(0X710003DF14,0x1000);
	SetType(0X710003DF14, "__int64 __fastcall nn__timesrv__detail__service__ISystemClock__GetCurrentTime(SystemClock_Wrap *this, _QWORD *out_time);");
	set_frame_size(0X710003DF14, 0X30, 0, 0);
	define_local_var(0X710003DF14, 0X710003DF1C, "[bp-0X28]", "out_time_1");
	add_func    (0X710003DF1C,0X710003DF44);
	set_func_flags(0X710003DF1C,0x1410);
	SetType(0X710003DF1C, "__int64 __fastcall nn__timesrv__detail__service__ISystemClock__SetCurrentTime(SystemClock_Wrap *this, __int64 in_time);");
	set_frame_size(0X710003DF1C, 0X10, 16, 0);
	add_func    (0X710003DF44,0X710003DF4C);
	set_func_flags(0X710003DF44,0x1400);
	SetType(0X710003DF44, "void __fastcall nn__timesrv__detail__service__ISystemClock__GetSystemClockContext(SystemClock_Wrap *this, SystemClockContext *context);");
	set_frame_size(0X710003DF44, 0X40, 0, 0);
	add_func    (0X710003DF4C,0X710003DF54);
	set_func_flags(0X710003DF4C,0x1400);
	SetType(0X710003DF4C, "__int64 __fastcall nn__timesrv__detail__service__ISystemClock__SetSystemClockContext(SystemClock_Wrap *this, SystemClockContext *);");
	add_func    (0X710003DF54,0X710003DF5C);
	set_func_flags(0X710003DF54,0x1000);
	SetType(0X710003DF54, "__int64 __fastcall nn__timesrv__detail__service__ISystemClock__GetOperationEventReadableHandle(SystemClock_Wrap *this, nn::sf::NativeHandle *out_handle);");
	set_frame_size(0X710003DF54, 0X40, 0, 0);
	add_func    (0X710003DF5C,0X710003DF60);
	set_func_flags(0X710003DF5C,0x1440);
	add_func    (0X710003DF60,0X710003DF68);
	set_func_flags(0X710003DF60,0x1400);
	add_func    (0X710003DF68,0X710003DFD0);
	set_func_flags(0X710003DF68,0x1410);
	set_frame_size(0X710003DF68, 0X20, 16, 0);
	add_func    (0X710003DFD0,0X710003DFD8);
	set_func_flags(0X710003DFD0,0x1000);
	SetType(0X710003DFD0, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClock__GetCurrentTimePoint(SteadyClock_Wrap *this, SteadyClockTimePoint *out_time_point);");
	set_frame_size(0X710003DFD0, 0X40, 0, 0);
	define_local_var(0X710003DFD0, 0X710003DFD8, "[bp-0X38]", "time_point");
	add_func    (0X710003DFD8,0X710003DFE0);
	set_func_flags(0X710003DFD8,0x1400);
	SetType(0X710003DFD8, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClock__GetTestOffset(SteadyClock_Wrap *, __int64 *);");
	add_func    (0X710003DFE0,0X710003E008);
	set_func_flags(0X710003DFE0,0x1410);
	SetType(0X710003DFE0, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClock__SetTestOffset(SteadyClock_Wrap *this, __int64 test_offset);");
	set_frame_size(0X710003DFE0, 0X10, 16, 0);
	add_func    (0X710003E008,0X710003E010);
	set_func_flags(0X710003E008,0x1000);
	SetType(0X710003E008, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClock__GetRtcValue(SteadyClock_Wrap *this, _QWORD *out_rtc_value);");
	set_frame_size(0X710003E008, 0X30, 0, 0);
	define_local_var(0X710003E008, 0X710003E010, "[bp-0X28]", "rtc_value");
	add_func    (0X710003E010,0X710003E018);
	set_func_flags(0X710003E010,0x1400);
	SetType(0X710003E010, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClock__IsRtcResetDetected(SteadyClock_Wrap *a1, _BYTE *out_detected);");
	add_func    (0X710003E018,0X710003E020);
	set_func_flags(0X710003E018,0x1400);
	SetType(0X710003E018, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClock__GetSetupResultValue(SteadyClock_Wrap *this, _DWORD *out_setup_result_value);");
	add_func    (0X710003E020,0X710003E028);
	set_func_flags(0X710003E020,0x1400);
	SetType(0X710003E020, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClock__GetInternalOffset(SteadyClock_Wrap *this, __int64 *out_internal_offset);");
	add_func    (0X710003E028,0X710003E02C);
	set_func_flags(0X710003E028,0x1440);
	add_func    (0X710003E02C,0X710003E034);
	set_func_flags(0X710003E02C,0x1400);
	add_func    (0X710003E034,0X710003E094);
	set_func_flags(0X710003E034,0x1410);
	set_frame_size(0X710003E034, 0X20, 16, 0);
	add_func    (0X710003E094,0X710003E09C);
	set_func_flags(0X710003E094,0x1000);
	SetType(0X710003E094, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__GetDeviceLocationName(TimeZoneService_Wrap *this, TimeZone::LocationName *out_name);");
	add_func    (0X710003E09C,0X710003E0A4);
	set_func_flags(0X710003E09C,0x1000);
	SetType(0X710003E09C, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__SetDeviceLocationName(TimeZoneService_Wrap *this, TimeZone::LocationName *in_name);");
	add_func    (0X710003E0A4,0X710003E0AC);
	set_func_flags(0X710003E0A4,0x1400);
	SetType(0X710003E0A4, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__GetTotalLocationNameCount(TimeZoneService_Wrap *this, _DWORD *out_location_count);");
	add_func    (0X710003E0AC,0X710003E0C0);
	set_func_flags(0X710003E0AC,0x1400);
	SetType(0X710003E0AC, "__int64 nn__timesrv__detail__service__ITimeZoneService__LoadLocationNameList();");
	add_func    (0X710003E0C0,0X710003E0C8);
	set_func_flags(0X710003E0C0,0x1400);
	SetType(0X710003E0C0, "__int64 nn__timesrv__detail__service__ITimeZoneService__LoadTimeZoneRule();");
	add_func    (0X710003E0C8,0X710003E0D0);
	set_func_flags(0X710003E0C8,0x1400);
	SetType(0X710003E0C8, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__GetTimeZoneRuleVersion(TimeZoneService_Wrap *this, TimeZone::TimeZoneRuleVersion *out_version);");
	add_func    (0X710003E0D0,0X710003E0D8);
	set_func_flags(0X710003E0D0,0x1000);
	SetType(0X710003E0D0, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__GetDeviceLocationNameAndUpdatedTime(TimeZoneService_Wrap *this, TimeZone::LocationName *out_name, SteadyClockTimePoint *out_time_point);");
	set_frame_size(0X710003E0D0, 0X40, 0, 0);
	define_local_var(0X710003E0D0, 0X710003E0D8, "[bp-0X38]", "time_point");
	add_func    (0X710003E0D8,0X710003E0E0);
	set_func_flags(0X710003E0D8,0x1000);
	SetType(0X710003E0D8, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__SetDeviceLocationNameWithTimeZoneRule(TimeZoneService_Wrap *this, TimeZone::LocationName *name, nn::sf::detail::PointerAndSize *rule);");
	set_frame_size(0X710003E0D8, 0X40, 0, 0);
	define_local_var(0X710003E0D8, 0X710003E0E0, "[bp-0X38]", "time_point");
	add_func    (0X710003E0E0,0X710003E0E8);
	set_func_flags(0X710003E0E0,0x1400);
	SetType(0X710003E0E0, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__ParseTimeZoneBinary(TimeZoneService_Wrap *this, TimeZone::Rule *out_rule, nn::sf::detail::PointerAndSize *binary);");
	add_func    (0X710003E0E8,0X710003E0F0);
	set_func_flags(0X710003E0E8,0x1400);
	SetType(0X710003E0E8, "__int64 nn__timesrv__detail__service__ITimeZoneService__GetDeviceLocationNameOperationEventReadableHandle();");
	add_func    (0X710003E0F0,0X710003E118);
	set_func_flags(0X710003E0F0,0x1410);
	SetType(0X710003E0F0, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__ToCalendarTime(TimeZoneService_Wrap *this, TimeZone::CalendarTime *calendar_time, TimeZone::CalendarAdditionalInfo *additional_info, __int64 time, TimeZone::Rule *rule);");
	set_frame_size(0X710003E0F0, 0X10, 16, 0);
	add_func    (0X710003E118,0X710003E140);
	set_func_flags(0X710003E118,0x1410);
	SetType(0X710003E118, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__ToCalendarTimeWithMyRule(TimeZoneService_Wrap *this, TimeZone::CalendarTime *out_calendar, TimeZone::CalendarAdditionalInfo *out_additional_info, __int64 time);");
	set_frame_size(0X710003E118, 0X10, 16, 0);
	add_func    (0X710003E140,0X710003E174);
	set_func_flags(0X710003E140,0x1410);
	SetType(0X710003E140, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__ToPosixTime(TimeZoneService_Wrap *this, s32 *out_count, nn::sf::detail::PointerAndSize *out_times, TimeZone::CalendarTime *calendar, TimeZone::Rule *rule);");
	set_frame_size(0X710003E140, 0X10, 16, 0);
	add_func    (0X710003E174,0X710003E1A4);
	set_func_flags(0X710003E174,0x1410);
	SetType(0X710003E174, "__int64 __fastcall nn__timesrv__detail__service__ITimeZoneService__ToPosixTimeWithMyRule(TimeZoneService_Wrap *this, __int64 *out_count, nn::sf::detail::PointerAndSize *out_times, TimeZone::CalendarTime *calendar);");
	set_frame_size(0X710003E174, 0X10, 16, 0);
	add_func    (0X710003E1A4,0X710003E1A8);
	set_func_flags(0X710003E1A4,0x1440);
	add_func    (0X710003E1A8,0X710003E1BC);
	set_func_flags(0X710003E1A8,0x1400);
	SetType(0X710003E1A8, "SystemClock *__fastcall nn__timesrv__detail__service__SystemClock__SystemClock(SystemClock *this, StandardUserSystemClockCore *system_clock, __int64 heap, char a4, char a5);");
	add_func    (0X710003E1BC,0X710003E238);
	set_func_flags(0X710003E1BC,0x1410);
	set_frame_size(0X710003E1BC, 0X20, 16, 0);
	add_func    (0X710003E238,0X710003E2B0);
	set_func_flags(0X710003E238,0x1410);
	SetType(0X710003E238, "__int64 __fastcall nn__timesrv__detail__service__SystemClock__GetCurrentTime(SystemClock *this, _QWORD *out_time);");
	set_frame_size(0X710003E238, 0X10, 32, 0);
	add_func    (0X710003E2B0,0X710003E314);
	set_func_flags(0X710003E2B0,0x1410);
	SetType(0X710003E2B0, "__int64 __fastcall nn__timesrv__detail__service__SystemClock__SetCurrentTime(SystemClock *this, __int64 time);");
	set_frame_size(0X710003E2B0, 0, 32, 0);
	add_func    (0X710003E314,0X710003E394);
	set_func_flags(0X710003E314,0x1410);
	SetType(0X710003E314, "__int64 __fastcall nn__timesrv__detail__service__SystemClock__GetSystemClockContext(SystemClock *this, SystemClockContext *out_context);");
	set_frame_size(0X710003E314, 0X20, 32, 0);
	add_func    (0X710003E394,0X710003E3F8);
	set_func_flags(0X710003E394,0x1410);
	SetType(0X710003E394, "__int64 __fastcall nn__timesrv__detail__service__SystemClock__SetSystemClockContext(SystemClock *this, SystemClockContext *context);");
	set_frame_size(0X710003E394, 0, 32, 0);
	add_func    (0X710003E3F8,0X710003E4D8);
	set_func_flags(0X710003E3F8,0x1410);
	SetType(0X710003E3F8, "__int64 __fastcall nn__timesrv__detail__service__SystemClock__GetOperationEventReadableHandle(SystemClock *this, nn::sf::NativeHandle *out_handle);");
	set_frame_size(0X710003E3F8, 0X10, 48, 0);
	add_func    (0X710003E4D8,0X710003E4E8);
	set_func_flags(0X710003E4D8,0x1400);
	SetType(0X710003E4D8, "SteadyClock *__fastcall nn__timesrv__detail__service__SteadyClock__SteadyClock(SteadyClock *this, TimeServer *time, char a3, char a4);");
	add_func    (0X710003E4E8,0X710003E4EC);
	set_func_flags(0X710003E4E8,0x1440);
	add_func    (0X710003E4EC,0X710003E56C);
	set_func_flags(0X710003E4EC,0x1410);
	SetType(0X710003E4EC, "__int64 __fastcall nn__timesrv__detail__service__SteadyClock__GetCurrentTimePoint(SteadyClock *this, SteadyClockTimePoint *out_time_point);");
	set_frame_size(0X710003E4EC, 0X20, 32, 0);
	define_local_var(0X710003E4EC, 0X710003E56C, "[bp-0X18]", "time_point_1");
	add_func    (0X710003E56C,0X710003E5C4);
	set_func_flags(0X710003E56C,0x1410);
	SetType(0X710003E56C, "__int64 __fastcall nn__timesrv__detail__service__SteadyClock__GetTestOffset(SteadyClock *this, __int64 *out_test_offset);");
	set_frame_size(0X710003E56C, 0, 32, 0);
	add_func    (0X710003E5C4,0X710003E648);
	set_func_flags(0X710003E5C4,0x1410);
	SetType(0X710003E5C4, "__int64 __fastcall nn__timesrv__detail__service__SteadyClock__SetTestOffset(SteadyClock *this, __int64 *in_offset);");
	set_frame_size(0X710003E5C4, 0X10, 32, 0);
	define_local_var(0X710003E5C4, 0X710003E648, "[bp-0X8]", "offset");
	add_func    (0X710003E648,0X710003E6C0);
	set_func_flags(0X710003E648,0x1410);
	SetType(0X710003E648, "__int64 __fastcall nn__timesrv__detail__service__SteadyClock__GetRtcValue(SteadyClock *this, _QWORD *out_rtc_value);");
	set_frame_size(0X710003E648, 0X10, 32, 0);
	define_local_var(0X710003E648, 0X710003E6C0, "[bp-0X8]", "out_rtc");
	add_func    (0X710003E6C0,0X710003E71C);
	set_func_flags(0X710003E6C0,0x1410);
	SetType(0X710003E6C0, "__int64 __fastcall nn__timesrv__detail__service__SteadyClock__IsRtcResetDetected(SteadyClock *this, _BYTE *out_rtc_reset_detected);");
	set_frame_size(0X710003E6C0, 0, 32, 0);
	add_func    (0X710003E71C,0X710003E77C);
	set_func_flags(0X710003E71C,0x1410);
	SetType(0X710003E71C, "__int64 __fastcall nn__timesrv__detail__service__SteadyClock__GetSetupResultValue(SteadyClock *this, _DWORD *out_setup_result_value);");
	set_frame_size(0X710003E71C, 0, 32, 0);
	add_func    (0X710003E77C,0X710003E7D4);
	set_func_flags(0X710003E77C,0x1410);
	SetType(0X710003E77C, "__int64 __fastcall nn__timesrv__detail__service__SteadyClock__GetInternalOffset(SteadyClock *this, __int64 *out_internal_offset);");
	set_frame_size(0X710003E77C, 0, 32, 0);
	add_func    (0X710003E7D4,0X710003E7E0);
	set_func_flags(0X710003E7D4,0x1400);
	SetType(0X710003E7D4, "TimeZoneService *__fastcall nn__timesrv__detail__service__TimeZoneService__TimeZoneService(TimeZoneService *this, StandardSteadyClockCore *steady_clock, TimeZone *time_zone, char a4);");
	add_func    (0X710003E7E0,0X710003E7E8);
	set_func_flags(0X710003E7E0,0x1400);
	SetType(0X710003E7E0, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__GetDeviceLocationName(TimeZoneService *this, TimeZone::LocationName *name);");
	add_func    (0X710003E7E8,0X710003E804);
	set_func_flags(0X710003E7E8,0x1400);
	SetType(0X710003E7E8, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__SetDeviceLocationName(TimeZoneService *this);");
	add_func    (0X710003E804,0X710003E844);
	set_func_flags(0X710003E804,0x1410);
	SetType(0X710003E804, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__GetTotalLocationNameCount(TimeZoneService *this, _DWORD *out_location_count);");
	set_frame_size(0X710003E804, 0X20, 0, 0);
	add_func    (0X710003E864,0X710003E8C8);
	set_func_flags(0X710003E864,0x1410);
	SetType(0X710003E864, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__GetDeviceLocationNameAndUpdatedTime(TimeZoneService *this, TimeZone::LocationName *name, SteadyClockTimePoint *out_time_point);");
	set_frame_size(0X710003E864, 0X20, 32, 0);
	define_local_var(0X710003E864, 0X710003E8C8, "[bp-0X18]", "time_point");
	add_func    (0X710003E8C8,0X710003E95C);
	set_func_flags(0X710003E8C8,0x1410);
	SetType(0X710003E8C8, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__SetDeviceLocationNameWithTimeZoneRule(TimeZoneService *this, TimeZone::LocationName *name, nn::sf::detail::PointerAndSize *rule);");
	set_frame_size(0X710003E8C8, 0X20, 32, 0);
	define_local_var(0X710003E8C8, 0X710003E95C, "[bp-0X18]", "time_point");
	add_func    (0X710003E95C,0X710003E980);
	set_func_flags(0X710003E95C,0x1410);
	SetType(0X710003E95C, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__ParseTimeZoneBinary(TimeZoneService *this, TimeZone::Rule *out_rule, nn::sf::detail::PointerAndSize *binary);");
	set_frame_size(0X710003E95C, 0, 16, 0);
	add_func    (0X710003E98C,0X710003E994);
	set_func_flags(0X710003E98C,0x1400);
	SetType(0X710003E98C, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__ToCalendarTime(TimeZoneService *this, TimeZone::CalendarTime *calendar, TimeZone::CalendarAdditionalInfo *additional_info, __int64 *time, TimeZone::Rule *rule);");
	add_func    (0X710003E994,0X710003E99C);
	set_func_flags(0X710003E994,0x1400);
	SetType(0X710003E994, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__ToCalendarTimeWithMyRule(TimeZoneService *this, TimeZone::CalendarTime *out_calendar_time, TimeZone::CalendarAdditionalInfo *out_additional_info, __int64 *time);");
	add_func    (0X710003E99C,0X710003E9A4);
	set_func_flags(0X710003E99C,0x1400);
	SetType(0X710003E99C, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__ToPosixTime(TimeZoneService *this, int *out_count, __int64 *out_times, __int64 out_times_size, TimeZone::CalendarTime *calendar, TimeZone::Rule *rule);");
	add_func    (0X710003E9A4,0X710003E9AC);
	set_func_flags(0X710003E9A4,0x1400);
	SetType(0X710003E9A4, "__int64 __fastcall nn__timesrv__detail__service__TimeZoneService__ToPosixTimeWithMyRule(TimeZoneService *this, int *out_count, __int64 *out_times, unsigned __int64 out_times_size, TimeZone::CalendarTime *calendar);");
	add_func    (0X710003E9AC,0X710003E9B8);
	set_func_flags(0X710003E9AC,0x1400);
	SetType(0X710003E9AC, "void __fastcall TimeZone__SetInitialised(TimeZone *this);");
	add_func    (0X710003E9B8,0X710003E9C0);
	set_func_flags(0X710003E9B8,0x1400);
	SetType(0X710003E9B8, "bool __fastcall TImeZone__IsInitialised(TimeZone *this);");
	add_func    (0X710003E9C0,0X710003EA38);
	set_func_flags(0X710003E9C0,0x1410);
	SetType(0X710003E9C0, "__int64 __fastcall TimeZone__GetLocationName(TimeZone *this, TimeZone::LocationName *name);");
	set_frame_size(0X710003E9C0, 0, 48, 0);
	add_func    (0X710003EA38,0X710003EADC);
	set_func_flags(0X710003EA38,0x1410);
	SetType(0X710003EA38, "__int64 __fastcall TimeZone__ParseBinary(TimeZone *this, TimeZone::LocationName *name, __int64 binary, int size);");
	set_frame_size(0X710003EA38, 0X20, 32, 0);
	add_func    (0X710003EADC,0X710003EB1C);
	set_func_flags(0X710003EADC,0x1410);
	SetType(0X710003EADC, "void __fastcall TimeZone__SetTotalLocationNameCount(TimeZone *this, int total_location_name_count);");
	set_frame_size(0X710003EADC, 0X20, 16, 0);
	add_func    (0X710003EB1C,0X710003EB7C);
	set_func_flags(0X710003EB1C,0x1410);
	SetType(0X710003EB1C, "__int64 __fastcall TimeZone__GetTotalLocationNameCount(Unk1C0 *this, _DWORD *out_count);");
	set_frame_size(0X710003EB1C, 0, 48, 0);
	add_func    (0X710003EB7C,0X710003EBC8);
	set_func_flags(0X710003EB7C,0x1410);
	SetType(0X710003EB7C, "void __fastcall TimeZone__SetTimePoint(Unk1C0 *this, SteadyClockTimePoint *time_point);");
	set_frame_size(0X710003EB7C, 0X20, 16, 0);
	add_func    (0X710003EBC8,0X710003EC30);
	set_func_flags(0X710003EBC8,0x1410);
	SetType(0X710003EBC8, "__int64 __fastcall TimeZone__GetTimePoint(Unk1C0 *this, SteadyClockTimePoint *time_point);");
	set_frame_size(0X710003EBC8, 0, 48, 0);
	add_func    (0X710003EC30,0X710003EC88);
	set_func_flags(0X710003EC30,0x1410);
	SetType(0X710003EC30, "__int64 __fastcall TimeZone__ParseBinaryInto(TimeZone *this, TimeZone::Rule *out_rule, __int64 binary, int size);");
	set_frame_size(0X710003EC30, 0, 48, 0);
	add_func    (0X710003EC88,0X710003ECD0);
	set_func_flags(0X710003EC88,0x1410);
	SetType(0X710003EC88, "void __fastcall TimeZone__SetRuleVersion(TimeZone *this, _QWORD *rule_version);");
	set_frame_size(0X710003EC88, 0X20, 16, 0);
	add_func    (0X710003ECD0,0X710003ED34);
	set_func_flags(0X710003ECD0,0x1410);
	SetType(0X710003ECD0, "__int64 __fastcall TimeZone__GetTimeZoneRuleVersion(TimeZone *this, TimeZone::TimeZoneRuleVersion *out_version);");
	set_frame_size(0X710003ECD0, 0, 48, 0);
	add_func    (0X710003ED34,0X710003ED9C);
	set_func_flags(0X710003ED34,0x1410);
	SetType(0X710003ED34, "__int64 __fastcall TimeZone__ToCalendarTime(TimeZone *this, TimeZone::CalendarTime *calendar, TimeZone::CalendarAdditionalInfo *additional_info, __int64 *time, TimeZone::Rule *rule);");
	set_frame_size(0X710003ED34, 0X20, 32, 0);
	add_func    (0X710003ED9C,0X710003EE24);
	set_func_flags(0X710003ED9C,0x1410);
	SetType(0X710003ED9C, "__int64 __fastcall TimeZone__ToCalendarTimeWithMyRule(TimeZone *this, TimeZone::CalendarTime *calender_time, TimeZone::CalendarAdditionalInfo *calendar_additional, __int64 *time);");
	set_frame_size(0X710003ED9C, 0X20, 32, 0);
	add_func    (0X710003EE24,0X710003EEE0);
	set_func_flags(0X710003EE24,0x1410);
	SetType(0X710003EE24, "__int64 __fastcall TimeZone__ToPosixTime(TimeZone *this, int *out_count, __int64 *out_times, unsigned __int64 out_times_size, TimeZone::CalendarTime *calendar, TimeZone::Rule *rule);");
	set_frame_size(0X710003EE24, 0, 64, 0);
	add_func    (0X710003EEE0,0X710003EFC0);
	set_func_flags(0X710003EEE0,0x1410);
	SetType(0X710003EEE0, "__int64 __fastcall TimeZone__ToPosixTimeWithMyRule(TimeZone *this, int *out_count, __int64 *out_times, unsigned __int64 out_times_size, TimeZone::CalendarTime *calendar);");
	set_frame_size(0X710003EEE0, 0, 64, 0);
	add_func    (0X710003EFC0,0X710003F024);
	set_func_flags(0X710003EFC0,0x1410);
	SetType(0X710003EFC0, "__int64 __fastcall ParseTimeZoneBinary_W(TimeZone::Rule *out_rule, __int64 binary, int size);");
	set_frame_size(0X710003EFC0, 0X20, 16, 0);
	add_func    (0X710003F030,0X710003F28C);
	set_func_flags(0X710003F030,0x1410);
	SetType(0X710003F030, "__int64 __fastcall ToCalendarTime(TimeZone::CalendarTime *out_calendar_time, TimeZone::CalendarAdditionalInfo *out_additional_info, __int64 *time, TimeZone::Rule *rule);");
	set_frame_size(0X710003F030, 0X90, 32, 0);
	define_local_var(0X710003F030, 0X710003F28C, "[bp-0X68]", "new_name");
	define_local_var(0X710003F030, 0X710003F28C, "[bp-0X8]", "time_1");
	add_func    (0X710003F290,0X710003F538);
	set_func_flags(0X710003F290,0x1410);
	SetType(0X710003F290, "__int64 __fastcall ToPosixTime(int *out_count, _QWORD *out_times, unsigned __int64 out_times_size, TimeZone::CalendarTime *in_calendar, TimeZone::Rule *in_rule, s32 is_dst);");
	set_frame_size(0X710003F290, 0X50, 96, 0);
	define_local_var(0X710003F290, 0X710003F538, "[bp-0X48]", "calendar_internal");
	define_local_var(0X710003F290, 0X710003F538, "[bp-0X8]", "out_t");
	add_func    (0X710003F540,0X710003F5DC);
	set_func_flags(0X710003F540,0x1400);
	SetType(0X710003F540, "bool __fastcall GetTimeZoneTime(s64 *out_time, TimeZone::Rule *rule, __int64 time, int time_index, int index_offset);");
	add_func    (0X710003F5E0,0X710003F8AC);
	set_func_flags(0X710003F5E0,0x1410);
	SetType(0X710003F5E0, "TimeZone::CalendarTimeInternal *__fastcall localsub(TimeZone::Rule *rule, __int64 *time, __int64 setname, TimeZone::CalendarTimeInternal *out_calendar);");
	set_frame_size(0X710003F5E0, 0X10, 48, 0);
	add_func    (0X710003F8B0,0X710003FB20);
	set_func_flags(0X710003F8B0,0x1010);
	SetType(0X710003F8B0, "__int64 __fastcall time1(__int64 *out_time, TimeZone::CalendarTimeInternal *tmp, __int64 func, TimeZone::Rule *rule, unsigned int offset);");
	set_frame_size(0X710003F8B0, 0X120, 96, 0);
	define_local_var(0X710003F8B0, 0X710003FB20, "[bp-0X120]", "nseen_1");
	define_local_var(0X710003F8B0, 0X710003FB20, "[bp-0X118]", "sameind");
	define_local_var(0X710003F8B0, 0X710003FB20, "[bp-0X10C]", "okay");
	define_local_var(0X710003F8B0, 0X710003FB20, "[bp-0X108]", "type");
	define_local_var(0X710003F8B0, 0X710003FB20, "[bp-0X88]", "seen");
	add_func    (0X710003FB20,0X710003FB50);
	set_func_flags(0X710003FB20,0x1410);
	SetType(0X710003FB20, "__int64 __fastcall ParseTimeZoneBinary(TimeZone::Rule *out_rule, __int64 binary, int size);");
	set_frame_size(0X710003FB20, 0, 16, 0);
	add_func    (0X710003FB50,0X7100040780);
	set_func_flags(0X710003FB50,0x1410);
	SetType(0X710003FB50, "__int64 __fastcall tzloadbody(TimeZone::Rule *sp, gTimeZoneBinary *binary, int size);");
	set_frame_size(0X710003FB50, 0X130, 96, 0);
	define_local_var(0X710003FB50, 0X7100040780, "[bp-0X120]", "gotabbr");
	define_local_var(0X710003FB50, 0X7100040780, "[bp-0X108]", "name");
	add_func    (0X7100040780,0X710004079C);
	set_func_flags(0X7100040780,0x1000);
	SetType(0X7100040780, "s64 __fastcall mktime_tzname(__int64 *out_time, TimeZone::Rule *rule, TimeZone::CalendarTimeInternal *tmp);");
	set_frame_size(0X7100040780, 0X180, 0, 0);
	add_func    (0X71000407A0,0X71000407CC);
	set_func_flags(0X71000407A0,0x1410);
	SetType(0X71000407A0, "bool __fastcall localtime_rz(__int64 out_calendar, TimeZone::Rule *rule, __int64 *time);");
	set_frame_size(0X71000407A0, 0, 16, 0);
	add_func    (0X71000407D0,0X7100040C4C);
	set_func_flags(0X71000407D0,0x1410);
	SetType(0X71000407D0, "TimeZone::CalendarTimeInternal *__fastcall timesub(s64 *time, int offset, TimeZone::CalendarTimeInternal *out_calendar);");
	set_frame_size(0X71000407D0, 0, 64, 0);
	add_func    (0X7100040C50,0X7100041348);
	set_func_flags(0X7100040C50,0x1410);
	SetType(0X7100040C50, "__int64 __fastcall tzparse(unsigned __int8 *name, TimeZone::Rule *sp);");
	set_frame_size(0X7100040C50, 0X70, 96, 0);
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X5C]", "year_beg_1");
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X4C]", "yearlim_1");
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X48]", "dstoffset_1");
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X44]", "stdoffset_1");
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X40]", "timecnt_1");
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X38]", "end");
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X20]", "start");
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X8]", "dstoffset");
	define_local_var(0X7100040C50, 0X7100041348, "[bp-0X4]", "stdoffset");
	add_func    (0X7100041350,0X7100041484);
	set_func_flags(0X7100041350,0x1400);
	SetType(0X7100041350, "char *__fastcall getoffset(char *name, int *gmt_offset);");
	add_func    (0X7100041490,0X7100041664);
	set_func_flags(0X7100041490,0x1400);
	SetType(0X7100041490, "char *__fastcall getrule(char *name, rule *out_rule);");
	add_func    (0X7100041670,0X7100041910);
	set_func_flags(0X7100041670,0x1400);
	SetType(0X7100041670, "__int64 __fastcall transtime(int year, rule *rule, int offset);");
	add_func    (0X7100041910,0X7100041FE0);
	set_func_flags(0X7100041910,0x1410);
	SetType(0X7100041910, "__int64 __fastcall time2sub(_QWORD *out_time, TimeZone::CalendarTimeInternal *tmp, __int64 (__fastcall *func)(__int64, __int64 *, _QWORD, int *), TimeZone::Rule *rule, unsigned int offset, _BYTE *okay, bool do_norm_secs);");
	set_frame_size(0X7100041910, 0XC0, 96, 0);
	define_local_var(0X7100041910, 0X7100041FE0, "[bp-0XAC]", "saved_seconds");
	define_local_var(0X7100041910, 0X7100041FE0, "[bp-0X98]", "my_tm");
	define_local_var(0X7100041910, 0X7100041FE0, "[bp-0X58]", "your_tm");
	define_local_var(0X7100041910, 0X7100041FE0, "[bp-0X18]", "t");
	define_local_var(0X7100041910, 0X7100041FE0, "[bp-0X10]", "newt");
	add_func    (0X7100041FE0,0X7100042054);
	set_func_flags(0X7100041FE0,0x1400);
	SetType(0X7100041FE0, "int __fastcall tmcomp(TimeZone::CalendarTimeInternal *my_tm, TimeZone::CalendarTimeInternal *your_tm);");
	add_func    (0X7100042054,0X7100042064);
	set_func_flags(0X7100042054,0x1400);
	SetType(0X7100042054, "void __fastcall nn__timesrv__detail__service__AlarmService__AlarmService(AlarmService *this, TimeServer *time, __int64 heap);");
	add_func    (0X7100042064,0X7100042068);
	set_func_flags(0X7100042064,0x1440);
	SetType(0X7100042064, "__int64 __fastcall nullsub_7(_QWORD);");
	add_func    (0X7100042068,0X71000421A8);
	set_func_flags(0X7100042068,0x1410);
	SetType(0X7100042068, "__int64 __fastcall nn__timesrv__detail__service__AlarmService__CreateWakeupAlarm(AlarmService *this, SteadyClockAlarm_Wrap ***out_alarm);");
	set_frame_size(0X7100042068, 0X20, 32, 0);
	add_func    (0X71000421A8,0X71000422E8);
	set_func_flags(0X71000421A8,0x1410);
	SetType(0X71000421A8, "__int64 __fastcall nn__timesrv__detail__service__AlarmService__CreateBackgroundTaskAlarm(AlarmService *this, unsigned __int64 ***out_alarm);");
	set_frame_size(0X71000421A8, 0X20, 32, 0);
	add_func    (0X71000422E8,0X71000422F0);
	set_func_flags(0X71000422E8,0x1400);
	add_func    (0X71000422F0,0X7100042358);
	set_func_flags(0X71000422F0,0x1410);
	set_frame_size(0X71000422F0, 0X20, 16, 0);
	add_func    (0X7100042358,0X7100042360);
	set_func_flags(0X7100042358,0x1400);
	SetType(0X7100042358, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClockAlarm__GetAlarmEvent(SteadyClockAlarm_Wrap *this, nn::sf::NativeHandle *out_handle);");
	add_func    (0X7100042360,0X7100042388);
	set_func_flags(0X7100042360,0x1410);
	SetType(0X7100042360, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClockAlarm__Enable(SteadyClockAlarm_Wrap *this, __int64 alert_time);");
	set_frame_size(0X7100042360, 0X10, 16, 0);
	add_func    (0X7100042388,0X7100042390);
	set_func_flags(0X7100042388,0x1400);
	SetType(0X7100042388, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClockAlarm__Disable(SteadyClockAlarm_Wrap *this);");
	add_func    (0X7100042390,0X7100042398);
	set_func_flags(0X7100042390,0x1400);
	SetType(0X7100042390, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClockAlarm__IsEnabled(SteadyClockAlarm_Wrap *this, bool *is_enabled);");
	add_func    (0X7100042398,0X71000423C4);
	set_func_flags(0X7100042398,0x1410);
	SetType(0X7100042398, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClockAlarm__CreateWakeLock(SteadyClockAlarm_Wrap *this, nn::psc::sf::IPmStateLock **out_service);");
	set_frame_size(0X7100042398, 0X10, 16, 0);
	add_func    (0X71000423C4,0X71000423CC);
	set_func_flags(0X71000423C4,0x1400);
	SetType(0X71000423C4, "__int64 __fastcall nn__timesrv__detail__service__ISteadyClockAlarm__DestroyWakeLock(SteadyClockAlarm_Wrap *this);");
	add_func    (0X71000423CC,0X71000423D0);
	set_func_flags(0X71000423CC,0x1440);
	add_func    (0X71000423D0,0X71000423DC);
	set_func_flags(0X71000423D0,0x1400);
	SetType(0X71000423D0, "void __fastcall nn__timesrv__detail__service__SteadyClockAlarm__SteadyClockAlarm(SteadyClockAlarm *this, Alarms *alarms, AlarmType alarm_type);");
	add_func    (0X71000423DC,0X7100042408);
	set_func_flags(0X71000423DC,0x1410);
	set_frame_size(0X71000423DC, 0X20, 0, 0);
	add_func    (0X7100042408,0X710004244C);
	set_func_flags(0X7100042408,0x1410);
	SetType(0X7100042408, "__int64 __fastcall nn__timesrv__detail__service__SteadyClockAlarm__GetAlarmEvent(SteadyClockAlarm *this, nn::sf::NativeHandle *out_handle);");
	set_frame_size(0X7100042408, 0X20, 0, 0);
	add_func    (0X710004244C,0X7100042480);
	set_func_flags(0X710004244C,0x1410);
	SetType(0X710004244C, "__int64 __fastcall nn__timesrv__detail__service__SteadyClockAlarm__Enable(SteadyClockAlarm *this, __int64 *alert_time);");
	set_frame_size(0X710004244C, 0X10, 16, 0);
	add_func    (0X7100042480,0X71000424A0);
	set_func_flags(0X7100042480,0x1410);
	SetType(0X7100042480, "__int64 __fastcall nn__timesrv__detail__service__SteadyClockAlarm__Disable(SteadyClockAlarm *this);");
	set_frame_size(0X7100042480, 0, 16, 0);
	add_func    (0X71000424BC,0X710004255C);
	set_func_flags(0X71000424BC,0x1410);
	SetType(0X71000424BC, "__int64 __fastcall nn__timesrv__detail__service__SteadyClockAlarm__CreateWakeLock(SteadyClockAlarm *this, nn::psc::sf::IPmStateLock **out_service);");
	set_frame_size(0X71000424BC, 0X20, 16, 0);
	add_func    (0X710004255C,0X71000425B4);
	set_func_flags(0X710004255C,0x1410);
	SetType(0X710004255C, "__int64 __fastcall nn__timesrv__detail__service__SteadyClockAlarm__DestroyWakeLock(SteadyClockAlarm *this);");
	set_frame_size(0X710004255C, 0, 32, 0);
	add_func    (0X71000425B4,0X7100042754);
	set_func_flags(0X71000425B4,0x1410);
	SetType(0X71000425B4, "void __fastcall nn__timesrv__detail__service__TimeServiceManager__TimeServiceManager(TimeServiceManager *this, TimeServer *time, __int64 heap);");
	set_frame_size(0X71000425B4, 0X20, 64, 0);
	add_func    (0X7100042754,0X7100042880);
	set_func_flags(0X7100042754,0x1410);
	SetType(0X7100042754, "void __fastcall TimeServiceManager_Finalise(TimeServiceManager *this);");
	set_frame_size(0X7100042754, 0, 48, 0);
	add_func    (0X7100042880,0X71000429C4);
	set_func_flags(0X7100042880,0x1410);
	SetType(0X7100042880, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetStaticServiceAsUser(TimeServiceManager *this, StaticService_Wrap2 ***out_service);");
	set_frame_size(0X7100042880, 0X20, 32, 0);
	add_func    (0X71000429C4,0X7100042B08);
	set_func_flags(0X71000429C4,0x1410);
	SetType(0X71000429C4, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetStaticServiceAsAdmin(TimeServiceManager *this, unsigned __int64 **out_service);");
	set_frame_size(0X71000429C4, 0X20, 32, 0);
	add_func    (0X7100042B08,0X7100042C4C);
	set_func_flags(0X7100042B08,0x1410);
	SetType(0X7100042B08, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetStaticServiceAsRepair(TimeServiceManager *this, unsigned __int64 **out_service);");
	set_frame_size(0X7100042B08, 0X20, 32, 0);
	add_func    (0X7100042C4C,0X7100042D90);
	set_func_flags(0X7100042C4C,0x1410);
	SetType(0X7100042C4C, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetStaticServiceAsServiceManager(TimeServiceManager *this, unsigned __int64 **out_service);");
	set_frame_size(0X7100042C4C, 0X20, 32, 0);
	add_func    (0X7100042D90,0X7100042E40);
	set_func_flags(0X7100042D90,0x1410);
	SetType(0X7100042D90, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__SetupStandardSteadyClockCore(TimeServiceManager *this, _QWORD *uuid, __int64 rtc_offset, __int64 internal_offset, __int64 test_offset, char is_rtc_reset_detected);");
	set_frame_size(0X7100042D90, 0X60, 16, 0);
	define_local_var(0X7100042D90, 0X7100042E40, "[bp-0X60]", "rtc_offset_1");
	define_local_var(0X7100042D90, 0X7100042E40, "[bp-0X28]", "test_offset_1");
	define_local_var(0X7100042D90, 0X7100042E40, "[bp-0X8]", "internal_offset_1");
	add_func    (0X7100042E40,0X7100042EBC);
	set_func_flags(0X7100042E40,0x1410);
	SetType(0X7100042E40, "void __fastcall TimeServiceManager__ValidateInitialisedAndSetupServices(TimeServiceManager *this);");
	set_frame_size(0X7100042E40, 0X20, 0, 0);
	add_func    (0X7100042EBC,0X7100042F10);
	set_func_flags(0X7100042EBC,0x1410);
	SetType(0X7100042EBC, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__SetupStandardLocalSystemClockCore(TimeServiceManager *this, SystemClockContext *context, s64 time);");
	set_frame_size(0X7100042EBC, 0X10, 32, 0);
	define_local_var(0X7100042EBC, 0X7100042F10, "[bp-0X8]", "time");
	add_func    (0X7100042F10,0X7100042F68);
	set_func_flags(0X7100042F10,0x1410);
	SetType(0X7100042F10, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__SetupStandardNetworkSystemClockCore(TimeServiceManager *this, SystemClockContext *context, __int64 accuracy);");
	set_frame_size(0X7100042F10, 0X20, 16, 0);
	add_func    (0X7100042F68,0X7100042FD8);
	set_func_flags(0X7100042F68,0x1410);
	SetType(0X7100042F68, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__SetupStandardUserSystemClockCore(TimeServiceManager *this, bool automatic_correction, SteadyClockTimePoint *time_point);");
	set_frame_size(0X7100042F68, 0X20, 16, 0);
	add_func    (0X7100042FD8,0X7100043064);
	set_func_flags(0X7100042FD8,0x1410);
	SetType(0X7100042FD8, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__SetupTimeZoneServiceCore(TimeServiceManager *this, TimeZone::LocationName *name, SteadyClockTimePoint *time_point, unsigned int total_location_name_count, __int64 rule_version, nn::sf::detail::PointerAndSize *rule);");
	set_frame_size(0X7100042FD8, 0X10, 48, 0);
	add_func    (0X7100043064,0X71000430A0);
	set_func_flags(0X7100043064,0x1410);
	SetType(0X7100043064, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__SetupEphemeralNetworkSystemClockCore(TimeServiceManager *this);");
	set_frame_size(0X7100043064, 0X20, 0, 0);
	add_func    (0X71000430A0,0X71000430E4);
	set_func_flags(0X71000430A0,0x1410);
	SetType(0X71000430A0, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetStandardLocalClockOperationEvent(TimeServiceManager *this, nn::sf::NativeHandle *handle_1);");
	set_frame_size(0X71000430A0, 0X20, 0, 0);
	add_func    (0X71000430E4,0X7100043128);
	set_func_flags(0X71000430E4,0x1410);
	SetType(0X71000430E4, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetStandardNetworkClockOperationEventForServiceManager(TimeServiceManager *this, nn::sf::NativeHandle *handle_1);");
	set_frame_size(0X71000430E4, 0X20, 0, 0);
	add_func    (0X7100043128,0X710004316C);
	set_func_flags(0X7100043128,0x1410);
	SetType(0X7100043128, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetEphemeralNetworkClockOperationEventForServiceManager(TimeServiceManager *this, nn::sf::NativeHandle *handle_1);");
	set_frame_size(0X7100043128, 0X20, 0, 0);
	add_func    (0X710004316C,0X71000431B4);
	set_func_flags(0X710004316C,0x1410);
	SetType(0X710004316C, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetStandardUserSystemClockAutomaticCorrectionUpdatedEvent(TimeServiceManager *this, nn::sf::NativeHandle *handle_1);");
	set_frame_size(0X710004316C, 0X20, 0, 0);
	add_func    (0X71000431B4,0X7100043238);
	set_func_flags(0X71000431B4,0x1410);
	SetType(0X71000431B4, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__SetStandardSteadyClockBaseTime(TimeServiceManager *this, s64 new_base);");
	set_frame_size(0X71000431B4, 0X40, 32, 0);
	define_local_var(0X71000431B4, 0X7100043238, "[bp-0X8]", "time");
	add_func    (0X7100043238,0X7100043280);
	set_func_flags(0X7100043238,0x1410);
	SetType(0X7100043238, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetClosestAlarmUpdatedEvent(TimeServiceManager *this, nn::sf::NativeHandle *out_handle);");
	set_frame_size(0X7100043238, 0X20, 0, 0);
	add_func    (0X7100043280,0X710004329C);
	set_func_flags(0X7100043280,0x1410);
	SetType(0X7100043280, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__CheckAndSignalAlarms(TimeServiceManager *this);");
	set_frame_size(0X7100043280, 0, 16, 0);
	add_func    (0X710004329C,0X7100043320);
	set_func_flags(0X710004329C,0x1410);
	SetType(0X710004329C, "__int64 __fastcall nn__timesrv__detail__service__TimeServiceManager__GetClosestAlarmInfo(TimeServiceManager *this, bool *out_valid, AlarmInfo *out_info, s64 *out_time);");
	set_frame_size(0X710004329C, 0X10, 48, 0);
	define_local_var(0X710004329C, 0X7100043320, "[bp-0X8]", "alarm");
	add_func    (0X7100043320,0X7100043328);
	set_func_flags(0X7100043320,0x1400);
	SetType(0X7100043320, "__int64 __fastcall sub_7100043320(__int64);");
	add_func    (0X7100043328,0X7100043390);
	set_func_flags(0X7100043328,0x1410);
	set_frame_size(0X7100043328, 0X20, 16, 0);
	add_func    (0X7100043390,0X7100043394);
	set_func_flags(0X7100043390,0x1440);
	add_func    (0X7100043394,0X71000433A4);
	set_func_flags(0X7100043394,0x1400);
	SetType(0X7100043394, "PowerStateRequestHandler *__fastcall nn__timesrv__detail__service__IPowerStateRequestHandler__IPowerStateRequestHandler(PowerStateRequestHandler *this, TimeServer *time);");
	add_func    (0X71000433A4,0X71000433A8);
	set_func_flags(0X71000433A4,0x1440);
	SetType(0X71000433A4, "__int64 __fastcall nullsub_8(_QWORD);");
	add_func    (0X71000433A8,0X71000433F0);
	set_func_flags(0X71000433A8,0x1410);
	SetType(0X71000433A8, "__int64 __fastcall nn__timesrv__detail__service__PowerStateRequestHandler__GetPowerStateRequestEventReadableHandle(PowerStateRequestHandler *this, nn::sf::NativeHandle *out_handle);");
	set_frame_size(0X71000433A8, 0X20, 0, 0);
	add_func    (0X71000433F0,0X710004343C);
	set_func_flags(0X71000433F0,0x1410);
	SetType(0X71000433F0, "__int64 __fastcall nn__timesrv__detail__service__PowerStateRequestHandler__GetAndClearPowerStateRequest(PowerStateRequestHandler *this, bool *out_cleared, _DWORD *out_prio);");
	set_frame_size(0X71000433F0, 0X10, 32, 0);
	add_func    (0X710004343C,0X710004361C);
	set_func_flags(0X710004343C,0x1410);
	SetType(0X710004343C, "__int64 __fastcall GetService_PSCLock(__int64 *, int);");
	set_frame_size(0X710004343C, 0X10, 48, 0);
	add_func    (0X710004361C,0X7100043654);
	set_func_flags(0X710004361C,0x1410);
	SetType(0X710004361C, "__int64 __fastcall nn__psc__sf__IPmStateLock__Lock_0(nn::psc::sf::IPmStateLock **lock_service);");
	set_frame_size(0X710004361C, 0X10, 16, 0);
	add_func    (0X7100043654,0X710004365C);
	set_func_flags(0X7100043654,0x1400);
	add_func    (0X710004365C,0X710004370C);
	set_func_flags(0X710004365C,0x1410);
	SetType(0X710004365C, "__int64 __fastcall sub_710004365C(__int64);");
	set_frame_size(0X710004365C, 0XA0, 48, 0);
	add_func    (0X710004370C,0X7100043714);
	set_func_flags(0X710004370C,0x1400);
	SetType(0X710004370C, "__int64 __fastcall sub_710004370C(__int64);");
	add_func    (0X7100043714,0X7100043724);
	set_func_flags(0X7100043714,0x1000);
	SetType(0X7100043714, "__int64 __fastcall nn__psc__sf__IPmStateLock__Initialize(__int64, int);");
	set_frame_size(0X7100043714, 0XB0, 0, 0);
	add_func    (0X7100043724,0X7100043730);
	set_func_flags(0X7100043724,0x1000);
	SetType(0X7100043724, "void __fastcall nn__psc__sf__IPmStateLock__Lock(__int64);");
	set_frame_size(0X7100043724, 0XA8, 0, 0);
	add_func    (0X7100043730,0X710004373C);
	set_func_flags(0X7100043730,0x1000);
	SetType(0X7100043730, "void __fastcall nn__psc__sf__IPmStateLock__Unlock(__int64);");
	set_frame_size(0X7100043730, 0XA8, 0, 0);
	add_func    (0X710004373C,0X7100043748);
	set_func_flags(0X710004373C,0x1000);
	SetType(0X710004373C, "void __fastcall nn__psc__sf__IPmStateLock__IsLocked(__int64, _BYTE *);");
	set_frame_size(0X710004373C, 0XB0, 0, 0);
	add_func    (0X7100043748,0X7100043754);
	set_func_flags(0X7100043748,0x1400);
	SetType(0X7100043748, "__int64 __fastcall nn__psc__sf__IPmStateLock__GetLockState(__int64, _DWORD *);");
	add_func    (0X7100043754,0X710004375C);
	set_func_flags(0X7100043754,0x1400);
	SetType(0X7100043754, "__int64 __fastcall sub_7100043754(__int64);");
	add_func    (0X710004375C,0X7100043764);
	set_func_flags(0X710004375C,0x1400);
	SetType(0X710004375C, "__int64 __fastcall sub_710004375C(__int64);");
	add_func    (0X7100043764,0X7100043864);
	set_func_flags(0X7100043764,0x1410);
	SetType(0X7100043764, "__int64 __fastcall sub_7100043764(__int64, unsigned int);");
	set_frame_size(0X7100043764, 0X70, 48, 0);
	add_func    (0X7100043864,0X7100043950);
	set_func_flags(0X7100043864,0x1410);
	SetType(0X7100043864, "__int64 __fastcall sub_7100043864(__int64, _BYTE *, unsigned int);");
	set_frame_size(0X7100043864, 0X90, 32, 0);
	add_func    (0X7100043950,0X71000439D4);
	set_func_flags(0X7100043950,0x1410);
	SetType(0X7100043950, "bool __fastcall sub_7100043950(unsigned __int8 *);");
	set_frame_size(0X7100043950, 0, 32, 0);
	add_func    (0X71000439D4,0X7100043A3C);
	set_func_flags(0X71000439D4,0x1410);
	SetType(0X71000439D4, "__int64 __fastcall sub_71000439D4(_QWORD);");
	set_frame_size(0X71000439D4, 0, 48, 0);
	add_func    (0X7100043A3C,0X7100044A8C);
	set_func_flags(0X7100043A3C,0x1400);
	set_frame_size(0X7100043A3C, 0X70, 0, 0);
	add_func    (0X7100044A90,0X7100044A9C);
	set_func_flags(0X7100044A90,0x1400);
	SetType(0X7100044A90, "__int64 sub_7100044A90();");
	add_func    (0X7100044AA0,0X7100044AA4);
	set_func_flags(0X7100044AA0,0x1440);
	add_func    (0X7100044AB0,0X7100044B20);
	set_func_flags(0X7100044AB0,0x1410);
	set_frame_size(0X7100044AB0, 0X20, 0, 0);
	add_func    (0X7100044B20,0X7100044B8C);
	set_func_flags(0X7100044B20,0x1410);
	set_frame_size(0X7100044B20, 0X20, 16, 0);
	add_func    (0X7100044B90,0X7100044B9C);
	set_func_flags(0X7100044B90,0x1400);
	add_func    (0X7100044B9C,0X7100044BA4);
	set_func_flags(0X7100044B9C,0x1400);
	SetType(0X7100044B9C, "__int64 __fastcall sub_7100044B9C(unsigned int *);");
	add_func    (0X7100044BA4,0X7100044BBC);
	set_func_flags(0X7100044BA4,0x1400);
	add_func    (0X7100044BC0,0X7100044BE4);
	set_func_flags(0X7100044BC0,0x1400);
	add_func    (0X7100044BF0,0X7100044CAC);
	set_func_flags(0X7100044BF0,0x1410);
	set_frame_size(0X7100044BF0, 0X20, 16, 0);
	add_func    (0X7100044CB0,0X7100044D28);
	set_func_flags(0X7100044CB0,0x1410);
	set_frame_size(0X7100044CB0, 0X20, 0, 0);
	add_func    (0X7100044D30,0X7100044D4C);
	set_func_flags(0X7100044D30,0x1410);
	set_frame_size(0X7100044D30, 0, 16, 0);
	add_func    (0X7100044D50,0X7100044DB0);
	set_func_flags(0X7100044D50,0x1400);
	add_func    (0X7100044DB0,0X7100044E84);
	set_func_flags(0X7100044DB0,0x1400);
	set_frame_size(0X7100044DB0, 0X20, 0, 0);
	add_func    (0X7100044E90,0X7100044ED8);
	set_func_flags(0X7100044E90,0x1400);
	set_frame_size(0X7100044E90, 0X20, 0, 0);
	add_func    (0X7100044EE0,0X71000450A4);
	set_func_flags(0X7100044EE0,0x1400);
	set_frame_size(0X7100044EE0, 0X10, 0, 0);
	add_func    (0X71000450B0,0X710004559C);
	set_func_flags(0X71000450B0,0x1400);
	set_frame_size(0X71000450B0, 0XA0, 0, 0);
	add_func    (0X71000455A0,0X71000455D0);
	set_func_flags(0X71000455A0,0x1400);
	add_func    (0X71000455D0,0X71000455E4);
	set_func_flags(0X71000455D0,0x1400);
	add_func    (0X71000455F0,0X7100045AA8);
	set_func_flags(0X71000455F0,0x1400);
	set_frame_size(0X71000455F0, 0XD0, 0, 0);
	add_func    (0X7100045AB0,0X7100045B28);
	set_func_flags(0X7100045AB0,0x1400);
	set_frame_size(0X7100045AB0, 0X10, 0, 0);
	add_func    (0X7100045B30,0X7100045B8C);
	set_func_flags(0X7100045B30,0x1400);
	set_frame_size(0X7100045B30, 0X10, 0, 0);
	add_func    (0X7100045B90,0X7100045BAC);
	set_func_flags(0X7100045B90,0x1400);
	set_frame_size(0X7100045B90, 0X20, 0, 0);
	add_func    (0X7100045BB0,0X7100045C34);
	set_func_flags(0X7100045BB0,0x1400);
	set_frame_size(0X7100045BB0, 0X10, 0, 0);
	add_func    (0X7100045C40,0X7100045CA8);
	set_func_flags(0X7100045C40,0x1400);
	set_frame_size(0X7100045C40, 0X10, 0, 0);
	add_func    (0X7100045CB0,0X7100045CB4);
	set_func_flags(0X7100045CB0,0x1440);
	add_func    (0X7100045CC0,0X7100045CC4);
	set_func_flags(0X7100045CC0,0x1480);
	add_func    (0X7100045CD0,0X7100045CD4);
	set_func_flags(0X7100045CD0,0x1440);
	add_func    (0X7100045CE0,0X7100045CE4);
	set_func_flags(0X7100045CE0,0x14c0);
	SetType(0X7100045CE0, "__int64 __fastcall j_ThreadLocalRegion__GetErrnoValPtr(__int64 a1);");
	add_func    (0X7100045CF0,0X7100045D5C);
	set_func_flags(0X7100045CF0,0x1410);
	set_frame_size(0X7100045CF0, 0, 32, 0);
	add_func    (0X7100045D60,0X7100045DCC);
	set_func_flags(0X7100045D60,0x1410);
	SetType(0X7100045D60, "__int64 __fastcall sub_7100045D60(__int64);");
	set_frame_size(0X7100045D60, 0X20, 16, 0);
	add_func    (0X7100045DD0,0X7100045DD4);
	set_func_flags(0X7100045DD0,0x14c0);
	SetType(0X7100045DD0, "void __fastcall j_nn__os__SdkMutexType__Lock(unsigned int *);");
	add_func    (0X7100045DE0,0X7100045DE4);
	set_func_flags(0X7100045DE0,0x14c0);
	SetType(0X7100045DE0, "void __fastcall j_nn__os__SdkMutexType__Unlock(unsigned int *);");
	add_func    (0X7100045DF0,0X7100045F68);
	set_func_flags(0X7100045DF0,0x1410);
	set_frame_size(0X7100045DF0, 0X140, 64, 0);
	add_func    (0X7100045F70,0X7100046E10);
	set_func_flags(0X7100045F70,0x1410);
	set_frame_size(0X7100045F70, 0X1B0, 96, 0);
	add_func    (0X7100046E10,0X7100047060);
	set_func_flags(0X7100046E10,0x1400);
	add_func    (0X7100047060,0X7100047108);
	set_func_flags(0X7100047060,0x1410);
	set_frame_size(0X7100047060, 0X120, 16, 0);
	add_func    (0X7100047110,0X710004868C);
	set_func_flags(0X7100047110,0x1410);
	set_frame_size(0X7100047110, 0X1EC0, 96, 0);
	add_func    (0X7100048690,0X7100049ABC);
	set_func_flags(0X7100048690,0x1410);
	set_frame_size(0X7100048690, 0X370, 96, 0);
	add_func    (0X7100049AC0,0X7100049AF0);
	set_func_flags(0X7100049AC0,0x1410);
	set_frame_size(0X7100049AC0, 0, 16, 0);
	add_func    (0X7100049AF0,0X7100049B08);
	set_func_flags(0X7100049AF0,0x1400);
	add_func    (0X7100049B10,0X7100049CE0);
	set_func_flags(0X7100049B10,0x1400);
	add_func    (0X7100049CE0,0X7100049E98);
	set_func_flags(0X7100049CE0,0x1400);
	SetType(0X7100049CE0, "__int64 __fastcall memcpy(void *dst, void *src, unsigned __int64 size);");
	add_func    (0X7100049FD0,0X710004A144);
	set_func_flags(0X7100049FD0,0x1400);
	SetType(0X7100049FD0, "char *__fastcall memmove(char *name, char *binary, unsigned __int64 size);");
	add_func    (0X710004A150,0X710004A220);
	set_func_flags(0X710004A150,0x1400);
	SetType(0X710004A150, "unsigned __int8 *__fastcall memset(unsigned __int8 *result, unsigned __int8, unsigned __int64);");
	add_func    (0X710004A220,0X710004A234);
	set_func_flags(0X710004A220,0x1400);
	add_func    (0X710004A240,0X710004A280);
	set_func_flags(0X710004A240,0x1410);
	set_frame_size(0X710004A240, 0X20, 0, 0);
	add_func    (0X710004A280,0X710004A2B0);
	set_func_flags(0X710004A280,0x1410);
	set_frame_size(0X710004A280, 0, 16, 0);
	add_func    (0X710004A2D0,0X710004A2EC);
	set_func_flags(0X710004A2D0,0x1410);
	set_frame_size(0X710004A2D0, 0, 16, 0);
	add_func    (0X710004A2F0,0X710004A40C);
	set_func_flags(0X710004A2F0,0x1410);
	set_frame_size(0X710004A2F0, 0, 16, 0);
	add_func    (0X710004A410,0X710004A51C);
	set_func_flags(0X710004A410,0x1410);
	set_frame_size(0X710004A410, 0, 48, 0);
	add_func    (0X710004A520,0X710004A568);
	set_func_flags(0X710004A520,0x1400);
	add_func    (0X710004A5E0,0X710004A6C4);
	set_func_flags(0X710004A5E0,0x1410);
	set_frame_size(0X710004A5E0, 0X120, 0, 0);
	add_func    (0X710004A6D0,0X710004A784);
	set_func_flags(0X710004A6D0,0x1410);
	set_frame_size(0X710004A6D0, 0X20, 32, 0);
	add_func    (0X710004A790,0X710004A7B4);
	set_func_flags(0X710004A790,0x1410);
	SetType(0X710004A790, "__int64 __fastcall strcpy(__int64, __int64 *);");
	set_frame_size(0X710004A790, 0X20, 0, 0);
	add_func    (0X710004A7C0,0X710004A92C);
	set_func_flags(0X710004A7C0,0x1400);
	SetType(0X710004A7C0, "_BYTE *__fastcall sub_710004A7C0(_BYTE *result, __int64 *);");
	add_func    (0X710004A930,0X710004AA20);
	set_func_flags(0X710004A930,0x1400);
	SetType(0X710004A930, "_BYTE *__fastcall strlen(__int64);");
	add_func    (0X710004AA20,0X710004AA58);
	set_func_flags(0X710004AA20,0x1410);
	set_frame_size(0X710004AA20, 0, 32, 0);
	add_func    (0X710004AA60,0X710004AAB8);
	set_func_flags(0X710004AA60,0x1400);
	set_frame_size(0X710004AA60, 0X10, 0, 0);
	add_func    (0X710004AAC0,0X710004AAD4);
	set_func_flags(0X710004AAC0,0x1400);
	set_frame_size(0X710004AAC0, 0X10, 0, 0);
	add_func    (0X710004AAE0,0X710004AB54);
	set_func_flags(0X710004AAE0,0x1410);
	set_frame_size(0X710004AAE0, 0X20, 0, 0);
	add_func    (0X710004AB60,0X710004AC2C);
	set_func_flags(0X710004AB60,0x1410);
	set_frame_size(0X710004AB60, 0X50, 0, 0);
	add_func    (0X710004AC40,0X710004AD2C);
	set_func_flags(0X710004AC40,0x1400);
	add_func    (0X710004AD40,0X710004AE0C);
	set_func_flags(0X710004AD40,0x1400);
	SetType(0X710004AD40, "__int64 __fastcall strcmp(_BYTE *, unsigned __int8 *);");
	add_func    (0X710004AE10,0X710004AE14);
	set_func_flags(0X710004AE10,0x14c0);
	SetType(0X710004AE10, "void __fastcall nn__os__SdkMutexType__Lock(unsigned int *);");
	add_func    (0X710004AE20,0X710004AE24);
	set_func_flags(0X710004AE20,0x14c0);
	SetType(0X710004AE20, "void __fastcall nn__os__SdkMutexType__Unlock(unsigned int *);");
	add_func    (0X710004AE30,0X710004AE34);
	set_func_flags(0X710004AE30,0x14c0);
	SetType(0X710004AE30, "void __fastcall nn__os__SdkMutexType__Unlock(unsigned int *);");
	add_func    (0X710004AE50,0X710004AE60);
	set_func_flags(0X710004AE50,0x1400);
	SetType(0X710004AE50, "void sub_710004AE50();");
	add_func    (0X710004AE60,0X710004AE78);
	set_func_flags(0X710004AE60,0x1410);
	set_frame_size(0X710004AE60, 0, 16, 0);
	add_func    (0X710004AE80,0X710004AE84);
	set_func_flags(0X710004AE80,0x1440);
	add_func    (0X710004AE90,0X710004AE9C);
	set_func_flags(0X710004AE90,0x1400);
	SetType(0X710004AE90, "unsigned __int64 nn__svc__ThreadLocalRegion__GetLocalePtr();");
	add_func    (0X710004AEA0,0X710004AEAC);
	set_func_flags(0X710004AEA0,0x1400);
	SetType(0X710004AEA0, "__int64 __fastcall nn__svc__ThreadLocalRegion__GetErrnoValPtr(__int64 a1);");
	add_func    (0X710004AED0,0X710004AEE0);
	set_func_flags(0X710004AED0,0x14c0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
	Functions_1();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X7100000000,"T",0,3);
	split_sreg_range(0X710004B000,"T",0,3);
	split_sreg_range(0X710005D510,"T",0,3);
	split_sreg_range(0X7100060CFC,"T",0,3);
	split_sreg_range(0X710006F000,"T",0,3);
	split_sreg_range(0X7100076000,"T",0,3);
	split_sreg_range(0X7100100008,"T",0,3);
	split_sreg_range(0X7100000000,"DS",0,3);
	split_sreg_range(0X710004B000,"DS",0,3);
	split_sreg_range(0X710005D510,"DS",0,3);
	split_sreg_range(0X7100060CFC,"DS",0,3);
	split_sreg_range(0X710006F000,"DS",0,3);
	split_sreg_range(0X7100076000,"DS",0,3);
	split_sreg_range(0X7100100008,"DS",0,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
	Bytes_4();
	Bytes_5();
	Bytes_6();
	Bytes_7();
	Bytes_8();
	Bytes_9();
	Bytes_10();
	Bytes_11();
	Bytes_12();
        end_type_updating(UTP_STRUCT);
}

// End of file.
